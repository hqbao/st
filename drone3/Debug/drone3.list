
drone3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000975c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080098f0  080098f0  000198f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d0  080099d0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d8  080099d8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099dc  080099dc  000199dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080099e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          000006bc  200000b8  200000b8  000200b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000774  20000774  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001641b  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b1f  00000000  00000000  000364ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00039020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0003a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230ea  00000000  00000000  0003b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177a7  00000000  00000000  0005e6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d169f  00000000  00000000  00075e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147520  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059c4  00000000  00000000  00147570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098d4 	.word	0x080098d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	080098d4 	.word	0x080098d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 b974 	b.w	8000ecc <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468e      	mov	lr, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14d      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	d969      	bls.n	8000ce4 <__udivmoddi4+0xe8>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b152      	cbz	r2, 8000c2c <__udivmoddi4+0x30>
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	f1c2 0120 	rsb	r1, r2, #32
 8000c1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c26:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2a:	4094      	lsls	r4, r2
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	0c21      	lsrs	r1, r4, #16
 8000c32:	fbbe f6f8 	udiv	r6, lr, r8
 8000c36:	fa1f f78c 	uxth.w	r7, ip
 8000c3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c42:	fb06 f107 	mul.w	r1, r6, r7
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c52:	f080 811f 	bcs.w	8000e94 <__udivmoddi4+0x298>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 811c 	bls.w	8000e94 <__udivmoddi4+0x298>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 f707 	mul.w	r7, r0, r7
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x92>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c80:	f080 810a 	bcs.w	8000e98 <__udivmoddi4+0x29c>
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	f240 8107 	bls.w	8000e98 <__udivmoddi4+0x29c>
 8000c8a:	4464      	add	r4, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	1be4      	subs	r4, r4, r7
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa4>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xc2>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	f000 80ef 	beq.w	8000e8e <__udivmoddi4+0x292>
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f683 	clz	r6, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d14a      	bne.n	8000d5c <__udivmoddi4+0x160>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd4>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80f9 	bhi.w	8000ec2 <__udivmoddi4+0x2c6>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	469e      	mov	lr, r3
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa4>
 8000cde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xec>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 8092 	bne.w	8000e16 <__udivmoddi4+0x21a>
 8000cf2:	eba1 010c 	sub.w	r1, r1, ip
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	2601      	movs	r6, #1
 8000d00:	0c20      	lsrs	r0, r4, #16
 8000d02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d06:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0e:	fb0e f003 	mul.w	r0, lr, r3
 8000d12:	4288      	cmp	r0, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x12c>
 8000d16:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x12a>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f200 80cb 	bhi.w	8000ebc <__udivmoddi4+0x2c0>
 8000d26:	4643      	mov	r3, r8
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d30:	fb07 1110 	mls	r1, r7, r0, r1
 8000d34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d38:	fb0e fe00 	mul.w	lr, lr, r0
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x156>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d48:	d202      	bcs.n	8000d50 <__udivmoddi4+0x154>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f200 80bb 	bhi.w	8000ec6 <__udivmoddi4+0x2ca>
 8000d50:	4608      	mov	r0, r1
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x9a>
 8000d5c:	f1c6 0720 	rsb	r7, r6, #32
 8000d60:	40b3      	lsls	r3, r6
 8000d62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d72:	431c      	orrs	r4, r3
 8000d74:	40f9      	lsrs	r1, r7
 8000d76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d82:	0c20      	lsrs	r0, r4, #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fb09 1118 	mls	r1, r9, r8, r1
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	fb08 f00e 	mul.w	r0, r8, lr
 8000d94:	4288      	cmp	r0, r1
 8000d96:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9a:	d90b      	bls.n	8000db4 <__udivmoddi4+0x1b8>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da4:	f080 8088 	bcs.w	8000eb8 <__udivmoddi4+0x2bc>
 8000da8:	4288      	cmp	r0, r1
 8000daa:	f240 8085 	bls.w	8000eb8 <__udivmoddi4+0x2bc>
 8000dae:	f1a8 0802 	sub.w	r8, r8, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x1e2>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dd4:	d26c      	bcs.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dd6:	458e      	cmp	lr, r1
 8000dd8:	d96a      	bls.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de2:	fba0 9402 	umull	r9, r4, r0, r2
 8000de6:	eba1 010e 	sub.w	r1, r1, lr
 8000dea:	42a1      	cmp	r1, r4
 8000dec:	46c8      	mov	r8, r9
 8000dee:	46a6      	mov	lr, r4
 8000df0:	d356      	bcc.n	8000ea0 <__udivmoddi4+0x2a4>
 8000df2:	d053      	beq.n	8000e9c <__udivmoddi4+0x2a0>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x212>
 8000df6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000e02:	fa22 f306 	lsr.w	r3, r2, r6
 8000e06:	40f1      	lsrs	r1, r6
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	f1c2 0320 	rsb	r3, r2, #32
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa21 f303 	lsr.w	r3, r1, r3
 8000e24:	4091      	lsls	r1, r2
 8000e26:	4301      	orrs	r1, r0
 8000e28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e34:	fb07 3610 	mls	r6, r7, r0, r3
 8000e38:	0c0b      	lsrs	r3, r1, #16
 8000e3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e42:	429e      	cmp	r6, r3
 8000e44:	fa04 f402 	lsl.w	r4, r4, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x260>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e52:	d22f      	bcs.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e54:	429e      	cmp	r6, r3
 8000e56:	d92d      	bls.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1b9b      	subs	r3, r3, r6
 8000e5e:	b289      	uxth	r1, r1
 8000e60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e64:	fb07 3316 	mls	r3, r7, r6, r3
 8000e68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x28a>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e7c:	d216      	bcs.n	8000eac <__udivmoddi4+0x2b0>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d914      	bls.n	8000eac <__udivmoddi4+0x2b0>
 8000e82:	3e02      	subs	r6, #2
 8000e84:	4461      	add	r1, ip
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e8c:	e738      	b.n	8000d00 <__udivmoddi4+0x104>
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e705      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e3      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6f8      	b.n	8000c8e <__udivmoddi4+0x92>
 8000e9c:	454b      	cmp	r3, r9
 8000e9e:	d2a9      	bcs.n	8000df4 <__udivmoddi4+0x1f8>
 8000ea0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7a3      	b.n	8000df4 <__udivmoddi4+0x1f8>
 8000eac:	4646      	mov	r6, r8
 8000eae:	e7ea      	b.n	8000e86 <__udivmoddi4+0x28a>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	e794      	b.n	8000dde <__udivmoddi4+0x1e2>
 8000eb4:	4640      	mov	r0, r8
 8000eb6:	e7d1      	b.n	8000e5c <__udivmoddi4+0x260>
 8000eb8:	46d0      	mov	r8, sl
 8000eba:	e77b      	b.n	8000db4 <__udivmoddi4+0x1b8>
 8000ebc:	3b02      	subs	r3, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	e732      	b.n	8000d28 <__udivmoddi4+0x12c>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e709      	b.n	8000cda <__udivmoddi4+0xde>
 8000ec6:	4464      	add	r4, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e742      	b.n	8000d52 <__udivmoddi4+0x156>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize(uint8_t Gain, uint8_t rate, uint8_t mode) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	460b      	mov	r3, r1
 8000edc:	71bb      	strb	r3, [r7, #6]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	717b      	strb	r3, [r7, #5]
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HMC5883L_initialize+0x78>)
 8000ee4:	223c      	movs	r2, #60	; 0x3c
 8000ee6:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  HAL_StatusTypeDef status;
  do {
    status = HAL_I2C_IsDeviceReady( & hi2c1, devAddr, 3, 5);
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HMC5883L_initialize+0x78>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b299      	uxth	r1, r3
 8000eee:	2305      	movs	r3, #5
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <HMC5883L_initialize+0x7c>)
 8000ef4:	f004 f88a 	bl	800500c <HAL_I2C_IsDeviceReady>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73fb      	strb	r3, [r7, #15]
  }
  while (status != HAL_OK);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f2      	bne.n	8000ee8 <HMC5883L_initialize+0x18>
  // write CONFIG_A register
  HAL_Delay(10);
 8000f02:	200a      	movs	r0, #10
 8000f04:	f003 f86a 	bl	8003fdc <HAL_Delay>
  buffer[0] = HMC5883L_RA_CONFIG_A;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	733b      	strb	r3, [r7, #12]
  buffer[1] = rate;
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	737b      	strb	r3, [r7, #13]

  do {
    status = HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10);
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HMC5883L_initialize+0x78>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b299      	uxth	r1, r3
 8000f16:	f107 020c 	add.w	r2, r7, #12
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2302      	movs	r3, #2
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <HMC5883L_initialize+0x7c>)
 8000f22:	f003 fd4f 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
  }
  while (status != HAL_OK);
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1ef      	bne.n	8000f10 <HMC5883L_initialize+0x40>
  // write CONFIG_B register
  HMC5883L_setGain(Gain);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f80c 	bl	8000f50 <HMC5883L_setGain>
  // write MODE register
  HMC5883L_setMode(mode);
 8000f38:	797b      	ldrb	r3, [r7, #5]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f82c 	bl	8000f98 <HMC5883L_setMode>
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	200000d8 	.word	0x200000d8

08000f50 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  // use this method to guarantee that bits 4-0 are set to zero, which is a
  // requirement specified in the datasheet; it's actually more efficient than
  // using the I2Cdev.writeBits method
  //I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HMC5883L_setGain+0x40>)
 8000f5c:	223c      	movs	r2, #60	; 0x3c
 8000f5e:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  buffer[0] = HMC5883L_RA_CONFIG_B;
 8000f60:	2301      	movs	r3, #1
 8000f62:	733b      	strb	r3, [r7, #12]
  buffer[1] = gain;
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10) != HAL_OK) {}
 8000f68:	bf00      	nop
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HMC5883L_setGain+0x40>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	f107 020c 	add.w	r2, r7, #12
 8000f74:	230a      	movs	r3, #10
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2302      	movs	r3, #2
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <HMC5883L_setGain+0x44>)
 8000f7c:	f003 fd22 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f1      	bne.n	8000f6a <HMC5883L_setGain+0x1a>
}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	200000d8 	.word	0x200000d8

08000f98 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  // use this method to guarantee that bits 7-2 are set to zero, which is a
  // requirement specified in the datasheet; it's actually more efficient than
  // using the I2Cdev.writeBits method
  //I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HMC5883L_setMode+0x44>)
 8000fa4:	223c      	movs	r2, #60	; 0x3c
 8000fa6:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  buffer[0] = HMC5883L_RA_MODE;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	733b      	strb	r3, [r7, #12]
  buffer[1] = newMode; // + 0x80;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10) != HAL_OK) {}
 8000fb0:	bf00      	nop
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HMC5883L_setMode+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	f107 020c 	add.w	r2, r7, #12
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <HMC5883L_setMode+0x48>)
 8000fc4:	f003 fcfe 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f1      	bne.n	8000fb2 <HMC5883L_setMode+0x1a>
  mode = newMode; // track to tell if we have to clear bit 7 after a read
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <HMC5883L_setMode+0x4c>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	7013      	strb	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	200000d8 	.word	0x200000d8
 8000fe4:	200000d4 	.word	0x200000d4

08000fe8 <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t * x, int16_t * y, int16_t * z) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  //I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer);
  //if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <HMC5883L_getHeading+0x90>)
 8000ff6:	223c      	movs	r2, #60	; 0x3c
 8000ff8:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[6];
  buffer[0] = HMC5883L_RA_DATAX_H;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	743b      	strb	r3, [r7, #16]
  //buffer[1]	= 0x00;
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 1, 1) != HAL_OK) {}
 8000ffe:	bf00      	nop
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HMC5883L_getHeading+0x90>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b299      	uxth	r1, r3
 8001006:	f107 0210 	add.w	r2, r7, #16
 800100a:	2301      	movs	r3, #1
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	481a      	ldr	r0, [pc, #104]	; (800107c <HMC5883L_getHeading+0x94>)
 8001012:	f003 fcd7 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f1      	bne.n	8001000 <HMC5883L_getHeading+0x18>
  //HAL_I2C_Master_Transmit(&hi2c1, devAddr, (uint8_t*) buffer, 1, 1);
  while (HAL_I2C_Master_Receive( & hi2c1, devAddr, (uint8_t * ) buffer, 6, 1) != HAL_OK) {}
 800101c:	bf00      	nop
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HMC5883L_getHeading+0x90>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b299      	uxth	r1, r3
 8001024:	f107 0210 	add.w	r2, r7, #16
 8001028:	2301      	movs	r3, #1
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2306      	movs	r3, #6
 800102e:	4813      	ldr	r0, [pc, #76]	; (800107c <HMC5883L_getHeading+0x94>)
 8001030:	f003 fdc6 	bl	8004bc0 <HAL_I2C_Master_Receive>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f1      	bne.n	800101e <HMC5883L_getHeading+0x36>
  //HAL_I2C_Master_Receive(&hi2c1, devAddr, (uint8_t*) buffer, 6, 10);
  *x = (((int16_t) buffer[0]) << 8) | buffer[1];
 800103a:	7c3b      	ldrb	r3, [r7, #16]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	7c7b      	ldrb	r3, [r7, #17]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21a      	sxth	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	801a      	strh	r2, [r3, #0]
  *y = (((int16_t) buffer[4]) << 8) | buffer[5];
 800104c:	7d3b      	ldrb	r3, [r7, #20]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	7d7b      	ldrb	r3, [r7, #21]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21a      	sxth	r2, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	801a      	strh	r2, [r3, #0]
  *z = (((int16_t) buffer[2]) << 8) | buffer[3];
 800105e:	7cbb      	ldrb	r3, [r7, #18]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	7cfb      	ldrb	r3, [r7, #19]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21a      	sxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	801a      	strh	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	200000d8 	.word	0x200000d8

08001080 <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	ed87 0a02 	vstr	s0, [r7, #8]
 800108c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001090:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	609a      	str	r2, [r3, #8]
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <SimpleKalmanFilter_updateEstimate>:
/*void SimpleKalmanFilter_Init1(float mea_e1, float est_e1, float q1){
  _err_measure1 = mea_e1;
  _err_estimate1 = est_e1;
  _q1 = q1;
}*/
float SimpleKalmanFilter_updateEstimate(kalman_filter* kalman_unit, float mea){
 80010b2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	ed87 0a00 	vstr	s0, [r7]
  kalman_unit->_kalman_gain = kalman_unit->_err_estimate/(kalman_unit->_err_estimate + kalman_unit->_err_measure);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	edc3 7a05 	vstr	s15, [r3, #20]
  kalman_unit->_current_estimate = kalman_unit->_last_estimate + kalman_unit->_kalman_gain * (mea - kalman_unit->_last_estimate);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	edd3 6a05 	vldr	s13, [r3, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80010f2:	ed97 6a00 	vldr	s12, [r7]
 80010f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	edc3 7a03 	vstr	s15, [r3, #12]
  kalman_unit->_err_estimate =  ((float)1.0 - kalman_unit->_kalman_gain)*kalman_unit->_err_estimate + fabs(kalman_unit->_last_estimate-kalman_unit->_current_estimate)*kalman_unit->_q;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	edd3 7a05 	vldr	s15, [r3, #20]
 800110e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001112:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edd3 7a01 	vldr	s15, [r3, #4]
 800111c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001120:	ee17 0a90 	vmov	r0, s15
 8001124:	f7ff fa10 	bl	8000548 <__aeabi_f2d>
 8001128:	4604      	mov	r4, r0
 800112a:	460d      	mov	r5, r1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	edd3 7a03 	vldr	s15, [r3, #12]
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	eef0 7ae7 	vabs.f32	s15, s15
 8001140:	ee17 0a90 	vmov	r0, s15
 8001144:	f7ff fa00 	bl	8000548 <__aeabi_f2d>
 8001148:	4680      	mov	r8, r0
 800114a:	4689      	mov	r9, r1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4640      	mov	r0, r8
 800115c:	4649      	mov	r1, r9
 800115e:	f7ff fa4b 	bl	80005f8 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff f88f 	bl	800028c <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fcd9 	bl	8000b2c <__aeabi_d2f>
 800117a:	4602      	mov	r2, r0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	605a      	str	r2, [r3, #4]
  kalman_unit->_last_estimate=kalman_unit->_current_estimate;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	611a      	str	r2, [r3, #16]

  return kalman_unit->_current_estimate;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	ee07 3a90 	vmov	s15, r3
}
 8001190:	eeb0 0a67 	vmov.f32	s0, s15
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800119c <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	460a      	mov	r2, r1
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	4613      	mov	r3, r2
 80011aa:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e024      	b.n	80011fc <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d103      	bne.n	80011c0 <flash+0x24>
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	4816      	ldr	r0, [pc, #88]	; (8001214 <flash+0x78>)
 80011bc:	f003 faa3 	bl	8004706 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d103      	bne.n	80011ce <flash+0x32>
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <flash+0x78>)
 80011ca:	f003 fa9c 	bl	8004706 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f002 ff04 	bl	8003fdc <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d103      	bne.n	80011e2 <flash+0x46>
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <flash+0x78>)
 80011de:	f003 fa92 	bl	8004706 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d103      	bne.n	80011f0 <flash+0x54>
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	480a      	ldr	r0, [pc, #40]	; (8001214 <flash+0x78>)
 80011ec:	f003 fa8b 	bl	8004706 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80011f0:	2064      	movs	r0, #100	; 0x64
 80011f2:	f002 fef3 	bl	8003fdc <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbd6      	blt.n	80011b2 <flash+0x16>
  }

  HAL_Delay(200);
 8001204:	20c8      	movs	r0, #200	; 0xc8
 8001206:	f002 fee9 	bl	8003fdc <HAL_Delay>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40020000 	.word	0x40020000

08001218 <console>:

// Monitor console
void console(const char *str) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, str, strlen(str));
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7fe ffd5 	bl	80001d0 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	b29b      	uxth	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <console+0x24>)
 8001230:	f006 fcd3 	bl	8007bda <HAL_UART_Transmit_IT>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200002fc 	.word	0x200002fc

08001240 <send_data>:

void send_data(float x1, float x2, float x3,
    float x4, float x5, float x6, float x7, float x8, float x9) {
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b093      	sub	sp, #76	; 0x4c
 8001244:	af08      	add	r7, sp, #32
 8001246:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800124a:	edc7 0a08 	vstr	s1, [r7, #32]
 800124e:	ed87 1a07 	vstr	s2, [r7, #28]
 8001252:	edc7 1a06 	vstr	s3, [r7, #24]
 8001256:	ed87 2a05 	vstr	s4, [r7, #20]
 800125a:	edc7 2a04 	vstr	s5, [r7, #16]
 800125e:	ed87 3a03 	vstr	s6, [r7, #12]
 8001262:	edc7 3a02 	vstr	s7, [r7, #8]
 8001266:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 800126a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126e:	2100      	movs	r1, #0
 8001270:	4837      	ldr	r0, [pc, #220]	; (8001350 <send_data+0x110>)
 8001272:	f007 fc41 	bl	8008af8 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8001276:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800127a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001354 <send_data+0x114>
 800127e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001282:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8001286:	edd7 7a08 	vldr	s15, [r7, #32]
 800128a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001354 <send_data+0x114>
 800128e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001292:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8001296:	edd7 7a07 	vldr	s15, [r7, #28]
 800129a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001354 <send_data+0x114>
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a6:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 80012aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80012ae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001354 <send_data+0x114>
 80012b2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ba:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 80012be:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001354 <send_data+0x114>
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ce:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 80012d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001354 <send_data+0x114>
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 80012e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ea:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001354 <send_data+0x114>
 80012ee:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f6:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 80012fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001354 <send_data+0x114>
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800130a:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001354 <send_data+0x114>
 8001316:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800131a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131e:	ee17 6a90 	vmov	r6, s15
 8001322:	9606      	str	r6, [sp, #24]
 8001324:	9505      	str	r5, [sp, #20]
 8001326:	9404      	str	r4, [sp, #16]
 8001328:	9003      	str	r0, [sp, #12]
 800132a:	9102      	str	r1, [sp, #8]
 800132c:	9201      	str	r2, [sp, #4]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	ee16 3a10 	vmov	r3, s12
 8001334:	ee16 2a90 	vmov	r2, s13
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <send_data+0x118>)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <send_data+0x110>)
 800133c:	f007 fbe4 	bl	8008b08 <siprintf>
  console(g_console_msg);
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <send_data+0x110>)
 8001342:	f7ff ff69 	bl	8001218 <console>
}
 8001346:	bf00      	nop
 8001348:	372c      	adds	r7, #44	; 0x2c
 800134a:	46bd      	mov	sp, r7
 800134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134e:	bf00      	nop
 8001350:	20000590 	.word	0x20000590
 8001354:	47c35000 	.word	0x47c35000
 8001358:	080098f0 	.word	0x080098f0

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001362:	f002 fdc9 	bl	8003ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001366:	f000 f8f1 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136a:	f000 fc93 	bl	8001c94 <MX_GPIO_Init>
  MX_TIM1_Init();
 800136e:	f000 f9f1 	bl	8001754 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001372:	f000 f955 	bl	8001620 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001376:	f000 fab1 	bl	80018dc <MX_TIM2_Init>
  MX_TIM3_Init();
 800137a:	f000 fb29 	bl	80019d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800137e:	f000 fba3 	bl	8001ac8 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001382:	f000 f97b 	bl	800167c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001386:	f000 f9af 	bl	80016e8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800138a:	f000 fc2f 	bl	8001bec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800138e:	f000 fc57 	bl	8001c40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Turn off all lights
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2140      	movs	r1, #64	; 0x40
 8001396:	4859      	ldr	r0, [pc, #356]	; (80014fc <main+0x1a0>)
 8001398:	f003 f99c 	bl	80046d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	4856      	ldr	r0, [pc, #344]	; (80014fc <main+0x1a0>)
 80013a2:	f003 f997 	bl	80046d4 <HAL_GPIO_WritePin>

  // Gyro, accel
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 0.5); // Accel x
 80013a6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013aa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013ae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013b2:	4853      	ldr	r0, [pc, #332]	; (8001500 <main+0x1a4>)
 80013b4:	f7ff fe64 	bl	8001080 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 0.5); // Accel y
 80013b8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013bc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013c0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013c4:	484f      	ldr	r0, [pc, #316]	; (8001504 <main+0x1a8>)
 80013c6:	f7ff fe5b 	bl	8001080 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 0.5); // Accel z
 80013ca:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013ce:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013d2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013d6:	484c      	ldr	r0, [pc, #304]	; (8001508 <main+0x1ac>)
 80013d8:	f7ff fe52 	bl	8001080 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 0.5); // Gyro x
 80013dc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013e0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013e4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013e8:	4848      	ldr	r0, [pc, #288]	; (800150c <main+0x1b0>)
 80013ea:	f7ff fe49 	bl	8001080 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 0.5); // Gyro y
 80013ee:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013f2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013f6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013fa:	4845      	ldr	r0, [pc, #276]	; (8001510 <main+0x1b4>)
 80013fc:	f7ff fe40 	bl	8001080 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 0.5); // Gyro z
 8001400:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001404:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001408:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800140c:	4841      	ldr	r0, [pc, #260]	; (8001514 <main+0x1b8>)
 800140e:	f7ff fe37 	bl	8001080 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[6], 2, 2, 0.01); // Thrust
 8001412:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8001518 <main+0x1bc>
 8001416:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800141a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800141e:	483f      	ldr	r0, [pc, #252]	; (800151c <main+0x1c0>)
 8001420:	f7ff fe2e 	bl	8001080 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[7], 2, 2, 0.01); // Yaw
 8001424:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8001518 <main+0x1bc>
 8001428:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800142c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001430:	483b      	ldr	r0, [pc, #236]	; (8001520 <main+0x1c4>)
 8001432:	f7ff fe25 	bl	8001080 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[8], 2, 2, 0.01); // Pitch
 8001436:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8001518 <main+0x1bc>
 800143a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800143e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001442:	4838      	ldr	r0, [pc, #224]	; (8001524 <main+0x1c8>)
 8001444:	f7ff fe1c 	bl	8001080 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[9], 2, 2, 0.01); // Roll
 8001448:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8001518 <main+0x1bc>
 800144c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001450:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001454:	4834      	ldr	r0, [pc, #208]	; (8001528 <main+0x1cc>)
 8001456:	f7ff fe13 	bl	8001080 <SimpleKalmanFilter_Init>

  // Initialize GY-86
  SD_MPU6050_Init(
 800145a:	2303      	movs	r3, #3
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2303      	movs	r3, #3
 8001460:	2200      	movs	r2, #0
 8001462:	4932      	ldr	r1, [pc, #200]	; (800152c <main+0x1d0>)
 8001464:	4832      	ldr	r0, [pc, #200]	; (8001530 <main+0x1d4>)
 8001466:	f000 fc94 	bl	8001d92 <SD_MPU6050_Init>
      &hi2c1,
      &g_dev1,
      SD_MPU6050_Device_0,
      SD_MPU6050_Accelerometer_16G,
      SD_MPU6050_Gyroscope_2000s);
  SD_MPU6050_SetDataRate(&hi2c1, &g_dev1, SD_MPU6050_DataRate_8KHz);
 800146a:	2200      	movs	r2, #0
 800146c:	492f      	ldr	r1, [pc, #188]	; (800152c <main+0x1d0>)
 800146e:	4830      	ldr	r0, [pc, #192]	; (8001530 <main+0x1d4>)
 8001470:	f000 fd04 	bl	8001e7c <SD_MPU6050_SetDataRate>
  flash(1, 5);
 8001474:	2105      	movs	r1, #5
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff fe90 	bl	800119c <flash>

  begin(&g_dev2, MS5611_HIGH_RES); // MS5611 sensor init
 800147c:	2106      	movs	r1, #6
 800147e:	482d      	ldr	r0, [pc, #180]	; (8001534 <main+0x1d8>)
 8001480:	f000 fee0 	bl	8002244 <begin>
  Set_config(&hi2c1, &g_dev1, MPU6050_DLPF_BW_260); // LPF mpu
 8001484:	2200      	movs	r2, #0
 8001486:	4929      	ldr	r1, [pc, #164]	; (800152c <main+0x1d0>)
 8001488:	4829      	ldr	r0, [pc, #164]	; (8001530 <main+0x1d4>)
 800148a:	f000 feb3 	bl	80021f4 <Set_config>
  SetAuxbus(&hi2c1, &g_dev1); // Enable MPU6050 AUX bus to interface with HMC5883l
 800148e:	4927      	ldr	r1, [pc, #156]	; (800152c <main+0x1d0>)
 8001490:	4827      	ldr	r0, [pc, #156]	; (8001530 <main+0x1d4>)
 8001492:	f000 fe7d 	bl	8002190 <SetAuxbus>
  HMC5883L_initialize(HMC5883L_GAIN_1370, HMC5883L_RATE_75, HMC5883L_MODE_CONTINUOUS);
 8001496:	2200      	movs	r2, #0
 8001498:	2118      	movs	r1, #24
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fd18 	bl	8000ed0 <HMC5883L_initialize>
  flash(1, 5);
 80014a0:	2105      	movs	r1, #5
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff fe7a 	bl	800119c <flash>

  // Remote control
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80014a8:	2100      	movs	r1, #0
 80014aa:	4823      	ldr	r0, [pc, #140]	; (8001538 <main+0x1dc>)
 80014ac:	f005 f96a 	bl	8006784 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80014b0:	2104      	movs	r1, #4
 80014b2:	4821      	ldr	r0, [pc, #132]	; (8001538 <main+0x1dc>)
 80014b4:	f005 f966 	bl	8006784 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 80014b8:	2108      	movs	r1, #8
 80014ba:	481f      	ldr	r0, [pc, #124]	; (8001538 <main+0x1dc>)
 80014bc:	f005 f962 	bl	8006784 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 80014c0:	210c      	movs	r1, #12
 80014c2:	481d      	ldr	r0, [pc, #116]	; (8001538 <main+0x1dc>)
 80014c4:	f005 f95e 	bl	8006784 <HAL_TIM_IC_Start_IT>

  // Init PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014c8:	2100      	movs	r1, #0
 80014ca:	481c      	ldr	r0, [pc, #112]	; (800153c <main+0x1e0>)
 80014cc:	f005 f838 	bl	8006540 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014d0:	2104      	movs	r1, #4
 80014d2:	481a      	ldr	r0, [pc, #104]	; (800153c <main+0x1e0>)
 80014d4:	f005 f834 	bl	8006540 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014d8:	2108      	movs	r1, #8
 80014da:	4818      	ldr	r0, [pc, #96]	; (800153c <main+0x1e0>)
 80014dc:	f005 f830 	bl	8006540 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014e0:	210c      	movs	r1, #12
 80014e2:	4816      	ldr	r0, [pc, #88]	; (800153c <main+0x1e0>)
 80014e4:	f005 f82c 	bl	8006540 <HAL_TIM_PWM_Start>

  // Run timers
  HAL_TIM_Base_Start_IT(&htim3);
 80014e8:	4815      	ldr	r0, [pc, #84]	; (8001540 <main+0x1e4>)
 80014ea:	f004 ff69 	bl	80063c0 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Receive data and callback HAL_UART_RxCpltCallback
    HAL_UART_Receive_IT(&huart1, g_control, 5);
 80014ee:	2205      	movs	r2, #5
 80014f0:	4914      	ldr	r1, [pc, #80]	; (8001544 <main+0x1e8>)
 80014f2:	4815      	ldr	r0, [pc, #84]	; (8001548 <main+0x1ec>)
 80014f4:	f006 fbb6 	bl	8007c64 <HAL_UART_Receive_IT>
 80014f8:	e7f9      	b.n	80014ee <main+0x192>
 80014fa:	bf00      	nop
 80014fc:	40020000 	.word	0x40020000
 8001500:	20000384 	.word	0x20000384
 8001504:	2000039c 	.word	0x2000039c
 8001508:	200003b4 	.word	0x200003b4
 800150c:	200003cc 	.word	0x200003cc
 8001510:	200003e4 	.word	0x200003e4
 8001514:	200003fc 	.word	0x200003fc
 8001518:	3c23d70a 	.word	0x3c23d70a
 800151c:	20000414 	.word	0x20000414
 8001520:	2000042c 	.word	0x2000042c
 8001524:	20000444 	.word	0x20000444
 8001528:	2000045c 	.word	0x2000045c
 800152c:	20000504 	.word	0x20000504
 8001530:	200000d8 	.word	0x200000d8
 8001534:	20000520 	.word	0x20000520
 8001538:	200002b4 	.word	0x200002b4
 800153c:	200001dc 	.word	0x200001dc
 8001540:	2000026c 	.word	0x2000026c
 8001544:	20000588 	.word	0x20000588
 8001548:	200002fc 	.word	0x200002fc

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	2230      	movs	r2, #48	; 0x30
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f007 facc 	bl	8008af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <SystemClock_Config+0xcc>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <SystemClock_Config+0xcc>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <SystemClock_Config+0xcc>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <SystemClock_Config+0xd0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a21      	ldr	r2, [pc, #132]	; (800161c <SystemClock_Config+0xd0>)
 8001596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <SystemClock_Config+0xd0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a8:	2301      	movs	r3, #1
 80015aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b2:	2302      	movs	r3, #2
 80015b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015bc:	2304      	movs	r3, #4
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015c0:	23a8      	movs	r3, #168	; 0xa8
 80015c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015c8:	2304      	movs	r3, #4
 80015ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 f985 	bl	80058e0 <HAL_RCC_OscConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015dc:	f000 fbd4 	bl	8001d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e0:	230f      	movs	r3, #15
 80015e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e4:	2302      	movs	r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2105      	movs	r1, #5
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 fbe6 	bl	8005dd0 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800160a:	f000 fbbd 	bl	8001d88 <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3750      	adds	r7, #80	; 0x50
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2C1_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MX_I2C1_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_I2C1_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_I2C1_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_I2C1_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_I2C1_Init+0x50>)
 800165e:	f003 f86d 	bl	800473c <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fb8e 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200000d8 	.word	0x200000d8
 8001674:	40005400 	.word	0x40005400
 8001678:	000186a0 	.word	0x000186a0

0800167c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_SPI1_Init+0x64>)
 8001682:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <MX_SPI1_Init+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_SPI1_Init+0x64>)
 8001688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_SPI1_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_SPI1_Init+0x64>)
 80016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_SPI1_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_SPI1_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_SPI1_Init+0x64>)
 80016c8:	220a      	movs	r2, #10
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_SPI1_Init+0x64>)
 80016ce:	f004 fd9f 	bl	8006210 <HAL_SPI_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016d8:	f000 fb56 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000012c 	.word	0x2000012c
 80016e4:	40013000 	.word	0x40013000

080016e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_SPI2_Init+0x64>)
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <MX_SPI2_Init+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_SPI2_Init+0x64>)
 80016f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_SPI2_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_SPI2_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_SPI2_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_SPI2_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_SPI2_Init+0x64>)
 8001714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001718:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_SPI2_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <MX_SPI2_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_SPI2_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <MX_SPI2_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_SPI2_Init+0x64>)
 8001734:	220a      	movs	r2, #10
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_SPI2_Init+0x64>)
 800173a:	f004 fd69 	bl	8006210 <HAL_SPI_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001744:	f000 fb20 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000184 	.word	0x20000184
 8001750:	40003800 	.word	0x40003800

08001754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b096      	sub	sp, #88	; 0x58
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2220      	movs	r2, #32
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f007 f9b3 	bl	8008af8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001792:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <MX_TIM1_Init+0x180>)
 8001794:	4a50      	ldr	r2, [pc, #320]	; (80018d8 <MX_TIM1_Init+0x184>)
 8001796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21;
 8001798:	4b4e      	ldr	r3, [pc, #312]	; (80018d4 <MX_TIM1_Init+0x180>)
 800179a:	2215      	movs	r2, #21
 800179c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <MX_TIM1_Init+0x180>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <MX_TIM1_Init+0x180>)
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <MX_TIM1_Init+0x180>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <MX_TIM1_Init+0x180>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <MX_TIM1_Init+0x180>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017be:	4845      	ldr	r0, [pc, #276]	; (80018d4 <MX_TIM1_Init+0x180>)
 80017c0:	f004 fdaf 	bl	8006322 <HAL_TIM_Base_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017ca:	f000 fadd 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017d8:	4619      	mov	r1, r3
 80017da:	483e      	ldr	r0, [pc, #248]	; (80018d4 <MX_TIM1_Init+0x180>)
 80017dc:	f005 fb60 	bl	8006ea0 <HAL_TIM_ConfigClockSource>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017e6:	f000 facf 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ea:	483a      	ldr	r0, [pc, #232]	; (80018d4 <MX_TIM1_Init+0x180>)
 80017ec:	f004 fe58 	bl	80064a0 <HAL_TIM_PWM_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017f6:	f000 fac7 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001806:	4619      	mov	r1, r3
 8001808:	4832      	ldr	r0, [pc, #200]	; (80018d4 <MX_TIM1_Init+0x180>)
 800180a:	f006 f8b7 	bl	800797c <HAL_TIMEx_MasterConfigSynchronization>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001814:	f000 fab8 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001818:	2360      	movs	r3, #96	; 0x60
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	2200      	movs	r2, #0
 800183a:	4619      	mov	r1, r3
 800183c:	4825      	ldr	r0, [pc, #148]	; (80018d4 <MX_TIM1_Init+0x180>)
 800183e:	f005 fa6d 	bl	8006d1c <HAL_TIM_PWM_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001848:	f000 fa9e 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	2204      	movs	r2, #4
 8001852:	4619      	mov	r1, r3
 8001854:	481f      	ldr	r0, [pc, #124]	; (80018d4 <MX_TIM1_Init+0x180>)
 8001856:	f005 fa61 	bl	8006d1c <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001860:	f000 fa92 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	2208      	movs	r2, #8
 800186a:	4619      	mov	r1, r3
 800186c:	4819      	ldr	r0, [pc, #100]	; (80018d4 <MX_TIM1_Init+0x180>)
 800186e:	f005 fa55 	bl	8006d1c <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001878:	f000 fa86 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	220c      	movs	r2, #12
 8001882:	4619      	mov	r1, r3
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <MX_TIM1_Init+0x180>)
 8001886:	f005 fa49 	bl	8006d1c <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001890:	f000 fa7a 	bl	8001d88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <MX_TIM1_Init+0x180>)
 80018b8:	f006 f8dc 	bl	8007a74 <HAL_TIMEx_ConfigBreakDeadTime>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80018c2:	f000 fa61 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <MX_TIM1_Init+0x180>)
 80018c8:	f000 fff8 	bl	80028bc <HAL_TIM_MspPostInit>

}
 80018cc:	bf00      	nop
 80018ce:	3758      	adds	r7, #88	; 0x58
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200001dc 	.word	0x200001dc
 80018d8:	40010000 	.word	0x40010000

080018dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	615a      	str	r2, [r3, #20]
 80018fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018fe:	4b33      	ldr	r3, [pc, #204]	; (80019cc <MX_TIM2_Init+0xf0>)
 8001900:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001904:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21;
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <MX_TIM2_Init+0xf0>)
 8001908:	2215      	movs	r2, #21
 800190a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <MX_TIM2_Init+0xf0>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001912:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <MX_TIM2_Init+0xf0>)
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <MX_TIM2_Init+0xf0>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <MX_TIM2_Init+0xf0>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001926:	4829      	ldr	r0, [pc, #164]	; (80019cc <MX_TIM2_Init+0xf0>)
 8001928:	f004 fdba 	bl	80064a0 <HAL_TIM_PWM_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001932:	f000 fa29 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	4619      	mov	r1, r3
 8001944:	4821      	ldr	r0, [pc, #132]	; (80019cc <MX_TIM2_Init+0xf0>)
 8001946:	f006 f819 	bl	800797c <HAL_TIMEx_MasterConfigSynchronization>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001950:	f000 fa1a 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001954:	2360      	movs	r3, #96	; 0x60
 8001956:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4818      	ldr	r0, [pc, #96]	; (80019cc <MX_TIM2_Init+0xf0>)
 800196c:	f005 f9d6 	bl	8006d1c <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001976:	f000 fa07 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2204      	movs	r2, #4
 800197e:	4619      	mov	r1, r3
 8001980:	4812      	ldr	r0, [pc, #72]	; (80019cc <MX_TIM2_Init+0xf0>)
 8001982:	f005 f9cb 	bl	8006d1c <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800198c:	f000 f9fc 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2208      	movs	r2, #8
 8001994:	4619      	mov	r1, r3
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_TIM2_Init+0xf0>)
 8001998:	f005 f9c0 	bl	8006d1c <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80019a2:	f000 f9f1 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	220c      	movs	r2, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_TIM2_Init+0xf0>)
 80019ae:	f005 f9b5 	bl	8006d1c <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80019b8:	f000 f9e6 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <MX_TIM2_Init+0xf0>)
 80019be:	f000 ff7d 	bl	80028bc <HAL_TIM_MspPostInit>

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000224 	.word	0x20000224

080019d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0318 	add.w	r3, r7, #24
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 80019fc:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <MX_TIM3_Init+0xf4>)
 80019fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a02:	2254      	movs	r2, #84	; 0x54
 8001a04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a20:	4827      	ldr	r0, [pc, #156]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a22:	f004 fc7e 	bl	8006322 <HAL_TIM_Base_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001a2c:	f000 f9ac 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a36:	f107 0318 	add.w	r3, r7, #24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4820      	ldr	r0, [pc, #128]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a3e:	f005 fa2f 	bl	8006ea0 <HAL_TIM_ConfigClockSource>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a48:	f000 f99e 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a4c:	481c      	ldr	r0, [pc, #112]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a4e:	f004 fe3f 	bl	80066d0 <HAL_TIM_IC_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a58:	f000 f996 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4815      	ldr	r0, [pc, #84]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a6c:	f005 ff86 	bl	800797c <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001a76:	f000 f987 	bl	8001d88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001a92:	f005 f8a7 	bl	8006be4 <HAL_TIM_IC_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001a9c:	f000 f974 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_TIM3_Init+0xf0>)
 8001aa8:	f005 f89c 	bl	8006be4 <HAL_TIM_IC_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001ab2:	f000 f969 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000026c 	.word	0x2000026c
 8001ac4:	40000400 	.word	0x40000400

08001ac8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0318 	add.w	r3, r7, #24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001af2:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001af4:	4a3c      	ldr	r2, [pc, #240]	; (8001be8 <MX_TIM4_Init+0x120>)
 8001af6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420;
 8001af8:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001afa:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001afe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4200;
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001b08:	f241 0268 	movw	r2, #4200	; 0x1068
 8001b0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b1a:	4832      	ldr	r0, [pc, #200]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001b1c:	f004 fc01 	bl	8006322 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001b26:	f000 f92f 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	4619      	mov	r1, r3
 8001b36:	482b      	ldr	r0, [pc, #172]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001b38:	f005 f9b2 	bl	8006ea0 <HAL_TIM_ConfigClockSource>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b42:	f000 f921 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b46:	4827      	ldr	r0, [pc, #156]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001b48:	f004 fdc2 	bl	80066d0 <HAL_TIM_IC_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001b52:	f000 f919 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4619      	mov	r1, r3
 8001b64:	481f      	ldr	r0, [pc, #124]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001b66:	f005 ff09 	bl	800797c <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001b70:	f000 f90a 	bl	8001d88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001b74:	230a      	movs	r3, #10
 8001b76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4816      	ldr	r0, [pc, #88]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001b8c:	f005 f82a 	bl	8006be4 <HAL_TIM_IC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001b96:	f000 f8f7 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4810      	ldr	r0, [pc, #64]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001ba2:	f005 f81f 	bl	8006be4 <HAL_TIM_IC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001bac:	f000 f8ec 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001bb8:	f005 f814 	bl	8006be4 <HAL_TIM_IC_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8001bc2:	f000 f8e1 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	220c      	movs	r2, #12
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_TIM4_Init+0x11c>)
 8001bce:	f005 f809 	bl	8006be4 <HAL_TIM_IC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8001bd8:	f000 f8d6 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200002b4 	.word	0x200002b4
 8001be8:	40000800 	.word	0x40000800

08001bec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_USART1_UART_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_USART1_UART_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_USART1_UART_Init+0x4c>)
 8001bf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_USART1_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_USART1_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_USART1_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_USART1_UART_Init+0x4c>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_USART1_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_USART1_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_USART1_UART_Init+0x4c>)
 8001c24:	f005 ff8c 	bl	8007b40 <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c2e:	f000 f8ab 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200002fc 	.word	0x200002fc
 8001c3c:	40011000 	.word	0x40011000

08001c40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_USART2_UART_Init+0x50>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c78:	f005 ff62 	bl	8007b40 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c82:	f000 f881 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000340 	.word	0x20000340
 8001c90:	40004400 	.word	0x40004400

08001c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a2c      	ldr	r2, [pc, #176]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001d24:	f043 0310 	orr.w	r3, r3, #16
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_GPIO_Init+0xec>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	21c0      	movs	r1, #192	; 0xc0
 8001d56:	480b      	ldr	r0, [pc, #44]	; (8001d84 <MX_GPIO_Init+0xf0>)
 8001d58:	f002 fcbc 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	4619      	mov	r1, r3
 8001d72:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_GPIO_Init+0xf0>)
 8001d74:	f002 fafa 	bl	800436c <HAL_GPIO_Init>

}
 8001d78:	bf00      	nop
 8001d7a:	3730      	adds	r7, #48	; 0x30
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8c:	b672      	cpsid	i
}
 8001d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <Error_Handler+0x8>

08001d92 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

/////////////////////////////////////////////
SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b08a      	sub	sp, #40	; 0x28
 8001d96:	af02      	add	r7, sp, #8
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	460b      	mov	r3, r1
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	4613      	mov	r3, r2
 8001da6:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8001da8:	2375      	movs	r3, #117	; 0x75
 8001daa:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8001dc2:	7efb      	ldrb	r3, [r7, #27]
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	2202      	movs	r2, #2
 8001dca:	69f8      	ldr	r0, [r7, #28]
 8001dcc:	f003 f91e 	bl	800500c <HAL_I2C_IsDeviceReady>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e04c      	b.n	8001e74 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8001dda:	7efb      	ldrb	r3, [r7, #27]
 8001ddc:	b299      	uxth	r1, r3
 8001dde:	f107 021a 	add.w	r2, r7, #26
 8001de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2301      	movs	r3, #1
 8001dea:	69f8      	ldr	r0, [r7, #28]
 8001dec:	f002 fdea 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e03c      	b.n	8001e74 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8001dfa:	7efb      	ldrb	r3, [r7, #27]
 8001dfc:	b299      	uxth	r1, r3
 8001dfe:	f107 0219 	add.w	r2, r7, #25
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	69f8      	ldr	r0, [r7, #28]
 8001e0c:	f002 fed8 	bl	8004bc0 <HAL_I2C_Master_Receive>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e02c      	b.n	8001e74 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e02a      	b.n	8001e74 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8001e1e:	bf00      	nop
 8001e20:	7e7b      	ldrb	r3, [r7, #25]
 8001e22:	2b68      	cmp	r3, #104	; 0x68
 8001e24:	d1f9      	bne.n	8001e1a <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8001e26:	236b      	movs	r3, #107	; 0x6b
 8001e28:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001e2e:	7efb      	ldrb	r3, [r7, #27]
 8001e30:	b299      	uxth	r1, r3
 8001e32:	f107 0214 	add.w	r2, r7, #20
 8001e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	69f8      	ldr	r0, [r7, #28]
 8001e40:	f002 fdc0 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e012      	b.n	8001e74 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8001e4e:	2207      	movs	r2, #7
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f812 	bl	8001e7c <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8001e58:	79bb      	ldrb	r3, [r7, #6]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f830 	bl	8001ec4 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8001e64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f899 	bl	8001fa4 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8001e94:	2319      	movs	r3, #25
 8001e96:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001e9c:	bf00      	nop
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	b299      	uxth	r1, r3
 8001ea2:	f107 0210 	add.w	r2, r7, #16
 8001ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2302      	movs	r3, #2
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f002 fd88 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f1      	bne.n	8001e9e <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8001edc:	231c      	movs	r3, #28
 8001ede:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001ee0:	bf00      	nop
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	f107 0211 	add.w	r2, r7, #17
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f002 fd66 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f1      	bne.n	8001ee2 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001efe:	bf00      	nop
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	b299      	uxth	r1, r3
 8001f04:	f107 0212 	add.w	r2, r7, #18
 8001f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	6978      	ldr	r0, [r7, #20]
 8001f12:	f002 fe55 	bl	8004bc0 <HAL_I2C_Master_Receive>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f1      	bne.n	8001f00 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001f1c:	7cbb      	ldrb	r3, [r7, #18]
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	f023 0318 	bic.w	r3, r3, #24
 8001f24:	b25a      	sxtb	r2, r3
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b25b      	sxtb	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001f34:	bf00      	nop
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	b299      	uxth	r1, r3
 8001f3a:	f107 0212 	add.w	r2, r7, #18
 8001f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f002 fd3c 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f1      	bne.n	8001f36 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d81f      	bhi.n	8001f98 <SD_MPU6050_SetAccelerometer+0xd4>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <SD_MPU6050_SetAccelerometer+0x9c>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f7b 	.word	0x08001f7b
 8001f68:	08001f85 	.word	0x08001f85
 8001f6c:	08001f8f 	.word	0x08001f8f
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001f76:	609a      	str	r2, [r3, #8]
			break;
 8001f78:	e00f      	b.n	8001f9a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001f80:	609a      	str	r2, [r3, #8]
			break;
 8001f82:	e00a      	b.n	8001f9a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001f8a:	609a      	str	r2, [r3, #8]
			break;
 8001f8c:	e005      	b.n	8001f9a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001f94:	609a      	str	r2, [r3, #8]
			break;
 8001f96:	e000      	b.n	8001f9a <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8001f98:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8001fbc:	231b      	movs	r3, #27
 8001fbe:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001fc0:	bf00      	nop
 8001fc2:	7cfb      	ldrb	r3, [r7, #19]
 8001fc4:	b299      	uxth	r1, r3
 8001fc6:	f107 0211 	add.w	r2, r7, #17
 8001fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f002 fcf6 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f1      	bne.n	8001fc2 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001fde:	bf00      	nop
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	f107 0212 	add.w	r2, r7, #18
 8001fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2301      	movs	r3, #1
 8001ff0:	6978      	ldr	r0, [r7, #20]
 8001ff2:	f002 fde5 	bl	8004bc0 <HAL_I2C_Master_Receive>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f1      	bne.n	8001fe0 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8001ffc:	7cbb      	ldrb	r3, [r7, #18]
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	f023 0318 	bic.w	r3, r3, #24
 8002004:	b25a      	sxtb	r2, r3
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	b25b      	sxtb	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b25b      	sxtb	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8002014:	bf00      	nop
 8002016:	7cfb      	ldrb	r3, [r7, #19]
 8002018:	b299      	uxth	r1, r3
 800201a:	f107 0212 	add.w	r2, r7, #18
 800201e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2301      	movs	r3, #1
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f002 fccc 	bl	80049c4 <HAL_I2C_Master_Transmit>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f1      	bne.n	8002016 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d81b      	bhi.n	8002070 <SD_MPU6050_SetGyroscope+0xcc>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <SD_MPU6050_SetGyroscope+0x9c>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002051 	.word	0x08002051
 8002044:	08002059 	.word	0x08002059
 8002048:	08002061 	.word	0x08002061
 800204c:	08002069 	.word	0x08002069
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <SD_MPU6050_SetGyroscope+0xd8>)
 8002054:	605a      	str	r2, [r3, #4]
				break;
 8002056:	e00c      	b.n	8002072 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <SD_MPU6050_SetGyroscope+0xdc>)
 800205c:	605a      	str	r2, [r3, #4]
				break;
 800205e:	e008      	b.n	8002072 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <SD_MPU6050_SetGyroscope+0xe0>)
 8002064:	605a      	str	r2, [r3, #4]
				break;
 8002066:	e004      	b.n	8002072 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4a07      	ldr	r2, [pc, #28]	; (8002088 <SD_MPU6050_SetGyroscope+0xe4>)
 800206c:	605a      	str	r2, [r3, #4]
				break;
 800206e:	e000      	b.n	8002072 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8002070:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	3bfa232d 	.word	0x3bfa232d
 8002080:	3c7a232d 	.word	0x3c7a232d
 8002084:	3cf9c190 	.word	0x3cf9c190
 8002088:	3d79c190 	.word	0x3d79c190

0800208c <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	; 0x30
 8002090:	af02      	add	r7, sp, #8
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8002096:	233b      	movs	r3, #59	; 0x3b
 8002098:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1) != HAL_OK);
 80020a6:	bf00      	nop
 80020a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020ac:	b299      	uxth	r1, r3
 80020ae:	f107 020f 	add.w	r2, r7, #15
 80020b2:	2301      	movs	r3, #1
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2301      	movs	r3, #1
 80020b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ba:	f002 fc83 	bl	80049c4 <HAL_I2C_Master_Transmit>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f1      	bne.n	80020a8 <SD_MPU6050_ReadAll+0x1c>
	//HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1);
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1) != HAL_OK);
 80020c4:	bf00      	nop
 80020c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020ca:	b299      	uxth	r1, r3
 80020cc:	f107 0210 	add.w	r2, r7, #16
 80020d0:	2301      	movs	r3, #1
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	230e      	movs	r3, #14
 80020d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020d8:	f002 fd72 	bl	8004bc0 <HAL_I2C_Master_Receive>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f1      	bne.n	80020c6 <SD_MPU6050_ReadAll+0x3a>
	//HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1);
	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 80020e2:	7c3b      	ldrb	r3, [r7, #16]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	7c7b      	ldrb	r3, [r7, #17]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 80020f4:	7cbb      	ldrb	r3, [r7, #18]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	b21a      	sxth	r2, r3
 80020fa:	7cfb      	ldrb	r3, [r7, #19]
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21a      	sxth	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8002106:	7d3b      	ldrb	r3, [r7, #20]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21a      	sxth	r2, r3
 800210c:	7d7b      	ldrb	r3, [r7, #21]
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21a      	sxth	r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8002118:	7dbb      	ldrb	r3, [r7, #22]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	b21a      	sxth	r2, r3
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8002126:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002132:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002188 <SD_MPU6050_ReadAll+0xfc>
 8002136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800213a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800218c <SD_MPU6050_ReadAll+0x100>
 800213e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8002148:	7e3b      	ldrb	r3, [r7, #24]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21a      	sxth	r2, r3
 800214e:	7e7b      	ldrb	r3, [r7, #25]
 8002150:	b21b      	sxth	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b21a      	sxth	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 800215a:	7ebb      	ldrb	r3, [r7, #26]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	b21a      	sxth	r2, r3
 8002160:	7efb      	ldrb	r3, [r7, #27]
 8002162:	b21b      	sxth	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b21a      	sxth	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 800216c:	7f3b      	ldrb	r3, [r7, #28]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	b21a      	sxth	r2, r3
 8002172:	7f7b      	ldrb	r3, [r7, #29]
 8002174:	b21b      	sxth	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	b21a      	sxth	r2, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	43aa0000 	.word	0x43aa0000
 800218c:	42121eb8 	.word	0x42121eb8

08002190 <SetAuxbus>:
	InterruptsStruct->Status = read;
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

void SetAuxbus(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct){
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]
	uint8_t address = DataStruct->Address;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	72fb      	strb	r3, [r7, #11]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_USER_CTRL;
 80021a4:	236a      	movs	r3, #106	; 0x6a
 80021a6:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 80021a8:	2300      	movs	r3, #0
 80021aa:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 80021ac:	200a      	movs	r0, #10
 80021ae:	f001 ff15 	bl	8003fdc <HAL_Delay>
	/*set I2C Bypass enable bit (I2C_BYPASS_EN,bit 2) in INT Pin / Bypass Enable Configuration register (INT_PIN_CFG,0x37) to 1*/
	d[0] = MPU6050_INT_PIN_CFG;
 80021b2:	2337      	movs	r3, #55	; 0x37
 80021b4:	723b      	strb	r3, [r7, #8]
	d[1] = 0x02;
 80021b6:	2302      	movs	r3, #2
 80021b8:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80021ba:	bf00      	nop
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	b299      	uxth	r1, r3
 80021c0:	f107 0208 	add.w	r2, r7, #8
 80021c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2302      	movs	r3, #2
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f002 fbf9 	bl	80049c4 <HAL_I2C_Master_Transmit>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f1      	bne.n	80021bc <SetAuxbus+0x2c>
	HAL_Delay(10);
 80021d8:	200a      	movs	r0, #10
 80021da:	f001 feff 	bl	8003fdc <HAL_Delay>
	/*Turn off sleep mode by reseting SLEEP bit (bit 6) of the power management register #1 (PWR_MGMT_1, 0x6B)*/
	d[0] = MPU6050_PWR_MGMT_1;
 80021de:	236b      	movs	r3, #107	; 0x6b
 80021e0:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 80021e2:	2300      	movs	r3, #0
 80021e4:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 80021e6:	200a      	movs	r0, #10
 80021e8:	f001 fef8 	bl	8003fdc <HAL_Delay>
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <Set_config>:
void Set_config(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t f_cut){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_CONFIG;
 800220c:	231a      	movs	r3, #26
 800220e:	743b      	strb	r3, [r7, #16]
	d[1] = f_cut;
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	747b      	strb	r3, [r7, #17]
	HAL_Delay(10);
 8002214:	200a      	movs	r0, #10
 8002216:	f001 fee1 	bl	8003fdc <HAL_Delay>
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800221a:	bf00      	nop
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	b299      	uxth	r1, r3
 8002220:	f107 0210 	add.w	r2, r7, #16
 8002224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2302      	movs	r3, #2
 800222c:	6978      	ldr	r0, [r7, #20]
 800222e:	f002 fbc9 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f1      	bne.n	800221c <Set_config+0x28>
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <begin>:
#include "ms5611.h"
#include "math.h"
extern I2C_HandleTypeDef hi2c1;
extern void delay(uint16_t z);

bool begin(MS5611 *dev, ms5611_osr_t osr){
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
    //Wire.begin();
		while(HAL_I2C_IsDeviceReady(&hi2c1, MS5611_ADDRESS, 3, 100) != HAL_OK);
 8002250:	bf00      	nop
 8002252:	2364      	movs	r3, #100	; 0x64
 8002254:	2203      	movs	r2, #3
 8002256:	21ee      	movs	r1, #238	; 0xee
 8002258:	480f      	ldr	r0, [pc, #60]	; (8002298 <begin+0x54>)
 800225a:	f002 fed7 	bl	800500c <HAL_I2C_IsDeviceReady>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f6      	bne.n	8002252 <begin+0xe>
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8002264:	bf00      	nop
 8002266:	480c      	ldr	r0, [pc, #48]	; (8002298 <begin+0x54>)
 8002268:	f002 fffe 	bl	8005268 <HAL_I2C_GetState>
 800226c:	4603      	mov	r3, r0
 800226e:	2b20      	cmp	r3, #32
 8002270:	d1f9      	bne.n	8002266 <begin+0x22>
		setOversampling(dev, osr);
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f810 	bl	800229c <setOversampling>
		reset();
 800227c:	f000 f850 	bl	8002320 <reset>
		HAL_Delay(100);
 8002280:	2064      	movs	r0, #100	; 0x64
 8002282:	f001 feab 	bl	8003fdc <HAL_Delay>
    readPROM(dev);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f860 	bl	800234c <readPROM>
    return true;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200000d8 	.word	0x200000d8

0800229c <setOversampling>:

// Set oversampling value
void setOversampling(MS5611 *dev, ms5611_osr_t osr){
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
	  dev->uosr = osr;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    switch (osr)
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d82d      	bhi.n	8002312 <setOversampling+0x76>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <setOversampling+0x20>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022e1 	.word	0x080022e1
 80022c0:	08002313 	.word	0x08002313
 80022c4:	080022eb 	.word	0x080022eb
 80022c8:	08002313 	.word	0x08002313
 80022cc:	080022f5 	.word	0x080022f5
 80022d0:	08002313 	.word	0x08002313
 80022d4:	080022ff 	.word	0x080022ff
 80022d8:	08002313 	.word	0x08002313
 80022dc:	08002309 	.word	0x08002309
    {
	case MS5611_ULTRA_LOW_POWER:
	    dev->ct = 1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 80022e8:	e013      	b.n	8002312 <setOversampling+0x76>
	case MS5611_LOW_POWER:
	    dev->ct = 2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 80022f2:	e00e      	b.n	8002312 <setOversampling+0x76>
	case MS5611_STANDARD:
	    dev->ct = 3;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 80022fc:	e009      	b.n	8002312 <setOversampling+0x76>
	case MS5611_HIGH_RES:
	    dev->ct = 4;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2204      	movs	r2, #4
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002306:	e004      	b.n	8002312 <setOversampling+0x76>
	case MS5611_ULTRA_HIGH_RES:
	    dev->ct = 5;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2205      	movs	r2, #5
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002310:	bf00      	nop
    }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop

08002320 <reset>:
ms5611_osr_t getOversampling(MS5611 dev)
{
    return (ms5611_osr_t) dev.uosr;
}

void reset(void){ 
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af02      	add	r7, sp, #8
		while(HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t*) MS5611_CMD_RESET, 1, 10) != HAL_OK);
 8002326:	bf00      	nop
 8002328:	230a      	movs	r3, #10
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2301      	movs	r3, #1
 800232e:	221e      	movs	r2, #30
 8002330:	21ee      	movs	r1, #238	; 0xee
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <reset+0x28>)
 8002334:	f002 fb46 	bl	80049c4 <HAL_I2C_Master_Transmit>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f4      	bne.n	8002328 <reset+0x8>
		}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200000d8 	.word	0x200000d8

0800234c <readPROM>:

void readPROM(MS5611 *dev){
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af02      	add	r7, sp, #8
 8002352:	6078      	str	r0, [r7, #4]
    reset();
 8002354:	f7ff ffe4 	bl	8002320 <reset>
		HAL_Delay(3000);
 8002358:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800235c:	f001 fe3e 	bl	8003fdc <HAL_Delay>
		//read PROM
		uint8_t buf1[16];
		//uint16_t C[8];
		uint8_t CMD_PROM = 0xA0;
 8002360:	23a0      	movs	r3, #160	; 0xa0
 8002362:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 8; i++) {
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
 8002368:	e023      	b.n	80023b2 <readPROM+0x66>
		while (HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t *) &CMD_PROM, 1, 100) != HAL_OK);
 800236a:	bf00      	nop
 800236c:	f107 020f 	add.w	r2, r7, #15
 8002370:	2364      	movs	r3, #100	; 0x64
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2301      	movs	r3, #1
 8002376:	21ee      	movs	r1, #238	; 0xee
 8002378:	4826      	ldr	r0, [pc, #152]	; (8002414 <readPROM+0xc8>)
 800237a:	f002 fb23 	bl	80049c4 <HAL_I2C_Master_Transmit>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f3      	bne.n	800236c <readPROM+0x20>
		while (HAL_I2C_Master_Receive(&hi2c1, MS5611_ADDRESS_READ, &buf1[i*2], 2, 100) != HAL_OK);
 8002384:	bf00      	nop
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	f107 0210 	add.w	r2, r7, #16
 800238e:	441a      	add	r2, r3
 8002390:	2364      	movs	r3, #100	; 0x64
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2302      	movs	r3, #2
 8002396:	21ef      	movs	r1, #239	; 0xef
 8002398:	481e      	ldr	r0, [pc, #120]	; (8002414 <readPROM+0xc8>)
 800239a:	f002 fc11 	bl	8004bc0 <HAL_I2C_Master_Receive>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f0      	bne.n	8002386 <readPROM+0x3a>
		CMD_PROM = CMD_PROM + 2;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3302      	adds	r3, #2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 8; i++) {
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	3301      	adds	r3, #1
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	2b07      	cmp	r3, #7
 80023b6:	ddd8      	ble.n	800236a <readPROM+0x1e>
		}
		for (uint8_t i = 0; i < 6; i++) {
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023be:	e01c      	b.n	80023fa <readPROM+0xae>
		dev->fc[i] = (int16_t) buf1[2*i+2] << 8 | (int16_t) buf1[2*i+3];
 80023c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023c4:	3301      	adds	r3, #1
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	3328      	adds	r3, #40	; 0x28
 80023ca:	443b      	add	r3, r7
 80023cc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023d6:	0052      	lsls	r2, r2, #1
 80023d8:	3203      	adds	r2, #3
 80023da:	3228      	adds	r2, #40	; 0x28
 80023dc:	443a      	add	r2, r7
 80023de:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023e8:	4619      	mov	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uint8_t i = 0; i < 6; i++) {
 80023f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023f4:	3301      	adds	r3, #1
 80023f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d9de      	bls.n	80023c0 <readPROM+0x74>
		}
		crc4(dev->fc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f807 	bl	8002418 <crc4>
}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200000d8 	.word	0x200000d8

08002418 <crc4>:
// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg){
	return 0; 
}
//////////////////////////////////////////////////////
unsigned char crc4(unsigned int n_prom[]) {
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	int cnt; // simple counter
	unsigned int n_rem; // crc reminder
	unsigned int crc_read; // original value of the crc
	unsigned char n_bit;
	n_rem = 0x00;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
	crc_read=n_prom[7]; //save read CRC
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	60bb      	str	r3, [r7, #8]
	n_prom[7]=(0xFF00 & (n_prom[7])); //CRC byte is replaced by 0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	331c      	adds	r3, #28
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	331c      	adds	r3, #28
 8002434:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8002438:	601a      	str	r2, [r3, #0]
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e039      	b.n	80024b4 <crc4+0x9c>
		// choose LSB or MSB
		if (cnt%2==1) n_rem ^= (unsigned short) ((n_prom[cnt>>1]) & 0x00FF);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	bfb8      	it	lt
 800244a:	425b      	neglt	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d10b      	bne.n	8002468 <crc4+0x50>
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	105b      	asrs	r3, r3, #1
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4053      	eors	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	e00b      	b.n	8002480 <crc4+0x68>
		else n_rem ^= (unsigned short) (n_prom[cnt>>1]>>8);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	105b      	asrs	r3, r3, #1
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4053      	eors	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 8002480:	2308      	movs	r3, #8
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e010      	b.n	80024a8 <crc4+0x90>
			if (n_rem & (0x8000)) {
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <crc4+0x84>
				n_rem = (n_rem << 1) ^ 0x3000; 
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	e002      	b.n	80024a2 <crc4+0x8a>
			} else {
				n_rem = (n_rem << 1);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1eb      	bne.n	8002486 <crc4+0x6e>
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	ddc2      	ble.n	8002440 <crc4+0x28>
			}
		}
	}
	n_rem= (0x000F & (n_rem >> 12)); // final 4-bit reminder is CRC code
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	0b1b      	lsrs	r3, r3, #12
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	613b      	str	r3, [r7, #16]
	n_prom[7]=crc_read; // restore the crc_read to its original place
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	331c      	adds	r3, #28
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	601a      	str	r2, [r3, #0]
	return (n_rem ^ 0x0);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	b2db      	uxtb	r3, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_MspInit+0x4c>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_MspInit+0x4c>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_MspInit+0x4c>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_MspInit+0x4c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <HAL_MspInit+0x4c>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_MspInit+0x4c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <HAL_I2C_MspInit+0x84>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12b      	bne.n	80025a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_I2C_MspInit+0x88>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <HAL_I2C_MspInit+0x88>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_I2C_MspInit+0x88>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800256a:	23c0      	movs	r3, #192	; 0xc0
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256e:	2312      	movs	r3, #18
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800257a:	2304      	movs	r3, #4
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	; (80025b8 <HAL_I2C_MspInit+0x8c>)
 8002586:	f001 fef1 	bl	800436c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_I2C_MspInit+0x88>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <HAL_I2C_MspInit+0x88>)
 8002594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_I2C_MspInit+0x88>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40005400 	.word	0x40005400
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020400 	.word	0x40020400

080025bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a50      	ldr	r2, [pc, #320]	; (800271c <HAL_SPI_MspInit+0x160>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d14a      	bne.n	8002674 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	4b4f      	ldr	r3, [pc, #316]	; (8002720 <HAL_SPI_MspInit+0x164>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	4a4e      	ldr	r2, [pc, #312]	; (8002720 <HAL_SPI_MspInit+0x164>)
 80025e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025ec:	6453      	str	r3, [r2, #68]	; 0x44
 80025ee:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <HAL_SPI_MspInit+0x164>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	4b48      	ldr	r3, [pc, #288]	; (8002720 <HAL_SPI_MspInit+0x164>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a47      	ldr	r2, [pc, #284]	; (8002720 <HAL_SPI_MspInit+0x164>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b45      	ldr	r3, [pc, #276]	; (8002720 <HAL_SPI_MspInit+0x164>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_SPI_MspInit+0x164>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a40      	ldr	r2, [pc, #256]	; (8002720 <HAL_SPI_MspInit+0x164>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <HAL_SPI_MspInit+0x164>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002632:	2320      	movs	r3, #32
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002642:	2305      	movs	r3, #5
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264a:	4619      	mov	r1, r3
 800264c:	4835      	ldr	r0, [pc, #212]	; (8002724 <HAL_SPI_MspInit+0x168>)
 800264e:	f001 fe8d 	bl	800436c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002652:	2330      	movs	r3, #48	; 0x30
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002662:	2305      	movs	r3, #5
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266a:	4619      	mov	r1, r3
 800266c:	482e      	ldr	r0, [pc, #184]	; (8002728 <HAL_SPI_MspInit+0x16c>)
 800266e:	f001 fe7d 	bl	800436c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002672:	e04f      	b.n	8002714 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a2c      	ldr	r2, [pc, #176]	; (800272c <HAL_SPI_MspInit+0x170>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d14a      	bne.n	8002714 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_SPI_MspInit+0x164>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a26      	ldr	r2, [pc, #152]	; (8002720 <HAL_SPI_MspInit+0x164>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_SPI_MspInit+0x164>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_SPI_MspInit+0x164>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_SPI_MspInit+0x164>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <HAL_SPI_MspInit+0x164>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_SPI_MspInit+0x164>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_SPI_MspInit+0x164>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <HAL_SPI_MspInit+0x164>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026d2:	230c      	movs	r3, #12
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026e2:	2305      	movs	r3, #5
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ea:	4619      	mov	r1, r3
 80026ec:	4810      	ldr	r0, [pc, #64]	; (8002730 <HAL_SPI_MspInit+0x174>)
 80026ee:	f001 fe3d 	bl	800436c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002704:	2305      	movs	r3, #5
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270c:	4619      	mov	r1, r3
 800270e:	4806      	ldr	r0, [pc, #24]	; (8002728 <HAL_SPI_MspInit+0x16c>)
 8002710:	f001 fe2c 	bl	800436c <HAL_GPIO_Init>
}
 8002714:	bf00      	nop
 8002716:	3738      	adds	r7, #56	; 0x38
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40013000 	.word	0x40013000
 8002720:	40023800 	.word	0x40023800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40003800 	.word	0x40003800
 8002730:	40020800 	.word	0x40020800

08002734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	; 0x30
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 031c 	add.w	r3, r7, #28
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a44      	ldr	r2, [pc, #272]	; (8002864 <HAL_TIM_Base_MspInit+0x130>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	4b43      	ldr	r3, [pc, #268]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a42      	ldr	r2, [pc, #264]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b40      	ldr	r3, [pc, #256]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002772:	e073      	b.n	800285c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3c      	ldr	r2, [pc, #240]	; (800286c <HAL_TIM_Base_MspInit+0x138>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d134      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a38      	ldr	r2, [pc, #224]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b32      	ldr	r3, [pc, #200]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a31      	ldr	r2, [pc, #196]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027b6:	2303      	movs	r3, #3
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027c6:	2302      	movs	r3, #2
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	4827      	ldr	r0, [pc, #156]	; (8002870 <HAL_TIM_Base_MspInit+0x13c>)
 80027d2:	f001 fdcb 	bl	800436c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	201d      	movs	r0, #29
 80027dc:	f001 fcfd 	bl	80041da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027e0:	201d      	movs	r0, #29
 80027e2:	f001 fd16 	bl	8004212 <HAL_NVIC_EnableIRQ>
}
 80027e6:	e039      	b.n	800285c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM4)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a21      	ldr	r2, [pc, #132]	; (8002874 <HAL_TIM_Base_MspInit+0x140>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d134      	bne.n	800285c <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 8002818:	f043 0308 	orr.w	r3, r3, #8
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_TIM_Base_MspInit+0x134>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800282a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800282e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800283c:	2302      	movs	r3, #2
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4619      	mov	r1, r3
 8002846:	480c      	ldr	r0, [pc, #48]	; (8002878 <HAL_TIM_Base_MspInit+0x144>)
 8002848:	f001 fd90 	bl	800436c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	201e      	movs	r0, #30
 8002852:	f001 fcc2 	bl	80041da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002856:	201e      	movs	r0, #30
 8002858:	f001 fcdb 	bl	8004212 <HAL_NVIC_EnableIRQ>
}
 800285c:	bf00      	nop
 800285e:	3730      	adds	r7, #48	; 0x30
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40010000 	.word	0x40010000
 8002868:	40023800 	.word	0x40023800
 800286c:	40000400 	.word	0x40000400
 8002870:	40020400 	.word	0x40020400
 8002874:	40000800 	.word	0x40000800
 8002878:	40020c00 	.word	0x40020c00

0800287c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288c:	d10d      	bne.n	80028aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_TIM_PWM_MspInit+0x3c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a34      	ldr	r2, [pc, #208]	; (80029ac <HAL_TIM_MspPostInit+0xf0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d11f      	bne.n	800291e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <HAL_TIM_MspPostInit+0xf4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a32      	ldr	r2, [pc, #200]	; (80029b0 <HAL_TIM_MspPostInit+0xf4>)
 80028e8:	f043 0310 	orr.w	r3, r3, #16
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <HAL_TIM_MspPostInit+0xf4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80028fa:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	4827      	ldr	r0, [pc, #156]	; (80029b4 <HAL_TIM_MspPostInit+0xf8>)
 8002918:	f001 fd28 	bl	800436c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800291c:	e042      	b.n	80029a4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d13d      	bne.n	80029a4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <HAL_TIM_MspPostInit+0xf4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <HAL_TIM_MspPostInit+0xf4>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_TIM_MspPostInit+0xf4>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_TIM_MspPostInit+0xf4>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <HAL_TIM_MspPostInit+0xf4>)
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	6313      	str	r3, [r2, #48]	; 0x30
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <HAL_TIM_MspPostInit+0xf4>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8002960:	f248 0306 	movw	r3, #32774	; 0x8006
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002972:	2301      	movs	r3, #1
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	480e      	ldr	r0, [pc, #56]	; (80029b8 <HAL_TIM_MspPostInit+0xfc>)
 800297e:	f001 fcf5 	bl	800436c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002982:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002994:	2301      	movs	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	4619      	mov	r1, r3
 800299e:	4807      	ldr	r0, [pc, #28]	; (80029bc <HAL_TIM_MspPostInit+0x100>)
 80029a0:	f001 fce4 	bl	800436c <HAL_GPIO_Init>
}
 80029a4:	bf00      	nop
 80029a6:	3728      	adds	r7, #40	; 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400

080029c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a45      	ldr	r2, [pc, #276]	; (8002af4 <HAL_UART_MspInit+0x134>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d135      	bne.n	8002a4e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_UART_MspInit+0x138>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a43      	ldr	r2, [pc, #268]	; (8002af8 <HAL_UART_MspInit+0x138>)
 80029ec:	f043 0310 	orr.w	r3, r3, #16
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <HAL_UART_MspInit+0x138>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a3c      	ldr	r2, [pc, #240]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a2c:	2307      	movs	r3, #7
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4619      	mov	r1, r3
 8002a36:	4831      	ldr	r0, [pc, #196]	; (8002afc <HAL_UART_MspInit+0x13c>)
 8002a38:	f001 fc98 	bl	800436c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2025      	movs	r0, #37	; 0x25
 8002a42:	f001 fbca 	bl	80041da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a46:	2025      	movs	r0, #37	; 0x25
 8002a48:	f001 fbe3 	bl	8004212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a4c:	e04e      	b.n	8002aec <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2b      	ldr	r2, [pc, #172]	; (8002b00 <HAL_UART_MspInit+0x140>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d149      	bne.n	8002aec <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a66:	6413      	str	r3, [r2, #64]	; 0x40
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6313      	str	r3, [r2, #48]	; 0x30
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_UART_MspInit+0x138>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aac:	2308      	movs	r3, #8
 8002aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002abc:	2307      	movs	r3, #7
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480d      	ldr	r0, [pc, #52]	; (8002afc <HAL_UART_MspInit+0x13c>)
 8002ac8:	f001 fc50 	bl	800436c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002acc:	2320      	movs	r3, #32
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002adc:	2307      	movs	r3, #7
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4807      	ldr	r0, [pc, #28]	; (8002b04 <HAL_UART_MspInit+0x144>)
 8002ae8:	f001 fc40 	bl	800436c <HAL_GPIO_Init>
}
 8002aec:	bf00      	nop
 8002aee:	3730      	adds	r7, #48	; 0x30
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40011000 	.word	0x40011000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40004400 	.word	0x40004400
 8002b04:	40020c00 	.word	0x40020c00

08002b08 <limit>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

float limit(float number, float min, float max) {
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b12:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b16:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8002b1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2a:	d501      	bpl.n	8002b30 <limit+0x28>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	e00b      	b.n	8002b48 <limit+0x40>
 8002b30:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b40:	dd01      	ble.n	8002b46 <limit+0x3e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	e000      	b.n	8002b48 <limit+0x40>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	ee07 3a90 	vmov	s15, r3
}
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <ctl_motors_speed>:

void ctl_motors_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
  TIM1->CCR1 = m1;
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <ctl_motors_speed+0x34>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6353      	str	r3, [r2, #52]	; 0x34
  TIM1->CCR2 = m2;
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <ctl_motors_speed+0x34>)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR3 = m3;
 8002b76:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <ctl_motors_speed+0x34>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR4 = m4;
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <ctl_motors_speed+0x34>)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40010000 	.word	0x40010000

08002b94 <calibrated>:

uint8_t calibrated() {
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return 1;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <NMI_Handler+0x4>

08002baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <HardFault_Handler+0x4>

08002bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <MemManage_Handler+0x4>

08002bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bba:	e7fe      	b.n	8002bba <BusFault_Handler+0x4>

08002bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <UsageFault_Handler+0x4>

08002bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf0:	f001 f9d4 	bl	8003f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bf8:	b5b0      	push	{r4, r5, r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  // Read MPU6050 values
  SD_MPU6050_ReadAll(&hi2c1, &g_dev1);
 8002bfe:	495a      	ldr	r1, [pc, #360]	; (8002d68 <TIM3_IRQHandler+0x170>)
 8002c00:	485a      	ldr	r0, [pc, #360]	; (8002d6c <TIM3_IRQHandler+0x174>)
 8002c02:	f7ff fa43 	bl	800208c <SD_MPU6050_ReadAll>
  HMC5883L_getHeading(&g_mx, &g_my, &g_mz);
 8002c06:	4a5a      	ldr	r2, [pc, #360]	; (8002d70 <TIM3_IRQHandler+0x178>)
 8002c08:	495a      	ldr	r1, [pc, #360]	; (8002d74 <TIM3_IRQHandler+0x17c>)
 8002c0a:	485b      	ldr	r0, [pc, #364]	; (8002d78 <TIM3_IRQHandler+0x180>)
 8002c0c:	f7fe f9ec 	bl	8000fe8 <HMC5883L_getHeading>

  if (!calibrated()) {
 8002c10:	f7ff ffc0 	bl	8002b94 <calibrated>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 80d2 	bne.w	8002dc0 <TIM3_IRQHandler+0x1c8>
    float ax = -g_dev1.Accelerometer_X + g_ax_offset;
 8002c1c:	4b52      	ldr	r3, [pc, #328]	; (8002d68 <TIM3_IRQHandler+0x170>)
 8002c1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c22:	425b      	negs	r3, r3
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <TIM3_IRQHandler+0x184>)
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c36:	edc7 7a07 	vstr	s15, [r7, #28]
    float ay = -g_dev1.Accelerometer_Y + g_ay_offset;
 8002c3a:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <TIM3_IRQHandler+0x170>)
 8002c3c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002c40:	425b      	negs	r3, r3
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4a:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <TIM3_IRQHandler+0x188>)
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c54:	edc7 7a06 	vstr	s15, [r7, #24]
    float az = atan2(g_my, g_mx);
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <TIM3_IRQHandler+0x17c>)
 8002c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc60 	bl	8000524 <__aeabi_i2d>
 8002c64:	4604      	mov	r4, r0
 8002c66:	460d      	mov	r5, r1
 8002c68:	4b43      	ldr	r3, [pc, #268]	; (8002d78 <TIM3_IRQHandler+0x180>)
 8002c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fc58 	bl	8000524 <__aeabi_i2d>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	ec43 2b11 	vmov	d1, r2, r3
 8002c7c:	ec45 4b10 	vmov	d0, r4, r5
 8002c80:	f006 fbb0 	bl	80093e4 <atan2>
 8002c84:	ec53 2b10 	vmov	r2, r3, d0
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7fd ff4e 	bl	8000b2c <__aeabi_d2f>
 8002c90:	4603      	mov	r3, r0
 8002c92:	617b      	str	r3, [r7, #20]
    float gx = -g_dev1.Gyroscope_X + g_gx_offset;
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <TIM3_IRQHandler+0x170>)
 8002c96:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002c9a:	425b      	negs	r3, r3
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca4:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <TIM3_IRQHandler+0x18c>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	edc7 7a04 	vstr	s15, [r7, #16]
    float gy = g_dev1.Gyroscope_Y + g_gy_offset;
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <TIM3_IRQHandler+0x170>)
 8002cb4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <TIM3_IRQHandler+0x190>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cca:	edc7 7a03 	vstr	s15, [r7, #12]
    float gz = -g_dev1.Gyroscope_Z + g_gz_offset;
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <TIM3_IRQHandler+0x170>)
 8002cd0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <TIM3_IRQHandler+0x194>)
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	edc7 7a02 	vstr	s15, [r7, #8]

    g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[0], ax);
 8002cec:	ed97 0a07 	vldr	s0, [r7, #28]
 8002cf0:	4827      	ldr	r0, [pc, #156]	; (8002d90 <TIM3_IRQHandler+0x198>)
 8002cf2:	f7fe f9de 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8002cf6:	eef0 7a40 	vmov.f32	s15, s0
 8002cfa:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <TIM3_IRQHandler+0x19c>)
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
    g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[1], ay);
 8002d00:	ed97 0a06 	vldr	s0, [r7, #24]
 8002d04:	4824      	ldr	r0, [pc, #144]	; (8002d98 <TIM3_IRQHandler+0x1a0>)
 8002d06:	f7fe f9d4 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8002d0a:	eef0 7a40 	vmov.f32	s15, s0
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <TIM3_IRQHandler+0x1a4>)
 8002d10:	edc3 7a00 	vstr	s15, [r3]
    g_az = SimpleKalmanFilter_updateEstimate(&g_filters[2], az);
 8002d14:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d18:	4821      	ldr	r0, [pc, #132]	; (8002da0 <TIM3_IRQHandler+0x1a8>)
 8002d1a:	f7fe f9ca 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8002d1e:	eef0 7a40 	vmov.f32	s15, s0
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <TIM3_IRQHandler+0x1ac>)
 8002d24:	edc3 7a00 	vstr	s15, [r3]
    g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[3], gx);
 8002d28:	ed97 0a04 	vldr	s0, [r7, #16]
 8002d2c:	481e      	ldr	r0, [pc, #120]	; (8002da8 <TIM3_IRQHandler+0x1b0>)
 8002d2e:	f7fe f9c0 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8002d32:	eef0 7a40 	vmov.f32	s15, s0
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <TIM3_IRQHandler+0x1b4>)
 8002d38:	edc3 7a00 	vstr	s15, [r3]
    g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[4], gy);
 8002d3c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002d40:	481b      	ldr	r0, [pc, #108]	; (8002db0 <TIM3_IRQHandler+0x1b8>)
 8002d42:	f7fe f9b6 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8002d46:	eef0 7a40 	vmov.f32	s15, s0
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <TIM3_IRQHandler+0x1bc>)
 8002d4c:	edc3 7a00 	vstr	s15, [r3]
    g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[5], gz);
 8002d50:	ed97 0a02 	vldr	s0, [r7, #8]
 8002d54:	4818      	ldr	r0, [pc, #96]	; (8002db8 <TIM3_IRQHandler+0x1c0>)
 8002d56:	f7fe f9ac 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8002d5a:	eef0 7a40 	vmov.f32	s15, s0
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <TIM3_IRQHandler+0x1c4>)
 8002d60:	edc3 7a00 	vstr	s15, [r3]
 8002d64:	e1ca      	b.n	80030fc <TIM3_IRQHandler+0x504>
 8002d66:	bf00      	nop
 8002d68:	20000504 	.word	0x20000504
 8002d6c:	200000d8 	.word	0x200000d8
 8002d70:	200006ac 	.word	0x200006ac
 8002d74:	200006aa 	.word	0x200006aa
 8002d78:	200006a8 	.word	0x200006a8
 8002d7c:	20000030 	.word	0x20000030
 8002d80:	20000034 	.word	0x20000034
 8002d84:	20000038 	.word	0x20000038
 8002d88:	2000003c 	.word	0x2000003c
 8002d8c:	20000040 	.word	0x20000040
 8002d90:	20000384 	.word	0x20000384
 8002d94:	20000690 	.word	0x20000690
 8002d98:	2000039c 	.word	0x2000039c
 8002d9c:	20000694 	.word	0x20000694
 8002da0:	200003b4 	.word	0x200003b4
 8002da4:	20000698 	.word	0x20000698
 8002da8:	200003cc 	.word	0x200003cc
 8002dac:	2000069c 	.word	0x2000069c
 8002db0:	200003e4 	.word	0x200003e4
 8002db4:	200006a0 	.word	0x200006a0
 8002db8:	200003fc 	.word	0x200003fc
 8002dbc:	200006a4 	.word	0x200006a4
  }
  else {
    // Norm [-1, 1]
    float ax = limit(-g_dev1.Accelerometer_X + g_ax_offset, g_min_ax, g_max_ax) / (0.5*(g_max_ax - g_min_ax)); // Angle
 8002dc0:	4bd9      	ldr	r3, [pc, #868]	; (8003128 <TIM3_IRQHandler+0x530>)
 8002dc2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002dc6:	425b      	negs	r3, r3
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd0:	4bd6      	ldr	r3, [pc, #856]	; (800312c <TIM3_IRQHandler+0x534>)
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dda:	4bd5      	ldr	r3, [pc, #852]	; (8003130 <TIM3_IRQHandler+0x538>)
 8002ddc:	ed93 7a00 	vldr	s14, [r3]
 8002de0:	4bd4      	ldr	r3, [pc, #848]	; (8003134 <TIM3_IRQHandler+0x53c>)
 8002de2:	edd3 6a00 	vldr	s13, [r3]
 8002de6:	eeb0 1a66 	vmov.f32	s2, s13
 8002dea:	eef0 0a47 	vmov.f32	s1, s14
 8002dee:	eeb0 0a67 	vmov.f32	s0, s15
 8002df2:	f7ff fe89 	bl	8002b08 <limit>
 8002df6:	ee10 3a10 	vmov	r3, s0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fba4 	bl	8000548 <__aeabi_f2d>
 8002e00:	4604      	mov	r4, r0
 8002e02:	460d      	mov	r5, r1
 8002e04:	4bcb      	ldr	r3, [pc, #812]	; (8003134 <TIM3_IRQHandler+0x53c>)
 8002e06:	ed93 7a00 	vldr	s14, [r3]
 8002e0a:	4bc9      	ldr	r3, [pc, #804]	; (8003130 <TIM3_IRQHandler+0x538>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e14:	ee17 0a90 	vmov	r0, s15
 8002e18:	f7fd fb96 	bl	8000548 <__aeabi_f2d>
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	4bc5      	ldr	r3, [pc, #788]	; (8003138 <TIM3_IRQHandler+0x540>)
 8002e22:	f7fd fbe9 	bl	80005f8 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd fd0d 	bl	800084c <__aeabi_ddiv>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fe77 	bl	8000b2c <__aeabi_d2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
    float ay = limit(-g_dev1.Accelerometer_Y + g_ay_offset, g_min_ay, g_max_ay) / (0.5*(g_max_ay - g_min_ay));
 8002e42:	4bb9      	ldr	r3, [pc, #740]	; (8003128 <TIM3_IRQHandler+0x530>)
 8002e44:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002e48:	425b      	negs	r3, r3
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e52:	4bba      	ldr	r3, [pc, #744]	; (800313c <TIM3_IRQHandler+0x544>)
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5c:	4bb8      	ldr	r3, [pc, #736]	; (8003140 <TIM3_IRQHandler+0x548>)
 8002e5e:	ed93 7a00 	vldr	s14, [r3]
 8002e62:	4bb8      	ldr	r3, [pc, #736]	; (8003144 <TIM3_IRQHandler+0x54c>)
 8002e64:	edd3 6a00 	vldr	s13, [r3]
 8002e68:	eeb0 1a66 	vmov.f32	s2, s13
 8002e6c:	eef0 0a47 	vmov.f32	s1, s14
 8002e70:	eeb0 0a67 	vmov.f32	s0, s15
 8002e74:	f7ff fe48 	bl	8002b08 <limit>
 8002e78:	ee10 3a10 	vmov	r3, s0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb63 	bl	8000548 <__aeabi_f2d>
 8002e82:	4604      	mov	r4, r0
 8002e84:	460d      	mov	r5, r1
 8002e86:	4baf      	ldr	r3, [pc, #700]	; (8003144 <TIM3_IRQHandler+0x54c>)
 8002e88:	ed93 7a00 	vldr	s14, [r3]
 8002e8c:	4bac      	ldr	r3, [pc, #688]	; (8003140 <TIM3_IRQHandler+0x548>)
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e96:	ee17 0a90 	vmov	r0, s15
 8002e9a:	f7fd fb55 	bl	8000548 <__aeabi_f2d>
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	4ba5      	ldr	r3, [pc, #660]	; (8003138 <TIM3_IRQHandler+0x540>)
 8002ea4:	f7fd fba8 	bl	80005f8 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4620      	mov	r0, r4
 8002eae:	4629      	mov	r1, r5
 8002eb0:	f7fd fccc 	bl	800084c <__aeabi_ddiv>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f7fd fe36 	bl	8000b2c <__aeabi_d2f>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
    float az = atan2(g_my, g_mx);
 8002ec4:	4ba0      	ldr	r3, [pc, #640]	; (8003148 <TIM3_IRQHandler+0x550>)
 8002ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fb2a 	bl	8000524 <__aeabi_i2d>
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	460d      	mov	r5, r1
 8002ed4:	4b9d      	ldr	r3, [pc, #628]	; (800314c <TIM3_IRQHandler+0x554>)
 8002ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fb22 	bl	8000524 <__aeabi_i2d>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	ec43 2b11 	vmov	d1, r2, r3
 8002ee8:	ec45 4b10 	vmov	d0, r4, r5
 8002eec:	f006 fa7a 	bl	80093e4 <atan2>
 8002ef0:	ec53 2b10 	vmov	r2, r3, d0
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f7fd fe18 	bl	8000b2c <__aeabi_d2f>
 8002efc:	4603      	mov	r3, r0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    float gx = limit(-g_dev1.Gyroscope_X + g_gx_offset, g_min_gx, g_max_gx) / (0.5*(g_max_gx - g_min_gx)); // Velocity
 8002f00:	4b89      	ldr	r3, [pc, #548]	; (8003128 <TIM3_IRQHandler+0x530>)
 8002f02:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002f06:	425b      	negs	r3, r3
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f10:	4b8f      	ldr	r3, [pc, #572]	; (8003150 <TIM3_IRQHandler+0x558>)
 8002f12:	edd3 7a00 	vldr	s15, [r3]
 8002f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f1a:	4b8e      	ldr	r3, [pc, #568]	; (8003154 <TIM3_IRQHandler+0x55c>)
 8002f1c:	ed93 7a00 	vldr	s14, [r3]
 8002f20:	4b8d      	ldr	r3, [pc, #564]	; (8003158 <TIM3_IRQHandler+0x560>)
 8002f22:	edd3 6a00 	vldr	s13, [r3]
 8002f26:	eeb0 1a66 	vmov.f32	s2, s13
 8002f2a:	eef0 0a47 	vmov.f32	s1, s14
 8002f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f32:	f7ff fde9 	bl	8002b08 <limit>
 8002f36:	ee10 3a10 	vmov	r3, s0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fb04 	bl	8000548 <__aeabi_f2d>
 8002f40:	4604      	mov	r4, r0
 8002f42:	460d      	mov	r5, r1
 8002f44:	4b84      	ldr	r3, [pc, #528]	; (8003158 <TIM3_IRQHandler+0x560>)
 8002f46:	ed93 7a00 	vldr	s14, [r3]
 8002f4a:	4b82      	ldr	r3, [pc, #520]	; (8003154 <TIM3_IRQHandler+0x55c>)
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f54:	ee17 0a90 	vmov	r0, s15
 8002f58:	f7fd faf6 	bl	8000548 <__aeabi_f2d>
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	4b75      	ldr	r3, [pc, #468]	; (8003138 <TIM3_IRQHandler+0x540>)
 8002f62:	f7fd fb49 	bl	80005f8 <__aeabi_dmul>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f7fd fc6d 	bl	800084c <__aeabi_ddiv>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f7fd fdd7 	bl	8000b2c <__aeabi_d2f>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    float gy = limit(g_dev1.Gyroscope_Y + g_gy_offset, g_min_gy, g_max_gy) / (0.5*(g_max_gy - g_min_gy));
 8002f82:	4b69      	ldr	r3, [pc, #420]	; (8003128 <TIM3_IRQHandler+0x530>)
 8002f84:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f90:	4b72      	ldr	r3, [pc, #456]	; (800315c <TIM3_IRQHandler+0x564>)
 8002f92:	edd3 7a00 	vldr	s15, [r3]
 8002f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9a:	4b71      	ldr	r3, [pc, #452]	; (8003160 <TIM3_IRQHandler+0x568>)
 8002f9c:	ed93 7a00 	vldr	s14, [r3]
 8002fa0:	4b70      	ldr	r3, [pc, #448]	; (8003164 <TIM3_IRQHandler+0x56c>)
 8002fa2:	edd3 6a00 	vldr	s13, [r3]
 8002fa6:	eeb0 1a66 	vmov.f32	s2, s13
 8002faa:	eef0 0a47 	vmov.f32	s1, s14
 8002fae:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb2:	f7ff fda9 	bl	8002b08 <limit>
 8002fb6:	ee10 3a10 	vmov	r3, s0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fac4 	bl	8000548 <__aeabi_f2d>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	460d      	mov	r5, r1
 8002fc4:	4b67      	ldr	r3, [pc, #412]	; (8003164 <TIM3_IRQHandler+0x56c>)
 8002fc6:	ed93 7a00 	vldr	s14, [r3]
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <TIM3_IRQHandler+0x568>)
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd4:	ee17 0a90 	vmov	r0, s15
 8002fd8:	f7fd fab6 	bl	8000548 <__aeabi_f2d>
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	4b55      	ldr	r3, [pc, #340]	; (8003138 <TIM3_IRQHandler+0x540>)
 8002fe2:	f7fd fb09 	bl	80005f8 <__aeabi_dmul>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4620      	mov	r0, r4
 8002fec:	4629      	mov	r1, r5
 8002fee:	f7fd fc2d 	bl	800084c <__aeabi_ddiv>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fd fd97 	bl	8000b2c <__aeabi_d2f>
 8002ffe:	4603      	mov	r3, r0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
    float gz = limit(-g_dev1.Gyroscope_Z + g_gz_offset, g_min_gz, g_max_gz) / (0.5*(g_max_gz - g_min_gz));
 8003002:	4b49      	ldr	r3, [pc, #292]	; (8003128 <TIM3_IRQHandler+0x530>)
 8003004:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003008:	425b      	negs	r3, r3
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003012:	4b55      	ldr	r3, [pc, #340]	; (8003168 <TIM3_IRQHandler+0x570>)
 8003014:	edd3 7a00 	vldr	s15, [r3]
 8003018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <TIM3_IRQHandler+0x574>)
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	4b53      	ldr	r3, [pc, #332]	; (8003170 <TIM3_IRQHandler+0x578>)
 8003024:	edd3 6a00 	vldr	s13, [r3]
 8003028:	eeb0 1a66 	vmov.f32	s2, s13
 800302c:	eef0 0a47 	vmov.f32	s1, s14
 8003030:	eeb0 0a67 	vmov.f32	s0, s15
 8003034:	f7ff fd68 	bl	8002b08 <limit>
 8003038:	ee10 3a10 	vmov	r3, s0
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fa83 	bl	8000548 <__aeabi_f2d>
 8003042:	4604      	mov	r4, r0
 8003044:	460d      	mov	r5, r1
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <TIM3_IRQHandler+0x578>)
 8003048:	ed93 7a00 	vldr	s14, [r3]
 800304c:	4b47      	ldr	r3, [pc, #284]	; (800316c <TIM3_IRQHandler+0x574>)
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003056:	ee17 0a90 	vmov	r0, s15
 800305a:	f7fd fa75 	bl	8000548 <__aeabi_f2d>
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	4b35      	ldr	r3, [pc, #212]	; (8003138 <TIM3_IRQHandler+0x540>)
 8003064:	f7fd fac8 	bl	80005f8 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4620      	mov	r0, r4
 800306e:	4629      	mov	r1, r5
 8003070:	f7fd fbec 	bl	800084c <__aeabi_ddiv>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f7fd fd56 	bl	8000b2c <__aeabi_d2f>
 8003080:	4603      	mov	r3, r0
 8003082:	623b      	str	r3, [r7, #32]

    // Remove noise
    g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[0], ax);
 8003084:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003088:	483a      	ldr	r0, [pc, #232]	; (8003174 <TIM3_IRQHandler+0x57c>)
 800308a:	f7fe f812 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 800308e:	eef0 7a40 	vmov.f32	s15, s0
 8003092:	4b39      	ldr	r3, [pc, #228]	; (8003178 <TIM3_IRQHandler+0x580>)
 8003094:	edc3 7a00 	vstr	s15, [r3]
    g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[1], ay);
 8003098:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800309c:	4837      	ldr	r0, [pc, #220]	; (800317c <TIM3_IRQHandler+0x584>)
 800309e:	f7fe f808 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 80030a2:	eef0 7a40 	vmov.f32	s15, s0
 80030a6:	4b36      	ldr	r3, [pc, #216]	; (8003180 <TIM3_IRQHandler+0x588>)
 80030a8:	edc3 7a00 	vstr	s15, [r3]
    g_az = SimpleKalmanFilter_updateEstimate(&g_filters[2], az);
 80030ac:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80030b0:	4834      	ldr	r0, [pc, #208]	; (8003184 <TIM3_IRQHandler+0x58c>)
 80030b2:	f7fd fffe 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 80030b6:	eef0 7a40 	vmov.f32	s15, s0
 80030ba:	4b33      	ldr	r3, [pc, #204]	; (8003188 <TIM3_IRQHandler+0x590>)
 80030bc:	edc3 7a00 	vstr	s15, [r3]
    g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[3], gx);
 80030c0:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80030c4:	4831      	ldr	r0, [pc, #196]	; (800318c <TIM3_IRQHandler+0x594>)
 80030c6:	f7fd fff4 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 80030ca:	eef0 7a40 	vmov.f32	s15, s0
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <TIM3_IRQHandler+0x598>)
 80030d0:	edc3 7a00 	vstr	s15, [r3]
    g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[4], gy);
 80030d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80030d8:	482e      	ldr	r0, [pc, #184]	; (8003194 <TIM3_IRQHandler+0x59c>)
 80030da:	f7fd ffea 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 80030de:	eef0 7a40 	vmov.f32	s15, s0
 80030e2:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <TIM3_IRQHandler+0x5a0>)
 80030e4:	edc3 7a00 	vstr	s15, [r3]
    g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[5], gz);
 80030e8:	ed97 0a08 	vldr	s0, [r7, #32]
 80030ec:	482b      	ldr	r0, [pc, #172]	; (800319c <TIM3_IRQHandler+0x5a4>)
 80030ee:	f7fd ffe0 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 80030f2:	eef0 7a40 	vmov.f32	s15, s0
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <TIM3_IRQHandler+0x5a8>)
 80030f8:	edc3 7a00 	vstr	s15, [r3]
  }

  // Control pitch, roll, yaw using offsets
  g_ax += -0.02*g_pitch;
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <TIM3_IRQHandler+0x580>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fa21 	bl	8000548 <__aeabi_f2d>
 8003106:	4604      	mov	r4, r0
 8003108:	460d      	mov	r5, r1
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <TIM3_IRQHandler+0x5ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fa1a 	bl	8000548 <__aeabi_f2d>
 8003114:	a302      	add	r3, pc, #8	; (adr r3, 8003120 <TIM3_IRQHandler+0x528>)
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	e045      	b.n	80031a8 <TIM3_IRQHandler+0x5b0>
 800311c:	f3af 8000 	nop.w
 8003120:	47ae147b 	.word	0x47ae147b
 8003124:	bf947ae1 	.word	0xbf947ae1
 8003128:	20000504 	.word	0x20000504
 800312c:	20000030 	.word	0x20000030
 8003130:	20000008 	.word	0x20000008
 8003134:	2000001c 	.word	0x2000001c
 8003138:	3fe00000 	.word	0x3fe00000
 800313c:	20000034 	.word	0x20000034
 8003140:	2000000c 	.word	0x2000000c
 8003144:	20000020 	.word	0x20000020
 8003148:	200006aa 	.word	0x200006aa
 800314c:	200006a8 	.word	0x200006a8
 8003150:	20000038 	.word	0x20000038
 8003154:	20000010 	.word	0x20000010
 8003158:	20000024 	.word	0x20000024
 800315c:	2000003c 	.word	0x2000003c
 8003160:	20000014 	.word	0x20000014
 8003164:	20000028 	.word	0x20000028
 8003168:	20000040 	.word	0x20000040
 800316c:	20000018 	.word	0x20000018
 8003170:	2000002c 	.word	0x2000002c
 8003174:	20000384 	.word	0x20000384
 8003178:	20000690 	.word	0x20000690
 800317c:	2000039c 	.word	0x2000039c
 8003180:	20000694 	.word	0x20000694
 8003184:	200003b4 	.word	0x200003b4
 8003188:	20000698 	.word	0x20000698
 800318c:	200003cc 	.word	0x200003cc
 8003190:	2000069c 	.word	0x2000069c
 8003194:	200003e4 	.word	0x200003e4
 8003198:	200006a0 	.word	0x200006a0
 800319c:	200003fc 	.word	0x200003fc
 80031a0:	200006a4 	.word	0x200006a4
 80031a4:	20000728 	.word	0x20000728
 80031a8:	f7fd fa26 	bl	80005f8 <__aeabi_dmul>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd f86a 	bl	800028c <__adddf3>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	f7fd fcb4 	bl	8000b2c <__aeabi_d2f>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4aac      	ldr	r2, [pc, #688]	; (8003478 <TIM3_IRQHandler+0x880>)
 80031c8:	6013      	str	r3, [r2, #0]
  g_ay += 0.02*g_roll;
 80031ca:	4bac      	ldr	r3, [pc, #688]	; (800347c <TIM3_IRQHandler+0x884>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f9ba 	bl	8000548 <__aeabi_f2d>
 80031d4:	4604      	mov	r4, r0
 80031d6:	460d      	mov	r5, r1
 80031d8:	4ba9      	ldr	r3, [pc, #676]	; (8003480 <TIM3_IRQHandler+0x888>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f9b3 	bl	8000548 <__aeabi_f2d>
 80031e2:	a3a1      	add	r3, pc, #644	; (adr r3, 8003468 <TIM3_IRQHandler+0x870>)
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f7fd fa06 	bl	80005f8 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4620      	mov	r0, r4
 80031f2:	4629      	mov	r1, r5
 80031f4:	f7fd f84a 	bl	800028c <__adddf3>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	f7fd fc94 	bl	8000b2c <__aeabi_d2f>
 8003204:	4603      	mov	r3, r0
 8003206:	4a9d      	ldr	r2, [pc, #628]	; (800347c <TIM3_IRQHandler+0x884>)
 8003208:	6013      	str	r3, [r2, #0]
  g_az += -0.02*g_yaw;
 800320a:	4b9e      	ldr	r3, [pc, #632]	; (8003484 <TIM3_IRQHandler+0x88c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f99a 	bl	8000548 <__aeabi_f2d>
 8003214:	4604      	mov	r4, r0
 8003216:	460d      	mov	r5, r1
 8003218:	4b9b      	ldr	r3, [pc, #620]	; (8003488 <TIM3_IRQHandler+0x890>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd f993 	bl	8000548 <__aeabi_f2d>
 8003222:	a393      	add	r3, pc, #588	; (adr r3, 8003470 <TIM3_IRQHandler+0x878>)
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fd f9e6 	bl	80005f8 <__aeabi_dmul>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	f7fd f82a 	bl	800028c <__adddf3>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	f7fd fc74 	bl	8000b2c <__aeabi_d2f>
 8003244:	4603      	mov	r3, r0
 8003246:	4a8f      	ldr	r2, [pc, #572]	; (8003484 <TIM3_IRQHandler+0x88c>)
 8003248:	6013      	str	r3, [r2, #0]

  if (g_thrust <= -99 && g_yaw <= -99
 800324a:	4b90      	ldr	r3, [pc, #576]	; (800348c <TIM3_IRQHandler+0x894>)
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8003490 <TIM3_IRQHandler+0x898>
 8003254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	d820      	bhi.n	80032a0 <TIM3_IRQHandler+0x6a8>
 800325e:	4b8a      	ldr	r3, [pc, #552]	; (8003488 <TIM3_IRQHandler+0x890>)
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003490 <TIM3_IRQHandler+0x898>
 8003268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	d816      	bhi.n	80032a0 <TIM3_IRQHandler+0x6a8>
      && g_pitch <= -99 && g_roll >= 98) {
 8003272:	4b88      	ldr	r3, [pc, #544]	; (8003494 <TIM3_IRQHandler+0x89c>)
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003490 <TIM3_IRQHandler+0x898>
 800327c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003284:	d80c      	bhi.n	80032a0 <TIM3_IRQHandler+0x6a8>
 8003286:	4b7e      	ldr	r3, [pc, #504]	; (8003480 <TIM3_IRQHandler+0x888>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003498 <TIM3_IRQHandler+0x8a0>
 8003290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	db02      	blt.n	80032a0 <TIM3_IRQHandler+0x6a8>
    fly_mode = ready;
 800329a:	4b80      	ldr	r3, [pc, #512]	; (800349c <TIM3_IRQHandler+0x8a4>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
  }

  g_conn_lost_counter += 1;
 80032a0:	4b7f      	ldr	r3, [pc, #508]	; (80034a0 <TIM3_IRQHandler+0x8a8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	4a7e      	ldr	r2, [pc, #504]	; (80034a0 <TIM3_IRQHandler+0x8a8>)
 80032a8:	6013      	str	r3, [r2, #0]
  if (g_conn_lost_counter > MAX_LOST_CONN_COUNTER || g_conn_lost_counter < 0) {
 80032aa:	4b7d      	ldr	r3, [pc, #500]	; (80034a0 <TIM3_IRQHandler+0x8a8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b32      	cmp	r3, #50	; 0x32
 80032b0:	dc03      	bgt.n	80032ba <TIM3_IRQHandler+0x6c2>
 80032b2:	4b7b      	ldr	r3, [pc, #492]	; (80034a0 <TIM3_IRQHandler+0x8a8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da14      	bge.n	80032e4 <TIM3_IRQHandler+0x6ec>
    g_I_pitch = 0;
 80032ba:	4b7a      	ldr	r3, [pc, #488]	; (80034a4 <TIM3_IRQHandler+0x8ac>)
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
    g_I_roll = 0;
 80032c2:	4b79      	ldr	r3, [pc, #484]	; (80034a8 <TIM3_IRQHandler+0x8b0>)
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
    g_I_yaw = 0;
 80032ca:	4b78      	ldr	r3, [pc, #480]	; (80034ac <TIM3_IRQHandler+0x8b4>)
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
    ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 80032d2:	230f      	movs	r3, #15
 80032d4:	220f      	movs	r2, #15
 80032d6:	210f      	movs	r1, #15
 80032d8:	200f      	movs	r0, #15
 80032da:	f7ff fc3f 	bl	8002b5c <ctl_motors_speed>
    fly_mode = init;
 80032de:	4b6f      	ldr	r3, [pc, #444]	; (800349c <TIM3_IRQHandler+0x8a4>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
  }

  switch (fly_mode) {
 80032e4:	4b6d      	ldr	r3, [pc, #436]	; (800349c <TIM3_IRQHandler+0x8a4>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b06      	cmp	r3, #6
 80032ea:	f200 833e 	bhi.w	800396a <TIM3_IRQHandler+0xd72>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <TIM3_IRQHandler+0x6fc>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003311 	.word	0x08003311
 80032f8:	08003337 	.word	0x08003337
 80032fc:	0800337d 	.word	0x0800337d
 8003300:	08003393 	.word	0x08003393
 8003304:	080033a9 	.word	0x080033a9
 8003308:	080033bf 	.word	0x080033bf
 800330c:	080034c5 	.word	0x080034c5
    case init:
      g_I_pitch = 0;
 8003310:	4b64      	ldr	r3, [pc, #400]	; (80034a4 <TIM3_IRQHandler+0x8ac>)
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
      g_I_roll = 0;
 8003318:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <TIM3_IRQHandler+0x8b0>)
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
      g_I_yaw = 0;
 8003320:	4b62      	ldr	r3, [pc, #392]	; (80034ac <TIM3_IRQHandler+0x8b4>)
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003328:	230f      	movs	r3, #15
 800332a:	220f      	movs	r2, #15
 800332c:	210f      	movs	r1, #15
 800332e:	200f      	movs	r0, #15
 8003330:	f7ff fc14 	bl	8002b5c <ctl_motors_speed>
      break;
 8003334:	e319      	b.n	800396a <TIM3_IRQHandler+0xd72>
    case ready:
      g_I_pitch = 0;
 8003336:	4b5b      	ldr	r3, [pc, #364]	; (80034a4 <TIM3_IRQHandler+0x8ac>)
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
      g_I_roll = 0;
 800333e:	4b5a      	ldr	r3, [pc, #360]	; (80034a8 <TIM3_IRQHandler+0x8b0>)
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
      g_I_yaw = 0;
 8003346:	4b59      	ldr	r3, [pc, #356]	; (80034ac <TIM3_IRQHandler+0x8b4>)
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800334e:	f240 2323 	movw	r3, #547	; 0x223
 8003352:	f240 2223 	movw	r2, #547	; 0x223
 8003356:	f240 2123 	movw	r1, #547	; 0x223
 800335a:	f240 2023 	movw	r0, #547	; 0x223
 800335e:	f7ff fbfd 	bl	8002b5c <ctl_motors_speed>
      if (g_thrust > 0) {
 8003362:	4b4a      	ldr	r3, [pc, #296]	; (800348c <TIM3_IRQHandler+0x894>)
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003370:	dc00      	bgt.n	8003374 <TIM3_IRQHandler+0x77c>
        fly_mode = testing_2;
      }

      break;
 8003372:	e2fa      	b.n	800396a <TIM3_IRQHandler+0xd72>
        fly_mode = testing_2;
 8003374:	4b49      	ldr	r3, [pc, #292]	; (800349c <TIM3_IRQHandler+0x8a4>)
 8003376:	2206      	movs	r2, #6
 8003378:	701a      	strb	r2, [r3, #0]
      break;
 800337a:	e2f6      	b.n	800396a <TIM3_IRQHandler+0xd72>
    case holding:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800337c:	f240 2323 	movw	r3, #547	; 0x223
 8003380:	f240 2223 	movw	r2, #547	; 0x223
 8003384:	f240 2123 	movw	r1, #547	; 0x223
 8003388:	f240 2023 	movw	r0, #547	; 0x223
 800338c:	f7ff fbe6 	bl	8002b5c <ctl_motors_speed>
      break;
 8003390:	e2eb      	b.n	800396a <TIM3_IRQHandler+0xd72>
    case moving:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003392:	f240 2323 	movw	r3, #547	; 0x223
 8003396:	f240 2223 	movw	r2, #547	; 0x223
 800339a:	f240 2123 	movw	r1, #547	; 0x223
 800339e:	f240 2023 	movw	r0, #547	; 0x223
 80033a2:	f7ff fbdb 	bl	8002b5c <ctl_motors_speed>
      break;
 80033a6:	e2e0      	b.n	800396a <TIM3_IRQHandler+0xd72>
    case landing:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 80033a8:	f240 2323 	movw	r3, #547	; 0x223
 80033ac:	f240 2223 	movw	r2, #547	; 0x223
 80033b0:	f240 2123 	movw	r1, #547	; 0x223
 80033b4:	f240 2023 	movw	r0, #547	; 0x223
 80033b8:	f7ff fbd0 	bl	8002b5c <ctl_motors_speed>
      break;
 80033bc:	e2d5      	b.n	800396a <TIM3_IRQHandler+0xd72>
    case testing_1:
      g_sig1 = MIN_SPEED + g_thrust;
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <TIM3_IRQHandler+0x894>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80034b0 <TIM3_IRQHandler+0x8b8>
 80033c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <TIM3_IRQHandler+0x8bc>)
 80033ce:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + g_thrust;
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <TIM3_IRQHandler+0x894>)
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80034b0 <TIM3_IRQHandler+0x8b8>
 80033dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033e0:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <TIM3_IRQHandler+0x8c0>)
 80033e2:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + g_thrust;
 80033e6:	4b29      	ldr	r3, [pc, #164]	; (800348c <TIM3_IRQHandler+0x894>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80034b0 <TIM3_IRQHandler+0x8b8>
 80033f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033f4:	4b31      	ldr	r3, [pc, #196]	; (80034bc <TIM3_IRQHandler+0x8c4>)
 80033f6:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + g_thrust;
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <TIM3_IRQHandler+0x894>)
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80034b0 <TIM3_IRQHandler+0x8b8>
 8003404:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <TIM3_IRQHandler+0x8c8>)
 800340a:	edc3 7a00 	vstr	s15, [r3]
      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <TIM3_IRQHandler+0x8bc>)
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <TIM3_IRQHandler+0x8c0>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003422:	4b26      	ldr	r3, [pc, #152]	; (80034bc <TIM3_IRQHandler+0x8c4>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <TIM3_IRQHandler+0x8c8>)
 800342e:	edd3 7a00 	vldr	s15, [r3]
 8003432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003436:	ee17 3a90 	vmov	r3, s15
 800343a:	ee16 2a10 	vmov	r2, s12
 800343e:	ee16 1a90 	vmov	r1, s13
 8003442:	ee17 0a10 	vmov	r0, s14
 8003446:	f7ff fb89 	bl	8002b5c <ctl_motors_speed>

      if (g_thrust <= -99) {
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <TIM3_IRQHandler+0x894>)
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003490 <TIM3_IRQHandler+0x898>
 8003454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	d900      	bls.n	8003460 <TIM3_IRQHandler+0x868>
        fly_mode = init;
      }

      break;
 800345e:	e284      	b.n	800396a <TIM3_IRQHandler+0xd72>
        fly_mode = init;
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <TIM3_IRQHandler+0x8a4>)
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
      break;
 8003466:	e280      	b.n	800396a <TIM3_IRQHandler+0xd72>
 8003468:	47ae147b 	.word	0x47ae147b
 800346c:	3f947ae1 	.word	0x3f947ae1
 8003470:	47ae147b 	.word	0x47ae147b
 8003474:	bf947ae1 	.word	0xbf947ae1
 8003478:	20000690 	.word	0x20000690
 800347c:	20000694 	.word	0x20000694
 8003480:	2000072c 	.word	0x2000072c
 8003484:	20000698 	.word	0x20000698
 8003488:	20000730 	.word	0x20000730
 800348c:	20000724 	.word	0x20000724
 8003490:	c2c60000 	.word	0xc2c60000
 8003494:	20000728 	.word	0x20000728
 8003498:	42c40000 	.word	0x42c40000
 800349c:	200006ae 	.word	0x200006ae
 80034a0:	20000004 	.word	0x20000004
 80034a4:	200006b4 	.word	0x200006b4
 80034a8:	200006c0 	.word	0x200006c0
 80034ac:	200006cc 	.word	0x200006cc
 80034b0:	4408c000 	.word	0x4408c000
 80034b4:	200006d4 	.word	0x200006d4
 80034b8:	200006d8 	.word	0x200006d8
 80034bc:	200006dc 	.word	0x200006dc
 80034c0:	200006e0 	.word	0x200006e0
    case testing_2:
      g_P_pitch = g_ax*P_PITCH_GAIN;
 80034c4:	4bd0      	ldr	r3, [pc, #832]	; (8003808 <TIM3_IRQHandler+0xc10>)
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800380c <TIM3_IRQHandler+0xc14>
 80034ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d2:	4bcf      	ldr	r3, [pc, #828]	; (8003810 <TIM3_IRQHandler+0xc18>)
 80034d4:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch += g_ax*I_PITCH_GAIN;
 80034d8:	4bce      	ldr	r3, [pc, #824]	; (8003814 <TIM3_IRQHandler+0xc1c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd f833 	bl	8000548 <__aeabi_f2d>
 80034e2:	4604      	mov	r4, r0
 80034e4:	460d      	mov	r5, r1
 80034e6:	4bc8      	ldr	r3, [pc, #800]	; (8003808 <TIM3_IRQHandler+0xc10>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd f82c 	bl	8000548 <__aeabi_f2d>
 80034f0:	a3c1      	add	r3, pc, #772	; (adr r3, 80037f8 <TIM3_IRQHandler+0xc00>)
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f7fd f87f 	bl	80005f8 <__aeabi_dmul>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4620      	mov	r0, r4
 8003500:	4629      	mov	r1, r5
 8003502:	f7fc fec3 	bl	800028c <__adddf3>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4610      	mov	r0, r2
 800350c:	4619      	mov	r1, r3
 800350e:	f7fd fb0d 	bl	8000b2c <__aeabi_d2f>
 8003512:	4603      	mov	r3, r0
 8003514:	4abf      	ldr	r2, [pc, #764]	; (8003814 <TIM3_IRQHandler+0xc1c>)
 8003516:	6013      	str	r3, [r2, #0]
      g_I_pitch = limit(g_I_pitch, MIN_INTEGRAL, MAX_INTEGRAL);
 8003518:	4bbe      	ldr	r3, [pc, #760]	; (8003814 <TIM3_IRQHandler+0xc1c>)
 800351a:	edd3 7a00 	vldr	s15, [r3]
 800351e:	ed9f 1abe 	vldr	s2, [pc, #760]	; 8003818 <TIM3_IRQHandler+0xc20>
 8003522:	eddf 0abe 	vldr	s1, [pc, #760]	; 800381c <TIM3_IRQHandler+0xc24>
 8003526:	eeb0 0a67 	vmov.f32	s0, s15
 800352a:	f7ff faed 	bl	8002b08 <limit>
 800352e:	eef0 7a40 	vmov.f32	s15, s0
 8003532:	4bb8      	ldr	r3, [pc, #736]	; (8003814 <TIM3_IRQHandler+0xc1c>)
 8003534:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = g_gy*D_PITCH_GAIN;
 8003538:	4bb9      	ldr	r3, [pc, #740]	; (8003820 <TIM3_IRQHandler+0xc28>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003546:	4bb7      	ldr	r3, [pc, #732]	; (8003824 <TIM3_IRQHandler+0xc2c>)
 8003548:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = g_ay*P_ROLL_GAIN;
 800354c:	4bb6      	ldr	r3, [pc, #728]	; (8003828 <TIM3_IRQHandler+0xc30>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800380c <TIM3_IRQHandler+0xc14>
 8003556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800355a:	4bb4      	ldr	r3, [pc, #720]	; (800382c <TIM3_IRQHandler+0xc34>)
 800355c:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll += g_ay*I_ROLL_GAIN;
 8003560:	4bb3      	ldr	r3, [pc, #716]	; (8003830 <TIM3_IRQHandler+0xc38>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fc ffef 	bl	8000548 <__aeabi_f2d>
 800356a:	4604      	mov	r4, r0
 800356c:	460d      	mov	r5, r1
 800356e:	4bae      	ldr	r3, [pc, #696]	; (8003828 <TIM3_IRQHandler+0xc30>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fc ffe8 	bl	8000548 <__aeabi_f2d>
 8003578:	a39f      	add	r3, pc, #636	; (adr r3, 80037f8 <TIM3_IRQHandler+0xc00>)
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f7fd f83b 	bl	80005f8 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4620      	mov	r0, r4
 8003588:	4629      	mov	r1, r5
 800358a:	f7fc fe7f 	bl	800028c <__adddf3>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f7fd fac9 	bl	8000b2c <__aeabi_d2f>
 800359a:	4603      	mov	r3, r0
 800359c:	4aa4      	ldr	r2, [pc, #656]	; (8003830 <TIM3_IRQHandler+0xc38>)
 800359e:	6013      	str	r3, [r2, #0]
      g_I_roll = limit(g_I_roll, MIN_INTEGRAL, MAX_INTEGRAL);
 80035a0:	4ba3      	ldr	r3, [pc, #652]	; (8003830 <TIM3_IRQHandler+0xc38>)
 80035a2:	edd3 7a00 	vldr	s15, [r3]
 80035a6:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8003818 <TIM3_IRQHandler+0xc20>
 80035aa:	eddf 0a9c 	vldr	s1, [pc, #624]	; 800381c <TIM3_IRQHandler+0xc24>
 80035ae:	eeb0 0a67 	vmov.f32	s0, s15
 80035b2:	f7ff faa9 	bl	8002b08 <limit>
 80035b6:	eef0 7a40 	vmov.f32	s15, s0
 80035ba:	4b9d      	ldr	r3, [pc, #628]	; (8003830 <TIM3_IRQHandler+0xc38>)
 80035bc:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = g_gx*D_ROLL_GAIN;
 80035c0:	4b9c      	ldr	r3, [pc, #624]	; (8003834 <TIM3_IRQHandler+0xc3c>)
 80035c2:	edd3 7a00 	vldr	s15, [r3]
 80035c6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80035ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ce:	4b9a      	ldr	r3, [pc, #616]	; (8003838 <TIM3_IRQHandler+0xc40>)
 80035d0:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = g_az*P_YAW_GAIN;
 80035d4:	4b99      	ldr	r3, [pc, #612]	; (800383c <TIM3_IRQHandler+0xc44>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80035de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035e2:	4b97      	ldr	r3, [pc, #604]	; (8003840 <TIM3_IRQHandler+0xc48>)
 80035e4:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw += g_az*I_YAW_GAIN;
 80035e8:	4b96      	ldr	r3, [pc, #600]	; (8003844 <TIM3_IRQHandler+0xc4c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fc ffab 	bl	8000548 <__aeabi_f2d>
 80035f2:	4604      	mov	r4, r0
 80035f4:	460d      	mov	r5, r1
 80035f6:	4b91      	ldr	r3, [pc, #580]	; (800383c <TIM3_IRQHandler+0xc44>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ffa4 	bl	8000548 <__aeabi_f2d>
 8003600:	a37f      	add	r3, pc, #508	; (adr r3, 8003800 <TIM3_IRQHandler+0xc08>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fc fff7 	bl	80005f8 <__aeabi_dmul>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4620      	mov	r0, r4
 8003610:	4629      	mov	r1, r5
 8003612:	f7fc fe3b 	bl	800028c <__adddf3>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	f7fd fa85 	bl	8000b2c <__aeabi_d2f>
 8003622:	4603      	mov	r3, r0
 8003624:	4a87      	ldr	r2, [pc, #540]	; (8003844 <TIM3_IRQHandler+0xc4c>)
 8003626:	6013      	str	r3, [r2, #0]
      g_I_yaw = limit(g_I_yaw, MIN_INTEGRAL, MAX_INTEGRAL);
 8003628:	4b86      	ldr	r3, [pc, #536]	; (8003844 <TIM3_IRQHandler+0xc4c>)
 800362a:	edd3 7a00 	vldr	s15, [r3]
 800362e:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8003818 <TIM3_IRQHandler+0xc20>
 8003632:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800381c <TIM3_IRQHandler+0xc24>
 8003636:	eeb0 0a67 	vmov.f32	s0, s15
 800363a:	f7ff fa65 	bl	8002b08 <limit>
 800363e:	eef0 7a40 	vmov.f32	s15, s0
 8003642:	4b80      	ldr	r3, [pc, #512]	; (8003844 <TIM3_IRQHandler+0xc4c>)
 8003644:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = g_gz*D_YAW_GAIN;
 8003648:	4b7f      	ldr	r3, [pc, #508]	; (8003848 <TIM3_IRQHandler+0xc50>)
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003656:	4b7d      	ldr	r3, [pc, #500]	; (800384c <TIM3_IRQHandler+0xc54>)
 8003658:	edc3 7a00 	vstr	s15, [r3]

      int thrust = MIN_SPEED + 2*g_thrust;
 800365c:	4b7c      	ldr	r3, [pc, #496]	; (8003850 <TIM3_IRQHandler+0xc58>)
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003666:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003854 <TIM3_IRQHandler+0xc5c>
 800366a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800366e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003672:	ee17 3a90 	vmov	r3, s15
 8003676:	607b      	str	r3, [r7, #4]

      g_sig1 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003682:	4b63      	ldr	r3, [pc, #396]	; (8003810 <TIM3_IRQHandler+0xc18>)
 8003684:	edd3 6a00 	vldr	s13, [r3]
 8003688:	4b62      	ldr	r3, [pc, #392]	; (8003814 <TIM3_IRQHandler+0xc1c>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003692:	4b64      	ldr	r3, [pc, #400]	; (8003824 <TIM3_IRQHandler+0xc2c>)
 8003694:	edd3 7a00 	vldr	s15, [r3]
 8003698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a0:	4b62      	ldr	r3, [pc, #392]	; (800382c <TIM3_IRQHandler+0xc34>)
 80036a2:	edd3 6a00 	vldr	s13, [r3]
 80036a6:	4b62      	ldr	r3, [pc, #392]	; (8003830 <TIM3_IRQHandler+0xc38>)
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80036b0:	4b61      	ldr	r3, [pc, #388]	; (8003838 <TIM3_IRQHandler+0xc40>)
 80036b2:	edd3 7a00 	vldr	s15, [r3]
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036be:	4b60      	ldr	r3, [pc, #384]	; (8003840 <TIM3_IRQHandler+0xc48>)
 80036c0:	edd3 6a00 	vldr	s13, [r3]
 80036c4:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <TIM3_IRQHandler+0xc4c>)
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80036ce:	4b5f      	ldr	r3, [pc, #380]	; (800384c <TIM3_IRQHandler+0xc54>)
 80036d0:	edd3 7a00 	vldr	s15, [r3]
 80036d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036dc:	4b5e      	ldr	r3, [pc, #376]	; (8003858 <TIM3_IRQHandler+0xc60>)
 80036de:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	ee07 3a90 	vmov	s15, r3
 80036e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036ec:	4b48      	ldr	r3, [pc, #288]	; (8003810 <TIM3_IRQHandler+0xc18>)
 80036ee:	edd3 6a00 	vldr	s13, [r3]
 80036f2:	4b48      	ldr	r3, [pc, #288]	; (8003814 <TIM3_IRQHandler+0xc1c>)
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80036fc:	4b49      	ldr	r3, [pc, #292]	; (8003824 <TIM3_IRQHandler+0xc2c>)
 80036fe:	edd3 7a00 	vldr	s15, [r3]
 8003702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003706:	ee37 7a27 	vadd.f32	s14, s14, s15
 800370a:	4b48      	ldr	r3, [pc, #288]	; (800382c <TIM3_IRQHandler+0xc34>)
 800370c:	edd3 6a00 	vldr	s13, [r3]
 8003710:	4b47      	ldr	r3, [pc, #284]	; (8003830 <TIM3_IRQHandler+0xc38>)
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <TIM3_IRQHandler+0xc40>)
 800371c:	edd3 7a00 	vldr	s15, [r3]
 8003720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003724:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <TIM3_IRQHandler+0xc48>)
 800372a:	edd3 6a00 	vldr	s13, [r3]
 800372e:	4b45      	ldr	r3, [pc, #276]	; (8003844 <TIM3_IRQHandler+0xc4c>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003738:	4b44      	ldr	r3, [pc, #272]	; (800384c <TIM3_IRQHandler+0xc54>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003746:	4b45      	ldr	r3, [pc, #276]	; (800385c <TIM3_IRQHandler+0xc64>)
 8003748:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003756:	4b2e      	ldr	r3, [pc, #184]	; (8003810 <TIM3_IRQHandler+0xc18>)
 8003758:	edd3 6a00 	vldr	s13, [r3]
 800375c:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <TIM3_IRQHandler+0xc1c>)
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003766:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <TIM3_IRQHandler+0xc2c>)
 8003768:	edd3 7a00 	vldr	s15, [r3]
 800376c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003770:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003774:	4b2d      	ldr	r3, [pc, #180]	; (800382c <TIM3_IRQHandler+0xc34>)
 8003776:	edd3 6a00 	vldr	s13, [r3]
 800377a:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <TIM3_IRQHandler+0xc38>)
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <TIM3_IRQHandler+0xc40>)
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <TIM3_IRQHandler+0xc48>)
 8003794:	edd3 6a00 	vldr	s13, [r3]
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <TIM3_IRQHandler+0xc4c>)
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80037a2:	4b2a      	ldr	r3, [pc, #168]	; (800384c <TIM3_IRQHandler+0xc54>)
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037b0:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <TIM3_IRQHandler+0xc68>)
 80037b2:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	ee07 3a90 	vmov	s15, r3
 80037bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c0:	4b13      	ldr	r3, [pc, #76]	; (8003810 <TIM3_IRQHandler+0xc18>)
 80037c2:	edd3 6a00 	vldr	s13, [r3]
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <TIM3_IRQHandler+0xc1c>)
 80037c8:	edd3 7a00 	vldr	s15, [r3]
 80037cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <TIM3_IRQHandler+0xc2c>)
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <TIM3_IRQHandler+0xc34>)
 80037e0:	edd3 6a00 	vldr	s13, [r3]
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <TIM3_IRQHandler+0xc38>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <TIM3_IRQHandler+0xc40>)
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	e036      	b.n	8003864 <TIM3_IRQHandler+0xc6c>
 80037f6:	bf00      	nop
 80037f8:	47ae147b 	.word	0x47ae147b
 80037fc:	3f947ae1 	.word	0x3f947ae1
 8003800:	47ae147b 	.word	0x47ae147b
 8003804:	3f847ae1 	.word	0x3f847ae1
 8003808:	20000690 	.word	0x20000690
 800380c:	42480000 	.word	0x42480000
 8003810:	200006b0 	.word	0x200006b0
 8003814:	200006b4 	.word	0x200006b4
 8003818:	42700000 	.word	0x42700000
 800381c:	c2700000 	.word	0xc2700000
 8003820:	200006a0 	.word	0x200006a0
 8003824:	200006b8 	.word	0x200006b8
 8003828:	20000694 	.word	0x20000694
 800382c:	200006bc 	.word	0x200006bc
 8003830:	200006c0 	.word	0x200006c0
 8003834:	2000069c 	.word	0x2000069c
 8003838:	200006c4 	.word	0x200006c4
 800383c:	20000698 	.word	0x20000698
 8003840:	200006c8 	.word	0x200006c8
 8003844:	200006cc 	.word	0x200006cc
 8003848:	200006a4 	.word	0x200006a4
 800384c:	200006d0 	.word	0x200006d0
 8003850:	20000724 	.word	0x20000724
 8003854:	4408c000 	.word	0x4408c000
 8003858:	200006d4 	.word	0x200006d4
 800385c:	200006d8 	.word	0x200006d8
 8003860:	200006dc 	.word	0x200006dc
 8003864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800386c:	4b54      	ldr	r3, [pc, #336]	; (80039c0 <TIM3_IRQHandler+0xdc8>)
 800386e:	edd3 6a00 	vldr	s13, [r3]
 8003872:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <TIM3_IRQHandler+0xdcc>)
 8003874:	edd3 7a00 	vldr	s15, [r3]
 8003878:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800387c:	4b52      	ldr	r3, [pc, #328]	; (80039c8 <TIM3_IRQHandler+0xdd0>)
 800387e:	edd3 7a00 	vldr	s15, [r3]
 8003882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388a:	4b50      	ldr	r3, [pc, #320]	; (80039cc <TIM3_IRQHandler+0xdd4>)
 800388c:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 8003890:	4b4f      	ldr	r3, [pc, #316]	; (80039d0 <TIM3_IRQHandler+0xdd8>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 80039d4 <TIM3_IRQHandler+0xddc>
 800389a:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80039d8 <TIM3_IRQHandler+0xde0>
 800389e:	eeb0 0a67 	vmov.f32	s0, s15
 80038a2:	f7ff f931 	bl	8002b08 <limit>
 80038a6:	eef0 7a40 	vmov.f32	s15, s0
 80038aa:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <TIM3_IRQHandler+0xdd8>)
 80038ac:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 80038b0:	4b4a      	ldr	r3, [pc, #296]	; (80039dc <TIM3_IRQHandler+0xde4>)
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	ed9f 1a47 	vldr	s2, [pc, #284]	; 80039d4 <TIM3_IRQHandler+0xddc>
 80038ba:	eddf 0a47 	vldr	s1, [pc, #284]	; 80039d8 <TIM3_IRQHandler+0xde0>
 80038be:	eeb0 0a67 	vmov.f32	s0, s15
 80038c2:	f7ff f921 	bl	8002b08 <limit>
 80038c6:	eef0 7a40 	vmov.f32	s15, s0
 80038ca:	4b44      	ldr	r3, [pc, #272]	; (80039dc <TIM3_IRQHandler+0xde4>)
 80038cc:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 80038d0:	4b43      	ldr	r3, [pc, #268]	; (80039e0 <TIM3_IRQHandler+0xde8>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80039d4 <TIM3_IRQHandler+0xddc>
 80038da:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80039d8 <TIM3_IRQHandler+0xde0>
 80038de:	eeb0 0a67 	vmov.f32	s0, s15
 80038e2:	f7ff f911 	bl	8002b08 <limit>
 80038e6:	eef0 7a40 	vmov.f32	s15, s0
 80038ea:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <TIM3_IRQHandler+0xde8>)
 80038ec:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <TIM3_IRQHandler+0xdd4>)
 80038f2:	edd3 7a00 	vldr	s15, [r3]
 80038f6:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80039d4 <TIM3_IRQHandler+0xddc>
 80038fa:	eddf 0a37 	vldr	s1, [pc, #220]	; 80039d8 <TIM3_IRQHandler+0xde0>
 80038fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003902:	f7ff f901 	bl	8002b08 <limit>
 8003906:	eef0 7a40 	vmov.f32	s15, s0
 800390a:	4b30      	ldr	r3, [pc, #192]	; (80039cc <TIM3_IRQHandler+0xdd4>)
 800390c:	edc3 7a00 	vstr	s15, [r3]

      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003910:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <TIM3_IRQHandler+0xdd8>)
 8003912:	edd3 7a00 	vldr	s15, [r3]
 8003916:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <TIM3_IRQHandler+0xde4>)
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003924:	4b2e      	ldr	r3, [pc, #184]	; (80039e0 <TIM3_IRQHandler+0xde8>)
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800392e:	4b27      	ldr	r3, [pc, #156]	; (80039cc <TIM3_IRQHandler+0xdd4>)
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003938:	ee17 3a90 	vmov	r3, s15
 800393c:	ee16 2a10 	vmov	r2, s12
 8003940:	ee16 1a90 	vmov	r1, s13
 8003944:	ee17 0a10 	vmov	r0, s14
 8003948:	f7ff f908 	bl	8002b5c <ctl_motors_speed>

      if (g_thrust <= -99) {
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <TIM3_IRQHandler+0xdec>)
 800394e:	edd3 7a00 	vldr	s15, [r3]
 8003952:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80039e8 <TIM3_IRQHandler+0xdf0>
 8003956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395e:	d900      	bls.n	8003962 <TIM3_IRQHandler+0xd6a>
        fly_mode = init;
      }

      break;
 8003960:	e002      	b.n	8003968 <TIM3_IRQHandler+0xd70>
        fly_mode = init;
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <TIM3_IRQHandler+0xdf4>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
      break;
 8003968:	bf00      	nop
  monitor[4] = g_gy;
  monitor[5] = g_gz;
#endif

#if MONITOR == 2
  monitor[0] = g_P_pitch;
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <TIM3_IRQHandler+0xdf8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <TIM3_IRQHandler+0xdfc>)
 8003970:	6013      	str	r3, [r2, #0]
  monitor[1] = g_I_pitch;
 8003972:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <TIM3_IRQHandler+0xe00>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <TIM3_IRQHandler+0xdfc>)
 8003978:	6053      	str	r3, [r2, #4]
  monitor[2] = g_D_pitch;
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <TIM3_IRQHandler+0xe04>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <TIM3_IRQHandler+0xdfc>)
 8003980:	6093      	str	r3, [r2, #8]
  monitor[3] = g_P_roll;
 8003982:	4b1f      	ldr	r3, [pc, #124]	; (8003a00 <TIM3_IRQHandler+0xe08>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <TIM3_IRQHandler+0xdfc>)
 8003988:	60d3      	str	r3, [r2, #12]
  monitor[4] = g_I_roll;
 800398a:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <TIM3_IRQHandler+0xe0c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <TIM3_IRQHandler+0xdfc>)
 8003990:	6113      	str	r3, [r2, #16]
  monitor[5] = g_D_roll;
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <TIM3_IRQHandler+0xe10>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <TIM3_IRQHandler+0xdfc>)
 8003998:	6153      	str	r3, [r2, #20]
  monitor[6] = g_P_yaw;
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <TIM3_IRQHandler+0xdc8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <TIM3_IRQHandler+0xdfc>)
 80039a0:	6193      	str	r3, [r2, #24]
  monitor[7] = g_I_yaw;
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <TIM3_IRQHandler+0xdcc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <TIM3_IRQHandler+0xdfc>)
 80039a8:	61d3      	str	r3, [r2, #28]
  monitor[8] = g_D_yaw;
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <TIM3_IRQHandler+0xdd0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <TIM3_IRQHandler+0xdfc>)
 80039b0:	6213      	str	r3, [r2, #32]
  monitor[4] = g_sig4;
  monitor[5] = MIN_SPEED - 20;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039b2:	4816      	ldr	r0, [pc, #88]	; (8003a0c <TIM3_IRQHandler+0xe14>)
 80039b4:	f003 f80e 	bl	80069d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	3738      	adds	r7, #56	; 0x38
 80039bc:	46bd      	mov	sp, r7
 80039be:	bdb0      	pop	{r4, r5, r7, pc}
 80039c0:	200006c8 	.word	0x200006c8
 80039c4:	200006cc 	.word	0x200006cc
 80039c8:	200006d0 	.word	0x200006d0
 80039cc:	200006e0 	.word	0x200006e0
 80039d0:	200006d4 	.word	0x200006d4
 80039d4:	4453c000 	.word	0x4453c000
 80039d8:	4408c000 	.word	0x4408c000
 80039dc:	200006d8 	.word	0x200006d8
 80039e0:	200006dc 	.word	0x200006dc
 80039e4:	20000724 	.word	0x20000724
 80039e8:	c2c60000 	.word	0xc2c60000
 80039ec:	200006ae 	.word	0x200006ae
 80039f0:	200006b0 	.word	0x200006b0
 80039f4:	20000738 	.word	0x20000738
 80039f8:	200006b4 	.word	0x200006b4
 80039fc:	200006b8 	.word	0x200006b8
 8003a00:	200006bc 	.word	0x200006bc
 8003a04:	200006c0 	.word	0x200006c0
 8003a08:	200006c4 	.word	0x200006c4
 8003a0c:	2000026c 	.word	0x2000026c

08003a10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a14:	4802      	ldr	r0, [pc, #8]	; (8003a20 <TIM4_IRQHandler+0x10>)
 8003a16:	f002 ffdd 	bl	80069d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200002b4 	.word	0x200002b4

08003a24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <USART1_IRQHandler+0x10>)
 8003a2a:	f004 f94b 	bl	8007cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	200002fc 	.word	0x200002fc

08003a38 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	4803      	ldr	r0, [pc, #12]	; (8003a50 <HAL_UART_TxCpltCallback+0x18>)
 8003a44:	f000 fe5f 	bl	8004706 <HAL_GPIO_TogglePin>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40020000 	.word	0x40020000

08003a54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 8003a5c:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <HAL_UART_RxCpltCallback+0x130>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8003a62:	2140      	movs	r1, #64	; 0x40
 8003a64:	4848      	ldr	r0, [pc, #288]	; (8003b88 <HAL_UART_RxCpltCallback+0x134>)
 8003a66:	f000 fe4e 	bl	8004706 <HAL_GPIO_TogglePin>

  // Serialize control values
  uint8_t g_control_1st_idx = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  if (g_control[0] == 254) g_control_1st_idx = 1;
 8003a6e:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_UART_RxCpltCallback+0x138>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2bfe      	cmp	r3, #254	; 0xfe
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_RxCpltCallback+0x26>
 8003a76:	2301      	movs	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 8003a7a:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <HAL_UART_RxCpltCallback+0x138>)
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	2bfe      	cmp	r3, #254	; 0xfe
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_RxCpltCallback+0x32>
 8003a82:	2302      	movs	r3, #2
 8003a84:	73fb      	strb	r3, [r7, #15]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 8003a86:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_UART_RxCpltCallback+0x138>)
 8003a88:	789b      	ldrb	r3, [r3, #2]
 8003a8a:	2bfe      	cmp	r3, #254	; 0xfe
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_RxCpltCallback+0x3e>
 8003a8e:	2303      	movs	r3, #3
 8003a90:	73fb      	strb	r3, [r7, #15]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 8003a92:	4b3e      	ldr	r3, [pc, #248]	; (8003b8c <HAL_UART_RxCpltCallback+0x138>)
 8003a94:	78db      	ldrb	r3, [r3, #3]
 8003a96:	2bfe      	cmp	r3, #254	; 0xfe
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_RxCpltCallback+0x4a>
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	73fb      	strb	r3, [r7, #15]
  if (g_control[4] == 254) g_control_1st_idx = 0;
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <HAL_UART_RxCpltCallback+0x138>)
 8003aa0:	791b      	ldrb	r3, [r3, #4]
 8003aa2:	2bfe      	cmp	r3, #254	; 0xfe
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_RxCpltCallback+0x56>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  g_uart_thrust = g_control[g_control_1st_idx];
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	4a37      	ldr	r2, [pc, #220]	; (8003b8c <HAL_UART_RxCpltCallback+0x138>)
 8003aae:	5cd2      	ldrb	r2, [r2, r3]
 8003ab0:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <HAL_UART_RxCpltCallback+0x13c>)
 8003ab2:	701a      	strb	r2, [r3, #0]
  g_uart_pitch = g_control[(g_control_1st_idx+1)%5]-100;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	1c59      	adds	r1, r3, #1
 8003ab8:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <HAL_UART_RxCpltCallback+0x140>)
 8003aba:	fb83 2301 	smull	r2, r3, r3, r1
 8003abe:	105a      	asrs	r2, r3, #1
 8003ac0:	17cb      	asrs	r3, r1, #31
 8003ac2:	1ad2      	subs	r2, r2, r3
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	1aca      	subs	r2, r1, r3
 8003acc:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_UART_RxCpltCallback+0x138>)
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	3b64      	subs	r3, #100	; 0x64
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	b25a      	sxtb	r2, r3
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <HAL_UART_RxCpltCallback+0x144>)
 8003ad8:	701a      	strb	r2, [r3, #0]
  g_uart_roll = g_control[(g_control_1st_idx+2)%5]-100;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	1c99      	adds	r1, r3, #2
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_UART_RxCpltCallback+0x140>)
 8003ae0:	fb83 2301 	smull	r2, r3, r3, r1
 8003ae4:	105a      	asrs	r2, r3, #1
 8003ae6:	17cb      	asrs	r3, r1, #31
 8003ae8:	1ad2      	subs	r2, r2, r3
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	1aca      	subs	r2, r1, r3
 8003af2:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <HAL_UART_RxCpltCallback+0x138>)
 8003af4:	5c9b      	ldrb	r3, [r3, r2]
 8003af6:	3b64      	subs	r3, #100	; 0x64
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	b25a      	sxtb	r2, r3
 8003afc:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <HAL_UART_RxCpltCallback+0x148>)
 8003afe:	701a      	strb	r2, [r3, #0]
  g_uart_yaw = g_control[(g_control_1st_idx+3)%5]-100;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	1cd9      	adds	r1, r3, #3
 8003b04:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <HAL_UART_RxCpltCallback+0x140>)
 8003b06:	fb83 2301 	smull	r2, r3, r3, r1
 8003b0a:	105a      	asrs	r2, r3, #1
 8003b0c:	17cb      	asrs	r3, r1, #31
 8003b0e:	1ad2      	subs	r2, r2, r3
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	1aca      	subs	r2, r1, r3
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <HAL_UART_RxCpltCallback+0x138>)
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	3b64      	subs	r3, #100	; 0x64
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	b25a      	sxtb	r2, r3
 8003b22:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <HAL_UART_RxCpltCallback+0x14c>)
 8003b24:	701a      	strb	r2, [r3, #0]

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8003b26:	4b1f      	ldr	r3, [pc, #124]	; (8003ba4 <HAL_UART_RxCpltCallback+0x150>)
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <HAL_UART_RxCpltCallback+0x150>)
 8003b2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b32:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <HAL_UART_RxCpltCallback+0x150>)
 8003b34:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <HAL_UART_RxCpltCallback+0x150>)
 8003b3a:	ed93 6a03 	vldr	s12, [r3, #12]
 8003b3e:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_UART_RxCpltCallback+0x150>)
 8003b40:	edd3 5a04 	vldr	s11, [r3, #16]
 8003b44:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <HAL_UART_RxCpltCallback+0x150>)
 8003b46:	ed93 5a05 	vldr	s10, [r3, #20]
 8003b4a:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <HAL_UART_RxCpltCallback+0x150>)
 8003b4c:	edd3 4a06 	vldr	s9, [r3, #24]
 8003b50:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <HAL_UART_RxCpltCallback+0x150>)
 8003b52:	edd3 3a07 	vldr	s7, [r3, #28]
 8003b56:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <HAL_UART_RxCpltCallback+0x150>)
 8003b58:	ed93 4a08 	vldr	s8, [r3, #32]
 8003b5c:	eeb0 3a64 	vmov.f32	s6, s9
 8003b60:	eef0 2a45 	vmov.f32	s5, s10
 8003b64:	eeb0 2a65 	vmov.f32	s4, s11
 8003b68:	eef0 1a46 	vmov.f32	s3, s12
 8003b6c:	eeb0 1a66 	vmov.f32	s2, s13
 8003b70:	eef0 0a47 	vmov.f32	s1, s14
 8003b74:	eeb0 0a67 	vmov.f32	s0, s15
 8003b78:	f7fd fb62 	bl	8001240 <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000004 	.word	0x20000004
 8003b88:	40020000 	.word	0x40020000
 8003b8c:	20000588 	.word	0x20000588
 8003b90:	20000734 	.word	0x20000734
 8003b94:	66666667 	.word	0x66666667
 8003b98:	20000735 	.word	0x20000735
 8003b9c:	20000736 	.word	0x20000736
 8003ba0:	20000737 	.word	0x20000737
 8003ba4:	20000738 	.word	0x20000738

08003ba8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	7f1b      	ldrb	r3, [r3, #28]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d12f      	bne.n	8003c18 <HAL_TIM_IC_CaptureCallback+0x70>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8003bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bbc:	488a      	ldr	r0, [pc, #552]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003bbe:	f000 fd71 	bl	80046a4 <HAL_GPIO_ReadPin>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IC_CaptureCallback+0x30>
      pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4888      	ldr	r0, [pc, #544]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x244>)
 8003bcc:	f003 fa30 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b86      	ldr	r3, [pc, #536]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003bd6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8003bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bdc:	4882      	ldr	r0, [pc, #520]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003bde:	f000 fd61 	bl	80046a4 <HAL_GPIO_ReadPin>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d117      	bne.n	8003c18 <HAL_TIM_IC_CaptureCallback+0x70>
      pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003be8:	2100      	movs	r1, #0
 8003bea:	4880      	ldr	r0, [pc, #512]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x244>)
 8003bec:	f003 fa20 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b7e      	ldr	r3, [pc, #504]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003bf6:	605a      	str	r2, [r3, #4]
      int value = pwm_in[1] - pwm_in[0];
 8003bf8:	4b7d      	ldr	r3, [pc, #500]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	4b7c      	ldr	r3, [pc, #496]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	617b      	str	r3, [r7, #20]
      if (value >= 200 && value < 400) {
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2bc7      	cmp	r3, #199	; 0xc7
 8003c08:	dd06      	ble.n	8003c18 <HAL_TIM_IC_CaptureCallback+0x70>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003c10:	da02      	bge.n	8003c18 <HAL_TIM_IC_CaptureCallback+0x70>
        pwm_in[2] = value;
 8003c12:	4a77      	ldr	r2, [pc, #476]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	6093      	str	r3, [r2, #8]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	7f1b      	ldrb	r3, [r3, #28]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d12f      	bne.n	8003c80 <HAL_TIM_IC_CaptureCallback+0xd8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8003c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c24:	4870      	ldr	r0, [pc, #448]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003c26:	f000 fd3d 	bl	80046a4 <HAL_GPIO_ReadPin>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <HAL_TIM_IC_CaptureCallback+0x98>
      pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003c30:	2104      	movs	r1, #4
 8003c32:	486e      	ldr	r0, [pc, #440]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x244>)
 8003c34:	f003 f9fc 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b6c      	ldr	r3, [pc, #432]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003c3e:	60da      	str	r2, [r3, #12]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8003c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c44:	4868      	ldr	r0, [pc, #416]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003c46:	f000 fd2d 	bl	80046a4 <HAL_GPIO_ReadPin>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d117      	bne.n	8003c80 <HAL_TIM_IC_CaptureCallback+0xd8>
      pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003c50:	2104      	movs	r1, #4
 8003c52:	4866      	ldr	r0, [pc, #408]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x244>)
 8003c54:	f003 f9ec 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b64      	ldr	r3, [pc, #400]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003c5e:	611a      	str	r2, [r3, #16]
      int value = pwm_in[4] - pwm_in[3];
 8003c60:	4b63      	ldr	r3, [pc, #396]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	4b62      	ldr	r3, [pc, #392]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	613b      	str	r3, [r7, #16]
      if (value >= 200 && value < 400) {
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2bc7      	cmp	r3, #199	; 0xc7
 8003c70:	dd06      	ble.n	8003c80 <HAL_TIM_IC_CaptureCallback+0xd8>
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003c78:	da02      	bge.n	8003c80 <HAL_TIM_IC_CaptureCallback+0xd8>
        pwm_in[5] = value;
 8003c7a:	4a5d      	ldr	r2, [pc, #372]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	6153      	str	r3, [r2, #20]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7f1b      	ldrb	r3, [r3, #28]
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d12f      	bne.n	8003ce8 <HAL_TIM_IC_CaptureCallback+0x140>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8003c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c8c:	4856      	ldr	r0, [pc, #344]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003c8e:	f000 fd09 	bl	80046a4 <HAL_GPIO_ReadPin>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_IC_CaptureCallback+0x100>
      pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003c98:	2108      	movs	r1, #8
 8003c9a:	4854      	ldr	r0, [pc, #336]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x244>)
 8003c9c:	f003 f9c8 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b52      	ldr	r3, [pc, #328]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003ca6:	619a      	str	r2, [r3, #24]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8003ca8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cac:	484e      	ldr	r0, [pc, #312]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003cae:	f000 fcf9 	bl	80046a4 <HAL_GPIO_ReadPin>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d117      	bne.n	8003ce8 <HAL_TIM_IC_CaptureCallback+0x140>
      pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003cb8:	2108      	movs	r1, #8
 8003cba:	484c      	ldr	r0, [pc, #304]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x244>)
 8003cbc:	f003 f9b8 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b4a      	ldr	r3, [pc, #296]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003cc6:	61da      	str	r2, [r3, #28]
      int value = pwm_in[7] - pwm_in[6];
 8003cc8:	4b49      	ldr	r3, [pc, #292]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	4b48      	ldr	r3, [pc, #288]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	60fb      	str	r3, [r7, #12]
      if (value >= 200 && value < 400) {
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2bc7      	cmp	r3, #199	; 0xc7
 8003cd8:	dd06      	ble.n	8003ce8 <HAL_TIM_IC_CaptureCallback+0x140>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003ce0:	da02      	bge.n	8003ce8 <HAL_TIM_IC_CaptureCallback+0x140>
        pwm_in[8] = value;
 8003ce2:	4a43      	ldr	r2, [pc, #268]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6213      	str	r3, [r2, #32]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	7f1b      	ldrb	r3, [r3, #28]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d12f      	bne.n	8003d50 <HAL_TIM_IC_CaptureCallback+0x1a8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8003cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cf4:	483c      	ldr	r0, [pc, #240]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003cf6:	f000 fcd5 	bl	80046a4 <HAL_GPIO_ReadPin>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_TIM_IC_CaptureCallback+0x168>
      pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8003d00:	210c      	movs	r1, #12
 8003d02:	483a      	ldr	r0, [pc, #232]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x244>)
 8003d04:	f003 f994 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8003d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d14:	4834      	ldr	r0, [pc, #208]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003d16:	f000 fcc5 	bl	80046a4 <HAL_GPIO_ReadPin>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d117      	bne.n	8003d50 <HAL_TIM_IC_CaptureCallback+0x1a8>
      pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8003d20:	210c      	movs	r1, #12
 8003d22:	4832      	ldr	r0, [pc, #200]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x244>)
 8003d24:	f003 f984 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
      int value = pwm_in[10] - pwm_in[9];
 8003d30:	4b2f      	ldr	r3, [pc, #188]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d34:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	60bb      	str	r3, [r7, #8]
      if (value >= 200 && value < 400) {
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2bc7      	cmp	r3, #199	; 0xc7
 8003d40:	dd06      	ble.n	8003d50 <HAL_TIM_IC_CaptureCallback+0x1a8>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003d48:	da02      	bge.n	8003d50 <HAL_TIM_IC_CaptureCallback+0x1a8>
        pwm_in[11] = value;
 8003d4a:	4a29      	ldr	r2, [pc, #164]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
    }
  }

  g_thrust = SimpleKalmanFilter_updateEstimate(&g_filters[6], pwm_in[5] - 300);
 8003d50:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d58:	ee07 3a90 	vmov	s15, r3
 8003d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d60:	eeb0 0a67 	vmov.f32	s0, s15
 8003d64:	4823      	ldr	r0, [pc, #140]	; (8003df4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8003d66:	f7fd f9a4 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8003d6a:	eef0 7a40 	vmov.f32	s15, s0
 8003d6e:	4b22      	ldr	r3, [pc, #136]	; (8003df8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8003d70:	edc3 7a00 	vstr	s15, [r3]
  g_yaw = SimpleKalmanFilter_updateEstimate(&g_filters[7], pwm_in[2] - 300);
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d7c:	ee07 3a90 	vmov	s15, r3
 8003d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d84:	eeb0 0a67 	vmov.f32	s0, s15
 8003d88:	481c      	ldr	r0, [pc, #112]	; (8003dfc <HAL_TIM_IC_CaptureCallback+0x254>)
 8003d8a:	f7fd f992 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8003d8e:	eef0 7a40 	vmov.f32	s15, s0
 8003d92:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_TIM_IC_CaptureCallback+0x258>)
 8003d94:	edc3 7a00 	vstr	s15, [r3]
  g_pitch = SimpleKalmanFilter_updateEstimate(&g_filters[8], pwm_in[8] - 300);
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003da8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dac:	4815      	ldr	r0, [pc, #84]	; (8003e04 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8003dae:	f7fd f980 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8003db2:	eef0 7a40 	vmov.f32	s15, s0
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <HAL_TIM_IC_CaptureCallback+0x260>)
 8003db8:	edc3 7a00 	vstr	s15, [r3]
  g_roll = SimpleKalmanFilter_updateEstimate(&g_filters[9], pwm_in[11] - 300);
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd0:	480e      	ldr	r0, [pc, #56]	; (8003e0c <HAL_TIM_IC_CaptureCallback+0x264>)
 8003dd2:	f7fd f96e 	bl	80010b2 <SimpleKalmanFilter_updateEstimate>
 8003dd6:	eef0 7a40 	vmov.f32	s15, s0
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_TIM_IC_CaptureCallback+0x268>)
 8003ddc:	edc3 7a00 	vstr	s15, [r3]
  monitor[2] = 0;
  monitor[3] = g_pitch;
  monitor[4] = g_roll;
  monitor[5] = 0;
#endif
}
 8003de0:	bf00      	nop
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40020c00 	.word	0x40020c00
 8003dec:	200002b4 	.word	0x200002b4
 8003df0:	200006e4 	.word	0x200006e4
 8003df4:	20000414 	.word	0x20000414
 8003df8:	20000724 	.word	0x20000724
 8003dfc:	2000042c 	.word	0x2000042c
 8003e00:	20000730 	.word	0x20000730
 8003e04:	20000444 	.word	0x20000444
 8003e08:	20000728 	.word	0x20000728
 8003e0c:	2000045c 	.word	0x2000045c
 8003e10:	2000072c 	.word	0x2000072c

08003e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <_sbrk+0x5c>)
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <_sbrk+0x60>)
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e28:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <_sbrk+0x64>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <_sbrk+0x64>)
 8003e32:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <_sbrk+0x68>)
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <_sbrk+0x64>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d207      	bcs.n	8003e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e44:	f004 fe2e 	bl	8008aa4 <__errno>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	220c      	movs	r2, #12
 8003e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e52:	e009      	b.n	8003e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <_sbrk+0x64>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <_sbrk+0x64>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <_sbrk+0x64>)
 8003e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e66:	68fb      	ldr	r3, [r7, #12]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20020000 	.word	0x20020000
 8003e74:	00000400 	.word	0x00000400
 8003e78:	2000075c 	.word	0x2000075c
 8003e7c:	20000778 	.word	0x20000778

08003e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <SystemInit+0x20>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	4a05      	ldr	r2, [pc, #20]	; (8003ea0 <SystemInit+0x20>)
 8003e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ea8:	480d      	ldr	r0, [pc, #52]	; (8003ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003eaa:	490e      	ldr	r1, [pc, #56]	; (8003ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003eac:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eb0:	e002      	b.n	8003eb8 <LoopCopyDataInit>

08003eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eb6:	3304      	adds	r3, #4

08003eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ebc:	d3f9      	bcc.n	8003eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ebe:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ec0:	4c0b      	ldr	r4, [pc, #44]	; (8003ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ec4:	e001      	b.n	8003eca <LoopFillZerobss>

08003ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec8:	3204      	adds	r2, #4

08003eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ecc:	d3fb      	bcc.n	8003ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ece:	f7ff ffd7 	bl	8003e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ed2:	f004 fded 	bl	8008ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ed6:	f7fd fa41 	bl	800135c <main>
  bx  lr    
 8003eda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ee4:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8003ee8:	080099e0 	.word	0x080099e0
  ldr r2, =_sbss
 8003eec:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8003ef0:	20000774 	.word	0x20000774

08003ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ef4:	e7fe      	b.n	8003ef4 <ADC_IRQHandler>
	...

08003ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003efc:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <HAL_Init+0x40>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0d      	ldr	r2, [pc, #52]	; (8003f38 <HAL_Init+0x40>)
 8003f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_Init+0x40>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <HAL_Init+0x40>)
 8003f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f14:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <HAL_Init+0x40>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a07      	ldr	r2, [pc, #28]	; (8003f38 <HAL_Init+0x40>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f20:	2003      	movs	r0, #3
 8003f22:	f000 f94f 	bl	80041c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f26:	200f      	movs	r0, #15
 8003f28:	f000 f808 	bl	8003f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f2c:	f7fe fad6 	bl	80024dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023c00 	.word	0x40023c00

08003f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_InitTick+0x54>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_InitTick+0x58>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f967 	bl	800422e <HAL_SYSTICK_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e00e      	b.n	8003f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b0f      	cmp	r3, #15
 8003f6e:	d80a      	bhi.n	8003f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f70:	2200      	movs	r2, #0
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f78:	f000 f92f 	bl	80041da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f7c:	4a06      	ldr	r2, [pc, #24]	; (8003f98 <HAL_InitTick+0x5c>)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000044 	.word	0x20000044
 8003f94:	2000004c 	.word	0x2000004c
 8003f98:	20000048 	.word	0x20000048

08003f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HAL_IncTick+0x20>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_IncTick+0x24>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4413      	add	r3, r2
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <HAL_IncTick+0x24>)
 8003fae:	6013      	str	r3, [r2, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	2000004c 	.word	0x2000004c
 8003fc0:	20000760 	.word	0x20000760

08003fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <HAL_GetTick+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000760 	.word	0x20000760

08003fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7ff ffee 	bl	8003fc4 <HAL_GetTick>
 8003fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff4:	d005      	beq.n	8004002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_Delay+0x44>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004002:	bf00      	nop
 8004004:	f7ff ffde 	bl	8003fc4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	d8f7      	bhi.n	8004004 <HAL_Delay+0x28>
  {
  }
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	2000004c 	.word	0x2000004c

08004024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <__NVIC_SetPriorityGrouping+0x44>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004040:	4013      	ands	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800404c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004056:	4a04      	ldr	r2, [pc, #16]	; (8004068 <__NVIC_SetPriorityGrouping+0x44>)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	60d3      	str	r3, [r2, #12]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <__NVIC_GetPriorityGrouping+0x18>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	f003 0307 	and.w	r3, r3, #7
}
 800407a:	4618      	mov	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000ed00 	.word	0xe000ed00

08004088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	2b00      	cmp	r3, #0
 8004098:	db0b      	blt.n	80040b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	f003 021f 	and.w	r2, r3, #31
 80040a0:	4907      	ldr	r1, [pc, #28]	; (80040c0 <__NVIC_EnableIRQ+0x38>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2001      	movs	r0, #1
 80040aa:	fa00 f202 	lsl.w	r2, r0, r2
 80040ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	e000e100 	.word	0xe000e100

080040c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	6039      	str	r1, [r7, #0]
 80040ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	db0a      	blt.n	80040ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	490c      	ldr	r1, [pc, #48]	; (8004110 <__NVIC_SetPriority+0x4c>)
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	0112      	lsls	r2, r2, #4
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	440b      	add	r3, r1
 80040e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040ec:	e00a      	b.n	8004104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4908      	ldr	r1, [pc, #32]	; (8004114 <__NVIC_SetPriority+0x50>)
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	3b04      	subs	r3, #4
 80040fc:	0112      	lsls	r2, r2, #4
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	440b      	add	r3, r1
 8004102:	761a      	strb	r2, [r3, #24]
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	e000e100 	.word	0xe000e100
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004118:	b480      	push	{r7}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f1c3 0307 	rsb	r3, r3, #7
 8004132:	2b04      	cmp	r3, #4
 8004134:	bf28      	it	cs
 8004136:	2304      	movcs	r3, #4
 8004138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3304      	adds	r3, #4
 800413e:	2b06      	cmp	r3, #6
 8004140:	d902      	bls.n	8004148 <NVIC_EncodePriority+0x30>
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3b03      	subs	r3, #3
 8004146:	e000      	b.n	800414a <NVIC_EncodePriority+0x32>
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800414c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43da      	mvns	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	401a      	ands	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	fa01 f303 	lsl.w	r3, r1, r3
 800416a:	43d9      	mvns	r1, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004170:	4313      	orrs	r3, r2
         );
}
 8004172:	4618      	mov	r0, r3
 8004174:	3724      	adds	r7, #36	; 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3b01      	subs	r3, #1
 800418c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004190:	d301      	bcc.n	8004196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004192:	2301      	movs	r3, #1
 8004194:	e00f      	b.n	80041b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004196:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <SysTick_Config+0x40>)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3b01      	subs	r3, #1
 800419c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800419e:	210f      	movs	r1, #15
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a4:	f7ff ff8e 	bl	80040c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <SysTick_Config+0x40>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <SysTick_Config+0x40>)
 80041b0:	2207      	movs	r2, #7
 80041b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	e000e010 	.word	0xe000e010

080041c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ff29 	bl	8004024 <__NVIC_SetPriorityGrouping>
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af00      	add	r7, sp, #0
 80041e0:	4603      	mov	r3, r0
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041ec:	f7ff ff3e 	bl	800406c <__NVIC_GetPriorityGrouping>
 80041f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	6978      	ldr	r0, [r7, #20]
 80041f8:	f7ff ff8e 	bl	8004118 <NVIC_EncodePriority>
 80041fc:	4602      	mov	r2, r0
 80041fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff ff5d 	bl	80040c4 <__NVIC_SetPriority>
}
 800420a:	bf00      	nop
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	4603      	mov	r3, r0
 800421a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800421c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff31 	bl	8004088 <__NVIC_EnableIRQ>
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ffa2 	bl	8004180 <SysTick_Config>
 800423c:	4603      	mov	r3, r0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004254:	f7ff feb6 	bl	8003fc4 <HAL_GetTick>
 8004258:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d008      	beq.n	8004278 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2280      	movs	r2, #128	; 0x80
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e052      	b.n	800431e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0216 	bic.w	r2, r2, #22
 8004286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004296:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d103      	bne.n	80042a8 <HAL_DMA_Abort+0x62>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0208 	bic.w	r2, r2, #8
 80042b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042c8:	e013      	b.n	80042f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042ca:	f7ff fe7b 	bl	8003fc4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	d90c      	bls.n	80042f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2203      	movs	r2, #3
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e015      	b.n	800431e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e4      	bne.n	80042ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	223f      	movs	r2, #63	; 0x3f
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d004      	beq.n	8004344 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2280      	movs	r2, #128	; 0x80
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e00c      	b.n	800435e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2205      	movs	r2, #5
 8004348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	e16b      	b.n	8004660 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004388:	2201      	movs	r2, #1
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	f040 815a 	bne.w	800465a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d005      	beq.n	80043be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d130      	bne.n	8004420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2203      	movs	r2, #3
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f4:	2201      	movs	r2, #1
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 0201 	and.w	r2, r3, #1
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b03      	cmp	r3, #3
 800442a:	d017      	beq.n	800445c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	2203      	movs	r2, #3
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d123      	bne.n	80044b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	08da      	lsrs	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3208      	adds	r2, #8
 8004470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	220f      	movs	r2, #15
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	08da      	lsrs	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3208      	adds	r2, #8
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 0203 	and.w	r2, r3, #3
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80b4 	beq.w	800465a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	4b60      	ldr	r3, [pc, #384]	; (8004678 <HAL_GPIO_Init+0x30c>)
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	4a5f      	ldr	r2, [pc, #380]	; (8004678 <HAL_GPIO_Init+0x30c>)
 80044fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004500:	6453      	str	r3, [r2, #68]	; 0x44
 8004502:	4b5d      	ldr	r3, [pc, #372]	; (8004678 <HAL_GPIO_Init+0x30c>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800450e:	4a5b      	ldr	r2, [pc, #364]	; (800467c <HAL_GPIO_Init+0x310>)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	3302      	adds	r3, #2
 8004516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	220f      	movs	r2, #15
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a52      	ldr	r2, [pc, #328]	; (8004680 <HAL_GPIO_Init+0x314>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02b      	beq.n	8004592 <HAL_GPIO_Init+0x226>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a51      	ldr	r2, [pc, #324]	; (8004684 <HAL_GPIO_Init+0x318>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d025      	beq.n	800458e <HAL_GPIO_Init+0x222>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a50      	ldr	r2, [pc, #320]	; (8004688 <HAL_GPIO_Init+0x31c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01f      	beq.n	800458a <HAL_GPIO_Init+0x21e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4f      	ldr	r2, [pc, #316]	; (800468c <HAL_GPIO_Init+0x320>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d019      	beq.n	8004586 <HAL_GPIO_Init+0x21a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a4e      	ldr	r2, [pc, #312]	; (8004690 <HAL_GPIO_Init+0x324>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_GPIO_Init+0x216>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4d      	ldr	r2, [pc, #308]	; (8004694 <HAL_GPIO_Init+0x328>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00d      	beq.n	800457e <HAL_GPIO_Init+0x212>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4c      	ldr	r2, [pc, #304]	; (8004698 <HAL_GPIO_Init+0x32c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <HAL_GPIO_Init+0x20e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a4b      	ldr	r2, [pc, #300]	; (800469c <HAL_GPIO_Init+0x330>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <HAL_GPIO_Init+0x20a>
 8004572:	2307      	movs	r3, #7
 8004574:	e00e      	b.n	8004594 <HAL_GPIO_Init+0x228>
 8004576:	2308      	movs	r3, #8
 8004578:	e00c      	b.n	8004594 <HAL_GPIO_Init+0x228>
 800457a:	2306      	movs	r3, #6
 800457c:	e00a      	b.n	8004594 <HAL_GPIO_Init+0x228>
 800457e:	2305      	movs	r3, #5
 8004580:	e008      	b.n	8004594 <HAL_GPIO_Init+0x228>
 8004582:	2304      	movs	r3, #4
 8004584:	e006      	b.n	8004594 <HAL_GPIO_Init+0x228>
 8004586:	2303      	movs	r3, #3
 8004588:	e004      	b.n	8004594 <HAL_GPIO_Init+0x228>
 800458a:	2302      	movs	r3, #2
 800458c:	e002      	b.n	8004594 <HAL_GPIO_Init+0x228>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_GPIO_Init+0x228>
 8004592:	2300      	movs	r3, #0
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	f002 0203 	and.w	r2, r2, #3
 800459a:	0092      	lsls	r2, r2, #2
 800459c:	4093      	lsls	r3, r2
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045a4:	4935      	ldr	r1, [pc, #212]	; (800467c <HAL_GPIO_Init+0x310>)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	089b      	lsrs	r3, r3, #2
 80045aa:	3302      	adds	r3, #2
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045b2:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <HAL_GPIO_Init+0x334>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045d6:	4a32      	ldr	r2, [pc, #200]	; (80046a0 <HAL_GPIO_Init+0x334>)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045dc:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <HAL_GPIO_Init+0x334>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <HAL_GPIO_Init+0x334>)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <HAL_GPIO_Init+0x334>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800462a:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_GPIO_Init+0x334>)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <HAL_GPIO_Init+0x334>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004654:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <HAL_GPIO_Init+0x334>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3301      	adds	r3, #1
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b0f      	cmp	r3, #15
 8004664:	f67f ae90 	bls.w	8004388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	3724      	adds	r7, #36	; 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	40013800 	.word	0x40013800
 8004680:	40020000 	.word	0x40020000
 8004684:	40020400 	.word	0x40020400
 8004688:	40020800 	.word	0x40020800
 800468c:	40020c00 	.word	0x40020c00
 8004690:	40021000 	.word	0x40021000
 8004694:	40021400 	.word	0x40021400
 8004698:	40021800 	.word	0x40021800
 800469c:	40021c00 	.word	0x40021c00
 80046a0:	40013c00 	.word	0x40013c00

080046a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	e001      	b.n	80046c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
 80046e0:	4613      	mov	r3, r2
 80046e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e4:	787b      	ldrb	r3, [r7, #1]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046f0:	e003      	b.n	80046fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	041a      	lsls	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	619a      	str	r2, [r3, #24]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004718:	887a      	ldrh	r2, [r7, #2]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4013      	ands	r3, r2
 800471e:	041a      	lsls	r2, r3, #16
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	43d9      	mvns	r1, r3
 8004724:	887b      	ldrh	r3, [r7, #2]
 8004726:	400b      	ands	r3, r1
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	619a      	str	r2, [r3, #24]
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e12b      	b.n	80049a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd fee2 	bl	800252c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	; 0x24
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800478e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800479e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047a0:	f001 fd0e 	bl	80061c0 <HAL_RCC_GetPCLK1Freq>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a81      	ldr	r2, [pc, #516]	; (80049b0 <HAL_I2C_Init+0x274>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d807      	bhi.n	80047c0 <HAL_I2C_Init+0x84>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a80      	ldr	r2, [pc, #512]	; (80049b4 <HAL_I2C_Init+0x278>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bf94      	ite	ls
 80047b8:	2301      	movls	r3, #1
 80047ba:	2300      	movhi	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e006      	b.n	80047ce <HAL_I2C_Init+0x92>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a7d      	ldr	r2, [pc, #500]	; (80049b8 <HAL_I2C_Init+0x27c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bf94      	ite	ls
 80047c8:	2301      	movls	r3, #1
 80047ca:	2300      	movhi	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0e7      	b.n	80049a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a78      	ldr	r2, [pc, #480]	; (80049bc <HAL_I2C_Init+0x280>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	0c9b      	lsrs	r3, r3, #18
 80047e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a6a      	ldr	r2, [pc, #424]	; (80049b0 <HAL_I2C_Init+0x274>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d802      	bhi.n	8004810 <HAL_I2C_Init+0xd4>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3301      	adds	r3, #1
 800480e:	e009      	b.n	8004824 <HAL_I2C_Init+0xe8>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	4a69      	ldr	r2, [pc, #420]	; (80049c0 <HAL_I2C_Init+0x284>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	3301      	adds	r3, #1
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	430b      	orrs	r3, r1
 800482a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	495c      	ldr	r1, [pc, #368]	; (80049b0 <HAL_I2C_Init+0x274>)
 8004840:	428b      	cmp	r3, r1
 8004842:	d819      	bhi.n	8004878 <HAL_I2C_Init+0x13c>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e59      	subs	r1, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004852:	1c59      	adds	r1, r3, #1
 8004854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004858:	400b      	ands	r3, r1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_I2C_Init+0x138>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1e59      	subs	r1, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fbb1 f3f3 	udiv	r3, r1, r3
 800486c:	3301      	adds	r3, #1
 800486e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004872:	e051      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 8004874:	2304      	movs	r3, #4
 8004876:	e04f      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d111      	bne.n	80048a4 <HAL_I2C_Init+0x168>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1e58      	subs	r0, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	440b      	add	r3, r1
 800488e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004892:	3301      	adds	r3, #1
 8004894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e012      	b.n	80048ca <HAL_I2C_Init+0x18e>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1e58      	subs	r0, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	0099      	lsls	r1, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ba:	3301      	adds	r3, #1
 80048bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Init+0x196>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e022      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <HAL_I2C_Init+0x1bc>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1e58      	subs	r0, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	440b      	add	r3, r1
 80048e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f6:	e00f      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1e58      	subs	r0, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	0099      	lsls	r1, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	fbb0 f3f3 	udiv	r3, r0, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	6809      	ldr	r1, [r1, #0]
 800491c:	4313      	orrs	r3, r2
 800491e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6911      	ldr	r1, [r2, #16]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	430b      	orrs	r3, r1
 800495a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	000186a0 	.word	0x000186a0
 80049b4:	001e847f 	.word	0x001e847f
 80049b8:	003d08ff 	.word	0x003d08ff
 80049bc:	431bde83 	.word	0x431bde83
 80049c0:	10624dd3 	.word	0x10624dd3

080049c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	461a      	mov	r2, r3
 80049d0:	460b      	mov	r3, r1
 80049d2:	817b      	strh	r3, [r7, #10]
 80049d4:	4613      	mov	r3, r2
 80049d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d8:	f7ff faf4 	bl	8003fc4 <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	f040 80e0 	bne.w	8004bac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2319      	movs	r3, #25
 80049f2:	2201      	movs	r2, #1
 80049f4:	4970      	ldr	r1, [pc, #448]	; (8004bb8 <HAL_I2C_Master_Transmit+0x1f4>)
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fd94 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
 8004a04:	e0d3      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_I2C_Master_Transmit+0x50>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e0cc      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d007      	beq.n	8004a3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2221      	movs	r2, #33	; 0x21
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2210      	movs	r2, #16
 8004a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	893a      	ldrh	r2, [r7, #8]
 8004a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a50      	ldr	r2, [pc, #320]	; (8004bbc <HAL_I2C_Master_Transmit+0x1f8>)
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a7c:	8979      	ldrh	r1, [r7, #10]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fbfe 	bl	8005284 <I2C_MasterRequestWrite>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e08d      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004aa8:	e066      	b.n	8004b78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	6a39      	ldr	r1, [r7, #32]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fe0e 	bl	80056d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00d      	beq.n	8004ad6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d107      	bne.n	8004ad2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e06b      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	781a      	ldrb	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d11b      	bne.n	8004b4c <HAL_I2C_Master_Transmit+0x188>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d017      	beq.n	8004b4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	781a      	ldrb	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	6a39      	ldr	r1, [r7, #32]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fdfe 	bl	8005752 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d107      	bne.n	8004b74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e01a      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d194      	bne.n	8004aaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	00100002 	.word	0x00100002
 8004bbc:	ffff0000 	.word	0xffff0000

08004bc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08c      	sub	sp, #48	; 0x30
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	460b      	mov	r3, r1
 8004bce:	817b      	strh	r3, [r7, #10]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bd4:	f7ff f9f6 	bl	8003fc4 <HAL_GetTick>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	f040 820b 	bne.w	8004ffe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	2319      	movs	r3, #25
 8004bee:	2201      	movs	r2, #1
 8004bf0:	497c      	ldr	r1, [pc, #496]	; (8004de4 <HAL_I2C_Master_Receive+0x224>)
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fc96 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e1fe      	b.n	8005000 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_I2C_Master_Receive+0x50>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e1f7      	b.n	8005000 <HAL_I2C_Master_Receive+0x440>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d007      	beq.n	8004c36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2222      	movs	r2, #34	; 0x22
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2210      	movs	r2, #16
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	893a      	ldrh	r2, [r7, #8]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a5c      	ldr	r2, [pc, #368]	; (8004de8 <HAL_I2C_Master_Receive+0x228>)
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c78:	8979      	ldrh	r1, [r7, #10]
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fb82 	bl	8005388 <I2C_MasterRequestRead>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e1b8      	b.n	8005000 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d113      	bne.n	8004cbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c96:	2300      	movs	r3, #0
 8004c98:	623b      	str	r3, [r7, #32]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e18c      	b.n	8004fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d11b      	bne.n	8004cfe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e16c      	b.n	8004fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d11b      	bne.n	8004d3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	e14c      	b.n	8004fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d64:	e138      	b.n	8004fd8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	f200 80f1 	bhi.w	8004f52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d123      	bne.n	8004dc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fd29 	bl	80057d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e139      	b.n	8005000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dbe:	e10b      	b.n	8004fd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d14e      	bne.n	8004e66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	2200      	movs	r2, #0
 8004dd0:	4906      	ldr	r1, [pc, #24]	; (8004dec <HAL_I2C_Master_Receive+0x22c>)
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fba6 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e10e      	b.n	8005000 <HAL_I2C_Master_Receive+0x440>
 8004de2:	bf00      	nop
 8004de4:	00100002 	.word	0x00100002
 8004de8:	ffff0000 	.word	0xffff0000
 8004dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e64:	e0b8      	b.n	8004fd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4966      	ldr	r1, [pc, #408]	; (8005008 <HAL_I2C_Master_Receive+0x448>)
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fb57 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0bf      	b.n	8005000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	2200      	movs	r2, #0
 8004eca:	494f      	ldr	r1, [pc, #316]	; (8005008 <HAL_I2C_Master_Receive+0x448>)
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fb29 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e091      	b.n	8005000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f50:	e042      	b.n	8004fd8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fc3c 	bl	80057d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e04c      	b.n	8005000 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d118      	bne.n	8004fd8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f47f aec2 	bne.w	8004d66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e000      	b.n	8005000 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
  }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3728      	adds	r7, #40	; 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	00010004 	.word	0x00010004

0800500c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	460b      	mov	r3, r1
 800501a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800501c:	f7fe ffd2 	bl	8003fc4 <HAL_GetTick>
 8005020:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b20      	cmp	r3, #32
 8005030:	f040 8111 	bne.w	8005256 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	2319      	movs	r3, #25
 800503a:	2201      	movs	r2, #1
 800503c:	4988      	ldr	r1, [pc, #544]	; (8005260 <HAL_I2C_IsDeviceReady+0x254>)
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fa70 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
 800504c:	e104      	b.n	8005258 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_I2C_IsDeviceReady+0x50>
 8005058:	2302      	movs	r3, #2
 800505a:	e0fd      	b.n	8005258 <HAL_I2C_IsDeviceReady+0x24c>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b01      	cmp	r3, #1
 8005070:	d007      	beq.n	8005082 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2224      	movs	r2, #36	; 0x24
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4a70      	ldr	r2, [pc, #448]	; (8005264 <HAL_I2C_IsDeviceReady+0x258>)
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2200      	movs	r2, #0
 80050be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fa2e 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00d      	beq.n	80050ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050dc:	d103      	bne.n	80050e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e0b6      	b.n	8005258 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050ea:	897b      	ldrh	r3, [r7, #10]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80050fa:	f7fe ff63 	bl	8003fc4 <HAL_GetTick>
 80050fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	bf0c      	ite	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	2300      	movne	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005124:	bf0c      	ite	eq
 8005126:	2301      	moveq	r3, #1
 8005128:	2300      	movne	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800512e:	e025      	b.n	800517c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005130:	f7fe ff48 	bl	8003fc4 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d302      	bcc.n	8005146 <HAL_I2C_IsDeviceReady+0x13a>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d103      	bne.n	800514e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	22a0      	movs	r2, #160	; 0xa0
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2ba0      	cmp	r3, #160	; 0xa0
 8005186:	d005      	beq.n	8005194 <HAL_I2C_IsDeviceReady+0x188>
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <HAL_I2C_IsDeviceReady+0x188>
 800518e:	7dbb      	ldrb	r3, [r7, #22]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0cd      	beq.n	8005130 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d129      	bne.n	80051fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2319      	movs	r3, #25
 80051d6:	2201      	movs	r2, #1
 80051d8:	4921      	ldr	r1, [pc, #132]	; (8005260 <HAL_I2C_IsDeviceReady+0x254>)
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f9a2 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e036      	b.n	8005258 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e02c      	b.n	8005258 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005216:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	2319      	movs	r3, #25
 800521e:	2201      	movs	r2, #1
 8005220:	490f      	ldr	r1, [pc, #60]	; (8005260 <HAL_I2C_IsDeviceReady+0x254>)
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f97e 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e012      	b.n	8005258 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	3301      	adds	r3, #1
 8005236:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	f4ff af32 	bcc.w	80050a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005256:	2302      	movs	r3, #2
  }
}
 8005258:	4618      	mov	r0, r3
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	00100002 	.word	0x00100002
 8005264:	ffff0000 	.word	0xffff0000

08005268 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005276:	b2db      	uxtb	r3, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	460b      	mov	r3, r1
 8005292:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d006      	beq.n	80052ae <I2C_MasterRequestWrite+0x2a>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d003      	beq.n	80052ae <I2C_MasterRequestWrite+0x2a>
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052ac:	d108      	bne.n	80052c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e00b      	b.n	80052d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	2b12      	cmp	r3, #18
 80052c6:	d107      	bne.n	80052d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f91d 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fe:	d103      	bne.n	8005308 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005306:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e035      	b.n	8005378 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005314:	d108      	bne.n	8005328 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005316:	897b      	ldrh	r3, [r7, #10]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005324:	611a      	str	r2, [r3, #16]
 8005326:	e01b      	b.n	8005360 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005328:	897b      	ldrh	r3, [r7, #10]
 800532a:	11db      	asrs	r3, r3, #7
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f003 0306 	and.w	r3, r3, #6
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f063 030f 	orn	r3, r3, #15
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	490e      	ldr	r1, [pc, #56]	; (8005380 <I2C_MasterRequestWrite+0xfc>)
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f943 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e010      	b.n	8005378 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005356:	897b      	ldrh	r3, [r7, #10]
 8005358:	b2da      	uxtb	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4907      	ldr	r1, [pc, #28]	; (8005384 <I2C_MasterRequestWrite+0x100>)
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f933 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	00010008 	.word	0x00010008
 8005384:	00010002 	.word	0x00010002

08005388 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	460b      	mov	r3, r1
 8005396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d006      	beq.n	80053c2 <I2C_MasterRequestRead+0x3a>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d003      	beq.n	80053c2 <I2C_MasterRequestRead+0x3a>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c0:	d108      	bne.n	80053d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e00b      	b.n	80053ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	2b11      	cmp	r3, #17
 80053da:	d107      	bne.n	80053ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f893 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005412:	d103      	bne.n	800541c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e079      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005428:	d108      	bne.n	800543c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800542a:	897b      	ldrh	r3, [r7, #10]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	611a      	str	r2, [r3, #16]
 800543a:	e05f      	b.n	80054fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800543c:	897b      	ldrh	r3, [r7, #10]
 800543e:	11db      	asrs	r3, r3, #7
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 0306 	and.w	r3, r3, #6
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f063 030f 	orn	r3, r3, #15
 800544c:	b2da      	uxtb	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4930      	ldr	r1, [pc, #192]	; (800551c <I2C_MasterRequestRead+0x194>)
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f8b9 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e054      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800546a:	897b      	ldrh	r3, [r7, #10]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4929      	ldr	r1, [pc, #164]	; (8005520 <I2C_MasterRequestRead+0x198>)
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f8a9 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e044      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f831 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d6:	d103      	bne.n	80054e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e017      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	11db      	asrs	r3, r3, #7
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f003 0306 	and.w	r3, r3, #6
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f063 030e 	orn	r3, r3, #14
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4907      	ldr	r1, [pc, #28]	; (8005520 <I2C_MasterRequestRead+0x198>)
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f865 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	00010008 	.word	0x00010008
 8005520:	00010002 	.word	0x00010002

08005524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005534:	e025      	b.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800553c:	d021      	beq.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fe fd41 	bl	8003fc4 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d116      	bne.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e023      	b.n	80055ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10d      	bne.n	80055a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	43da      	mvns	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	bf0c      	ite	eq
 800559e:	2301      	moveq	r3, #1
 80055a0:	2300      	movne	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	e00c      	b.n	80055c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	43da      	mvns	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4013      	ands	r3, r2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bf0c      	ite	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	2300      	movne	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d0b6      	beq.n	8005536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e0:	e051      	b.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f0:	d123      	bne.n	800563a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005600:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800560a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f043 0204 	orr.w	r2, r3, #4
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e046      	b.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005640:	d021      	beq.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fe fcbf 	bl	8003fc4 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d116      	bne.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e020      	b.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d10c      	bne.n	80056aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	43da      	mvns	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4013      	ands	r3, r2
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e00b      	b.n	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	43da      	mvns	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4013      	ands	r3, r2
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d18d      	bne.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056dc:	e02d      	b.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f8ce 	bl	8005880 <I2C_IsAcknowledgeFailed>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e02d      	b.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f4:	d021      	beq.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f6:	f7fe fc65 	bl	8003fc4 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	d302      	bcc.n	800570c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d116      	bne.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f043 0220 	orr.w	r2, r3, #32
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e007      	b.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d1ca      	bne.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800575e:	e02d      	b.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f88d 	bl	8005880 <I2C_IsAcknowledgeFailed>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e02d      	b.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005776:	d021      	beq.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005778:	f7fe fc24 	bl	8003fc4 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d302      	bcc.n	800578e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d116      	bne.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	f043 0220 	orr.w	r2, r3, #32
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e007      	b.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d1ca      	bne.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057e0:	e042      	b.n	8005868 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d119      	bne.n	8005824 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0210 	mvn.w	r2, #16
 80057f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e029      	b.n	8005878 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005824:	f7fe fbce 	bl	8003fc4 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	429a      	cmp	r2, r3
 8005832:	d302      	bcc.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d116      	bne.n	8005868 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e007      	b.n	8005878 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	d1b5      	bne.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005896:	d11b      	bne.n	80058d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	f043 0204 	orr.w	r2, r3, #4
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e267      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d075      	beq.n	80059ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058fe:	4b88      	ldr	r3, [pc, #544]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b04      	cmp	r3, #4
 8005908:	d00c      	beq.n	8005924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800590a:	4b85      	ldr	r3, [pc, #532]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005912:	2b08      	cmp	r3, #8
 8005914:	d112      	bne.n	800593c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005916:	4b82      	ldr	r3, [pc, #520]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005922:	d10b      	bne.n	800593c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005924:	4b7e      	ldr	r3, [pc, #504]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d05b      	beq.n	80059e8 <HAL_RCC_OscConfig+0x108>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d157      	bne.n	80059e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e242      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005944:	d106      	bne.n	8005954 <HAL_RCC_OscConfig+0x74>
 8005946:	4b76      	ldr	r3, [pc, #472]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a75      	ldr	r2, [pc, #468]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 800594c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e01d      	b.n	8005990 <HAL_RCC_OscConfig+0xb0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800595c:	d10c      	bne.n	8005978 <HAL_RCC_OscConfig+0x98>
 800595e:	4b70      	ldr	r3, [pc, #448]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a6f      	ldr	r2, [pc, #444]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	4b6d      	ldr	r3, [pc, #436]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a6c      	ldr	r2, [pc, #432]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	e00b      	b.n	8005990 <HAL_RCC_OscConfig+0xb0>
 8005978:	4b69      	ldr	r3, [pc, #420]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a68      	ldr	r2, [pc, #416]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 800597e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	4b66      	ldr	r3, [pc, #408]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a65      	ldr	r2, [pc, #404]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 800598a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800598e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005998:	f7fe fb14 	bl	8003fc4 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a0:	f7fe fb10 	bl	8003fc4 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	; 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e207      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b2:	4b5b      	ldr	r3, [pc, #364]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCC_OscConfig+0xc0>
 80059be:	e014      	b.n	80059ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fe fb00 	bl	8003fc4 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fe fafc 	bl	8003fc4 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	; 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e1f3      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059da:	4b51      	ldr	r3, [pc, #324]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0xe8>
 80059e6:	e000      	b.n	80059ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d063      	beq.n	8005abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059f6:	4b4a      	ldr	r3, [pc, #296]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a02:	4b47      	ldr	r3, [pc, #284]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d11c      	bne.n	8005a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a0e:	4b44      	ldr	r3, [pc, #272]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d116      	bne.n	8005a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1a:	4b41      	ldr	r3, [pc, #260]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_RCC_OscConfig+0x152>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d001      	beq.n	8005a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e1c7      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a32:	4b3b      	ldr	r3, [pc, #236]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4937      	ldr	r1, [pc, #220]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a46:	e03a      	b.n	8005abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d020      	beq.n	8005a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a50:	4b34      	ldr	r3, [pc, #208]	; (8005b24 <HAL_RCC_OscConfig+0x244>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a56:	f7fe fab5 	bl	8003fc4 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a5e:	f7fe fab1 	bl	8003fc4 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e1a8      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a70:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f0      	beq.n	8005a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7c:	4b28      	ldr	r3, [pc, #160]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4925      	ldr	r1, [pc, #148]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	600b      	str	r3, [r1, #0]
 8005a90:	e015      	b.n	8005abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <HAL_RCC_OscConfig+0x244>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fe fa94 	bl	8003fc4 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aa0:	f7fe fa90 	bl	8003fc4 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e187      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab2:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d036      	beq.n	8005b38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <HAL_RCC_OscConfig+0x248>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fe fa74 	bl	8003fc4 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ae0:	f7fe fa70 	bl	8003fc4 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e167      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_RCC_OscConfig+0x240>)
 8005af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x200>
 8005afe:	e01b      	b.n	8005b38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <HAL_RCC_OscConfig+0x248>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b06:	f7fe fa5d 	bl	8003fc4 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b0c:	e00e      	b.n	8005b2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b0e:	f7fe fa59 	bl	8003fc4 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d907      	bls.n	8005b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e150      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
 8005b20:	40023800 	.word	0x40023800
 8005b24:	42470000 	.word	0x42470000
 8005b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b2c:	4b88      	ldr	r3, [pc, #544]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ea      	bne.n	8005b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8097 	beq.w	8005c74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b4a:	4b81      	ldr	r3, [pc, #516]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	4b7d      	ldr	r3, [pc, #500]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	4a7c      	ldr	r2, [pc, #496]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b64:	6413      	str	r3, [r2, #64]	; 0x40
 8005b66:	4b7a      	ldr	r3, [pc, #488]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b76:	4b77      	ldr	r3, [pc, #476]	; (8005d54 <HAL_RCC_OscConfig+0x474>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d118      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b82:	4b74      	ldr	r3, [pc, #464]	; (8005d54 <HAL_RCC_OscConfig+0x474>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a73      	ldr	r2, [pc, #460]	; (8005d54 <HAL_RCC_OscConfig+0x474>)
 8005b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b8e:	f7fe fa19 	bl	8003fc4 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b96:	f7fe fa15 	bl	8003fc4 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e10c      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba8:	4b6a      	ldr	r3, [pc, #424]	; (8005d54 <HAL_RCC_OscConfig+0x474>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d106      	bne.n	8005bca <HAL_RCC_OscConfig+0x2ea>
 8005bbc:	4b64      	ldr	r3, [pc, #400]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	4a63      	ldr	r2, [pc, #396]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc8:	e01c      	b.n	8005c04 <HAL_RCC_OscConfig+0x324>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCC_OscConfig+0x30c>
 8005bd2:	4b5f      	ldr	r3, [pc, #380]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	4a5e      	ldr	r2, [pc, #376]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	f043 0304 	orr.w	r3, r3, #4
 8005bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bde:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	4a5b      	ldr	r2, [pc, #364]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bea:	e00b      	b.n	8005c04 <HAL_RCC_OscConfig+0x324>
 8005bec:	4b58      	ldr	r3, [pc, #352]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	4a57      	ldr	r2, [pc, #348]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf8:	4b55      	ldr	r3, [pc, #340]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	4a54      	ldr	r2, [pc, #336]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005bfe:	f023 0304 	bic.w	r3, r3, #4
 8005c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d015      	beq.n	8005c38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0c:	f7fe f9da 	bl	8003fc4 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c14:	f7fe f9d6 	bl	8003fc4 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e0cb      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2a:	4b49      	ldr	r3, [pc, #292]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ee      	beq.n	8005c14 <HAL_RCC_OscConfig+0x334>
 8005c36:	e014      	b.n	8005c62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c38:	f7fe f9c4 	bl	8003fc4 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3e:	e00a      	b.n	8005c56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c40:	f7fe f9c0 	bl	8003fc4 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e0b5      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c56:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1ee      	bne.n	8005c40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d105      	bne.n	8005c74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c68:	4b39      	ldr	r3, [pc, #228]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	4a38      	ldr	r2, [pc, #224]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80a1 	beq.w	8005dc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c7e:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d05c      	beq.n	8005d44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d141      	bne.n	8005d16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c92:	4b31      	ldr	r3, [pc, #196]	; (8005d58 <HAL_RCC_OscConfig+0x478>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7fe f994 	bl	8003fc4 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca0:	f7fe f990 	bl	8003fc4 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e087      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb2:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69da      	ldr	r2, [r3, #28]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	019b      	lsls	r3, r3, #6
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	041b      	lsls	r3, r3, #16
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	061b      	lsls	r3, r3, #24
 8005ce2:	491b      	ldr	r1, [pc, #108]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <HAL_RCC_OscConfig+0x478>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cee:	f7fe f969 	bl	8003fc4 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf6:	f7fe f965 	bl	8003fc4 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e05c      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0f0      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x416>
 8005d14:	e054      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <HAL_RCC_OscConfig+0x478>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fe f952 	bl	8003fc4 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fe f94e 	bl	8003fc4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e045      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <HAL_RCC_OscConfig+0x470>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x444>
 8005d42:	e03d      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d107      	bne.n	8005d5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e038      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
 8005d50:	40023800 	.word	0x40023800
 8005d54:	40007000 	.word	0x40007000
 8005d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_RCC_OscConfig+0x4ec>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d028      	beq.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d121      	bne.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d11a      	bne.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d111      	bne.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	085b      	lsrs	r3, r3, #1
 8005da4:	3b01      	subs	r3, #1
 8005da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d107      	bne.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40023800 	.word	0x40023800

08005dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0cc      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005de4:	4b68      	ldr	r3, [pc, #416]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d90c      	bls.n	8005e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df2:	4b65      	ldr	r3, [pc, #404]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfa:	4b63      	ldr	r3, [pc, #396]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d001      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0b8      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d020      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e24:	4b59      	ldr	r3, [pc, #356]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	4a58      	ldr	r2, [pc, #352]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e3c:	4b53      	ldr	r3, [pc, #332]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a52      	ldr	r2, [pc, #328]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e48:	4b50      	ldr	r3, [pc, #320]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	494d      	ldr	r1, [pc, #308]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d044      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6e:	4b47      	ldr	r3, [pc, #284]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d119      	bne.n	8005eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e07f      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d003      	beq.n	8005e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d107      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8e:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e06f      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9e:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e067      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eae:	4b37      	ldr	r3, [pc, #220]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f023 0203 	bic.w	r2, r3, #3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	4934      	ldr	r1, [pc, #208]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ec0:	f7fe f880 	bl	8003fc4 <HAL_GetTick>
 8005ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec6:	e00a      	b.n	8005ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec8:	f7fe f87c 	bl	8003fc4 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e04f      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ede:	4b2b      	ldr	r3, [pc, #172]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 020c 	and.w	r2, r3, #12
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d1eb      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ef0:	4b25      	ldr	r3, [pc, #148]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d20c      	bcs.n	8005f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efe:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f06:	4b20      	ldr	r3, [pc, #128]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d001      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e032      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f24:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4916      	ldr	r1, [pc, #88]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	490e      	ldr	r1, [pc, #56]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f56:	f000 f821 	bl	8005f9c <HAL_RCC_GetSysClockFreq>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	490a      	ldr	r1, [pc, #40]	; (8005f90 <HAL_RCC_ClockConfig+0x1c0>)
 8005f68:	5ccb      	ldrb	r3, [r1, r3]
 8005f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6e:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <HAL_RCC_ClockConfig+0x1c4>)
 8005f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f72:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <HAL_RCC_ClockConfig+0x1c8>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fd ffe0 	bl	8003f3c <HAL_InitTick>

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40023c00 	.word	0x40023c00
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	08009910 	.word	0x08009910
 8005f94:	20000044 	.word	0x20000044
 8005f98:	20000048 	.word	0x20000048

08005f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa0:	b094      	sub	sp, #80	; 0x50
 8005fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa8:	2300      	movs	r3, #0
 8005faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fac:	2300      	movs	r3, #0
 8005fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fb4:	4b79      	ldr	r3, [pc, #484]	; (800619c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f003 030c 	and.w	r3, r3, #12
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d00d      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x40>
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	f200 80e1 	bhi.w	8006188 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d003      	beq.n	8005fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fce:	e0db      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fd0:	4b73      	ldr	r3, [pc, #460]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005fd4:	e0db      	b.n	800618e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fd6:	4b73      	ldr	r3, [pc, #460]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fda:	e0d8      	b.n	800618e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fdc:	4b6f      	ldr	r3, [pc, #444]	; (800619c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fe6:	4b6d      	ldr	r3, [pc, #436]	; (800619c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d063      	beq.n	80060ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ff2:	4b6a      	ldr	r3, [pc, #424]	; (800619c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	099b      	lsrs	r3, r3, #6
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006004:	633b      	str	r3, [r7, #48]	; 0x30
 8006006:	2300      	movs	r3, #0
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
 800600a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800600e:	4622      	mov	r2, r4
 8006010:	462b      	mov	r3, r5
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f04f 0100 	mov.w	r1, #0
 800601a:	0159      	lsls	r1, r3, #5
 800601c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006020:	0150      	lsls	r0, r2, #5
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4621      	mov	r1, r4
 8006028:	1a51      	subs	r1, r2, r1
 800602a:	6139      	str	r1, [r7, #16]
 800602c:	4629      	mov	r1, r5
 800602e:	eb63 0301 	sbc.w	r3, r3, r1
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006040:	4659      	mov	r1, fp
 8006042:	018b      	lsls	r3, r1, #6
 8006044:	4651      	mov	r1, sl
 8006046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800604a:	4651      	mov	r1, sl
 800604c:	018a      	lsls	r2, r1, #6
 800604e:	4651      	mov	r1, sl
 8006050:	ebb2 0801 	subs.w	r8, r2, r1
 8006054:	4659      	mov	r1, fp
 8006056:	eb63 0901 	sbc.w	r9, r3, r1
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800606a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800606e:	4690      	mov	r8, r2
 8006070:	4699      	mov	r9, r3
 8006072:	4623      	mov	r3, r4
 8006074:	eb18 0303 	adds.w	r3, r8, r3
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	462b      	mov	r3, r5
 800607c:	eb49 0303 	adc.w	r3, r9, r3
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800608e:	4629      	mov	r1, r5
 8006090:	024b      	lsls	r3, r1, #9
 8006092:	4621      	mov	r1, r4
 8006094:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006098:	4621      	mov	r1, r4
 800609a:	024a      	lsls	r2, r1, #9
 800609c:	4610      	mov	r0, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a2:	2200      	movs	r2, #0
 80060a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060ac:	f7fa fd8e 	bl	8000bcc <__aeabi_uldivmod>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4613      	mov	r3, r2
 80060b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b8:	e058      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ba:	4b38      	ldr	r3, [pc, #224]	; (800619c <HAL_RCC_GetSysClockFreq+0x200>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	099b      	lsrs	r3, r3, #6
 80060c0:	2200      	movs	r2, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	4611      	mov	r1, r2
 80060c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060ca:	623b      	str	r3, [r7, #32]
 80060cc:	2300      	movs	r3, #0
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
 80060d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	f04f 0000 	mov.w	r0, #0
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	0159      	lsls	r1, r3, #5
 80060e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e6:	0150      	lsls	r0, r2, #5
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4641      	mov	r1, r8
 80060ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80060f2:	4649      	mov	r1, r9
 80060f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006104:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006108:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800610c:	ebb2 040a 	subs.w	r4, r2, sl
 8006110:	eb63 050b 	sbc.w	r5, r3, fp
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	f04f 0300 	mov.w	r3, #0
 800611c:	00eb      	lsls	r3, r5, #3
 800611e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006122:	00e2      	lsls	r2, r4, #3
 8006124:	4614      	mov	r4, r2
 8006126:	461d      	mov	r5, r3
 8006128:	4643      	mov	r3, r8
 800612a:	18e3      	adds	r3, r4, r3
 800612c:	603b      	str	r3, [r7, #0]
 800612e:	464b      	mov	r3, r9
 8006130:	eb45 0303 	adc.w	r3, r5, r3
 8006134:	607b      	str	r3, [r7, #4]
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006142:	4629      	mov	r1, r5
 8006144:	028b      	lsls	r3, r1, #10
 8006146:	4621      	mov	r1, r4
 8006148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800614c:	4621      	mov	r1, r4
 800614e:	028a      	lsls	r2, r1, #10
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006156:	2200      	movs	r2, #0
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	61fa      	str	r2, [r7, #28]
 800615c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006160:	f7fa fd34 	bl	8000bcc <__aeabi_uldivmod>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4613      	mov	r3, r2
 800616a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <HAL_RCC_GetSysClockFreq+0x200>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	0c1b      	lsrs	r3, r3, #16
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	3301      	adds	r3, #1
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800617c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800617e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006180:	fbb2 f3f3 	udiv	r3, r2, r3
 8006184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006186:	e002      	b.n	800618e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800618a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800618c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800618e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006190:	4618      	mov	r0, r3
 8006192:	3750      	adds	r7, #80	; 0x50
 8006194:	46bd      	mov	sp, r7
 8006196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800619a:	bf00      	nop
 800619c:	40023800 	.word	0x40023800
 80061a0:	00f42400 	.word	0x00f42400
 80061a4:	007a1200 	.word	0x007a1200

080061a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061ac:	4b03      	ldr	r3, [pc, #12]	; (80061bc <HAL_RCC_GetHCLKFreq+0x14>)
 80061ae:	681b      	ldr	r3, [r3, #0]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20000044 	.word	0x20000044

080061c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061c4:	f7ff fff0 	bl	80061a8 <HAL_RCC_GetHCLKFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	0a9b      	lsrs	r3, r3, #10
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	4903      	ldr	r1, [pc, #12]	; (80061e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40023800 	.word	0x40023800
 80061e4:	08009920 	.word	0x08009920

080061e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061ec:	f7ff ffdc 	bl	80061a8 <HAL_RCC_GetHCLKFreq>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	0b5b      	lsrs	r3, r3, #13
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	4903      	ldr	r1, [pc, #12]	; (800620c <HAL_RCC_GetPCLK2Freq+0x24>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006204:	4618      	mov	r0, r3
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40023800 	.word	0x40023800
 800620c:	08009920 	.word	0x08009920

08006210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e07b      	b.n	800631a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	d108      	bne.n	800623c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006232:	d009      	beq.n	8006248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	61da      	str	r2, [r3, #28]
 800623a:	e005      	b.n	8006248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fc f9aa 	bl	80025bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800627e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062cc:	ea42 0103 	orr.w	r1, r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	0c1b      	lsrs	r3, r3, #16
 80062e6:	f003 0104 	and.w	r1, r3, #4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	f003 0210 	and.w	r2, r3, #16
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006308:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e041      	b.n	80063b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d106      	bne.n	800634e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7fc f9f3 	bl	8002734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2202      	movs	r2, #2
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3304      	adds	r3, #4
 800635e:	4619      	mov	r1, r3
 8006360:	4610      	mov	r0, r2
 8006362:	f000 fed1 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d001      	beq.n	80063d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e04e      	b.n	8006476 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a23      	ldr	r2, [pc, #140]	; (8006484 <HAL_TIM_Base_Start_IT+0xc4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006402:	d01d      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1f      	ldr	r2, [pc, #124]	; (8006488 <HAL_TIM_Base_Start_IT+0xc8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1e      	ldr	r2, [pc, #120]	; (800648c <HAL_TIM_Base_Start_IT+0xcc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1c      	ldr	r2, [pc, #112]	; (8006490 <HAL_TIM_Base_Start_IT+0xd0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <HAL_TIM_Base_Start_IT+0xd4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a19      	ldr	r2, [pc, #100]	; (8006498 <HAL_TIM_Base_Start_IT+0xd8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a18      	ldr	r2, [pc, #96]	; (800649c <HAL_TIM_Base_Start_IT+0xdc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d111      	bne.n	8006464 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b06      	cmp	r3, #6
 8006450:	d010      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0201 	orr.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006462:	e007      	b.n	8006474 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40010400 	.word	0x40010400
 8006498:	40014000 	.word	0x40014000
 800649c:	40001800 	.word	0x40001800

080064a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e041      	b.n	8006536 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fc f9d8 	bl	800287c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f000 fe12 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <HAL_TIM_PWM_Start+0x24>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	bf14      	ite	ne
 800655c:	2301      	movne	r3, #1
 800655e:	2300      	moveq	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	e022      	b.n	80065aa <HAL_TIM_PWM_Start+0x6a>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b04      	cmp	r3, #4
 8006568:	d109      	bne.n	800657e <HAL_TIM_PWM_Start+0x3e>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b01      	cmp	r3, #1
 8006574:	bf14      	ite	ne
 8006576:	2301      	movne	r3, #1
 8006578:	2300      	moveq	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	e015      	b.n	80065aa <HAL_TIM_PWM_Start+0x6a>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d109      	bne.n	8006598 <HAL_TIM_PWM_Start+0x58>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	bf14      	ite	ne
 8006590:	2301      	movne	r3, #1
 8006592:	2300      	moveq	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	e008      	b.n	80065aa <HAL_TIM_PWM_Start+0x6a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	bf14      	ite	ne
 80065a4:	2301      	movne	r3, #1
 80065a6:	2300      	moveq	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e07c      	b.n	80066ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <HAL_TIM_PWM_Start+0x82>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065c0:	e013      	b.n	80065ea <HAL_TIM_PWM_Start+0xaa>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d104      	bne.n	80065d2 <HAL_TIM_PWM_Start+0x92>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065d0:	e00b      	b.n	80065ea <HAL_TIM_PWM_Start+0xaa>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d104      	bne.n	80065e2 <HAL_TIM_PWM_Start+0xa2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065e0:	e003      	b.n	80065ea <HAL_TIM_PWM_Start+0xaa>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2201      	movs	r2, #1
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 f99c 	bl	8007930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a2d      	ldr	r2, [pc, #180]	; (80066b4 <HAL_TIM_PWM_Start+0x174>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_TIM_PWM_Start+0xcc>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a2c      	ldr	r2, [pc, #176]	; (80066b8 <HAL_TIM_PWM_Start+0x178>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d101      	bne.n	8006610 <HAL_TIM_PWM_Start+0xd0>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <HAL_TIM_PWM_Start+0xd2>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006624:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a22      	ldr	r2, [pc, #136]	; (80066b4 <HAL_TIM_PWM_Start+0x174>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d022      	beq.n	8006676 <HAL_TIM_PWM_Start+0x136>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006638:	d01d      	beq.n	8006676 <HAL_TIM_PWM_Start+0x136>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1f      	ldr	r2, [pc, #124]	; (80066bc <HAL_TIM_PWM_Start+0x17c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d018      	beq.n	8006676 <HAL_TIM_PWM_Start+0x136>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <HAL_TIM_PWM_Start+0x180>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <HAL_TIM_PWM_Start+0x136>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <HAL_TIM_PWM_Start+0x184>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00e      	beq.n	8006676 <HAL_TIM_PWM_Start+0x136>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <HAL_TIM_PWM_Start+0x178>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d009      	beq.n	8006676 <HAL_TIM_PWM_Start+0x136>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <HAL_TIM_PWM_Start+0x188>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d004      	beq.n	8006676 <HAL_TIM_PWM_Start+0x136>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a16      	ldr	r2, [pc, #88]	; (80066cc <HAL_TIM_PWM_Start+0x18c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d111      	bne.n	800669a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b06      	cmp	r3, #6
 8006686:	d010      	beq.n	80066aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	e007      	b.n	80066aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0201 	orr.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40010400 	.word	0x40010400
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40001800 	.word	0x40001800

080066d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e041      	b.n	8006766 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f839 	bl	800676e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f000 fcfa 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
	...

08006784 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <HAL_TIM_IC_Start_IT+0x1e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	e013      	b.n	80067ca <HAL_TIM_IC_Start_IT+0x46>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d104      	bne.n	80067b2 <HAL_TIM_IC_Start_IT+0x2e>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	e00b      	b.n	80067ca <HAL_TIM_IC_Start_IT+0x46>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_IC_Start_IT+0x3e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	e003      	b.n	80067ca <HAL_TIM_IC_Start_IT+0x46>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_TIM_IC_Start_IT+0x58>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	e013      	b.n	8006804 <HAL_TIM_IC_Start_IT+0x80>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d104      	bne.n	80067ec <HAL_TIM_IC_Start_IT+0x68>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	e00b      	b.n	8006804 <HAL_TIM_IC_Start_IT+0x80>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	d104      	bne.n	80067fc <HAL_TIM_IC_Start_IT+0x78>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	e003      	b.n	8006804 <HAL_TIM_IC_Start_IT+0x80>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006802:	b2db      	uxtb	r3, r3
 8006804:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d102      	bne.n	8006812 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800680c:	7b7b      	ldrb	r3, [r7, #13]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d001      	beq.n	8006816 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e0cc      	b.n	80069b0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <HAL_TIM_IC_Start_IT+0xa2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006824:	e013      	b.n	800684e <HAL_TIM_IC_Start_IT+0xca>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b04      	cmp	r3, #4
 800682a:	d104      	bne.n	8006836 <HAL_TIM_IC_Start_IT+0xb2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006834:	e00b      	b.n	800684e <HAL_TIM_IC_Start_IT+0xca>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b08      	cmp	r3, #8
 800683a:	d104      	bne.n	8006846 <HAL_TIM_IC_Start_IT+0xc2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006844:	e003      	b.n	800684e <HAL_TIM_IC_Start_IT+0xca>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <HAL_TIM_IC_Start_IT+0xda>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800685c:	e013      	b.n	8006886 <HAL_TIM_IC_Start_IT+0x102>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b04      	cmp	r3, #4
 8006862:	d104      	bne.n	800686e <HAL_TIM_IC_Start_IT+0xea>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800686c:	e00b      	b.n	8006886 <HAL_TIM_IC_Start_IT+0x102>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d104      	bne.n	800687e <HAL_TIM_IC_Start_IT+0xfa>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800687c:	e003      	b.n	8006886 <HAL_TIM_IC_Start_IT+0x102>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b0c      	cmp	r3, #12
 800688a:	d841      	bhi.n	8006910 <HAL_TIM_IC_Start_IT+0x18c>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <HAL_TIM_IC_Start_IT+0x110>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068c9 	.word	0x080068c9
 8006898:	08006911 	.word	0x08006911
 800689c:	08006911 	.word	0x08006911
 80068a0:	08006911 	.word	0x08006911
 80068a4:	080068db 	.word	0x080068db
 80068a8:	08006911 	.word	0x08006911
 80068ac:	08006911 	.word	0x08006911
 80068b0:	08006911 	.word	0x08006911
 80068b4:	080068ed 	.word	0x080068ed
 80068b8:	08006911 	.word	0x08006911
 80068bc:	08006911 	.word	0x08006911
 80068c0:	08006911 	.word	0x08006911
 80068c4:	080068ff 	.word	0x080068ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0202 	orr.w	r2, r2, #2
 80068d6:	60da      	str	r2, [r3, #12]
      break;
 80068d8:	e01d      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0204 	orr.w	r2, r2, #4
 80068e8:	60da      	str	r2, [r3, #12]
      break;
 80068ea:	e014      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0208 	orr.w	r2, r2, #8
 80068fa:	60da      	str	r2, [r3, #12]
      break;
 80068fc:	e00b      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0210 	orr.w	r2, r2, #16
 800690c:	60da      	str	r2, [r3, #12]
      break;
 800690e:	e002      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
      break;
 8006914:	bf00      	nop
  }

  if (status == HAL_OK)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d148      	bne.n	80069ae <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2201      	movs	r2, #1
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f001 f803 	bl	8007930 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a22      	ldr	r2, [pc, #136]	; (80069b8 <HAL_TIM_IC_Start_IT+0x234>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d022      	beq.n	800697a <HAL_TIM_IC_Start_IT+0x1f6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693c:	d01d      	beq.n	800697a <HAL_TIM_IC_Start_IT+0x1f6>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1e      	ldr	r2, [pc, #120]	; (80069bc <HAL_TIM_IC_Start_IT+0x238>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d018      	beq.n	800697a <HAL_TIM_IC_Start_IT+0x1f6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <HAL_TIM_IC_Start_IT+0x23c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <HAL_TIM_IC_Start_IT+0x1f6>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <HAL_TIM_IC_Start_IT+0x240>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_TIM_IC_Start_IT+0x1f6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_TIM_IC_Start_IT+0x244>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_TIM_IC_Start_IT+0x1f6>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a18      	ldr	r2, [pc, #96]	; (80069cc <HAL_TIM_IC_Start_IT+0x248>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIM_IC_Start_IT+0x1f6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <HAL_TIM_IC_Start_IT+0x24c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d111      	bne.n	800699e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b06      	cmp	r3, #6
 800698a:	d010      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699c:	e007      	b.n	80069ae <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40001800 	.word	0x40001800

080069d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d122      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d11b      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f06f 0202 	mvn.w	r2, #2
 8006a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fd f8c6 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8006a1c:	e005      	b.n	8006a2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fb54 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fb5b 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d122      	bne.n	8006a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d11b      	bne.n	8006a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0204 	mvn.w	r2, #4
 8006a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fd f89c 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fb2a 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fb31 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d122      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d11b      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0208 	mvn.w	r2, #8
 8006aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2204      	movs	r2, #4
 8006aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f003 0303 	and.w	r3, r3, #3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fd f872 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8006ac4:	e005      	b.n	8006ad2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fb00 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb07 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0310 	and.w	r3, r3, #16
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	d122      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	2b10      	cmp	r3, #16
 8006af2:	d11b      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0210 	mvn.w	r2, #16
 8006afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2208      	movs	r2, #8
 8006b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fd f848 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fad6 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fadd 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d10e      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d107      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0201 	mvn.w	r2, #1
 8006b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fab0 	bl	80070b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b62:	2b80      	cmp	r3, #128	; 0x80
 8006b64:	d10e      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d107      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 ffd4 	bl	8007b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d10e      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b40      	cmp	r3, #64	; 0x40
 8006b9e:	d107      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 faa2 	bl	80070f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d10e      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d107      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f06f 0220 	mvn.w	r2, #32
 8006bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 ff9e 	bl	8007b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e088      	b.n	8006d14 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d11b      	bne.n	8006c48 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6819      	ldr	r1, [r3, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f000 fcc2 	bl	80075a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 020c 	bic.w	r2, r2, #12
 8006c32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6999      	ldr	r1, [r3, #24]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	619a      	str	r2, [r3, #24]
 8006c46:	e060      	b.n	8006d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d11c      	bne.n	8006c88 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6819      	ldr	r1, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f000 fd46 	bl	80076ee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	699a      	ldr	r2, [r3, #24]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6999      	ldr	r1, [r3, #24]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	021a      	lsls	r2, r3, #8
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	619a      	str	r2, [r3, #24]
 8006c86:	e040      	b.n	8006d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d11b      	bne.n	8006cc6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6819      	ldr	r1, [r3, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f000 fd93 	bl	80077c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 020c 	bic.w	r2, r2, #12
 8006cb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69d9      	ldr	r1, [r3, #28]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	61da      	str	r2, [r3, #28]
 8006cc4:	e021      	b.n	8006d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b0c      	cmp	r3, #12
 8006cca:	d11c      	bne.n	8006d06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f000 fdb0 	bl	8007840 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	69da      	ldr	r2, [r3, #28]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69d9      	ldr	r1, [r3, #28]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	021a      	lsls	r2, r3, #8
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	61da      	str	r2, [r3, #28]
 8006d04:	e001      	b.n	8006d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e0ae      	b.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b0c      	cmp	r3, #12
 8006d46:	f200 809f 	bhi.w	8006e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d85 	.word	0x08006d85
 8006d54:	08006e89 	.word	0x08006e89
 8006d58:	08006e89 	.word	0x08006e89
 8006d5c:	08006e89 	.word	0x08006e89
 8006d60:	08006dc5 	.word	0x08006dc5
 8006d64:	08006e89 	.word	0x08006e89
 8006d68:	08006e89 	.word	0x08006e89
 8006d6c:	08006e89 	.word	0x08006e89
 8006d70:	08006e07 	.word	0x08006e07
 8006d74:	08006e89 	.word	0x08006e89
 8006d78:	08006e89 	.word	0x08006e89
 8006d7c:	08006e89 	.word	0x08006e89
 8006d80:	08006e47 	.word	0x08006e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fa5c 	bl	8007248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0208 	orr.w	r2, r2, #8
 8006d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0204 	bic.w	r2, r2, #4
 8006dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6999      	ldr	r1, [r3, #24]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	691a      	ldr	r2, [r3, #16]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	619a      	str	r2, [r3, #24]
      break;
 8006dc2:	e064      	b.n	8006e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 faac 	bl	8007328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699a      	ldr	r2, [r3, #24]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6999      	ldr	r1, [r3, #24]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	021a      	lsls	r2, r3, #8
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	619a      	str	r2, [r3, #24]
      break;
 8006e04:	e043      	b.n	8006e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fb01 	bl	8007414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0208 	orr.w	r2, r2, #8
 8006e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69da      	ldr	r2, [r3, #28]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0204 	bic.w	r2, r2, #4
 8006e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69d9      	ldr	r1, [r3, #28]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	61da      	str	r2, [r3, #28]
      break;
 8006e44:	e023      	b.n	8006e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fb55 	bl	80074fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69da      	ldr	r2, [r3, #28]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69da      	ldr	r2, [r3, #28]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69d9      	ldr	r1, [r3, #28]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	021a      	lsls	r2, r3, #8
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	61da      	str	r2, [r3, #28]
      break;
 8006e86:	e002      	b.n	8006e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_TIM_ConfigClockSource+0x1c>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e0b4      	b.n	8007026 <HAL_TIM_ConfigClockSource+0x186>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef4:	d03e      	beq.n	8006f74 <HAL_TIM_ConfigClockSource+0xd4>
 8006ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efa:	f200 8087 	bhi.w	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f02:	f000 8086 	beq.w	8007012 <HAL_TIM_ConfigClockSource+0x172>
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0a:	d87f      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f0c:	2b70      	cmp	r3, #112	; 0x70
 8006f0e:	d01a      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0xa6>
 8006f10:	2b70      	cmp	r3, #112	; 0x70
 8006f12:	d87b      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f14:	2b60      	cmp	r3, #96	; 0x60
 8006f16:	d050      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x11a>
 8006f18:	2b60      	cmp	r3, #96	; 0x60
 8006f1a:	d877      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f1c:	2b50      	cmp	r3, #80	; 0x50
 8006f1e:	d03c      	beq.n	8006f9a <HAL_TIM_ConfigClockSource+0xfa>
 8006f20:	2b50      	cmp	r3, #80	; 0x50
 8006f22:	d873      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d058      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x13a>
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d86f      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d064      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15a>
 8006f30:	2b30      	cmp	r3, #48	; 0x30
 8006f32:	d86b      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d060      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15a>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d867      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d05c      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15a>
 8006f40:	2b10      	cmp	r3, #16
 8006f42:	d05a      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15a>
 8006f44:	e062      	b.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6899      	ldr	r1, [r3, #8]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f000 fccb 	bl	80078f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	609a      	str	r2, [r3, #8]
      break;
 8006f72:	e04f      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6899      	ldr	r1, [r3, #8]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f000 fcb4 	bl	80078f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f96:	609a      	str	r2, [r3, #8]
      break;
 8006f98:	e03c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6859      	ldr	r1, [r3, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f000 fb72 	bl	8007690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2150      	movs	r1, #80	; 0x50
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fc81 	bl	80078ba <TIM_ITRx_SetConfig>
      break;
 8006fb8:	e02c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	6859      	ldr	r1, [r3, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f000 fbce 	bl	8007768 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2160      	movs	r1, #96	; 0x60
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fc71 	bl	80078ba <TIM_ITRx_SetConfig>
      break;
 8006fd8:	e01c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6859      	ldr	r1, [r3, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f000 fb52 	bl	8007690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2140      	movs	r1, #64	; 0x40
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fc61 	bl	80078ba <TIM_ITRx_SetConfig>
      break;
 8006ff8:	e00c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f000 fc58 	bl	80078ba <TIM_ITRx_SetConfig>
      break;
 800700a:	e003      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
      break;
 8007010:	e000      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b0c      	cmp	r3, #12
 8007042:	d831      	bhi.n	80070a8 <HAL_TIM_ReadCapturedValue+0x78>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007081 	.word	0x08007081
 8007050:	080070a9 	.word	0x080070a9
 8007054:	080070a9 	.word	0x080070a9
 8007058:	080070a9 	.word	0x080070a9
 800705c:	0800708b 	.word	0x0800708b
 8007060:	080070a9 	.word	0x080070a9
 8007064:	080070a9 	.word	0x080070a9
 8007068:	080070a9 	.word	0x080070a9
 800706c:	08007095 	.word	0x08007095
 8007070:	080070a9 	.word	0x080070a9
 8007074:	080070a9 	.word	0x080070a9
 8007078:	080070a9 	.word	0x080070a9
 800707c:	0800709f 	.word	0x0800709f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	60fb      	str	r3, [r7, #12]

      break;
 8007088:	e00f      	b.n	80070aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	60fb      	str	r3, [r7, #12]

      break;
 8007092:	e00a      	b.n	80070aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709a:	60fb      	str	r3, [r7, #12]

      break;
 800709c:	e005      	b.n	80070aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	60fb      	str	r3, [r7, #12]

      break;
 80070a6:	e000      	b.n	80070aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80070a8:	bf00      	nop
  }

  return tmpreg;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a40      	ldr	r2, [pc, #256]	; (800721c <TIM_Base_SetConfig+0x114>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d00f      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a3d      	ldr	r2, [pc, #244]	; (8007220 <TIM_Base_SetConfig+0x118>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00b      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a3c      	ldr	r2, [pc, #240]	; (8007224 <TIM_Base_SetConfig+0x11c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d007      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a3b      	ldr	r2, [pc, #236]	; (8007228 <TIM_Base_SetConfig+0x120>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d003      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a3a      	ldr	r2, [pc, #232]	; (800722c <TIM_Base_SetConfig+0x124>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d108      	bne.n	800715a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a2f      	ldr	r2, [pc, #188]	; (800721c <TIM_Base_SetConfig+0x114>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d02b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007168:	d027      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a2c      	ldr	r2, [pc, #176]	; (8007220 <TIM_Base_SetConfig+0x118>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d023      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2b      	ldr	r2, [pc, #172]	; (8007224 <TIM_Base_SetConfig+0x11c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01f      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a2a      	ldr	r2, [pc, #168]	; (8007228 <TIM_Base_SetConfig+0x120>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a29      	ldr	r2, [pc, #164]	; (800722c <TIM_Base_SetConfig+0x124>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d017      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a28      	ldr	r2, [pc, #160]	; (8007230 <TIM_Base_SetConfig+0x128>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a27      	ldr	r2, [pc, #156]	; (8007234 <TIM_Base_SetConfig+0x12c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00f      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a26      	ldr	r2, [pc, #152]	; (8007238 <TIM_Base_SetConfig+0x130>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a25      	ldr	r2, [pc, #148]	; (800723c <TIM_Base_SetConfig+0x134>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a24      	ldr	r2, [pc, #144]	; (8007240 <TIM_Base_SetConfig+0x138>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a23      	ldr	r2, [pc, #140]	; (8007244 <TIM_Base_SetConfig+0x13c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d108      	bne.n	80071cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a0a      	ldr	r2, [pc, #40]	; (800721c <TIM_Base_SetConfig+0x114>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_Base_SetConfig+0xf8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a0c      	ldr	r2, [pc, #48]	; (800722c <TIM_Base_SetConfig+0x124>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d103      	bne.n	8007208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	615a      	str	r2, [r3, #20]
}
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	40010000 	.word	0x40010000
 8007220:	40000400 	.word	0x40000400
 8007224:	40000800 	.word	0x40000800
 8007228:	40000c00 	.word	0x40000c00
 800722c:	40010400 	.word	0x40010400
 8007230:	40014000 	.word	0x40014000
 8007234:	40014400 	.word	0x40014400
 8007238:	40014800 	.word	0x40014800
 800723c:	40001800 	.word	0x40001800
 8007240:	40001c00 	.word	0x40001c00
 8007244:	40002000 	.word	0x40002000

08007248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f023 0201 	bic.w	r2, r3, #1
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0303 	bic.w	r3, r3, #3
 800727e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 0302 	bic.w	r3, r3, #2
 8007290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a20      	ldr	r2, [pc, #128]	; (8007320 <TIM_OC1_SetConfig+0xd8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC1_SetConfig+0x64>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <TIM_OC1_SetConfig+0xdc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d10c      	bne.n	80072c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f023 0308 	bic.w	r3, r3, #8
 80072b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f023 0304 	bic.w	r3, r3, #4
 80072c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a15      	ldr	r2, [pc, #84]	; (8007320 <TIM_OC1_SetConfig+0xd8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_OC1_SetConfig+0x8e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a14      	ldr	r2, [pc, #80]	; (8007324 <TIM_OC1_SetConfig+0xdc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d111      	bne.n	80072fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	621a      	str	r2, [r3, #32]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40010000 	.word	0x40010000
 8007324:	40010400 	.word	0x40010400

08007328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f023 0210 	bic.w	r2, r3, #16
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	021b      	lsls	r3, r3, #8
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 0320 	bic.w	r3, r3, #32
 8007372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a22      	ldr	r2, [pc, #136]	; (800740c <TIM_OC2_SetConfig+0xe4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_OC2_SetConfig+0x68>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a21      	ldr	r2, [pc, #132]	; (8007410 <TIM_OC2_SetConfig+0xe8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d10d      	bne.n	80073ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a17      	ldr	r2, [pc, #92]	; (800740c <TIM_OC2_SetConfig+0xe4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_OC2_SetConfig+0x94>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a16      	ldr	r2, [pc, #88]	; (8007410 <TIM_OC2_SetConfig+0xe8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d113      	bne.n	80073e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010000 	.word	0x40010000
 8007410:	40010400 	.word	0x40010400

08007414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800745c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a21      	ldr	r2, [pc, #132]	; (80074f4 <TIM_OC3_SetConfig+0xe0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d003      	beq.n	800747a <TIM_OC3_SetConfig+0x66>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a20      	ldr	r2, [pc, #128]	; (80074f8 <TIM_OC3_SetConfig+0xe4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d10d      	bne.n	8007496 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a16      	ldr	r2, [pc, #88]	; (80074f4 <TIM_OC3_SetConfig+0xe0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d003      	beq.n	80074a6 <TIM_OC3_SetConfig+0x92>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <TIM_OC3_SetConfig+0xe4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d113      	bne.n	80074ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	621a      	str	r2, [r3, #32]
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40010400 	.word	0x40010400

080074fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	031b      	lsls	r3, r3, #12
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	4313      	orrs	r3, r2
 8007552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a12      	ldr	r2, [pc, #72]	; (80075a0 <TIM_OC4_SetConfig+0xa4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_OC4_SetConfig+0x68>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a11      	ldr	r2, [pc, #68]	; (80075a4 <TIM_OC4_SetConfig+0xa8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d109      	bne.n	8007578 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	019b      	lsls	r3, r3, #6
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	621a      	str	r2, [r3, #32]
}
 8007592:	bf00      	nop
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40010400 	.word	0x40010400

080075a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f023 0201 	bic.w	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4a28      	ldr	r2, [pc, #160]	; (8007674 <TIM_TI1_SetConfig+0xcc>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d01b      	beq.n	800760e <TIM_TI1_SetConfig+0x66>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075dc:	d017      	beq.n	800760e <TIM_TI1_SetConfig+0x66>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4a25      	ldr	r2, [pc, #148]	; (8007678 <TIM_TI1_SetConfig+0xd0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d013      	beq.n	800760e <TIM_TI1_SetConfig+0x66>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4a24      	ldr	r2, [pc, #144]	; (800767c <TIM_TI1_SetConfig+0xd4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00f      	beq.n	800760e <TIM_TI1_SetConfig+0x66>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4a23      	ldr	r2, [pc, #140]	; (8007680 <TIM_TI1_SetConfig+0xd8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00b      	beq.n	800760e <TIM_TI1_SetConfig+0x66>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4a22      	ldr	r2, [pc, #136]	; (8007684 <TIM_TI1_SetConfig+0xdc>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d007      	beq.n	800760e <TIM_TI1_SetConfig+0x66>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4a21      	ldr	r2, [pc, #132]	; (8007688 <TIM_TI1_SetConfig+0xe0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d003      	beq.n	800760e <TIM_TI1_SetConfig+0x66>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4a20      	ldr	r2, [pc, #128]	; (800768c <TIM_TI1_SetConfig+0xe4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d101      	bne.n	8007612 <TIM_TI1_SetConfig+0x6a>
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <TIM_TI1_SetConfig+0x6c>
 8007612:	2300      	movs	r3, #0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f023 0303 	bic.w	r3, r3, #3
 800761e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4313      	orrs	r3, r2
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	e003      	b.n	8007632 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f043 0301 	orr.w	r3, r3, #1
 8007630:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	b2db      	uxtb	r3, r3
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f023 030a 	bic.w	r3, r3, #10
 800764c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	f003 030a 	and.w	r3, r3, #10
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	621a      	str	r2, [r3, #32]
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40010000 	.word	0x40010000
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40000c00 	.word	0x40000c00
 8007684:	40010400 	.word	0x40010400
 8007688:	40014000 	.word	0x40014000
 800768c:	40001800 	.word	0x40001800

08007690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f023 0201 	bic.w	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f023 030a 	bic.w	r3, r3, #10
 80076cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b087      	sub	sp, #28
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	f023 0210 	bic.w	r2, r3, #16
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800771a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800772c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	031b      	lsls	r3, r3, #12
 8007732:	b29b      	uxth	r3, r3
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007740:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	4313      	orrs	r3, r2
 800774e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	621a      	str	r2, [r3, #32]
}
 800775c:	bf00      	nop
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	f023 0210 	bic.w	r2, r3, #16
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007792:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	031b      	lsls	r3, r3, #12
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	621a      	str	r2, [r3, #32]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f023 0303 	bic.w	r3, r3, #3
 80077f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007804:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	b2db      	uxtb	r3, r3
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007818:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	621a      	str	r2, [r3, #32]
}
 8007834:	bf00      	nop
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800787e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	031b      	lsls	r3, r3, #12
 8007884:	b29b      	uxth	r3, r3
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007892:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	031b      	lsls	r3, r3, #12
 8007898:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	621a      	str	r2, [r3, #32]
}
 80078ae:	bf00      	nop
 80078b0:	371c      	adds	r7, #28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f043 0307 	orr.w	r3, r3, #7
 80078dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	609a      	str	r2, [r3, #8]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800790a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	021a      	lsls	r2, r3, #8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	431a      	orrs	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4313      	orrs	r3, r2
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	609a      	str	r2, [r3, #8]
}
 8007924:	bf00      	nop
 8007926:	371c      	adds	r7, #28
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	2201      	movs	r2, #1
 8007944:	fa02 f303 	lsl.w	r3, r2, r3
 8007948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a1a      	ldr	r2, [r3, #32]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	43db      	mvns	r3, r3
 8007952:	401a      	ands	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a1a      	ldr	r2, [r3, #32]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	fa01 f303 	lsl.w	r3, r1, r3
 8007968:	431a      	orrs	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	621a      	str	r2, [r3, #32]
}
 800796e:	bf00      	nop
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007990:	2302      	movs	r3, #2
 8007992:	e05a      	b.n	8007a4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a21      	ldr	r2, [pc, #132]	; (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d022      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e0:	d01d      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1d      	ldr	r2, [pc, #116]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d018      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1b      	ldr	r2, [pc, #108]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00e      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a18      	ldr	r2, [pc, #96]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d009      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d004      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a15      	ldr	r2, [pc, #84]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d10c      	bne.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40010400 	.word	0x40010400
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40001800 	.word	0x40001800

08007a74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e03d      	b.n	8007b0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e03f      	b.n	8007bd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fa ff2a 	bl	80029c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2224      	movs	r2, #36	; 0x24
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fd19 	bl	80085bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691a      	ldr	r2, [r3, #16]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695a      	ldr	r2, [r3, #20]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	4613      	mov	r3, r2
 8007be6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	d130      	bne.n	8007c56 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <HAL_UART_Transmit_IT+0x26>
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e029      	b.n	8007c58 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <HAL_UART_Transmit_IT+0x38>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	e022      	b.n	8007c58 <HAL_UART_Transmit_IT+0x7e>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	88fa      	ldrh	r2, [r7, #6]
 8007c24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	88fa      	ldrh	r2, [r7, #6]
 8007c2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2221      	movs	r2, #33	; 0x21
 8007c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	e000      	b.n	8007c58 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007c56:	2302      	movs	r3, #2
  }
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d11d      	bne.n	8007cba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <HAL_UART_Receive_IT+0x26>
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e016      	b.n	8007cbc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_UART_Receive_IT+0x38>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e00f      	b.n	8007cbc <HAL_UART_Receive_IT+0x58>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007caa:	88fb      	ldrh	r3, [r7, #6]
 8007cac:	461a      	mov	r2, r3
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 faab 	bl	800820c <UART_Start_Receive_IT>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	e000      	b.n	8007cbc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cba:	2302      	movs	r3, #2
  }
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b0ba      	sub	sp, #232	; 0xe8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10f      	bne.n	8007d2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <HAL_UART_IRQHandler+0x66>
 8007d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fb8f 	bl	8008446 <UART_Receive_IT>
      return;
 8007d28:	e256      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80de 	beq.w	8007ef0 <HAL_UART_IRQHandler+0x22c>
 8007d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 80d1 	beq.w	8007ef0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <HAL_UART_IRQHandler+0xae>
 8007d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6a:	f043 0201 	orr.w	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <HAL_UART_IRQHandler+0xd2>
 8007d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	f043 0202 	orr.w	r2, r3, #2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <HAL_UART_IRQHandler+0xf6>
 8007da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f043 0204 	orr.w	r2, r3, #4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d011      	beq.n	8007dea <HAL_UART_IRQHandler+0x126>
 8007dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d105      	bne.n	8007dde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	f043 0208 	orr.w	r2, r3, #8
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 81ed 	beq.w	80081ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d008      	beq.n	8007e12 <HAL_UART_IRQHandler+0x14e>
 8007e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e04:	f003 0320 	and.w	r3, r3, #32
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fb1a 	bl	8008446 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	bf0c      	ite	eq
 8007e20:	2301      	moveq	r3, #1
 8007e22:	2300      	movne	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <HAL_UART_IRQHandler+0x17a>
 8007e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d04f      	beq.n	8007ede <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa22 	bl	8008288 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b40      	cmp	r3, #64	; 0x40
 8007e50:	d141      	bne.n	8007ed6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3314      	adds	r3, #20
 8007e58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3314      	adds	r3, #20
 8007e7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1d9      	bne.n	8007e52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d013      	beq.n	8007ece <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	4a7d      	ldr	r2, [pc, #500]	; (80080a0 <HAL_UART_IRQHandler+0x3dc>)
 8007eac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fc fa37 	bl	8004326 <HAL_DMA_Abort_IT>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d016      	beq.n	8007eec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ecc:	e00e      	b.n	8007eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f986 	bl	80081e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed4:	e00a      	b.n	8007eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f982 	bl	80081e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007edc:	e006      	b.n	8007eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f97e 	bl	80081e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007eea:	e170      	b.n	80081ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eec:	bf00      	nop
    return;
 8007eee:	e16e      	b.n	80081ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	f040 814a 	bne.w	800818e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f003 0310 	and.w	r3, r3, #16
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8143 	beq.w	800818e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 813c 	beq.w	800818e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f16:	2300      	movs	r3, #0
 8007f18:	60bb      	str	r3, [r7, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	f040 80b4 	bne.w	80080a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 8140 	beq.w	80081d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	f080 8139 	bcs.w	80081d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f72:	f000 8088 	beq.w	8008086 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	330c      	adds	r3, #12
 8007f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007fa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1d9      	bne.n	8007f76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3314      	adds	r3, #20
 8007fc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3314      	adds	r3, #20
 8007fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fe6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e1      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3314      	adds	r3, #20
 8008004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800800e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3314      	adds	r3, #20
 800801e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008024:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e3      	bne.n	8007ffe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	330c      	adds	r3, #12
 800804a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008056:	f023 0310 	bic.w	r3, r3, #16
 800805a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008068:	65ba      	str	r2, [r7, #88]	; 0x58
 800806a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800806e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e3      	bne.n	8008044 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	4618      	mov	r0, r3
 8008082:	f7fc f8e0 	bl	8004246 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800808e:	b29b      	uxth	r3, r3
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	b29b      	uxth	r3, r3
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f8ac 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800809c:	e099      	b.n	80081d2 <HAL_UART_IRQHandler+0x50e>
 800809e:	bf00      	nop
 80080a0:	0800834f 	.word	0x0800834f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 808b 	beq.w	80081d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80080c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8086 	beq.w	80081d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	330c      	adds	r3, #12
 80080d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	330c      	adds	r3, #12
 80080ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80080ee:	647a      	str	r2, [r7, #68]	; 0x44
 80080f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e3      	bne.n	80080ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3314      	adds	r3, #20
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	623b      	str	r3, [r7, #32]
   return(result);
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3314      	adds	r3, #20
 8008122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008126:	633a      	str	r2, [r7, #48]	; 0x30
 8008128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800812c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e3      	bne.n	8008102 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	330c      	adds	r3, #12
 800814e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	60fb      	str	r3, [r7, #12]
   return(result);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0310 	bic.w	r3, r3, #16
 800815e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	330c      	adds	r3, #12
 8008168:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800816c:	61fa      	str	r2, [r7, #28]
 800816e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	69b9      	ldr	r1, [r7, #24]
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	617b      	str	r3, [r7, #20]
   return(result);
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e3      	bne.n	8008148 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f834 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800818c:	e023      	b.n	80081d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <HAL_UART_IRQHandler+0x4ea>
 800819a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f8e5 	bl	8008376 <UART_Transmit_IT>
    return;
 80081ac:	e014      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00e      	beq.n	80081d8 <HAL_UART_IRQHandler+0x514>
 80081ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d008      	beq.n	80081d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f925 	bl	8008416 <UART_EndTransmit_IT>
    return;
 80081cc:	e004      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
    return;
 80081ce:	bf00      	nop
 80081d0:	e002      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
      return;
 80081d2:	bf00      	nop
 80081d4:	e000      	b.n	80081d8 <HAL_UART_IRQHandler+0x514>
      return;
 80081d6:	bf00      	nop
  }
}
 80081d8:	37e8      	adds	r7, #232	; 0xe8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop

080081e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	88fa      	ldrh	r2, [r7, #6]
 8008224:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	88fa      	ldrh	r2, [r7, #6]
 800822a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2222      	movs	r2, #34	; 0x22
 8008236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008258:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	695a      	ldr	r2, [r3, #20]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0201 	orr.w	r2, r2, #1
 8008268:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0220 	orr.w	r2, r2, #32
 8008278:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008288:	b480      	push	{r7}
 800828a:	b095      	sub	sp, #84	; 0x54
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	330c      	adds	r3, #12
 8008296:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	330c      	adds	r3, #12
 80082ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082b0:	643a      	str	r2, [r7, #64]	; 0x40
 80082b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e5      	bne.n	8008290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3314      	adds	r3, #20
 80082ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f023 0301 	bic.w	r3, r3, #1
 80082da:	64bb      	str	r3, [r7, #72]	; 0x48
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3314      	adds	r3, #20
 80082e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ec:	e841 2300 	strex	r3, r2, [r1]
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e5      	bne.n	80082c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d119      	bne.n	8008334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	330c      	adds	r3, #12
 8008306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f023 0310 	bic.w	r3, r3, #16
 8008316:	647b      	str	r3, [r7, #68]	; 0x44
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	330c      	adds	r3, #12
 800831e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008320:	61ba      	str	r2, [r7, #24]
 8008322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008324:	6979      	ldr	r1, [r7, #20]
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	e841 2300 	strex	r3, r2, [r1]
 800832c:	613b      	str	r3, [r7, #16]
   return(result);
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e5      	bne.n	8008300 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2220      	movs	r2, #32
 8008338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008342:	bf00      	nop
 8008344:	3754      	adds	r7, #84	; 0x54
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff ff39 	bl	80081e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008376:	b480      	push	{r7}
 8008378:	b085      	sub	sp, #20
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b21      	cmp	r3, #33	; 0x21
 8008388:	d13e      	bne.n	8008408 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008392:	d114      	bne.n	80083be <UART_Transmit_IT+0x48>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d110      	bne.n	80083be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	1c9a      	adds	r2, r3, #2
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	621a      	str	r2, [r3, #32]
 80083bc:	e008      	b.n	80083d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	1c59      	adds	r1, r3, #1
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6211      	str	r1, [r2, #32]
 80083c8:	781a      	ldrb	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29b      	uxth	r3, r3
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	4619      	mov	r1, r3
 80083de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10f      	bne.n	8008404 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008402:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	e000      	b.n	800840a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008408:	2302      	movs	r3, #2
  }
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800842c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2220      	movs	r2, #32
 8008432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fb fafe 	bl	8003a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b08c      	sub	sp, #48	; 0x30
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b22      	cmp	r3, #34	; 0x22
 8008458:	f040 80ab 	bne.w	80085b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008464:	d117      	bne.n	8008496 <UART_Receive_IT+0x50>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d113      	bne.n	8008496 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008476:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008484:	b29a      	uxth	r2, r3
 8008486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008488:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	1c9a      	adds	r2, r3, #2
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	629a      	str	r2, [r3, #40]	; 0x28
 8008494:	e026      	b.n	80084e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a8:	d007      	beq.n	80084ba <UART_Receive_IT+0x74>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <UART_Receive_IT+0x82>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	e008      	b.n	80084da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	4619      	mov	r1, r3
 80084f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d15a      	bne.n	80085ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68da      	ldr	r2, [r3, #12]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0220 	bic.w	r2, r2, #32
 8008506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008516:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	695a      	ldr	r2, [r3, #20]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0201 	bic.w	r2, r2, #1
 8008526:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2220      	movs	r2, #32
 800852c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008534:	2b01      	cmp	r3, #1
 8008536:	d135      	bne.n	80085a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	330c      	adds	r3, #12
 8008544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	613b      	str	r3, [r7, #16]
   return(result);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f023 0310 	bic.w	r3, r3, #16
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	330c      	adds	r3, #12
 800855c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855e:	623a      	str	r2, [r7, #32]
 8008560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	69f9      	ldr	r1, [r7, #28]
 8008564:	6a3a      	ldr	r2, [r7, #32]
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	61bb      	str	r3, [r7, #24]
   return(result);
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e5      	bne.n	800853e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0310 	and.w	r3, r3, #16
 800857c:	2b10      	cmp	r3, #16
 800857e:	d10a      	bne.n	8008596 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff fe29 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
 80085a2:	e002      	b.n	80085aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7fb fa55 	bl	8003a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e002      	b.n	80085b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e000      	b.n	80085b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80085b2:	2302      	movs	r3, #2
  }
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3730      	adds	r7, #48	; 0x30
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085c0:	b0c0      	sub	sp, #256	; 0x100
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80085d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d8:	68d9      	ldr	r1, [r3, #12]
 80085da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	ea40 0301 	orr.w	r3, r0, r1
 80085e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	431a      	orrs	r2, r3
 80085f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008614:	f021 010c 	bic.w	r1, r1, #12
 8008618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008622:	430b      	orrs	r3, r1
 8008624:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008636:	6999      	ldr	r1, [r3, #24]
 8008638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	ea40 0301 	orr.w	r3, r0, r1
 8008642:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	4b8f      	ldr	r3, [pc, #572]	; (8008888 <UART_SetConfig+0x2cc>)
 800864c:	429a      	cmp	r2, r3
 800864e:	d005      	beq.n	800865c <UART_SetConfig+0xa0>
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	4b8d      	ldr	r3, [pc, #564]	; (800888c <UART_SetConfig+0x2d0>)
 8008658:	429a      	cmp	r2, r3
 800865a:	d104      	bne.n	8008666 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800865c:	f7fd fdc4 	bl	80061e8 <HAL_RCC_GetPCLK2Freq>
 8008660:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008664:	e003      	b.n	800866e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008666:	f7fd fdab 	bl	80061c0 <HAL_RCC_GetPCLK1Freq>
 800866a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800866e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008678:	f040 810c 	bne.w	8008894 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800867c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008680:	2200      	movs	r2, #0
 8008682:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008686:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800868a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800868e:	4622      	mov	r2, r4
 8008690:	462b      	mov	r3, r5
 8008692:	1891      	adds	r1, r2, r2
 8008694:	65b9      	str	r1, [r7, #88]	; 0x58
 8008696:	415b      	adcs	r3, r3
 8008698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800869a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800869e:	4621      	mov	r1, r4
 80086a0:	eb12 0801 	adds.w	r8, r2, r1
 80086a4:	4629      	mov	r1, r5
 80086a6:	eb43 0901 	adc.w	r9, r3, r1
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	f04f 0300 	mov.w	r3, #0
 80086b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086be:	4690      	mov	r8, r2
 80086c0:	4699      	mov	r9, r3
 80086c2:	4623      	mov	r3, r4
 80086c4:	eb18 0303 	adds.w	r3, r8, r3
 80086c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086cc:	462b      	mov	r3, r5
 80086ce:	eb49 0303 	adc.w	r3, r9, r3
 80086d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80086e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80086ea:	460b      	mov	r3, r1
 80086ec:	18db      	adds	r3, r3, r3
 80086ee:	653b      	str	r3, [r7, #80]	; 0x50
 80086f0:	4613      	mov	r3, r2
 80086f2:	eb42 0303 	adc.w	r3, r2, r3
 80086f6:	657b      	str	r3, [r7, #84]	; 0x54
 80086f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80086fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008700:	f7f8 fa64 	bl	8000bcc <__aeabi_uldivmod>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4b61      	ldr	r3, [pc, #388]	; (8008890 <UART_SetConfig+0x2d4>)
 800870a:	fba3 2302 	umull	r2, r3, r3, r2
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	011c      	lsls	r4, r3, #4
 8008712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008716:	2200      	movs	r2, #0
 8008718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800871c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008720:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008724:	4642      	mov	r2, r8
 8008726:	464b      	mov	r3, r9
 8008728:	1891      	adds	r1, r2, r2
 800872a:	64b9      	str	r1, [r7, #72]	; 0x48
 800872c:	415b      	adcs	r3, r3
 800872e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008734:	4641      	mov	r1, r8
 8008736:	eb12 0a01 	adds.w	sl, r2, r1
 800873a:	4649      	mov	r1, r9
 800873c:	eb43 0b01 	adc.w	fp, r3, r1
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	f04f 0300 	mov.w	r3, #0
 8008748:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800874c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008754:	4692      	mov	sl, r2
 8008756:	469b      	mov	fp, r3
 8008758:	4643      	mov	r3, r8
 800875a:	eb1a 0303 	adds.w	r3, sl, r3
 800875e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008762:	464b      	mov	r3, r9
 8008764:	eb4b 0303 	adc.w	r3, fp, r3
 8008768:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800876c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008778:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800877c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008780:	460b      	mov	r3, r1
 8008782:	18db      	adds	r3, r3, r3
 8008784:	643b      	str	r3, [r7, #64]	; 0x40
 8008786:	4613      	mov	r3, r2
 8008788:	eb42 0303 	adc.w	r3, r2, r3
 800878c:	647b      	str	r3, [r7, #68]	; 0x44
 800878e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008792:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008796:	f7f8 fa19 	bl	8000bcc <__aeabi_uldivmod>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4611      	mov	r1, r2
 80087a0:	4b3b      	ldr	r3, [pc, #236]	; (8008890 <UART_SetConfig+0x2d4>)
 80087a2:	fba3 2301 	umull	r2, r3, r3, r1
 80087a6:	095b      	lsrs	r3, r3, #5
 80087a8:	2264      	movs	r2, #100	; 0x64
 80087aa:	fb02 f303 	mul.w	r3, r2, r3
 80087ae:	1acb      	subs	r3, r1, r3
 80087b0:	00db      	lsls	r3, r3, #3
 80087b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80087b6:	4b36      	ldr	r3, [pc, #216]	; (8008890 <UART_SetConfig+0x2d4>)
 80087b8:	fba3 2302 	umull	r2, r3, r3, r2
 80087bc:	095b      	lsrs	r3, r3, #5
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087c4:	441c      	add	r4, r3
 80087c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80087d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	1891      	adds	r1, r2, r2
 80087de:	63b9      	str	r1, [r7, #56]	; 0x38
 80087e0:	415b      	adcs	r3, r3
 80087e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087e8:	4641      	mov	r1, r8
 80087ea:	1851      	adds	r1, r2, r1
 80087ec:	6339      	str	r1, [r7, #48]	; 0x30
 80087ee:	4649      	mov	r1, r9
 80087f0:	414b      	adcs	r3, r1
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	f04f 0300 	mov.w	r3, #0
 80087fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008800:	4659      	mov	r1, fp
 8008802:	00cb      	lsls	r3, r1, #3
 8008804:	4651      	mov	r1, sl
 8008806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800880a:	4651      	mov	r1, sl
 800880c:	00ca      	lsls	r2, r1, #3
 800880e:	4610      	mov	r0, r2
 8008810:	4619      	mov	r1, r3
 8008812:	4603      	mov	r3, r0
 8008814:	4642      	mov	r2, r8
 8008816:	189b      	adds	r3, r3, r2
 8008818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800881c:	464b      	mov	r3, r9
 800881e:	460a      	mov	r2, r1
 8008820:	eb42 0303 	adc.w	r3, r2, r3
 8008824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008834:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008838:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800883c:	460b      	mov	r3, r1
 800883e:	18db      	adds	r3, r3, r3
 8008840:	62bb      	str	r3, [r7, #40]	; 0x28
 8008842:	4613      	mov	r3, r2
 8008844:	eb42 0303 	adc.w	r3, r2, r3
 8008848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800884a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800884e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008852:	f7f8 f9bb 	bl	8000bcc <__aeabi_uldivmod>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <UART_SetConfig+0x2d4>)
 800885c:	fba3 1302 	umull	r1, r3, r3, r2
 8008860:	095b      	lsrs	r3, r3, #5
 8008862:	2164      	movs	r1, #100	; 0x64
 8008864:	fb01 f303 	mul.w	r3, r1, r3
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	3332      	adds	r3, #50	; 0x32
 800886e:	4a08      	ldr	r2, [pc, #32]	; (8008890 <UART_SetConfig+0x2d4>)
 8008870:	fba2 2303 	umull	r2, r3, r2, r3
 8008874:	095b      	lsrs	r3, r3, #5
 8008876:	f003 0207 	and.w	r2, r3, #7
 800887a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4422      	add	r2, r4
 8008882:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008884:	e105      	b.n	8008a92 <UART_SetConfig+0x4d6>
 8008886:	bf00      	nop
 8008888:	40011000 	.word	0x40011000
 800888c:	40011400 	.word	0x40011400
 8008890:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008898:	2200      	movs	r2, #0
 800889a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800889e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80088a6:	4642      	mov	r2, r8
 80088a8:	464b      	mov	r3, r9
 80088aa:	1891      	adds	r1, r2, r2
 80088ac:	6239      	str	r1, [r7, #32]
 80088ae:	415b      	adcs	r3, r3
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
 80088b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088b6:	4641      	mov	r1, r8
 80088b8:	1854      	adds	r4, r2, r1
 80088ba:	4649      	mov	r1, r9
 80088bc:	eb43 0501 	adc.w	r5, r3, r1
 80088c0:	f04f 0200 	mov.w	r2, #0
 80088c4:	f04f 0300 	mov.w	r3, #0
 80088c8:	00eb      	lsls	r3, r5, #3
 80088ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088ce:	00e2      	lsls	r2, r4, #3
 80088d0:	4614      	mov	r4, r2
 80088d2:	461d      	mov	r5, r3
 80088d4:	4643      	mov	r3, r8
 80088d6:	18e3      	adds	r3, r4, r3
 80088d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088dc:	464b      	mov	r3, r9
 80088de:	eb45 0303 	adc.w	r3, r5, r3
 80088e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088f6:	f04f 0200 	mov.w	r2, #0
 80088fa:	f04f 0300 	mov.w	r3, #0
 80088fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008902:	4629      	mov	r1, r5
 8008904:	008b      	lsls	r3, r1, #2
 8008906:	4621      	mov	r1, r4
 8008908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800890c:	4621      	mov	r1, r4
 800890e:	008a      	lsls	r2, r1, #2
 8008910:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008914:	f7f8 f95a 	bl	8000bcc <__aeabi_uldivmod>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4b60      	ldr	r3, [pc, #384]	; (8008aa0 <UART_SetConfig+0x4e4>)
 800891e:	fba3 2302 	umull	r2, r3, r3, r2
 8008922:	095b      	lsrs	r3, r3, #5
 8008924:	011c      	lsls	r4, r3, #4
 8008926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800892a:	2200      	movs	r2, #0
 800892c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008930:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008934:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008938:	4642      	mov	r2, r8
 800893a:	464b      	mov	r3, r9
 800893c:	1891      	adds	r1, r2, r2
 800893e:	61b9      	str	r1, [r7, #24]
 8008940:	415b      	adcs	r3, r3
 8008942:	61fb      	str	r3, [r7, #28]
 8008944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008948:	4641      	mov	r1, r8
 800894a:	1851      	adds	r1, r2, r1
 800894c:	6139      	str	r1, [r7, #16]
 800894e:	4649      	mov	r1, r9
 8008950:	414b      	adcs	r3, r1
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008960:	4659      	mov	r1, fp
 8008962:	00cb      	lsls	r3, r1, #3
 8008964:	4651      	mov	r1, sl
 8008966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800896a:	4651      	mov	r1, sl
 800896c:	00ca      	lsls	r2, r1, #3
 800896e:	4610      	mov	r0, r2
 8008970:	4619      	mov	r1, r3
 8008972:	4603      	mov	r3, r0
 8008974:	4642      	mov	r2, r8
 8008976:	189b      	adds	r3, r3, r2
 8008978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800897c:	464b      	mov	r3, r9
 800897e:	460a      	mov	r2, r1
 8008980:	eb42 0303 	adc.w	r3, r2, r3
 8008984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	67bb      	str	r3, [r7, #120]	; 0x78
 8008992:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80089a0:	4649      	mov	r1, r9
 80089a2:	008b      	lsls	r3, r1, #2
 80089a4:	4641      	mov	r1, r8
 80089a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089aa:	4641      	mov	r1, r8
 80089ac:	008a      	lsls	r2, r1, #2
 80089ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80089b2:	f7f8 f90b 	bl	8000bcc <__aeabi_uldivmod>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4b39      	ldr	r3, [pc, #228]	; (8008aa0 <UART_SetConfig+0x4e4>)
 80089bc:	fba3 1302 	umull	r1, r3, r3, r2
 80089c0:	095b      	lsrs	r3, r3, #5
 80089c2:	2164      	movs	r1, #100	; 0x64
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	3332      	adds	r3, #50	; 0x32
 80089ce:	4a34      	ldr	r2, [pc, #208]	; (8008aa0 <UART_SetConfig+0x4e4>)
 80089d0:	fba2 2303 	umull	r2, r3, r2, r3
 80089d4:	095b      	lsrs	r3, r3, #5
 80089d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089da:	441c      	add	r4, r3
 80089dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089e0:	2200      	movs	r2, #0
 80089e2:	673b      	str	r3, [r7, #112]	; 0x70
 80089e4:	677a      	str	r2, [r7, #116]	; 0x74
 80089e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80089ea:	4642      	mov	r2, r8
 80089ec:	464b      	mov	r3, r9
 80089ee:	1891      	adds	r1, r2, r2
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	415b      	adcs	r3, r3
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089fa:	4641      	mov	r1, r8
 80089fc:	1851      	adds	r1, r2, r1
 80089fe:	6039      	str	r1, [r7, #0]
 8008a00:	4649      	mov	r1, r9
 8008a02:	414b      	adcs	r3, r1
 8008a04:	607b      	str	r3, [r7, #4]
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	f04f 0300 	mov.w	r3, #0
 8008a0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a12:	4659      	mov	r1, fp
 8008a14:	00cb      	lsls	r3, r1, #3
 8008a16:	4651      	mov	r1, sl
 8008a18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a1c:	4651      	mov	r1, sl
 8008a1e:	00ca      	lsls	r2, r1, #3
 8008a20:	4610      	mov	r0, r2
 8008a22:	4619      	mov	r1, r3
 8008a24:	4603      	mov	r3, r0
 8008a26:	4642      	mov	r2, r8
 8008a28:	189b      	adds	r3, r3, r2
 8008a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a2c:	464b      	mov	r3, r9
 8008a2e:	460a      	mov	r2, r1
 8008a30:	eb42 0303 	adc.w	r3, r2, r3
 8008a34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	663b      	str	r3, [r7, #96]	; 0x60
 8008a40:	667a      	str	r2, [r7, #100]	; 0x64
 8008a42:	f04f 0200 	mov.w	r2, #0
 8008a46:	f04f 0300 	mov.w	r3, #0
 8008a4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a4e:	4649      	mov	r1, r9
 8008a50:	008b      	lsls	r3, r1, #2
 8008a52:	4641      	mov	r1, r8
 8008a54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a58:	4641      	mov	r1, r8
 8008a5a:	008a      	lsls	r2, r1, #2
 8008a5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008a60:	f7f8 f8b4 	bl	8000bcc <__aeabi_uldivmod>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <UART_SetConfig+0x4e4>)
 8008a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8008a6e:	095b      	lsrs	r3, r3, #5
 8008a70:	2164      	movs	r1, #100	; 0x64
 8008a72:	fb01 f303 	mul.w	r3, r1, r3
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	3332      	adds	r3, #50	; 0x32
 8008a7c:	4a08      	ldr	r2, [pc, #32]	; (8008aa0 <UART_SetConfig+0x4e4>)
 8008a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a82:	095b      	lsrs	r3, r3, #5
 8008a84:	f003 020f 	and.w	r2, r3, #15
 8008a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4422      	add	r2, r4
 8008a90:	609a      	str	r2, [r3, #8]
}
 8008a92:	bf00      	nop
 8008a94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a9e:	bf00      	nop
 8008aa0:	51eb851f 	.word	0x51eb851f

08008aa4 <__errno>:
 8008aa4:	4b01      	ldr	r3, [pc, #4]	; (8008aac <__errno+0x8>)
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	20000050 	.word	0x20000050

08008ab0 <__libc_init_array>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	4d0d      	ldr	r5, [pc, #52]	; (8008ae8 <__libc_init_array+0x38>)
 8008ab4:	4c0d      	ldr	r4, [pc, #52]	; (8008aec <__libc_init_array+0x3c>)
 8008ab6:	1b64      	subs	r4, r4, r5
 8008ab8:	10a4      	asrs	r4, r4, #2
 8008aba:	2600      	movs	r6, #0
 8008abc:	42a6      	cmp	r6, r4
 8008abe:	d109      	bne.n	8008ad4 <__libc_init_array+0x24>
 8008ac0:	4d0b      	ldr	r5, [pc, #44]	; (8008af0 <__libc_init_array+0x40>)
 8008ac2:	4c0c      	ldr	r4, [pc, #48]	; (8008af4 <__libc_init_array+0x44>)
 8008ac4:	f000 ff06 	bl	80098d4 <_init>
 8008ac8:	1b64      	subs	r4, r4, r5
 8008aca:	10a4      	asrs	r4, r4, #2
 8008acc:	2600      	movs	r6, #0
 8008ace:	42a6      	cmp	r6, r4
 8008ad0:	d105      	bne.n	8008ade <__libc_init_array+0x2e>
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad8:	4798      	blx	r3
 8008ada:	3601      	adds	r6, #1
 8008adc:	e7ee      	b.n	8008abc <__libc_init_array+0xc>
 8008ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae2:	4798      	blx	r3
 8008ae4:	3601      	adds	r6, #1
 8008ae6:	e7f2      	b.n	8008ace <__libc_init_array+0x1e>
 8008ae8:	080099d8 	.word	0x080099d8
 8008aec:	080099d8 	.word	0x080099d8
 8008af0:	080099d8 	.word	0x080099d8
 8008af4:	080099dc 	.word	0x080099dc

08008af8 <memset>:
 8008af8:	4402      	add	r2, r0
 8008afa:	4603      	mov	r3, r0
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d100      	bne.n	8008b02 <memset+0xa>
 8008b00:	4770      	bx	lr
 8008b02:	f803 1b01 	strb.w	r1, [r3], #1
 8008b06:	e7f9      	b.n	8008afc <memset+0x4>

08008b08 <siprintf>:
 8008b08:	b40e      	push	{r1, r2, r3}
 8008b0a:	b500      	push	{lr}
 8008b0c:	b09c      	sub	sp, #112	; 0x70
 8008b0e:	ab1d      	add	r3, sp, #116	; 0x74
 8008b10:	9002      	str	r0, [sp, #8]
 8008b12:	9006      	str	r0, [sp, #24]
 8008b14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b18:	4809      	ldr	r0, [pc, #36]	; (8008b40 <siprintf+0x38>)
 8008b1a:	9107      	str	r1, [sp, #28]
 8008b1c:	9104      	str	r1, [sp, #16]
 8008b1e:	4909      	ldr	r1, [pc, #36]	; (8008b44 <siprintf+0x3c>)
 8008b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b24:	9105      	str	r1, [sp, #20]
 8008b26:	6800      	ldr	r0, [r0, #0]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	a902      	add	r1, sp, #8
 8008b2c:	f000 f868 	bl	8008c00 <_svfiprintf_r>
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	b01c      	add	sp, #112	; 0x70
 8008b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b3c:	b003      	add	sp, #12
 8008b3e:	4770      	bx	lr
 8008b40:	20000050 	.word	0x20000050
 8008b44:	ffff0208 	.word	0xffff0208

08008b48 <__ssputs_r>:
 8008b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	688e      	ldr	r6, [r1, #8]
 8008b4e:	429e      	cmp	r6, r3
 8008b50:	4682      	mov	sl, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	4690      	mov	r8, r2
 8008b56:	461f      	mov	r7, r3
 8008b58:	d838      	bhi.n	8008bcc <__ssputs_r+0x84>
 8008b5a:	898a      	ldrh	r2, [r1, #12]
 8008b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b60:	d032      	beq.n	8008bc8 <__ssputs_r+0x80>
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	6909      	ldr	r1, [r1, #16]
 8008b66:	eba5 0901 	sub.w	r9, r5, r1
 8008b6a:	6965      	ldr	r5, [r4, #20]
 8008b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b74:	3301      	adds	r3, #1
 8008b76:	444b      	add	r3, r9
 8008b78:	106d      	asrs	r5, r5, #1
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	bf38      	it	cc
 8008b7e:	461d      	movcc	r5, r3
 8008b80:	0553      	lsls	r3, r2, #21
 8008b82:	d531      	bpl.n	8008be8 <__ssputs_r+0xa0>
 8008b84:	4629      	mov	r1, r5
 8008b86:	f000 fb63 	bl	8009250 <_malloc_r>
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	b950      	cbnz	r0, 8008ba4 <__ssputs_r+0x5c>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	f8ca 3000 	str.w	r3, [sl]
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba4:	6921      	ldr	r1, [r4, #16]
 8008ba6:	464a      	mov	r2, r9
 8008ba8:	f000 fabe 	bl	8009128 <memcpy>
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	6126      	str	r6, [r4, #16]
 8008bba:	6165      	str	r5, [r4, #20]
 8008bbc:	444e      	add	r6, r9
 8008bbe:	eba5 0509 	sub.w	r5, r5, r9
 8008bc2:	6026      	str	r6, [r4, #0]
 8008bc4:	60a5      	str	r5, [r4, #8]
 8008bc6:	463e      	mov	r6, r7
 8008bc8:	42be      	cmp	r6, r7
 8008bca:	d900      	bls.n	8008bce <__ssputs_r+0x86>
 8008bcc:	463e      	mov	r6, r7
 8008bce:	6820      	ldr	r0, [r4, #0]
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	4641      	mov	r1, r8
 8008bd4:	f000 fab6 	bl	8009144 <memmove>
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	1b9b      	subs	r3, r3, r6
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	4433      	add	r3, r6
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	2000      	movs	r0, #0
 8008be6:	e7db      	b.n	8008ba0 <__ssputs_r+0x58>
 8008be8:	462a      	mov	r2, r5
 8008bea:	f000 fba5 	bl	8009338 <_realloc_r>
 8008bee:	4606      	mov	r6, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d1e1      	bne.n	8008bb8 <__ssputs_r+0x70>
 8008bf4:	6921      	ldr	r1, [r4, #16]
 8008bf6:	4650      	mov	r0, sl
 8008bf8:	f000 fabe 	bl	8009178 <_free_r>
 8008bfc:	e7c7      	b.n	8008b8e <__ssputs_r+0x46>
	...

08008c00 <_svfiprintf_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	4698      	mov	r8, r3
 8008c06:	898b      	ldrh	r3, [r1, #12]
 8008c08:	061b      	lsls	r3, r3, #24
 8008c0a:	b09d      	sub	sp, #116	; 0x74
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	d50e      	bpl.n	8008c32 <_svfiprintf_r+0x32>
 8008c14:	690b      	ldr	r3, [r1, #16]
 8008c16:	b963      	cbnz	r3, 8008c32 <_svfiprintf_r+0x32>
 8008c18:	2140      	movs	r1, #64	; 0x40
 8008c1a:	f000 fb19 	bl	8009250 <_malloc_r>
 8008c1e:	6028      	str	r0, [r5, #0]
 8008c20:	6128      	str	r0, [r5, #16]
 8008c22:	b920      	cbnz	r0, 8008c2e <_svfiprintf_r+0x2e>
 8008c24:	230c      	movs	r3, #12
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c2c:	e0d1      	b.n	8008dd2 <_svfiprintf_r+0x1d2>
 8008c2e:	2340      	movs	r3, #64	; 0x40
 8008c30:	616b      	str	r3, [r5, #20]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9309      	str	r3, [sp, #36]	; 0x24
 8008c36:	2320      	movs	r3, #32
 8008c38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c40:	2330      	movs	r3, #48	; 0x30
 8008c42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008dec <_svfiprintf_r+0x1ec>
 8008c46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c4a:	f04f 0901 	mov.w	r9, #1
 8008c4e:	4623      	mov	r3, r4
 8008c50:	469a      	mov	sl, r3
 8008c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c56:	b10a      	cbz	r2, 8008c5c <_svfiprintf_r+0x5c>
 8008c58:	2a25      	cmp	r2, #37	; 0x25
 8008c5a:	d1f9      	bne.n	8008c50 <_svfiprintf_r+0x50>
 8008c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c60:	d00b      	beq.n	8008c7a <_svfiprintf_r+0x7a>
 8008c62:	465b      	mov	r3, fp
 8008c64:	4622      	mov	r2, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f7ff ff6d 	bl	8008b48 <__ssputs_r>
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f000 80aa 	beq.w	8008dc8 <_svfiprintf_r+0x1c8>
 8008c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c76:	445a      	add	r2, fp
 8008c78:	9209      	str	r2, [sp, #36]	; 0x24
 8008c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 80a2 	beq.w	8008dc8 <_svfiprintf_r+0x1c8>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c8e:	f10a 0a01 	add.w	sl, sl, #1
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	9307      	str	r3, [sp, #28]
 8008c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c9c:	4654      	mov	r4, sl
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	4851      	ldr	r0, [pc, #324]	; (8008dec <_svfiprintf_r+0x1ec>)
 8008ca6:	f7f7 fa9b 	bl	80001e0 <memchr>
 8008caa:	9a04      	ldr	r2, [sp, #16]
 8008cac:	b9d8      	cbnz	r0, 8008ce6 <_svfiprintf_r+0xe6>
 8008cae:	06d0      	lsls	r0, r2, #27
 8008cb0:	bf44      	itt	mi
 8008cb2:	2320      	movmi	r3, #32
 8008cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb8:	0711      	lsls	r1, r2, #28
 8008cba:	bf44      	itt	mi
 8008cbc:	232b      	movmi	r3, #43	; 0x2b
 8008cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc8:	d015      	beq.n	8008cf6 <_svfiprintf_r+0xf6>
 8008cca:	9a07      	ldr	r2, [sp, #28]
 8008ccc:	4654      	mov	r4, sl
 8008cce:	2000      	movs	r0, #0
 8008cd0:	f04f 0c0a 	mov.w	ip, #10
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cda:	3b30      	subs	r3, #48	; 0x30
 8008cdc:	2b09      	cmp	r3, #9
 8008cde:	d94e      	bls.n	8008d7e <_svfiprintf_r+0x17e>
 8008ce0:	b1b0      	cbz	r0, 8008d10 <_svfiprintf_r+0x110>
 8008ce2:	9207      	str	r2, [sp, #28]
 8008ce4:	e014      	b.n	8008d10 <_svfiprintf_r+0x110>
 8008ce6:	eba0 0308 	sub.w	r3, r0, r8
 8008cea:	fa09 f303 	lsl.w	r3, r9, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	46a2      	mov	sl, r4
 8008cf4:	e7d2      	b.n	8008c9c <_svfiprintf_r+0x9c>
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	1d19      	adds	r1, r3, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	9103      	str	r1, [sp, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bfbb      	ittet	lt
 8008d02:	425b      	neglt	r3, r3
 8008d04:	f042 0202 	orrlt.w	r2, r2, #2
 8008d08:	9307      	strge	r3, [sp, #28]
 8008d0a:	9307      	strlt	r3, [sp, #28]
 8008d0c:	bfb8      	it	lt
 8008d0e:	9204      	strlt	r2, [sp, #16]
 8008d10:	7823      	ldrb	r3, [r4, #0]
 8008d12:	2b2e      	cmp	r3, #46	; 0x2e
 8008d14:	d10c      	bne.n	8008d30 <_svfiprintf_r+0x130>
 8008d16:	7863      	ldrb	r3, [r4, #1]
 8008d18:	2b2a      	cmp	r3, #42	; 0x2a
 8008d1a:	d135      	bne.n	8008d88 <_svfiprintf_r+0x188>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	1d1a      	adds	r2, r3, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	9203      	str	r2, [sp, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	bfb8      	it	lt
 8008d28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d2c:	3402      	adds	r4, #2
 8008d2e:	9305      	str	r3, [sp, #20]
 8008d30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008dfc <_svfiprintf_r+0x1fc>
 8008d34:	7821      	ldrb	r1, [r4, #0]
 8008d36:	2203      	movs	r2, #3
 8008d38:	4650      	mov	r0, sl
 8008d3a:	f7f7 fa51 	bl	80001e0 <memchr>
 8008d3e:	b140      	cbz	r0, 8008d52 <_svfiprintf_r+0x152>
 8008d40:	2340      	movs	r3, #64	; 0x40
 8008d42:	eba0 000a 	sub.w	r0, r0, sl
 8008d46:	fa03 f000 	lsl.w	r0, r3, r0
 8008d4a:	9b04      	ldr	r3, [sp, #16]
 8008d4c:	4303      	orrs	r3, r0
 8008d4e:	3401      	adds	r4, #1
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d56:	4826      	ldr	r0, [pc, #152]	; (8008df0 <_svfiprintf_r+0x1f0>)
 8008d58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d5c:	2206      	movs	r2, #6
 8008d5e:	f7f7 fa3f 	bl	80001e0 <memchr>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d038      	beq.n	8008dd8 <_svfiprintf_r+0x1d8>
 8008d66:	4b23      	ldr	r3, [pc, #140]	; (8008df4 <_svfiprintf_r+0x1f4>)
 8008d68:	bb1b      	cbnz	r3, 8008db2 <_svfiprintf_r+0x1b2>
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	3307      	adds	r3, #7
 8008d6e:	f023 0307 	bic.w	r3, r3, #7
 8008d72:	3308      	adds	r3, #8
 8008d74:	9303      	str	r3, [sp, #12]
 8008d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d78:	4433      	add	r3, r6
 8008d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7c:	e767      	b.n	8008c4e <_svfiprintf_r+0x4e>
 8008d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d82:	460c      	mov	r4, r1
 8008d84:	2001      	movs	r0, #1
 8008d86:	e7a5      	b.n	8008cd4 <_svfiprintf_r+0xd4>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	3401      	adds	r4, #1
 8008d8c:	9305      	str	r3, [sp, #20]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	f04f 0c0a 	mov.w	ip, #10
 8008d94:	4620      	mov	r0, r4
 8008d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d9a:	3a30      	subs	r2, #48	; 0x30
 8008d9c:	2a09      	cmp	r2, #9
 8008d9e:	d903      	bls.n	8008da8 <_svfiprintf_r+0x1a8>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0c5      	beq.n	8008d30 <_svfiprintf_r+0x130>
 8008da4:	9105      	str	r1, [sp, #20]
 8008da6:	e7c3      	b.n	8008d30 <_svfiprintf_r+0x130>
 8008da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dac:	4604      	mov	r4, r0
 8008dae:	2301      	movs	r3, #1
 8008db0:	e7f0      	b.n	8008d94 <_svfiprintf_r+0x194>
 8008db2:	ab03      	add	r3, sp, #12
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	462a      	mov	r2, r5
 8008db8:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <_svfiprintf_r+0x1f8>)
 8008dba:	a904      	add	r1, sp, #16
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	f3af 8000 	nop.w
 8008dc2:	1c42      	adds	r2, r0, #1
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	d1d6      	bne.n	8008d76 <_svfiprintf_r+0x176>
 8008dc8:	89ab      	ldrh	r3, [r5, #12]
 8008dca:	065b      	lsls	r3, r3, #25
 8008dcc:	f53f af2c 	bmi.w	8008c28 <_svfiprintf_r+0x28>
 8008dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dd2:	b01d      	add	sp, #116	; 0x74
 8008dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd8:	ab03      	add	r3, sp, #12
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	462a      	mov	r2, r5
 8008dde:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <_svfiprintf_r+0x1f8>)
 8008de0:	a904      	add	r1, sp, #16
 8008de2:	4638      	mov	r0, r7
 8008de4:	f000 f87a 	bl	8008edc <_printf_i>
 8008de8:	e7eb      	b.n	8008dc2 <_svfiprintf_r+0x1c2>
 8008dea:	bf00      	nop
 8008dec:	08009928 	.word	0x08009928
 8008df0:	08009932 	.word	0x08009932
 8008df4:	00000000 	.word	0x00000000
 8008df8:	08008b49 	.word	0x08008b49
 8008dfc:	0800992e 	.word	0x0800992e

08008e00 <_printf_common>:
 8008e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e04:	4616      	mov	r6, r2
 8008e06:	4699      	mov	r9, r3
 8008e08:	688a      	ldr	r2, [r1, #8]
 8008e0a:	690b      	ldr	r3, [r1, #16]
 8008e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	bfb8      	it	lt
 8008e14:	4613      	movlt	r3, r2
 8008e16:	6033      	str	r3, [r6, #0]
 8008e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e1c:	4607      	mov	r7, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	b10a      	cbz	r2, 8008e26 <_printf_common+0x26>
 8008e22:	3301      	adds	r3, #1
 8008e24:	6033      	str	r3, [r6, #0]
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	0699      	lsls	r1, r3, #26
 8008e2a:	bf42      	ittt	mi
 8008e2c:	6833      	ldrmi	r3, [r6, #0]
 8008e2e:	3302      	addmi	r3, #2
 8008e30:	6033      	strmi	r3, [r6, #0]
 8008e32:	6825      	ldr	r5, [r4, #0]
 8008e34:	f015 0506 	ands.w	r5, r5, #6
 8008e38:	d106      	bne.n	8008e48 <_printf_common+0x48>
 8008e3a:	f104 0a19 	add.w	sl, r4, #25
 8008e3e:	68e3      	ldr	r3, [r4, #12]
 8008e40:	6832      	ldr	r2, [r6, #0]
 8008e42:	1a9b      	subs	r3, r3, r2
 8008e44:	42ab      	cmp	r3, r5
 8008e46:	dc26      	bgt.n	8008e96 <_printf_common+0x96>
 8008e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e4c:	1e13      	subs	r3, r2, #0
 8008e4e:	6822      	ldr	r2, [r4, #0]
 8008e50:	bf18      	it	ne
 8008e52:	2301      	movne	r3, #1
 8008e54:	0692      	lsls	r2, r2, #26
 8008e56:	d42b      	bmi.n	8008eb0 <_printf_common+0xb0>
 8008e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	4638      	mov	r0, r7
 8008e60:	47c0      	blx	r8
 8008e62:	3001      	adds	r0, #1
 8008e64:	d01e      	beq.n	8008ea4 <_printf_common+0xa4>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	68e5      	ldr	r5, [r4, #12]
 8008e6a:	6832      	ldr	r2, [r6, #0]
 8008e6c:	f003 0306 	and.w	r3, r3, #6
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	bf08      	it	eq
 8008e74:	1aad      	subeq	r5, r5, r2
 8008e76:	68a3      	ldr	r3, [r4, #8]
 8008e78:	6922      	ldr	r2, [r4, #16]
 8008e7a:	bf0c      	ite	eq
 8008e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e80:	2500      	movne	r5, #0
 8008e82:	4293      	cmp	r3, r2
 8008e84:	bfc4      	itt	gt
 8008e86:	1a9b      	subgt	r3, r3, r2
 8008e88:	18ed      	addgt	r5, r5, r3
 8008e8a:	2600      	movs	r6, #0
 8008e8c:	341a      	adds	r4, #26
 8008e8e:	42b5      	cmp	r5, r6
 8008e90:	d11a      	bne.n	8008ec8 <_printf_common+0xc8>
 8008e92:	2000      	movs	r0, #0
 8008e94:	e008      	b.n	8008ea8 <_printf_common+0xa8>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4652      	mov	r2, sl
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	47c0      	blx	r8
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d103      	bne.n	8008eac <_printf_common+0xac>
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eac:	3501      	adds	r5, #1
 8008eae:	e7c6      	b.n	8008e3e <_printf_common+0x3e>
 8008eb0:	18e1      	adds	r1, r4, r3
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	2030      	movs	r0, #48	; 0x30
 8008eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eba:	4422      	add	r2, r4
 8008ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ec4:	3302      	adds	r3, #2
 8008ec6:	e7c7      	b.n	8008e58 <_printf_common+0x58>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4622      	mov	r2, r4
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4638      	mov	r0, r7
 8008ed0:	47c0      	blx	r8
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	d0e6      	beq.n	8008ea4 <_printf_common+0xa4>
 8008ed6:	3601      	adds	r6, #1
 8008ed8:	e7d9      	b.n	8008e8e <_printf_common+0x8e>
	...

08008edc <_printf_i>:
 8008edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	7e0f      	ldrb	r7, [r1, #24]
 8008ee2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ee4:	2f78      	cmp	r7, #120	; 0x78
 8008ee6:	4691      	mov	r9, r2
 8008ee8:	4680      	mov	r8, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	469a      	mov	sl, r3
 8008eee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ef2:	d807      	bhi.n	8008f04 <_printf_i+0x28>
 8008ef4:	2f62      	cmp	r7, #98	; 0x62
 8008ef6:	d80a      	bhi.n	8008f0e <_printf_i+0x32>
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	f000 80d8 	beq.w	80090ae <_printf_i+0x1d2>
 8008efe:	2f58      	cmp	r7, #88	; 0x58
 8008f00:	f000 80a3 	beq.w	800904a <_printf_i+0x16e>
 8008f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f0c:	e03a      	b.n	8008f84 <_printf_i+0xa8>
 8008f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f12:	2b15      	cmp	r3, #21
 8008f14:	d8f6      	bhi.n	8008f04 <_printf_i+0x28>
 8008f16:	a101      	add	r1, pc, #4	; (adr r1, 8008f1c <_printf_i+0x40>)
 8008f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f1c:	08008f75 	.word	0x08008f75
 8008f20:	08008f89 	.word	0x08008f89
 8008f24:	08008f05 	.word	0x08008f05
 8008f28:	08008f05 	.word	0x08008f05
 8008f2c:	08008f05 	.word	0x08008f05
 8008f30:	08008f05 	.word	0x08008f05
 8008f34:	08008f89 	.word	0x08008f89
 8008f38:	08008f05 	.word	0x08008f05
 8008f3c:	08008f05 	.word	0x08008f05
 8008f40:	08008f05 	.word	0x08008f05
 8008f44:	08008f05 	.word	0x08008f05
 8008f48:	08009095 	.word	0x08009095
 8008f4c:	08008fb9 	.word	0x08008fb9
 8008f50:	08009077 	.word	0x08009077
 8008f54:	08008f05 	.word	0x08008f05
 8008f58:	08008f05 	.word	0x08008f05
 8008f5c:	080090b7 	.word	0x080090b7
 8008f60:	08008f05 	.word	0x08008f05
 8008f64:	08008fb9 	.word	0x08008fb9
 8008f68:	08008f05 	.word	0x08008f05
 8008f6c:	08008f05 	.word	0x08008f05
 8008f70:	0800907f 	.word	0x0800907f
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	1d1a      	adds	r2, r3, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	602a      	str	r2, [r5, #0]
 8008f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f84:	2301      	movs	r3, #1
 8008f86:	e0a3      	b.n	80090d0 <_printf_i+0x1f4>
 8008f88:	6820      	ldr	r0, [r4, #0]
 8008f8a:	6829      	ldr	r1, [r5, #0]
 8008f8c:	0606      	lsls	r6, r0, #24
 8008f8e:	f101 0304 	add.w	r3, r1, #4
 8008f92:	d50a      	bpl.n	8008faa <_printf_i+0xce>
 8008f94:	680e      	ldr	r6, [r1, #0]
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	2e00      	cmp	r6, #0
 8008f9a:	da03      	bge.n	8008fa4 <_printf_i+0xc8>
 8008f9c:	232d      	movs	r3, #45	; 0x2d
 8008f9e:	4276      	negs	r6, r6
 8008fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa4:	485e      	ldr	r0, [pc, #376]	; (8009120 <_printf_i+0x244>)
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	e019      	b.n	8008fde <_printf_i+0x102>
 8008faa:	680e      	ldr	r6, [r1, #0]
 8008fac:	602b      	str	r3, [r5, #0]
 8008fae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fb2:	bf18      	it	ne
 8008fb4:	b236      	sxthne	r6, r6
 8008fb6:	e7ef      	b.n	8008f98 <_printf_i+0xbc>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	6820      	ldr	r0, [r4, #0]
 8008fbc:	1d19      	adds	r1, r3, #4
 8008fbe:	6029      	str	r1, [r5, #0]
 8008fc0:	0601      	lsls	r1, r0, #24
 8008fc2:	d501      	bpl.n	8008fc8 <_printf_i+0xec>
 8008fc4:	681e      	ldr	r6, [r3, #0]
 8008fc6:	e002      	b.n	8008fce <_printf_i+0xf2>
 8008fc8:	0646      	lsls	r6, r0, #25
 8008fca:	d5fb      	bpl.n	8008fc4 <_printf_i+0xe8>
 8008fcc:	881e      	ldrh	r6, [r3, #0]
 8008fce:	4854      	ldr	r0, [pc, #336]	; (8009120 <_printf_i+0x244>)
 8008fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2308      	moveq	r3, #8
 8008fd6:	230a      	movne	r3, #10
 8008fd8:	2100      	movs	r1, #0
 8008fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fde:	6865      	ldr	r5, [r4, #4]
 8008fe0:	60a5      	str	r5, [r4, #8]
 8008fe2:	2d00      	cmp	r5, #0
 8008fe4:	bfa2      	ittt	ge
 8008fe6:	6821      	ldrge	r1, [r4, #0]
 8008fe8:	f021 0104 	bicge.w	r1, r1, #4
 8008fec:	6021      	strge	r1, [r4, #0]
 8008fee:	b90e      	cbnz	r6, 8008ff4 <_printf_i+0x118>
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	d04d      	beq.n	8009090 <_printf_i+0x1b4>
 8008ff4:	4615      	mov	r5, r2
 8008ff6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ffa:	fb03 6711 	mls	r7, r3, r1, r6
 8008ffe:	5dc7      	ldrb	r7, [r0, r7]
 8009000:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009004:	4637      	mov	r7, r6
 8009006:	42bb      	cmp	r3, r7
 8009008:	460e      	mov	r6, r1
 800900a:	d9f4      	bls.n	8008ff6 <_printf_i+0x11a>
 800900c:	2b08      	cmp	r3, #8
 800900e:	d10b      	bne.n	8009028 <_printf_i+0x14c>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	07de      	lsls	r6, r3, #31
 8009014:	d508      	bpl.n	8009028 <_printf_i+0x14c>
 8009016:	6923      	ldr	r3, [r4, #16]
 8009018:	6861      	ldr	r1, [r4, #4]
 800901a:	4299      	cmp	r1, r3
 800901c:	bfde      	ittt	le
 800901e:	2330      	movle	r3, #48	; 0x30
 8009020:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009024:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009028:	1b52      	subs	r2, r2, r5
 800902a:	6122      	str	r2, [r4, #16]
 800902c:	f8cd a000 	str.w	sl, [sp]
 8009030:	464b      	mov	r3, r9
 8009032:	aa03      	add	r2, sp, #12
 8009034:	4621      	mov	r1, r4
 8009036:	4640      	mov	r0, r8
 8009038:	f7ff fee2 	bl	8008e00 <_printf_common>
 800903c:	3001      	adds	r0, #1
 800903e:	d14c      	bne.n	80090da <_printf_i+0x1fe>
 8009040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009044:	b004      	add	sp, #16
 8009046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904a:	4835      	ldr	r0, [pc, #212]	; (8009120 <_printf_i+0x244>)
 800904c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009050:	6829      	ldr	r1, [r5, #0]
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	f851 6b04 	ldr.w	r6, [r1], #4
 8009058:	6029      	str	r1, [r5, #0]
 800905a:	061d      	lsls	r5, r3, #24
 800905c:	d514      	bpl.n	8009088 <_printf_i+0x1ac>
 800905e:	07df      	lsls	r7, r3, #31
 8009060:	bf44      	itt	mi
 8009062:	f043 0320 	orrmi.w	r3, r3, #32
 8009066:	6023      	strmi	r3, [r4, #0]
 8009068:	b91e      	cbnz	r6, 8009072 <_printf_i+0x196>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	f023 0320 	bic.w	r3, r3, #32
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	2310      	movs	r3, #16
 8009074:	e7b0      	b.n	8008fd8 <_printf_i+0xfc>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	f043 0320 	orr.w	r3, r3, #32
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	2378      	movs	r3, #120	; 0x78
 8009080:	4828      	ldr	r0, [pc, #160]	; (8009124 <_printf_i+0x248>)
 8009082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009086:	e7e3      	b.n	8009050 <_printf_i+0x174>
 8009088:	0659      	lsls	r1, r3, #25
 800908a:	bf48      	it	mi
 800908c:	b2b6      	uxthmi	r6, r6
 800908e:	e7e6      	b.n	800905e <_printf_i+0x182>
 8009090:	4615      	mov	r5, r2
 8009092:	e7bb      	b.n	800900c <_printf_i+0x130>
 8009094:	682b      	ldr	r3, [r5, #0]
 8009096:	6826      	ldr	r6, [r4, #0]
 8009098:	6961      	ldr	r1, [r4, #20]
 800909a:	1d18      	adds	r0, r3, #4
 800909c:	6028      	str	r0, [r5, #0]
 800909e:	0635      	lsls	r5, r6, #24
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	d501      	bpl.n	80090a8 <_printf_i+0x1cc>
 80090a4:	6019      	str	r1, [r3, #0]
 80090a6:	e002      	b.n	80090ae <_printf_i+0x1d2>
 80090a8:	0670      	lsls	r0, r6, #25
 80090aa:	d5fb      	bpl.n	80090a4 <_printf_i+0x1c8>
 80090ac:	8019      	strh	r1, [r3, #0]
 80090ae:	2300      	movs	r3, #0
 80090b0:	6123      	str	r3, [r4, #16]
 80090b2:	4615      	mov	r5, r2
 80090b4:	e7ba      	b.n	800902c <_printf_i+0x150>
 80090b6:	682b      	ldr	r3, [r5, #0]
 80090b8:	1d1a      	adds	r2, r3, #4
 80090ba:	602a      	str	r2, [r5, #0]
 80090bc:	681d      	ldr	r5, [r3, #0]
 80090be:	6862      	ldr	r2, [r4, #4]
 80090c0:	2100      	movs	r1, #0
 80090c2:	4628      	mov	r0, r5
 80090c4:	f7f7 f88c 	bl	80001e0 <memchr>
 80090c8:	b108      	cbz	r0, 80090ce <_printf_i+0x1f2>
 80090ca:	1b40      	subs	r0, r0, r5
 80090cc:	6060      	str	r0, [r4, #4]
 80090ce:	6863      	ldr	r3, [r4, #4]
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	2300      	movs	r3, #0
 80090d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d8:	e7a8      	b.n	800902c <_printf_i+0x150>
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	462a      	mov	r2, r5
 80090de:	4649      	mov	r1, r9
 80090e0:	4640      	mov	r0, r8
 80090e2:	47d0      	blx	sl
 80090e4:	3001      	adds	r0, #1
 80090e6:	d0ab      	beq.n	8009040 <_printf_i+0x164>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	079b      	lsls	r3, r3, #30
 80090ec:	d413      	bmi.n	8009116 <_printf_i+0x23a>
 80090ee:	68e0      	ldr	r0, [r4, #12]
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	4298      	cmp	r0, r3
 80090f4:	bfb8      	it	lt
 80090f6:	4618      	movlt	r0, r3
 80090f8:	e7a4      	b.n	8009044 <_printf_i+0x168>
 80090fa:	2301      	movs	r3, #1
 80090fc:	4632      	mov	r2, r6
 80090fe:	4649      	mov	r1, r9
 8009100:	4640      	mov	r0, r8
 8009102:	47d0      	blx	sl
 8009104:	3001      	adds	r0, #1
 8009106:	d09b      	beq.n	8009040 <_printf_i+0x164>
 8009108:	3501      	adds	r5, #1
 800910a:	68e3      	ldr	r3, [r4, #12]
 800910c:	9903      	ldr	r1, [sp, #12]
 800910e:	1a5b      	subs	r3, r3, r1
 8009110:	42ab      	cmp	r3, r5
 8009112:	dcf2      	bgt.n	80090fa <_printf_i+0x21e>
 8009114:	e7eb      	b.n	80090ee <_printf_i+0x212>
 8009116:	2500      	movs	r5, #0
 8009118:	f104 0619 	add.w	r6, r4, #25
 800911c:	e7f5      	b.n	800910a <_printf_i+0x22e>
 800911e:	bf00      	nop
 8009120:	08009939 	.word	0x08009939
 8009124:	0800994a 	.word	0x0800994a

08009128 <memcpy>:
 8009128:	440a      	add	r2, r1
 800912a:	4291      	cmp	r1, r2
 800912c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009130:	d100      	bne.n	8009134 <memcpy+0xc>
 8009132:	4770      	bx	lr
 8009134:	b510      	push	{r4, lr}
 8009136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800913a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800913e:	4291      	cmp	r1, r2
 8009140:	d1f9      	bne.n	8009136 <memcpy+0xe>
 8009142:	bd10      	pop	{r4, pc}

08009144 <memmove>:
 8009144:	4288      	cmp	r0, r1
 8009146:	b510      	push	{r4, lr}
 8009148:	eb01 0402 	add.w	r4, r1, r2
 800914c:	d902      	bls.n	8009154 <memmove+0x10>
 800914e:	4284      	cmp	r4, r0
 8009150:	4623      	mov	r3, r4
 8009152:	d807      	bhi.n	8009164 <memmove+0x20>
 8009154:	1e43      	subs	r3, r0, #1
 8009156:	42a1      	cmp	r1, r4
 8009158:	d008      	beq.n	800916c <memmove+0x28>
 800915a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800915e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009162:	e7f8      	b.n	8009156 <memmove+0x12>
 8009164:	4402      	add	r2, r0
 8009166:	4601      	mov	r1, r0
 8009168:	428a      	cmp	r2, r1
 800916a:	d100      	bne.n	800916e <memmove+0x2a>
 800916c:	bd10      	pop	{r4, pc}
 800916e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009176:	e7f7      	b.n	8009168 <memmove+0x24>

08009178 <_free_r>:
 8009178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800917a:	2900      	cmp	r1, #0
 800917c:	d044      	beq.n	8009208 <_free_r+0x90>
 800917e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009182:	9001      	str	r0, [sp, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f1a1 0404 	sub.w	r4, r1, #4
 800918a:	bfb8      	it	lt
 800918c:	18e4      	addlt	r4, r4, r3
 800918e:	f000 f913 	bl	80093b8 <__malloc_lock>
 8009192:	4a1e      	ldr	r2, [pc, #120]	; (800920c <_free_r+0x94>)
 8009194:	9801      	ldr	r0, [sp, #4]
 8009196:	6813      	ldr	r3, [r2, #0]
 8009198:	b933      	cbnz	r3, 80091a8 <_free_r+0x30>
 800919a:	6063      	str	r3, [r4, #4]
 800919c:	6014      	str	r4, [r2, #0]
 800919e:	b003      	add	sp, #12
 80091a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091a4:	f000 b90e 	b.w	80093c4 <__malloc_unlock>
 80091a8:	42a3      	cmp	r3, r4
 80091aa:	d908      	bls.n	80091be <_free_r+0x46>
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	1961      	adds	r1, r4, r5
 80091b0:	428b      	cmp	r3, r1
 80091b2:	bf01      	itttt	eq
 80091b4:	6819      	ldreq	r1, [r3, #0]
 80091b6:	685b      	ldreq	r3, [r3, #4]
 80091b8:	1949      	addeq	r1, r1, r5
 80091ba:	6021      	streq	r1, [r4, #0]
 80091bc:	e7ed      	b.n	800919a <_free_r+0x22>
 80091be:	461a      	mov	r2, r3
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	b10b      	cbz	r3, 80091c8 <_free_r+0x50>
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	d9fa      	bls.n	80091be <_free_r+0x46>
 80091c8:	6811      	ldr	r1, [r2, #0]
 80091ca:	1855      	adds	r5, r2, r1
 80091cc:	42a5      	cmp	r5, r4
 80091ce:	d10b      	bne.n	80091e8 <_free_r+0x70>
 80091d0:	6824      	ldr	r4, [r4, #0]
 80091d2:	4421      	add	r1, r4
 80091d4:	1854      	adds	r4, r2, r1
 80091d6:	42a3      	cmp	r3, r4
 80091d8:	6011      	str	r1, [r2, #0]
 80091da:	d1e0      	bne.n	800919e <_free_r+0x26>
 80091dc:	681c      	ldr	r4, [r3, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	6053      	str	r3, [r2, #4]
 80091e2:	4421      	add	r1, r4
 80091e4:	6011      	str	r1, [r2, #0]
 80091e6:	e7da      	b.n	800919e <_free_r+0x26>
 80091e8:	d902      	bls.n	80091f0 <_free_r+0x78>
 80091ea:	230c      	movs	r3, #12
 80091ec:	6003      	str	r3, [r0, #0]
 80091ee:	e7d6      	b.n	800919e <_free_r+0x26>
 80091f0:	6825      	ldr	r5, [r4, #0]
 80091f2:	1961      	adds	r1, r4, r5
 80091f4:	428b      	cmp	r3, r1
 80091f6:	bf04      	itt	eq
 80091f8:	6819      	ldreq	r1, [r3, #0]
 80091fa:	685b      	ldreq	r3, [r3, #4]
 80091fc:	6063      	str	r3, [r4, #4]
 80091fe:	bf04      	itt	eq
 8009200:	1949      	addeq	r1, r1, r5
 8009202:	6021      	streq	r1, [r4, #0]
 8009204:	6054      	str	r4, [r2, #4]
 8009206:	e7ca      	b.n	800919e <_free_r+0x26>
 8009208:	b003      	add	sp, #12
 800920a:	bd30      	pop	{r4, r5, pc}
 800920c:	20000764 	.word	0x20000764

08009210 <sbrk_aligned>:
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	4e0e      	ldr	r6, [pc, #56]	; (800924c <sbrk_aligned+0x3c>)
 8009214:	460c      	mov	r4, r1
 8009216:	6831      	ldr	r1, [r6, #0]
 8009218:	4605      	mov	r5, r0
 800921a:	b911      	cbnz	r1, 8009222 <sbrk_aligned+0x12>
 800921c:	f000 f8bc 	bl	8009398 <_sbrk_r>
 8009220:	6030      	str	r0, [r6, #0]
 8009222:	4621      	mov	r1, r4
 8009224:	4628      	mov	r0, r5
 8009226:	f000 f8b7 	bl	8009398 <_sbrk_r>
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	d00a      	beq.n	8009244 <sbrk_aligned+0x34>
 800922e:	1cc4      	adds	r4, r0, #3
 8009230:	f024 0403 	bic.w	r4, r4, #3
 8009234:	42a0      	cmp	r0, r4
 8009236:	d007      	beq.n	8009248 <sbrk_aligned+0x38>
 8009238:	1a21      	subs	r1, r4, r0
 800923a:	4628      	mov	r0, r5
 800923c:	f000 f8ac 	bl	8009398 <_sbrk_r>
 8009240:	3001      	adds	r0, #1
 8009242:	d101      	bne.n	8009248 <sbrk_aligned+0x38>
 8009244:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009248:	4620      	mov	r0, r4
 800924a:	bd70      	pop	{r4, r5, r6, pc}
 800924c:	20000768 	.word	0x20000768

08009250 <_malloc_r>:
 8009250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009254:	1ccd      	adds	r5, r1, #3
 8009256:	f025 0503 	bic.w	r5, r5, #3
 800925a:	3508      	adds	r5, #8
 800925c:	2d0c      	cmp	r5, #12
 800925e:	bf38      	it	cc
 8009260:	250c      	movcc	r5, #12
 8009262:	2d00      	cmp	r5, #0
 8009264:	4607      	mov	r7, r0
 8009266:	db01      	blt.n	800926c <_malloc_r+0x1c>
 8009268:	42a9      	cmp	r1, r5
 800926a:	d905      	bls.n	8009278 <_malloc_r+0x28>
 800926c:	230c      	movs	r3, #12
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	2600      	movs	r6, #0
 8009272:	4630      	mov	r0, r6
 8009274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009278:	4e2e      	ldr	r6, [pc, #184]	; (8009334 <_malloc_r+0xe4>)
 800927a:	f000 f89d 	bl	80093b8 <__malloc_lock>
 800927e:	6833      	ldr	r3, [r6, #0]
 8009280:	461c      	mov	r4, r3
 8009282:	bb34      	cbnz	r4, 80092d2 <_malloc_r+0x82>
 8009284:	4629      	mov	r1, r5
 8009286:	4638      	mov	r0, r7
 8009288:	f7ff ffc2 	bl	8009210 <sbrk_aligned>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	4604      	mov	r4, r0
 8009290:	d14d      	bne.n	800932e <_malloc_r+0xde>
 8009292:	6834      	ldr	r4, [r6, #0]
 8009294:	4626      	mov	r6, r4
 8009296:	2e00      	cmp	r6, #0
 8009298:	d140      	bne.n	800931c <_malloc_r+0xcc>
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	4631      	mov	r1, r6
 800929e:	4638      	mov	r0, r7
 80092a0:	eb04 0803 	add.w	r8, r4, r3
 80092a4:	f000 f878 	bl	8009398 <_sbrk_r>
 80092a8:	4580      	cmp	r8, r0
 80092aa:	d13a      	bne.n	8009322 <_malloc_r+0xd2>
 80092ac:	6821      	ldr	r1, [r4, #0]
 80092ae:	3503      	adds	r5, #3
 80092b0:	1a6d      	subs	r5, r5, r1
 80092b2:	f025 0503 	bic.w	r5, r5, #3
 80092b6:	3508      	adds	r5, #8
 80092b8:	2d0c      	cmp	r5, #12
 80092ba:	bf38      	it	cc
 80092bc:	250c      	movcc	r5, #12
 80092be:	4629      	mov	r1, r5
 80092c0:	4638      	mov	r0, r7
 80092c2:	f7ff ffa5 	bl	8009210 <sbrk_aligned>
 80092c6:	3001      	adds	r0, #1
 80092c8:	d02b      	beq.n	8009322 <_malloc_r+0xd2>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	442b      	add	r3, r5
 80092ce:	6023      	str	r3, [r4, #0]
 80092d0:	e00e      	b.n	80092f0 <_malloc_r+0xa0>
 80092d2:	6822      	ldr	r2, [r4, #0]
 80092d4:	1b52      	subs	r2, r2, r5
 80092d6:	d41e      	bmi.n	8009316 <_malloc_r+0xc6>
 80092d8:	2a0b      	cmp	r2, #11
 80092da:	d916      	bls.n	800930a <_malloc_r+0xba>
 80092dc:	1961      	adds	r1, r4, r5
 80092de:	42a3      	cmp	r3, r4
 80092e0:	6025      	str	r5, [r4, #0]
 80092e2:	bf18      	it	ne
 80092e4:	6059      	strne	r1, [r3, #4]
 80092e6:	6863      	ldr	r3, [r4, #4]
 80092e8:	bf08      	it	eq
 80092ea:	6031      	streq	r1, [r6, #0]
 80092ec:	5162      	str	r2, [r4, r5]
 80092ee:	604b      	str	r3, [r1, #4]
 80092f0:	4638      	mov	r0, r7
 80092f2:	f104 060b 	add.w	r6, r4, #11
 80092f6:	f000 f865 	bl	80093c4 <__malloc_unlock>
 80092fa:	f026 0607 	bic.w	r6, r6, #7
 80092fe:	1d23      	adds	r3, r4, #4
 8009300:	1af2      	subs	r2, r6, r3
 8009302:	d0b6      	beq.n	8009272 <_malloc_r+0x22>
 8009304:	1b9b      	subs	r3, r3, r6
 8009306:	50a3      	str	r3, [r4, r2]
 8009308:	e7b3      	b.n	8009272 <_malloc_r+0x22>
 800930a:	6862      	ldr	r2, [r4, #4]
 800930c:	42a3      	cmp	r3, r4
 800930e:	bf0c      	ite	eq
 8009310:	6032      	streq	r2, [r6, #0]
 8009312:	605a      	strne	r2, [r3, #4]
 8009314:	e7ec      	b.n	80092f0 <_malloc_r+0xa0>
 8009316:	4623      	mov	r3, r4
 8009318:	6864      	ldr	r4, [r4, #4]
 800931a:	e7b2      	b.n	8009282 <_malloc_r+0x32>
 800931c:	4634      	mov	r4, r6
 800931e:	6876      	ldr	r6, [r6, #4]
 8009320:	e7b9      	b.n	8009296 <_malloc_r+0x46>
 8009322:	230c      	movs	r3, #12
 8009324:	603b      	str	r3, [r7, #0]
 8009326:	4638      	mov	r0, r7
 8009328:	f000 f84c 	bl	80093c4 <__malloc_unlock>
 800932c:	e7a1      	b.n	8009272 <_malloc_r+0x22>
 800932e:	6025      	str	r5, [r4, #0]
 8009330:	e7de      	b.n	80092f0 <_malloc_r+0xa0>
 8009332:	bf00      	nop
 8009334:	20000764 	.word	0x20000764

08009338 <_realloc_r>:
 8009338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933c:	4680      	mov	r8, r0
 800933e:	4614      	mov	r4, r2
 8009340:	460e      	mov	r6, r1
 8009342:	b921      	cbnz	r1, 800934e <_realloc_r+0x16>
 8009344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009348:	4611      	mov	r1, r2
 800934a:	f7ff bf81 	b.w	8009250 <_malloc_r>
 800934e:	b92a      	cbnz	r2, 800935c <_realloc_r+0x24>
 8009350:	f7ff ff12 	bl	8009178 <_free_r>
 8009354:	4625      	mov	r5, r4
 8009356:	4628      	mov	r0, r5
 8009358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800935c:	f000 f838 	bl	80093d0 <_malloc_usable_size_r>
 8009360:	4284      	cmp	r4, r0
 8009362:	4607      	mov	r7, r0
 8009364:	d802      	bhi.n	800936c <_realloc_r+0x34>
 8009366:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800936a:	d812      	bhi.n	8009392 <_realloc_r+0x5a>
 800936c:	4621      	mov	r1, r4
 800936e:	4640      	mov	r0, r8
 8009370:	f7ff ff6e 	bl	8009250 <_malloc_r>
 8009374:	4605      	mov	r5, r0
 8009376:	2800      	cmp	r0, #0
 8009378:	d0ed      	beq.n	8009356 <_realloc_r+0x1e>
 800937a:	42bc      	cmp	r4, r7
 800937c:	4622      	mov	r2, r4
 800937e:	4631      	mov	r1, r6
 8009380:	bf28      	it	cs
 8009382:	463a      	movcs	r2, r7
 8009384:	f7ff fed0 	bl	8009128 <memcpy>
 8009388:	4631      	mov	r1, r6
 800938a:	4640      	mov	r0, r8
 800938c:	f7ff fef4 	bl	8009178 <_free_r>
 8009390:	e7e1      	b.n	8009356 <_realloc_r+0x1e>
 8009392:	4635      	mov	r5, r6
 8009394:	e7df      	b.n	8009356 <_realloc_r+0x1e>
	...

08009398 <_sbrk_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	4d06      	ldr	r5, [pc, #24]	; (80093b4 <_sbrk_r+0x1c>)
 800939c:	2300      	movs	r3, #0
 800939e:	4604      	mov	r4, r0
 80093a0:	4608      	mov	r0, r1
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	f7fa fd36 	bl	8003e14 <_sbrk>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_sbrk_r+0x1a>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_sbrk_r+0x1a>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	2000076c 	.word	0x2000076c

080093b8 <__malloc_lock>:
 80093b8:	4801      	ldr	r0, [pc, #4]	; (80093c0 <__malloc_lock+0x8>)
 80093ba:	f000 b811 	b.w	80093e0 <__retarget_lock_acquire_recursive>
 80093be:	bf00      	nop
 80093c0:	20000770 	.word	0x20000770

080093c4 <__malloc_unlock>:
 80093c4:	4801      	ldr	r0, [pc, #4]	; (80093cc <__malloc_unlock+0x8>)
 80093c6:	f000 b80c 	b.w	80093e2 <__retarget_lock_release_recursive>
 80093ca:	bf00      	nop
 80093cc:	20000770 	.word	0x20000770

080093d0 <_malloc_usable_size_r>:
 80093d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093d4:	1f18      	subs	r0, r3, #4
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bfbc      	itt	lt
 80093da:	580b      	ldrlt	r3, [r1, r0]
 80093dc:	18c0      	addlt	r0, r0, r3
 80093de:	4770      	bx	lr

080093e0 <__retarget_lock_acquire_recursive>:
 80093e0:	4770      	bx	lr

080093e2 <__retarget_lock_release_recursive>:
 80093e2:	4770      	bx	lr

080093e4 <atan2>:
 80093e4:	f000 b800 	b.w	80093e8 <__ieee754_atan2>

080093e8 <__ieee754_atan2>:
 80093e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ec:	ec57 6b11 	vmov	r6, r7, d1
 80093f0:	4273      	negs	r3, r6
 80093f2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009578 <__ieee754_atan2+0x190>
 80093f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80093fa:	4333      	orrs	r3, r6
 80093fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009400:	4573      	cmp	r3, lr
 8009402:	ec51 0b10 	vmov	r0, r1, d0
 8009406:	ee11 8a10 	vmov	r8, s2
 800940a:	d80a      	bhi.n	8009422 <__ieee754_atan2+0x3a>
 800940c:	4244      	negs	r4, r0
 800940e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009412:	4304      	orrs	r4, r0
 8009414:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009418:	4574      	cmp	r4, lr
 800941a:	ee10 9a10 	vmov	r9, s0
 800941e:	468c      	mov	ip, r1
 8009420:	d907      	bls.n	8009432 <__ieee754_atan2+0x4a>
 8009422:	4632      	mov	r2, r6
 8009424:	463b      	mov	r3, r7
 8009426:	f7f6 ff31 	bl	800028c <__adddf3>
 800942a:	ec41 0b10 	vmov	d0, r0, r1
 800942e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009432:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009436:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800943a:	4334      	orrs	r4, r6
 800943c:	d103      	bne.n	8009446 <__ieee754_atan2+0x5e>
 800943e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009442:	f000 b89d 	b.w	8009580 <atan>
 8009446:	17bc      	asrs	r4, r7, #30
 8009448:	f004 0402 	and.w	r4, r4, #2
 800944c:	ea53 0909 	orrs.w	r9, r3, r9
 8009450:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009454:	d107      	bne.n	8009466 <__ieee754_atan2+0x7e>
 8009456:	2c02      	cmp	r4, #2
 8009458:	d060      	beq.n	800951c <__ieee754_atan2+0x134>
 800945a:	2c03      	cmp	r4, #3
 800945c:	d1e5      	bne.n	800942a <__ieee754_atan2+0x42>
 800945e:	a142      	add	r1, pc, #264	; (adr r1, 8009568 <__ieee754_atan2+0x180>)
 8009460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009464:	e7e1      	b.n	800942a <__ieee754_atan2+0x42>
 8009466:	ea52 0808 	orrs.w	r8, r2, r8
 800946a:	d106      	bne.n	800947a <__ieee754_atan2+0x92>
 800946c:	f1bc 0f00 	cmp.w	ip, #0
 8009470:	da5f      	bge.n	8009532 <__ieee754_atan2+0x14a>
 8009472:	a13f      	add	r1, pc, #252	; (adr r1, 8009570 <__ieee754_atan2+0x188>)
 8009474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009478:	e7d7      	b.n	800942a <__ieee754_atan2+0x42>
 800947a:	4572      	cmp	r2, lr
 800947c:	d10f      	bne.n	800949e <__ieee754_atan2+0xb6>
 800947e:	4293      	cmp	r3, r2
 8009480:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009484:	d107      	bne.n	8009496 <__ieee754_atan2+0xae>
 8009486:	2c02      	cmp	r4, #2
 8009488:	d84c      	bhi.n	8009524 <__ieee754_atan2+0x13c>
 800948a:	4b35      	ldr	r3, [pc, #212]	; (8009560 <__ieee754_atan2+0x178>)
 800948c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009490:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009494:	e7c9      	b.n	800942a <__ieee754_atan2+0x42>
 8009496:	2c02      	cmp	r4, #2
 8009498:	d848      	bhi.n	800952c <__ieee754_atan2+0x144>
 800949a:	4b32      	ldr	r3, [pc, #200]	; (8009564 <__ieee754_atan2+0x17c>)
 800949c:	e7f6      	b.n	800948c <__ieee754_atan2+0xa4>
 800949e:	4573      	cmp	r3, lr
 80094a0:	d0e4      	beq.n	800946c <__ieee754_atan2+0x84>
 80094a2:	1a9b      	subs	r3, r3, r2
 80094a4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80094a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094ac:	da1e      	bge.n	80094ec <__ieee754_atan2+0x104>
 80094ae:	2f00      	cmp	r7, #0
 80094b0:	da01      	bge.n	80094b6 <__ieee754_atan2+0xce>
 80094b2:	323c      	adds	r2, #60	; 0x3c
 80094b4:	db1e      	blt.n	80094f4 <__ieee754_atan2+0x10c>
 80094b6:	4632      	mov	r2, r6
 80094b8:	463b      	mov	r3, r7
 80094ba:	f7f7 f9c7 	bl	800084c <__aeabi_ddiv>
 80094be:	ec41 0b10 	vmov	d0, r0, r1
 80094c2:	f000 f9fd 	bl	80098c0 <fabs>
 80094c6:	f000 f85b 	bl	8009580 <atan>
 80094ca:	ec51 0b10 	vmov	r0, r1, d0
 80094ce:	2c01      	cmp	r4, #1
 80094d0:	d013      	beq.n	80094fa <__ieee754_atan2+0x112>
 80094d2:	2c02      	cmp	r4, #2
 80094d4:	d015      	beq.n	8009502 <__ieee754_atan2+0x11a>
 80094d6:	2c00      	cmp	r4, #0
 80094d8:	d0a7      	beq.n	800942a <__ieee754_atan2+0x42>
 80094da:	a319      	add	r3, pc, #100	; (adr r3, 8009540 <__ieee754_atan2+0x158>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f7f6 fed2 	bl	8000288 <__aeabi_dsub>
 80094e4:	a318      	add	r3, pc, #96	; (adr r3, 8009548 <__ieee754_atan2+0x160>)
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	e014      	b.n	8009516 <__ieee754_atan2+0x12e>
 80094ec:	a118      	add	r1, pc, #96	; (adr r1, 8009550 <__ieee754_atan2+0x168>)
 80094ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f2:	e7ec      	b.n	80094ce <__ieee754_atan2+0xe6>
 80094f4:	2000      	movs	r0, #0
 80094f6:	2100      	movs	r1, #0
 80094f8:	e7e9      	b.n	80094ce <__ieee754_atan2+0xe6>
 80094fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094fe:	4619      	mov	r1, r3
 8009500:	e793      	b.n	800942a <__ieee754_atan2+0x42>
 8009502:	a30f      	add	r3, pc, #60	; (adr r3, 8009540 <__ieee754_atan2+0x158>)
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	f7f6 febe 	bl	8000288 <__aeabi_dsub>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	a10d      	add	r1, pc, #52	; (adr r1, 8009548 <__ieee754_atan2+0x160>)
 8009512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009516:	f7f6 feb7 	bl	8000288 <__aeabi_dsub>
 800951a:	e786      	b.n	800942a <__ieee754_atan2+0x42>
 800951c:	a10a      	add	r1, pc, #40	; (adr r1, 8009548 <__ieee754_atan2+0x160>)
 800951e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009522:	e782      	b.n	800942a <__ieee754_atan2+0x42>
 8009524:	a10c      	add	r1, pc, #48	; (adr r1, 8009558 <__ieee754_atan2+0x170>)
 8009526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800952a:	e77e      	b.n	800942a <__ieee754_atan2+0x42>
 800952c:	2000      	movs	r0, #0
 800952e:	2100      	movs	r1, #0
 8009530:	e77b      	b.n	800942a <__ieee754_atan2+0x42>
 8009532:	a107      	add	r1, pc, #28	; (adr r1, 8009550 <__ieee754_atan2+0x168>)
 8009534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009538:	e777      	b.n	800942a <__ieee754_atan2+0x42>
 800953a:	bf00      	nop
 800953c:	f3af 8000 	nop.w
 8009540:	33145c07 	.word	0x33145c07
 8009544:	3ca1a626 	.word	0x3ca1a626
 8009548:	54442d18 	.word	0x54442d18
 800954c:	400921fb 	.word	0x400921fb
 8009550:	54442d18 	.word	0x54442d18
 8009554:	3ff921fb 	.word	0x3ff921fb
 8009558:	54442d18 	.word	0x54442d18
 800955c:	3fe921fb 	.word	0x3fe921fb
 8009560:	08009960 	.word	0x08009960
 8009564:	08009978 	.word	0x08009978
 8009568:	54442d18 	.word	0x54442d18
 800956c:	c00921fb 	.word	0xc00921fb
 8009570:	54442d18 	.word	0x54442d18
 8009574:	bff921fb 	.word	0xbff921fb
 8009578:	7ff00000 	.word	0x7ff00000
 800957c:	00000000 	.word	0x00000000

08009580 <atan>:
 8009580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	ec55 4b10 	vmov	r4, r5, d0
 8009588:	4bc3      	ldr	r3, [pc, #780]	; (8009898 <atan+0x318>)
 800958a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800958e:	429e      	cmp	r6, r3
 8009590:	46ab      	mov	fp, r5
 8009592:	dd18      	ble.n	80095c6 <atan+0x46>
 8009594:	4bc1      	ldr	r3, [pc, #772]	; (800989c <atan+0x31c>)
 8009596:	429e      	cmp	r6, r3
 8009598:	dc01      	bgt.n	800959e <atan+0x1e>
 800959a:	d109      	bne.n	80095b0 <atan+0x30>
 800959c:	b144      	cbz	r4, 80095b0 <atan+0x30>
 800959e:	4622      	mov	r2, r4
 80095a0:	462b      	mov	r3, r5
 80095a2:	4620      	mov	r0, r4
 80095a4:	4629      	mov	r1, r5
 80095a6:	f7f6 fe71 	bl	800028c <__adddf3>
 80095aa:	4604      	mov	r4, r0
 80095ac:	460d      	mov	r5, r1
 80095ae:	e006      	b.n	80095be <atan+0x3e>
 80095b0:	f1bb 0f00 	cmp.w	fp, #0
 80095b4:	f300 8131 	bgt.w	800981a <atan+0x29a>
 80095b8:	a59b      	add	r5, pc, #620	; (adr r5, 8009828 <atan+0x2a8>)
 80095ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095be:	ec45 4b10 	vmov	d0, r4, r5
 80095c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c6:	4bb6      	ldr	r3, [pc, #728]	; (80098a0 <atan+0x320>)
 80095c8:	429e      	cmp	r6, r3
 80095ca:	dc14      	bgt.n	80095f6 <atan+0x76>
 80095cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80095d0:	429e      	cmp	r6, r3
 80095d2:	dc0d      	bgt.n	80095f0 <atan+0x70>
 80095d4:	a396      	add	r3, pc, #600	; (adr r3, 8009830 <atan+0x2b0>)
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	ee10 0a10 	vmov	r0, s0
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f6 fe54 	bl	800028c <__adddf3>
 80095e4:	4baf      	ldr	r3, [pc, #700]	; (80098a4 <atan+0x324>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	f7f7 fa96 	bl	8000b18 <__aeabi_dcmpgt>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d1e6      	bne.n	80095be <atan+0x3e>
 80095f0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80095f4:	e02b      	b.n	800964e <atan+0xce>
 80095f6:	f000 f963 	bl	80098c0 <fabs>
 80095fa:	4bab      	ldr	r3, [pc, #684]	; (80098a8 <atan+0x328>)
 80095fc:	429e      	cmp	r6, r3
 80095fe:	ec55 4b10 	vmov	r4, r5, d0
 8009602:	f300 80bf 	bgt.w	8009784 <atan+0x204>
 8009606:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800960a:	429e      	cmp	r6, r3
 800960c:	f300 80a0 	bgt.w	8009750 <atan+0x1d0>
 8009610:	ee10 2a10 	vmov	r2, s0
 8009614:	ee10 0a10 	vmov	r0, s0
 8009618:	462b      	mov	r3, r5
 800961a:	4629      	mov	r1, r5
 800961c:	f7f6 fe36 	bl	800028c <__adddf3>
 8009620:	4ba0      	ldr	r3, [pc, #640]	; (80098a4 <atan+0x324>)
 8009622:	2200      	movs	r2, #0
 8009624:	f7f6 fe30 	bl	8000288 <__aeabi_dsub>
 8009628:	2200      	movs	r2, #0
 800962a:	4606      	mov	r6, r0
 800962c:	460f      	mov	r7, r1
 800962e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009632:	4620      	mov	r0, r4
 8009634:	4629      	mov	r1, r5
 8009636:	f7f6 fe29 	bl	800028c <__adddf3>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4630      	mov	r0, r6
 8009640:	4639      	mov	r1, r7
 8009642:	f7f7 f903 	bl	800084c <__aeabi_ddiv>
 8009646:	f04f 0a00 	mov.w	sl, #0
 800964a:	4604      	mov	r4, r0
 800964c:	460d      	mov	r5, r1
 800964e:	4622      	mov	r2, r4
 8009650:	462b      	mov	r3, r5
 8009652:	4620      	mov	r0, r4
 8009654:	4629      	mov	r1, r5
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4680      	mov	r8, r0
 8009660:	4689      	mov	r9, r1
 8009662:	f7f6 ffc9 	bl	80005f8 <__aeabi_dmul>
 8009666:	a374      	add	r3, pc, #464	; (adr r3, 8009838 <atan+0x2b8>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	4606      	mov	r6, r0
 800966e:	460f      	mov	r7, r1
 8009670:	f7f6 ffc2 	bl	80005f8 <__aeabi_dmul>
 8009674:	a372      	add	r3, pc, #456	; (adr r3, 8009840 <atan+0x2c0>)
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f7f6 fe07 	bl	800028c <__adddf3>
 800967e:	4632      	mov	r2, r6
 8009680:	463b      	mov	r3, r7
 8009682:	f7f6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8009686:	a370      	add	r3, pc, #448	; (adr r3, 8009848 <atan+0x2c8>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f7f6 fdfe 	bl	800028c <__adddf3>
 8009690:	4632      	mov	r2, r6
 8009692:	463b      	mov	r3, r7
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	a36d      	add	r3, pc, #436	; (adr r3, 8009850 <atan+0x2d0>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 fdf5 	bl	800028c <__adddf3>
 80096a2:	4632      	mov	r2, r6
 80096a4:	463b      	mov	r3, r7
 80096a6:	f7f6 ffa7 	bl	80005f8 <__aeabi_dmul>
 80096aa:	a36b      	add	r3, pc, #428	; (adr r3, 8009858 <atan+0x2d8>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 fdec 	bl	800028c <__adddf3>
 80096b4:	4632      	mov	r2, r6
 80096b6:	463b      	mov	r3, r7
 80096b8:	f7f6 ff9e 	bl	80005f8 <__aeabi_dmul>
 80096bc:	a368      	add	r3, pc, #416	; (adr r3, 8009860 <atan+0x2e0>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	f7f6 fde3 	bl	800028c <__adddf3>
 80096c6:	4642      	mov	r2, r8
 80096c8:	464b      	mov	r3, r9
 80096ca:	f7f6 ff95 	bl	80005f8 <__aeabi_dmul>
 80096ce:	a366      	add	r3, pc, #408	; (adr r3, 8009868 <atan+0x2e8>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	4680      	mov	r8, r0
 80096d6:	4689      	mov	r9, r1
 80096d8:	4630      	mov	r0, r6
 80096da:	4639      	mov	r1, r7
 80096dc:	f7f6 ff8c 	bl	80005f8 <__aeabi_dmul>
 80096e0:	a363      	add	r3, pc, #396	; (adr r3, 8009870 <atan+0x2f0>)
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	f7f6 fdcf 	bl	8000288 <__aeabi_dsub>
 80096ea:	4632      	mov	r2, r6
 80096ec:	463b      	mov	r3, r7
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	a361      	add	r3, pc, #388	; (adr r3, 8009878 <atan+0x2f8>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 fdc6 	bl	8000288 <__aeabi_dsub>
 80096fc:	4632      	mov	r2, r6
 80096fe:	463b      	mov	r3, r7
 8009700:	f7f6 ff7a 	bl	80005f8 <__aeabi_dmul>
 8009704:	a35e      	add	r3, pc, #376	; (adr r3, 8009880 <atan+0x300>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f6 fdbd 	bl	8000288 <__aeabi_dsub>
 800970e:	4632      	mov	r2, r6
 8009710:	463b      	mov	r3, r7
 8009712:	f7f6 ff71 	bl	80005f8 <__aeabi_dmul>
 8009716:	a35c      	add	r3, pc, #368	; (adr r3, 8009888 <atan+0x308>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f7f6 fdb4 	bl	8000288 <__aeabi_dsub>
 8009720:	4632      	mov	r2, r6
 8009722:	463b      	mov	r3, r7
 8009724:	f7f6 ff68 	bl	80005f8 <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4640      	mov	r0, r8
 800972e:	4649      	mov	r1, r9
 8009730:	f7f6 fdac 	bl	800028c <__adddf3>
 8009734:	4622      	mov	r2, r4
 8009736:	462b      	mov	r3, r5
 8009738:	f7f6 ff5e 	bl	80005f8 <__aeabi_dmul>
 800973c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	d14b      	bne.n	80097de <atan+0x25e>
 8009746:	4620      	mov	r0, r4
 8009748:	4629      	mov	r1, r5
 800974a:	f7f6 fd9d 	bl	8000288 <__aeabi_dsub>
 800974e:	e72c      	b.n	80095aa <atan+0x2a>
 8009750:	ee10 0a10 	vmov	r0, s0
 8009754:	4b53      	ldr	r3, [pc, #332]	; (80098a4 <atan+0x324>)
 8009756:	2200      	movs	r2, #0
 8009758:	4629      	mov	r1, r5
 800975a:	f7f6 fd95 	bl	8000288 <__aeabi_dsub>
 800975e:	4b51      	ldr	r3, [pc, #324]	; (80098a4 <atan+0x324>)
 8009760:	4606      	mov	r6, r0
 8009762:	460f      	mov	r7, r1
 8009764:	2200      	movs	r2, #0
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	f7f6 fd8f 	bl	800028c <__adddf3>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	4630      	mov	r0, r6
 8009774:	4639      	mov	r1, r7
 8009776:	f7f7 f869 	bl	800084c <__aeabi_ddiv>
 800977a:	f04f 0a01 	mov.w	sl, #1
 800977e:	4604      	mov	r4, r0
 8009780:	460d      	mov	r5, r1
 8009782:	e764      	b.n	800964e <atan+0xce>
 8009784:	4b49      	ldr	r3, [pc, #292]	; (80098ac <atan+0x32c>)
 8009786:	429e      	cmp	r6, r3
 8009788:	da1d      	bge.n	80097c6 <atan+0x246>
 800978a:	ee10 0a10 	vmov	r0, s0
 800978e:	4b48      	ldr	r3, [pc, #288]	; (80098b0 <atan+0x330>)
 8009790:	2200      	movs	r2, #0
 8009792:	4629      	mov	r1, r5
 8009794:	f7f6 fd78 	bl	8000288 <__aeabi_dsub>
 8009798:	4b45      	ldr	r3, [pc, #276]	; (80098b0 <atan+0x330>)
 800979a:	4606      	mov	r6, r0
 800979c:	460f      	mov	r7, r1
 800979e:	2200      	movs	r2, #0
 80097a0:	4620      	mov	r0, r4
 80097a2:	4629      	mov	r1, r5
 80097a4:	f7f6 ff28 	bl	80005f8 <__aeabi_dmul>
 80097a8:	4b3e      	ldr	r3, [pc, #248]	; (80098a4 <atan+0x324>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	f7f6 fd6e 	bl	800028c <__adddf3>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4630      	mov	r0, r6
 80097b6:	4639      	mov	r1, r7
 80097b8:	f7f7 f848 	bl	800084c <__aeabi_ddiv>
 80097bc:	f04f 0a02 	mov.w	sl, #2
 80097c0:	4604      	mov	r4, r0
 80097c2:	460d      	mov	r5, r1
 80097c4:	e743      	b.n	800964e <atan+0xce>
 80097c6:	462b      	mov	r3, r5
 80097c8:	ee10 2a10 	vmov	r2, s0
 80097cc:	4939      	ldr	r1, [pc, #228]	; (80098b4 <atan+0x334>)
 80097ce:	2000      	movs	r0, #0
 80097d0:	f7f7 f83c 	bl	800084c <__aeabi_ddiv>
 80097d4:	f04f 0a03 	mov.w	sl, #3
 80097d8:	4604      	mov	r4, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	e737      	b.n	800964e <atan+0xce>
 80097de:	4b36      	ldr	r3, [pc, #216]	; (80098b8 <atan+0x338>)
 80097e0:	4e36      	ldr	r6, [pc, #216]	; (80098bc <atan+0x33c>)
 80097e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80097e6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80097ea:	e9da 2300 	ldrd	r2, r3, [sl]
 80097ee:	f7f6 fd4b 	bl	8000288 <__aeabi_dsub>
 80097f2:	4622      	mov	r2, r4
 80097f4:	462b      	mov	r3, r5
 80097f6:	f7f6 fd47 	bl	8000288 <__aeabi_dsub>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009802:	f7f6 fd41 	bl	8000288 <__aeabi_dsub>
 8009806:	f1bb 0f00 	cmp.w	fp, #0
 800980a:	4604      	mov	r4, r0
 800980c:	460d      	mov	r5, r1
 800980e:	f6bf aed6 	bge.w	80095be <atan+0x3e>
 8009812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009816:	461d      	mov	r5, r3
 8009818:	e6d1      	b.n	80095be <atan+0x3e>
 800981a:	a51d      	add	r5, pc, #116	; (adr r5, 8009890 <atan+0x310>)
 800981c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009820:	e6cd      	b.n	80095be <atan+0x3e>
 8009822:	bf00      	nop
 8009824:	f3af 8000 	nop.w
 8009828:	54442d18 	.word	0x54442d18
 800982c:	bff921fb 	.word	0xbff921fb
 8009830:	8800759c 	.word	0x8800759c
 8009834:	7e37e43c 	.word	0x7e37e43c
 8009838:	e322da11 	.word	0xe322da11
 800983c:	3f90ad3a 	.word	0x3f90ad3a
 8009840:	24760deb 	.word	0x24760deb
 8009844:	3fa97b4b 	.word	0x3fa97b4b
 8009848:	a0d03d51 	.word	0xa0d03d51
 800984c:	3fb10d66 	.word	0x3fb10d66
 8009850:	c54c206e 	.word	0xc54c206e
 8009854:	3fb745cd 	.word	0x3fb745cd
 8009858:	920083ff 	.word	0x920083ff
 800985c:	3fc24924 	.word	0x3fc24924
 8009860:	5555550d 	.word	0x5555550d
 8009864:	3fd55555 	.word	0x3fd55555
 8009868:	2c6a6c2f 	.word	0x2c6a6c2f
 800986c:	bfa2b444 	.word	0xbfa2b444
 8009870:	52defd9a 	.word	0x52defd9a
 8009874:	3fadde2d 	.word	0x3fadde2d
 8009878:	af749a6d 	.word	0xaf749a6d
 800987c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009880:	fe231671 	.word	0xfe231671
 8009884:	3fbc71c6 	.word	0x3fbc71c6
 8009888:	9998ebc4 	.word	0x9998ebc4
 800988c:	3fc99999 	.word	0x3fc99999
 8009890:	54442d18 	.word	0x54442d18
 8009894:	3ff921fb 	.word	0x3ff921fb
 8009898:	440fffff 	.word	0x440fffff
 800989c:	7ff00000 	.word	0x7ff00000
 80098a0:	3fdbffff 	.word	0x3fdbffff
 80098a4:	3ff00000 	.word	0x3ff00000
 80098a8:	3ff2ffff 	.word	0x3ff2ffff
 80098ac:	40038000 	.word	0x40038000
 80098b0:	3ff80000 	.word	0x3ff80000
 80098b4:	bff00000 	.word	0xbff00000
 80098b8:	080099b0 	.word	0x080099b0
 80098bc:	08009990 	.word	0x08009990

080098c0 <fabs>:
 80098c0:	ec51 0b10 	vmov	r0, r1, d0
 80098c4:	ee10 2a10 	vmov	r2, s0
 80098c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098cc:	ec43 2b10 	vmov	d0, r2, r3
 80098d0:	4770      	bx	lr
	...

080098d4 <_init>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	bf00      	nop
 80098d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098da:	bc08      	pop	{r3}
 80098dc:	469e      	mov	lr, r3
 80098de:	4770      	bx	lr

080098e0 <_fini>:
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	bf00      	nop
 80098e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e6:	bc08      	pop	{r3}
 80098e8:	469e      	mov	lr, r3
 80098ea:	4770      	bx	lr
