
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  08011d00  08011d00  00021d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013810  08013810  00023810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013818  08013818  00023818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801381c  0801381c  0002381c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  24000000  08013820  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000fb8  2400008c  080138ac  0003008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001044  080138ac  00031044  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c9c8  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f09  00000000  00000000  0004ca82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001480  00000000  00000000  0004f990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001380  00000000  00000000  00050e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038686  00000000  00000000  00052190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d141  00000000  00000000  0008a816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167230  00000000  00000000  000a7957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020eb87  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000606c  00000000  00000000  0020ebd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011ce4 	.word	0x08011ce4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	08011ce4 	.word	0x08011ce4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	ed87 0a02 	vstr	s0, [r7, #8]
 80006a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80006a4:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	609a      	str	r2, [r3, #8]
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <kalman_filter_update>:

float kalman_filter_update(kalman_filter_t* filter, float mea) {
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	ed87 0a00 	vstr	s0, [r7]
  filter->_kalman_gain = filter->_err_estimate/(filter->_err_estimate + filter->_err_measure);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	ed93 7a01 	vldr	s14, [r3, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	edd3 7a00 	vldr	s15, [r3]
 80006e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	edc3 7a05 	vstr	s15, [r3, #20]
  filter->_current_estimate = filter->_last_estimate + filter->_kalman_gain * (mea - filter->_last_estimate);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	edd3 6a05 	vldr	s13, [r3, #20]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	edd3 7a04 	vldr	s15, [r3, #16]
 8000704:	ed97 6a00 	vldr	s12, [r7]
 8000708:	ee76 7a67 	vsub.f32	s15, s12, s15
 800070c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	edc3 7a03 	vstr	s15, [r3, #12]
  filter->_err_estimate =  ((float)1.0 - filter->_kalman_gain)*filter->_err_estimate + fabs(filter->_last_estimate-filter->_current_estimate)*filter->_q;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000724:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	edd3 7a01 	vldr	s15, [r3, #4]
 800072e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000732:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	ed93 7a04 	vldr	s14, [r3, #16]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000746:	eef0 7ae7 	vabs.f32	s15, s15
 800074a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	edd3 7a02 	vldr	s15, [r3, #8]
 8000754:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000758:	ee25 7b07 	vmul.f64	d7, d5, d7
 800075c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000760:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->_last_estimate=filter->_current_estimate;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	611a      	str	r2, [r3, #16]

  return filter->_current_estimate;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	ee07 3a90 	vmov	s15, r3
}
 800077a:	eeb0 0a67 	vmov.f32	s0, s15
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <average_filter_init>:

void average_filter_init(average_filter_t* filter, int width) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  filter->width = width;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f103 0008 	add.w	r0, r3, #8
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	461a      	mov	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f00f fbc8 	bl	800ff4c <memset>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80007d6:	3301      	adds	r3, #1
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	6812      	ldr	r2, [r2, #0]
 80007dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80007e0:	fb01 f202 	mul.w	r2, r1, r2
 80007e4:	1a9a      	subs	r2, r3, r2
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	3302      	adds	r3, #2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	edd3 7a00 	vldr	s15, [r3]
 8000804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	ed93 7a01 	vldr	s14, [r3, #4]
 8000814:	edd7 7a00 	vldr	s15, [r7]
 8000818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	3302      	adds	r3, #2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	ed93 7a01 	vldr	s14, [r3, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	ee07 3a90 	vmov	s15, r3
 8000842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000846:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800084a:	eef0 7a66 	vmov.f32	s15, s13
}
 800084e:	eeb0 0a67 	vmov.f32	s0, s15
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void flash(uint8_t count) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	e010      	b.n	800088e <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800086c:	2102      	movs	r1, #2
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <flash+0x48>)
 8000870:	f006 ff83 	bl	800777a <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000874:	2032      	movs	r0, #50	; 0x32
 8000876:	f003 fe09 	bl	800448c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800087a:	2102      	movs	r1, #2
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <flash+0x48>)
 800087e:	f006 ff7c 	bl	800777a <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000882:	2032      	movs	r0, #50	; 0x32
 8000884:	f003 fe02 	bl	800448c <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	dbea      	blt.n	800086c <flash+0x10>
  }

  HAL_Delay(100);
 8000896:	2064      	movs	r0, #100	; 0x64
 8000898:	f003 fdf8 	bl	800448c <HAL_Delay>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58020000 	.word	0x58020000

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f003 fd5c 	bl	8004368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f87c 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f000 fca6 	bl	8001204 <MX_GPIO_Init>
  MX_TIM6_Init();
 80008b8:	f000 fae8 	bl	8000e8c <MX_TIM6_Init>
  MX_TIM2_Init();
 80008bc:	f000 f934 	bl	8000b28 <MX_TIM2_Init>
  MX_TIM4_Init();
 80008c0:	f000 f9ca 	bl	8000c58 <MX_TIM4_Init>
  MX_TIM5_Init();
 80008c4:	f000 fa5a 	bl	8000d7c <MX_TIM5_Init>
  MX_TIM7_Init();
 80008c8:	f000 fb16 	bl	8000ef8 <MX_TIM7_Init>
  MX_TIM8_Init();
 80008cc:	f000 fb4c 	bl	8000f68 <MX_TIM8_Init>
  MX_TIM17_Init();
 80008d0:	f000 fbe2 	bl	8001098 <MX_TIM17_Init>
  MX_DMA_Init();
 80008d4:	f000 fc76 	bl	80011c4 <MX_DMA_Init>
  MX_I2C1_Init();
 80008d8:	f000 f8e6 	bl	8000aa8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008dc:	f000 fc26 	bl	800112c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2102      	movs	r1, #2
 80008e4:	4829      	ldr	r0, [pc, #164]	; (800098c <main+0xe4>)
 80008e6:	f006 ff2f 	bl	8007748 <HAL_GPIO_WritePin>

  flash(5);
 80008ea:	2005      	movs	r0, #5
 80008ec:	f7ff ffb6 	bl	800085c <flash>

  // Initialise filters for remote control
  init_filters();
 80008f0:	f003 fbba 	bl	8004068 <init_filters>

  // Init sensors
  init_sensors();
 80008f4:	f003 fc2a 	bl	800414c <init_sensors>

  flash(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f7ff ffaf 	bl	800085c <flash>

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80008fe:	2100      	movs	r1, #0
 8000900:	4823      	ldr	r0, [pc, #140]	; (8000990 <main+0xe8>)
 8000902:	f00c f825 	bl	800c950 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000906:	2104      	movs	r1, #4
 8000908:	4821      	ldr	r0, [pc, #132]	; (8000990 <main+0xe8>)
 800090a:	f00c f821 	bl	800c950 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 800090e:	2108      	movs	r1, #8
 8000910:	481f      	ldr	r0, [pc, #124]	; (8000990 <main+0xe8>)
 8000912:	f00c f81d 	bl	800c950 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000916:	210c      	movs	r1, #12
 8000918:	481d      	ldr	r0, [pc, #116]	; (8000990 <main+0xe8>)
 800091a:	f00c f819 	bl	800c950 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800091e:	2100      	movs	r1, #0
 8000920:	481c      	ldr	r0, [pc, #112]	; (8000994 <main+0xec>)
 8000922:	f00c f815 	bl	800c950 <HAL_TIM_IC_Start_IT>

  // For ranging sensor
  HAL_TIM_IC_Start_IT(&htim17, TIM_CHANNEL_1);
 8000926:	2100      	movs	r1, #0
 8000928:	481b      	ldr	r0, [pc, #108]	; (8000998 <main+0xf0>)
 800092a:	f00c f811 	bl	800c950 <HAL_TIM_IC_Start_IT>

  // For drifting detection outputs
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3);
 800092e:	2108      	movs	r1, #8
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <main+0xec>)
 8000932:	f00c f80d 	bl	800c950 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 8000936:	210c      	movs	r1, #12
 8000938:	4816      	ldr	r0, [pc, #88]	; (8000994 <main+0xec>)
 800093a:	f00c f809 	bl	800c950 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 800093e:	2100      	movs	r1, #0
 8000940:	4816      	ldr	r0, [pc, #88]	; (800099c <main+0xf4>)
 8000942:	f00c f805 	bl	800c950 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8000946:	2104      	movs	r1, #4
 8000948:	4814      	ldr	r0, [pc, #80]	; (800099c <main+0xf4>)
 800094a:	f00c f801 	bl	800c950 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_3);
 800094e:	2108      	movs	r1, #8
 8000950:	4812      	ldr	r0, [pc, #72]	; (800099c <main+0xf4>)
 8000952:	f00b fffd 	bl	800c950 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 8000956:	210c      	movs	r1, #12
 8000958:	4810      	ldr	r0, [pc, #64]	; (800099c <main+0xf4>)
 800095a:	f00b fff9 	bl	800c950 <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800095e:	2100      	movs	r1, #0
 8000960:	480f      	ldr	r0, [pc, #60]	; (80009a0 <main+0xf8>)
 8000962:	f00b fe85 	bl	800c670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000966:	2104      	movs	r1, #4
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <main+0xf8>)
 800096a:	f00b fe81 	bl	800c670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800096e:	2108      	movs	r1, #8
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <main+0xf8>)
 8000972:	f00b fe7d 	bl	800c670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000976:	210c      	movs	r1, #12
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <main+0xf8>)
 800097a:	f00b fe79 	bl	800c670 <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim6);
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <main+0xfc>)
 8000980:	f00b fd9c 	bl	800c4bc <HAL_TIM_Base_Start_IT>

  // Monitor timer
  HAL_TIM_Base_Start_IT(&htim7);
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <main+0x100>)
 8000986:	f00b fd99 	bl	800c4bc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800098a:	e7fe      	b.n	800098a <main+0xe2>
 800098c:	58020000 	.word	0x58020000
 8000990:	240001b8 	.word	0x240001b8
 8000994:	24000204 	.word	0x24000204
 8000998:	24000334 	.word	0x24000334
 800099c:	240002e8 	.word	0x240002e8
 80009a0:	2400016c 	.word	0x2400016c
 80009a4:	24000250 	.word	0x24000250
 80009a8:	2400029c 	.word	0x2400029c

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09c      	sub	sp, #112	; 0x70
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	224c      	movs	r2, #76	; 0x4c
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00f fac6 	bl	800ff4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2220      	movs	r2, #32
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00f fac0 	bl	800ff4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009cc:	2002      	movs	r0, #2
 80009ce:	f009 f9c1 	bl	8009d54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <SystemClock_Config+0xf4>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	4a31      	ldr	r2, [pc, #196]	; (8000aa0 <SystemClock_Config+0xf4>)
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <SystemClock_Config+0xf4>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <SystemClock_Config+0xf8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a2c      	ldr	r2, [pc, #176]	; (8000aa4 <SystemClock_Config+0xf8>)
 80009f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <SystemClock_Config+0xf8>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a04:	bf00      	nop
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <SystemClock_Config+0xf8>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a12:	d1f8      	bne.n	8000a06 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a14:	2303      	movs	r3, #3
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000a2e:	230a      	movs	r3, #10
 8000a30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000a36:	2304      	movs	r3, #4
 8000a38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a42:	2308      	movs	r3, #8
 8000a44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a46:	2302      	movs	r3, #2
 8000a48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4618      	mov	r0, r3
 8000a54:	f009 f9b8 	bl	8009dc8 <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a5e:	f000 fc59 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	233f      	movs	r3, #63	; 0x3f
 8000a64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2303      	movs	r3, #3
 8000a68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2101      	movs	r1, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f009 fdcc 	bl	800a624 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a92:	f000 fc3f 	bl	8001314 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3770      	adds	r7, #112	; 0x70
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	58000400 	.word	0x58000400
 8000aa4:	58024800 	.word	0x58024800

08000aa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <MX_I2C1_Init+0x78>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <MX_I2C1_Init+0x7c>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ae4:	f006 fe64 	bl	80077b0 <HAL_I2C_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aee:	f000 fc11 	bl	8001314 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000af6:	f009 f895 	bl	8009c24 <HAL_I2CEx_ConfigAnalogFilter>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b00:	f000 fc08 	bl	8001314 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000b08:	f009 f8d7 	bl	8009cba <HAL_I2CEx_ConfigDigitalFilter>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b12:	f000 fbff 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	240000a8 	.word	0x240000a8
 8000b20:	40005400 	.word	0x40005400
 8000b24:	10c0ecff 	.word	0x10c0ecff

08000b28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000b5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25;
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000b64:	2219      	movs	r2, #25
 8000b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8000b6e:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000b70:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000b74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b82:	4834      	ldr	r0, [pc, #208]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000b84:	f00b fc42 	bl	800c40c <HAL_TIM_Base_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b8e:	f000 fbc1 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	482d      	ldr	r0, [pc, #180]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000ba0:	f00c faf6 	bl	800d190 <HAL_TIM_ConfigClockSource>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000baa:	f000 fbb3 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bae:	4829      	ldr	r0, [pc, #164]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000bb0:	f00b fcfc 	bl	800c5ac <HAL_TIM_PWM_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bba:	f000 fbab 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4821      	ldr	r0, [pc, #132]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000bce:	f00d f9a1 	bl	800df14 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bd8:	f000 fb9c 	bl	8001314 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bdc:	2360      	movs	r3, #96	; 0x60
 8000bde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4818      	ldr	r0, [pc, #96]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000bf4:	f00c f9b8 	bl	800cf68 <HAL_TIM_PWM_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bfe:	f000 fb89 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	2204      	movs	r2, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	4812      	ldr	r0, [pc, #72]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000c0a:	f00c f9ad 	bl	800cf68 <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000c14:	f000 fb7e 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000c20:	f00c f9a2 	bl	800cf68 <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000c2a:	f000 fb73 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c2e:	463b      	mov	r3, r7
 8000c30:	220c      	movs	r2, #12
 8000c32:	4619      	mov	r1, r3
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000c36:	f00c f997 	bl	800cf68 <HAL_TIM_PWM_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000c40:	f000 fb68 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <MX_TIM2_Init+0x12c>)
 8000c46:	f001 fb35 	bl	80022b4 <HAL_TIM_MspPostInit>

}
 8000c4a:	bf00      	nop
 8000c4c:	3738      	adds	r7, #56	; 0x38
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2400016c 	.word	0x2400016c

08000c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c84:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000c86:	4a3c      	ldr	r2, [pc, #240]	; (8000d78 <MX_TIM4_Init+0x120>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 250;
 8000c8a:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000c8c:	22fa      	movs	r2, #250	; 0xfa
 8000c8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000c96:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000c98:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000caa:	4832      	ldr	r0, [pc, #200]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000cac:	f00b fbae 	bl	800c40c <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000cb6:	f000 fb2d 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cc0:	f107 0320 	add.w	r3, r7, #32
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	482b      	ldr	r0, [pc, #172]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000cc8:	f00c fa62 	bl	800d190 <HAL_TIM_ConfigClockSource>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cd2:	f000 fb1f 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000cd6:	4827      	ldr	r0, [pc, #156]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000cd8:	f00b fdd8 	bl	800c88c <HAL_TIM_IC_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000ce2:	f000 fb17 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481f      	ldr	r0, [pc, #124]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000cf6:	f00d f90d 	bl	800df14 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000d00:	f000 fb08 	bl	8001314 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d04:	230a      	movs	r3, #10
 8000d06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4816      	ldr	r0, [pc, #88]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000d1c:	f00c f887 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000d26:	f000 faf5 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4810      	ldr	r0, [pc, #64]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000d32:	f00c f87c 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8000d3c:	f000 faea 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2208      	movs	r2, #8
 8000d44:	4619      	mov	r1, r3
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000d48:	f00c f871 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8000d52:	f000 fadf 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	220c      	movs	r2, #12
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_TIM4_Init+0x11c>)
 8000d5e:	f00c f866 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8000d68:	f000 fad4 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	240001b8 	.word	0x240001b8
 8000d78:	40000800 	.word	0x40000800

08000d7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	; 0x30
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000daa:	4a37      	ldr	r2, [pc, #220]	; (8000e88 <MX_TIM5_Init+0x10c>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 250;
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000db0:	22fa      	movs	r2, #250	; 0xfa
 8000db2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000dbc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dc0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dce:	482d      	ldr	r0, [pc, #180]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000dd0:	f00b fb1c 	bl	800c40c <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8000dda:	f000 fa9b 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4619      	mov	r1, r3
 8000dea:	4826      	ldr	r0, [pc, #152]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000dec:	f00c f9d0 	bl	800d190 <HAL_TIM_ConfigClockSource>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000df6:	f000 fa8d 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000dfa:	4822      	ldr	r0, [pc, #136]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000dfc:	f00b fd46 	bl	800c88c <HAL_TIM_IC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000e06:	f000 fa85 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	481a      	ldr	r0, [pc, #104]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000e1a:	f00d f87b 	bl	800df14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8000e24:	f000 fa76 	bl	8001314 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000e28:	230a      	movs	r3, #10
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000e40:	f00b fff5 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8000e4a:	f000 fa63 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2208      	movs	r2, #8
 8000e52:	4619      	mov	r1, r3
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000e56:	f00b ffea 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 8000e60:	f000 fa58 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	220c      	movs	r2, #12
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_TIM5_Init+0x108>)
 8000e6c:	f00b ffdf 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM5_Init+0xfe>
  {
    Error_Handler();
 8000e76:	f000 fa4d 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	; 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	24000204 	.word	0x24000204
 8000e88:	40000c00 	.word	0x40000c00

08000e8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_TIM6_Init+0x64>)
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <MX_TIM6_Init+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 250;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MX_TIM6_Init+0x64>)
 8000ea4:	22fa      	movs	r2, #250	; 0xfa
 8000ea6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_TIM6_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_TIM6_Init+0x64>)
 8000eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_TIM6_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_TIM6_Init+0x64>)
 8000ebe:	f00b faa5 	bl	800c40c <HAL_TIM_Base_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ec8:	f000 fa24 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_TIM6_Init+0x64>)
 8000eda:	f00d f81b 	bl	800df14 <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ee4:	f000 fa16 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24000250 	.word	0x24000250
 8000ef4:	40001000 	.word	0x40001000

08000ef8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_TIM7_Init+0x68>)
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <MX_TIM7_Init+0x6c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_TIM7_Init+0x68>)
 8000f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f14:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_TIM7_Init+0x68>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <MX_TIM7_Init+0x68>)
 8000f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f22:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_TIM7_Init+0x68>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <MX_TIM7_Init+0x68>)
 8000f2c:	f00b fa6e 	bl	800c40c <HAL_TIM_Base_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000f36:	f000 f9ed 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <MX_TIM7_Init+0x68>)
 8000f48:	f00c ffe4 	bl	800df14 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000f52:	f000 f9df 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2400029c 	.word	0x2400029c
 8000f64:	40001400 	.word	0x40001400

08000f68 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f94:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <MX_TIM8_Init+0x128>)
 8000f96:	4a3f      	ldr	r2, [pc, #252]	; (8001094 <MX_TIM8_Init+0x12c>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 250;
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <MX_TIM8_Init+0x128>)
 8000f9c:	22fa      	movs	r2, #250	; 0xfa
 8000f9e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <MX_TIM8_Init+0x128>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50000;
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <MX_TIM8_Init+0x128>)
 8000fa8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000fac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <MX_TIM8_Init+0x128>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_TIM8_Init+0x128>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <MX_TIM8_Init+0x128>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fc0:	4833      	ldr	r0, [pc, #204]	; (8001090 <MX_TIM8_Init+0x128>)
 8000fc2:	f00b fa23 	bl	800c40c <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000fcc:	f000 f9a2 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	4619      	mov	r1, r3
 8000fdc:	482c      	ldr	r0, [pc, #176]	; (8001090 <MX_TIM8_Init+0x128>)
 8000fde:	f00c f8d7 	bl	800d190 <HAL_TIM_ConfigClockSource>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000fe8:	f000 f994 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000fec:	4828      	ldr	r0, [pc, #160]	; (8001090 <MX_TIM8_Init+0x128>)
 8000fee:	f00b fc4d 	bl	800c88c <HAL_TIM_IC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000ff8:	f000 f98c 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4820      	ldr	r0, [pc, #128]	; (8001090 <MX_TIM8_Init+0x128>)
 8001010:	f00c ff80 	bl	800df14 <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 800101a:	f000 f97b 	bl	8001314 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800101e:	230a      	movs	r3, #10
 8001020:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	4816      	ldr	r0, [pc, #88]	; (8001090 <MX_TIM8_Init+0x128>)
 8001036:	f00b fefa 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001040:	f000 f968 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2204      	movs	r2, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <MX_TIM8_Init+0x128>)
 800104c:	f00b feef 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8001056:	f000 f95d 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2208      	movs	r2, #8
 800105e:	4619      	mov	r1, r3
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <MX_TIM8_Init+0x128>)
 8001062:	f00b fee4 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800106c:	f000 f952 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	220c      	movs	r2, #12
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_TIM8_Init+0x128>)
 8001078:	f00b fed9 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8001082:	f000 f947 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3730      	adds	r7, #48	; 0x30
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	240002e8 	.word	0x240002e8
 8001094:	40010400 	.word	0x40010400

08001098 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_TIM17_Init+0x8c>)
 80010ac:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <MX_TIM17_Init+0x90>)
 80010ae:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 250;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_TIM17_Init+0x8c>)
 80010b2:	22fa      	movs	r2, #250	; 0xfa
 80010b4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_TIM17_Init+0x8c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 50000;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_TIM17_Init+0x8c>)
 80010be:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010c2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_TIM17_Init+0x8c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_TIM17_Init+0x8c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_TIM17_Init+0x8c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <MX_TIM17_Init+0x8c>)
 80010d8:	f00b f998 	bl	800c40c <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 80010e2:	f000 f917 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80010e6:	480f      	ldr	r0, [pc, #60]	; (8001124 <MX_TIM17_Init+0x8c>)
 80010e8:	f00b fbd0 	bl	800c88c <HAL_TIM_IC_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80010f2:	f000 f90f 	bl	8001314 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010f6:	230a      	movs	r3, #10
 80010f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fa:	2301      	movs	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_TIM17_Init+0x8c>)
 800110e:	f00b fe8e 	bl	800ce2e <HAL_TIM_IC_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8001118:	f000 f8fc 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24000334 	.word	0x24000334
 8001128:	40014800 	.word	0x40014800

0800112c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <MX_USART1_UART_Init+0x94>)
 8001134:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001138:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800113c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_USART1_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001152:	2208      	movs	r2, #8
 8001154:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_USART1_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_USART1_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001176:	f00c ff79 	bl	800e06c <HAL_HalfDuplex_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001180:	f000 f8c8 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_USART1_UART_Init+0x90>)
 8001188:	f00e fdec 	bl	800fd64 <HAL_UARTEx_SetTxFifoThreshold>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001192:	f000 f8bf 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001196:	2100      	movs	r1, #0
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <MX_USART1_UART_Init+0x90>)
 800119a:	f00e fe21 	bl	800fde0 <HAL_UARTEx_SetRxFifoThreshold>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011a4:	f000 f8b6 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_USART1_UART_Init+0x90>)
 80011aa:	f00e fda2 	bl	800fcf2 <HAL_UARTEx_DisableFifoMode>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 f8ae 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	24000380 	.word	0x24000380
 80011c0:	40011000 	.word	0x40011000

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_DMA_Init+0x3c>)
 80011cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d0:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <MX_DMA_Init+0x3c>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_DMA_Init+0x3c>)
 80011dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	200f      	movs	r0, #15
 80011ee:	f003 fa58 	bl	80046a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f003 fa6f 	bl	80046d6 <HAL_NVIC_EnableIRQ>

}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024400 	.word	0x58024400

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <MX_GPIO_Init+0x104>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	4a39      	ldr	r2, [pc, #228]	; (8001308 <MX_GPIO_Init+0x104>)
 8001222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122a:	4b37      	ldr	r3, [pc, #220]	; (8001308 <MX_GPIO_Init+0x104>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <MX_GPIO_Init+0x104>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	4a32      	ldr	r2, [pc, #200]	; (8001308 <MX_GPIO_Init+0x104>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <MX_GPIO_Init+0x104>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <MX_GPIO_Init+0x104>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <MX_GPIO_Init+0x104>)
 800125e:	f043 0302 	orr.w	r3, r3, #2
 8001262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <MX_GPIO_Init+0x104>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <MX_GPIO_Init+0x104>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <MX_GPIO_Init+0x104>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <MX_GPIO_Init+0x104>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_GPIO_Init+0x104>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <MX_GPIO_Init+0x104>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_GPIO_Init+0x104>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2102      	movs	r1, #2
 80012b4:	4815      	ldr	r0, [pc, #84]	; (800130c <MX_GPIO_Init+0x108>)
 80012b6:	f006 fa47 	bl	8007748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c0:	4813      	ldr	r0, [pc, #76]	; (8001310 <MX_GPIO_Init+0x10c>)
 80012c2:	f006 fa41 	bl	8007748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012c6:	2302      	movs	r3, #2
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <MX_GPIO_Init+0x108>)
 80012de:	f006 f86b 	bl	80073b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_GPIO_Init+0x10c>)
 80012fc:	f006 f85c 	bl	80073b8 <HAL_GPIO_Init>

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	58024400 	.word	0x58024400
 800130c:	58020000 	.word	0x58020000
 8001310:	58020400 	.word	0x58020400

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>
	...

08001320 <calc_angles>:
#define YAW 0
#define PITCH 1
#define ROLL 2

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 8001320:	b580      	push	{r7, lr}
 8001322:	ed2d 8b04 	vpush	{d8-d9}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gyro_x / FREQ;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001338:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 8001688 <calc_angles+0x368>
 800133c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  mpu6050->gyro_angle[Y] += -mpu6050->gyro_y / FREQ; // Change sign to match the accelerometer's one
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001356:	eef1 6a67 	vneg.f32	s13, s15
 800135a:	ed9f 6acb 	vldr	s12, [pc, #812]	; 8001688 <calc_angles+0x368>
 800135e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001372:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800137c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	edd3 7a08 	vldr	s15, [r3, #32]
 8001386:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800138a:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001660 <calc_angles+0x340>
 800138e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001392:	eeb0 0b47 	vmov.f64	d0, d7
 8001396:	f00f fcd7 	bl	8010d48 <sin>
 800139a:	eeb0 7b40 	vmov.f64	d7, d0
 800139e:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013a2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80013b6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80013c0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80013ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ce:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001660 <calc_angles+0x340>
 80013d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013d6:	eeb0 0b47 	vmov.f64	d0, d7
 80013da:	f00f fcb5 	bl	8010d48 <sin>
 80013de:	eeb0 7b40 	vmov.f64	d7, d0
 80013e2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013e6:	ee38 7b47 	vsub.f64	d7, d8, d7
 80013ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001402:	eeb0 0b47 	vmov.f64	d0, d7
 8001406:	f00f fa4b 	bl	80108a0 <pow>
 800140a:	eeb0 8b40 	vmov.f64	d8, d0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	edd3 7a03 	vldr	s15, [r3, #12]
 8001414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001418:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800141c:	eeb0 0b47 	vmov.f64	d0, d7
 8001420:	f00f fa3e 	bl	80108a0 <pow>
 8001424:	eeb0 7b40 	vmov.f64	d7, d0
 8001428:	ee38 8b07 	vadd.f64	d8, d8, d7
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001432:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001436:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800143a:	eeb0 0b47 	vmov.f64	d0, d7
 800143e:	f00f fa2f 	bl	80108a0 <pow>
 8001442:	eeb0 7b40 	vmov.f64	d7, d0
 8001446:	ee38 7b07 	vadd.f64	d7, d8, d7
 800144a:	eeb0 0b47 	vmov.f64	d0, d7
 800144e:	f00f fcf3 	bl	8010e38 <sqrt>
 8001452:	eeb0 7b40 	vmov.f64	d7, d0
 8001456:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800145a:	ee17 2a90 	vmov	r2, s15
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	679a      	str	r2, [r3, #120]	; 0x78

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	edd3 7a02 	vldr	s15, [r3, #8]
 8001468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146c:	ee17 3a90 	vmov	r3, s15
 8001470:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001474:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800147c:	429a      	cmp	r2, r3
 800147e:	da1b      	bge.n	80014b8 <calc_angles+0x198>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	edd3 6a03 	vldr	s13, [r3, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001496:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800149a:	eeb0 0b47 	vmov.f64	d0, d7
 800149e:	f00f fc9f 	bl	8010de0 <asin>
 80014a2:	eeb0 7b40 	vmov.f64	d7, d0
 80014a6:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8001668 <calc_angles+0x348>
 80014aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80014be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c2:	ee17 3a90 	vmov	r3, s15
 80014c6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014ca:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014d2:	429a      	cmp	r2, r3
 80014d4:	da1b      	bge.n	800150e <calc_angles+0x1ee>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f0:	eeb0 0b47 	vmov.f64	d0, d7
 80014f4:	f00f fc74 	bl	8010de0 <asin>
 80014f8:	eeb0 7b40 	vmov.f64	d7, d0
 80014fc:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001668 <calc_angles+0x348>
 8001500:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001504:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  }

  if (mpu6050->initialized == 1) {
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001514:	2b01      	cmp	r3, #1
 8001516:	d132      	bne.n	800157e <calc_angles+0x25e>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800151e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001522:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001526:	ee27 6b06 	vmul.f64	d6, d7, d6
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001530:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001534:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8001538:	ee27 7b05 	vmul.f64	d7, d7, d5
 800153c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001540:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001550:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001554:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001558:	ee27 6b06 	vmul.f64	d6, d7, d6
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001562:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001566:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800156a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800156e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001572:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800157c:	e00b      	b.n	8001596 <calc_angles+0x276>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	659a      	str	r2, [r3, #88]	; 0x58

    mpu6050->initialized = 1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800159c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a0:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001670 <calc_angles+0x350>
 80015a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80015ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b2:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001678 <calc_angles+0x358>
 80015b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80015ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d2:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001670 <calc_angles+0x350>
 80015d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80015e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e4:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001678 <calc_angles+0x358>
 80015e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  mpu6050->measures[YAW] = -mpu6050->gyro_z; // Store the angular motion for this axis
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001600:	eef1 7a67 	vneg.f32	s15, s15
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001610:	eef1 7a67 	vneg.f32	s15, s15
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001620:	eef1 7a67 	vneg.f32	s15, s15
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001630:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800163a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800163e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001680 <calc_angles+0x360>
 8001642:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001646:	ee36 7b47 	vsub.f64	d7, d6, d7
 800164a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	ecbd 8b04 	vpop	{d8-d9}
 800165e:	bd80      	pop	{r7, pc}
 8001660:	695f8190 	.word	0x695f8190
 8001664:	3f06e05a 	.word	0x3f06e05a
 8001668:	1a63c1f8 	.word	0x1a63c1f8
 800166c:	404ca5dc 	.word	0x404ca5dc
 8001670:	cccccccd 	.word	0xcccccccd
 8001674:	3feccccc 	.word	0x3feccccc
 8001678:	9999999a 	.word	0x9999999a
 800167c:	3fb99999 	.word	0x3fb99999
 8001680:	d2f1a9fc 	.word	0xd2f1a9fc
 8001684:	3f50624d 	.word	0x3f50624d
 8001688:	43c80000 	.word	0x43c80000

0800168c <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af02      	add	r7, sp, #8
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	4611      	mov	r1, r2
 8001698:	461a      	mov	r2, r3
 800169a:	460b      	mov	r3, r1
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	4613      	mov	r3, r2
 80016a0:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	22d0      	movs	r2, #208	; 0xd0
 80016ac:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e00a      	b.n	80016ca <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f006 fc6d 	bl	8007f98 <HAL_I2C_GetState>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d006      	beq.n	80016d2 <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	3301      	adds	r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	ddf1      	ble.n	80016b4 <MPU6050_init+0x28>
 80016d0:	e000      	b.n	80016d4 <MPU6050_init+0x48>
      break;
 80016d2:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	dd01      	ble.n	80016de <MPU6050_init+0x52>
 80016da:	2301      	movs	r3, #1
 80016dc:	e1e1      	b.n	8001aa2 <MPU6050_init+0x416>

  // Check MPU id
  uint8_t whoiam = 0x75;
 80016de:	2375      	movs	r3, #117	; 0x75
 80016e0:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e011      	b.n	800170c <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	791b      	ldrb	r3, [r3, #4]
 80016f0:	b299      	uxth	r1, r3
 80016f2:	f107 021b 	add.w	r2, r7, #27
 80016f6:	2364      	movs	r3, #100	; 0x64
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	f006 f8e8 	bl	80078d0 <HAL_I2C_Master_Transmit>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b04      	cmp	r3, #4
 8001710:	ddea      	ble.n	80016e8 <MPU6050_init+0x5c>
 8001712:	e000      	b.n	8001716 <MPU6050_init+0x8a>
      break;
 8001714:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b04      	cmp	r3, #4
 800171a:	dd01      	ble.n	8001720 <MPU6050_init+0x94>
 800171c:	2303      	movs	r3, #3
 800171e:	e1c0      	b.n	8001aa2 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	e011      	b.n	800174a <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	791b      	ldrb	r3, [r3, #4]
 800172e:	b299      	uxth	r1, r3
 8001730:	f107 021a 	add.w	r2, r7, #26
 8001734:	2364      	movs	r3, #100	; 0x64
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	f006 f9bd 	bl	8007ab8 <HAL_I2C_Master_Receive>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	3301      	adds	r3, #1
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	2b04      	cmp	r3, #4
 800174e:	ddea      	ble.n	8001726 <MPU6050_init+0x9a>
 8001750:	e000      	b.n	8001754 <MPU6050_init+0xc8>
      break;
 8001752:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b04      	cmp	r3, #4
 8001758:	dd01      	ble.n	800175e <MPU6050_init+0xd2>
 800175a:	2304      	movs	r3, #4
 800175c:	e1a1      	b.n	8001aa2 <MPU6050_init+0x416>

  if (whoiam_res != 0x68) return 5;
 800175e:	7ebb      	ldrb	r3, [r7, #26]
 8001760:	2b68      	cmp	r3, #104	; 0x68
 8001762:	d001      	beq.n	8001768 <MPU6050_init+0xdc>
 8001764:	2305      	movs	r3, #5
 8001766:	e19c      	b.n	8001aa2 <MPU6050_init+0x416>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001768:	236b      	movs	r3, #107	; 0x6b
 800176a:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	e011      	b.n	8001796 <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	791b      	ldrb	r3, [r3, #4]
 800177a:	b299      	uxth	r1, r3
 800177c:	f107 0218 	add.w	r2, r7, #24
 8001780:	2364      	movs	r3, #100	; 0x64
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2302      	movs	r3, #2
 8001786:	f006 f8a3 	bl	80078d0 <HAL_I2C_Master_Transmit>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3301      	adds	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b04      	cmp	r3, #4
 800179a:	ddea      	ble.n	8001772 <MPU6050_init+0xe6>
 800179c:	e000      	b.n	80017a0 <MPU6050_init+0x114>
      break;
 800179e:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	dd01      	ble.n	80017aa <MPU6050_init+0x11e>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e17b      	b.n	8001aa2 <MPU6050_init+0x416>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 80017aa:	2319      	movs	r3, #25
 80017ac:	753b      	strb	r3, [r7, #20]
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	e011      	b.n	80017dc <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	b299      	uxth	r1, r3
 80017c2:	f107 0214 	add.w	r2, r7, #20
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2302      	movs	r3, #2
 80017cc:	f006 f880 	bl	80078d0 <HAL_I2C_Master_Transmit>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b04      	cmp	r3, #4
 80017e0:	ddea      	ble.n	80017b8 <MPU6050_init+0x12c>
 80017e2:	e000      	b.n	80017e6 <MPU6050_init+0x15a>
      break;
 80017e4:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	dd01      	ble.n	80017f0 <MPU6050_init+0x164>
 80017ec:	2307      	movs	r3, #7
 80017ee:	e158      	b.n	8001aa2 <MPU6050_init+0x416>

  // Set accel config
  uint8_t accel_config = 0x1C;
 80017f0:	231c      	movs	r3, #28
 80017f2:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	e011      	b.n	800181e <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	791b      	ldrb	r3, [r3, #4]
 8001802:	b299      	uxth	r1, r3
 8001804:	f107 0213 	add.w	r2, r7, #19
 8001808:	2364      	movs	r3, #100	; 0x64
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	f006 f85f 	bl	80078d0 <HAL_I2C_Master_Transmit>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	3301      	adds	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	2b04      	cmp	r3, #4
 8001822:	ddea      	ble.n	80017fa <MPU6050_init+0x16e>
 8001824:	e000      	b.n	8001828 <MPU6050_init+0x19c>
      break;
 8001826:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b04      	cmp	r3, #4
 800182c:	dd01      	ble.n	8001832 <MPU6050_init+0x1a6>
 800182e:	2308      	movs	r3, #8
 8001830:	e137      	b.n	8001aa2 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e011      	b.n	800185c <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	791b      	ldrb	r3, [r3, #4]
 8001840:	b299      	uxth	r1, r3
 8001842:	f107 0213 	add.w	r2, r7, #19
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	f006 f934 	bl	8007ab8 <HAL_I2C_Master_Receive>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b04      	cmp	r3, #4
 8001860:	ddea      	ble.n	8001838 <MPU6050_init+0x1ac>
 8001862:	e000      	b.n	8001866 <MPU6050_init+0x1da>
      break;
 8001864:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	2b04      	cmp	r3, #4
 800186a:	dd01      	ble.n	8001870 <MPU6050_init+0x1e4>
 800186c:	2309      	movs	r3, #9
 800186e:	e118      	b.n	8001aa2 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001870:	7cfb      	ldrb	r3, [r7, #19]
 8001872:	b25b      	sxtb	r3, r3
 8001874:	f023 0318 	bic.w	r3, r3, #24
 8001878:	b25a      	sxtb	r2, r3
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	b25b      	sxtb	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b25b      	sxtb	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	e011      	b.n	80018b2 <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	791b      	ldrb	r3, [r3, #4]
 8001896:	b299      	uxth	r1, r3
 8001898:	f107 0213 	add.w	r2, r7, #19
 800189c:	2364      	movs	r3, #100	; 0x64
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2301      	movs	r3, #1
 80018a2:	f006 f815 	bl	80078d0 <HAL_I2C_Master_Transmit>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3301      	adds	r3, #1
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	ddea      	ble.n	800188e <MPU6050_init+0x202>
 80018b8:	e000      	b.n	80018bc <MPU6050_init+0x230>
      break;
 80018ba:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	dd01      	ble.n	80018c6 <MPU6050_init+0x23a>
 80018c2:	230a      	movs	r3, #10
 80018c4:	e0ed      	b.n	8001aa2 <MPU6050_init+0x416>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 80018c6:	231b      	movs	r3, #27
 80018c8:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e011      	b.n	80018f4 <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	791b      	ldrb	r3, [r3, #4]
 80018d8:	b299      	uxth	r1, r3
 80018da:	f107 0212 	add.w	r2, r7, #18
 80018de:	2364      	movs	r3, #100	; 0x64
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2301      	movs	r3, #1
 80018e4:	f005 fff4 	bl	80078d0 <HAL_I2C_Master_Transmit>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	ddea      	ble.n	80018d0 <MPU6050_init+0x244>
 80018fa:	e000      	b.n	80018fe <MPU6050_init+0x272>
      break;
 80018fc:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	2b04      	cmp	r3, #4
 8001902:	dd01      	ble.n	8001908 <MPU6050_init+0x27c>
 8001904:	230b      	movs	r3, #11
 8001906:	e0cc      	b.n	8001aa2 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	e011      	b.n	8001932 <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	791b      	ldrb	r3, [r3, #4]
 8001916:	b299      	uxth	r1, r3
 8001918:	f107 0212 	add.w	r2, r7, #18
 800191c:	2364      	movs	r3, #100	; 0x64
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2301      	movs	r3, #1
 8001922:	f006 f8c9 	bl	8007ab8 <HAL_I2C_Master_Receive>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3301      	adds	r3, #1
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2b04      	cmp	r3, #4
 8001936:	ddea      	ble.n	800190e <MPU6050_init+0x282>
 8001938:	e000      	b.n	800193c <MPU6050_init+0x2b0>
      break;
 800193a:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2b04      	cmp	r3, #4
 8001940:	dd01      	ble.n	8001946 <MPU6050_init+0x2ba>
 8001942:	230c      	movs	r3, #12
 8001944:	e0ad      	b.n	8001aa2 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8001946:	7cfb      	ldrb	r3, [r7, #19]
 8001948:	b25b      	sxtb	r3, r3
 800194a:	f023 0318 	bic.w	r3, r3, #24
 800194e:	b25a      	sxtb	r2, r3
 8001950:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	b25b      	sxtb	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b25b      	sxtb	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	e011      	b.n	800198a <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	791b      	ldrb	r3, [r3, #4]
 800196e:	b299      	uxth	r1, r3
 8001970:	f107 0212 	add.w	r2, r7, #18
 8001974:	2364      	movs	r3, #100	; 0x64
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2301      	movs	r3, #1
 800197a:	f005 ffa9 	bl	80078d0 <HAL_I2C_Master_Transmit>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	3301      	adds	r3, #1
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	2b04      	cmp	r3, #4
 800198e:	ddea      	ble.n	8001966 <MPU6050_init+0x2da>
 8001990:	e000      	b.n	8001994 <MPU6050_init+0x308>
      break;
 8001992:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b04      	cmp	r3, #4
 8001998:	dd01      	ble.n	800199e <MPU6050_init+0x312>
 800199a:	230d      	movs	r3, #13
 800199c:	e081      	b.n	8001aa2 <MPU6050_init+0x416>
  #define MPU6050_DLPF_BW_94          0x02
  #define MPU6050_DLPF_BW_44          0x03
  #define MPU6050_DLPF_BW_21          0x04
  #define MPU6050_DLPF_BW_10          0x05
  #define MPU6050_DLPF_BW_5           0x06
  uint8_t lpf[2] = {0x1A, MPU6050_DLPF_BW_94};
 800199e:	f240 231a 	movw	r3, #538	; 0x21a
 80019a2:	823b      	strh	r3, [r7, #16]
  for (counter = 0; counter < 5; counter += 1) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	e011      	b.n	80019ce <MPU6050_init+0x342>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, lpf, 2, 100) == HAL_OK) {
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	791b      	ldrb	r3, [r3, #4]
 80019b2:	b299      	uxth	r1, r3
 80019b4:	f107 0210 	add.w	r2, r7, #16
 80019b8:	2364      	movs	r3, #100	; 0x64
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2302      	movs	r3, #2
 80019be:	f005 ff87 	bl	80078d0 <HAL_I2C_Master_Transmit>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <MPU6050_init+0x34a>
  for (counter = 0; counter < 5; counter += 1) {
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	3301      	adds	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	ddea      	ble.n	80019aa <MPU6050_init+0x31e>
 80019d4:	e000      	b.n	80019d8 <MPU6050_init+0x34c>
      break;
 80019d6:	bf00      	nop
    }
  }
  if (counter >= 5) return 14;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b04      	cmp	r3, #4
 80019dc:	dd01      	ble.n	80019e2 <MPU6050_init+0x356>
 80019de:	230e      	movs	r3, #14
 80019e0:	e05f      	b.n	8001aa2 <MPU6050_init+0x416>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3380      	adds	r3, #128	; 0x80
 80019e6:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001aac <MPU6050_init+0x420>
 80019ea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019ee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fe4e 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3398      	adds	r3, #152	; 0x98
 80019fc:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001aac <MPU6050_init+0x420>
 8001a00:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a04:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fe43 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	33b0      	adds	r3, #176	; 0xb0
 8001a12:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001aac <MPU6050_init+0x420>
 8001a16:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a1a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fe38 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 1.0); // Gyro x
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	33c8      	adds	r3, #200	; 0xc8
 8001a28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a2c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a30:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fe2d 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 1.0); // Gyro y
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	33e0      	adds	r3, #224	; 0xe0
 8001a3e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a42:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a46:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fe22 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 1.0); // Gyro z
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	33f8      	adds	r3, #248	; 0xf8
 8001a54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a58:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a5c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fe17 	bl	8000694 <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3354      	adds	r3, #84	; 0x54
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00e fa6c 	bl	800ff4c <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3360      	adds	r3, #96	; 0x60
 8001a78:	220c      	movs	r2, #12
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00e fa65 	bl	800ff4c <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	336c      	adds	r3, #108	; 0x6c
 8001a86:	220c      	movs	r2, #12
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00e fa5e 	bl	800ff4c <memset>
  mpu6050->initialized = 0;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  mpu6050->angle_z = 0;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	3dcccccd 	.word	0x3dcccccd

08001ab0 <MPU6050_set_offset>:

void MPU6050_set_offset(mpu6050_t *mpu6050,
    float ax_offset, float ay_offset, float az_offset,
    float gx_offset, float gy_offset, float gz_offset) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	61f8      	str	r0, [r7, #28]
 8001ab8:	ed87 0a06 	vstr	s0, [r7, #24]
 8001abc:	edc7 0a05 	vstr	s1, [r7, #20]
 8001ac0:	ed87 1a04 	vstr	s2, [r7, #16]
 8001ac4:	edc7 1a03 	vstr	s3, [r7, #12]
 8001ac8:	ed87 2a02 	vstr	s4, [r7, #8]
 8001acc:	edc7 2a01 	vstr	s5, [r7, #4]
  mpu6050->ax_offset = ax_offset;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
  mpu6050->ay_offset = ay_offset;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
  mpu6050->az_offset = az_offset;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  mpu6050->gx_offset = gx_offset;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
  mpu6050->gy_offset = gy_offset;
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	635a      	str	r2, [r3, #52]	; 0x34
  mpu6050->gz_offset = gz_offset;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001af4:	bf00      	nop
 8001af6:	3724      	adds	r7, #36	; 0x24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <MPU6050_calibrate>:

void MPU6050_calibrate(mpu6050_t *mpu6050) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  int gx = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  int gy = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
  int gz = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  int ax = -226;
 8001b14:	f06f 03e1 	mvn.w	r3, #225	; 0xe1
 8001b18:	60fb      	str	r3, [r7, #12]
  int ay = -20;
 8001b1a:	f06f 0313 	mvn.w	r3, #19
 8001b1e:	60bb      	str	r3, [r7, #8]
#ifdef CALIBRATE_ANGLE
  ax = 0;
  ay = 0;
#endif

  HAL_Delay(2000);
 8001b20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b24:	f002 fcb2 	bl	800448c <HAL_Delay>
  for (int i = 0; i < 1100; i += 1) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	e03a      	b.n	8001ba4 <MPU6050_calibrate+0xa4>
    MPU6050_update(mpu6050);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f88a 	bl	8001c48 <MPU6050_update>
    HAL_Delay(3);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f002 fca9 	bl	800448c <HAL_Delay>
    if (i < 100) continue;
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b63      	cmp	r3, #99	; 0x63
 8001b3e:	dd2d      	ble.n	8001b9c <MPU6050_calibrate+0x9c>
    gx += mpu6050->gx;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b58:	ee17 3a90 	vmov	r3, s15
 8001b5c:	61fb      	str	r3, [r7, #28]
    gy += mpu6050->gy;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b76:	ee17 3a90 	vmov	r3, s15
 8001b7a:	61bb      	str	r3, [r7, #24]
    gz += mpu6050->gz;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b94:	ee17 3a90 	vmov	r3, s15
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e000      	b.n	8001b9e <MPU6050_calibrate+0x9e>
    if (i < 100) continue;
 8001b9c:	bf00      	nop
  for (int i = 0; i < 1100; i += 1) {
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f240 424b 	movw	r2, #1099	; 0x44b
 8001baa:	4293      	cmp	r3, r2
 8001bac:	ddbf      	ble.n	8001b2e <MPU6050_calibrate+0x2e>
    ay += mpu6050->ay;
#endif

  }

  gx = gx/1000;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <MPU6050_calibrate+0x140>)
 8001bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb6:	1192      	asrs	r2, r2, #6
 8001bb8:	17db      	asrs	r3, r3, #31
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	61fb      	str	r3, [r7, #28]
  gy = gy/1000;
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <MPU6050_calibrate+0x140>)
 8001bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc6:	1192      	asrs	r2, r2, #6
 8001bc8:	17db      	asrs	r3, r3, #31
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	61bb      	str	r3, [r7, #24]
  gz = gz/1000;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <MPU6050_calibrate+0x140>)
 8001bd2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd6:	1192      	asrs	r2, r2, #6
 8001bd8:	17db      	asrs	r3, r3, #31
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
#ifdef CALIBRATE_ANGLE
  ax = ax/1000;
  ay = ay/1000;
#endif

  MPU6050_set_offset(mpu6050, -ax, -ay, 0, -gx, -gy, -gz);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	425b      	negs	r3, r3
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	425b      	negs	r3, r3
 8001bee:	ee07 3a10 	vmov	s14, r3
 8001bf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	425b      	negs	r3, r3
 8001bfa:	ee06 3a90 	vmov	s13, r3
 8001bfe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	425b      	negs	r3, r3
 8001c06:	ee06 3a10 	vmov	s12, r3
 8001c0a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	425b      	negs	r3, r3
 8001c12:	ee05 3a90 	vmov	s11, r3
 8001c16:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001c1a:	eef0 2a65 	vmov.f32	s5, s11
 8001c1e:	eeb0 2a46 	vmov.f32	s4, s12
 8001c22:	eef0 1a66 	vmov.f32	s3, s13
 8001c26:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8001c44 <MPU6050_calibrate+0x144>
 8001c2a:	eef0 0a47 	vmov.f32	s1, s14
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff3c 	bl	8001ab0 <MPU6050_set_offset>
}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	10624dd3 	.word	0x10624dd3
 8001c44:	00000000 	.word	0x00000000

08001c48 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]
  // Read MPU6050
//  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14, 10);
//  HAL_I2C_Mem_Read_IT(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14);
  HAL_I2C_Mem_Read_DMA(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	791b      	ldrb	r3, [r3, #4]
 8001c58:	b299      	uxth	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001c60:	220e      	movs	r2, #14
 8001c62:	9201      	str	r2, [sp, #4]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2301      	movs	r3, #1
 8001c68:	223b      	movs	r2, #59	; 0x3b
 8001c6a:	f006 f81b 	bl	8007ca4 <HAL_I2C_Mem_Read_DMA>
  MPU6050_parse_6axis(mpu6050);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f804 	bl	8001c7c <MPU6050_parse_6axis>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(mpu6050->rx_buffer[0] << 8 | mpu6050->rx_buffer[1]);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(mpu6050->rx_buffer[2] << 8 | mpu6050->rx_buffer[3]);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(mpu6050->rx_buffer[4] << 8 | mpu6050->rx_buffer[5]);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	edc3 7a04 	vstr	s15, [r3, #16]

//  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax);
//  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay);
//  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az);

  mpu6050->ax = mpu6050->ax + mpu6050->ax_offset;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = mpu6050->ay + mpu6050->ay_offset;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = mpu6050->az + mpu6050->az_offset;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (mpu6050->rx_buffer[6] << 8 | mpu6050->rx_buffer[7]);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001d48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d54:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001e68 <MPU6050_parse_6axis+0x1ec>
 8001d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001e6c <MPU6050_parse_6axis+0x1f0>
 8001d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(mpu6050->rx_buffer[8] << 8 | mpu6050->rx_buffer[9]);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	425b      	negs	r3, r3
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(mpu6050->rx_buffer[10] << 8 | mpu6050->rx_buffer[11]);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(mpu6050->rx_buffer[12] << 8 | mpu6050->rx_buffer[13]);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	b21a      	sxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	425b      	negs	r3, r3
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	edc3 7a08 	vstr	s15, [r3, #32]

//  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx);
//  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy);
//  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz);

  mpu6050->gx = mpu6050->gx + mpu6050->gx_offset;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	ed93 7a06 	vldr	s14, [r3, #24]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy + mpu6050->gy_offset;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	ed93 7a07 	vldr	s14, [r3, #28]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz + mpu6050->gz_offset;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gyro_x = mpu6050->gx / SSF_GYRO;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e22:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001e70 <MPU6050_parse_6axis+0x1f4>
 8001e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_y = mpu6050->gy / SSF_GYRO;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e36:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001e70 <MPU6050_parse_6axis+0x1f4>
 8001e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  mpu6050->gyro_z = mpu6050->gz / SSF_GYRO;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e4a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001e70 <MPU6050_parse_6axis+0x1f4>
 8001e4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  calc_angles(mpu6050);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fa61 	bl	8001320 <calc_angles>
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	43aa0000 	.word	0x43aa0000
 8001e6c:	42121eb8 	.word	0x42121eb8
 8001e70:	42830000 	.word	0x42830000

08001e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_MspInit+0x30>)
 8001e7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e80:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_MspInit+0x30>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_MspInit+0x30>)
 8001e8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	58024400 	.word	0x58024400

08001ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0b8      	sub	sp, #224	; 0xe0
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	22bc      	movs	r2, #188	; 0xbc
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00e f83f 	bl	800ff4c <memset>
  if(hi2c->Instance==I2C1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a3f      	ldr	r2, [pc, #252]	; (8001fd0 <HAL_I2C_MspInit+0x128>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d176      	bne.n	8001fc6 <HAL_I2C_MspInit+0x11e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f008 ff28 	bl	800ad3c <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ef2:	f7ff fa0f 	bl	8001314 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_I2C_MspInit+0x12c>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efc:	4a35      	ldr	r2, [pc, #212]	; (8001fd4 <HAL_I2C_MspInit+0x12c>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f06:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <HAL_I2C_MspInit+0x12c>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f14:	23c0      	movs	r3, #192	; 0xc0
 8001f16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1a:	2312      	movs	r3, #18
 8001f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f36:	4619      	mov	r1, r3
 8001f38:	4827      	ldr	r0, [pc, #156]	; (8001fd8 <HAL_I2C_MspInit+0x130>)
 8001f3a:	f005 fa3d 	bl	80073b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f3e:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <HAL_I2C_MspInit+0x12c>)
 8001f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <HAL_I2C_MspInit+0x12c>)
 8001f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_I2C_MspInit+0x12c>)
 8001f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream4;
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f5e:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <HAL_I2C_MspInit+0x138>)
 8001f60:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f64:	2221      	movs	r2, #33	; 0x21
 8001f66:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001f9a:	4810      	ldr	r0, [pc, #64]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001f9c:	f002 fbb6 	bl	800470c <HAL_DMA_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_MspInit+0x102>
    {
      Error_Handler();
 8001fa6:	f7ff f9b5 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001fae:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_I2C_MspInit+0x134>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	201f      	movs	r0, #31
 8001fbc:	f002 fb71 	bl	80046a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001fc0:	201f      	movs	r0, #31
 8001fc2:	f002 fb88 	bl	80046d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	37e0      	adds	r7, #224	; 0xe0
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40005400 	.word	0x40005400
 8001fd4:	58024400 	.word	0x58024400
 8001fd8:	58020400 	.word	0x58020400
 8001fdc:	240000f4 	.word	0x240000f4
 8001fe0:	40020070 	.word	0x40020070

08001fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b092      	sub	sp, #72	; 0x48
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002004:	d10f      	bne.n	8002026 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002006:	4ba0      	ldr	r3, [pc, #640]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800200c:	4a9e      	ldr	r2, [pc, #632]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002016:	4b9c      	ldr	r3, [pc, #624]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002024:	e12b      	b.n	800227e <HAL_TIM_Base_MspInit+0x29a>
  else if(htim_base->Instance==TIM4)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a98      	ldr	r2, [pc, #608]	; (800228c <HAL_TIM_Base_MspInit+0x2a8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d137      	bne.n	80020a0 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002030:	4b95      	ldr	r3, [pc, #596]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002036:	4a94      	ldr	r2, [pc, #592]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002040:	4b91      	ldr	r3, [pc, #580]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800204e:	4b8e      	ldr	r3, [pc, #568]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	4a8c      	ldr	r2, [pc, #560]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205e:	4b8a      	ldr	r3, [pc, #552]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800206c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800207e:	2302      	movs	r3, #2
 8002080:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002082:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002086:	4619      	mov	r1, r3
 8002088:	4881      	ldr	r0, [pc, #516]	; (8002290 <HAL_TIM_Base_MspInit+0x2ac>)
 800208a:	f005 f995 	bl	80073b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2101      	movs	r1, #1
 8002092:	201e      	movs	r0, #30
 8002094:	f002 fb05 	bl	80046a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002098:	201e      	movs	r0, #30
 800209a:	f002 fb1c 	bl	80046d6 <HAL_NVIC_EnableIRQ>
}
 800209e:	e0ee      	b.n	800227e <HAL_TIM_Base_MspInit+0x29a>
  else if(htim_base->Instance==TIM5)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a7b      	ldr	r2, [pc, #492]	; (8002294 <HAL_TIM_Base_MspInit+0x2b0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d136      	bne.n	8002118 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020aa:	4b77      	ldr	r3, [pc, #476]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80020ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020b0:	4a75      	ldr	r2, [pc, #468]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80020b2:	f043 0308 	orr.w	r3, r3, #8
 80020b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020ba:	4b73      	ldr	r3, [pc, #460]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80020bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	4b6f      	ldr	r3, [pc, #444]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80020ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ce:	4a6e      	ldr	r2, [pc, #440]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d8:	4b6b      	ldr	r3, [pc, #428]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80020da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80020e6:	230d      	movs	r3, #13
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020f6:	2302      	movs	r3, #2
 80020f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020fe:	4619      	mov	r1, r3
 8002100:	4865      	ldr	r0, [pc, #404]	; (8002298 <HAL_TIM_Base_MspInit+0x2b4>)
 8002102:	f005 f959 	bl	80073b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2101      	movs	r1, #1
 800210a:	2032      	movs	r0, #50	; 0x32
 800210c:	f002 fac9 	bl	80046a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002110:	2032      	movs	r0, #50	; 0x32
 8002112:	f002 fae0 	bl	80046d6 <HAL_NVIC_EnableIRQ>
}
 8002116:	e0b2      	b.n	800227e <HAL_TIM_Base_MspInit+0x29a>
  else if(htim_base->Instance==TIM6)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a5f      	ldr	r2, [pc, #380]	; (800229c <HAL_TIM_Base_MspInit+0x2b8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d117      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002122:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002128:	4a57      	ldr	r2, [pc, #348]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002132:	4b55      	ldr	r3, [pc, #340]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2036      	movs	r0, #54	; 0x36
 8002146:	f002 faac 	bl	80046a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800214a:	2036      	movs	r0, #54	; 0x36
 800214c:	f002 fac3 	bl	80046d6 <HAL_NVIC_EnableIRQ>
}
 8002150:	e095      	b.n	800227e <HAL_TIM_Base_MspInit+0x29a>
  else if(htim_base->Instance==TIM7)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_TIM_Base_MspInit+0x2bc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d117      	bne.n	800218c <HAL_TIM_Base_MspInit+0x1a8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800215c:	4b4a      	ldr	r3, [pc, #296]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 800215e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002162:	4a49      	ldr	r2, [pc, #292]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002164:	f043 0320 	orr.w	r3, r3, #32
 8002168:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800216c:	4b46      	ldr	r3, [pc, #280]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 800216e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2102      	movs	r1, #2
 800217e:	2037      	movs	r0, #55	; 0x37
 8002180:	f002 fa8f 	bl	80046a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002184:	2037      	movs	r0, #55	; 0x37
 8002186:	f002 faa6 	bl	80046d6 <HAL_NVIC_EnableIRQ>
}
 800218a:	e078      	b.n	800227e <HAL_TIM_Base_MspInit+0x29a>
  else if(htim_base->Instance==TIM8)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a44      	ldr	r2, [pc, #272]	; (80022a4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d137      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x222>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002196:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800219c:	4a3a      	ldr	r2, [pc, #232]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021a6:	4b38      	ldr	r3, [pc, #224]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80021a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b4:	4b34      	ldr	r3, [pc, #208]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ba:	4a33      	ldr	r2, [pc, #204]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c4:	4b30      	ldr	r3, [pc, #192]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021e4:	2303      	movs	r3, #3
 80021e6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ec:	4619      	mov	r1, r3
 80021ee:	482e      	ldr	r0, [pc, #184]	; (80022a8 <HAL_TIM_Base_MspInit+0x2c4>)
 80021f0:	f005 f8e2 	bl	80073b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	202e      	movs	r0, #46	; 0x2e
 80021fa:	f002 fa52 	bl	80046a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80021fe:	202e      	movs	r0, #46	; 0x2e
 8002200:	f002 fa69 	bl	80046d6 <HAL_NVIC_EnableIRQ>
}
 8002204:	e03b      	b.n	800227e <HAL_TIM_Base_MspInit+0x29a>
  else if(htim_base->Instance==TIM17)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <HAL_TIM_Base_MspInit+0x2c8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d136      	bne.n	800227e <HAL_TIM_Base_MspInit+0x29a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002216:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_TIM_Base_MspInit+0x2a4>)
 8002240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800224c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800225e:	2301      	movs	r3, #1
 8002260:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002266:	4619      	mov	r1, r3
 8002268:	4811      	ldr	r0, [pc, #68]	; (80022b0 <HAL_TIM_Base_MspInit+0x2cc>)
 800226a:	f005 f8a5 	bl	80073b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	2076      	movs	r0, #118	; 0x76
 8002274:	f002 fa15 	bl	80046a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002278:	2076      	movs	r0, #118	; 0x76
 800227a:	f002 fa2c 	bl	80046d6 <HAL_NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3748      	adds	r7, #72	; 0x48
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	58024400 	.word	0x58024400
 800228c:	40000800 	.word	0x40000800
 8002290:	58020c00 	.word	0x58020c00
 8002294:	40000c00 	.word	0x40000c00
 8002298:	58020000 	.word	0x58020000
 800229c:	40001000 	.word	0x40001000
 80022a0:	40001400 	.word	0x40001400
 80022a4:	40010400 	.word	0x40010400
 80022a8:	58020800 	.word	0x58020800
 80022ac:	40014800 	.word	0x40014800
 80022b0:	58020400 	.word	0x58020400

080022b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d13e      	bne.n	8002354 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_TIM_MspPostInit+0xa8>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <HAL_TIM_MspPostInit+0xa8>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_TIM_MspPostInit+0xa8>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_TIM_MspPostInit+0xa8>)
 80022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fa:	4a18      	ldr	r2, [pc, #96]	; (800235c <HAL_TIM_MspPostInit+0xa8>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_TIM_MspPostInit+0xa8>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002312:	2320      	movs	r3, #32
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002322:	2301      	movs	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	480c      	ldr	r0, [pc, #48]	; (8002360 <HAL_TIM_MspPostInit+0xac>)
 800232e:	f005 f843 	bl	80073b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8002332:	f640 4308 	movw	r3, #3080	; 0xc08
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002344:	2301      	movs	r3, #1
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_TIM_MspPostInit+0xb0>)
 8002350:	f005 f832 	bl	80073b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	58024400 	.word	0x58024400
 8002360:	58020000 	.word	0x58020000
 8002364:	58020400 	.word	0x58020400

08002368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0b8      	sub	sp, #224	; 0xe0
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	22bc      	movs	r2, #188	; 0xbc
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f00d fddf 	bl	800ff4c <memset>
  if(huart->Instance==USART1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a29      	ldr	r2, [pc, #164]	; (8002438 <HAL_UART_MspInit+0xd0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d14a      	bne.n	800242e <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002398:	2301      	movs	r3, #1
 800239a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 800239c:	2318      	movs	r3, #24
 800239e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4618      	mov	r0, r3
 80023a8:	f008 fcc8 	bl	800ad3c <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023b2:	f7fe ffaf 	bl	8001314 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_UART_MspInit+0xd4>)
 80023b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023bc:	4a1f      	ldr	r2, [pc, #124]	; (800243c <HAL_UART_MspInit+0xd4>)
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_UART_MspInit+0xd4>)
 80023c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_UART_MspInit+0xd4>)
 80023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023da:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_UART_MspInit+0xd4>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_UART_MspInit+0xd4>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023fa:	2312      	movs	r3, #18
 80023fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800240c:	2307      	movs	r3, #7
 800240e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002416:	4619      	mov	r1, r3
 8002418:	4809      	ldr	r0, [pc, #36]	; (8002440 <HAL_UART_MspInit+0xd8>)
 800241a:	f004 ffcd 	bl	80073b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	210f      	movs	r1, #15
 8002422:	2025      	movs	r0, #37	; 0x25
 8002424:	f002 f93d 	bl	80046a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002428:	2025      	movs	r0, #37	; 0x25
 800242a:	f002 f954 	bl	80046d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	37e0      	adds	r7, #224	; 0xe0
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40011000 	.word	0x40011000
 800243c:	58024400 	.word	0x58024400
 8002440:	58020000 	.word	0x58020000

08002444 <blink>:
void set_speed(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4);
void schedule_400hz(void);
void schedule_20hz(void);
void fly(void);

void blink(void) {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  static int blink = 0;
  if (blink == 40) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <blink+0x30>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b28      	cmp	r3, #40	; 0x28
 800244e:	d103      	bne.n	8002458 <blink+0x14>
 8002450:	2102      	movs	r1, #2
 8002452:	4809      	ldr	r0, [pc, #36]	; (8002478 <blink+0x34>)
 8002454:	f005 f991 	bl	800777a <HAL_GPIO_TogglePin>
  if (blink >= 40) blink = 0;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <blink+0x30>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b27      	cmp	r3, #39	; 0x27
 800245e:	dd02      	ble.n	8002466 <blink+0x22>
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <blink+0x30>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
  blink += 1;
 8002466:	4b03      	ldr	r3, [pc, #12]	; (8002474 <blink+0x30>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	4a01      	ldr	r2, [pc, #4]	; (8002474 <blink+0x30>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	24001020 	.word	0x24001020
 8002478:	58020000 	.word	0x58020000

0800247c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <NMI_Handler+0x4>

08002482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <HardFault_Handler+0x4>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <MemManage_Handler+0x4>

0800248e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002492:	e7fe      	b.n	8002492 <BusFault_Handler+0x4>

08002494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <UsageFault_Handler+0x4>

0800249a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c8:	f001 ffc0 	bl	800444c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <DMA1_Stream4_IRQHandler+0x10>)
 80024d6:	f003 fc43 	bl	8005d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	240000f4 	.word	0x240000f4

080024e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <TIM4_IRQHandler+0x10>)
 80024ea:	f00a fb81 	bl	800cbf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	240001b8 	.word	0x240001b8

080024f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <I2C1_EV_IRQHandler+0x10>)
 80024fe:	f005 fcc9 	bl	8007e94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	240000a8 	.word	0x240000a8

0800250c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <USART1_IRQHandler+0x10>)
 8002512:	f00b feab 	bl	800e26c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	24000380 	.word	0x24000380

08002520 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <TIM8_CC_IRQHandler+0x10>)
 8002526:	f00a fb63 	bl	800cbf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	240002e8 	.word	0x240002e8

08002534 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <TIM5_IRQHandler+0x10>)
 800253a:	f00a fb59 	bl	800cbf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	24000204 	.word	0x24000204

08002548 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  schedule_400hz();
 800254c:	f000 fd52 	bl	8002ff4 <schedule_400hz>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <TIM6_DAC_IRQHandler+0x14>)
 8002552:	f00a fb4d 	bl	800cbf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	24000250 	.word	0x24000250

08002560 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  schedule_20hz();
 8002564:	f000 fd52 	bl	800300c <schedule_20hz>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <TIM7_IRQHandler+0x14>)
 800256a:	f00a fb41 	bl	800cbf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2400029c 	.word	0x2400029c

08002578 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <TIM17_IRQHandler+0x10>)
 800257e:	f00a fb37 	bl	800cbf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	24000334 	.word	0x24000334
 800258c:	00000000 	.word	0x00000000

08002590 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b092      	sub	sp, #72	; 0x48
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4ab4      	ldr	r2, [pc, #720]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	f040 81d2 	bne.w	8002948 <HAL_TIM_IC_CaptureCallback+0x3b8>
    switch (htim->Channel) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7f1b      	ldrb	r3, [r3, #28]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	2b07      	cmp	r3, #7
 80025ac:	f200 81ce 	bhi.w	800294c <HAL_TIM_IC_CaptureCallback+0x3bc>
 80025b0:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <HAL_TIM_IC_CaptureCallback+0x28>)
 80025b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b6:	bf00      	nop
 80025b8:	080025d9 	.word	0x080025d9
 80025bc:	08002701 	.word	0x08002701
 80025c0:	0800294d 	.word	0x0800294d
 80025c4:	080027b1 	.word	0x080027b1
 80025c8:	0800294d 	.word	0x0800294d
 80025cc:	0800294d 	.word	0x0800294d
 80025d0:	0800294d 	.word	0x0800294d
 80025d4:	080028a1 	.word	0x080028a1
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 80025d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025dc:	48a5      	ldr	r0, [pc, #660]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80025de:	f005 f89b 	bl	8007718 <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80025e8:	2100      	movs	r1, #0
 80025ea:	48a3      	ldr	r0, [pc, #652]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80025ec:	f00a fec8 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4ba1      	ldr	r3, [pc, #644]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80025f6:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80025f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025fc:	489d      	ldr	r0, [pc, #628]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80025fe:	f005 f88b 	bl	8007718 <HAL_GPIO_ReadPin>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 81a3 	bne.w	8002950 <HAL_TIM_IC_CaptureCallback+0x3c0>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800260a:	2100      	movs	r1, #0
 800260c:	489a      	ldr	r0, [pc, #616]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800260e:	f00a feb7 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	4b99      	ldr	r3, [pc, #612]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8002618:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 800261a:	4b98      	ldr	r3, [pc, #608]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4b97      	ldr	r3, [pc, #604]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	2be4      	cmp	r3, #228	; 0xe4
 800262a:	f340 8191 	ble.w	8002950 <HAL_TIM_IC_CaptureCallback+0x3c0>
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	f240 2206 	movw	r2, #518	; 0x206
 8002634:	4293      	cmp	r3, r2
 8002636:	f300 818b 	bgt.w	8002950 <HAL_TIM_IC_CaptureCallback+0x3c0>
            pwm_in[2] = value;
 800263a:	4a90      	ldr	r2, [pc, #576]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	6093      	str	r3, [r2, #8]
            float throttle = average_filter_update(&g_af[0], pwm_in[2] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8002640:	4b8e      	ldr	r3, [pc, #568]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8002648:	ee07 3a90 	vmov	s15, r3
 800264c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002650:	eeb0 0a67 	vmov.f32	s0, s15
 8002654:	488a      	ldr	r0, [pc, #552]	; (8002880 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002656:	f7fe f8b5 	bl	80007c4 <average_filter_update>
 800265a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
            if (abs(throttle) > 5) g_throttle = LIMIT(g_throttle + 0.01*throttle, MIN_THROTTLE, MAX_THROTTLE);
 800265e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	2b00      	cmp	r3, #0
 800266c:	bfb8      	it	lt
 800266e:	425b      	neglt	r3, r3
 8002670:	2b05      	cmp	r3, #5
 8002672:	f340 816d 	ble.w	8002950 <HAL_TIM_IC_CaptureCallback+0x3c0>
 8002676:	4b83      	ldr	r3, [pc, #524]	; (8002884 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002680:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002684:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002688:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8002860 <HAL_TIM_IC_CaptureCallback+0x2d0>
 800268c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002690:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002694:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269c:	d502      	bpl.n	80026a4 <HAL_TIM_IC_CaptureCallback+0x114>
 800269e:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8002888 <HAL_TIM_IC_CaptureCallback+0x2f8>
 80026a2:	e029      	b.n	80026f8 <HAL_TIM_IC_CaptureCallback+0x168>
 80026a4:	4b77      	ldr	r3, [pc, #476]	; (8002884 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80026ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b6:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8002860 <HAL_TIM_IC_CaptureCallback+0x2d0>
 80026ba:	ee27 7b05 	vmul.f64	d7, d7, d5
 80026be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026c2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002868 <HAL_TIM_IC_CaptureCallback+0x2d8>
 80026c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80026ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ce:	dd02      	ble.n	80026d6 <HAL_TIM_IC_CaptureCallback+0x146>
 80026d0:	eddf 7a6e 	vldr	s15, [pc, #440]	; 800288c <HAL_TIM_IC_CaptureCallback+0x2fc>
 80026d4:	e010      	b.n	80026f8 <HAL_TIM_IC_CaptureCallback+0x168>
 80026d6:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80026e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026e8:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8002860 <HAL_TIM_IC_CaptureCallback+0x2d0>
 80026ec:	ee27 7b05 	vmul.f64	d7, d7, d5
 80026f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026f8:	4b62      	ldr	r3, [pc, #392]	; (8002884 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80026fa:	edc3 7a00 	vstr	s15, [r3]
          }
        }
        break;
 80026fe:	e127      	b.n	8002950 <HAL_TIM_IC_CaptureCallback+0x3c0>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8002700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002704:	485b      	ldr	r0, [pc, #364]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8002706:	f005 f807 	bl	8007718 <HAL_GPIO_ReadPin>
 800270a:	4603      	mov	r3, r0
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_TIM_IC_CaptureCallback+0x190>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8002710:	2104      	movs	r1, #4
 8002712:	4859      	ldr	r0, [pc, #356]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8002714:	f00a fe34 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	4b57      	ldr	r3, [pc, #348]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800271e:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8002720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002724:	4853      	ldr	r0, [pc, #332]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8002726:	f004 fff7 	bl	8007718 <HAL_GPIO_ReadPin>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 8111 	bne.w	8002954 <HAL_TIM_IC_CaptureCallback+0x3c4>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8002732:	2104      	movs	r1, #4
 8002734:	4850      	ldr	r0, [pc, #320]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8002736:	f00a fe23 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 800273a:	4603      	mov	r3, r0
 800273c:	461a      	mov	r2, r3
 800273e:	4b4f      	ldr	r3, [pc, #316]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8002740:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 8002742:	4b4e      	ldr	r3, [pc, #312]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	2be4      	cmp	r3, #228	; 0xe4
 8002752:	f340 80ff 	ble.w	8002954 <HAL_TIM_IC_CaptureCallback+0x3c4>
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	f240 2206 	movw	r2, #518	; 0x206
 800275c:	4293      	cmp	r3, r2
 800275e:	f300 80f9 	bgt.w	8002954 <HAL_TIM_IC_CaptureCallback+0x3c4>
            pwm_in[5] = value;
 8002762:	4a46      	ldr	r2, [pc, #280]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	6153      	str	r3, [r2, #20]
            float yaw = average_filter_update(&g_af[1], pwm_in[5] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8002768:	4b44      	ldr	r3, [pc, #272]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002778:	eeb0 0a67 	vmov.f32	s0, s15
 800277c:	4844      	ldr	r0, [pc, #272]	; (8002890 <HAL_TIM_IC_CaptureCallback+0x300>)
 800277e:	f7fe f821 	bl	80007c4 <average_filter_update>
 8002782:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
            if (abs(g_yaw - yaw) > 1) g_yaw = yaw;
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_TIM_IC_CaptureCallback+0x304>)
 8002788:	ed93 7a00 	vldr	s14, [r3]
 800278c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002798:	ee17 3a90 	vmov	r3, s15
 800279c:	2b00      	cmp	r3, #0
 800279e:	bfb8      	it	lt
 80027a0:	425b      	neglt	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	f340 80d6 	ble.w	8002954 <HAL_TIM_IC_CaptureCallback+0x3c4>
 80027a8:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <HAL_TIM_IC_CaptureCallback+0x304>)
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	6013      	str	r3, [r2, #0]
          }
        }
        break;
 80027ae:	e0d1      	b.n	8002954 <HAL_TIM_IC_CaptureCallback+0x3c4>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 80027b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027b4:	482f      	ldr	r0, [pc, #188]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80027b6:	f004 ffaf 	bl	8007718 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d107      	bne.n	80027d0 <HAL_TIM_IC_CaptureCallback+0x240>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80027c0:	2108      	movs	r1, #8
 80027c2:	482d      	ldr	r0, [pc, #180]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80027c4:	f00a fddc 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80027ce:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 80027d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027d4:	4827      	ldr	r0, [pc, #156]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80027d6:	f004 ff9f 	bl	8007718 <HAL_GPIO_ReadPin>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f040 80bb 	bne.w	8002958 <HAL_TIM_IC_CaptureCallback+0x3c8>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80027e2:	2108      	movs	r1, #8
 80027e4:	4824      	ldr	r0, [pc, #144]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80027e6:	f00a fdcb 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b23      	ldr	r3, [pc, #140]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80027f0:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 80027fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002800:	2be4      	cmp	r3, #228	; 0xe4
 8002802:	f340 80a9 	ble.w	8002958 <HAL_TIM_IC_CaptureCallback+0x3c8>
 8002806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002808:	f240 2206 	movw	r2, #518	; 0x206
 800280c:	4293      	cmp	r3, r2
 800280e:	f300 80a3 	bgt.w	8002958 <HAL_TIM_IC_CaptureCallback+0x3c8>
            pwm_in[8] = value;
 8002812:	4a1a      	ldr	r2, [pc, #104]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8002814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002816:	6213      	str	r3, [r2, #32]
            float roll = average_filter_update(&g_af[3], pwm_in[8] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8002818:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002828:	eeb0 0a67 	vmov.f32	s0, s15
 800282c:	481a      	ldr	r0, [pc, #104]	; (8002898 <HAL_TIM_IC_CaptureCallback+0x308>)
 800282e:	f7fd ffc9 	bl	80007c4 <average_filter_update>
 8002832:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            if (abs(g_roll - roll) > 1) g_roll = roll;
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002838:	ed93 7a00 	vldr	s14, [r3]
 800283c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002848:	ee17 3a90 	vmov	r3, s15
 800284c:	2b00      	cmp	r3, #0
 800284e:	bfb8      	it	lt
 8002850:	425b      	neglt	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	f340 8080 	ble.w	8002958 <HAL_TIM_IC_CaptureCallback+0x3c8>
 8002858:	4a10      	ldr	r2, [pc, #64]	; (800289c <HAL_TIM_IC_CaptureCallback+0x30c>)
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	6013      	str	r3, [r2, #0]
          }
        }
        break;
 800285e:	e07b      	b.n	8002958 <HAL_TIM_IC_CaptureCallback+0x3c8>
 8002860:	47ae147b 	.word	0x47ae147b
 8002864:	3f847ae1 	.word	0x3f847ae1
 8002868:	00000000 	.word	0x00000000
 800286c:	406f2000 	.word	0x406f2000
 8002870:	40000800 	.word	0x40000800
 8002874:	58020c00 	.word	0x58020c00
 8002878:	240001b8 	.word	0x240001b8
 800287c:	2400045c 	.word	0x2400045c
 8002880:	24000638 	.word	0x24000638
 8002884:	2400055c 	.word	0x2400055c
 8002888:	00000000 	.word	0x00000000
 800288c:	43790000 	.word	0x43790000
 8002890:	240007d4 	.word	0x240007d4
 8002894:	24000568 	.word	0x24000568
 8002898:	24000b0c 	.word	0x24000b0c
 800289c:	24000564 	.word	0x24000564
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 80028a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a4:	4883      	ldr	r0, [pc, #524]	; (8002ab4 <HAL_TIM_IC_CaptureCallback+0x524>)
 80028a6:	f004 ff37 	bl	8007718 <HAL_GPIO_ReadPin>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IC_CaptureCallback+0x330>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 80028b0:	210c      	movs	r1, #12
 80028b2:	4881      	ldr	r0, [pc, #516]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x528>)
 80028b4:	f00a fd64 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b7f      	ldr	r3, [pc, #508]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 80028c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c4:	487b      	ldr	r0, [pc, #492]	; (8002ab4 <HAL_TIM_IC_CaptureCallback+0x524>)
 80028c6:	f004 ff27 	bl	8007718 <HAL_GPIO_ReadPin>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d145      	bne.n	800295c <HAL_TIM_IC_CaptureCallback+0x3cc>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 80028d0:	210c      	movs	r1, #12
 80028d2:	4879      	ldr	r0, [pc, #484]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x528>)
 80028d4:	f00a fd54 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	4b77      	ldr	r3, [pc, #476]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 80028e0:	4b76      	ldr	r3, [pc, #472]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80028e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e4:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	647b      	str	r3, [r7, #68]	; 0x44
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 80028ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ee:	2be4      	cmp	r3, #228	; 0xe4
 80028f0:	dd34      	ble.n	800295c <HAL_TIM_IC_CaptureCallback+0x3cc>
 80028f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f4:	f240 2206 	movw	r2, #518	; 0x206
 80028f8:	4293      	cmp	r3, r2
 80028fa:	dc2f      	bgt.n	800295c <HAL_TIM_IC_CaptureCallback+0x3cc>
            pwm_in[11] = value;
 80028fc:	4a6f      	ldr	r2, [pc, #444]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80028fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002900:	62d3      	str	r3, [r2, #44]	; 0x2c
            float pitch = average_filter_update(&g_af[2], pwm_in[11] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8002902:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002912:	eeb0 0a67 	vmov.f32	s0, s15
 8002916:	486a      	ldr	r0, [pc, #424]	; (8002ac0 <HAL_TIM_IC_CaptureCallback+0x530>)
 8002918:	f7fd ff54 	bl	80007c4 <average_filter_update>
 800291c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
            if (abs(g_pitch - pitch) > 1) g_pitch = pitch;
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x534>)
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002932:	ee17 3a90 	vmov	r3, s15
 8002936:	2b00      	cmp	r3, #0
 8002938:	bfb8      	it	lt
 800293a:	425b      	neglt	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	dd0d      	ble.n	800295c <HAL_TIM_IC_CaptureCallback+0x3cc>
 8002940:	4a60      	ldr	r2, [pc, #384]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x534>)
 8002942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002944:	6013      	str	r3, [r2, #0]
          }
        }
        break;
 8002946:	e009      	b.n	800295c <HAL_TIM_IC_CaptureCallback+0x3cc>
      default:
        break;
    }
  }
 8002948:	bf00      	nop
 800294a:	e008      	b.n	800295e <HAL_TIM_IC_CaptureCallback+0x3ce>
        break;
 800294c:	bf00      	nop
 800294e:	e006      	b.n	800295e <HAL_TIM_IC_CaptureCallback+0x3ce>
        break;
 8002950:	bf00      	nop
 8002952:	e004      	b.n	800295e <HAL_TIM_IC_CaptureCallback+0x3ce>
        break;
 8002954:	bf00      	nop
 8002956:	e002      	b.n	800295e <HAL_TIM_IC_CaptureCallback+0x3ce>
        break;
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <HAL_TIM_IC_CaptureCallback+0x3ce>
        break;
 800295c:	bf00      	nop

  if (htim->Instance == TIM5) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a59      	ldr	r2, [pc, #356]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x538>)
 8002964:	4293      	cmp	r3, r2
 8002966:	f040 8111 	bne.w	8002b8c <HAL_TIM_IC_CaptureCallback+0x5fc>
    switch (htim->Channel) {
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7f1b      	ldrb	r3, [r3, #28]
 800296e:	2b08      	cmp	r3, #8
 8002970:	f000 80b6 	beq.w	8002ae0 <HAL_TIM_IC_CaptureCallback+0x550>
 8002974:	2b08      	cmp	r3, #8
 8002976:	f300 810b 	bgt.w	8002b90 <HAL_TIM_IC_CaptureCallback+0x600>
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <HAL_TIM_IC_CaptureCallback+0x3f4>
 800297e:	2b04      	cmp	r3, #4
 8002980:	d03f      	beq.n	8002a02 <HAL_TIM_IC_CaptureCallback+0x472>
            drift.dy = abs(drift.right) < abs(drift.bottom_y) ? drift.right : drift.bottom_y;
          }
        }
        break;
      default:
        break;
 8002982:	e105      	b.n	8002b90 <HAL_TIM_IC_CaptureCallback+0x600>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8002984:	2101      	movs	r1, #1
 8002986:	4851      	ldr	r0, [pc, #324]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x53c>)
 8002988:	f004 fec6 	bl	8007718 <HAL_GPIO_ReadPin>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_TIM_IC_CaptureCallback+0x412>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8002992:	2100      	movs	r1, #0
 8002994:	484e      	ldr	r0, [pc, #312]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x540>)
 8002996:	f00a fcf3 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 800299a:	4603      	mov	r3, r0
 800299c:	461a      	mov	r2, r3
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80029a2:	2101      	movs	r1, #1
 80029a4:	4849      	ldr	r0, [pc, #292]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x53c>)
 80029a6:	f004 feb7 	bl	8007718 <HAL_GPIO_ReadPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 80f1 	bne.w	8002b94 <HAL_TIM_IC_CaptureCallback+0x604>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 80029b2:	2100      	movs	r1, #0
 80029b4:	4846      	ldr	r0, [pc, #280]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x540>)
 80029b6:	f00a fce3 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80029c0:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 80029c2:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80029c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c6:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	61fb      	str	r3, [r7, #28]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	2be4      	cmp	r3, #228	; 0xe4
 80029d2:	f340 80df 	ble.w	8002b94 <HAL_TIM_IC_CaptureCallback+0x604>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f240 2206 	movw	r2, #518	; 0x206
 80029dc:	4293      	cmp	r3, r2
 80029de:	f300 80d9 	bgt.w	8002b94 <HAL_TIM_IC_CaptureCallback+0x604>
            pwm_in[14] = value;
 80029e2:	4a36      	ldr	r2, [pc, #216]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	6393      	str	r3, [r2, #56]	; 0x38
            g_stick1 = pwm_in[14] > MIN_PWN_IN_CAP + 0.5*RANGE_PWM_IN_CAP ? 1 : 0;
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 80029f0:	db02      	blt.n	80029f8 <HAL_TIM_IC_CaptureCallback+0x468>
 80029f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029f6:	e001      	b.n	80029fc <HAL_TIM_IC_CaptureCallback+0x46c>
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	4a35      	ldr	r2, [pc, #212]	; (8002ad4 <HAL_TIM_IC_CaptureCallback+0x544>)
 80029fe:	6013      	str	r3, [r2, #0]
        break;
 8002a00:	e0c8      	b.n	8002b94 <HAL_TIM_IC_CaptureCallback+0x604>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 8002a02:	2104      	movs	r1, #4
 8002a04:	4831      	ldr	r0, [pc, #196]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x53c>)
 8002a06:	f004 fe87 	bl	8007718 <HAL_GPIO_ReadPin>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <HAL_TIM_IC_CaptureCallback+0x490>
          pwm_in[15] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 8002a10:	2108      	movs	r1, #8
 8002a12:	482f      	ldr	r0, [pc, #188]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x540>)
 8002a14:	f00a fcb4 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 8002a1e:	63da      	str	r2, [r3, #60]	; 0x3c
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 8002a20:	2104      	movs	r1, #4
 8002a22:	482a      	ldr	r0, [pc, #168]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x53c>)
 8002a24:	f004 fe78 	bl	8007718 <HAL_GPIO_ReadPin>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 80b4 	bne.w	8002b98 <HAL_TIM_IC_CaptureCallback+0x608>
          pwm_in[16] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 8002a30:	2108      	movs	r1, #8
 8002a32:	4827      	ldr	r0, [pc, #156]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x540>)
 8002a34:	f00a fca4 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
          int value = pwm_in[16] - pwm_in[15];
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 8002a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	623b      	str	r3, [r7, #32]
          if (value >= OPTICALFLOW_AVG_PWM - 10 && value <= OPTICALFLOW_AVG_PWM + 10) {
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	2b0d      	cmp	r3, #13
 8002a50:	f340 80a2 	ble.w	8002b98 <HAL_TIM_IC_CaptureCallback+0x608>
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	2b22      	cmp	r3, #34	; 0x22
 8002a58:	f300 809e 	bgt.w	8002b98 <HAL_TIM_IC_CaptureCallback+0x608>
            pwm_in[17] = value;
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
            drift.bottom_x = kalman_filter_update(&g_kf[1], pwm_in[17] - OPTICALFLOW_AVG_PWM);
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x52c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	3b18      	subs	r3, #24
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a70:	eeb0 0a67 	vmov.f32	s0, s15
 8002a74:	4818      	ldr	r0, [pc, #96]	; (8002ad8 <HAL_TIM_IC_CaptureCallback+0x548>)
 8002a76:	f7fd fe26 	bl	80006c6 <kalman_filter_update>
 8002a7a:	eef0 7a40 	vmov.f32	s15, s0
 8002a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a82:	ee17 2a90 	vmov	r2, s15
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x54c>)
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
            drift.dx = abs(drift.front) < abs(drift.bottom_x) ? drift.front : drift.bottom_x;
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x54c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002a92:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x54c>)
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bfb8      	it	lt
 8002a9e:	425b      	neglt	r3, r3
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	da02      	bge.n	8002aaa <HAL_TIM_IC_CaptureCallback+0x51a>
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x54c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	e001      	b.n	8002aae <HAL_TIM_IC_CaptureCallback+0x51e>
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x54c>)
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x54c>)
 8002ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8002ab2:	e071      	b.n	8002b98 <HAL_TIM_IC_CaptureCallback+0x608>
 8002ab4:	58020c00 	.word	0x58020c00
 8002ab8:	240001b8 	.word	0x240001b8
 8002abc:	2400045c 	.word	0x2400045c
 8002ac0:	24000970 	.word	0x24000970
 8002ac4:	24000560 	.word	0x24000560
 8002ac8:	40000c00 	.word	0x40000c00
 8002acc:	58020000 	.word	0x58020000
 8002ad0:	24000204 	.word	0x24000204
 8002ad4:	2400056c 	.word	0x2400056c
 8002ad8:	24000e5c 	.word	0x24000e5c
 8002adc:	2400058c 	.word	0x2400058c
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	4897      	ldr	r0, [pc, #604]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x7b0>)
 8002ae4:	f004 fe18 	bl	8007718 <HAL_GPIO_ReadPin>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_IC_CaptureCallback+0x56e>
          pwm_in[18] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 8002aee:	210c      	movs	r1, #12
 8002af0:	4894      	ldr	r0, [pc, #592]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x7b4>)
 8002af2:	f00a fc45 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b93      	ldr	r3, [pc, #588]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002afc:	649a      	str	r2, [r3, #72]	; 0x48
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8002afe:	2108      	movs	r1, #8
 8002b00:	488f      	ldr	r0, [pc, #572]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x7b0>)
 8002b02:	f004 fe09 	bl	8007718 <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d147      	bne.n	8002b9c <HAL_TIM_IC_CaptureCallback+0x60c>
          pwm_in[19] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 8002b0c:	210c      	movs	r1, #12
 8002b0e:	488d      	ldr	r0, [pc, #564]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x7b4>)
 8002b10:	f00a fc36 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002b1a:	64da      	str	r2, [r3, #76]	; 0x4c
          int value = pwm_in[19] - pwm_in[18];
 8002b1c:	4b8a      	ldr	r3, [pc, #552]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b20:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
          if (value >= OPTICALFLOW_AVG_PWM - 10 && value <= OPTICALFLOW_AVG_PWM + 10) {
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	2b0d      	cmp	r3, #13
 8002b2c:	dd36      	ble.n	8002b9c <HAL_TIM_IC_CaptureCallback+0x60c>
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	2b22      	cmp	r3, #34	; 0x22
 8002b32:	dc33      	bgt.n	8002b9c <HAL_TIM_IC_CaptureCallback+0x60c>
            pwm_in[20] = value;
 8002b34:	4a84      	ldr	r2, [pc, #528]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	6513      	str	r3, [r2, #80]	; 0x50
            drift.bottom_y = kalman_filter_update(&g_kf[0], pwm_in[20] - OPTICALFLOW_AVG_PWM);
 8002b3a:	4b83      	ldr	r3, [pc, #524]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3e:	3b18      	subs	r3, #24
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b48:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4c:	487f      	ldr	r0, [pc, #508]	; (8002d4c <HAL_TIM_IC_CaptureCallback+0x7bc>)
 8002b4e:	f7fd fdba 	bl	80006c6 <kalman_filter_update>
 8002b52:	eef0 7a40 	vmov.f32	s15, s0
 8002b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5a:	ee17 2a90 	vmov	r2, s15
 8002b5e:	4b7c      	ldr	r3, [pc, #496]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002b60:	621a      	str	r2, [r3, #32]
            drift.dy = abs(drift.right) < abs(drift.bottom_y) ? drift.right : drift.bottom_y;
 8002b62:	4b7b      	ldr	r3, [pc, #492]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002b6a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002b6e:	4b78      	ldr	r3, [pc, #480]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bfb8      	it	lt
 8002b76:	425b      	neglt	r3, r3
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	da02      	bge.n	8002b82 <HAL_TIM_IC_CaptureCallback+0x5f2>
 8002b7c:	4b74      	ldr	r3, [pc, #464]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	e001      	b.n	8002b86 <HAL_TIM_IC_CaptureCallback+0x5f6>
 8002b82:	4b73      	ldr	r3, [pc, #460]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a72      	ldr	r2, [pc, #456]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002b88:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002b8a:	e007      	b.n	8002b9c <HAL_TIM_IC_CaptureCallback+0x60c>
    }
  }
 8002b8c:	bf00      	nop
 8002b8e:	e006      	b.n	8002b9e <HAL_TIM_IC_CaptureCallback+0x60e>
        break;
 8002b90:	bf00      	nop
 8002b92:	e004      	b.n	8002b9e <HAL_TIM_IC_CaptureCallback+0x60e>
        break;
 8002b94:	bf00      	nop
 8002b96:	e002      	b.n	8002b9e <HAL_TIM_IC_CaptureCallback+0x60e>
        break;
 8002b98:	bf00      	nop
 8002b9a:	e000      	b.n	8002b9e <HAL_TIM_IC_CaptureCallback+0x60e>
        break;
 8002b9c:	bf00      	nop

  if (htim->Instance == TIM8) {
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a6c      	ldr	r2, [pc, #432]	; (8002d54 <HAL_TIM_IC_CaptureCallback+0x7c4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	f040 8194 	bne.w	8002ed2 <HAL_TIM_IC_CaptureCallback+0x942>
    switch (htim->Channel) {
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	7f1b      	ldrb	r3, [r3, #28]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	f200 8190 	bhi.w	8002ed6 <HAL_TIM_IC_CaptureCallback+0x946>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <HAL_TIM_IC_CaptureCallback+0x62c>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002bdd 	.word	0x08002bdd
 8002bc0:	08002c8f 	.word	0x08002c8f
 8002bc4:	08002ed7 	.word	0x08002ed7
 8002bc8:	08002d69 	.word	0x08002d69
 8002bcc:	08002ed7 	.word	0x08002ed7
 8002bd0:	08002ed7 	.word	0x08002ed7
 8002bd4:	08002ed7 	.word	0x08002ed7
 8002bd8:	08002e1f 	.word	0x08002e1f
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET) {
 8002bdc:	2140      	movs	r1, #64	; 0x40
 8002bde:	485e      	ldr	r0, [pc, #376]	; (8002d58 <HAL_TIM_IC_CaptureCallback+0x7c8>)
 8002be0:	f004 fd9a 	bl	8007718 <HAL_GPIO_ReadPin>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_TIM_IC_CaptureCallback+0x66a>
          pwm_in[21] = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 8002bea:	2100      	movs	r1, #0
 8002bec:	485b      	ldr	r0, [pc, #364]	; (8002d5c <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8002bee:	f00a fbc7 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET) {
 8002bfa:	2140      	movs	r1, #64	; 0x40
 8002bfc:	4856      	ldr	r0, [pc, #344]	; (8002d58 <HAL_TIM_IC_CaptureCallback+0x7c8>)
 8002bfe:	f004 fd8b 	bl	8007718 <HAL_GPIO_ReadPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f040 8168 	bne.w	8002eda <HAL_TIM_IC_CaptureCallback+0x94a>
          pwm_in[22] = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4853      	ldr	r0, [pc, #332]	; (8002d5c <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8002c0e:	f00a fbb7 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002c18:	659a      	str	r2, [r3, #88]	; 0x58
          int value = pwm_in[22] - pwm_in[21];
 8002c1a:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002c1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	60fb      	str	r3, [r7, #12]
          if (value >= OPTICALFLOW_AVG_PWM - 10 && value <= OPTICALFLOW_AVG_PWM + 10) {
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b0d      	cmp	r3, #13
 8002c2a:	f340 8156 	ble.w	8002eda <HAL_TIM_IC_CaptureCallback+0x94a>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b22      	cmp	r3, #34	; 0x22
 8002c32:	f300 8152 	bgt.w	8002eda <HAL_TIM_IC_CaptureCallback+0x94a>
            pwm_in[23] = value;
 8002c36:	4a44      	ldr	r2, [pc, #272]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	65d3      	str	r3, [r2, #92]	; 0x5c
            drift.front = kalman_filter_update(&g_kf[2], pwm_in[23] - OPTICALFLOW_AVG_PWM);
 8002c3c:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	3b18      	subs	r3, #24
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4e:	4844      	ldr	r0, [pc, #272]	; (8002d60 <HAL_TIM_IC_CaptureCallback+0x7d0>)
 8002c50:	f7fd fd39 	bl	80006c6 <kalman_filter_update>
 8002c54:	eef0 7a40 	vmov.f32	s15, s0
 8002c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c5c:	ee17 2a90 	vmov	r2, s15
 8002c60:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002c62:	605a      	str	r2, [r3, #4]
            drift.dx = abs(drift.front) < abs(drift.bottom_x) ? drift.front : drift.bottom_x;
 8002c64:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002c6c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002c70:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bfb8      	it	lt
 8002c78:	425b      	neglt	r3, r3
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	da02      	bge.n	8002c84 <HAL_TIM_IC_CaptureCallback+0x6f4>
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	e001      	b.n	8002c88 <HAL_TIM_IC_CaptureCallback+0x6f8>
 8002c84:	4b32      	ldr	r3, [pc, #200]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	4a31      	ldr	r2, [pc, #196]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 8002c8c:	e125      	b.n	8002eda <HAL_TIM_IC_CaptureCallback+0x94a>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET) {
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	4831      	ldr	r0, [pc, #196]	; (8002d58 <HAL_TIM_IC_CaptureCallback+0x7c8>)
 8002c92:	f004 fd41 	bl	8007718 <HAL_GPIO_ReadPin>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IC_CaptureCallback+0x71c>
          pwm_in[24] = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 8002c9c:	2104      	movs	r1, #4
 8002c9e:	482f      	ldr	r0, [pc, #188]	; (8002d5c <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8002ca0:	f00a fb6e 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60
        }

        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET) {
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	482a      	ldr	r0, [pc, #168]	; (8002d58 <HAL_TIM_IC_CaptureCallback+0x7c8>)
 8002cb0:	f004 fd32 	bl	8007718 <HAL_GPIO_ReadPin>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8111 	bne.w	8002ede <HAL_TIM_IC_CaptureCallback+0x94e>
          pwm_in[25] = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	4827      	ldr	r0, [pc, #156]	; (8002d5c <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8002cc0:	f00a fb5e 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002cca:	665a      	str	r2, [r3, #100]	; 0x64
          int value = pwm_in[25] - pwm_in[24];
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002cce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	613b      	str	r3, [r7, #16]
          if (value >= OPTICALFLOW_AVG_PWM - 10 && value <= OPTICALFLOW_AVG_PWM + 10) {
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b0d      	cmp	r3, #13
 8002cdc:	f340 80ff 	ble.w	8002ede <HAL_TIM_IC_CaptureCallback+0x94e>
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b22      	cmp	r3, #34	; 0x22
 8002ce4:	f300 80fb 	bgt.w	8002ede <HAL_TIM_IC_CaptureCallback+0x94e>
            pwm_in[26] = value;
 8002ce8:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	6693      	str	r3, [r2, #104]	; 0x68
            drift.v_front = kalman_filter_update(&g_kf[3], pwm_in[26] - OPTICALFLOW_AVG_PWM);
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x7b8>)
 8002cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf2:	3b18      	subs	r3, #24
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002d00:	4818      	ldr	r0, [pc, #96]	; (8002d64 <HAL_TIM_IC_CaptureCallback+0x7d4>)
 8002d02:	f7fd fce0 	bl	80006c6 <kalman_filter_update>
 8002d06:	eef0 7a40 	vmov.f32	s15, s0
 8002d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d0e:	ee17 2a90 	vmov	r2, s15
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002d14:	601a      	str	r2, [r3, #0]
            drift.dh = abs(drift.v_front) < abs(drift.v_right) ? drift.v_front : drift.v_right;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002d1e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bfb8      	it	lt
 8002d2a:	425b      	neglt	r3, r3
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	da02      	bge.n	8002d36 <HAL_TIM_IC_CaptureCallback+0x7a6>
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	e001      	b.n	8002d3a <HAL_TIM_IC_CaptureCallback+0x7aa>
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x7c0>)
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
          }
        }
        break;
 8002d3e:	e0ce      	b.n	8002ede <HAL_TIM_IC_CaptureCallback+0x94e>
 8002d40:	58020000 	.word	0x58020000
 8002d44:	24000204 	.word	0x24000204
 8002d48:	2400045c 	.word	0x2400045c
 8002d4c:	24000e44 	.word	0x24000e44
 8002d50:	2400058c 	.word	0x2400058c
 8002d54:	40010400 	.word	0x40010400
 8002d58:	58020800 	.word	0x58020800
 8002d5c:	240002e8 	.word	0x240002e8
 8002d60:	24000e74 	.word	0x24000e74
 8002d64:	24000e8c 	.word	0x24000e8c
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET) {
 8002d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d6c:	4894      	ldr	r0, [pc, #592]	; (8002fc0 <HAL_TIM_IC_CaptureCallback+0xa30>)
 8002d6e:	f004 fcd3 	bl	8007718 <HAL_GPIO_ReadPin>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IC_CaptureCallback+0x7f8>
          pwm_in[27] = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_3);
 8002d78:	2108      	movs	r1, #8
 8002d7a:	4892      	ldr	r0, [pc, #584]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0xa34>)
 8002d7c:	f00a fb00 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b90      	ldr	r3, [pc, #576]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002d86:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET) {
 8002d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d8c:	488c      	ldr	r0, [pc, #560]	; (8002fc0 <HAL_TIM_IC_CaptureCallback+0xa30>)
 8002d8e:	f004 fcc3 	bl	8007718 <HAL_GPIO_ReadPin>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f040 80a4 	bne.w	8002ee2 <HAL_TIM_IC_CaptureCallback+0x952>
          pwm_in[28] = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_3);
 8002d9a:	2108      	movs	r1, #8
 8002d9c:	4889      	ldr	r0, [pc, #548]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0xa34>)
 8002d9e:	f00a faef 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002da8:	671a      	str	r2, [r3, #112]	; 0x70
          int value = pwm_in[28] - pwm_in[27];
 8002daa:	4b87      	ldr	r3, [pc, #540]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002dac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dae:	4b86      	ldr	r3, [pc, #536]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	617b      	str	r3, [r7, #20]
          if (value >= OPTICALFLOW_AVG_PWM - 10 && value <= OPTICALFLOW_AVG_PWM + 10) {
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b0d      	cmp	r3, #13
 8002dba:	f340 8092 	ble.w	8002ee2 <HAL_TIM_IC_CaptureCallback+0x952>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b22      	cmp	r3, #34	; 0x22
 8002dc2:	f300 808e 	bgt.w	8002ee2 <HAL_TIM_IC_CaptureCallback+0x952>
            pwm_in[29] = value;
 8002dc6:	4a80      	ldr	r2, [pc, #512]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	6753      	str	r3, [r2, #116]	; 0x74
            drift.right = kalman_filter_update(&g_kf[4], pwm_in[29] - OPTICALFLOW_AVG_PWM);
 8002dcc:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	3b18      	subs	r3, #24
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dda:	eeb0 0a67 	vmov.f32	s0, s15
 8002dde:	487b      	ldr	r0, [pc, #492]	; (8002fcc <HAL_TIM_IC_CaptureCallback+0xa3c>)
 8002de0:	f7fd fc71 	bl	80006c6 <kalman_filter_update>
 8002de4:	eef0 7a40 	vmov.f32	s15, s0
 8002de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dec:	ee17 2a90 	vmov	r2, s15
 8002df0:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002df2:	61da      	str	r2, [r3, #28]
            drift.dy = abs(drift.right) < abs(drift.bottom_y) ? drift.right : drift.bottom_y;
 8002df4:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002dfc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002e00:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bfb8      	it	lt
 8002e08:	425b      	neglt	r3, r3
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	da02      	bge.n	8002e14 <HAL_TIM_IC_CaptureCallback+0x884>
 8002e0e:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	e001      	b.n	8002e18 <HAL_TIM_IC_CaptureCallback+0x888>
 8002e14:	4b6e      	ldr	r3, [pc, #440]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a6d      	ldr	r2, [pc, #436]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002e1a:	6293      	str	r3, [r2, #40]	; 0x28
          }
        }
        break;
 8002e1c:	e061      	b.n	8002ee2 <HAL_TIM_IC_CaptureCallback+0x952>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET) {
 8002e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e22:	4867      	ldr	r0, [pc, #412]	; (8002fc0 <HAL_TIM_IC_CaptureCallback+0xa30>)
 8002e24:	f004 fc78 	bl	8007718 <HAL_GPIO_ReadPin>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d107      	bne.n	8002e3e <HAL_TIM_IC_CaptureCallback+0x8ae>
          pwm_in[30] = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_4);
 8002e2e:	210c      	movs	r1, #12
 8002e30:	4864      	ldr	r0, [pc, #400]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0xa34>)
 8002e32:	f00a faa5 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b63      	ldr	r3, [pc, #396]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002e3c:	679a      	str	r2, [r3, #120]	; 0x78
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET) {
 8002e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e42:	4864      	ldr	r0, [pc, #400]	; (8002fd4 <HAL_TIM_IC_CaptureCallback+0xa44>)
 8002e44:	f004 fc68 	bl	8007718 <HAL_GPIO_ReadPin>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d14b      	bne.n	8002ee6 <HAL_TIM_IC_CaptureCallback+0x956>
          pwm_in[31] = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_4);
 8002e4e:	210c      	movs	r1, #12
 8002e50:	485c      	ldr	r0, [pc, #368]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0xa34>)
 8002e52:	f00a fa95 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002e5c:	67da      	str	r2, [r3, #124]	; 0x7c
          int value = pwm_in[31] - pwm_in[30];
 8002e5e:	4b5a      	ldr	r3, [pc, #360]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002e60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002e62:	4b59      	ldr	r3, [pc, #356]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	61bb      	str	r3, [r7, #24]
          if (value >= OPTICALFLOW_AVG_PWM - 10 && value <= OPTICALFLOW_AVG_PWM + 10) {
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b0d      	cmp	r3, #13
 8002e6e:	dd3a      	ble.n	8002ee6 <HAL_TIM_IC_CaptureCallback+0x956>
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b22      	cmp	r3, #34	; 0x22
 8002e74:	dc37      	bgt.n	8002ee6 <HAL_TIM_IC_CaptureCallback+0x956>
            pwm_in[32] = value;
 8002e76:	4a54      	ldr	r2, [pc, #336]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
            drift.v_right = kalman_filter_update(&g_kf[5], pwm_in[32] - OPTICALFLOW_AVG_PWM);
 8002e7e:	4b52      	ldr	r3, [pc, #328]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e84:	3b18      	subs	r3, #24
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e92:	4851      	ldr	r0, [pc, #324]	; (8002fd8 <HAL_TIM_IC_CaptureCallback+0xa48>)
 8002e94:	f7fd fc17 	bl	80006c6 <kalman_filter_update>
 8002e98:	eef0 7a40 	vmov.f32	s15, s0
 8002e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ea0:	ee17 2a90 	vmov	r2, s15
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002ea6:	619a      	str	r2, [r3, #24]
            drift.dh = abs(drift.v_front) < abs(drift.v_right) ? drift.v_front : drift.v_right;
 8002ea8:	4b49      	ldr	r3, [pc, #292]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002eb0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002eb4:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bfb8      	it	lt
 8002ebc:	425b      	neglt	r3, r3
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	da02      	bge.n	8002ec8 <HAL_TIM_IC_CaptureCallback+0x938>
 8002ec2:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	e001      	b.n	8002ecc <HAL_TIM_IC_CaptureCallback+0x93c>
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	4a40      	ldr	r2, [pc, #256]	; (8002fd0 <HAL_TIM_IC_CaptureCallback+0xa40>)
 8002ece:	6313      	str	r3, [r2, #48]	; 0x30
          }
        }
        break;
 8002ed0:	e009      	b.n	8002ee6 <HAL_TIM_IC_CaptureCallback+0x956>
      default:
        break;
    }
  }
 8002ed2:	bf00      	nop
 8002ed4:	e008      	b.n	8002ee8 <HAL_TIM_IC_CaptureCallback+0x958>
        break;
 8002ed6:	bf00      	nop
 8002ed8:	e006      	b.n	8002ee8 <HAL_TIM_IC_CaptureCallback+0x958>
        break;
 8002eda:	bf00      	nop
 8002edc:	e004      	b.n	8002ee8 <HAL_TIM_IC_CaptureCallback+0x958>
        break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <HAL_TIM_IC_CaptureCallback+0x958>
        break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <HAL_TIM_IC_CaptureCallback+0x958>
        break;
 8002ee6:	bf00      	nop

  static char measuring = 0;
  if (measuring == 0) {
 8002ee8:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <HAL_TIM_IC_CaptureCallback+0xa4c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10e      	bne.n	8002f0e <HAL_TIM_IC_CaptureCallback+0x97e>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ef6:	483a      	ldr	r0, [pc, #232]	; (8002fe0 <HAL_TIM_IC_CaptureCallback+0xa50>)
 8002ef8:	f004 fc26 	bl	8007748 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002efc:	2201      	movs	r2, #1
 8002efe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f02:	4837      	ldr	r0, [pc, #220]	; (8002fe0 <HAL_TIM_IC_CaptureCallback+0xa50>)
 8002f04:	f004 fc20 	bl	8007748 <HAL_GPIO_WritePin>
    measuring = 1;
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <HAL_TIM_IC_CaptureCallback+0xa4c>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
  }

  if (measuring == 1 && htim->Instance == TIM17) {
 8002f0e:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <HAL_TIM_IC_CaptureCallback+0xa4c>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d14b      	bne.n	8002fae <HAL_TIM_IC_CaptureCallback+0xa1e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a32      	ldr	r2, [pc, #200]	; (8002fe4 <HAL_TIM_IC_CaptureCallback+0xa54>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d146      	bne.n	8002fae <HAL_TIM_IC_CaptureCallback+0xa1e>
    switch (htim->Channel) {
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7f1b      	ldrb	r3, [r3, #28]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d144      	bne.n	8002fb2 <HAL_TIM_IC_CaptureCallback+0xa22>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) {
 8002f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f2c:	482c      	ldr	r0, [pc, #176]	; (8002fe0 <HAL_TIM_IC_CaptureCallback+0xa50>)
 8002f2e:	f004 fbf3 	bl	8007718 <HAL_GPIO_ReadPin>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d108      	bne.n	8002f4a <HAL_TIM_IC_CaptureCallback+0x9ba>
          pwm_in[33] = HAL_TIM_ReadCapturedValue(&htim17, TIM_CHANNEL_1);
 8002f38:	2100      	movs	r1, #0
 8002f3a:	482b      	ldr	r0, [pc, #172]	; (8002fe8 <HAL_TIM_IC_CaptureCallback+0xa58>)
 8002f3c:	f00a fa20 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        }

        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_SET) {
 8002f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f4e:	4824      	ldr	r0, [pc, #144]	; (8002fe0 <HAL_TIM_IC_CaptureCallback+0xa50>)
 8002f50:	f004 fbe2 	bl	8007718 <HAL_GPIO_ReadPin>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d12d      	bne.n	8002fb6 <HAL_TIM_IC_CaptureCallback+0xa26>
          pwm_in[34] = HAL_TIM_ReadCapturedValue(&htim17, TIM_CHANNEL_1);
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4822      	ldr	r0, [pc, #136]	; (8002fe8 <HAL_TIM_IC_CaptureCallback+0xa58>)
 8002f5e:	f00a fa0f 	bl	800d380 <HAL_TIM_ReadCapturedValue>
 8002f62:	4603      	mov	r3, r0
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          int value = pwm_in[34] - pwm_in[33];
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	60bb      	str	r3, [r7, #8]
          pwm_in[35] = value;
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
          g_height = kalman_filter_update(&g_kf[6], pwm_in[35]);
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xa38>)
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f92:	eeb0 0a67 	vmov.f32	s0, s15
 8002f96:	4815      	ldr	r0, [pc, #84]	; (8002fec <HAL_TIM_IC_CaptureCallback+0xa5c>)
 8002f98:	f7fd fb95 	bl	80006c6 <kalman_filter_update>
 8002f9c:	eef0 7a40 	vmov.f32	s15, s0
 8002fa0:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <HAL_TIM_IC_CaptureCallback+0xa60>)
 8002fa2:	edc3 7a00 	vstr	s15, [r3]
          measuring = 0;
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <HAL_TIM_IC_CaptureCallback+0xa4c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002fac:	e003      	b.n	8002fb6 <HAL_TIM_IC_CaptureCallback+0xa26>
      default:
        break;
    }
  }
 8002fae:	bf00      	nop
 8002fb0:	e002      	b.n	8002fb8 <HAL_TIM_IC_CaptureCallback+0xa28>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_TIM_IC_CaptureCallback+0xa28>
        break;
 8002fb6:	bf00      	nop
}
 8002fb8:	bf00      	nop
 8002fba:	3748      	adds	r7, #72	; 0x48
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	58020800 	.word	0x58020800
 8002fc4:	240002e8 	.word	0x240002e8
 8002fc8:	2400045c 	.word	0x2400045c
 8002fcc:	24000ea4 	.word	0x24000ea4
 8002fd0:	2400058c 	.word	0x2400058c
 8002fd4:	58020000 	.word	0x58020000
 8002fd8:	24000ebc 	.word	0x24000ebc
 8002fdc:	24001024 	.word	0x24001024
 8002fe0:	58020400 	.word	0x58020400
 8002fe4:	40014800 	.word	0x40014800
 8002fe8:	24000334 	.word	0x24000334
 8002fec:	24000ed4 	.word	0x24000ed4
 8002ff0:	24000588 	.word	0x24000588

08002ff4 <schedule_400hz>:

void schedule_400hz(void) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 8002ff8:	4803      	ldr	r0, [pc, #12]	; (8003008 <schedule_400hz+0x14>)
 8002ffa:	f7fe fe25 	bl	8001c48 <MPU6050_update>
//  MS5611_update(&g_ms5611);
  fly();
 8002ffe:	f000 f827 	bl	8003050 <fly>
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	24000eec 	.word	0x24000eec

0800300c <schedule_20hz>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

}

void schedule_20hz(void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af02      	add	r7, sp, #8
      (int)g_P_roll, (int)g_I_roll, (int)g_D_roll);
  console(monitor);
#endif // 6 axis

#if MONITOR == 6
  memset(monitor, 0, 64);
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	2100      	movs	r1, #0
 8003016:	480a      	ldr	r0, [pc, #40]	; (8003040 <schedule_20hz+0x34>)
 8003018:	f00c ff98 	bl	800ff4c <memset>
//  sprintf(monitor, "$%d,%d,%d,%d,%d,%d\n",
//      drift.front, drift.v_front, drift.bottom_x,
//      drift.right, drift.v_right, drift.bottom_y);
//  console(monitor);
  sprintf(monitor, "$%d,%d,%d\n",
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <schedule_20hz+0x38>)
 800301e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <schedule_20hz+0x38>)
 8003022:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <schedule_20hz+0x38>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	460b      	mov	r3, r1
 800302c:	4906      	ldr	r1, [pc, #24]	; (8003048 <schedule_20hz+0x3c>)
 800302e:	4804      	ldr	r0, [pc, #16]	; (8003040 <schedule_20hz+0x34>)
 8003030:	f00c ff94 	bl	800ff5c <siprintf>
      drift.dy, drift.dx, drift.dh);
  console(monitor);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <schedule_20hz+0x34>)
 8003036:	f000 ffe5 	bl	8004004 <console>
  memset(monitor, 0, 64);
  sprintf(monitor, "$%d,%d,%d\n",
      (int)g_angle_error_x, (int)g_angle_error_y, (int)g_angle_error_z);
  console(monitor);
#endif // 6 axis
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	240005c0 	.word	0x240005c0
 8003044:	2400058c 	.word	0x2400058c
 8003048:	08011d00 	.word	0x08011d00
 800304c:	00000000 	.word	0x00000000

08003050 <fly>:

void fly() {
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
  float angle_x = g_mpu6050.angle_x;
 8003056:	4baa      	ldr	r3, [pc, #680]	; (8003300 <fly+0x2b0>)
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	61fb      	str	r3, [r7, #28]
  float angle_y = g_mpu6050.angle_y;
 800305c:	4ba8      	ldr	r3, [pc, #672]	; (8003300 <fly+0x2b0>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	61bb      	str	r3, [r7, #24]
  float angle_z = g_mpu6050.angle_z;
 8003062:	4ba7      	ldr	r3, [pc, #668]	; (8003300 <fly+0x2b0>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	617b      	str	r3, [r7, #20]
  float gyro_x = g_mpu6050.gyro_x;
 8003068:	4ba5      	ldr	r3, [pc, #660]	; (8003300 <fly+0x2b0>)
 800306a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306c:	613b      	str	r3, [r7, #16]
  float gyro_y = g_mpu6050.gyro_y;
 800306e:	4ba4      	ldr	r3, [pc, #656]	; (8003300 <fly+0x2b0>)
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	60fb      	str	r3, [r7, #12]
  float gyro_z = g_mpu6050.gyro_z;
 8003074:	4ba2      	ldr	r3, [pc, #648]	; (8003300 <fly+0x2b0>)
 8003076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003078:	60bb      	str	r3, [r7, #8]
  float g_drift_pitch = 0;
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  float g_drift_roll = 0;
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	623b      	str	r3, [r7, #32]

  // Add remote control bias
  g_angle_error_y = angle_y - 0.4*g_pitch; // Max 50 degree
 8003086:	edd7 7a06 	vldr	s15, [r7, #24]
 800308a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800308e:	4b9d      	ldr	r3, [pc, #628]	; (8003304 <fly+0x2b4>)
 8003090:	edd3 7a00 	vldr	s15, [r3]
 8003094:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003098:	ed9f 5b91 	vldr	d5, [pc, #580]	; 80032e0 <fly+0x290>
 800309c:	ee27 7b05 	vmul.f64	d7, d7, d5
 80030a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80030a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030a8:	4b97      	ldr	r3, [pc, #604]	; (8003308 <fly+0x2b8>)
 80030aa:	edc3 7a00 	vstr	s15, [r3]
  g_angle_error_x = angle_x - 0.4*g_roll; // Max 50 degree
 80030ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80030b2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80030b6:	4b95      	ldr	r3, [pc, #596]	; (800330c <fly+0x2bc>)
 80030b8:	edd3 7a00 	vldr	s15, [r3]
 80030bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030c0:	ed9f 5b87 	vldr	d5, [pc, #540]	; 80032e0 <fly+0x290>
 80030c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80030c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80030cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030d0:	4b8f      	ldr	r3, [pc, #572]	; (8003310 <fly+0x2c0>)
 80030d2:	edc3 7a00 	vstr	s15, [r3]
  g_angle_error_z = angle_z;
 80030d6:	4a8f      	ldr	r2, [pc, #572]	; (8003314 <fly+0x2c4>)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	6013      	str	r3, [r2, #0]
  if (abs(g_yaw) > 5) {
 80030dc:	4b8e      	ldr	r3, [pc, #568]	; (8003318 <fly+0x2c8>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e6:	ee17 3a90 	vmov	r3, s15
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bfb8      	it	lt
 80030ee:	425b      	neglt	r3, r3
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	dd38      	ble.n	8003166 <fly+0x116>
    float imbalance_coef = g_yaw > 0 ? 2.0 : 2.0;
 80030f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030f8:	607b      	str	r3, [r7, #4]
    g_angle_error_z = LIMIT(-imbalance_coef*g_yaw, -90, 90);
 80030fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fe:	eeb1 7a67 	vneg.f32	s14, s15
 8003102:	4b85      	ldr	r3, [pc, #532]	; (8003318 <fly+0x2c8>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800331c <fly+0x2cc>
 8003110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003118:	d502      	bpl.n	8003120 <fly+0xd0>
 800311a:	eddf 7a80 	vldr	s15, [pc, #512]	; 800331c <fly+0x2cc>
 800311e:	e01b      	b.n	8003158 <fly+0x108>
 8003120:	edd7 7a01 	vldr	s15, [r7, #4]
 8003124:	eeb1 7a67 	vneg.f32	s14, s15
 8003128:	4b7b      	ldr	r3, [pc, #492]	; (8003318 <fly+0x2c8>)
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003320 <fly+0x2d0>
 8003136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	dd02      	ble.n	8003146 <fly+0xf6>
 8003140:	eddf 7a77 	vldr	s15, [pc, #476]	; 8003320 <fly+0x2d0>
 8003144:	e008      	b.n	8003158 <fly+0x108>
 8003146:	edd7 7a01 	vldr	s15, [r7, #4]
 800314a:	eeb1 7a67 	vneg.f32	s14, s15
 800314e:	4b72      	ldr	r3, [pc, #456]	; (8003318 <fly+0x2c8>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003158:	4b6e      	ldr	r3, [pc, #440]	; (8003314 <fly+0x2c4>)
 800315a:	edc3 7a00 	vstr	s15, [r3]
    g_mpu6050.angle_z = 0;
 800315e:	4b68      	ldr	r3, [pc, #416]	; (8003300 <fly+0x2b0>)
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if (abs(g_pitch) < 5) {
 8003166:	4b67      	ldr	r3, [pc, #412]	; (8003304 <fly+0x2b4>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003170:	ee17 3a90 	vmov	r3, s15
 8003174:	f113 0f04 	cmn.w	r3, #4
 8003178:	db3e      	blt.n	80031f8 <fly+0x1a8>
 800317a:	4b62      	ldr	r3, [pc, #392]	; (8003304 <fly+0x2b4>)
 800317c:	edd3 7a00 	vldr	s15, [r3]
 8003180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003184:	ee17 3a90 	vmov	r3, s15
 8003188:	2b04      	cmp	r3, #4
 800318a:	dc35      	bgt.n	80031f8 <fly+0x1a8>
    g_drift_pitch = LIMIT(DRIFT_GAIN*drift.dy, -50, 50);
 800318c:	4b65      	ldr	r3, [pc, #404]	; (8003324 <fly+0x2d4>)
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003198:	ed9f 6b53 	vldr	d6, [pc, #332]	; 80032e8 <fly+0x298>
 800319c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031a0:	ed9f 6b53 	vldr	d6, [pc, #332]	; 80032f0 <fly+0x2a0>
 80031a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	d502      	bpl.n	80031b4 <fly+0x164>
 80031ae:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8003328 <fly+0x2d8>
 80031b2:	e01f      	b.n	80031f4 <fly+0x1a4>
 80031b4:	4b5b      	ldr	r3, [pc, #364]	; (8003324 <fly+0x2d4>)
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80031c0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80032e8 <fly+0x298>
 80031c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031c8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80032f8 <fly+0x2a8>
 80031cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80031d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d4:	dd02      	ble.n	80031dc <fly+0x18c>
 80031d6:	eddf 7a55 	vldr	s15, [pc, #340]	; 800332c <fly+0x2dc>
 80031da:	e00b      	b.n	80031f4 <fly+0x1a4>
 80031dc:	4b51      	ldr	r3, [pc, #324]	; (8003324 <fly+0x2d4>)
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80031e8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80032e8 <fly+0x298>
 80031ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  }
  if (abs(g_roll) < 5) {
 80031f8:	4b44      	ldr	r3, [pc, #272]	; (800330c <fly+0x2bc>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003202:	ee17 3a90 	vmov	r3, s15
 8003206:	f113 0f04 	cmn.w	r3, #4
 800320a:	db3e      	blt.n	800328a <fly+0x23a>
 800320c:	4b3f      	ldr	r3, [pc, #252]	; (800330c <fly+0x2bc>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003216:	ee17 3a90 	vmov	r3, s15
 800321a:	2b04      	cmp	r3, #4
 800321c:	dc35      	bgt.n	800328a <fly+0x23a>
    g_drift_roll = LIMIT(DRIFT_GAIN*drift.dx, -50, 50);
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <fly+0x2d4>)
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800322a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80032e8 <fly+0x298>
 800322e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003232:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80032f0 <fly+0x2a0>
 8003236:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	d502      	bpl.n	8003246 <fly+0x1f6>
 8003240:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003328 <fly+0x2d8>
 8003244:	e01f      	b.n	8003286 <fly+0x236>
 8003246:	4b37      	ldr	r3, [pc, #220]	; (8003324 <fly+0x2d4>)
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003252:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80032e8 <fly+0x298>
 8003256:	ee27 7b06 	vmul.f64	d7, d7, d6
 800325a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80032f8 <fly+0x2a8>
 800325e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003266:	dd02      	ble.n	800326e <fly+0x21e>
 8003268:	eddf 7a30 	vldr	s15, [pc, #192]	; 800332c <fly+0x2dc>
 800326c:	e00b      	b.n	8003286 <fly+0x236>
 800326e:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <fly+0x2d4>)
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800327a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80032e8 <fly+0x298>
 800327e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003282:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003286:	edc7 7a08 	vstr	s15, [r7, #32]
  }

  // Keep alive for the fly
  static int stop_counter = 0;
  if (g_stick1 == 0) {
 800328a:	4b29      	ldr	r3, [pc, #164]	; (8003330 <fly+0x2e0>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	d10b      	bne.n	80032b2 <fly+0x262>
    if (stop_counter >= 20) {
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <fly+0x2e4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b13      	cmp	r3, #19
 80032a0:	dd02      	ble.n	80032a8 <fly+0x258>
      fly_mode = init;
 80032a2:	4b25      	ldr	r3, [pc, #148]	; (8003338 <fly+0x2e8>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
    }

    stop_counter += 1;
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <fly+0x2e4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	4a21      	ldr	r2, [pc, #132]	; (8003334 <fly+0x2e4>)
 80032b0:	6013      	str	r3, [r2, #0]
  }

  switch (fly_mode) {
 80032b2:	4b21      	ldr	r3, [pc, #132]	; (8003338 <fly+0x2e8>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	f200 867e 	bhi.w	8003fb8 <fly+0xf68>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <fly+0x274>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	0800333d 	.word	0x0800333d
 80032c8:	0800341b 	.word	0x0800341b
 80032cc:	08003fb7 	.word	0x08003fb7
 80032d0:	08003469 	.word	0x08003469
 80032d4:	08003fb7 	.word	0x08003fb7
 80032d8:	08003ddd 	.word	0x08003ddd
 80032dc:	f3af 8000 	nop.w
 80032e0:	9999999a 	.word	0x9999999a
 80032e4:	3fd99999 	.word	0x3fd99999
	...
 80032f4:	c0490000 	.word	0xc0490000
 80032f8:	00000000 	.word	0x00000000
 80032fc:	40490000 	.word	0x40490000
 8003300:	24000eec 	.word	0x24000eec
 8003304:	24000560 	.word	0x24000560
 8003308:	24000414 	.word	0x24000414
 800330c:	24000564 	.word	0x24000564
 8003310:	24000410 	.word	0x24000410
 8003314:	24000418 	.word	0x24000418
 8003318:	24000568 	.word	0x24000568
 800331c:	c2b40000 	.word	0xc2b40000
 8003320:	42b40000 	.word	0x42b40000
 8003324:	2400058c 	.word	0x2400058c
 8003328:	c2480000 	.word	0xc2480000
 800332c:	42480000 	.word	0x42480000
 8003330:	2400056c 	.word	0x2400056c
 8003334:	24001028 	.word	0x24001028
 8003338:	2400101c 	.word	0x2400101c
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 800333c:	4bbe      	ldr	r3, [pc, #760]	; (8003638 <fly+0x5e8>)
 800333e:	4abf      	ldr	r2, [pc, #764]	; (800363c <fly+0x5ec>)
 8003340:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 8003342:	4bbf      	ldr	r3, [pc, #764]	; (8003640 <fly+0x5f0>)
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 800334a:	4bbe      	ldr	r3, [pc, #760]	; (8003644 <fly+0x5f4>)
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 8003352:	4bbd      	ldr	r3, [pc, #756]	; (8003648 <fly+0x5f8>)
 8003354:	4abd      	ldr	r2, [pc, #756]	; (800364c <fly+0x5fc>)
 8003356:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 8003358:	4bbd      	ldr	r3, [pc, #756]	; (8003650 <fly+0x600>)
 800335a:	4ab8      	ldr	r2, [pc, #736]	; (800363c <fly+0x5ec>)
 800335c:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 800335e:	4bbd      	ldr	r3, [pc, #756]	; (8003654 <fly+0x604>)
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 8003366:	4bbc      	ldr	r3, [pc, #752]	; (8003658 <fly+0x608>)
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 800336e:	4bbb      	ldr	r3, [pc, #748]	; (800365c <fly+0x60c>)
 8003370:	4ab6      	ldr	r2, [pc, #728]	; (800364c <fly+0x5fc>)
 8003372:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 8003374:	4bba      	ldr	r3, [pc, #744]	; (8003660 <fly+0x610>)
 8003376:	4ab1      	ldr	r2, [pc, #708]	; (800363c <fly+0x5ec>)
 8003378:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 800337a:	4bba      	ldr	r3, [pc, #744]	; (8003664 <fly+0x614>)
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 8003382:	4bb9      	ldr	r3, [pc, #740]	; (8003668 <fly+0x618>)
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 800338a:	4bb8      	ldr	r3, [pc, #736]	; (800366c <fly+0x61c>)
 800338c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003390:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003392:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003396:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800339a:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800339e:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80033a2:	f000 fe43 	bl	800402c <set_speed>

      // Reset counter before take off
      stop_counter = 0;
 80033a6:	4bb2      	ldr	r3, [pc, #712]	; (8003670 <fly+0x620>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

      // Reset angle before take off
      g_mpu6050.angle_z = 0;
 80033ac:	4bb1      	ldr	r3, [pc, #708]	; (8003674 <fly+0x624>)
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44

      // Move sticks to make it ready to take off
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 80033b4:	4bb0      	ldr	r3, [pc, #704]	; (8003678 <fly+0x628>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c2:	d901      	bls.n	80033c8 <fly+0x378>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
        fly_mode = ready;
      }

      break;
 80033c4:	f000 bdf8 	b.w	8003fb8 <fly+0xf68>
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 80033c8:	4bac      	ldr	r3, [pc, #688]	; (800367c <fly+0x62c>)
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003680 <fly+0x630>
 80033d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033da:	d901      	bls.n	80033e0 <fly+0x390>
      break;
 80033dc:	f000 bdec 	b.w	8003fb8 <fly+0xf68>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 80033e0:	4ba8      	ldr	r3, [pc, #672]	; (8003684 <fly+0x634>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003680 <fly+0x630>
 80033ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f2:	d901      	bls.n	80033f8 <fly+0x3a8>
      break;
 80033f4:	f000 bde0 	b.w	8003fb8 <fly+0xf68>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 80033f8:	4ba3      	ldr	r3, [pc, #652]	; (8003688 <fly+0x638>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800368c <fly+0x63c>
 8003402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	da01      	bge.n	8003410 <fly+0x3c0>
      break;
 800340c:	f000 bdd4 	b.w	8003fb8 <fly+0xf68>
        fly_mode = ready;
 8003410:	4b9f      	ldr	r3, [pc, #636]	; (8003690 <fly+0x640>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
      break;
 8003416:	f000 bdcf 	b.w	8003fb8 <fly+0xf68>
    case ready:
      // Reset accumulated integral before take off
      g_I_pitch_accumulated = 0;
 800341a:	4b9e      	ldr	r3, [pc, #632]	; (8003694 <fly+0x644>)
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003422:	4b9d      	ldr	r3, [pc, #628]	; (8003698 <fly+0x648>)
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 800342a:	4b9c      	ldr	r3, [pc, #624]	; (800369c <fly+0x64c>)
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003432:	f640 2328 	movw	r3, #2600	; 0xa28
 8003436:	f640 2228 	movw	r2, #2600	; 0xa28
 800343a:	f640 2128 	movw	r1, #2600	; 0xa28
 800343e:	f640 2028 	movw	r0, #2600	; 0xa28
 8003442:	f000 fdf3 	bl	800402c <set_speed>

      // Switch to fly mode
      if (g_throttle > 5) {
 8003446:	4b8c      	ldr	r3, [pc, #560]	; (8003678 <fly+0x628>)
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	dc01      	bgt.n	800345e <fly+0x40e>
        fly_mode = moving;
      }

      break;
 800345a:	f000 bdad 	b.w	8003fb8 <fly+0xf68>
        fly_mode = moving;
 800345e:	4b8c      	ldr	r3, [pc, #560]	; (8003690 <fly+0x640>)
 8003460:	2203      	movs	r2, #3
 8003462:	701a      	strb	r2, [r3, #0]
      break;
 8003464:	f000 bda8 	b.w	8003fb8 <fly+0xf68>
    case holding:

      break;
    case moving:
      g_P_pitch = LIMIT(g_angle_error_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8003468:	4b8d      	ldr	r3, [pc, #564]	; (80036a0 <fly+0x650>)
 800346a:	ed93 7a00 	vldr	s14, [r3]
 800346e:	4b72      	ldr	r3, [pc, #456]	; (8003638 <fly+0x5e8>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003478:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80036a4 <fly+0x654>
 800347c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	d502      	bpl.n	800348c <fly+0x43c>
 8003486:	eddf 7a87 	vldr	s15, [pc, #540]	; 80036a4 <fly+0x654>
 800348a:	e019      	b.n	80034c0 <fly+0x470>
 800348c:	4b84      	ldr	r3, [pc, #528]	; (80036a0 <fly+0x650>)
 800348e:	ed93 7a00 	vldr	s14, [r3]
 8003492:	4b69      	ldr	r3, [pc, #420]	; (8003638 <fly+0x5e8>)
 8003494:	edd3 7a00 	vldr	s15, [r3]
 8003498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80036a8 <fly+0x658>
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	dd02      	ble.n	80034b0 <fly+0x460>
 80034aa:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80036a8 <fly+0x658>
 80034ae:	e007      	b.n	80034c0 <fly+0x470>
 80034b0:	4b7b      	ldr	r3, [pc, #492]	; (80036a0 <fly+0x650>)
 80034b2:	ed93 7a00 	vldr	s14, [r3]
 80034b6:	4b60      	ldr	r3, [pc, #384]	; (8003638 <fly+0x5e8>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c0:	4b7a      	ldr	r3, [pc, #488]	; (80036ac <fly+0x65c>)
 80034c2:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += g_angle_error_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 80034c6:	4b73      	ldr	r3, [pc, #460]	; (8003694 <fly+0x644>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034d0:	4b73      	ldr	r3, [pc, #460]	; (80036a0 <fly+0x650>)
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034da:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8003620 <fly+0x5d0>
 80034de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80034e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80034e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80034ea:	4b6a      	ldr	r3, [pc, #424]	; (8003694 <fly+0x644>)
 80034ec:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated = LIMIT(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 80034f0:	4b68      	ldr	r3, [pc, #416]	; (8003694 <fly+0x644>)
 80034f2:	edd3 7a00 	vldr	s15, [r3]
 80034f6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034fa:	4b51      	ldr	r3, [pc, #324]	; (8003640 <fly+0x5f0>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003504:	ed9f 4b48 	vldr	d4, [pc, #288]	; 8003628 <fly+0x5d8>
 8003508:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800350c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	d507      	bpl.n	8003526 <fly+0x4d6>
 8003516:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <fly+0x5f0>)
 8003518:	ed93 7a00 	vldr	s14, [r3]
 800351c:	eddf 6a64 	vldr	s13, [pc, #400]	; 80036b0 <fly+0x660>
 8003520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003524:	e01d      	b.n	8003562 <fly+0x512>
 8003526:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <fly+0x644>)
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003530:	4b43      	ldr	r3, [pc, #268]	; (8003640 <fly+0x5f0>)
 8003532:	edd3 7a00 	vldr	s15, [r3]
 8003536:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800353a:	ed9f 4b3d 	vldr	d4, [pc, #244]	; 8003630 <fly+0x5e0>
 800353e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003542:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354a:	dd07      	ble.n	800355c <fly+0x50c>
 800354c:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <fly+0x5f0>)
 800354e:	ed93 7a00 	vldr	s14, [r3]
 8003552:	eddf 6a58 	vldr	s13, [pc, #352]	; 80036b4 <fly+0x664>
 8003556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800355a:	e002      	b.n	8003562 <fly+0x512>
 800355c:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <fly+0x644>)
 800355e:	edd3 7a00 	vldr	s15, [r3]
 8003562:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <fly+0x644>)
 8003564:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 8003568:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <fly+0x644>)
 800356a:	ed93 7a00 	vldr	s14, [r3]
 800356e:	4b34      	ldr	r3, [pc, #208]	; (8003640 <fly+0x5f0>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003578:	4b4f      	ldr	r3, [pc, #316]	; (80036b8 <fly+0x668>)
 800357a:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = LIMIT(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 800357e:	4b32      	ldr	r3, [pc, #200]	; (8003648 <fly+0x5f8>)
 8003580:	ed93 7a00 	vldr	s14, [r3]
 8003584:	edd7 7a04 	vldr	s15, [r7, #16]
 8003588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80036a4 <fly+0x654>
 8003590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003598:	d502      	bpl.n	80035a0 <fly+0x550>
 800359a:	eddf 7a42 	vldr	s15, [pc, #264]	; 80036a4 <fly+0x654>
 800359e:	e017      	b.n	80035d0 <fly+0x580>
 80035a0:	4b29      	ldr	r3, [pc, #164]	; (8003648 <fly+0x5f8>)
 80035a2:	ed93 7a00 	vldr	s14, [r3]
 80035a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80036a8 <fly+0x658>
 80035b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ba:	dd02      	ble.n	80035c2 <fly+0x572>
 80035bc:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80036a8 <fly+0x658>
 80035c0:	e006      	b.n	80035d0 <fly+0x580>
 80035c2:	4b21      	ldr	r3, [pc, #132]	; (8003648 <fly+0x5f8>)
 80035c4:	ed93 7a00 	vldr	s14, [r3]
 80035c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80035cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d0:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <fly+0x66c>)
 80035d2:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = LIMIT(g_angle_error_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 80035d6:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <fly+0x670>)
 80035d8:	ed93 7a00 	vldr	s14, [r3]
 80035dc:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <fly+0x600>)
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80036a4 <fly+0x654>
 80035ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d502      	bpl.n	80035fa <fly+0x5aa>
 80035f4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80036a4 <fly+0x654>
 80035f8:	e06c      	b.n	80036d4 <fly+0x684>
 80035fa:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <fly+0x670>)
 80035fc:	ed93 7a00 	vldr	s14, [r3]
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <fly+0x600>)
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80036a8 <fly+0x658>
 800360e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	dd55      	ble.n	80036c4 <fly+0x674>
 8003618:	eddf 7a23 	vldr	s15, [pc, #140]	; 80036a8 <fly+0x658>
 800361c:	e05a      	b.n	80036d4 <fly+0x684>
 800361e:	bf00      	nop
	...
 800362c:	c0704000 	.word	0xc0704000
 8003630:	00000000 	.word	0x00000000
 8003634:	40704000 	.word	0x40704000
 8003638:	24000000 	.word	0x24000000
 800363c:	40e00000 	.word	0x40e00000
 8003640:	24000570 	.word	0x24000570
 8003644:	24000574 	.word	0x24000574
 8003648:	24000004 	.word	0x24000004
 800364c:	3fcccccd 	.word	0x3fcccccd
 8003650:	24000008 	.word	0x24000008
 8003654:	24000578 	.word	0x24000578
 8003658:	2400057c 	.word	0x2400057c
 800365c:	2400000c 	.word	0x2400000c
 8003660:	24000010 	.word	0x24000010
 8003664:	24000580 	.word	0x24000580
 8003668:	24000584 	.word	0x24000584
 800366c:	24000014 	.word	0x24000014
 8003670:	24001028 	.word	0x24001028
 8003674:	24000eec 	.word	0x24000eec
 8003678:	2400055c 	.word	0x2400055c
 800367c:	24000568 	.word	0x24000568
 8003680:	c2f40000 	.word	0xc2f40000
 8003684:	24000560 	.word	0x24000560
 8003688:	24000564 	.word	0x24000564
 800368c:	42f40000 	.word	0x42f40000
 8003690:	2400101c 	.word	0x2400101c
 8003694:	24000424 	.word	0x24000424
 8003698:	24000434 	.word	0x24000434
 800369c:	24000444 	.word	0x24000444
 80036a0:	24000414 	.word	0x24000414
 80036a4:	c4430000 	.word	0xc4430000
 80036a8:	44430000 	.word	0x44430000
 80036ac:	2400041c 	.word	0x2400041c
 80036b0:	c3820000 	.word	0xc3820000
 80036b4:	43820000 	.word	0x43820000
 80036b8:	24000420 	.word	0x24000420
 80036bc:	24000428 	.word	0x24000428
 80036c0:	24000410 	.word	0x24000410
 80036c4:	4baa      	ldr	r3, [pc, #680]	; (8003970 <fly+0x920>)
 80036c6:	ed93 7a00 	vldr	s14, [r3]
 80036ca:	4baa      	ldr	r3, [pc, #680]	; (8003974 <fly+0x924>)
 80036cc:	edd3 7a00 	vldr	s15, [r3]
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	4ba8      	ldr	r3, [pc, #672]	; (8003978 <fly+0x928>)
 80036d6:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += g_angle_error_x*I_ROLL_PERIOD;
 80036da:	4ba8      	ldr	r3, [pc, #672]	; (800397c <fly+0x92c>)
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80036e4:	4ba2      	ldr	r3, [pc, #648]	; (8003970 <fly+0x920>)
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036ee:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8003948 <fly+0x8f8>
 80036f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80036f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80036fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036fe:	4b9f      	ldr	r3, [pc, #636]	; (800397c <fly+0x92c>)
 8003700:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated = LIMIT(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 8003704:	4b9d      	ldr	r3, [pc, #628]	; (800397c <fly+0x92c>)
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800370e:	4b9c      	ldr	r3, [pc, #624]	; (8003980 <fly+0x930>)
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003718:	ed9f 4b8d 	vldr	d4, [pc, #564]	; 8003950 <fly+0x900>
 800371c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003720:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003728:	d507      	bpl.n	800373a <fly+0x6ea>
 800372a:	4b95      	ldr	r3, [pc, #596]	; (8003980 <fly+0x930>)
 800372c:	ed93 7a00 	vldr	s14, [r3]
 8003730:	eddf 6a94 	vldr	s13, [pc, #592]	; 8003984 <fly+0x934>
 8003734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003738:	e01d      	b.n	8003776 <fly+0x726>
 800373a:	4b90      	ldr	r3, [pc, #576]	; (800397c <fly+0x92c>)
 800373c:	edd3 7a00 	vldr	s15, [r3]
 8003740:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003744:	4b8e      	ldr	r3, [pc, #568]	; (8003980 <fly+0x930>)
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800374e:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8003958 <fly+0x908>
 8003752:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003756:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	dd07      	ble.n	8003770 <fly+0x720>
 8003760:	4b87      	ldr	r3, [pc, #540]	; (8003980 <fly+0x930>)
 8003762:	ed93 7a00 	vldr	s14, [r3]
 8003766:	eddf 6a88 	vldr	s13, [pc, #544]	; 8003988 <fly+0x938>
 800376a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376e:	e002      	b.n	8003776 <fly+0x726>
 8003770:	4b82      	ldr	r3, [pc, #520]	; (800397c <fly+0x92c>)
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	4b81      	ldr	r3, [pc, #516]	; (800397c <fly+0x92c>)
 8003778:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 800377c:	4b7f      	ldr	r3, [pc, #508]	; (800397c <fly+0x92c>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b7f      	ldr	r3, [pc, #508]	; (8003980 <fly+0x930>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378c:	4b7f      	ldr	r3, [pc, #508]	; (800398c <fly+0x93c>)
 800378e:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = LIMIT(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 8003792:	4b7f      	ldr	r3, [pc, #508]	; (8003990 <fly+0x940>)
 8003794:	ed93 7a00 	vldr	s14, [r3]
 8003798:	edd7 7a03 	vldr	s15, [r7, #12]
 800379c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a0:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003994 <fly+0x944>
 80037a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ac:	d502      	bpl.n	80037b4 <fly+0x764>
 80037ae:	eddf 7a79 	vldr	s15, [pc, #484]	; 8003994 <fly+0x944>
 80037b2:	e017      	b.n	80037e4 <fly+0x794>
 80037b4:	4b76      	ldr	r3, [pc, #472]	; (8003990 <fly+0x940>)
 80037b6:	ed93 7a00 	vldr	s14, [r3]
 80037ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003998 <fly+0x948>
 80037c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ce:	dd02      	ble.n	80037d6 <fly+0x786>
 80037d0:	eddf 7a71 	vldr	s15, [pc, #452]	; 8003998 <fly+0x948>
 80037d4:	e006      	b.n	80037e4 <fly+0x794>
 80037d6:	4b6e      	ldr	r3, [pc, #440]	; (8003990 <fly+0x940>)
 80037d8:	ed93 7a00 	vldr	s14, [r3]
 80037dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e4:	4b6d      	ldr	r3, [pc, #436]	; (800399c <fly+0x94c>)
 80037e6:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = LIMIT(g_angle_error_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 80037ea:	4b6d      	ldr	r3, [pc, #436]	; (80039a0 <fly+0x950>)
 80037ec:	ed93 7a00 	vldr	s14, [r3]
 80037f0:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <fly+0x954>)
 80037f2:	edd3 7a00 	vldr	s15, [r3]
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fa:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003994 <fly+0x944>
 80037fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003806:	d502      	bpl.n	800380e <fly+0x7be>
 8003808:	eddf 7a62 	vldr	s15, [pc, #392]	; 8003994 <fly+0x944>
 800380c:	e019      	b.n	8003842 <fly+0x7f2>
 800380e:	4b64      	ldr	r3, [pc, #400]	; (80039a0 <fly+0x950>)
 8003810:	ed93 7a00 	vldr	s14, [r3]
 8003814:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <fly+0x954>)
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003998 <fly+0x948>
 8003822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	dd02      	ble.n	8003832 <fly+0x7e2>
 800382c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003998 <fly+0x948>
 8003830:	e007      	b.n	8003842 <fly+0x7f2>
 8003832:	4b5b      	ldr	r3, [pc, #364]	; (80039a0 <fly+0x950>)
 8003834:	ed93 7a00 	vldr	s14, [r3]
 8003838:	4b5a      	ldr	r3, [pc, #360]	; (80039a4 <fly+0x954>)
 800383a:	edd3 7a00 	vldr	s15, [r3]
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <fly+0x958>)
 8003844:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += g_angle_error_z*I_YAW_PERIOD;
 8003848:	4b58      	ldr	r3, [pc, #352]	; (80039ac <fly+0x95c>)
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003852:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <fly+0x950>)
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800385c:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8003948 <fly+0x8f8>
 8003860:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003864:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003868:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <fly+0x95c>)
 800386e:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated = LIMIT(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 8003872:	4b4e      	ldr	r3, [pc, #312]	; (80039ac <fly+0x95c>)
 8003874:	edd3 7a00 	vldr	s15, [r3]
 8003878:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800387c:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <fly+0x960>)
 800387e:	edd3 7a00 	vldr	s15, [r3]
 8003882:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003886:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8003960 <fly+0x910>
 800388a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800388e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	d507      	bpl.n	80038a8 <fly+0x858>
 8003898:	4b45      	ldr	r3, [pc, #276]	; (80039b0 <fly+0x960>)
 800389a:	ed93 7a00 	vldr	s14, [r3]
 800389e:	eddf 6a45 	vldr	s13, [pc, #276]	; 80039b4 <fly+0x964>
 80038a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a6:	e01d      	b.n	80038e4 <fly+0x894>
 80038a8:	4b40      	ldr	r3, [pc, #256]	; (80039ac <fly+0x95c>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038b2:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <fly+0x960>)
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80038bc:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 8003968 <fly+0x918>
 80038c0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80038c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	dd07      	ble.n	80038de <fly+0x88e>
 80038ce:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <fly+0x960>)
 80038d0:	ed93 7a00 	vldr	s14, [r3]
 80038d4:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039b8 <fly+0x968>
 80038d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038dc:	e002      	b.n	80038e4 <fly+0x894>
 80038de:	4b33      	ldr	r3, [pc, #204]	; (80039ac <fly+0x95c>)
 80038e0:	edd3 7a00 	vldr	s15, [r3]
 80038e4:	4b31      	ldr	r3, [pc, #196]	; (80039ac <fly+0x95c>)
 80038e6:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <fly+0x95c>)
 80038ec:	ed93 7a00 	vldr	s14, [r3]
 80038f0:	4b2f      	ldr	r3, [pc, #188]	; (80039b0 <fly+0x960>)
 80038f2:	edd3 7a00 	vldr	s15, [r3]
 80038f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fa:	4b30      	ldr	r3, [pc, #192]	; (80039bc <fly+0x96c>)
 80038fc:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = LIMIT(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 8003900:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <fly+0x970>)
 8003902:	ed93 7a00 	vldr	s14, [r3]
 8003906:	edd7 7a02 	vldr	s15, [r7, #8]
 800390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003994 <fly+0x944>
 8003912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391a:	d502      	bpl.n	8003922 <fly+0x8d2>
 800391c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003994 <fly+0x944>
 8003920:	e057      	b.n	80039d2 <fly+0x982>
 8003922:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <fly+0x970>)
 8003924:	ed93 7a00 	vldr	s14, [r3]
 8003928:	edd7 7a02 	vldr	s15, [r7, #8]
 800392c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003930:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003998 <fly+0x948>
 8003934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393c:	dd42      	ble.n	80039c4 <fly+0x974>
 800393e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003998 <fly+0x948>
 8003942:	e046      	b.n	80039d2 <fly+0x982>
 8003944:	f3af 8000 	nop.w
	...
 8003954:	c0604000 	.word	0xc0604000
 8003958:	00000000 	.word	0x00000000
 800395c:	40604000 	.word	0x40604000
 8003960:	00000000 	.word	0x00000000
 8003964:	c0704000 	.word	0xc0704000
 8003968:	00000000 	.word	0x00000000
 800396c:	40704000 	.word	0x40704000
 8003970:	24000410 	.word	0x24000410
 8003974:	24000008 	.word	0x24000008
 8003978:	2400042c 	.word	0x2400042c
 800397c:	24000434 	.word	0x24000434
 8003980:	24000578 	.word	0x24000578
 8003984:	c3020000 	.word	0xc3020000
 8003988:	43020000 	.word	0x43020000
 800398c:	24000430 	.word	0x24000430
 8003990:	2400000c 	.word	0x2400000c
 8003994:	c4430000 	.word	0xc4430000
 8003998:	44430000 	.word	0x44430000
 800399c:	24000438 	.word	0x24000438
 80039a0:	24000418 	.word	0x24000418
 80039a4:	24000010 	.word	0x24000010
 80039a8:	2400043c 	.word	0x2400043c
 80039ac:	24000444 	.word	0x24000444
 80039b0:	24000580 	.word	0x24000580
 80039b4:	c3820000 	.word	0xc3820000
 80039b8:	43820000 	.word	0x43820000
 80039bc:	24000440 	.word	0x24000440
 80039c0:	24000014 	.word	0x24000014
 80039c4:	4bc0      	ldr	r3, [pc, #768]	; (8003cc8 <fly+0xc78>)
 80039c6:	ed93 7a00 	vldr	s14, [r3]
 80039ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	4bbe      	ldr	r3, [pc, #760]	; (8003ccc <fly+0xc7c>)
 80039d4:	edc3 7a00 	vstr	s15, [r3]

      float background = MIN_SPEED + 5*(15.81f*sqrt(g_throttle));
 80039d8:	4bbd      	ldr	r3, [pc, #756]	; (8003cd0 <fly+0xc80>)
 80039da:	edd3 7a00 	vldr	s15, [r3]
 80039de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039e2:	eeb0 0b47 	vmov.f64	d0, d7
 80039e6:	f00d fa27 	bl	8010e38 <sqrt>
 80039ea:	eeb0 7b40 	vmov.f64	d7, d0
 80039ee:	ed9f 6bb2 	vldr	d6, [pc, #712]	; 8003cb8 <fly+0xc68>
 80039f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80039f6:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 80039fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80039fe:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8003cc0 <fly+0xc70>
 8003a02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a0a:	edc7 7a00 	vstr	s15, [r7]

      g_sig1 = background + (g_P_pitch + g_I_pitch + g_D_pitch + g_drift_pitch) - (g_P_roll + g_I_roll + g_D_roll + g_drift_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003a0e:	4bb1      	ldr	r3, [pc, #708]	; (8003cd4 <fly+0xc84>)
 8003a10:	ed93 7a00 	vldr	s14, [r3]
 8003a14:	4bb0      	ldr	r3, [pc, #704]	; (8003cd8 <fly+0xc88>)
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a1e:	4baf      	ldr	r3, [pc, #700]	; (8003cdc <fly+0xc8c>)
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a30:	edd7 7a00 	vldr	s15, [r7]
 8003a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a38:	4ba9      	ldr	r3, [pc, #676]	; (8003ce0 <fly+0xc90>)
 8003a3a:	edd3 6a00 	vldr	s13, [r3]
 8003a3e:	4ba9      	ldr	r3, [pc, #676]	; (8003ce4 <fly+0xc94>)
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a48:	4ba7      	ldr	r3, [pc, #668]	; (8003ce8 <fly+0xc98>)
 8003a4a:	edd3 7a00 	vldr	s15, [r3]
 8003a4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a52:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a5e:	4ba3      	ldr	r3, [pc, #652]	; (8003cec <fly+0xc9c>)
 8003a60:	edd3 6a00 	vldr	s13, [r3]
 8003a64:	4ba2      	ldr	r3, [pc, #648]	; (8003cf0 <fly+0xca0>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a6e:	4b97      	ldr	r3, [pc, #604]	; (8003ccc <fly+0xc7c>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a7c:	4b9d      	ldr	r3, [pc, #628]	; (8003cf4 <fly+0xca4>)
 8003a7e:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = background + (g_P_pitch + g_I_pitch + g_D_pitch + g_drift_pitch) + (g_P_roll + g_I_roll + g_D_roll + g_drift_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003a82:	4b94      	ldr	r3, [pc, #592]	; (8003cd4 <fly+0xc84>)
 8003a84:	ed93 7a00 	vldr	s14, [r3]
 8003a88:	4b93      	ldr	r3, [pc, #588]	; (8003cd8 <fly+0xc88>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a92:	4b92      	ldr	r3, [pc, #584]	; (8003cdc <fly+0xc8c>)
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aa4:	edd7 7a00 	vldr	s15, [r7]
 8003aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aac:	4b8c      	ldr	r3, [pc, #560]	; (8003ce0 <fly+0xc90>)
 8003aae:	edd3 6a00 	vldr	s13, [r3]
 8003ab2:	4b8c      	ldr	r3, [pc, #560]	; (8003ce4 <fly+0xc94>)
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003abc:	4b8a      	ldr	r3, [pc, #552]	; (8003ce8 <fly+0xc98>)
 8003abe:	edd3 7a00 	vldr	s15, [r3]
 8003ac2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ac6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ace:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ad2:	4b86      	ldr	r3, [pc, #536]	; (8003cec <fly+0xc9c>)
 8003ad4:	edd3 6a00 	vldr	s13, [r3]
 8003ad8:	4b85      	ldr	r3, [pc, #532]	; (8003cf0 <fly+0xca0>)
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ae2:	4b7a      	ldr	r3, [pc, #488]	; (8003ccc <fly+0xc7c>)
 8003ae4:	edd3 7a00 	vldr	s15, [r3]
 8003ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af0:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <fly+0xca8>)
 8003af2:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = background - (g_P_pitch + g_I_pitch + g_D_pitch + g_drift_pitch) + (g_P_roll + g_I_roll + g_D_roll + g_drift_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003af6:	4b77      	ldr	r3, [pc, #476]	; (8003cd4 <fly+0xc84>)
 8003af8:	ed93 7a00 	vldr	s14, [r3]
 8003afc:	4b76      	ldr	r3, [pc, #472]	; (8003cd8 <fly+0xc88>)
 8003afe:	edd3 7a00 	vldr	s15, [r3]
 8003b02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b06:	4b75      	ldr	r3, [pc, #468]	; (8003cdc <fly+0xc8c>)
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b10:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	ed97 7a00 	vldr	s14, [r7]
 8003b1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b20:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <fly+0xc90>)
 8003b22:	edd3 6a00 	vldr	s13, [r3]
 8003b26:	4b6f      	ldr	r3, [pc, #444]	; (8003ce4 <fly+0xc94>)
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b30:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <fly+0xc98>)
 8003b32:	edd3 7a00 	vldr	s15, [r3]
 8003b36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b46:	4b69      	ldr	r3, [pc, #420]	; (8003cec <fly+0xc9c>)
 8003b48:	edd3 6a00 	vldr	s13, [r3]
 8003b4c:	4b68      	ldr	r3, [pc, #416]	; (8003cf0 <fly+0xca0>)
 8003b4e:	edd3 7a00 	vldr	s15, [r3]
 8003b52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b56:	4b5d      	ldr	r3, [pc, #372]	; (8003ccc <fly+0xc7c>)
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b64:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <fly+0xcac>)
 8003b66:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = background - (g_P_pitch + g_I_pitch + g_D_pitch + g_drift_pitch) - (g_P_roll + g_I_roll + g_D_roll + g_drift_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003b6a:	4b5a      	ldr	r3, [pc, #360]	; (8003cd4 <fly+0xc84>)
 8003b6c:	ed93 7a00 	vldr	s14, [r3]
 8003b70:	4b59      	ldr	r3, [pc, #356]	; (8003cd8 <fly+0xc88>)
 8003b72:	edd3 7a00 	vldr	s15, [r3]
 8003b76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b7a:	4b58      	ldr	r3, [pc, #352]	; (8003cdc <fly+0xc8c>)
 8003b7c:	edd3 7a00 	vldr	s15, [r3]
 8003b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8c:	ed97 7a00 	vldr	s14, [r7]
 8003b90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b94:	4b52      	ldr	r3, [pc, #328]	; (8003ce0 <fly+0xc90>)
 8003b96:	edd3 6a00 	vldr	s13, [r3]
 8003b9a:	4b52      	ldr	r3, [pc, #328]	; (8003ce4 <fly+0xc94>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ba4:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <fly+0xc98>)
 8003ba6:	edd3 7a00 	vldr	s15, [r3]
 8003baa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003bae:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bba:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <fly+0xc9c>)
 8003bbc:	edd3 6a00 	vldr	s13, [r3]
 8003bc0:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <fly+0xca0>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003bca:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <fly+0xc7c>)
 8003bcc:	edd3 7a00 	vldr	s15, [r3]
 8003bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd8:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <fly+0xcb0>)
 8003bda:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = LIMIT(g_sig1, MIN_SPEED, MAX_SPEED);
 8003bde:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <fly+0xca4>)
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003d04 <fly+0xcb4>
 8003be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf0:	d501      	bpl.n	8003bf6 <fly+0xba6>
 8003bf2:	4b45      	ldr	r3, [pc, #276]	; (8003d08 <fly+0xcb8>)
 8003bf4:	e00d      	b.n	8003c12 <fly+0xbc2>
 8003bf6:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <fly+0xca4>)
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003d0c <fly+0xcbc>
 8003c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c08:	dd01      	ble.n	8003c0e <fly+0xbbe>
 8003c0a:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <fly+0xcc0>)
 8003c0c:	e001      	b.n	8003c12 <fly+0xbc2>
 8003c0e:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <fly+0xca4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a38      	ldr	r2, [pc, #224]	; (8003cf4 <fly+0xca4>)
 8003c14:	6013      	str	r3, [r2, #0]
      g_sig2 = LIMIT(g_sig2, MIN_SPEED, MAX_SPEED);
 8003c16:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <fly+0xca8>)
 8003c18:	edd3 7a00 	vldr	s15, [r3]
 8003c1c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003d04 <fly+0xcb4>
 8003c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	d501      	bpl.n	8003c2e <fly+0xbde>
 8003c2a:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <fly+0xcb8>)
 8003c2c:	e00d      	b.n	8003c4a <fly+0xbfa>
 8003c2e:	4b32      	ldr	r3, [pc, #200]	; (8003cf8 <fly+0xca8>)
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003d0c <fly+0xcbc>
 8003c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	dd01      	ble.n	8003c46 <fly+0xbf6>
 8003c42:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <fly+0xcc0>)
 8003c44:	e001      	b.n	8003c4a <fly+0xbfa>
 8003c46:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <fly+0xca8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2b      	ldr	r2, [pc, #172]	; (8003cf8 <fly+0xca8>)
 8003c4c:	6013      	str	r3, [r2, #0]
      g_sig3 = LIMIT(g_sig3, MIN_SPEED, MAX_SPEED);
 8003c4e:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <fly+0xcac>)
 8003c50:	edd3 7a00 	vldr	s15, [r3]
 8003c54:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003d04 <fly+0xcb4>
 8003c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c60:	d501      	bpl.n	8003c66 <fly+0xc16>
 8003c62:	4b29      	ldr	r3, [pc, #164]	; (8003d08 <fly+0xcb8>)
 8003c64:	e00d      	b.n	8003c82 <fly+0xc32>
 8003c66:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <fly+0xcac>)
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003d0c <fly+0xcbc>
 8003c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	dd01      	ble.n	8003c7e <fly+0xc2e>
 8003c7a:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <fly+0xcc0>)
 8003c7c:	e001      	b.n	8003c82 <fly+0xc32>
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <fly+0xcac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <fly+0xcac>)
 8003c84:	6013      	str	r3, [r2, #0]
      g_sig4 = LIMIT(g_sig4, MIN_SPEED, MAX_SPEED);
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <fly+0xcb0>)
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003d04 <fly+0xcb4>
 8003c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c98:	d501      	bpl.n	8003c9e <fly+0xc4e>
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <fly+0xcb8>)
 8003c9c:	e03c      	b.n	8003d18 <fly+0xcc8>
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <fly+0xcb0>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003d0c <fly+0xcbc>
 8003ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb0:	dd30      	ble.n	8003d14 <fly+0xcc4>
 8003cb2:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <fly+0xcc0>)
 8003cb4:	e030      	b.n	8003d18 <fly+0xcc8>
 8003cb6:	bf00      	nop
 8003cb8:	60000000 	.word	0x60000000
 8003cbc:	402f9eb8 	.word	0x402f9eb8
 8003cc0:	00000000 	.word	0x00000000
 8003cc4:	40a45000 	.word	0x40a45000
 8003cc8:	24000014 	.word	0x24000014
 8003ccc:	24000448 	.word	0x24000448
 8003cd0:	2400055c 	.word	0x2400055c
 8003cd4:	2400041c 	.word	0x2400041c
 8003cd8:	24000420 	.word	0x24000420
 8003cdc:	24000428 	.word	0x24000428
 8003ce0:	2400042c 	.word	0x2400042c
 8003ce4:	24000430 	.word	0x24000430
 8003ce8:	24000438 	.word	0x24000438
 8003cec:	2400043c 	.word	0x2400043c
 8003cf0:	24000440 	.word	0x24000440
 8003cf4:	2400044c 	.word	0x2400044c
 8003cf8:	24000450 	.word	0x24000450
 8003cfc:	24000454 	.word	0x24000454
 8003d00:	24000458 	.word	0x24000458
 8003d04:	45228000 	.word	0x45228000
 8003d08:	45228000 	.word	0x45228000
 8003d0c:	45a28000 	.word	0x45a28000
 8003d10:	45a28000 	.word	0x45a28000
 8003d14:	4baa      	ldr	r3, [pc, #680]	; (8003fc0 <fly+0xf70>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4aa9      	ldr	r2, [pc, #676]	; (8003fc0 <fly+0xf70>)
 8003d1a:	6013      	str	r3, [r2, #0]

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003d1c:	4ba9      	ldr	r3, [pc, #676]	; (8003fc4 <fly+0xf74>)
 8003d1e:	edd3 7a00 	vldr	s15, [r3]
 8003d22:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003d26:	4ba8      	ldr	r3, [pc, #672]	; (8003fc8 <fly+0xf78>)
 8003d28:	edd3 7a00 	vldr	s15, [r3]
 8003d2c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003d30:	4ba6      	ldr	r3, [pc, #664]	; (8003fcc <fly+0xf7c>)
 8003d32:	edd3 7a00 	vldr	s15, [r3]
 8003d36:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003d3a:	4ba1      	ldr	r3, [pc, #644]	; (8003fc0 <fly+0xf70>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d44:	ee17 3a90 	vmov	r3, s15
 8003d48:	ee16 2a10 	vmov	r2, s12
 8003d4c:	ee16 1a90 	vmov	r1, s13
 8003d50:	ee17 0a10 	vmov	r0, s14
 8003d54:	f000 f96a 	bl	800402c <set_speed>

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 8003d58:	4b9d      	ldr	r3, [pc, #628]	; (8003fd0 <fly+0xf80>)
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d66:	d80b      	bhi.n	8003d80 <fly+0xd30>
        if (stop_counter >= 10) {
 8003d68:	4b9a      	ldr	r3, [pc, #616]	; (8003fd4 <fly+0xf84>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b09      	cmp	r3, #9
 8003d6e:	dd02      	ble.n	8003d76 <fly+0xd26>
          fly_mode = init;
 8003d70:	4b99      	ldr	r3, [pc, #612]	; (8003fd8 <fly+0xf88>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
        }

        stop_counter += 1;
 8003d76:	4b97      	ldr	r3, [pc, #604]	; (8003fd4 <fly+0xf84>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	4a95      	ldr	r2, [pc, #596]	; (8003fd4 <fly+0xf84>)
 8003d7e:	6013      	str	r3, [r2, #0]
      }

      // Stop if angle too large (crashed), can disable if test with the rig
      if (g_angle_error_x < -90 || g_angle_error_x > 90 || g_angle_error_y < -90 || g_angle_error_y > 90) {
 8003d80:	4b96      	ldr	r3, [pc, #600]	; (8003fdc <fly+0xf8c>)
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8003fe0 <fly+0xf90>
 8003d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d92:	d41d      	bmi.n	8003dd0 <fly+0xd80>
 8003d94:	4b91      	ldr	r3, [pc, #580]	; (8003fdc <fly+0xf8c>)
 8003d96:	edd3 7a00 	vldr	s15, [r3]
 8003d9a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003fe4 <fly+0xf94>
 8003d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da6:	dc13      	bgt.n	8003dd0 <fly+0xd80>
 8003da8:	4b8f      	ldr	r3, [pc, #572]	; (8003fe8 <fly+0xf98>)
 8003daa:	edd3 7a00 	vldr	s15, [r3]
 8003dae:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003fe0 <fly+0xf90>
 8003db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dba:	d409      	bmi.n	8003dd0 <fly+0xd80>
 8003dbc:	4b8a      	ldr	r3, [pc, #552]	; (8003fe8 <fly+0xf98>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003fe4 <fly+0xf94>
 8003dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	dd02      	ble.n	8003dd6 <fly+0xd86>
        fly_mode = init;
 8003dd0:	4b81      	ldr	r3, [pc, #516]	; (8003fd8 <fly+0xf88>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
      }

      blink();
 8003dd6:	f7fe fb35 	bl	8002444 <blink>
      break;
 8003dda:	e0ed      	b.n	8003fb8 <fly+0xf68>
    case landing:

      break;
    case testing:
      blink();
 8003ddc:	f7fe fb32 	bl	8002444 <blink>
      g_sig1 = MIN_SPEED + LIMIT(10*g_throttle, 0, MAX_SPEED);
 8003de0:	4b7b      	ldr	r3, [pc, #492]	; (8003fd0 <fly+0xf80>)
 8003de2:	edd3 7a00 	vldr	s15, [r3]
 8003de6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df6:	d502      	bpl.n	8003dfe <fly+0xdae>
 8003df8:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8003fec <fly+0xf9c>
 8003dfc:	e017      	b.n	8003e2e <fly+0xdde>
 8003dfe:	4b74      	ldr	r3, [pc, #464]	; (8003fd0 <fly+0xf80>)
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e0c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003ff0 <fly+0xfa0>
 8003e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e18:	dd02      	ble.n	8003e20 <fly+0xdd0>
 8003e1a:	eddf 7a75 	vldr	s15, [pc, #468]	; 8003ff0 <fly+0xfa0>
 8003e1e:	e006      	b.n	8003e2e <fly+0xdde>
 8003e20:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <fly+0xf80>)
 8003e22:	edd3 7a00 	vldr	s15, [r3]
 8003e26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e2e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003ff4 <fly+0xfa4>
 8003e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <fly+0xf74>)
 8003e38:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + LIMIT(20*g_yaw, 0, MAX_SPEED);
 8003e3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ff8 <fly+0xfa8>)
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e52:	d502      	bpl.n	8003e5a <fly+0xe0a>
 8003e54:	eddf 7a65 	vldr	s15, [pc, #404]	; 8003fec <fly+0xf9c>
 8003e58:	e017      	b.n	8003e8a <fly+0xe3a>
 8003e5a:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <fly+0xfa8>)
 8003e5c:	edd3 7a00 	vldr	s15, [r3]
 8003e60:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e68:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003ff0 <fly+0xfa0>
 8003e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e74:	dd02      	ble.n	8003e7c <fly+0xe2c>
 8003e76:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8003ff0 <fly+0xfa0>
 8003e7a:	e006      	b.n	8003e8a <fly+0xe3a>
 8003e7c:	4b5e      	ldr	r3, [pc, #376]	; (8003ff8 <fly+0xfa8>)
 8003e7e:	edd3 7a00 	vldr	s15, [r3]
 8003e82:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e8a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003ff4 <fly+0xfa4>
 8003e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e92:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <fly+0xf78>)
 8003e94:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + LIMIT(20*g_pitch, 0, MAX_SPEED);
 8003e98:	4b58      	ldr	r3, [pc, #352]	; (8003ffc <fly+0xfac>)
 8003e9a:	edd3 7a00 	vldr	s15, [r3]
 8003e9e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eae:	d502      	bpl.n	8003eb6 <fly+0xe66>
 8003eb0:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8003fec <fly+0xf9c>
 8003eb4:	e017      	b.n	8003ee6 <fly+0xe96>
 8003eb6:	4b51      	ldr	r3, [pc, #324]	; (8003ffc <fly+0xfac>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ec4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003ff0 <fly+0xfa0>
 8003ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed0:	dd02      	ble.n	8003ed8 <fly+0xe88>
 8003ed2:	eddf 7a47 	vldr	s15, [pc, #284]	; 8003ff0 <fly+0xfa0>
 8003ed6:	e006      	b.n	8003ee6 <fly+0xe96>
 8003ed8:	4b48      	ldr	r3, [pc, #288]	; (8003ffc <fly+0xfac>)
 8003eda:	edd3 7a00 	vldr	s15, [r3]
 8003ede:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ee6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003ff4 <fly+0xfa4>
 8003eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <fly+0xf7c>)
 8003ef0:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + LIMIT(20*g_roll, 0, MAX_SPEED);
 8003ef4:	4b42      	ldr	r3, [pc, #264]	; (8004000 <fly+0xfb0>)
 8003ef6:	edd3 7a00 	vldr	s15, [r3]
 8003efa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0a:	d502      	bpl.n	8003f12 <fly+0xec2>
 8003f0c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8003fec <fly+0xf9c>
 8003f10:	e017      	b.n	8003f42 <fly+0xef2>
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <fly+0xfb0>)
 8003f14:	edd3 7a00 	vldr	s15, [r3]
 8003f18:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f20:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003ff0 <fly+0xfa0>
 8003f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2c:	dd02      	ble.n	8003f34 <fly+0xee4>
 8003f2e:	eddf 7a30 	vldr	s15, [pc, #192]	; 8003ff0 <fly+0xfa0>
 8003f32:	e006      	b.n	8003f42 <fly+0xef2>
 8003f34:	4b32      	ldr	r3, [pc, #200]	; (8004000 <fly+0xfb0>)
 8003f36:	edd3 7a00 	vldr	s15, [r3]
 8003f3a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f42:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003ff4 <fly+0xfa4>
 8003f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <fly+0xf70>)
 8003f4c:	edc3 7a00 	vstr	s15, [r3]

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <fly+0xf80>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	d80b      	bhi.n	8003f78 <fly+0xf28>
        if (stop_counter >= 10) {
 8003f60:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <fly+0xf84>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b09      	cmp	r3, #9
 8003f66:	dd02      	ble.n	8003f6e <fly+0xf1e>
          fly_mode = init;
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <fly+0xf88>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
        }

        stop_counter += 1;
 8003f6e:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <fly+0xf84>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3301      	adds	r3, #1
 8003f74:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <fly+0xf84>)
 8003f76:	6013      	str	r3, [r2, #0]
      }

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <fly+0xf74>)
 8003f7a:	edd3 7a00 	vldr	s15, [r3]
 8003f7e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <fly+0xf78>)
 8003f84:	edd3 7a00 	vldr	s15, [r3]
 8003f88:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <fly+0xf7c>)
 8003f8e:	edd3 7a00 	vldr	s15, [r3]
 8003f92:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <fly+0xf70>)
 8003f98:	edd3 7a00 	vldr	s15, [r3]
 8003f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa0:	ee17 3a90 	vmov	r3, s15
 8003fa4:	ee16 2a10 	vmov	r2, s12
 8003fa8:	ee16 1a90 	vmov	r1, s13
 8003fac:	ee17 0a10 	vmov	r0, s14
 8003fb0:	f000 f83c 	bl	800402c <set_speed>
      break;
 8003fb4:	e000      	b.n	8003fb8 <fly+0xf68>
      break;
 8003fb6:	bf00      	nop
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	24000458 	.word	0x24000458
 8003fc4:	2400044c 	.word	0x2400044c
 8003fc8:	24000450 	.word	0x24000450
 8003fcc:	24000454 	.word	0x24000454
 8003fd0:	2400055c 	.word	0x2400055c
 8003fd4:	24001028 	.word	0x24001028
 8003fd8:	2400101c 	.word	0x2400101c
 8003fdc:	24000410 	.word	0x24000410
 8003fe0:	c2b40000 	.word	0xc2b40000
 8003fe4:	42b40000 	.word	0x42b40000
 8003fe8:	24000414 	.word	0x24000414
 8003fec:	00000000 	.word	0x00000000
 8003ff0:	45a28000 	.word	0x45a28000
 8003ff4:	45228000 	.word	0x45228000
 8003ff8:	24000568 	.word	0x24000568
 8003ffc:	24000560 	.word	0x24000560
 8004000:	24000564 	.word	0x24000564

08004004 <console>:

void console(const char *str) {
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7fc f967 	bl	80002e0 <strlen>
 8004012:	4603      	mov	r3, r0
 8004014:	b29b      	uxth	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4803      	ldr	r0, [pc, #12]	; (8004028 <console+0x24>)
 800401c:	f00a f87e 	bl	800e11c <HAL_UART_Transmit_IT>
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	24000380 	.word	0x24000380

0800402c <set_speed>:

void set_speed(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4) {
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  TIM2->CCR1 = m1;
 800403a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = m2;
 8004042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6393      	str	r3, [r2, #56]	; 0x38
  TIM2->CCR3 = m3;
 800404a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = m4;
 8004052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6413      	str	r3, [r2, #64]	; 0x40
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <init_filters>:

void init_filters() {
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  average_filter_init(&g_af[0], 5);
 800406c:	2105      	movs	r1, #5
 800406e:	482a      	ldr	r0, [pc, #168]	; (8004118 <init_filters+0xb0>)
 8004070:	f7fc fb8a 	bl	8000788 <average_filter_init>
  average_filter_init(&g_af[1], 5);
 8004074:	2105      	movs	r1, #5
 8004076:	4829      	ldr	r0, [pc, #164]	; (800411c <init_filters+0xb4>)
 8004078:	f7fc fb86 	bl	8000788 <average_filter_init>
  average_filter_init(&g_af[2], 5);
 800407c:	2105      	movs	r1, #5
 800407e:	4828      	ldr	r0, [pc, #160]	; (8004120 <init_filters+0xb8>)
 8004080:	f7fc fb82 	bl	8000788 <average_filter_init>
  average_filter_init(&g_af[3], 5);
 8004084:	2105      	movs	r1, #5
 8004086:	4827      	ldr	r0, [pc, #156]	; (8004124 <init_filters+0xbc>)
 8004088:	f7fc fb7e 	bl	8000788 <average_filter_init>
  average_filter_init(&g_af[4], 5);
 800408c:	2105      	movs	r1, #5
 800408e:	4826      	ldr	r0, [pc, #152]	; (8004128 <init_filters+0xc0>)
 8004090:	f7fc fb7a 	bl	8000788 <average_filter_init>

  kalman_filter_init(&g_kf[0], 2, 2, 0.01);
 8004094:	ed9f 1a25 	vldr	s2, [pc, #148]	; 800412c <init_filters+0xc4>
 8004098:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800409c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80040a0:	4823      	ldr	r0, [pc, #140]	; (8004130 <init_filters+0xc8>)
 80040a2:	f7fc faf7 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&g_kf[1], 2, 2, 0.01);
 80040a6:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800412c <init_filters+0xc4>
 80040aa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80040ae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80040b2:	4820      	ldr	r0, [pc, #128]	; (8004134 <init_filters+0xcc>)
 80040b4:	f7fc faee 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&g_kf[2], 2, 2, 0.01);
 80040b8:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800412c <init_filters+0xc4>
 80040bc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80040c0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80040c4:	481c      	ldr	r0, [pc, #112]	; (8004138 <init_filters+0xd0>)
 80040c6:	f7fc fae5 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&g_kf[3], 2, 2, 0.01);
 80040ca:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800412c <init_filters+0xc4>
 80040ce:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80040d2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80040d6:	4819      	ldr	r0, [pc, #100]	; (800413c <init_filters+0xd4>)
 80040d8:	f7fc fadc 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&g_kf[4], 2, 2, 0.01);
 80040dc:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800412c <init_filters+0xc4>
 80040e0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80040e4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80040e8:	4815      	ldr	r0, [pc, #84]	; (8004140 <init_filters+0xd8>)
 80040ea:	f7fc fad3 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&g_kf[5], 2, 2, 0.01);
 80040ee:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 800412c <init_filters+0xc4>
 80040f2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80040f6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80040fa:	4812      	ldr	r0, [pc, #72]	; (8004144 <init_filters+0xdc>)
 80040fc:	f7fc faca 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&g_kf[6], 2, 2, 0.01);
 8004100:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800412c <init_filters+0xc4>
 8004104:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8004108:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800410c:	480e      	ldr	r0, [pc, #56]	; (8004148 <init_filters+0xe0>)
 800410e:	f7fc fac1 	bl	8000694 <kalman_filter_init>
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	24000638 	.word	0x24000638
 800411c:	240007d4 	.word	0x240007d4
 8004120:	24000970 	.word	0x24000970
 8004124:	24000b0c 	.word	0x24000b0c
 8004128:	24000ca8 	.word	0x24000ca8
 800412c:	3c23d70a 	.word	0x3c23d70a
 8004130:	24000e44 	.word	0x24000e44
 8004134:	24000e5c 	.word	0x24000e5c
 8004138:	24000e74 	.word	0x24000e74
 800413c:	24000e8c 	.word	0x24000e8c
 8004140:	24000ea4 	.word	0x24000ea4
 8004144:	24000ebc 	.word	0x24000ebc
 8004148:	24000ed4 	.word	0x24000ed4

0800414c <init_sensors>:

void init_sensors() {
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af02      	add	r7, sp, #8
  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 8004152:	2303      	movs	r3, #3
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2303      	movs	r3, #3
 8004158:	2200      	movs	r2, #0
 800415a:	490b      	ldr	r1, [pc, #44]	; (8004188 <init_sensors+0x3c>)
 800415c:	480b      	ldr	r0, [pc, #44]	; (800418c <init_sensors+0x40>)
 800415e:	f7fd fa95 	bl	800168c <MPU6050_init>
 8004162:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <init_sensors+0x2a>
    flash(error);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc fb74 	bl	800085c <flash>
  while (1) {
 8004174:	e7ed      	b.n	8004152 <init_sensors+0x6>
    if (error == 0) break;
 8004176:	bf00      	nop
  }

  MPU6050_calibrate(&g_mpu6050);
 8004178:	4804      	ldr	r0, [pc, #16]	; (800418c <init_sensors+0x40>)
 800417a:	f7fd fcc1 	bl	8001b00 <MPU6050_calibrate>
//        &g_ms5611,
//        &hi2c1);
//    if (error == 0) break;
//    flash(error);
//  }
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	240000a8 	.word	0x240000a8
 800418c:	24000eec 	.word	0x24000eec

08004190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004198:	4a14      	ldr	r2, [pc, #80]	; (80041ec <_sbrk+0x5c>)
 800419a:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <_sbrk+0x60>)
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041a4:	4b13      	ldr	r3, [pc, #76]	; (80041f4 <_sbrk+0x64>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041ac:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <_sbrk+0x64>)
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <_sbrk+0x68>)
 80041b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <_sbrk+0x64>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d207      	bcs.n	80041d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041c0:	f00b fe9a 	bl	800fef8 <__errno>
 80041c4:	4603      	mov	r3, r0
 80041c6:	220c      	movs	r2, #12
 80041c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ce:	e009      	b.n	80041e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <_sbrk+0x64>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <_sbrk+0x64>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <_sbrk+0x64>)
 80041e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041e2:	68fb      	ldr	r3, [r7, #12]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	24080000 	.word	0x24080000
 80041f0:	00000400 	.word	0x00000400
 80041f4:	2400102c 	.word	0x2400102c
 80041f8:	24001048 	.word	0x24001048

080041fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <SystemInit+0xec>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	4a38      	ldr	r2, [pc, #224]	; (80042e8 <SystemInit+0xec>)
 8004208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800420c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004210:	4b36      	ldr	r3, [pc, #216]	; (80042ec <SystemInit+0xf0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	2b06      	cmp	r3, #6
 800421a:	d807      	bhi.n	800422c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800421c:	4b33      	ldr	r3, [pc, #204]	; (80042ec <SystemInit+0xf0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 030f 	bic.w	r3, r3, #15
 8004224:	4a31      	ldr	r2, [pc, #196]	; (80042ec <SystemInit+0xf0>)
 8004226:	f043 0307 	orr.w	r3, r3, #7
 800422a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800422c:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <SystemInit+0xf4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2f      	ldr	r2, [pc, #188]	; (80042f0 <SystemInit+0xf4>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004238:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <SystemInit+0xf4>)
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800423e:	4b2c      	ldr	r3, [pc, #176]	; (80042f0 <SystemInit+0xf4>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	492b      	ldr	r1, [pc, #172]	; (80042f0 <SystemInit+0xf4>)
 8004244:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <SystemInit+0xf8>)
 8004246:	4013      	ands	r3, r2
 8004248:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800424a:	4b28      	ldr	r3, [pc, #160]	; (80042ec <SystemInit+0xf0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004256:	4b25      	ldr	r3, [pc, #148]	; (80042ec <SystemInit+0xf0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 030f 	bic.w	r3, r3, #15
 800425e:	4a23      	ldr	r2, [pc, #140]	; (80042ec <SystemInit+0xf0>)
 8004260:	f043 0307 	orr.w	r3, r3, #7
 8004264:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004266:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <SystemInit+0xf4>)
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800426c:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <SystemInit+0xf4>)
 800426e:	2200      	movs	r2, #0
 8004270:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <SystemInit+0xf4>)
 8004274:	2200      	movs	r2, #0
 8004276:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <SystemInit+0xf4>)
 800427a:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <SystemInit+0xfc>)
 800427c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800427e:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <SystemInit+0xf4>)
 8004280:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <SystemInit+0x100>)
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004284:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <SystemInit+0xf4>)
 8004286:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <SystemInit+0x104>)
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800428a:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <SystemInit+0xf4>)
 800428c:	2200      	movs	r2, #0
 800428e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004290:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <SystemInit+0xf4>)
 8004292:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <SystemInit+0x104>)
 8004294:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004296:	4b16      	ldr	r3, [pc, #88]	; (80042f0 <SystemInit+0xf4>)
 8004298:	2200      	movs	r2, #0
 800429a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800429c:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <SystemInit+0xf4>)
 800429e:	4a18      	ldr	r2, [pc, #96]	; (8004300 <SystemInit+0x104>)
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <SystemInit+0xf4>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80042a8:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <SystemInit+0xf4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <SystemInit+0xf4>)
 80042ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <SystemInit+0xf4>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <SystemInit+0x108>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <SystemInit+0x10c>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c6:	d202      	bcs.n	80042ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <SystemInit+0x110>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <SystemInit+0x114>)
 80042d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80042d4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042d6:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <SystemInit+0xec>)
 80042d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042dc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80042de:	bf00      	nop
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	e000ed00 	.word	0xe000ed00
 80042ec:	52002000 	.word	0x52002000
 80042f0:	58024400 	.word	0x58024400
 80042f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80042f8:	02020200 	.word	0x02020200
 80042fc:	01ff0000 	.word	0x01ff0000
 8004300:	01010280 	.word	0x01010280
 8004304:	5c001000 	.word	0x5c001000
 8004308:	ffff0000 	.word	0xffff0000
 800430c:	51008108 	.word	0x51008108
 8004310:	52004000 	.word	0x52004000

08004314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800434c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004318:	f7ff ff70 	bl	80041fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800431c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800431e:	e003      	b.n	8004328 <LoopCopyDataInit>

08004320 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004322:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004324:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004326:	3104      	adds	r1, #4

08004328 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004328:	480a      	ldr	r0, [pc, #40]	; (8004354 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800432c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800432e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004330:	d3f6      	bcc.n	8004320 <CopyDataInit>
  ldr  r2, =_sbss
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004334:	e002      	b.n	800433c <LoopFillZerobss>

08004336 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004336:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004338:	f842 3b04 	str.w	r3, [r2], #4

0800433c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800433e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004340:	d3f9      	bcc.n	8004336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004342:	f00b fddf 	bl	800ff04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004346:	f7fc faaf 	bl	80008a8 <main>
  bx  lr    
 800434a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800434c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004350:	08013820 	.word	0x08013820
  ldr  r0, =_sdata
 8004354:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004358:	2400008c 	.word	0x2400008c
  ldr  r2, =_sbss
 800435c:	2400008c 	.word	0x2400008c
  ldr  r3, = _ebss
 8004360:	24001044 	.word	0x24001044

08004364 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004364:	e7fe      	b.n	8004364 <ADC3_IRQHandler>
	...

08004368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800436e:	2003      	movs	r0, #3
 8004370:	f000 f98c 	bl	800468c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004374:	f006 fb0c 	bl	800a990 <HAL_RCC_GetSysClockFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <HAL_Init+0x68>)
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	4913      	ldr	r1, [pc, #76]	; (80043d4 <HAL_Init+0x6c>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <HAL_Init+0x68>)
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	4a0e      	ldr	r2, [pc, #56]	; (80043d4 <HAL_Init+0x6c>)
 800439c:	5cd3      	ldrb	r3, [r2, r3]
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
 80043a8:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <HAL_Init+0x70>)
 80043aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043ac:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <HAL_Init+0x74>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043b2:	2000      	movs	r0, #0
 80043b4:	f000 f814 	bl	80043e0 <HAL_InitTick>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e002      	b.n	80043c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80043c2:	f7fd fd57 	bl	8001e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	58024400 	.word	0x58024400
 80043d4:	08011d0c 	.word	0x08011d0c
 80043d8:	2400001c 	.word	0x2400001c
 80043dc:	24000018 	.word	0x24000018

080043e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <HAL_InitTick+0x60>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e021      	b.n	8004438 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80043f4:	4b13      	ldr	r3, [pc, #76]	; (8004444 <HAL_InitTick+0x64>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_InitTick+0x60>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	4619      	mov	r1, r3
 80043fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004402:	fbb3 f3f1 	udiv	r3, r3, r1
 8004406:	fbb2 f3f3 	udiv	r3, r2, r3
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f971 	bl	80046f2 <HAL_SYSTICK_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e00e      	b.n	8004438 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b0f      	cmp	r3, #15
 800441e:	d80a      	bhi.n	8004436 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004420:	2200      	movs	r2, #0
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004428:	f000 f93b 	bl	80046a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800442c:	4a06      	ldr	r2, [pc, #24]	; (8004448 <HAL_InitTick+0x68>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e000      	b.n	8004438 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	24000024 	.word	0x24000024
 8004444:	24000018 	.word	0x24000018
 8004448:	24000020 	.word	0x24000020

0800444c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_IncTick+0x20>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_IncTick+0x24>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4413      	add	r3, r2
 800445c:	4a04      	ldr	r2, [pc, #16]	; (8004470 <HAL_IncTick+0x24>)
 800445e:	6013      	str	r3, [r2, #0]
}
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	24000024 	.word	0x24000024
 8004470:	24001030 	.word	0x24001030

08004474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return uwTick;
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <HAL_GetTick+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	24001030 	.word	0x24001030

0800448c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004494:	f7ff ffee 	bl	8004474 <HAL_GetTick>
 8004498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a4:	d005      	beq.n	80044b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HAL_Delay+0x44>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044b2:	bf00      	nop
 80044b4:	f7ff ffde 	bl	8004474 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d8f7      	bhi.n	80044b4 <HAL_Delay+0x28>
  {
  }
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	24000024 	.word	0x24000024

080044d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <HAL_GetREVID+0x14>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	0c1b      	lsrs	r3, r3, #16
}
 80044de:	4618      	mov	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	5c001000 	.word	0x5c001000

080044ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <__NVIC_SetPriorityGrouping+0x40>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004508:	4013      	ands	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <__NVIC_SetPriorityGrouping+0x44>)
 8004516:	4313      	orrs	r3, r2
 8004518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800451a:	4a04      	ldr	r2, [pc, #16]	; (800452c <__NVIC_SetPriorityGrouping+0x40>)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	60d3      	str	r3, [r2, #12]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000ed00 	.word	0xe000ed00
 8004530:	05fa0000 	.word	0x05fa0000

08004534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004538:	4b04      	ldr	r3, [pc, #16]	; (800454c <__NVIC_GetPriorityGrouping+0x18>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	f003 0307 	and.w	r3, r3, #7
}
 8004542:	4618      	mov	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800455a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800455e:	2b00      	cmp	r3, #0
 8004560:	db0b      	blt.n	800457a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	f003 021f 	and.w	r2, r3, #31
 8004568:	4907      	ldr	r1, [pc, #28]	; (8004588 <__NVIC_EnableIRQ+0x38>)
 800456a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2001      	movs	r0, #1
 8004572:	fa00 f202 	lsl.w	r2, r0, r2
 8004576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000e100 	.word	0xe000e100

0800458c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800459c:	2b00      	cmp	r3, #0
 800459e:	db0a      	blt.n	80045b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	490c      	ldr	r1, [pc, #48]	; (80045d8 <__NVIC_SetPriority+0x4c>)
 80045a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045aa:	0112      	lsls	r2, r2, #4
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	440b      	add	r3, r1
 80045b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b4:	e00a      	b.n	80045cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4908      	ldr	r1, [pc, #32]	; (80045dc <__NVIC_SetPriority+0x50>)
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	3b04      	subs	r3, #4
 80045c4:	0112      	lsls	r2, r2, #4
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	440b      	add	r3, r1
 80045ca:	761a      	strb	r2, [r3, #24]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000e100 	.word	0xe000e100
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	; 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f1c3 0307 	rsb	r3, r3, #7
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	bf28      	it	cs
 80045fe:	2304      	movcs	r3, #4
 8004600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3304      	adds	r3, #4
 8004606:	2b06      	cmp	r3, #6
 8004608:	d902      	bls.n	8004610 <NVIC_EncodePriority+0x30>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3b03      	subs	r3, #3
 800460e:	e000      	b.n	8004612 <NVIC_EncodePriority+0x32>
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43da      	mvns	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	401a      	ands	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	fa01 f303 	lsl.w	r3, r1, r3
 8004632:	43d9      	mvns	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004638:	4313      	orrs	r3, r2
         );
}
 800463a:	4618      	mov	r0, r3
 800463c:	3724      	adds	r7, #36	; 0x24
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3b01      	subs	r3, #1
 8004654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004658:	d301      	bcc.n	800465e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800465a:	2301      	movs	r3, #1
 800465c:	e00f      	b.n	800467e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <SysTick_Config+0x40>)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3b01      	subs	r3, #1
 8004664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004666:	210f      	movs	r1, #15
 8004668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800466c:	f7ff ff8e 	bl	800458c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <SysTick_Config+0x40>)
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004676:	4b04      	ldr	r3, [pc, #16]	; (8004688 <SysTick_Config+0x40>)
 8004678:	2207      	movs	r2, #7
 800467a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	e000e010 	.word	0xe000e010

0800468c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff ff29 	bl	80044ec <__NVIC_SetPriorityGrouping>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b086      	sub	sp, #24
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	4603      	mov	r3, r0
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
 80046ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046b0:	f7ff ff40 	bl	8004534 <__NVIC_GetPriorityGrouping>
 80046b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	6978      	ldr	r0, [r7, #20]
 80046bc:	f7ff ff90 	bl	80045e0 <NVIC_EncodePriority>
 80046c0:	4602      	mov	r2, r0
 80046c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff5f 	bl	800458c <__NVIC_SetPriority>
}
 80046ce:	bf00      	nop
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	4603      	mov	r3, r0
 80046de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff33 	bl	8004550 <__NVIC_EnableIRQ>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ffa4 	bl	8004648 <SysTick_Config>
 8004700:	4603      	mov	r3, r0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004714:	f7ff feae 	bl	8004474 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e316      	b.n	8004d52 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a66      	ldr	r2, [pc, #408]	; (80048c4 <HAL_DMA_Init+0x1b8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d04a      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_DMA_Init+0x1bc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d045      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a63      	ldr	r2, [pc, #396]	; (80048cc <HAL_DMA_Init+0x1c0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d040      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a62      	ldr	r2, [pc, #392]	; (80048d0 <HAL_DMA_Init+0x1c4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d03b      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a60      	ldr	r2, [pc, #384]	; (80048d4 <HAL_DMA_Init+0x1c8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d036      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5f      	ldr	r2, [pc, #380]	; (80048d8 <HAL_DMA_Init+0x1cc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d031      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a5d      	ldr	r2, [pc, #372]	; (80048dc <HAL_DMA_Init+0x1d0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d02c      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a5c      	ldr	r2, [pc, #368]	; (80048e0 <HAL_DMA_Init+0x1d4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d027      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a5a      	ldr	r2, [pc, #360]	; (80048e4 <HAL_DMA_Init+0x1d8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a59      	ldr	r2, [pc, #356]	; (80048e8 <HAL_DMA_Init+0x1dc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d01d      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a57      	ldr	r2, [pc, #348]	; (80048ec <HAL_DMA_Init+0x1e0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a56      	ldr	r2, [pc, #344]	; (80048f0 <HAL_DMA_Init+0x1e4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a54      	ldr	r2, [pc, #336]	; (80048f4 <HAL_DMA_Init+0x1e8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a53      	ldr	r2, [pc, #332]	; (80048f8 <HAL_DMA_Init+0x1ec>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a51      	ldr	r2, [pc, #324]	; (80048fc <HAL_DMA_Init+0x1f0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a50      	ldr	r2, [pc, #320]	; (8004900 <HAL_DMA_Init+0x1f4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <HAL_DMA_Init+0xbc>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_DMA_Init+0xbe>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 813b 	beq.w	8004a46 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a37      	ldr	r2, [pc, #220]	; (80048c4 <HAL_DMA_Init+0x1b8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d04a      	beq.n	8004880 <HAL_DMA_Init+0x174>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a36      	ldr	r2, [pc, #216]	; (80048c8 <HAL_DMA_Init+0x1bc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d045      	beq.n	8004880 <HAL_DMA_Init+0x174>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a34      	ldr	r2, [pc, #208]	; (80048cc <HAL_DMA_Init+0x1c0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d040      	beq.n	8004880 <HAL_DMA_Init+0x174>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a33      	ldr	r2, [pc, #204]	; (80048d0 <HAL_DMA_Init+0x1c4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d03b      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a31      	ldr	r2, [pc, #196]	; (80048d4 <HAL_DMA_Init+0x1c8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d036      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a30      	ldr	r2, [pc, #192]	; (80048d8 <HAL_DMA_Init+0x1cc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d031      	beq.n	8004880 <HAL_DMA_Init+0x174>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2e      	ldr	r2, [pc, #184]	; (80048dc <HAL_DMA_Init+0x1d0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d02c      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2d      	ldr	r2, [pc, #180]	; (80048e0 <HAL_DMA_Init+0x1d4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d027      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2b      	ldr	r2, [pc, #172]	; (80048e4 <HAL_DMA_Init+0x1d8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d022      	beq.n	8004880 <HAL_DMA_Init+0x174>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <HAL_DMA_Init+0x1dc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d01d      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a28      	ldr	r2, [pc, #160]	; (80048ec <HAL_DMA_Init+0x1e0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <HAL_DMA_Init+0x174>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <HAL_DMA_Init+0x1e4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a25      	ldr	r2, [pc, #148]	; (80048f4 <HAL_DMA_Init+0x1e8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a24      	ldr	r2, [pc, #144]	; (80048f8 <HAL_DMA_Init+0x1ec>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <HAL_DMA_Init+0x174>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a22      	ldr	r2, [pc, #136]	; (80048fc <HAL_DMA_Init+0x1f0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a21      	ldr	r2, [pc, #132]	; (8004900 <HAL_DMA_Init+0x1f4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d108      	bne.n	8004892 <HAL_DMA_Init+0x186>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e007      	b.n	80048a2 <HAL_DMA_Init+0x196>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048a2:	e02f      	b.n	8004904 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a4:	f7ff fde6 	bl	8004474 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d928      	bls.n	8004904 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2203      	movs	r2, #3
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e246      	b.n	8004d52 <HAL_DMA_Init+0x646>
 80048c4:	40020010 	.word	0x40020010
 80048c8:	40020028 	.word	0x40020028
 80048cc:	40020040 	.word	0x40020040
 80048d0:	40020058 	.word	0x40020058
 80048d4:	40020070 	.word	0x40020070
 80048d8:	40020088 	.word	0x40020088
 80048dc:	400200a0 	.word	0x400200a0
 80048e0:	400200b8 	.word	0x400200b8
 80048e4:	40020410 	.word	0x40020410
 80048e8:	40020428 	.word	0x40020428
 80048ec:	40020440 	.word	0x40020440
 80048f0:	40020458 	.word	0x40020458
 80048f4:	40020470 	.word	0x40020470
 80048f8:	40020488 	.word	0x40020488
 80048fc:	400204a0 	.word	0x400204a0
 8004900:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1c8      	bne.n	80048a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4b83      	ldr	r3, [pc, #524]	; (8004b2c <HAL_DMA_Init+0x420>)
 800491e:	4013      	ands	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800492a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004936:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004942:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	2b04      	cmp	r3, #4
 8004956:	d107      	bne.n	8004968 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	4313      	orrs	r3, r2
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004968:	4b71      	ldr	r3, [pc, #452]	; (8004b30 <HAL_DMA_Init+0x424>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b71      	ldr	r3, [pc, #452]	; (8004b34 <HAL_DMA_Init+0x428>)
 800496e:	4013      	ands	r3, r2
 8004970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004974:	d328      	bcc.n	80049c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b28      	cmp	r3, #40	; 0x28
 800497c:	d903      	bls.n	8004986 <HAL_DMA_Init+0x27a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b2e      	cmp	r3, #46	; 0x2e
 8004984:	d917      	bls.n	80049b6 <HAL_DMA_Init+0x2aa>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b3e      	cmp	r3, #62	; 0x3e
 800498c:	d903      	bls.n	8004996 <HAL_DMA_Init+0x28a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b42      	cmp	r3, #66	; 0x42
 8004994:	d90f      	bls.n	80049b6 <HAL_DMA_Init+0x2aa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b46      	cmp	r3, #70	; 0x46
 800499c:	d903      	bls.n	80049a6 <HAL_DMA_Init+0x29a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b48      	cmp	r3, #72	; 0x48
 80049a4:	d907      	bls.n	80049b6 <HAL_DMA_Init+0x2aa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b4e      	cmp	r3, #78	; 0x4e
 80049ac:	d905      	bls.n	80049ba <HAL_DMA_Init+0x2ae>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b52      	cmp	r3, #82	; 0x52
 80049b4:	d801      	bhi.n	80049ba <HAL_DMA_Init+0x2ae>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <HAL_DMA_Init+0x2b0>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0307 	bic.w	r3, r3, #7
 80049de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d117      	bne.n	8004a22 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00e      	beq.n	8004a22 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f002 fb4d 	bl	80070a4 <DMA_CheckFifoParam>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2240      	movs	r2, #64	; 0x40
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e197      	b.n	8004d52 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f002 fa88 	bl	8006f40 <DMA_CalcBaseAndBitshift>
 8004a30:	4603      	mov	r3, r0
 8004a32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	223f      	movs	r2, #63	; 0x3f
 8004a3e:	409a      	lsls	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	e0cd      	b.n	8004be2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <HAL_DMA_Init+0x42c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d022      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a39      	ldr	r2, [pc, #228]	; (8004b3c <HAL_DMA_Init+0x430>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01d      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a38      	ldr	r2, [pc, #224]	; (8004b40 <HAL_DMA_Init+0x434>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d018      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a36      	ldr	r2, [pc, #216]	; (8004b44 <HAL_DMA_Init+0x438>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a35      	ldr	r2, [pc, #212]	; (8004b48 <HAL_DMA_Init+0x43c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a33      	ldr	r2, [pc, #204]	; (8004b4c <HAL_DMA_Init+0x440>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a32      	ldr	r2, [pc, #200]	; (8004b50 <HAL_DMA_Init+0x444>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a30      	ldr	r2, [pc, #192]	; (8004b54 <HAL_DMA_Init+0x448>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <HAL_DMA_Init+0x38e>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <HAL_DMA_Init+0x390>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8097 	beq.w	8004bd0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a24      	ldr	r2, [pc, #144]	; (8004b38 <HAL_DMA_Init+0x42c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d021      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <HAL_DMA_Init+0x430>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01c      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <HAL_DMA_Init+0x434>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d017      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_DMA_Init+0x438>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d012      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_DMA_Init+0x43c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00d      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_DMA_Init+0x440>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d008      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_DMA_Init+0x444>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <HAL_DMA_Init+0x448>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <HAL_DMA_Init+0x44c>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d020      	beq.n	8004b5c <HAL_DMA_Init+0x450>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b80      	cmp	r3, #128	; 0x80
 8004b20:	d102      	bne.n	8004b28 <HAL_DMA_Init+0x41c>
 8004b22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b26:	e01a      	b.n	8004b5e <HAL_DMA_Init+0x452>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e018      	b.n	8004b5e <HAL_DMA_Init+0x452>
 8004b2c:	fe10803f 	.word	0xfe10803f
 8004b30:	5c001000 	.word	0x5c001000
 8004b34:	ffff0000 	.word	0xffff0000
 8004b38:	58025408 	.word	0x58025408
 8004b3c:	5802541c 	.word	0x5802541c
 8004b40:	58025430 	.word	0x58025430
 8004b44:	58025444 	.word	0x58025444
 8004b48:	58025458 	.word	0x58025458
 8004b4c:	5802546c 	.word	0x5802546c
 8004b50:	58025480 	.word	0x58025480
 8004b54:	58025494 	.word	0x58025494
 8004b58:	fffe000f 	.word	0xfffe000f
 8004b5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68d2      	ldr	r2, [r2, #12]
 8004b62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4b6e      	ldr	r3, [pc, #440]	; (8004d5c <HAL_DMA_Init+0x650>)
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4a6e      	ldr	r2, [pc, #440]	; (8004d60 <HAL_DMA_Init+0x654>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f002 f9c3 	bl	8006f40 <DMA_CalcBaseAndBitshift>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	e008      	b.n	8004be2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2203      	movs	r2, #3
 8004bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0b7      	b.n	8004d52 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a5f      	ldr	r2, [pc, #380]	; (8004d64 <HAL_DMA_Init+0x658>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d072      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a5d      	ldr	r2, [pc, #372]	; (8004d68 <HAL_DMA_Init+0x65c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d06d      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a5c      	ldr	r2, [pc, #368]	; (8004d6c <HAL_DMA_Init+0x660>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d068      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a5a      	ldr	r2, [pc, #360]	; (8004d70 <HAL_DMA_Init+0x664>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d063      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a59      	ldr	r2, [pc, #356]	; (8004d74 <HAL_DMA_Init+0x668>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d05e      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a57      	ldr	r2, [pc, #348]	; (8004d78 <HAL_DMA_Init+0x66c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d059      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a56      	ldr	r2, [pc, #344]	; (8004d7c <HAL_DMA_Init+0x670>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d054      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a54      	ldr	r2, [pc, #336]	; (8004d80 <HAL_DMA_Init+0x674>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d04f      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a53      	ldr	r2, [pc, #332]	; (8004d84 <HAL_DMA_Init+0x678>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d04a      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a51      	ldr	r2, [pc, #324]	; (8004d88 <HAL_DMA_Init+0x67c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d045      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a50      	ldr	r2, [pc, #320]	; (8004d8c <HAL_DMA_Init+0x680>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d040      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a4e      	ldr	r2, [pc, #312]	; (8004d90 <HAL_DMA_Init+0x684>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d03b      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a4d      	ldr	r2, [pc, #308]	; (8004d94 <HAL_DMA_Init+0x688>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d036      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a4b      	ldr	r2, [pc, #300]	; (8004d98 <HAL_DMA_Init+0x68c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d031      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a4a      	ldr	r2, [pc, #296]	; (8004d9c <HAL_DMA_Init+0x690>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d02c      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a48      	ldr	r2, [pc, #288]	; (8004da0 <HAL_DMA_Init+0x694>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d027      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a47      	ldr	r2, [pc, #284]	; (8004da4 <HAL_DMA_Init+0x698>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d022      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a45      	ldr	r2, [pc, #276]	; (8004da8 <HAL_DMA_Init+0x69c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01d      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a44      	ldr	r2, [pc, #272]	; (8004dac <HAL_DMA_Init+0x6a0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a42      	ldr	r2, [pc, #264]	; (8004db0 <HAL_DMA_Init+0x6a4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a41      	ldr	r2, [pc, #260]	; (8004db4 <HAL_DMA_Init+0x6a8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3f      	ldr	r2, [pc, #252]	; (8004db8 <HAL_DMA_Init+0x6ac>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a3e      	ldr	r2, [pc, #248]	; (8004dbc <HAL_DMA_Init+0x6b0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a3c      	ldr	r2, [pc, #240]	; (8004dc0 <HAL_DMA_Init+0x6b4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_DMA_Init+0x5ca>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <HAL_DMA_Init+0x5cc>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d032      	beq.n	8004d42 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f002 fa5d 	bl	800719c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d102      	bne.n	8004cf0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d010      	beq.n	8004d30 <HAL_DMA_Init+0x624>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d80c      	bhi.n	8004d30 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f002 fada 	bl	80072d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d2c:	605a      	str	r2, [r3, #4]
 8004d2e:	e008      	b.n	8004d42 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	a7fdabf8 	.word	0xa7fdabf8
 8004d60:	cccccccd 	.word	0xcccccccd
 8004d64:	40020010 	.word	0x40020010
 8004d68:	40020028 	.word	0x40020028
 8004d6c:	40020040 	.word	0x40020040
 8004d70:	40020058 	.word	0x40020058
 8004d74:	40020070 	.word	0x40020070
 8004d78:	40020088 	.word	0x40020088
 8004d7c:	400200a0 	.word	0x400200a0
 8004d80:	400200b8 	.word	0x400200b8
 8004d84:	40020410 	.word	0x40020410
 8004d88:	40020428 	.word	0x40020428
 8004d8c:	40020440 	.word	0x40020440
 8004d90:	40020458 	.word	0x40020458
 8004d94:	40020470 	.word	0x40020470
 8004d98:	40020488 	.word	0x40020488
 8004d9c:	400204a0 	.word	0x400204a0
 8004da0:	400204b8 	.word	0x400204b8
 8004da4:	58025408 	.word	0x58025408
 8004da8:	5802541c 	.word	0x5802541c
 8004dac:	58025430 	.word	0x58025430
 8004db0:	58025444 	.word	0x58025444
 8004db4:	58025458 	.word	0x58025458
 8004db8:	5802546c 	.word	0x5802546c
 8004dbc:	58025480 	.word	0x58025480
 8004dc0:	58025494 	.word	0x58025494

08004dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e226      	b.n	800522e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_DMA_Start_IT+0x2a>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e21f      	b.n	800522e <HAL_DMA_Start_IT+0x46a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	f040 820a 	bne.w	8005218 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a68      	ldr	r2, [pc, #416]	; (8004fb8 <HAL_DMA_Start_IT+0x1f4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d04a      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a66      	ldr	r2, [pc, #408]	; (8004fbc <HAL_DMA_Start_IT+0x1f8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d045      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a65      	ldr	r2, [pc, #404]	; (8004fc0 <HAL_DMA_Start_IT+0x1fc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d040      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a63      	ldr	r2, [pc, #396]	; (8004fc4 <HAL_DMA_Start_IT+0x200>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d03b      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a62      	ldr	r2, [pc, #392]	; (8004fc8 <HAL_DMA_Start_IT+0x204>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d036      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a60      	ldr	r2, [pc, #384]	; (8004fcc <HAL_DMA_Start_IT+0x208>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d031      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a5f      	ldr	r2, [pc, #380]	; (8004fd0 <HAL_DMA_Start_IT+0x20c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d02c      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5d      	ldr	r2, [pc, #372]	; (8004fd4 <HAL_DMA_Start_IT+0x210>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d027      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a5c      	ldr	r2, [pc, #368]	; (8004fd8 <HAL_DMA_Start_IT+0x214>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d022      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a5a      	ldr	r2, [pc, #360]	; (8004fdc <HAL_DMA_Start_IT+0x218>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01d      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a59      	ldr	r2, [pc, #356]	; (8004fe0 <HAL_DMA_Start_IT+0x21c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d018      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <HAL_DMA_Start_IT+0x220>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a56      	ldr	r2, [pc, #344]	; (8004fe8 <HAL_DMA_Start_IT+0x224>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00e      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a54      	ldr	r2, [pc, #336]	; (8004fec <HAL_DMA_Start_IT+0x228>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d009      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a53      	ldr	r2, [pc, #332]	; (8004ff0 <HAL_DMA_Start_IT+0x22c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a51      	ldr	r2, [pc, #324]	; (8004ff4 <HAL_DMA_Start_IT+0x230>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d108      	bne.n	8004ec4 <HAL_DMA_Start_IT+0x100>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0201 	bic.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e007      	b.n	8004ed4 <HAL_DMA_Start_IT+0x110>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f001 fe84 	bl	8006be8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a34      	ldr	r2, [pc, #208]	; (8004fb8 <HAL_DMA_Start_IT+0x1f4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d04a      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a33      	ldr	r2, [pc, #204]	; (8004fbc <HAL_DMA_Start_IT+0x1f8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d045      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a31      	ldr	r2, [pc, #196]	; (8004fc0 <HAL_DMA_Start_IT+0x1fc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d040      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a30      	ldr	r2, [pc, #192]	; (8004fc4 <HAL_DMA_Start_IT+0x200>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d03b      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2e      	ldr	r2, [pc, #184]	; (8004fc8 <HAL_DMA_Start_IT+0x204>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d036      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2d      	ldr	r2, [pc, #180]	; (8004fcc <HAL_DMA_Start_IT+0x208>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d031      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <HAL_DMA_Start_IT+0x20c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d02c      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <HAL_DMA_Start_IT+0x210>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d027      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a28      	ldr	r2, [pc, #160]	; (8004fd8 <HAL_DMA_Start_IT+0x214>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d022      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a27      	ldr	r2, [pc, #156]	; (8004fdc <HAL_DMA_Start_IT+0x218>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d01d      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <HAL_DMA_Start_IT+0x21c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d018      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a24      	ldr	r2, [pc, #144]	; (8004fe4 <HAL_DMA_Start_IT+0x220>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_DMA_Start_IT+0x224>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00e      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a21      	ldr	r2, [pc, #132]	; (8004fec <HAL_DMA_Start_IT+0x228>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d009      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <HAL_DMA_Start_IT+0x22c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <HAL_DMA_Start_IT+0x230>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <HAL_DMA_Start_IT+0x1c0>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <HAL_DMA_Start_IT+0x1c2>
 8004f84:	2300      	movs	r3, #0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d036      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 021e 	bic.w	r2, r3, #30
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0216 	orr.w	r2, r2, #22
 8004f9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d03e      	beq.n	8005024 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0208 	orr.w	r2, r2, #8
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e035      	b.n	8005024 <HAL_DMA_Start_IT+0x260>
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	40020040 	.word	0x40020040
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	40020070 	.word	0x40020070
 8004fcc:	40020088 	.word	0x40020088
 8004fd0:	400200a0 	.word	0x400200a0
 8004fd4:	400200b8 	.word	0x400200b8
 8004fd8:	40020410 	.word	0x40020410
 8004fdc:	40020428 	.word	0x40020428
 8004fe0:	40020440 	.word	0x40020440
 8004fe4:	40020458 	.word	0x40020458
 8004fe8:	40020470 	.word	0x40020470
 8004fec:	40020488 	.word	0x40020488
 8004ff0:	400204a0 	.word	0x400204a0
 8004ff4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 020e 	bic.w	r2, r3, #14
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 020a 	orr.w	r2, r2, #10
 800500a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0204 	orr.w	r2, r2, #4
 8005022:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a83      	ldr	r2, [pc, #524]	; (8005238 <HAL_DMA_Start_IT+0x474>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d072      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a82      	ldr	r2, [pc, #520]	; (800523c <HAL_DMA_Start_IT+0x478>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d06d      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a80      	ldr	r2, [pc, #512]	; (8005240 <HAL_DMA_Start_IT+0x47c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d068      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a7f      	ldr	r2, [pc, #508]	; (8005244 <HAL_DMA_Start_IT+0x480>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d063      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a7d      	ldr	r2, [pc, #500]	; (8005248 <HAL_DMA_Start_IT+0x484>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d05e      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a7c      	ldr	r2, [pc, #496]	; (800524c <HAL_DMA_Start_IT+0x488>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d059      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a7a      	ldr	r2, [pc, #488]	; (8005250 <HAL_DMA_Start_IT+0x48c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d054      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a79      	ldr	r2, [pc, #484]	; (8005254 <HAL_DMA_Start_IT+0x490>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d04f      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a77      	ldr	r2, [pc, #476]	; (8005258 <HAL_DMA_Start_IT+0x494>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d04a      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a76      	ldr	r2, [pc, #472]	; (800525c <HAL_DMA_Start_IT+0x498>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d045      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a74      	ldr	r2, [pc, #464]	; (8005260 <HAL_DMA_Start_IT+0x49c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d040      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a73      	ldr	r2, [pc, #460]	; (8005264 <HAL_DMA_Start_IT+0x4a0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d03b      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a71      	ldr	r2, [pc, #452]	; (8005268 <HAL_DMA_Start_IT+0x4a4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d036      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a70      	ldr	r2, [pc, #448]	; (800526c <HAL_DMA_Start_IT+0x4a8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d031      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a6e      	ldr	r2, [pc, #440]	; (8005270 <HAL_DMA_Start_IT+0x4ac>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d02c      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a6d      	ldr	r2, [pc, #436]	; (8005274 <HAL_DMA_Start_IT+0x4b0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d027      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a6b      	ldr	r2, [pc, #428]	; (8005278 <HAL_DMA_Start_IT+0x4b4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d022      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a6a      	ldr	r2, [pc, #424]	; (800527c <HAL_DMA_Start_IT+0x4b8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d01d      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a68      	ldr	r2, [pc, #416]	; (8005280 <HAL_DMA_Start_IT+0x4bc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a67      	ldr	r2, [pc, #412]	; (8005284 <HAL_DMA_Start_IT+0x4c0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a65      	ldr	r2, [pc, #404]	; (8005288 <HAL_DMA_Start_IT+0x4c4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a64      	ldr	r2, [pc, #400]	; (800528c <HAL_DMA_Start_IT+0x4c8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a62      	ldr	r2, [pc, #392]	; (8005290 <HAL_DMA_Start_IT+0x4cc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a61      	ldr	r2, [pc, #388]	; (8005294 <HAL_DMA_Start_IT+0x4d0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d101      	bne.n	8005118 <HAL_DMA_Start_IT+0x354>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_DMA_Start_IT+0x356>
 8005118:	2300      	movs	r3, #0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01a      	beq.n	8005154 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800513a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005152:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a37      	ldr	r2, [pc, #220]	; (8005238 <HAL_DMA_Start_IT+0x474>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d04a      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a36      	ldr	r2, [pc, #216]	; (800523c <HAL_DMA_Start_IT+0x478>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d045      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a34      	ldr	r2, [pc, #208]	; (8005240 <HAL_DMA_Start_IT+0x47c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d040      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a33      	ldr	r2, [pc, #204]	; (8005244 <HAL_DMA_Start_IT+0x480>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d03b      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a31      	ldr	r2, [pc, #196]	; (8005248 <HAL_DMA_Start_IT+0x484>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d036      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a30      	ldr	r2, [pc, #192]	; (800524c <HAL_DMA_Start_IT+0x488>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d031      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a2e      	ldr	r2, [pc, #184]	; (8005250 <HAL_DMA_Start_IT+0x48c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d02c      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <HAL_DMA_Start_IT+0x490>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d027      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <HAL_DMA_Start_IT+0x494>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2a      	ldr	r2, [pc, #168]	; (800525c <HAL_DMA_Start_IT+0x498>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01d      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a28      	ldr	r2, [pc, #160]	; (8005260 <HAL_DMA_Start_IT+0x49c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a27      	ldr	r2, [pc, #156]	; (8005264 <HAL_DMA_Start_IT+0x4a0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a25      	ldr	r2, [pc, #148]	; (8005268 <HAL_DMA_Start_IT+0x4a4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a24      	ldr	r2, [pc, #144]	; (800526c <HAL_DMA_Start_IT+0x4a8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <HAL_DMA_Start_IT+0x4ac>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a21      	ldr	r2, [pc, #132]	; (8005274 <HAL_DMA_Start_IT+0x4b0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <HAL_DMA_Start_IT+0x442>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e012      	b.n	800522c <HAL_DMA_Start_IT+0x468>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0201 	orr.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e009      	b.n	800522c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800521e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40020010 	.word	0x40020010
 800523c:	40020028 	.word	0x40020028
 8005240:	40020040 	.word	0x40020040
 8005244:	40020058 	.word	0x40020058
 8005248:	40020070 	.word	0x40020070
 800524c:	40020088 	.word	0x40020088
 8005250:	400200a0 	.word	0x400200a0
 8005254:	400200b8 	.word	0x400200b8
 8005258:	40020410 	.word	0x40020410
 800525c:	40020428 	.word	0x40020428
 8005260:	40020440 	.word	0x40020440
 8005264:	40020458 	.word	0x40020458
 8005268:	40020470 	.word	0x40020470
 800526c:	40020488 	.word	0x40020488
 8005270:	400204a0 	.word	0x400204a0
 8005274:	400204b8 	.word	0x400204b8
 8005278:	58025408 	.word	0x58025408
 800527c:	5802541c 	.word	0x5802541c
 8005280:	58025430 	.word	0x58025430
 8005284:	58025444 	.word	0x58025444
 8005288:	58025458 	.word	0x58025458
 800528c:	5802546c 	.word	0x5802546c
 8005290:	58025480 	.word	0x58025480
 8005294:	58025494 	.word	0x58025494

08005298 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80052a0:	f7ff f8e8 	bl	8004474 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e2dc      	b.n	800586a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d008      	beq.n	80052ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e2cd      	b.n	800586a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a76      	ldr	r2, [pc, #472]	; (80054ac <HAL_DMA_Abort+0x214>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d04a      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a74      	ldr	r2, [pc, #464]	; (80054b0 <HAL_DMA_Abort+0x218>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d045      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a73      	ldr	r2, [pc, #460]	; (80054b4 <HAL_DMA_Abort+0x21c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d040      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a71      	ldr	r2, [pc, #452]	; (80054b8 <HAL_DMA_Abort+0x220>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d03b      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a70      	ldr	r2, [pc, #448]	; (80054bc <HAL_DMA_Abort+0x224>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d036      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a6e      	ldr	r2, [pc, #440]	; (80054c0 <HAL_DMA_Abort+0x228>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d031      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a6d      	ldr	r2, [pc, #436]	; (80054c4 <HAL_DMA_Abort+0x22c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d02c      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a6b      	ldr	r2, [pc, #428]	; (80054c8 <HAL_DMA_Abort+0x230>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d027      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a6a      	ldr	r2, [pc, #424]	; (80054cc <HAL_DMA_Abort+0x234>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a68      	ldr	r2, [pc, #416]	; (80054d0 <HAL_DMA_Abort+0x238>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a67      	ldr	r2, [pc, #412]	; (80054d4 <HAL_DMA_Abort+0x23c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a65      	ldr	r2, [pc, #404]	; (80054d8 <HAL_DMA_Abort+0x240>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a64      	ldr	r2, [pc, #400]	; (80054dc <HAL_DMA_Abort+0x244>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a62      	ldr	r2, [pc, #392]	; (80054e0 <HAL_DMA_Abort+0x248>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a61      	ldr	r2, [pc, #388]	; (80054e4 <HAL_DMA_Abort+0x24c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a5f      	ldr	r2, [pc, #380]	; (80054e8 <HAL_DMA_Abort+0x250>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d101      	bne.n	8005372 <HAL_DMA_Abort+0xda>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_DMA_Abort+0xdc>
 8005372:	2300      	movs	r3, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d013      	beq.n	80053a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 021e 	bic.w	r2, r2, #30
 8005386:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005396:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e00a      	b.n	80053b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 020e 	bic.w	r2, r2, #14
 80053ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a3c      	ldr	r2, [pc, #240]	; (80054ac <HAL_DMA_Abort+0x214>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d072      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a3a      	ldr	r2, [pc, #232]	; (80054b0 <HAL_DMA_Abort+0x218>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d06d      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a39      	ldr	r2, [pc, #228]	; (80054b4 <HAL_DMA_Abort+0x21c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d068      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a37      	ldr	r2, [pc, #220]	; (80054b8 <HAL_DMA_Abort+0x220>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d063      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a36      	ldr	r2, [pc, #216]	; (80054bc <HAL_DMA_Abort+0x224>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d05e      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a34      	ldr	r2, [pc, #208]	; (80054c0 <HAL_DMA_Abort+0x228>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d059      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a33      	ldr	r2, [pc, #204]	; (80054c4 <HAL_DMA_Abort+0x22c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d054      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a31      	ldr	r2, [pc, #196]	; (80054c8 <HAL_DMA_Abort+0x230>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d04f      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a30      	ldr	r2, [pc, #192]	; (80054cc <HAL_DMA_Abort+0x234>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d04a      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a2e      	ldr	r2, [pc, #184]	; (80054d0 <HAL_DMA_Abort+0x238>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d045      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <HAL_DMA_Abort+0x23c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d040      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2b      	ldr	r2, [pc, #172]	; (80054d8 <HAL_DMA_Abort+0x240>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d03b      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <HAL_DMA_Abort+0x244>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d036      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a28      	ldr	r2, [pc, #160]	; (80054e0 <HAL_DMA_Abort+0x248>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d031      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <HAL_DMA_Abort+0x24c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d02c      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a25      	ldr	r2, [pc, #148]	; (80054e8 <HAL_DMA_Abort+0x250>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d027      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a24      	ldr	r2, [pc, #144]	; (80054ec <HAL_DMA_Abort+0x254>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <HAL_DMA_Abort+0x258>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01d      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <HAL_DMA_Abort+0x25c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <HAL_DMA_Abort+0x260>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <HAL_DMA_Abort+0x264>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <HAL_DMA_Abort+0x268>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_DMA_Abort+0x26c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <HAL_DMA_Abort+0x270>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d132      	bne.n	800550c <HAL_DMA_Abort+0x274>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e031      	b.n	800550e <HAL_DMA_Abort+0x276>
 80054aa:	bf00      	nop
 80054ac:	40020010 	.word	0x40020010
 80054b0:	40020028 	.word	0x40020028
 80054b4:	40020040 	.word	0x40020040
 80054b8:	40020058 	.word	0x40020058
 80054bc:	40020070 	.word	0x40020070
 80054c0:	40020088 	.word	0x40020088
 80054c4:	400200a0 	.word	0x400200a0
 80054c8:	400200b8 	.word	0x400200b8
 80054cc:	40020410 	.word	0x40020410
 80054d0:	40020428 	.word	0x40020428
 80054d4:	40020440 	.word	0x40020440
 80054d8:	40020458 	.word	0x40020458
 80054dc:	40020470 	.word	0x40020470
 80054e0:	40020488 	.word	0x40020488
 80054e4:	400204a0 	.word	0x400204a0
 80054e8:	400204b8 	.word	0x400204b8
 80054ec:	58025408 	.word	0x58025408
 80054f0:	5802541c 	.word	0x5802541c
 80054f4:	58025430 	.word	0x58025430
 80054f8:	58025444 	.word	0x58025444
 80054fc:	58025458 	.word	0x58025458
 8005500:	5802546c 	.word	0x5802546c
 8005504:	58025480 	.word	0x58025480
 8005508:	58025494 	.word	0x58025494
 800550c:	2300      	movs	r3, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005520:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a6d      	ldr	r2, [pc, #436]	; (80056dc <HAL_DMA_Abort+0x444>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d04a      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6b      	ldr	r2, [pc, #428]	; (80056e0 <HAL_DMA_Abort+0x448>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d045      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6a      	ldr	r2, [pc, #424]	; (80056e4 <HAL_DMA_Abort+0x44c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d040      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a68      	ldr	r2, [pc, #416]	; (80056e8 <HAL_DMA_Abort+0x450>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d03b      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a67      	ldr	r2, [pc, #412]	; (80056ec <HAL_DMA_Abort+0x454>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d036      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a65      	ldr	r2, [pc, #404]	; (80056f0 <HAL_DMA_Abort+0x458>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d031      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a64      	ldr	r2, [pc, #400]	; (80056f4 <HAL_DMA_Abort+0x45c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d02c      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a62      	ldr	r2, [pc, #392]	; (80056f8 <HAL_DMA_Abort+0x460>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d027      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a61      	ldr	r2, [pc, #388]	; (80056fc <HAL_DMA_Abort+0x464>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d022      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a5f      	ldr	r2, [pc, #380]	; (8005700 <HAL_DMA_Abort+0x468>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01d      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a5e      	ldr	r2, [pc, #376]	; (8005704 <HAL_DMA_Abort+0x46c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d018      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a5c      	ldr	r2, [pc, #368]	; (8005708 <HAL_DMA_Abort+0x470>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a5b      	ldr	r2, [pc, #364]	; (800570c <HAL_DMA_Abort+0x474>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00e      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a59      	ldr	r2, [pc, #356]	; (8005710 <HAL_DMA_Abort+0x478>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d009      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a58      	ldr	r2, [pc, #352]	; (8005714 <HAL_DMA_Abort+0x47c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d004      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a56      	ldr	r2, [pc, #344]	; (8005718 <HAL_DMA_Abort+0x480>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d108      	bne.n	80055d4 <HAL_DMA_Abort+0x33c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e007      	b.n	80055e4 <HAL_DMA_Abort+0x34c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80055e4:	e013      	b.n	800560e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055e6:	f7fe ff45 	bl	8004474 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	d90c      	bls.n	800560e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2203      	movs	r2, #3
 80055fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e12d      	b.n	800586a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e5      	bne.n	80055e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <HAL_DMA_Abort+0x444>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d04a      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <HAL_DMA_Abort+0x448>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d045      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2c      	ldr	r2, [pc, #176]	; (80056e4 <HAL_DMA_Abort+0x44c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d040      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2a      	ldr	r2, [pc, #168]	; (80056e8 <HAL_DMA_Abort+0x450>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d03b      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a29      	ldr	r2, [pc, #164]	; (80056ec <HAL_DMA_Abort+0x454>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d036      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a27      	ldr	r2, [pc, #156]	; (80056f0 <HAL_DMA_Abort+0x458>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d031      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a26      	ldr	r2, [pc, #152]	; (80056f4 <HAL_DMA_Abort+0x45c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d02c      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a24      	ldr	r2, [pc, #144]	; (80056f8 <HAL_DMA_Abort+0x460>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d027      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a23      	ldr	r2, [pc, #140]	; (80056fc <HAL_DMA_Abort+0x464>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a21      	ldr	r2, [pc, #132]	; (8005700 <HAL_DMA_Abort+0x468>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01d      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a20      	ldr	r2, [pc, #128]	; (8005704 <HAL_DMA_Abort+0x46c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <HAL_DMA_Abort+0x470>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1d      	ldr	r2, [pc, #116]	; (800570c <HAL_DMA_Abort+0x474>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <HAL_DMA_Abort+0x478>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <HAL_DMA_Abort+0x47c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a18      	ldr	r2, [pc, #96]	; (8005718 <HAL_DMA_Abort+0x480>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <HAL_DMA_Abort+0x426>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <HAL_DMA_Abort+0x428>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d02b      	beq.n	800571c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	223f      	movs	r2, #63	; 0x3f
 80056d4:	409a      	lsls	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	609a      	str	r2, [r3, #8]
 80056da:	e02a      	b.n	8005732 <HAL_DMA_Abort+0x49a>
 80056dc:	40020010 	.word	0x40020010
 80056e0:	40020028 	.word	0x40020028
 80056e4:	40020040 	.word	0x40020040
 80056e8:	40020058 	.word	0x40020058
 80056ec:	40020070 	.word	0x40020070
 80056f0:	40020088 	.word	0x40020088
 80056f4:	400200a0 	.word	0x400200a0
 80056f8:	400200b8 	.word	0x400200b8
 80056fc:	40020410 	.word	0x40020410
 8005700:	40020428 	.word	0x40020428
 8005704:	40020440 	.word	0x40020440
 8005708:	40020458 	.word	0x40020458
 800570c:	40020470 	.word	0x40020470
 8005710:	40020488 	.word	0x40020488
 8005714:	400204a0 	.word	0x400204a0
 8005718:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2201      	movs	r2, #1
 800572c:	409a      	lsls	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a4f      	ldr	r2, [pc, #316]	; (8005874 <HAL_DMA_Abort+0x5dc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d072      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a4d      	ldr	r2, [pc, #308]	; (8005878 <HAL_DMA_Abort+0x5e0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d06d      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a4c      	ldr	r2, [pc, #304]	; (800587c <HAL_DMA_Abort+0x5e4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d068      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a4a      	ldr	r2, [pc, #296]	; (8005880 <HAL_DMA_Abort+0x5e8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d063      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a49      	ldr	r2, [pc, #292]	; (8005884 <HAL_DMA_Abort+0x5ec>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d05e      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a47      	ldr	r2, [pc, #284]	; (8005888 <HAL_DMA_Abort+0x5f0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d059      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a46      	ldr	r2, [pc, #280]	; (800588c <HAL_DMA_Abort+0x5f4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d054      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a44      	ldr	r2, [pc, #272]	; (8005890 <HAL_DMA_Abort+0x5f8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d04f      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a43      	ldr	r2, [pc, #268]	; (8005894 <HAL_DMA_Abort+0x5fc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d04a      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a41      	ldr	r2, [pc, #260]	; (8005898 <HAL_DMA_Abort+0x600>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d045      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a40      	ldr	r2, [pc, #256]	; (800589c <HAL_DMA_Abort+0x604>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d040      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a3e      	ldr	r2, [pc, #248]	; (80058a0 <HAL_DMA_Abort+0x608>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d03b      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a3d      	ldr	r2, [pc, #244]	; (80058a4 <HAL_DMA_Abort+0x60c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d036      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <HAL_DMA_Abort+0x610>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d031      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a3a      	ldr	r2, [pc, #232]	; (80058ac <HAL_DMA_Abort+0x614>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d02c      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <HAL_DMA_Abort+0x618>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d027      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a37      	ldr	r2, [pc, #220]	; (80058b4 <HAL_DMA_Abort+0x61c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d022      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a35      	ldr	r2, [pc, #212]	; (80058b8 <HAL_DMA_Abort+0x620>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01d      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a34      	ldr	r2, [pc, #208]	; (80058bc <HAL_DMA_Abort+0x624>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d018      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a32      	ldr	r2, [pc, #200]	; (80058c0 <HAL_DMA_Abort+0x628>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a31      	ldr	r2, [pc, #196]	; (80058c4 <HAL_DMA_Abort+0x62c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00e      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a2f      	ldr	r2, [pc, #188]	; (80058c8 <HAL_DMA_Abort+0x630>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2e      	ldr	r2, [pc, #184]	; (80058cc <HAL_DMA_Abort+0x634>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <HAL_DMA_Abort+0x638>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <HAL_DMA_Abort+0x58e>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_DMA_Abort+0x590>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d015      	beq.n	8005858 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005834:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800584c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005856:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40020010 	.word	0x40020010
 8005878:	40020028 	.word	0x40020028
 800587c:	40020040 	.word	0x40020040
 8005880:	40020058 	.word	0x40020058
 8005884:	40020070 	.word	0x40020070
 8005888:	40020088 	.word	0x40020088
 800588c:	400200a0 	.word	0x400200a0
 8005890:	400200b8 	.word	0x400200b8
 8005894:	40020410 	.word	0x40020410
 8005898:	40020428 	.word	0x40020428
 800589c:	40020440 	.word	0x40020440
 80058a0:	40020458 	.word	0x40020458
 80058a4:	40020470 	.word	0x40020470
 80058a8:	40020488 	.word	0x40020488
 80058ac:	400204a0 	.word	0x400204a0
 80058b0:	400204b8 	.word	0x400204b8
 80058b4:	58025408 	.word	0x58025408
 80058b8:	5802541c 	.word	0x5802541c
 80058bc:	58025430 	.word	0x58025430
 80058c0:	58025444 	.word	0x58025444
 80058c4:	58025458 	.word	0x58025458
 80058c8:	5802546c 	.word	0x5802546c
 80058cc:	58025480 	.word	0x58025480
 80058d0:	58025494 	.word	0x58025494

080058d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e237      	b.n	8005d56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d004      	beq.n	80058fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2280      	movs	r2, #128	; 0x80
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e22c      	b.n	8005d56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5c      	ldr	r2, [pc, #368]	; (8005a74 <HAL_DMA_Abort_IT+0x1a0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d04a      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a5b      	ldr	r2, [pc, #364]	; (8005a78 <HAL_DMA_Abort_IT+0x1a4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d045      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a59      	ldr	r2, [pc, #356]	; (8005a7c <HAL_DMA_Abort_IT+0x1a8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d040      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a58      	ldr	r2, [pc, #352]	; (8005a80 <HAL_DMA_Abort_IT+0x1ac>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d03b      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a56      	ldr	r2, [pc, #344]	; (8005a84 <HAL_DMA_Abort_IT+0x1b0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d036      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a55      	ldr	r2, [pc, #340]	; (8005a88 <HAL_DMA_Abort_IT+0x1b4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d031      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a53      	ldr	r2, [pc, #332]	; (8005a8c <HAL_DMA_Abort_IT+0x1b8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d02c      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a52      	ldr	r2, [pc, #328]	; (8005a90 <HAL_DMA_Abort_IT+0x1bc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d027      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a50      	ldr	r2, [pc, #320]	; (8005a94 <HAL_DMA_Abort_IT+0x1c0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d022      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a4f      	ldr	r2, [pc, #316]	; (8005a98 <HAL_DMA_Abort_IT+0x1c4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d01d      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a4d      	ldr	r2, [pc, #308]	; (8005a9c <HAL_DMA_Abort_IT+0x1c8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d018      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a4c      	ldr	r2, [pc, #304]	; (8005aa0 <HAL_DMA_Abort_IT+0x1cc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a4a      	ldr	r2, [pc, #296]	; (8005aa4 <HAL_DMA_Abort_IT+0x1d0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00e      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a49      	ldr	r2, [pc, #292]	; (8005aa8 <HAL_DMA_Abort_IT+0x1d4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a47      	ldr	r2, [pc, #284]	; (8005aac <HAL_DMA_Abort_IT+0x1d8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_DMA_Abort_IT+0xc8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a46      	ldr	r2, [pc, #280]	; (8005ab0 <HAL_DMA_Abort_IT+0x1dc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d101      	bne.n	80059a0 <HAL_DMA_Abort_IT+0xcc>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <HAL_DMA_Abort_IT+0xce>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 8086 	beq.w	8005ab4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2204      	movs	r2, #4
 80059ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a2f      	ldr	r2, [pc, #188]	; (8005a74 <HAL_DMA_Abort_IT+0x1a0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d04a      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a2e      	ldr	r2, [pc, #184]	; (8005a78 <HAL_DMA_Abort_IT+0x1a4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d045      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <HAL_DMA_Abort_IT+0x1a8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d040      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2b      	ldr	r2, [pc, #172]	; (8005a80 <HAL_DMA_Abort_IT+0x1ac>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d03b      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a29      	ldr	r2, [pc, #164]	; (8005a84 <HAL_DMA_Abort_IT+0x1b0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d036      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a28      	ldr	r2, [pc, #160]	; (8005a88 <HAL_DMA_Abort_IT+0x1b4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d031      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a26      	ldr	r2, [pc, #152]	; (8005a8c <HAL_DMA_Abort_IT+0x1b8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02c      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a25      	ldr	r2, [pc, #148]	; (8005a90 <HAL_DMA_Abort_IT+0x1bc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d027      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <HAL_DMA_Abort_IT+0x1c0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d022      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <HAL_DMA_Abort_IT+0x1c4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d01d      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <HAL_DMA_Abort_IT+0x1c8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d018      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <HAL_DMA_Abort_IT+0x1cc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <HAL_DMA_Abort_IT+0x1d0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <HAL_DMA_Abort_IT+0x1d4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <HAL_DMA_Abort_IT+0x1d8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_DMA_Abort_IT+0x17c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <HAL_DMA_Abort_IT+0x1dc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d108      	bne.n	8005a62 <HAL_DMA_Abort_IT+0x18e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e178      	b.n	8005d54 <HAL_DMA_Abort_IT+0x480>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e16f      	b.n	8005d54 <HAL_DMA_Abort_IT+0x480>
 8005a74:	40020010 	.word	0x40020010
 8005a78:	40020028 	.word	0x40020028
 8005a7c:	40020040 	.word	0x40020040
 8005a80:	40020058 	.word	0x40020058
 8005a84:	40020070 	.word	0x40020070
 8005a88:	40020088 	.word	0x40020088
 8005a8c:	400200a0 	.word	0x400200a0
 8005a90:	400200b8 	.word	0x400200b8
 8005a94:	40020410 	.word	0x40020410
 8005a98:	40020428 	.word	0x40020428
 8005a9c:	40020440 	.word	0x40020440
 8005aa0:	40020458 	.word	0x40020458
 8005aa4:	40020470 	.word	0x40020470
 8005aa8:	40020488 	.word	0x40020488
 8005aac:	400204a0 	.word	0x400204a0
 8005ab0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 020e 	bic.w	r2, r2, #14
 8005ac2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a6c      	ldr	r2, [pc, #432]	; (8005c7c <HAL_DMA_Abort_IT+0x3a8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d04a      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a6b      	ldr	r2, [pc, #428]	; (8005c80 <HAL_DMA_Abort_IT+0x3ac>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d045      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a69      	ldr	r2, [pc, #420]	; (8005c84 <HAL_DMA_Abort_IT+0x3b0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d040      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a68      	ldr	r2, [pc, #416]	; (8005c88 <HAL_DMA_Abort_IT+0x3b4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d03b      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a66      	ldr	r2, [pc, #408]	; (8005c8c <HAL_DMA_Abort_IT+0x3b8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d036      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a65      	ldr	r2, [pc, #404]	; (8005c90 <HAL_DMA_Abort_IT+0x3bc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d031      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a63      	ldr	r2, [pc, #396]	; (8005c94 <HAL_DMA_Abort_IT+0x3c0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d02c      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a62      	ldr	r2, [pc, #392]	; (8005c98 <HAL_DMA_Abort_IT+0x3c4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d027      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a60      	ldr	r2, [pc, #384]	; (8005c9c <HAL_DMA_Abort_IT+0x3c8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d022      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5f      	ldr	r2, [pc, #380]	; (8005ca0 <HAL_DMA_Abort_IT+0x3cc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d01d      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a5d      	ldr	r2, [pc, #372]	; (8005ca4 <HAL_DMA_Abort_IT+0x3d0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d018      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a5c      	ldr	r2, [pc, #368]	; (8005ca8 <HAL_DMA_Abort_IT+0x3d4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d013      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a5a      	ldr	r2, [pc, #360]	; (8005cac <HAL_DMA_Abort_IT+0x3d8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00e      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a59      	ldr	r2, [pc, #356]	; (8005cb0 <HAL_DMA_Abort_IT+0x3dc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a57      	ldr	r2, [pc, #348]	; (8005cb4 <HAL_DMA_Abort_IT+0x3e0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_DMA_Abort_IT+0x290>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a56      	ldr	r2, [pc, #344]	; (8005cb8 <HAL_DMA_Abort_IT+0x3e4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d108      	bne.n	8005b76 <HAL_DMA_Abort_IT+0x2a2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0201 	bic.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	e007      	b.n	8005b86 <HAL_DMA_Abort_IT+0x2b2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3c      	ldr	r2, [pc, #240]	; (8005c7c <HAL_DMA_Abort_IT+0x3a8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d072      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a3a      	ldr	r2, [pc, #232]	; (8005c80 <HAL_DMA_Abort_IT+0x3ac>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d06d      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a39      	ldr	r2, [pc, #228]	; (8005c84 <HAL_DMA_Abort_IT+0x3b0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d068      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a37      	ldr	r2, [pc, #220]	; (8005c88 <HAL_DMA_Abort_IT+0x3b4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d063      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a36      	ldr	r2, [pc, #216]	; (8005c8c <HAL_DMA_Abort_IT+0x3b8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d05e      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a34      	ldr	r2, [pc, #208]	; (8005c90 <HAL_DMA_Abort_IT+0x3bc>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d059      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a33      	ldr	r2, [pc, #204]	; (8005c94 <HAL_DMA_Abort_IT+0x3c0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d054      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a31      	ldr	r2, [pc, #196]	; (8005c98 <HAL_DMA_Abort_IT+0x3c4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d04f      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a30      	ldr	r2, [pc, #192]	; (8005c9c <HAL_DMA_Abort_IT+0x3c8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d04a      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2e      	ldr	r2, [pc, #184]	; (8005ca0 <HAL_DMA_Abort_IT+0x3cc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d045      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2d      	ldr	r2, [pc, #180]	; (8005ca4 <HAL_DMA_Abort_IT+0x3d0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d040      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2b      	ldr	r2, [pc, #172]	; (8005ca8 <HAL_DMA_Abort_IT+0x3d4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d03b      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <HAL_DMA_Abort_IT+0x3d8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d036      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a28      	ldr	r2, [pc, #160]	; (8005cb0 <HAL_DMA_Abort_IT+0x3dc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d031      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a27      	ldr	r2, [pc, #156]	; (8005cb4 <HAL_DMA_Abort_IT+0x3e0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d02c      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a25      	ldr	r2, [pc, #148]	; (8005cb8 <HAL_DMA_Abort_IT+0x3e4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d027      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a24      	ldr	r2, [pc, #144]	; (8005cbc <HAL_DMA_Abort_IT+0x3e8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d022      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <HAL_DMA_Abort_IT+0x3ec>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01d      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <HAL_DMA_Abort_IT+0x3f0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d018      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1f      	ldr	r2, [pc, #124]	; (8005cc8 <HAL_DMA_Abort_IT+0x3f4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <HAL_DMA_Abort_IT+0x3f8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <HAL_DMA_Abort_IT+0x3fc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d009      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <HAL_DMA_Abort_IT+0x400>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_DMA_Abort_IT+0x3a2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a19      	ldr	r2, [pc, #100]	; (8005cd8 <HAL_DMA_Abort_IT+0x404>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d132      	bne.n	8005cdc <HAL_DMA_Abort_IT+0x408>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e031      	b.n	8005cde <HAL_DMA_Abort_IT+0x40a>
 8005c7a:	bf00      	nop
 8005c7c:	40020010 	.word	0x40020010
 8005c80:	40020028 	.word	0x40020028
 8005c84:	40020040 	.word	0x40020040
 8005c88:	40020058 	.word	0x40020058
 8005c8c:	40020070 	.word	0x40020070
 8005c90:	40020088 	.word	0x40020088
 8005c94:	400200a0 	.word	0x400200a0
 8005c98:	400200b8 	.word	0x400200b8
 8005c9c:	40020410 	.word	0x40020410
 8005ca0:	40020428 	.word	0x40020428
 8005ca4:	40020440 	.word	0x40020440
 8005ca8:	40020458 	.word	0x40020458
 8005cac:	40020470 	.word	0x40020470
 8005cb0:	40020488 	.word	0x40020488
 8005cb4:	400204a0 	.word	0x400204a0
 8005cb8:	400204b8 	.word	0x400204b8
 8005cbc:	58025408 	.word	0x58025408
 8005cc0:	5802541c 	.word	0x5802541c
 8005cc4:	58025430 	.word	0x58025430
 8005cc8:	58025444 	.word	0x58025444
 8005ccc:	58025458 	.word	0x58025458
 8005cd0:	5802546c 	.word	0x5802546c
 8005cd4:	58025480 	.word	0x58025480
 8005cd8:	58025494 	.word	0x58025494
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d028      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cf0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	2201      	movs	r2, #1
 8005d02:	409a      	lsls	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00c      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop

08005d60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d6c:	4b67      	ldr	r3, [pc, #412]	; (8005f0c <HAL_DMA_IRQHandler+0x1ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a67      	ldr	r2, [pc, #412]	; (8005f10 <HAL_DMA_IRQHandler+0x1b0>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	0a9b      	lsrs	r3, r3, #10
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a5f      	ldr	r2, [pc, #380]	; (8005f14 <HAL_DMA_IRQHandler+0x1b4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d04a      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a5d      	ldr	r2, [pc, #372]	; (8005f18 <HAL_DMA_IRQHandler+0x1b8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d045      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a5c      	ldr	r2, [pc, #368]	; (8005f1c <HAL_DMA_IRQHandler+0x1bc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d040      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5a      	ldr	r2, [pc, #360]	; (8005f20 <HAL_DMA_IRQHandler+0x1c0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d03b      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a59      	ldr	r2, [pc, #356]	; (8005f24 <HAL_DMA_IRQHandler+0x1c4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d036      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a57      	ldr	r2, [pc, #348]	; (8005f28 <HAL_DMA_IRQHandler+0x1c8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d031      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a56      	ldr	r2, [pc, #344]	; (8005f2c <HAL_DMA_IRQHandler+0x1cc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d02c      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a54      	ldr	r2, [pc, #336]	; (8005f30 <HAL_DMA_IRQHandler+0x1d0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d027      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a53      	ldr	r2, [pc, #332]	; (8005f34 <HAL_DMA_IRQHandler+0x1d4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d022      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a51      	ldr	r2, [pc, #324]	; (8005f38 <HAL_DMA_IRQHandler+0x1d8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01d      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a50      	ldr	r2, [pc, #320]	; (8005f3c <HAL_DMA_IRQHandler+0x1dc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d018      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a4e      	ldr	r2, [pc, #312]	; (8005f40 <HAL_DMA_IRQHandler+0x1e0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4d      	ldr	r2, [pc, #308]	; (8005f44 <HAL_DMA_IRQHandler+0x1e4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00e      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a4b      	ldr	r2, [pc, #300]	; (8005f48 <HAL_DMA_IRQHandler+0x1e8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d009      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a4a      	ldr	r2, [pc, #296]	; (8005f4c <HAL_DMA_IRQHandler+0x1ec>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <HAL_DMA_IRQHandler+0xd2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a48      	ldr	r2, [pc, #288]	; (8005f50 <HAL_DMA_IRQHandler+0x1f0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d101      	bne.n	8005e36 <HAL_DMA_IRQHandler+0xd6>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <HAL_DMA_IRQHandler+0xd8>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 842b 	beq.w	8006694 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	2208      	movs	r2, #8
 8005e48:	409a      	lsls	r2, r3
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80a2 	beq.w	8005f98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2e      	ldr	r2, [pc, #184]	; (8005f14 <HAL_DMA_IRQHandler+0x1b4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d04a      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a2d      	ldr	r2, [pc, #180]	; (8005f18 <HAL_DMA_IRQHandler+0x1b8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d045      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2b      	ldr	r2, [pc, #172]	; (8005f1c <HAL_DMA_IRQHandler+0x1bc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d040      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <HAL_DMA_IRQHandler+0x1c0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d03b      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a28      	ldr	r2, [pc, #160]	; (8005f24 <HAL_DMA_IRQHandler+0x1c4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d036      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a27      	ldr	r2, [pc, #156]	; (8005f28 <HAL_DMA_IRQHandler+0x1c8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d031      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <HAL_DMA_IRQHandler+0x1cc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d02c      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a24      	ldr	r2, [pc, #144]	; (8005f30 <HAL_DMA_IRQHandler+0x1d0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d027      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <HAL_DMA_IRQHandler+0x1d4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d022      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <HAL_DMA_IRQHandler+0x1d8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d01d      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <HAL_DMA_IRQHandler+0x1dc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d018      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <HAL_DMA_IRQHandler+0x1e0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d013      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_DMA_IRQHandler+0x1e4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <HAL_DMA_IRQHandler+0x1e8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d009      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <HAL_DMA_IRQHandler+0x1ec>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d004      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x194>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a18      	ldr	r2, [pc, #96]	; (8005f50 <HAL_DMA_IRQHandler+0x1f0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d12f      	bne.n	8005f54 <HAL_DMA_IRQHandler+0x1f4>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bf14      	ite	ne
 8005f02:	2301      	movne	r3, #1
 8005f04:	2300      	moveq	r3, #0
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	e02e      	b.n	8005f68 <HAL_DMA_IRQHandler+0x208>
 8005f0a:	bf00      	nop
 8005f0c:	24000018 	.word	0x24000018
 8005f10:	1b4e81b5 	.word	0x1b4e81b5
 8005f14:	40020010 	.word	0x40020010
 8005f18:	40020028 	.word	0x40020028
 8005f1c:	40020040 	.word	0x40020040
 8005f20:	40020058 	.word	0x40020058
 8005f24:	40020070 	.word	0x40020070
 8005f28:	40020088 	.word	0x40020088
 8005f2c:	400200a0 	.word	0x400200a0
 8005f30:	400200b8 	.word	0x400200b8
 8005f34:	40020410 	.word	0x40020410
 8005f38:	40020428 	.word	0x40020428
 8005f3c:	40020440 	.word	0x40020440
 8005f40:	40020458 	.word	0x40020458
 8005f44:	40020470 	.word	0x40020470
 8005f48:	40020488 	.word	0x40020488
 8005f4c:	400204a0 	.word	0x400204a0
 8005f50:	400204b8 	.word	0x400204b8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bf14      	ite	ne
 8005f62:	2301      	movne	r3, #1
 8005f64:	2300      	moveq	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d015      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0204 	bic.w	r2, r2, #4
 8005f7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	2208      	movs	r2, #8
 8005f86:	409a      	lsls	r2, r3
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f90:	f043 0201 	orr.w	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9c:	f003 031f 	and.w	r3, r3, #31
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d06e      	beq.n	800608c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a69      	ldr	r2, [pc, #420]	; (8006158 <HAL_DMA_IRQHandler+0x3f8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d04a      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a67      	ldr	r2, [pc, #412]	; (800615c <HAL_DMA_IRQHandler+0x3fc>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d045      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a66      	ldr	r2, [pc, #408]	; (8006160 <HAL_DMA_IRQHandler+0x400>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d040      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a64      	ldr	r2, [pc, #400]	; (8006164 <HAL_DMA_IRQHandler+0x404>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d03b      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a63      	ldr	r2, [pc, #396]	; (8006168 <HAL_DMA_IRQHandler+0x408>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d036      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a61      	ldr	r2, [pc, #388]	; (800616c <HAL_DMA_IRQHandler+0x40c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d031      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a60      	ldr	r2, [pc, #384]	; (8006170 <HAL_DMA_IRQHandler+0x410>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d02c      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a5e      	ldr	r2, [pc, #376]	; (8006174 <HAL_DMA_IRQHandler+0x414>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d027      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a5d      	ldr	r2, [pc, #372]	; (8006178 <HAL_DMA_IRQHandler+0x418>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d022      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a5b      	ldr	r2, [pc, #364]	; (800617c <HAL_DMA_IRQHandler+0x41c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01d      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a5a      	ldr	r2, [pc, #360]	; (8006180 <HAL_DMA_IRQHandler+0x420>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d018      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a58      	ldr	r2, [pc, #352]	; (8006184 <HAL_DMA_IRQHandler+0x424>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a57      	ldr	r2, [pc, #348]	; (8006188 <HAL_DMA_IRQHandler+0x428>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00e      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a55      	ldr	r2, [pc, #340]	; (800618c <HAL_DMA_IRQHandler+0x42c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d009      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a54      	ldr	r2, [pc, #336]	; (8006190 <HAL_DMA_IRQHandler+0x430>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d004      	beq.n	800604e <HAL_DMA_IRQHandler+0x2ee>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a52      	ldr	r2, [pc, #328]	; (8006194 <HAL_DMA_IRQHandler+0x434>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10a      	bne.n	8006064 <HAL_DMA_IRQHandler+0x304>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf14      	ite	ne
 800605c:	2301      	movne	r3, #1
 800605e:	2300      	moveq	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	e003      	b.n	800606c <HAL_DMA_IRQHandler+0x30c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2300      	movs	r3, #0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00d      	beq.n	800608c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	2201      	movs	r2, #1
 800607a:	409a      	lsls	r2, r3
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006084:	f043 0202 	orr.w	r2, r3, #2
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	2204      	movs	r2, #4
 8006096:	409a      	lsls	r2, r3
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 808f 	beq.w	80061c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2c      	ldr	r2, [pc, #176]	; (8006158 <HAL_DMA_IRQHandler+0x3f8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d04a      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a2a      	ldr	r2, [pc, #168]	; (800615c <HAL_DMA_IRQHandler+0x3fc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d045      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a29      	ldr	r2, [pc, #164]	; (8006160 <HAL_DMA_IRQHandler+0x400>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d040      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a27      	ldr	r2, [pc, #156]	; (8006164 <HAL_DMA_IRQHandler+0x404>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d03b      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a26      	ldr	r2, [pc, #152]	; (8006168 <HAL_DMA_IRQHandler+0x408>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d036      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a24      	ldr	r2, [pc, #144]	; (800616c <HAL_DMA_IRQHandler+0x40c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d031      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a23      	ldr	r2, [pc, #140]	; (8006170 <HAL_DMA_IRQHandler+0x410>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d02c      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a21      	ldr	r2, [pc, #132]	; (8006174 <HAL_DMA_IRQHandler+0x414>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d027      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a20      	ldr	r2, [pc, #128]	; (8006178 <HAL_DMA_IRQHandler+0x418>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d022      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1e      	ldr	r2, [pc, #120]	; (800617c <HAL_DMA_IRQHandler+0x41c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01d      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1d      	ldr	r2, [pc, #116]	; (8006180 <HAL_DMA_IRQHandler+0x420>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d018      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <HAL_DMA_IRQHandler+0x424>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1a      	ldr	r2, [pc, #104]	; (8006188 <HAL_DMA_IRQHandler+0x428>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a18      	ldr	r2, [pc, #96]	; (800618c <HAL_DMA_IRQHandler+0x42c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a17      	ldr	r2, [pc, #92]	; (8006190 <HAL_DMA_IRQHandler+0x430>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_DMA_IRQHandler+0x3e2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a15      	ldr	r2, [pc, #84]	; (8006194 <HAL_DMA_IRQHandler+0x434>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d12a      	bne.n	8006198 <HAL_DMA_IRQHandler+0x438>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e023      	b.n	80061a0 <HAL_DMA_IRQHandler+0x440>
 8006158:	40020010 	.word	0x40020010
 800615c:	40020028 	.word	0x40020028
 8006160:	40020040 	.word	0x40020040
 8006164:	40020058 	.word	0x40020058
 8006168:	40020070 	.word	0x40020070
 800616c:	40020088 	.word	0x40020088
 8006170:	400200a0 	.word	0x400200a0
 8006174:	400200b8 	.word	0x400200b8
 8006178:	40020410 	.word	0x40020410
 800617c:	40020428 	.word	0x40020428
 8006180:	40020440 	.word	0x40020440
 8006184:	40020458 	.word	0x40020458
 8006188:	40020470 	.word	0x40020470
 800618c:	40020488 	.word	0x40020488
 8006190:	400204a0 	.word	0x400204a0
 8006194:	400204b8 	.word	0x400204b8
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00d      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2204      	movs	r2, #4
 80061ae:	409a      	lsls	r2, r3
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b8:	f043 0204 	orr.w	r2, r3, #4
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2210      	movs	r2, #16
 80061ca:	409a      	lsls	r2, r3
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 80a6 	beq.w	8006322 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a85      	ldr	r2, [pc, #532]	; (80063f0 <HAL_DMA_IRQHandler+0x690>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d04a      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a83      	ldr	r2, [pc, #524]	; (80063f4 <HAL_DMA_IRQHandler+0x694>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d045      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a82      	ldr	r2, [pc, #520]	; (80063f8 <HAL_DMA_IRQHandler+0x698>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d040      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a80      	ldr	r2, [pc, #512]	; (80063fc <HAL_DMA_IRQHandler+0x69c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d03b      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a7f      	ldr	r2, [pc, #508]	; (8006400 <HAL_DMA_IRQHandler+0x6a0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d036      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a7d      	ldr	r2, [pc, #500]	; (8006404 <HAL_DMA_IRQHandler+0x6a4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d031      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a7c      	ldr	r2, [pc, #496]	; (8006408 <HAL_DMA_IRQHandler+0x6a8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d02c      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a7a      	ldr	r2, [pc, #488]	; (800640c <HAL_DMA_IRQHandler+0x6ac>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d027      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a79      	ldr	r2, [pc, #484]	; (8006410 <HAL_DMA_IRQHandler+0x6b0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d022      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a77      	ldr	r2, [pc, #476]	; (8006414 <HAL_DMA_IRQHandler+0x6b4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01d      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a76      	ldr	r2, [pc, #472]	; (8006418 <HAL_DMA_IRQHandler+0x6b8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d018      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a74      	ldr	r2, [pc, #464]	; (800641c <HAL_DMA_IRQHandler+0x6bc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a73      	ldr	r2, [pc, #460]	; (8006420 <HAL_DMA_IRQHandler+0x6c0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a71      	ldr	r2, [pc, #452]	; (8006424 <HAL_DMA_IRQHandler+0x6c4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a70      	ldr	r2, [pc, #448]	; (8006428 <HAL_DMA_IRQHandler+0x6c8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_DMA_IRQHandler+0x516>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a6e      	ldr	r2, [pc, #440]	; (800642c <HAL_DMA_IRQHandler+0x6cc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d10a      	bne.n	800628c <HAL_DMA_IRQHandler+0x52c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e009      	b.n	80062a0 <HAL_DMA_IRQHandler+0x540>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	bf14      	ite	ne
 800629a:	2301      	movne	r3, #1
 800629c:	2300      	moveq	r3, #0
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d03e      	beq.n	8006322 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	2210      	movs	r2, #16
 80062ae:	409a      	lsls	r2, r3
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d018      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d108      	bne.n	80062e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d024      	beq.n	8006322 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
 80062e0:	e01f      	b.n	8006322 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01b      	beq.n	8006322 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
 80062f2:	e016      	b.n	8006322 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d107      	bne.n	8006312 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0208 	bic.w	r2, r2, #8
 8006310:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2220      	movs	r2, #32
 800632c:	409a      	lsls	r2, r3
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	4013      	ands	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8110 	beq.w	8006558 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a2c      	ldr	r2, [pc, #176]	; (80063f0 <HAL_DMA_IRQHandler+0x690>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d04a      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a2b      	ldr	r2, [pc, #172]	; (80063f4 <HAL_DMA_IRQHandler+0x694>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d045      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a29      	ldr	r2, [pc, #164]	; (80063f8 <HAL_DMA_IRQHandler+0x698>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d040      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a28      	ldr	r2, [pc, #160]	; (80063fc <HAL_DMA_IRQHandler+0x69c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d03b      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a26      	ldr	r2, [pc, #152]	; (8006400 <HAL_DMA_IRQHandler+0x6a0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d036      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a25      	ldr	r2, [pc, #148]	; (8006404 <HAL_DMA_IRQHandler+0x6a4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d031      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a23      	ldr	r2, [pc, #140]	; (8006408 <HAL_DMA_IRQHandler+0x6a8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02c      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a22      	ldr	r2, [pc, #136]	; (800640c <HAL_DMA_IRQHandler+0x6ac>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d027      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a20      	ldr	r2, [pc, #128]	; (8006410 <HAL_DMA_IRQHandler+0x6b0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d022      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1f      	ldr	r2, [pc, #124]	; (8006414 <HAL_DMA_IRQHandler+0x6b4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d01d      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <HAL_DMA_IRQHandler+0x6b8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d018      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1c      	ldr	r2, [pc, #112]	; (800641c <HAL_DMA_IRQHandler+0x6bc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a1a      	ldr	r2, [pc, #104]	; (8006420 <HAL_DMA_IRQHandler+0x6c0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00e      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a19      	ldr	r2, [pc, #100]	; (8006424 <HAL_DMA_IRQHandler+0x6c4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d009      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a17      	ldr	r2, [pc, #92]	; (8006428 <HAL_DMA_IRQHandler+0x6c8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x678>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a16      	ldr	r2, [pc, #88]	; (800642c <HAL_DMA_IRQHandler+0x6cc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d12b      	bne.n	8006430 <HAL_DMA_IRQHandler+0x6d0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0310 	and.w	r3, r3, #16
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bf14      	ite	ne
 80063e6:	2301      	movne	r3, #1
 80063e8:	2300      	moveq	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	e02a      	b.n	8006444 <HAL_DMA_IRQHandler+0x6e4>
 80063ee:	bf00      	nop
 80063f0:	40020010 	.word	0x40020010
 80063f4:	40020028 	.word	0x40020028
 80063f8:	40020040 	.word	0x40020040
 80063fc:	40020058 	.word	0x40020058
 8006400:	40020070 	.word	0x40020070
 8006404:	40020088 	.word	0x40020088
 8006408:	400200a0 	.word	0x400200a0
 800640c:	400200b8 	.word	0x400200b8
 8006410:	40020410 	.word	0x40020410
 8006414:	40020428 	.word	0x40020428
 8006418:	40020440 	.word	0x40020440
 800641c:	40020458 	.word	0x40020458
 8006420:	40020470 	.word	0x40020470
 8006424:	40020488 	.word	0x40020488
 8006428:	400204a0 	.word	0x400204a0
 800642c:	400204b8 	.word	0x400204b8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	bf14      	ite	ne
 800643e:	2301      	movne	r3, #1
 8006440:	2300      	moveq	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8087 	beq.w	8006558 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	2220      	movs	r2, #32
 8006454:	409a      	lsls	r2, r3
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b04      	cmp	r3, #4
 8006464:	d139      	bne.n	80064da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0216 	bic.w	r2, r2, #22
 8006474:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695a      	ldr	r2, [r3, #20]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006484:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <HAL_DMA_IRQHandler+0x736>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006492:	2b00      	cmp	r3, #0
 8006494:	d007      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0208 	bic.w	r2, r2, #8
 80064a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	223f      	movs	r2, #63	; 0x3f
 80064b0:	409a      	lsls	r2, r3
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 834a 	beq.w	8006b64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
          }
          return;
 80064d8:	e344      	b.n	8006b64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d018      	beq.n	800651a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d108      	bne.n	8006508 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d02c      	beq.n	8006558 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	4798      	blx	r3
 8006506:	e027      	b.n	8006558 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d023      	beq.n	8006558 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
 8006518:	e01e      	b.n	8006558 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10f      	bne.n	8006548 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0210 	bic.w	r2, r2, #16
 8006536:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8306 	beq.w	8006b6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8088 	beq.w	8006680 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2204      	movs	r2, #4
 8006574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a7a      	ldr	r2, [pc, #488]	; (8006768 <HAL_DMA_IRQHandler+0xa08>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d04a      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a79      	ldr	r2, [pc, #484]	; (800676c <HAL_DMA_IRQHandler+0xa0c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d045      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a77      	ldr	r2, [pc, #476]	; (8006770 <HAL_DMA_IRQHandler+0xa10>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d040      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a76      	ldr	r2, [pc, #472]	; (8006774 <HAL_DMA_IRQHandler+0xa14>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d03b      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a74      	ldr	r2, [pc, #464]	; (8006778 <HAL_DMA_IRQHandler+0xa18>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d036      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a73      	ldr	r2, [pc, #460]	; (800677c <HAL_DMA_IRQHandler+0xa1c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d031      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a71      	ldr	r2, [pc, #452]	; (8006780 <HAL_DMA_IRQHandler+0xa20>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d02c      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a70      	ldr	r2, [pc, #448]	; (8006784 <HAL_DMA_IRQHandler+0xa24>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d027      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a6e      	ldr	r2, [pc, #440]	; (8006788 <HAL_DMA_IRQHandler+0xa28>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d022      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a6d      	ldr	r2, [pc, #436]	; (800678c <HAL_DMA_IRQHandler+0xa2c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d01d      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a6b      	ldr	r2, [pc, #428]	; (8006790 <HAL_DMA_IRQHandler+0xa30>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d018      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a6a      	ldr	r2, [pc, #424]	; (8006794 <HAL_DMA_IRQHandler+0xa34>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d013      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a68      	ldr	r2, [pc, #416]	; (8006798 <HAL_DMA_IRQHandler+0xa38>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00e      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a67      	ldr	r2, [pc, #412]	; (800679c <HAL_DMA_IRQHandler+0xa3c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d009      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a65      	ldr	r2, [pc, #404]	; (80067a0 <HAL_DMA_IRQHandler+0xa40>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <HAL_DMA_IRQHandler+0x8b8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a64      	ldr	r2, [pc, #400]	; (80067a4 <HAL_DMA_IRQHandler+0xa44>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d108      	bne.n	800662a <HAL_DMA_IRQHandler+0x8ca>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	e007      	b.n	800663a <HAL_DMA_IRQHandler+0x8da>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	429a      	cmp	r2, r3
 8006644:	d307      	bcc.n	8006656 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1f2      	bne.n	800663a <HAL_DMA_IRQHandler+0x8da>
 8006654:	e000      	b.n	8006658 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006656:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2203      	movs	r2, #3
 800666a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800666e:	e003      	b.n	8006678 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8272 	beq.w	8006b6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
 8006692:	e26c      	b.n	8006b6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a43      	ldr	r2, [pc, #268]	; (80067a8 <HAL_DMA_IRQHandler+0xa48>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d022      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x984>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a42      	ldr	r2, [pc, #264]	; (80067ac <HAL_DMA_IRQHandler+0xa4c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d01d      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x984>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a40      	ldr	r2, [pc, #256]	; (80067b0 <HAL_DMA_IRQHandler+0xa50>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d018      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x984>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a3f      	ldr	r2, [pc, #252]	; (80067b4 <HAL_DMA_IRQHandler+0xa54>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x984>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a3d      	ldr	r2, [pc, #244]	; (80067b8 <HAL_DMA_IRQHandler+0xa58>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00e      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x984>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3c      	ldr	r2, [pc, #240]	; (80067bc <HAL_DMA_IRQHandler+0xa5c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d009      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x984>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a3a      	ldr	r2, [pc, #232]	; (80067c0 <HAL_DMA_IRQHandler+0xa60>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d004      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x984>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a39      	ldr	r2, [pc, #228]	; (80067c4 <HAL_DMA_IRQHandler+0xa64>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d101      	bne.n	80066e8 <HAL_DMA_IRQHandler+0x988>
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <HAL_DMA_IRQHandler+0x98a>
 80066e8:	2300      	movs	r3, #0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 823f 	beq.w	8006b6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	2204      	movs	r2, #4
 8006702:	409a      	lsls	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4013      	ands	r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80cd 	beq.w	80068a8 <HAL_DMA_IRQHandler+0xb48>
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80c7 	beq.w	80068a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2204      	movs	r2, #4
 8006724:	409a      	lsls	r2, r3
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d049      	beq.n	80067c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8210 	beq.w	8006b68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006750:	e20a      	b.n	8006b68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 8206 	beq.w	8006b68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006764:	e200      	b.n	8006b68 <HAL_DMA_IRQHandler+0xe08>
 8006766:	bf00      	nop
 8006768:	40020010 	.word	0x40020010
 800676c:	40020028 	.word	0x40020028
 8006770:	40020040 	.word	0x40020040
 8006774:	40020058 	.word	0x40020058
 8006778:	40020070 	.word	0x40020070
 800677c:	40020088 	.word	0x40020088
 8006780:	400200a0 	.word	0x400200a0
 8006784:	400200b8 	.word	0x400200b8
 8006788:	40020410 	.word	0x40020410
 800678c:	40020428 	.word	0x40020428
 8006790:	40020440 	.word	0x40020440
 8006794:	40020458 	.word	0x40020458
 8006798:	40020470 	.word	0x40020470
 800679c:	40020488 	.word	0x40020488
 80067a0:	400204a0 	.word	0x400204a0
 80067a4:	400204b8 	.word	0x400204b8
 80067a8:	58025408 	.word	0x58025408
 80067ac:	5802541c 	.word	0x5802541c
 80067b0:	58025430 	.word	0x58025430
 80067b4:	58025444 	.word	0x58025444
 80067b8:	58025458 	.word	0x58025458
 80067bc:	5802546c 	.word	0x5802546c
 80067c0:	58025480 	.word	0x58025480
 80067c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d160      	bne.n	8006894 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a7f      	ldr	r2, [pc, #508]	; (80069d4 <HAL_DMA_IRQHandler+0xc74>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d04a      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a7d      	ldr	r2, [pc, #500]	; (80069d8 <HAL_DMA_IRQHandler+0xc78>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d045      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a7c      	ldr	r2, [pc, #496]	; (80069dc <HAL_DMA_IRQHandler+0xc7c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d040      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a7a      	ldr	r2, [pc, #488]	; (80069e0 <HAL_DMA_IRQHandler+0xc80>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d03b      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a79      	ldr	r2, [pc, #484]	; (80069e4 <HAL_DMA_IRQHandler+0xc84>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d036      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a77      	ldr	r2, [pc, #476]	; (80069e8 <HAL_DMA_IRQHandler+0xc88>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d031      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a76      	ldr	r2, [pc, #472]	; (80069ec <HAL_DMA_IRQHandler+0xc8c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d02c      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a74      	ldr	r2, [pc, #464]	; (80069f0 <HAL_DMA_IRQHandler+0xc90>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d027      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a73      	ldr	r2, [pc, #460]	; (80069f4 <HAL_DMA_IRQHandler+0xc94>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d022      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a71      	ldr	r2, [pc, #452]	; (80069f8 <HAL_DMA_IRQHandler+0xc98>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01d      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a70      	ldr	r2, [pc, #448]	; (80069fc <HAL_DMA_IRQHandler+0xc9c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d018      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a6e      	ldr	r2, [pc, #440]	; (8006a00 <HAL_DMA_IRQHandler+0xca0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d013      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a6d      	ldr	r2, [pc, #436]	; (8006a04 <HAL_DMA_IRQHandler+0xca4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00e      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a6b      	ldr	r2, [pc, #428]	; (8006a08 <HAL_DMA_IRQHandler+0xca8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d009      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a6a      	ldr	r2, [pc, #424]	; (8006a0c <HAL_DMA_IRQHandler+0xcac>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_DMA_IRQHandler+0xb12>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a68      	ldr	r2, [pc, #416]	; (8006a10 <HAL_DMA_IRQHandler+0xcb0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d108      	bne.n	8006884 <HAL_DMA_IRQHandler+0xb24>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0208 	bic.w	r2, r2, #8
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	e007      	b.n	8006894 <HAL_DMA_IRQHandler+0xb34>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0204 	bic.w	r2, r2, #4
 8006892:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8165 	beq.w	8006b68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068a6:	e15f      	b.n	8006b68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	2202      	movs	r2, #2
 80068b2:	409a      	lsls	r2, r3
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 80c5 	beq.w	8006a48 <HAL_DMA_IRQHandler+0xce8>
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80bf 	beq.w	8006a48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2202      	movs	r2, #2
 80068d4:	409a      	lsls	r2, r3
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d018      	beq.n	8006916 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 813a 	beq.w	8006b6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006900:	e134      	b.n	8006b6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 8130 	beq.w	8006b6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006914:	e12a      	b.n	8006b6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 8089 	bne.w	8006a34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a2b      	ldr	r2, [pc, #172]	; (80069d4 <HAL_DMA_IRQHandler+0xc74>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d04a      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a29      	ldr	r2, [pc, #164]	; (80069d8 <HAL_DMA_IRQHandler+0xc78>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d045      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a28      	ldr	r2, [pc, #160]	; (80069dc <HAL_DMA_IRQHandler+0xc7c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d040      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <HAL_DMA_IRQHandler+0xc80>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d03b      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a25      	ldr	r2, [pc, #148]	; (80069e4 <HAL_DMA_IRQHandler+0xc84>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d036      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a23      	ldr	r2, [pc, #140]	; (80069e8 <HAL_DMA_IRQHandler+0xc88>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d031      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a22      	ldr	r2, [pc, #136]	; (80069ec <HAL_DMA_IRQHandler+0xc8c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d02c      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a20      	ldr	r2, [pc, #128]	; (80069f0 <HAL_DMA_IRQHandler+0xc90>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d027      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1f      	ldr	r2, [pc, #124]	; (80069f4 <HAL_DMA_IRQHandler+0xc94>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d022      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1d      	ldr	r2, [pc, #116]	; (80069f8 <HAL_DMA_IRQHandler+0xc98>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d01d      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <HAL_DMA_IRQHandler+0xc9c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d018      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1a      	ldr	r2, [pc, #104]	; (8006a00 <HAL_DMA_IRQHandler+0xca0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a19      	ldr	r2, [pc, #100]	; (8006a04 <HAL_DMA_IRQHandler+0xca4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <HAL_DMA_IRQHandler+0xca8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a16      	ldr	r2, [pc, #88]	; (8006a0c <HAL_DMA_IRQHandler+0xcac>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xc62>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a14      	ldr	r2, [pc, #80]	; (8006a10 <HAL_DMA_IRQHandler+0xcb0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d128      	bne.n	8006a14 <HAL_DMA_IRQHandler+0xcb4>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0214 	bic.w	r2, r2, #20
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e027      	b.n	8006a24 <HAL_DMA_IRQHandler+0xcc4>
 80069d4:	40020010 	.word	0x40020010
 80069d8:	40020028 	.word	0x40020028
 80069dc:	40020040 	.word	0x40020040
 80069e0:	40020058 	.word	0x40020058
 80069e4:	40020070 	.word	0x40020070
 80069e8:	40020088 	.word	0x40020088
 80069ec:	400200a0 	.word	0x400200a0
 80069f0:	400200b8 	.word	0x400200b8
 80069f4:	40020410 	.word	0x40020410
 80069f8:	40020428 	.word	0x40020428
 80069fc:	40020440 	.word	0x40020440
 8006a00:	40020458 	.word	0x40020458
 8006a04:	40020470 	.word	0x40020470
 8006a08:	40020488 	.word	0x40020488
 8006a0c:	400204a0 	.word	0x400204a0
 8006a10:	400204b8 	.word	0x400204b8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 020a 	bic.w	r2, r2, #10
 8006a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8097 	beq.w	8006b6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a46:	e091      	b.n	8006b6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	2208      	movs	r2, #8
 8006a52:	409a      	lsls	r2, r3
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8088 	beq.w	8006b6e <HAL_DMA_IRQHandler+0xe0e>
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8082 	beq.w	8006b6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a41      	ldr	r2, [pc, #260]	; (8006b74 <HAL_DMA_IRQHandler+0xe14>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d04a      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a3f      	ldr	r2, [pc, #252]	; (8006b78 <HAL_DMA_IRQHandler+0xe18>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d045      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a3e      	ldr	r2, [pc, #248]	; (8006b7c <HAL_DMA_IRQHandler+0xe1c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d040      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a3c      	ldr	r2, [pc, #240]	; (8006b80 <HAL_DMA_IRQHandler+0xe20>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d03b      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a3b      	ldr	r2, [pc, #236]	; (8006b84 <HAL_DMA_IRQHandler+0xe24>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d036      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a39      	ldr	r2, [pc, #228]	; (8006b88 <HAL_DMA_IRQHandler+0xe28>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d031      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a38      	ldr	r2, [pc, #224]	; (8006b8c <HAL_DMA_IRQHandler+0xe2c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d02c      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a36      	ldr	r2, [pc, #216]	; (8006b90 <HAL_DMA_IRQHandler+0xe30>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d027      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a35      	ldr	r2, [pc, #212]	; (8006b94 <HAL_DMA_IRQHandler+0xe34>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d022      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a33      	ldr	r2, [pc, #204]	; (8006b98 <HAL_DMA_IRQHandler+0xe38>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01d      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a32      	ldr	r2, [pc, #200]	; (8006b9c <HAL_DMA_IRQHandler+0xe3c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d018      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a30      	ldr	r2, [pc, #192]	; (8006ba0 <HAL_DMA_IRQHandler+0xe40>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2f      	ldr	r2, [pc, #188]	; (8006ba4 <HAL_DMA_IRQHandler+0xe44>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a2d      	ldr	r2, [pc, #180]	; (8006ba8 <HAL_DMA_IRQHandler+0xe48>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a2c      	ldr	r2, [pc, #176]	; (8006bac <HAL_DMA_IRQHandler+0xe4c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xdaa>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a2a      	ldr	r2, [pc, #168]	; (8006bb0 <HAL_DMA_IRQHandler+0xe50>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d108      	bne.n	8006b1c <HAL_DMA_IRQHandler+0xdbc>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 021c 	bic.w	r2, r2, #28
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	e007      	b.n	8006b2c <HAL_DMA_IRQHandler+0xdcc>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 020e 	bic.w	r2, r2, #14
 8006b2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2201      	movs	r2, #1
 8006b36:	409a      	lsls	r2, r3
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
 8006b62:	e004      	b.n	8006b6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b64:	bf00      	nop
 8006b66:	e002      	b.n	8006b6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b68:	bf00      	nop
 8006b6a:	e000      	b.n	8006b6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b6e:	3728      	adds	r7, #40	; 0x28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40020010 	.word	0x40020010
 8006b78:	40020028 	.word	0x40020028
 8006b7c:	40020040 	.word	0x40020040
 8006b80:	40020058 	.word	0x40020058
 8006b84:	40020070 	.word	0x40020070
 8006b88:	40020088 	.word	0x40020088
 8006b8c:	400200a0 	.word	0x400200a0
 8006b90:	400200b8 	.word	0x400200b8
 8006b94:	40020410 	.word	0x40020410
 8006b98:	40020428 	.word	0x40020428
 8006b9c:	40020440 	.word	0x40020440
 8006ba0:	40020458 	.word	0x40020458
 8006ba4:	40020470 	.word	0x40020470
 8006ba8:	40020488 	.word	0x40020488
 8006bac:	400204a0 	.word	0x400204a0
 8006bb0:	400204b8 	.word	0x400204b8

08006bb4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bc2:	b2db      	uxtb	r3, r3
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c00:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a7f      	ldr	r2, [pc, #508]	; (8006e04 <DMA_SetConfig+0x21c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d072      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a7d      	ldr	r2, [pc, #500]	; (8006e08 <DMA_SetConfig+0x220>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d06d      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a7c      	ldr	r2, [pc, #496]	; (8006e0c <DMA_SetConfig+0x224>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d068      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a7a      	ldr	r2, [pc, #488]	; (8006e10 <DMA_SetConfig+0x228>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d063      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a79      	ldr	r2, [pc, #484]	; (8006e14 <DMA_SetConfig+0x22c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d05e      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a77      	ldr	r2, [pc, #476]	; (8006e18 <DMA_SetConfig+0x230>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d059      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a76      	ldr	r2, [pc, #472]	; (8006e1c <DMA_SetConfig+0x234>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d054      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a74      	ldr	r2, [pc, #464]	; (8006e20 <DMA_SetConfig+0x238>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d04f      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a73      	ldr	r2, [pc, #460]	; (8006e24 <DMA_SetConfig+0x23c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d04a      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a71      	ldr	r2, [pc, #452]	; (8006e28 <DMA_SetConfig+0x240>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d045      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a70      	ldr	r2, [pc, #448]	; (8006e2c <DMA_SetConfig+0x244>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d040      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a6e      	ldr	r2, [pc, #440]	; (8006e30 <DMA_SetConfig+0x248>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d03b      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a6d      	ldr	r2, [pc, #436]	; (8006e34 <DMA_SetConfig+0x24c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d036      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a6b      	ldr	r2, [pc, #428]	; (8006e38 <DMA_SetConfig+0x250>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d031      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a6a      	ldr	r2, [pc, #424]	; (8006e3c <DMA_SetConfig+0x254>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d02c      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a68      	ldr	r2, [pc, #416]	; (8006e40 <DMA_SetConfig+0x258>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d027      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a67      	ldr	r2, [pc, #412]	; (8006e44 <DMA_SetConfig+0x25c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d022      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a65      	ldr	r2, [pc, #404]	; (8006e48 <DMA_SetConfig+0x260>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01d      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a64      	ldr	r2, [pc, #400]	; (8006e4c <DMA_SetConfig+0x264>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d018      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a62      	ldr	r2, [pc, #392]	; (8006e50 <DMA_SetConfig+0x268>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a61      	ldr	r2, [pc, #388]	; (8006e54 <DMA_SetConfig+0x26c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00e      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a5f      	ldr	r2, [pc, #380]	; (8006e58 <DMA_SetConfig+0x270>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d009      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a5e      	ldr	r2, [pc, #376]	; (8006e5c <DMA_SetConfig+0x274>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <DMA_SetConfig+0x10a>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a5c      	ldr	r2, [pc, #368]	; (8006e60 <DMA_SetConfig+0x278>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <DMA_SetConfig+0x10e>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <DMA_SetConfig+0x110>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d04:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d16:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a39      	ldr	r2, [pc, #228]	; (8006e04 <DMA_SetConfig+0x21c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d04a      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a38      	ldr	r2, [pc, #224]	; (8006e08 <DMA_SetConfig+0x220>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d045      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a36      	ldr	r2, [pc, #216]	; (8006e0c <DMA_SetConfig+0x224>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d040      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a35      	ldr	r2, [pc, #212]	; (8006e10 <DMA_SetConfig+0x228>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d03b      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a33      	ldr	r2, [pc, #204]	; (8006e14 <DMA_SetConfig+0x22c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d036      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a32      	ldr	r2, [pc, #200]	; (8006e18 <DMA_SetConfig+0x230>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d031      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a30      	ldr	r2, [pc, #192]	; (8006e1c <DMA_SetConfig+0x234>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d02c      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a2f      	ldr	r2, [pc, #188]	; (8006e20 <DMA_SetConfig+0x238>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d027      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a2d      	ldr	r2, [pc, #180]	; (8006e24 <DMA_SetConfig+0x23c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d022      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a2c      	ldr	r2, [pc, #176]	; (8006e28 <DMA_SetConfig+0x240>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d01d      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a2a      	ldr	r2, [pc, #168]	; (8006e2c <DMA_SetConfig+0x244>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d018      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a29      	ldr	r2, [pc, #164]	; (8006e30 <DMA_SetConfig+0x248>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d013      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a27      	ldr	r2, [pc, #156]	; (8006e34 <DMA_SetConfig+0x24c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00e      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a26      	ldr	r2, [pc, #152]	; (8006e38 <DMA_SetConfig+0x250>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d009      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a24      	ldr	r2, [pc, #144]	; (8006e3c <DMA_SetConfig+0x254>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d004      	beq.n	8006db8 <DMA_SetConfig+0x1d0>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a23      	ldr	r2, [pc, #140]	; (8006e40 <DMA_SetConfig+0x258>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d101      	bne.n	8006dbc <DMA_SetConfig+0x1d4>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <DMA_SetConfig+0x1d6>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d059      	beq.n	8006e76 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	223f      	movs	r2, #63	; 0x3f
 8006dcc:	409a      	lsls	r2, r3
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006de0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	2b40      	cmp	r3, #64	; 0x40
 8006df0:	d138      	bne.n	8006e64 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e02:	e086      	b.n	8006f12 <DMA_SetConfig+0x32a>
 8006e04:	40020010 	.word	0x40020010
 8006e08:	40020028 	.word	0x40020028
 8006e0c:	40020040 	.word	0x40020040
 8006e10:	40020058 	.word	0x40020058
 8006e14:	40020070 	.word	0x40020070
 8006e18:	40020088 	.word	0x40020088
 8006e1c:	400200a0 	.word	0x400200a0
 8006e20:	400200b8 	.word	0x400200b8
 8006e24:	40020410 	.word	0x40020410
 8006e28:	40020428 	.word	0x40020428
 8006e2c:	40020440 	.word	0x40020440
 8006e30:	40020458 	.word	0x40020458
 8006e34:	40020470 	.word	0x40020470
 8006e38:	40020488 	.word	0x40020488
 8006e3c:	400204a0 	.word	0x400204a0
 8006e40:	400204b8 	.word	0x400204b8
 8006e44:	58025408 	.word	0x58025408
 8006e48:	5802541c 	.word	0x5802541c
 8006e4c:	58025430 	.word	0x58025430
 8006e50:	58025444 	.word	0x58025444
 8006e54:	58025458 	.word	0x58025458
 8006e58:	5802546c 	.word	0x5802546c
 8006e5c:	58025480 	.word	0x58025480
 8006e60:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	60da      	str	r2, [r3, #12]
}
 8006e74:	e04d      	b.n	8006f12 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a29      	ldr	r2, [pc, #164]	; (8006f20 <DMA_SetConfig+0x338>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d022      	beq.n	8006ec6 <DMA_SetConfig+0x2de>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a27      	ldr	r2, [pc, #156]	; (8006f24 <DMA_SetConfig+0x33c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d01d      	beq.n	8006ec6 <DMA_SetConfig+0x2de>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <DMA_SetConfig+0x340>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d018      	beq.n	8006ec6 <DMA_SetConfig+0x2de>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a24      	ldr	r2, [pc, #144]	; (8006f2c <DMA_SetConfig+0x344>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d013      	beq.n	8006ec6 <DMA_SetConfig+0x2de>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a23      	ldr	r2, [pc, #140]	; (8006f30 <DMA_SetConfig+0x348>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00e      	beq.n	8006ec6 <DMA_SetConfig+0x2de>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a21      	ldr	r2, [pc, #132]	; (8006f34 <DMA_SetConfig+0x34c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d009      	beq.n	8006ec6 <DMA_SetConfig+0x2de>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a20      	ldr	r2, [pc, #128]	; (8006f38 <DMA_SetConfig+0x350>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d004      	beq.n	8006ec6 <DMA_SetConfig+0x2de>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1e      	ldr	r2, [pc, #120]	; (8006f3c <DMA_SetConfig+0x354>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d101      	bne.n	8006eca <DMA_SetConfig+0x2e2>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <DMA_SetConfig+0x2e4>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d020      	beq.n	8006f12 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	2201      	movs	r2, #1
 8006eda:	409a      	lsls	r2, r3
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d108      	bne.n	8006f02 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	60da      	str	r2, [r3, #12]
}
 8006f00:	e007      	b.n	8006f12 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	60da      	str	r2, [r3, #12]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	58025408 	.word	0x58025408
 8006f24:	5802541c 	.word	0x5802541c
 8006f28:	58025430 	.word	0x58025430
 8006f2c:	58025444 	.word	0x58025444
 8006f30:	58025458 	.word	0x58025458
 8006f34:	5802546c 	.word	0x5802546c
 8006f38:	58025480 	.word	0x58025480
 8006f3c:	58025494 	.word	0x58025494

08006f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a42      	ldr	r2, [pc, #264]	; (8007058 <DMA_CalcBaseAndBitshift+0x118>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d04a      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a41      	ldr	r2, [pc, #260]	; (800705c <DMA_CalcBaseAndBitshift+0x11c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d045      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a3f      	ldr	r2, [pc, #252]	; (8007060 <DMA_CalcBaseAndBitshift+0x120>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d040      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a3e      	ldr	r2, [pc, #248]	; (8007064 <DMA_CalcBaseAndBitshift+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d03b      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a3c      	ldr	r2, [pc, #240]	; (8007068 <DMA_CalcBaseAndBitshift+0x128>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d036      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a3b      	ldr	r2, [pc, #236]	; (800706c <DMA_CalcBaseAndBitshift+0x12c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d031      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a39      	ldr	r2, [pc, #228]	; (8007070 <DMA_CalcBaseAndBitshift+0x130>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d02c      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a38      	ldr	r2, [pc, #224]	; (8007074 <DMA_CalcBaseAndBitshift+0x134>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d027      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a36      	ldr	r2, [pc, #216]	; (8007078 <DMA_CalcBaseAndBitshift+0x138>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d022      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a35      	ldr	r2, [pc, #212]	; (800707c <DMA_CalcBaseAndBitshift+0x13c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d01d      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a33      	ldr	r2, [pc, #204]	; (8007080 <DMA_CalcBaseAndBitshift+0x140>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d018      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a32      	ldr	r2, [pc, #200]	; (8007084 <DMA_CalcBaseAndBitshift+0x144>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a30      	ldr	r2, [pc, #192]	; (8007088 <DMA_CalcBaseAndBitshift+0x148>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00e      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a2f      	ldr	r2, [pc, #188]	; (800708c <DMA_CalcBaseAndBitshift+0x14c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d009      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2d      	ldr	r2, [pc, #180]	; (8007090 <DMA_CalcBaseAndBitshift+0x150>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2c      	ldr	r2, [pc, #176]	; (8007094 <DMA_CalcBaseAndBitshift+0x154>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d101      	bne.n	8006fec <DMA_CalcBaseAndBitshift+0xac>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <DMA_CalcBaseAndBitshift+0xae>
 8006fec:	2300      	movs	r3, #0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d024      	beq.n	800703c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	3b10      	subs	r3, #16
 8006ffa:	4a27      	ldr	r2, [pc, #156]	; (8007098 <DMA_CalcBaseAndBitshift+0x158>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	091b      	lsrs	r3, r3, #4
 8007002:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	4a24      	ldr	r2, [pc, #144]	; (800709c <DMA_CalcBaseAndBitshift+0x15c>)
 800700c:	5cd3      	ldrb	r3, [r2, r3]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b03      	cmp	r3, #3
 8007018:	d908      	bls.n	800702c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	4b1f      	ldr	r3, [pc, #124]	; (80070a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007022:	4013      	ands	r3, r2
 8007024:	1d1a      	adds	r2, r3, #4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	659a      	str	r2, [r3, #88]	; 0x58
 800702a:	e00d      	b.n	8007048 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	4b1b      	ldr	r3, [pc, #108]	; (80070a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007034:	4013      	ands	r3, r2
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6593      	str	r3, [r2, #88]	; 0x58
 800703a:	e005      	b.n	8007048 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	40020010 	.word	0x40020010
 800705c:	40020028 	.word	0x40020028
 8007060:	40020040 	.word	0x40020040
 8007064:	40020058 	.word	0x40020058
 8007068:	40020070 	.word	0x40020070
 800706c:	40020088 	.word	0x40020088
 8007070:	400200a0 	.word	0x400200a0
 8007074:	400200b8 	.word	0x400200b8
 8007078:	40020410 	.word	0x40020410
 800707c:	40020428 	.word	0x40020428
 8007080:	40020440 	.word	0x40020440
 8007084:	40020458 	.word	0x40020458
 8007088:	40020470 	.word	0x40020470
 800708c:	40020488 	.word	0x40020488
 8007090:	400204a0 	.word	0x400204a0
 8007094:	400204b8 	.word	0x400204b8
 8007098:	aaaaaaab 	.word	0xaaaaaaab
 800709c:	08011d1c 	.word	0x08011d1c
 80070a0:	fffffc00 	.word	0xfffffc00

080070a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d120      	bne.n	80070fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d858      	bhi.n	8007172 <DMA_CheckFifoParam+0xce>
 80070c0:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <DMA_CheckFifoParam+0x24>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	080070d9 	.word	0x080070d9
 80070cc:	080070eb 	.word	0x080070eb
 80070d0:	080070d9 	.word	0x080070d9
 80070d4:	08007173 	.word	0x08007173
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d048      	beq.n	8007176 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070e8:	e045      	b.n	8007176 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070f2:	d142      	bne.n	800717a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070f8:	e03f      	b.n	800717a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007102:	d123      	bne.n	800714c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	2b03      	cmp	r3, #3
 800710a:	d838      	bhi.n	800717e <DMA_CheckFifoParam+0xda>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <DMA_CheckFifoParam+0x70>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007125 	.word	0x08007125
 8007118:	0800712b 	.word	0x0800712b
 800711c:	08007125 	.word	0x08007125
 8007120:	0800713d 	.word	0x0800713d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
        break;
 8007128:	e030      	b.n	800718c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d025      	beq.n	8007182 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800713a:	e022      	b.n	8007182 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007144:	d11f      	bne.n	8007186 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800714a:	e01c      	b.n	8007186 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	2b02      	cmp	r3, #2
 8007152:	d902      	bls.n	800715a <DMA_CheckFifoParam+0xb6>
 8007154:	2b03      	cmp	r3, #3
 8007156:	d003      	beq.n	8007160 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007158:	e018      	b.n	800718c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	73fb      	strb	r3, [r7, #15]
        break;
 800715e:	e015      	b.n	800718c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
    break;
 8007170:	e00b      	b.n	800718a <DMA_CheckFifoParam+0xe6>
        break;
 8007172:	bf00      	nop
 8007174:	e00a      	b.n	800718c <DMA_CheckFifoParam+0xe8>
        break;
 8007176:	bf00      	nop
 8007178:	e008      	b.n	800718c <DMA_CheckFifoParam+0xe8>
        break;
 800717a:	bf00      	nop
 800717c:	e006      	b.n	800718c <DMA_CheckFifoParam+0xe8>
        break;
 800717e:	bf00      	nop
 8007180:	e004      	b.n	800718c <DMA_CheckFifoParam+0xe8>
        break;
 8007182:	bf00      	nop
 8007184:	e002      	b.n	800718c <DMA_CheckFifoParam+0xe8>
        break;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <DMA_CheckFifoParam+0xe8>
    break;
 800718a:	bf00      	nop
    }
  }

  return status;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop

0800719c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a38      	ldr	r2, [pc, #224]	; (8007290 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d022      	beq.n	80071fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a36      	ldr	r2, [pc, #216]	; (8007294 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d01d      	beq.n	80071fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a35      	ldr	r2, [pc, #212]	; (8007298 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d018      	beq.n	80071fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a33      	ldr	r2, [pc, #204]	; (800729c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a32      	ldr	r2, [pc, #200]	; (80072a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00e      	beq.n	80071fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a30      	ldr	r2, [pc, #192]	; (80072a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d009      	beq.n	80071fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a2f      	ldr	r2, [pc, #188]	; (80072a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d004      	beq.n	80071fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2d      	ldr	r2, [pc, #180]	; (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d101      	bne.n	80071fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80071fe:	2300      	movs	r3, #0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01a      	beq.n	800723a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	3b08      	subs	r3, #8
 800720c:	4a28      	ldr	r2, [pc, #160]	; (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800720e:	fba2 2303 	umull	r2, r3, r2, r3
 8007212:	091b      	lsrs	r3, r3, #4
 8007214:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4b26      	ldr	r3, [pc, #152]	; (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a24      	ldr	r2, [pc, #144]	; (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007228:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	2201      	movs	r2, #1
 8007232:	409a      	lsls	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007238:	e024      	b.n	8007284 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	3b10      	subs	r3, #16
 8007242:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007244:	fba2 2303 	umull	r2, r3, r2, r3
 8007248:	091b      	lsrs	r3, r3, #4
 800724a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4a1c      	ldr	r2, [pc, #112]	; (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d806      	bhi.n	8007262 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4a1b      	ldr	r2, [pc, #108]	; (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d902      	bls.n	8007262 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3308      	adds	r3, #8
 8007260:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4b18      	ldr	r3, [pc, #96]	; (80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	461a      	mov	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a16      	ldr	r2, [pc, #88]	; (80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007274:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	2201      	movs	r2, #1
 800727e:	409a      	lsls	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	58025408 	.word	0x58025408
 8007294:	5802541c 	.word	0x5802541c
 8007298:	58025430 	.word	0x58025430
 800729c:	58025444 	.word	0x58025444
 80072a0:	58025458 	.word	0x58025458
 80072a4:	5802546c 	.word	0x5802546c
 80072a8:	58025480 	.word	0x58025480
 80072ac:	58025494 	.word	0x58025494
 80072b0:	cccccccd 	.word	0xcccccccd
 80072b4:	16009600 	.word	0x16009600
 80072b8:	58025880 	.word	0x58025880
 80072bc:	aaaaaaab 	.word	0xaaaaaaab
 80072c0:	400204b8 	.word	0x400204b8
 80072c4:	4002040f 	.word	0x4002040f
 80072c8:	10008200 	.word	0x10008200
 80072cc:	40020880 	.word	0x40020880

080072d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d04a      	beq.n	800737c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d847      	bhi.n	800737c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a25      	ldr	r2, [pc, #148]	; (8007388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d022      	beq.n	800733c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a24      	ldr	r2, [pc, #144]	; (800738c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d01d      	beq.n	800733c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a22      	ldr	r2, [pc, #136]	; (8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d018      	beq.n	800733c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a21      	ldr	r2, [pc, #132]	; (8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d013      	beq.n	800733c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1f      	ldr	r2, [pc, #124]	; (8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a1e      	ldr	r2, [pc, #120]	; (800739c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1b      	ldr	r2, [pc, #108]	; (80073a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d101      	bne.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800733c:	2301      	movs	r3, #1
 800733e:	e000      	b.n	8007342 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007340:	2300      	movs	r3, #0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4b17      	ldr	r3, [pc, #92]	; (80073a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	461a      	mov	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a15      	ldr	r2, [pc, #84]	; (80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007358:	671a      	str	r2, [r3, #112]	; 0x70
 800735a:	e009      	b.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	461a      	mov	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800736e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3b01      	subs	r3, #1
 8007374:	2201      	movs	r2, #1
 8007376:	409a      	lsls	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800737c:	bf00      	nop
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	58025408 	.word	0x58025408
 800738c:	5802541c 	.word	0x5802541c
 8007390:	58025430 	.word	0x58025430
 8007394:	58025444 	.word	0x58025444
 8007398:	58025458 	.word	0x58025458
 800739c:	5802546c 	.word	0x5802546c
 80073a0:	58025480 	.word	0x58025480
 80073a4:	58025494 	.word	0x58025494
 80073a8:	1600963f 	.word	0x1600963f
 80073ac:	58025940 	.word	0x58025940
 80073b0:	1000823f 	.word	0x1000823f
 80073b4:	40020940 	.word	0x40020940

080073b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b089      	sub	sp, #36	; 0x24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073c6:	4b89      	ldr	r3, [pc, #548]	; (80075ec <HAL_GPIO_Init+0x234>)
 80073c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073ca:	e194      	b.n	80076f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	2101      	movs	r1, #1
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	fa01 f303 	lsl.w	r3, r1, r3
 80073d8:	4013      	ands	r3, r2
 80073da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 8186 	beq.w	80076f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d005      	beq.n	80073fc <HAL_GPIO_Init+0x44>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d130      	bne.n	800745e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	2203      	movs	r2, #3
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	43db      	mvns	r3, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4013      	ands	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4313      	orrs	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007432:	2201      	movs	r2, #1
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	43db      	mvns	r3, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	4013      	ands	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	091b      	lsrs	r3, r3, #4
 8007448:	f003 0201 	and.w	r2, r3, #1
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	4313      	orrs	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	2b03      	cmp	r3, #3
 8007468:	d017      	beq.n	800749a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	2203      	movs	r2, #3
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	43db      	mvns	r3, r3
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	4013      	ands	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	4313      	orrs	r3, r2
 8007492:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d123      	bne.n	80074ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	08da      	lsrs	r2, r3, #3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3208      	adds	r2, #8
 80074ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	220f      	movs	r2, #15
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	43db      	mvns	r3, r3
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	4013      	ands	r3, r2
 80074c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	691a      	ldr	r2, [r3, #16]
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	4313      	orrs	r3, r2
 80074de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	08da      	lsrs	r2, r3, #3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3208      	adds	r2, #8
 80074e8:	69b9      	ldr	r1, [r7, #24]
 80074ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	2203      	movs	r2, #3
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	43db      	mvns	r3, r3
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	4013      	ands	r3, r2
 8007504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f003 0203 	and.w	r2, r3, #3
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	4313      	orrs	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 80e0 	beq.w	80076f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007530:	4b2f      	ldr	r3, [pc, #188]	; (80075f0 <HAL_GPIO_Init+0x238>)
 8007532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007536:	4a2e      	ldr	r2, [pc, #184]	; (80075f0 <HAL_GPIO_Init+0x238>)
 8007538:	f043 0302 	orr.w	r3, r3, #2
 800753c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007540:	4b2b      	ldr	r3, [pc, #172]	; (80075f0 <HAL_GPIO_Init+0x238>)
 8007542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800754e:	4a29      	ldr	r2, [pc, #164]	; (80075f4 <HAL_GPIO_Init+0x23c>)
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	089b      	lsrs	r3, r3, #2
 8007554:	3302      	adds	r3, #2
 8007556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	220f      	movs	r2, #15
 8007566:	fa02 f303 	lsl.w	r3, r2, r3
 800756a:	43db      	mvns	r3, r3
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	4013      	ands	r3, r2
 8007570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a20      	ldr	r2, [pc, #128]	; (80075f8 <HAL_GPIO_Init+0x240>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d052      	beq.n	8007620 <HAL_GPIO_Init+0x268>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a1f      	ldr	r2, [pc, #124]	; (80075fc <HAL_GPIO_Init+0x244>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d031      	beq.n	80075e6 <HAL_GPIO_Init+0x22e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a1e      	ldr	r2, [pc, #120]	; (8007600 <HAL_GPIO_Init+0x248>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d02b      	beq.n	80075e2 <HAL_GPIO_Init+0x22a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <HAL_GPIO_Init+0x24c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d025      	beq.n	80075de <HAL_GPIO_Init+0x226>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a1c      	ldr	r2, [pc, #112]	; (8007608 <HAL_GPIO_Init+0x250>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01f      	beq.n	80075da <HAL_GPIO_Init+0x222>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a1b      	ldr	r2, [pc, #108]	; (800760c <HAL_GPIO_Init+0x254>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d019      	beq.n	80075d6 <HAL_GPIO_Init+0x21e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a1a      	ldr	r2, [pc, #104]	; (8007610 <HAL_GPIO_Init+0x258>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <HAL_GPIO_Init+0x21a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a19      	ldr	r2, [pc, #100]	; (8007614 <HAL_GPIO_Init+0x25c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00d      	beq.n	80075ce <HAL_GPIO_Init+0x216>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a18      	ldr	r2, [pc, #96]	; (8007618 <HAL_GPIO_Init+0x260>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d007      	beq.n	80075ca <HAL_GPIO_Init+0x212>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a17      	ldr	r2, [pc, #92]	; (800761c <HAL_GPIO_Init+0x264>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d101      	bne.n	80075c6 <HAL_GPIO_Init+0x20e>
 80075c2:	2309      	movs	r3, #9
 80075c4:	e02d      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075c6:	230a      	movs	r3, #10
 80075c8:	e02b      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075ca:	2308      	movs	r3, #8
 80075cc:	e029      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075ce:	2307      	movs	r3, #7
 80075d0:	e027      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075d2:	2306      	movs	r3, #6
 80075d4:	e025      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075d6:	2305      	movs	r3, #5
 80075d8:	e023      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075da:	2304      	movs	r3, #4
 80075dc:	e021      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075de:	2303      	movs	r3, #3
 80075e0:	e01f      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e01d      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e01b      	b.n	8007622 <HAL_GPIO_Init+0x26a>
 80075ea:	bf00      	nop
 80075ec:	58000080 	.word	0x58000080
 80075f0:	58024400 	.word	0x58024400
 80075f4:	58000400 	.word	0x58000400
 80075f8:	58020000 	.word	0x58020000
 80075fc:	58020400 	.word	0x58020400
 8007600:	58020800 	.word	0x58020800
 8007604:	58020c00 	.word	0x58020c00
 8007608:	58021000 	.word	0x58021000
 800760c:	58021400 	.word	0x58021400
 8007610:	58021800 	.word	0x58021800
 8007614:	58021c00 	.word	0x58021c00
 8007618:	58022000 	.word	0x58022000
 800761c:	58022400 	.word	0x58022400
 8007620:	2300      	movs	r3, #0
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	f002 0203 	and.w	r2, r2, #3
 8007628:	0092      	lsls	r2, r2, #2
 800762a:	4093      	lsls	r3, r2
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	4313      	orrs	r3, r2
 8007630:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007632:	4938      	ldr	r1, [pc, #224]	; (8007714 <HAL_GPIO_Init+0x35c>)
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	089b      	lsrs	r3, r3, #2
 8007638:	3302      	adds	r3, #2
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	43db      	mvns	r3, r3
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	4013      	ands	r3, r2
 8007650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800766e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	43db      	mvns	r3, r3
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	4013      	ands	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	43db      	mvns	r3, r3
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	4013      	ands	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	43db      	mvns	r3, r3
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	4013      	ands	r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	3301      	adds	r3, #1
 80076f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	f47f ae63 	bne.w	80073cc <HAL_GPIO_Init+0x14>
  }
}
 8007706:	bf00      	nop
 8007708:	bf00      	nop
 800770a:	3724      	adds	r7, #36	; 0x24
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	58000400 	.word	0x58000400

08007718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	887b      	ldrh	r3, [r7, #2]
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
 8007734:	e001      	b.n	800773a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800773a:	7bfb      	ldrb	r3, [r7, #15]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	807b      	strh	r3, [r7, #2]
 8007754:	4613      	mov	r3, r2
 8007756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007758:	787b      	ldrb	r3, [r7, #1]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800775e:	887a      	ldrh	r2, [r7, #2]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007764:	e003      	b.n	800776e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007766:	887b      	ldrh	r3, [r7, #2]
 8007768:	041a      	lsls	r2, r3, #16
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	619a      	str	r2, [r3, #24]
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800777a:	b480      	push	{r7}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	460b      	mov	r3, r1
 8007784:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800778c:	887a      	ldrh	r2, [r7, #2]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4013      	ands	r3, r2
 8007792:	041a      	lsls	r2, r3, #16
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	43d9      	mvns	r1, r3
 8007798:	887b      	ldrh	r3, [r7, #2]
 800779a:	400b      	ands	r3, r1
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	619a      	str	r2, [r3, #24]
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e07f      	b.n	80078c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fa fb66 	bl	8001ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2224      	movs	r2, #36	; 0x24
 80077e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007800:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007810:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d107      	bne.n	800782a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007826:	609a      	str	r2, [r3, #8]
 8007828:	e006      	b.n	8007838 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007836:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d104      	bne.n	800784a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007848:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6859      	ldr	r1, [r3, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	4b1d      	ldr	r3, [pc, #116]	; (80078cc <HAL_I2C_Init+0x11c>)
 8007856:	430b      	orrs	r3, r1
 8007858:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007868:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691a      	ldr	r2, [r3, #16]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	69d9      	ldr	r1, [r3, #28]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1a      	ldr	r2, [r3, #32]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0201 	orr.w	r2, r2, #1
 80078a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	02008000 	.word	0x02008000

080078d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	607a      	str	r2, [r7, #4]
 80078da:	461a      	mov	r2, r3
 80078dc:	460b      	mov	r3, r1
 80078de:	817b      	strh	r3, [r7, #10]
 80078e0:	4613      	mov	r3, r2
 80078e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	f040 80da 	bne.w	8007aa6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_I2C_Master_Transmit+0x30>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e0d3      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x1d8>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007908:	f7fc fdb4 	bl	8004474 <HAL_GetTick>
 800790c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	2319      	movs	r3, #25
 8007914:	2201      	movs	r2, #1
 8007916:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f001 fe6c 	bl	80095f8 <I2C_WaitOnFlagUntilTimeout>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e0be      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2221      	movs	r2, #33	; 0x21
 800792e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2210      	movs	r2, #16
 8007936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	893a      	ldrh	r2, [r7, #8]
 800794a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007956:	b29b      	uxth	r3, r3
 8007958:	2bff      	cmp	r3, #255	; 0xff
 800795a:	d90e      	bls.n	800797a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	22ff      	movs	r2, #255	; 0xff
 8007960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007966:	b2da      	uxtb	r2, r3
 8007968:	8979      	ldrh	r1, [r7, #10]
 800796a:	4b51      	ldr	r3, [pc, #324]	; (8007ab0 <HAL_I2C_Master_Transmit+0x1e0>)
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f002 f862 	bl	8009a3c <I2C_TransferConfig>
 8007978:	e06c      	b.n	8007a54 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007988:	b2da      	uxtb	r2, r3
 800798a:	8979      	ldrh	r1, [r7, #10]
 800798c:	4b48      	ldr	r3, [pc, #288]	; (8007ab0 <HAL_I2C_Master_Transmit+0x1e0>)
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f002 f851 	bl	8009a3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800799a:	e05b      	b.n	8007a54 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	6a39      	ldr	r1, [r7, #32]
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f001 fe69 	bl	8009678 <I2C_WaitOnTXISFlagUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e07b      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	781a      	ldrb	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d034      	beq.n	8007a54 <HAL_I2C_Master_Transmit+0x184>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d130      	bne.n	8007a54 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	2200      	movs	r2, #0
 80079fa:	2180      	movs	r1, #128	; 0x80
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f001 fdfb 	bl	80095f8 <I2C_WaitOnFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e04d      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2bff      	cmp	r3, #255	; 0xff
 8007a14:	d90e      	bls.n	8007a34 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	22ff      	movs	r2, #255	; 0xff
 8007a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	8979      	ldrh	r1, [r7, #10]
 8007a24:	2300      	movs	r3, #0
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f002 f805 	bl	8009a3c <I2C_TransferConfig>
 8007a32:	e00f      	b.n	8007a54 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	8979      	ldrh	r1, [r7, #10]
 8007a46:	2300      	movs	r3, #0
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f001 fff4 	bl	8009a3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d19e      	bne.n	800799c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	6a39      	ldr	r1, [r7, #32]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f001 fe48 	bl	80096f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e01a      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2220      	movs	r2, #32
 8007a78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6859      	ldr	r1, [r3, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <HAL_I2C_Master_Transmit+0x1e4>)
 8007a86:	400b      	ands	r3, r1
 8007a88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e000      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	80002000 	.word	0x80002000
 8007ab4:	fe00e800 	.word	0xfe00e800

08007ab8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	817b      	strh	r3, [r7, #10]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	f040 80db 	bne.w	8007c90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_I2C_Master_Receive+0x30>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e0d4      	b.n	8007c92 <HAL_I2C_Master_Receive+0x1da>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007af0:	f7fc fcc0 	bl	8004474 <HAL_GetTick>
 8007af4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	2319      	movs	r3, #25
 8007afc:	2201      	movs	r2, #1
 8007afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f001 fd78 	bl	80095f8 <I2C_WaitOnFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e0bf      	b.n	8007c92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2222      	movs	r2, #34	; 0x22
 8007b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2210      	movs	r2, #16
 8007b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	893a      	ldrh	r2, [r7, #8]
 8007b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2bff      	cmp	r3, #255	; 0xff
 8007b42:	d90e      	bls.n	8007b62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	22ff      	movs	r2, #255	; 0xff
 8007b48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	8979      	ldrh	r1, [r7, #10]
 8007b52:	4b52      	ldr	r3, [pc, #328]	; (8007c9c <HAL_I2C_Master_Receive+0x1e4>)
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f001 ff6e 	bl	8009a3c <I2C_TransferConfig>
 8007b60:	e06d      	b.n	8007c3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	8979      	ldrh	r1, [r7, #10]
 8007b74:	4b49      	ldr	r3, [pc, #292]	; (8007c9c <HAL_I2C_Master_Receive+0x1e4>)
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f001 ff5d 	bl	8009a3c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007b82:	e05c      	b.n	8007c3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	6a39      	ldr	r1, [r7, #32]
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f001 fdf1 	bl	8009770 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e07c      	b.n	8007c92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d034      	beq.n	8007c3e <HAL_I2C_Master_Receive+0x186>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d130      	bne.n	8007c3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	2200      	movs	r2, #0
 8007be4:	2180      	movs	r1, #128	; 0x80
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f001 fd06 	bl	80095f8 <I2C_WaitOnFlagUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e04d      	b.n	8007c92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2bff      	cmp	r3, #255	; 0xff
 8007bfe:	d90e      	bls.n	8007c1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	22ff      	movs	r2, #255	; 0xff
 8007c04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	8979      	ldrh	r1, [r7, #10]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f001 ff10 	bl	8009a3c <I2C_TransferConfig>
 8007c1c:	e00f      	b.n	8007c3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	8979      	ldrh	r1, [r7, #10]
 8007c30:	2300      	movs	r3, #0
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f001 feff 	bl	8009a3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d19d      	bne.n	8007b84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	6a39      	ldr	r1, [r7, #32]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f001 fd53 	bl	80096f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e01a      	b.n	8007c92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2220      	movs	r2, #32
 8007c62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6859      	ldr	r1, [r3, #4]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <HAL_I2C_Master_Receive+0x1e8>)
 8007c70:	400b      	ands	r3, r1
 8007c72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	e000      	b.n	8007c92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007c90:	2302      	movs	r3, #2
  }
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	80002400 	.word	0x80002400
 8007ca0:	fe00e800 	.word	0xfe00e800

08007ca4 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08a      	sub	sp, #40	; 0x28
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	4608      	mov	r0, r1
 8007cae:	4611      	mov	r1, r2
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	817b      	strh	r3, [r7, #10]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	813b      	strh	r3, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	f040 80d5 	bne.w	8007e76 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_I2C_Mem_Read_DMA+0x34>
 8007cd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0c9      	b.n	8007e78 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf2:	d101      	bne.n	8007cf8 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e0bf      	b.n	8007e78 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d101      	bne.n	8007d06 <HAL_I2C_Mem_Read_DMA+0x62>
 8007d02:	2302      	movs	r3, #2
 8007d04:	e0b8      	b.n	8007e78 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d0e:	f7fc fbb1 	bl	8004474 <HAL_GetTick>
 8007d12:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2222      	movs	r2, #34	; 0x22
 8007d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2240      	movs	r2, #64	; 0x40
 8007d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4a51      	ldr	r2, [pc, #324]	; (8007e80 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8007d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4a51      	ldr	r2, [pc, #324]	; (8007e84 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8007d40:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2bff      	cmp	r3, #255	; 0xff
 8007d4a:	d906      	bls.n	8007d5a <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	22ff      	movs	r2, #255	; 0xff
 8007d50:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007d52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	e007      	b.n	8007d6a <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d68:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007d6a:	88f8      	ldrh	r0, [r7, #6]
 8007d6c:	893a      	ldrh	r2, [r7, #8]
 8007d6e:	8979      	ldrh	r1, [r7, #10]
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	9301      	str	r3, [sp, #4]
 8007d74:	2319      	movs	r3, #25
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	4603      	mov	r3, r0
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fcf2 	bl	8008764 <I2C_RequestMemoryRead>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e072      	b.n	8007e78 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d020      	beq.n	8007ddc <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9e:	4a3a      	ldr	r2, [pc, #232]	; (8007e88 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8007da0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da6:	4a39      	ldr	r2, [pc, #228]	; (8007e8c <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8007da8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dae:	2200      	movs	r2, #0
 8007db0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db6:	2200      	movs	r2, #0
 8007db8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3324      	adds	r3, #36	; 0x24
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007dcc:	f7fc fffa 	bl	8004dc4 <HAL_DMA_Start_IT>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d139      	bne.n	8007e4e <HAL_I2C_Mem_Read_DMA+0x1aa>
 8007dda:	e013      	b.n	8007e04 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e039      	b.n	8007e78 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	8979      	ldrh	r1, [r7, #10]
 8007e0c:	4b20      	ldr	r3, [pc, #128]	; (8007e90 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f001 fe12 	bl	8009a3c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007e32:	2110      	movs	r1, #16
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f001 fe33 	bl	8009aa0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e48:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e014      	b.n	8007e78 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e62:	f043 0210 	orr.w	r2, r3, #16
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8007e76:	2302      	movs	r3, #2
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3720      	adds	r7, #32
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	ffff0000 	.word	0xffff0000
 8007e84:	080081bb 	.word	0x080081bb
 8007e88:	080092b3 	.word	0x080092b3
 8007e8c:	08009349 	.word	0x08009349
 8007e90:	80002400 	.word	0x80002400

08007e94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
 8007f24:	4613      	mov	r3, r2
 8007f26:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fa6:	b2db      	uxtb	r3, r3
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d101      	bne.n	8007fd8 <I2C_Slave_ISR_IT+0x24>
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e0ec      	b.n	80081b2 <I2C_Slave_ISR_IT+0x1fe>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	095b      	lsrs	r3, r3, #5
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d009      	beq.n	8008000 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007ff8:	6939      	ldr	r1, [r7, #16]
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fdf0 	bl	8008be0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	091b      	lsrs	r3, r3, #4
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d04d      	beq.n	80080a8 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	091b      	lsrs	r3, r3, #4
 8008010:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008014:	2b00      	cmp	r3, #0
 8008016:	d047      	beq.n	80080a8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d128      	bne.n	8008074 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b28      	cmp	r3, #40	; 0x28
 800802c:	d108      	bne.n	8008040 <I2C_Slave_ISR_IT+0x8c>
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008034:	d104      	bne.n	8008040 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008036:	6939      	ldr	r1, [r7, #16]
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 ffc9 	bl	8008fd0 <I2C_ITListenCplt>
 800803e:	e032      	b.n	80080a6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b29      	cmp	r3, #41	; 0x29
 800804a:	d10e      	bne.n	800806a <I2C_Slave_ISR_IT+0xb6>
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008052:	d00a      	beq.n	800806a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2210      	movs	r2, #16
 800805a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f001 f904 	bl	800926a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fc93 	bl	800898e <I2C_ITSlaveSeqCplt>
 8008068:	e01d      	b.n	80080a6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2210      	movs	r2, #16
 8008070:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008072:	e096      	b.n	80081a2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2210      	movs	r2, #16
 800807a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008080:	f043 0204 	orr.w	r2, r3, #4
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d004      	beq.n	8008098 <I2C_Slave_ISR_IT+0xe4>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008094:	f040 8085 	bne.w	80081a2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809c:	4619      	mov	r1, r3
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 ffec 	bl	800907c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80080a4:	e07d      	b.n	80081a2 <I2C_Slave_ISR_IT+0x1ee>
 80080a6:	e07c      	b.n	80081a2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	089b      	lsrs	r3, r3, #2
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d030      	beq.n	8008116 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	089b      	lsrs	r3, r3, #2
 80080b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d02a      	beq.n	8008116 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d018      	beq.n	80080fc <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	3b01      	subs	r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008100:	b29b      	uxth	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d14f      	bne.n	80081a6 <I2C_Slave_ISR_IT+0x1f2>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800810c:	d04b      	beq.n	80081a6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fc3d 	bl	800898e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008114:	e047      	b.n	80081a6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	08db      	lsrs	r3, r3, #3
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	08db      	lsrs	r3, r3, #3
 8008126:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800812a:	2b00      	cmp	r3, #0
 800812c:	d004      	beq.n	8008138 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800812e:	6939      	ldr	r1, [r7, #16]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fb6b 	bl	800880c <I2C_ITAddrCplt>
 8008136:	e037      	b.n	80081a8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d031      	beq.n	80081a8 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	085b      	lsrs	r3, r3, #1
 8008148:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800814c:	2b00      	cmp	r3, #0
 800814e:	d02b      	beq.n	80081a8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d018      	beq.n	800818c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	781a      	ldrb	r2, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008182:	3b01      	subs	r3, #1
 8008184:	b29a      	uxth	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	851a      	strh	r2, [r3, #40]	; 0x28
 800818a:	e00d      	b.n	80081a8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008192:	d002      	beq.n	800819a <I2C_Slave_ISR_IT+0x1e6>
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d106      	bne.n	80081a8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 fbf7 	bl	800898e <I2C_ITSlaveSeqCplt>
 80081a0:	e002      	b.n	80081a8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80081a2:	bf00      	nop
 80081a4:	e000      	b.n	80081a8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80081a6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b088      	sub	sp, #32
 80081be:	af02      	add	r7, sp, #8
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <I2C_Master_ISR_DMA+0x1a>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e0e1      	b.n	8008398 <I2C_Master_ISR_DMA+0x1de>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	091b      	lsrs	r3, r3, #4
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d017      	beq.n	8008218 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	091b      	lsrs	r3, r3, #4
 80081ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d011      	beq.n	8008218 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2210      	movs	r2, #16
 80081fa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008200:	f043 0204 	orr.w	r2, r3, #4
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008208:	2120      	movs	r1, #32
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f001 fc48 	bl	8009aa0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f001 f82a 	bl	800926a <I2C_Flush_TXDR>
 8008216:	e0ba      	b.n	800838e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	09db      	lsrs	r3, r3, #7
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d072      	beq.n	800830a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	099b      	lsrs	r3, r3, #6
 8008228:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800822c:	2b00      	cmp	r3, #0
 800822e:	d06c      	beq.n	800830a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800823e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d04e      	beq.n	80082e8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	b29b      	uxth	r3, r3
 8008252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008256:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825c:	b29b      	uxth	r3, r3
 800825e:	2bff      	cmp	r3, #255	; 0xff
 8008260:	d906      	bls.n	8008270 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	22ff      	movs	r2, #255	; 0xff
 8008266:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	e010      	b.n	8008292 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008282:	d003      	beq.n	800828c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e002      	b.n	8008292 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800828c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008290:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008296:	b2da      	uxtb	r2, r3
 8008298:	8a79      	ldrh	r1, [r7, #18]
 800829a:	2300      	movs	r3, #0
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f001 fbcb 	bl	8009a3c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b22      	cmp	r3, #34	; 0x22
 80082c2:	d108      	bne.n	80082d6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082d2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80082d4:	e05b      	b.n	800838e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80082e6:	e052      	b.n	800838e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082f6:	d003      	beq.n	8008300 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fb0b 	bl	8008914 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80082fe:	e046      	b.n	800838e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008300:	2140      	movs	r1, #64	; 0x40
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 feba 	bl	800907c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008308:	e041      	b.n	800838e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	099b      	lsrs	r3, r3, #6
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d029      	beq.n	800836a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	099b      	lsrs	r3, r3, #6
 800831a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800831e:	2b00      	cmp	r3, #0
 8008320:	d023      	beq.n	800836a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008326:	b29b      	uxth	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d119      	bne.n	8008360 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800833a:	d027      	beq.n	800838c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008344:	d108      	bne.n	8008358 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008354:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008356:	e019      	b.n	800838c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 fadb 	bl	8008914 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800835e:	e015      	b.n	800838c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008360:	2140      	movs	r1, #64	; 0x40
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 fe8a 	bl	800907c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008368:	e010      	b.n	800838c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00b      	beq.n	800838e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 fb61 	bl	8008a4c <I2C_ITMasterCplt>
 800838a:	e000      	b.n	800838e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800838c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <I2C_Slave_ISR_DMA+0x24>
 80083c0:	2302      	movs	r3, #2
 80083c2:	e1ca      	b.n	800875a <I2C_Slave_ISR_DMA+0x3ba>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80083e4:	68b9      	ldr	r1, [r7, #8]
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 fbfa 	bl	8008be0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	091b      	lsrs	r3, r3, #4
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 819b 	beq.w	8008730 <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	091b      	lsrs	r3, r3, #4
 80083fe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 8194 	beq.w	8008730 <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	0b9b      	lsrs	r3, r3, #14
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d106      	bne.n	8008422 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	0bdb      	lsrs	r3, r3, #15
 8008418:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8180 	beq.w	8008722 <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d07c      	beq.n	8008524 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	0bdb      	lsrs	r3, r3, #15
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d076      	beq.n	8008524 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a74      	ldr	r2, [pc, #464]	; (8008610 <I2C_Slave_ISR_DMA+0x270>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d059      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a72      	ldr	r2, [pc, #456]	; (8008614 <I2C_Slave_ISR_DMA+0x274>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d053      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a70      	ldr	r2, [pc, #448]	; (8008618 <I2C_Slave_ISR_DMA+0x278>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d04d      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a6e      	ldr	r2, [pc, #440]	; (800861c <I2C_Slave_ISR_DMA+0x27c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d047      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a6c      	ldr	r2, [pc, #432]	; (8008620 <I2C_Slave_ISR_DMA+0x280>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d041      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a6a      	ldr	r2, [pc, #424]	; (8008624 <I2C_Slave_ISR_DMA+0x284>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d03b      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a68      	ldr	r2, [pc, #416]	; (8008628 <I2C_Slave_ISR_DMA+0x288>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d035      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a66      	ldr	r2, [pc, #408]	; (800862c <I2C_Slave_ISR_DMA+0x28c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d02f      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a64      	ldr	r2, [pc, #400]	; (8008630 <I2C_Slave_ISR_DMA+0x290>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d029      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a62      	ldr	r2, [pc, #392]	; (8008634 <I2C_Slave_ISR_DMA+0x294>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d023      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a60      	ldr	r2, [pc, #384]	; (8008638 <I2C_Slave_ISR_DMA+0x298>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d01d      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a5e      	ldr	r2, [pc, #376]	; (800863c <I2C_Slave_ISR_DMA+0x29c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d017      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a5c      	ldr	r2, [pc, #368]	; (8008640 <I2C_Slave_ISR_DMA+0x2a0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d011      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a5a      	ldr	r2, [pc, #360]	; (8008644 <I2C_Slave_ISR_DMA+0x2a4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00b      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a58      	ldr	r2, [pc, #352]	; (8008648 <I2C_Slave_ISR_DMA+0x2a8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d005      	beq.n	80084f6 <I2C_Slave_ISR_DMA+0x156>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a56      	ldr	r2, [pc, #344]	; (800864c <I2C_Slave_ISR_DMA+0x2ac>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d109      	bne.n	800850a <I2C_Slave_ISR_DMA+0x16a>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bf0c      	ite	eq
 8008502:	2301      	moveq	r3, #1
 8008504:	2300      	movne	r3, #0
 8008506:	b2db      	uxtb	r3, r3
 8008508:	e008      	b.n	800851c <I2C_Slave_ISR_DMA+0x17c>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	bf0c      	ite	eq
 8008516:	2301      	moveq	r3, #1
 8008518:	2300      	movne	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8008520:	2301      	movs	r3, #1
 8008522:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 809e 	beq.w	800866a <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	0b9b      	lsrs	r3, r3, #14
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 8097 	beq.w	800866a <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a33      	ldr	r2, [pc, #204]	; (8008610 <I2C_Slave_ISR_DMA+0x270>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d059      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a31      	ldr	r2, [pc, #196]	; (8008614 <I2C_Slave_ISR_DMA+0x274>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d053      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a2f      	ldr	r2, [pc, #188]	; (8008618 <I2C_Slave_ISR_DMA+0x278>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d04d      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a2d      	ldr	r2, [pc, #180]	; (800861c <I2C_Slave_ISR_DMA+0x27c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d047      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a2b      	ldr	r2, [pc, #172]	; (8008620 <I2C_Slave_ISR_DMA+0x280>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d041      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a29      	ldr	r2, [pc, #164]	; (8008624 <I2C_Slave_ISR_DMA+0x284>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d03b      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a27      	ldr	r2, [pc, #156]	; (8008628 <I2C_Slave_ISR_DMA+0x288>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d035      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a25      	ldr	r2, [pc, #148]	; (800862c <I2C_Slave_ISR_DMA+0x28c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d02f      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a23      	ldr	r2, [pc, #140]	; (8008630 <I2C_Slave_ISR_DMA+0x290>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d029      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a21      	ldr	r2, [pc, #132]	; (8008634 <I2C_Slave_ISR_DMA+0x294>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d023      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a1f      	ldr	r2, [pc, #124]	; (8008638 <I2C_Slave_ISR_DMA+0x298>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d01d      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a1d      	ldr	r2, [pc, #116]	; (800863c <I2C_Slave_ISR_DMA+0x29c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d017      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a1b      	ldr	r2, [pc, #108]	; (8008640 <I2C_Slave_ISR_DMA+0x2a0>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d011      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a19      	ldr	r2, [pc, #100]	; (8008644 <I2C_Slave_ISR_DMA+0x2a4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00b      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a17      	ldr	r2, [pc, #92]	; (8008648 <I2C_Slave_ISR_DMA+0x2a8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d005      	beq.n	80085fc <I2C_Slave_ISR_DMA+0x25c>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a15      	ldr	r2, [pc, #84]	; (800864c <I2C_Slave_ISR_DMA+0x2ac>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d129      	bne.n	8008650 <I2C_Slave_ISR_DMA+0x2b0>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf0c      	ite	eq
 8008608:	2301      	moveq	r3, #1
 800860a:	2300      	movne	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	e028      	b.n	8008662 <I2C_Slave_ISR_DMA+0x2c2>
 8008610:	40020010 	.word	0x40020010
 8008614:	40020028 	.word	0x40020028
 8008618:	40020040 	.word	0x40020040
 800861c:	40020058 	.word	0x40020058
 8008620:	40020070 	.word	0x40020070
 8008624:	40020088 	.word	0x40020088
 8008628:	400200a0 	.word	0x400200a0
 800862c:	400200b8 	.word	0x400200b8
 8008630:	40020410 	.word	0x40020410
 8008634:	40020428 	.word	0x40020428
 8008638:	40020440 	.word	0x40020440
 800863c:	40020458 	.word	0x40020458
 8008640:	40020470 	.word	0x40020470
 8008644:	40020488 	.word	0x40020488
 8008648:	400204a0 	.word	0x400204a0
 800864c:	400204b8 	.word	0x400204b8
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	bf0c      	ite	eq
 800865c:	2301      	moveq	r3, #1
 800865e:	2300      	movne	r3, #0
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
 8008666:	2301      	movs	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d128      	bne.n	80086c2 <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b28      	cmp	r3, #40	; 0x28
 800867a:	d108      	bne.n	800868e <I2C_Slave_ISR_DMA+0x2ee>
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008682:	d104      	bne.n	800868e <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 fca2 	bl	8008fd0 <I2C_ITListenCplt>
 800868c:	e048      	b.n	8008720 <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b29      	cmp	r3, #41	; 0x29
 8008698:	d10e      	bne.n	80086b8 <I2C_Slave_ISR_DMA+0x318>
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086a0:	d00a      	beq.n	80086b8 <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2210      	movs	r2, #16
 80086a8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 fddd 	bl	800926a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 f96c 	bl	800898e <I2C_ITSlaveSeqCplt>
 80086b6:	e033      	b.n	8008720 <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2210      	movs	r2, #16
 80086be:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80086c0:	e034      	b.n	800872c <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2210      	movs	r2, #16
 80086c8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ce:	f043 0204 	orr.w	r2, r3, #4
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086dc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <I2C_Slave_ISR_DMA+0x34c>
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086ea:	d11f      	bne.n	800872c <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	2b21      	cmp	r3, #33	; 0x21
 80086f0:	d002      	beq.n	80086f8 <I2C_Slave_ISR_DMA+0x358>
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b29      	cmp	r3, #41	; 0x29
 80086f6:	d103      	bne.n	8008700 <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2221      	movs	r2, #33	; 0x21
 80086fc:	631a      	str	r2, [r3, #48]	; 0x30
 80086fe:	e008      	b.n	8008712 <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008700:	7dfb      	ldrb	r3, [r7, #23]
 8008702:	2b22      	cmp	r3, #34	; 0x22
 8008704:	d002      	beq.n	800870c <I2C_Slave_ISR_DMA+0x36c>
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	2b2a      	cmp	r3, #42	; 0x2a
 800870a:	d102      	bne.n	8008712 <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2222      	movs	r2, #34	; 0x22
 8008710:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008716:	4619      	mov	r1, r3
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 fcaf 	bl	800907c <I2C_ITError>
      if (treatdmanack == 1U)
 800871e:	e005      	b.n	800872c <I2C_Slave_ISR_DMA+0x38c>
 8008720:	e004      	b.n	800872c <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2210      	movs	r2, #16
 8008728:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800872a:	e011      	b.n	8008750 <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
 800872c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800872e:	e00f      	b.n	8008750 <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	08db      	lsrs	r3, r3, #3
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d009      	beq.n	8008750 <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	08db      	lsrs	r3, r3, #3
 8008740:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008744:	2b00      	cmp	r3, #0
 8008746:	d003      	beq.n	8008750 <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008748:	68b9      	ldr	r1, [r7, #8]
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 f85e 	bl	800880c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop

08008764 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af02      	add	r7, sp, #8
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	4608      	mov	r0, r1
 800876e:	4611      	mov	r1, r2
 8008770:	461a      	mov	r2, r3
 8008772:	4603      	mov	r3, r0
 8008774:	817b      	strh	r3, [r7, #10]
 8008776:	460b      	mov	r3, r1
 8008778:	813b      	strh	r3, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800877e:	88fb      	ldrh	r3, [r7, #6]
 8008780:	b2da      	uxtb	r2, r3
 8008782:	8979      	ldrh	r1, [r7, #10]
 8008784:	4b20      	ldr	r3, [pc, #128]	; (8008808 <I2C_RequestMemoryRead+0xa4>)
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	2300      	movs	r3, #0
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f001 f956 	bl	8009a3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	69b9      	ldr	r1, [r7, #24]
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 ff6f 	bl	8009678 <I2C_WaitOnTXISFlagUntilTimeout>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e02c      	b.n	80087fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d105      	bne.n	80087b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087aa:	893b      	ldrh	r3, [r7, #8]
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	629a      	str	r2, [r3, #40]	; 0x28
 80087b4:	e015      	b.n	80087e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80087b6:	893b      	ldrh	r3, [r7, #8]
 80087b8:	0a1b      	lsrs	r3, r3, #8
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	69b9      	ldr	r1, [r7, #24]
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 ff55 	bl	8009678 <I2C_WaitOnTXISFlagUntilTimeout>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e012      	b.n	80087fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087d8:	893b      	ldrh	r3, [r7, #8]
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2200      	movs	r2, #0
 80087ea:	2140      	movs	r1, #64	; 0x40
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 ff03 	bl	80095f8 <I2C_WaitOnFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	80002000 	.word	0x80002000

0800880c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008822:	2b28      	cmp	r3, #40	; 0x28
 8008824:	d16a      	bne.n	80088fc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	0c1b      	lsrs	r3, r3, #16
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	0c1b      	lsrs	r3, r3, #16
 800883e:	b29b      	uxth	r3, r3
 8008840:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008844:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	b29b      	uxth	r3, r3
 800884e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008852:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	b29b      	uxth	r3, r3
 800885c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008860:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d138      	bne.n	80088dc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800886a:	897b      	ldrh	r3, [r7, #10]
 800886c:	09db      	lsrs	r3, r3, #7
 800886e:	b29a      	uxth	r2, r3
 8008870:	89bb      	ldrh	r3, [r7, #12]
 8008872:	4053      	eors	r3, r2
 8008874:	b29b      	uxth	r3, r3
 8008876:	f003 0306 	and.w	r3, r3, #6
 800887a:	2b00      	cmp	r3, #0
 800887c:	d11c      	bne.n	80088b8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800887e:	897b      	ldrh	r3, [r7, #10]
 8008880:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008890:	2b02      	cmp	r3, #2
 8008892:	d13b      	bne.n	800890c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2208      	movs	r2, #8
 80088a0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088aa:	89ba      	ldrh	r2, [r7, #12]
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff fb31 	bl	8007f18 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80088b6:	e029      	b.n	800890c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80088b8:	893b      	ldrh	r3, [r7, #8]
 80088ba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80088bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 f951 	bl	8009b68 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088ce:	89ba      	ldrh	r2, [r7, #12]
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff fb1f 	bl	8007f18 <HAL_I2C_AddrCallback>
}
 80088da:	e017      	b.n	800890c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80088dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 f941 	bl	8009b68 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088ee:	89ba      	ldrh	r2, [r7, #12]
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff fb0f 	bl	8007f18 <HAL_I2C_AddrCallback>
}
 80088fa:	e007      	b.n	800890c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2208      	movs	r2, #8
 8008902:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b21      	cmp	r3, #33	; 0x21
 800892e:	d115      	bne.n	800895c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2220      	movs	r2, #32
 8008934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2211      	movs	r2, #17
 800893c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008944:	2101      	movs	r1, #1
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 f90e 	bl	8009b68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7ff fab7 	bl	8007ec8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800895a:	e014      	b.n	8008986 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2220      	movs	r2, #32
 8008960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2212      	movs	r2, #18
 8008968:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008970:	2102      	movs	r1, #2
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 f8f8 	bl	8009b68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff faab 	bl	8007edc <HAL_I2C_MasterRxCpltCallback>
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	0b9b      	lsrs	r3, r3, #14
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d008      	beq.n	80089c4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e00d      	b.n	80089e0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	0bdb      	lsrs	r3, r3, #15
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d007      	beq.n	80089e0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089de:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b29      	cmp	r3, #41	; 0x29
 80089ea:	d112      	bne.n	8008a12 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2228      	movs	r2, #40	; 0x28
 80089f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2221      	movs	r2, #33	; 0x21
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80089fa:	2101      	movs	r1, #1
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 f8b3 	bl	8009b68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff fa70 	bl	8007ef0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a10:	e017      	b.n	8008a42 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a1c:	d111      	bne.n	8008a42 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2228      	movs	r2, #40	; 0x28
 8008a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2222      	movs	r2, #34	; 0x22
 8008a2a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008a2c:	2102      	movs	r1, #2
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 f89a 	bl	8009b68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff fa61 	bl	8007f04 <HAL_I2C_SlaveRxCpltCallback>
}
 8008a42:	bf00      	nop
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b21      	cmp	r3, #33	; 0x21
 8008a6c:	d107      	bne.n	8008a7e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a6e:	2101      	movs	r1, #1
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 f879 	bl	8009b68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2211      	movs	r2, #17
 8008a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8008a7c:	e00c      	b.n	8008a98 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b22      	cmp	r3, #34	; 0x22
 8008a88:	d106      	bne.n	8008a98 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008a8a:	2102      	movs	r1, #2
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 f86b 	bl	8009b68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2212      	movs	r2, #18
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6859      	ldr	r1, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4b4d      	ldr	r3, [pc, #308]	; (8008bd8 <I2C_ITMasterCplt+0x18c>)
 8008aa4:	400b      	ands	r3, r1
 8008aa6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a4a      	ldr	r2, [pc, #296]	; (8008bdc <I2C_ITMasterCplt+0x190>)
 8008ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	091b      	lsrs	r3, r3, #4
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d009      	beq.n	8008ad4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2210      	movs	r2, #16
 8008ac6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008acc:	f043 0204 	orr.w	r2, r3, #4
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b60      	cmp	r3, #96	; 0x60
 8008ade:	d10b      	bne.n	8008af8 <I2C_ITMasterCplt+0xac>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	089b      	lsrs	r3, r3, #2
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d005      	beq.n	8008af8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008af6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fbb6 	bl	800926a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b02:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b60      	cmp	r3, #96	; 0x60
 8008b0e:	d002      	beq.n	8008b16 <I2C_ITMasterCplt+0xca>
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d006      	beq.n	8008b24 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 faad 	bl	800907c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b22:	e054      	b.n	8008bce <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b21      	cmp	r3, #33	; 0x21
 8008b2e:	d124      	bne.n	8008b7a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b40      	cmp	r3, #64	; 0x40
 8008b48:	d10b      	bne.n	8008b62 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff f9f4 	bl	8007f48 <HAL_I2C_MemTxCpltCallback>
}
 8008b60:	e035      	b.n	8008bce <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff f9a8 	bl	8007ec8 <HAL_I2C_MasterTxCpltCallback>
}
 8008b78:	e029      	b.n	8008bce <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b22      	cmp	r3, #34	; 0x22
 8008b84:	d123      	bne.n	8008bce <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b40      	cmp	r3, #64	; 0x40
 8008b9e:	d10b      	bne.n	8008bb8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff f9d3 	bl	8007f5c <HAL_I2C_MemRxCpltCallback>
}
 8008bb6:	e00a      	b.n	8008bce <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7ff f987 	bl	8007edc <HAL_I2C_MasterRxCpltCallback>
}
 8008bce:	bf00      	nop
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	fe00e800 	.word	0xfe00e800
 8008bdc:	ffff0000 	.word	0xffff0000

08008be0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bfc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2220      	movs	r2, #32
 8008c04:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b21      	cmp	r3, #33	; 0x21
 8008c0a:	d002      	beq.n	8008c12 <I2C_ITSlaveCplt+0x32>
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	2b29      	cmp	r3, #41	; 0x29
 8008c10:	d108      	bne.n	8008c24 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008c12:	f248 0101 	movw	r1, #32769	; 0x8001
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 ffa6 	bl	8009b68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2221      	movs	r2, #33	; 0x21
 8008c20:	631a      	str	r2, [r3, #48]	; 0x30
 8008c22:	e00d      	b.n	8008c40 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	2b22      	cmp	r3, #34	; 0x22
 8008c28:	d002      	beq.n	8008c30 <I2C_ITSlaveCplt+0x50>
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c2e:	d107      	bne.n	8008c40 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008c30:	f248 0102 	movw	r1, #32770	; 0x8002
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 ff97 	bl	8009b68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2222      	movs	r2, #34	; 0x22
 8008c3e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c4e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6859      	ldr	r1, [r3, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	4b80      	ldr	r3, [pc, #512]	; (8008e5c <I2C_ITSlaveCplt+0x27c>)
 8008c5c:	400b      	ands	r3, r1
 8008c5e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fb02 	bl	800926a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	0b9b      	lsrs	r3, r3, #14
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d07a      	beq.n	8008d68 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c80:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 8111 	beq.w	8008eae <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a73      	ldr	r2, [pc, #460]	; (8008e60 <I2C_ITSlaveCplt+0x280>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d059      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a71      	ldr	r2, [pc, #452]	; (8008e64 <I2C_ITSlaveCplt+0x284>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d053      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a6f      	ldr	r2, [pc, #444]	; (8008e68 <I2C_ITSlaveCplt+0x288>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d04d      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a6d      	ldr	r2, [pc, #436]	; (8008e6c <I2C_ITSlaveCplt+0x28c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d047      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a6b      	ldr	r2, [pc, #428]	; (8008e70 <I2C_ITSlaveCplt+0x290>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d041      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a69      	ldr	r2, [pc, #420]	; (8008e74 <I2C_ITSlaveCplt+0x294>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d03b      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a67      	ldr	r2, [pc, #412]	; (8008e78 <I2C_ITSlaveCplt+0x298>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d035      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a65      	ldr	r2, [pc, #404]	; (8008e7c <I2C_ITSlaveCplt+0x29c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d02f      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a63      	ldr	r2, [pc, #396]	; (8008e80 <I2C_ITSlaveCplt+0x2a0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d029      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a61      	ldr	r2, [pc, #388]	; (8008e84 <I2C_ITSlaveCplt+0x2a4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d023      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a5f      	ldr	r2, [pc, #380]	; (8008e88 <I2C_ITSlaveCplt+0x2a8>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d01d      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a5d      	ldr	r2, [pc, #372]	; (8008e8c <I2C_ITSlaveCplt+0x2ac>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d017      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a5b      	ldr	r2, [pc, #364]	; (8008e90 <I2C_ITSlaveCplt+0x2b0>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d011      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a59      	ldr	r2, [pc, #356]	; (8008e94 <I2C_ITSlaveCplt+0x2b4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00b      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a57      	ldr	r2, [pc, #348]	; (8008e98 <I2C_ITSlaveCplt+0x2b8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d005      	beq.n	8008d4c <I2C_ITSlaveCplt+0x16c>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a55      	ldr	r2, [pc, #340]	; (8008e9c <I2C_ITSlaveCplt+0x2bc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d105      	bne.n	8008d58 <I2C_ITSlaveCplt+0x178>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	e004      	b.n	8008d62 <I2C_ITSlaveCplt+0x182>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	8553      	strh	r3, [r2, #42]	; 0x2a
 8008d66:	e0a2      	b.n	8008eae <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	0bdb      	lsrs	r3, r3, #15
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 809c 	beq.w	8008eae <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d84:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 808f 	beq.w	8008eae <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a32      	ldr	r2, [pc, #200]	; (8008e60 <I2C_ITSlaveCplt+0x280>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d059      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a30      	ldr	r2, [pc, #192]	; (8008e64 <I2C_ITSlaveCplt+0x284>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d053      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a2e      	ldr	r2, [pc, #184]	; (8008e68 <I2C_ITSlaveCplt+0x288>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d04d      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a2c      	ldr	r2, [pc, #176]	; (8008e6c <I2C_ITSlaveCplt+0x28c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d047      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a2a      	ldr	r2, [pc, #168]	; (8008e70 <I2C_ITSlaveCplt+0x290>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d041      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a28      	ldr	r2, [pc, #160]	; (8008e74 <I2C_ITSlaveCplt+0x294>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d03b      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a26      	ldr	r2, [pc, #152]	; (8008e78 <I2C_ITSlaveCplt+0x298>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d035      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a24      	ldr	r2, [pc, #144]	; (8008e7c <I2C_ITSlaveCplt+0x29c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d02f      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a22      	ldr	r2, [pc, #136]	; (8008e80 <I2C_ITSlaveCplt+0x2a0>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d029      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a20      	ldr	r2, [pc, #128]	; (8008e84 <I2C_ITSlaveCplt+0x2a4>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d023      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1e      	ldr	r2, [pc, #120]	; (8008e88 <I2C_ITSlaveCplt+0x2a8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d01d      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a1c      	ldr	r2, [pc, #112]	; (8008e8c <I2C_ITSlaveCplt+0x2ac>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d017      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a1a      	ldr	r2, [pc, #104]	; (8008e90 <I2C_ITSlaveCplt+0x2b0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d011      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a18      	ldr	r2, [pc, #96]	; (8008e94 <I2C_ITSlaveCplt+0x2b4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00b      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a16      	ldr	r2, [pc, #88]	; (8008e98 <I2C_ITSlaveCplt+0x2b8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d005      	beq.n	8008e50 <I2C_ITSlaveCplt+0x270>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a14      	ldr	r2, [pc, #80]	; (8008e9c <I2C_ITSlaveCplt+0x2bc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d127      	bne.n	8008ea0 <I2C_ITSlaveCplt+0x2c0>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	e026      	b.n	8008eaa <I2C_ITSlaveCplt+0x2ca>
 8008e5c:	fe00e800 	.word	0xfe00e800
 8008e60:	40020010 	.word	0x40020010
 8008e64:	40020028 	.word	0x40020028
 8008e68:	40020040 	.word	0x40020040
 8008e6c:	40020058 	.word	0x40020058
 8008e70:	40020070 	.word	0x40020070
 8008e74:	40020088 	.word	0x40020088
 8008e78:	400200a0 	.word	0x400200a0
 8008e7c:	400200b8 	.word	0x400200b8
 8008e80:	40020410 	.word	0x40020410
 8008e84:	40020428 	.word	0x40020428
 8008e88:	40020440 	.word	0x40020440
 8008e8c:	40020458 	.word	0x40020458
 8008e90:	40020470 	.word	0x40020470
 8008e94:	40020488 	.word	0x40020488
 8008e98:	400204a0 	.word	0x400204a0
 8008e9c:	400204b8 	.word	0x400204b8
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	089b      	lsrs	r3, r3, #2
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d020      	beq.n	8008efc <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f023 0304 	bic.w	r3, r3, #4
 8008ec0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	b2d2      	uxtb	r2, r2
 8008ece:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00c      	beq.n	8008efc <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d005      	beq.n	8008f12 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0a:	f043 0204 	orr.w	r2, r3, #4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d010      	beq.n	8008f4a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f8a4 	bl	800907c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b28      	cmp	r3, #40	; 0x28
 8008f3e:	d141      	bne.n	8008fc4 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008f40:	6979      	ldr	r1, [r7, #20]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f844 	bl	8008fd0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f48:	e03c      	b.n	8008fc4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f52:	d014      	beq.n	8008f7e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff fd1a 	bl	800898e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a1b      	ldr	r2, [pc, #108]	; (8008fcc <I2C_ITSlaveCplt+0x3ec>)
 8008f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7fe ffdc 	bl	8007f34 <HAL_I2C_ListenCpltCallback>
}
 8008f7c:	e022      	b.n	8008fc4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b22      	cmp	r3, #34	; 0x22
 8008f88:	d10e      	bne.n	8008fa8 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fe ffaf 	bl	8007f04 <HAL_I2C_SlaveRxCpltCallback>
}
 8008fa6:	e00d      	b.n	8008fc4 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7fe ff96 	bl	8007ef0 <HAL_I2C_SlaveTxCpltCallback>
}
 8008fc4:	bf00      	nop
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	ffff0000 	.word	0xffff0000

08008fd0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a26      	ldr	r2, [pc, #152]	; (8009078 <I2C_ITListenCplt+0xa8>)
 8008fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	089b      	lsrs	r3, r3, #2
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d022      	beq.n	800904e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	b2d2      	uxtb	r2, r2
 8009014:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009024:	2b00      	cmp	r3, #0
 8009026:	d012      	beq.n	800904e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800902c:	3b01      	subs	r3, #1
 800902e:	b29a      	uxth	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009038:	b29b      	uxth	r3, r3
 800903a:	3b01      	subs	r3, #1
 800903c:	b29a      	uxth	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009046:	f043 0204 	orr.w	r2, r3, #4
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800904e:	f248 0103 	movw	r1, #32771	; 0x8003
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fd88 	bl	8009b68 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2210      	movs	r2, #16
 800905e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7fe ff63 	bl	8007f34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	ffff0000 	.word	0xffff0000

0800907c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800908c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a5d      	ldr	r2, [pc, #372]	; (8009210 <I2C_ITError+0x194>)
 800909a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	2b28      	cmp	r3, #40	; 0x28
 80090b2:	d005      	beq.n	80090c0 <I2C_ITError+0x44>
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	2b29      	cmp	r3, #41	; 0x29
 80090b8:	d002      	beq.n	80090c0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	2b2a      	cmp	r3, #42	; 0x2a
 80090be:	d10b      	bne.n	80090d8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80090c0:	2103      	movs	r1, #3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fd50 	bl	8009b68 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2228      	movs	r2, #40	; 0x28
 80090cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a50      	ldr	r2, [pc, #320]	; (8009214 <I2C_ITError+0x198>)
 80090d4:	635a      	str	r2, [r3, #52]	; 0x34
 80090d6:	e011      	b.n	80090fc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80090d8:	f248 0103 	movw	r1, #32771	; 0x8003
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fd43 	bl	8009b68 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b60      	cmp	r3, #96	; 0x60
 80090ec:	d003      	beq.n	80090f6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	2b00      	cmp	r3, #0
 8009108:	d039      	beq.n	800917e <I2C_ITError+0x102>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b11      	cmp	r3, #17
 800910e:	d002      	beq.n	8009116 <I2C_ITError+0x9a>
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2b21      	cmp	r3, #33	; 0x21
 8009114:	d133      	bne.n	800917e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009124:	d107      	bne.n	8009136 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009134:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	4618      	mov	r0, r3
 800913c:	f7fd fd3a 	bl	8006bb4 <HAL_DMA_GetState>
 8009140:	4603      	mov	r3, r0
 8009142:	2b01      	cmp	r3, #1
 8009144:	d017      	beq.n	8009176 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914a:	4a33      	ldr	r2, [pc, #204]	; (8009218 <I2C_ITError+0x19c>)
 800914c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915a:	4618      	mov	r0, r3
 800915c:	f7fc fbba 	bl	80058d4 <HAL_DMA_Abort_IT>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d04d      	beq.n	8009202 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009174:	e045      	b.n	8009202 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f850 	bl	800921c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800917c:	e041      	b.n	8009202 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d039      	beq.n	80091fa <I2C_ITError+0x17e>
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	2b12      	cmp	r3, #18
 800918a:	d002      	beq.n	8009192 <I2C_ITError+0x116>
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	2b22      	cmp	r3, #34	; 0x22
 8009190:	d133      	bne.n	80091fa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800919c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091a0:	d107      	bne.n	80091b2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fd fcfc 	bl	8006bb4 <HAL_DMA_GetState>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d017      	beq.n	80091f2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c6:	4a14      	ldr	r2, [pc, #80]	; (8009218 <I2C_ITError+0x19c>)
 80091c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fc fb7c 	bl	80058d4 <HAL_DMA_Abort_IT>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d011      	beq.n	8009206 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80091ec:	4610      	mov	r0, r2
 80091ee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091f0:	e009      	b.n	8009206 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f812 	bl	800921c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091f8:	e005      	b.n	8009206 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f80e 	bl	800921c <I2C_TreatErrorCallback>
  }
}
 8009200:	e002      	b.n	8009208 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009202:	bf00      	nop
 8009204:	e000      	b.n	8009208 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009206:	bf00      	nop
}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	ffff0000 	.word	0xffff0000
 8009214:	08007fb5 	.word	0x08007fb5
 8009218:	080095bd 	.word	0x080095bd

0800921c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b60      	cmp	r3, #96	; 0x60
 800922e:	d10e      	bne.n	800924e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2220      	movs	r2, #32
 8009234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7fe fe9c 	bl	8007f84 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800924c:	e009      	b.n	8009262 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7fe fe87 	bl	8007f70 <HAL_I2C_ErrorCallback>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b02      	cmp	r3, #2
 800927e:	d103      	bne.n	8009288 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2200      	movs	r2, #0
 8009286:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b01      	cmp	r3, #1
 8009294:	d007      	beq.n	80092a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	699a      	ldr	r2, [r3, #24]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f042 0201 	orr.w	r2, r2, #1
 80092a4:	619a      	str	r2, [r3, #24]
  }
}
 80092a6:	bf00      	nop
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092ce:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d104      	bne.n	80092e4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80092da:	2120      	movs	r1, #32
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 fbdf 	bl	8009aa0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80092e2:	e02d      	b.n	8009340 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80092ec:	441a      	add	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	2bff      	cmp	r3, #255	; 0xff
 80092fa:	d903      	bls.n	8009304 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	22ff      	movs	r2, #255	; 0xff
 8009300:	851a      	strh	r2, [r3, #40]	; 0x28
 8009302:	e004      	b.n	800930e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009308:	b29a      	uxth	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3324      	adds	r3, #36	; 0x24
 8009318:	4619      	mov	r1, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009324:	f7fb fd4e 	bl	8004dc4 <HAL_DMA_Start_IT>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d004      	beq.n	8009338 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800932e:	2110      	movs	r1, #16
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f7ff fea3 	bl	800907c <I2C_ITError>
}
 8009336:	e003      	b.n	8009340 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009338:	2140      	movs	r1, #64	; 0x40
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 fbb0 	bl	8009aa0 <I2C_Enable_IRQ>
}
 8009340:	bf00      	nop
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009358:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935e:	2b00      	cmp	r3, #0
 8009360:	d076      	beq.n	8009450 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a71      	ldr	r2, [pc, #452]	; (8009530 <I2C_DMAError+0x1e8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d059      	beq.n	8009422 <I2C_DMAError+0xda>
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a6f      	ldr	r2, [pc, #444]	; (8009534 <I2C_DMAError+0x1ec>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d053      	beq.n	8009422 <I2C_DMAError+0xda>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a6d      	ldr	r2, [pc, #436]	; (8009538 <I2C_DMAError+0x1f0>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d04d      	beq.n	8009422 <I2C_DMAError+0xda>
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a6b      	ldr	r2, [pc, #428]	; (800953c <I2C_DMAError+0x1f4>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d047      	beq.n	8009422 <I2C_DMAError+0xda>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a69      	ldr	r2, [pc, #420]	; (8009540 <I2C_DMAError+0x1f8>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d041      	beq.n	8009422 <I2C_DMAError+0xda>
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a67      	ldr	r2, [pc, #412]	; (8009544 <I2C_DMAError+0x1fc>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d03b      	beq.n	8009422 <I2C_DMAError+0xda>
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a65      	ldr	r2, [pc, #404]	; (8009548 <I2C_DMAError+0x200>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d035      	beq.n	8009422 <I2C_DMAError+0xda>
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a63      	ldr	r2, [pc, #396]	; (800954c <I2C_DMAError+0x204>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d02f      	beq.n	8009422 <I2C_DMAError+0xda>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a61      	ldr	r2, [pc, #388]	; (8009550 <I2C_DMAError+0x208>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d029      	beq.n	8009422 <I2C_DMAError+0xda>
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a5f      	ldr	r2, [pc, #380]	; (8009554 <I2C_DMAError+0x20c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d023      	beq.n	8009422 <I2C_DMAError+0xda>
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a5d      	ldr	r2, [pc, #372]	; (8009558 <I2C_DMAError+0x210>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d01d      	beq.n	8009422 <I2C_DMAError+0xda>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a5b      	ldr	r2, [pc, #364]	; (800955c <I2C_DMAError+0x214>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d017      	beq.n	8009422 <I2C_DMAError+0xda>
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a59      	ldr	r2, [pc, #356]	; (8009560 <I2C_DMAError+0x218>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d011      	beq.n	8009422 <I2C_DMAError+0xda>
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a57      	ldr	r2, [pc, #348]	; (8009564 <I2C_DMAError+0x21c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d00b      	beq.n	8009422 <I2C_DMAError+0xda>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a55      	ldr	r2, [pc, #340]	; (8009568 <I2C_DMAError+0x220>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d005      	beq.n	8009422 <I2C_DMAError+0xda>
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a53      	ldr	r2, [pc, #332]	; (800956c <I2C_DMAError+0x224>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d109      	bne.n	8009436 <I2C_DMAError+0xee>
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	bf0c      	ite	eq
 800942e:	2301      	moveq	r3, #1
 8009430:	2300      	movne	r3, #0
 8009432:	b2db      	uxtb	r3, r3
 8009434:	e008      	b.n	8009448 <I2C_DMAError+0x100>
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	bf0c      	ite	eq
 8009442:	2301      	moveq	r3, #1
 8009444:	2300      	movne	r3, #0
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800944c:	2301      	movs	r3, #1
 800944e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 8098 	beq.w	800958a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a33      	ldr	r2, [pc, #204]	; (8009530 <I2C_DMAError+0x1e8>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d059      	beq.n	800951a <I2C_DMAError+0x1d2>
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a31      	ldr	r2, [pc, #196]	; (8009534 <I2C_DMAError+0x1ec>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d053      	beq.n	800951a <I2C_DMAError+0x1d2>
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a2f      	ldr	r2, [pc, #188]	; (8009538 <I2C_DMAError+0x1f0>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d04d      	beq.n	800951a <I2C_DMAError+0x1d2>
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a2d      	ldr	r2, [pc, #180]	; (800953c <I2C_DMAError+0x1f4>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d047      	beq.n	800951a <I2C_DMAError+0x1d2>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a2b      	ldr	r2, [pc, #172]	; (8009540 <I2C_DMAError+0x1f8>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d041      	beq.n	800951a <I2C_DMAError+0x1d2>
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a29      	ldr	r2, [pc, #164]	; (8009544 <I2C_DMAError+0x1fc>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d03b      	beq.n	800951a <I2C_DMAError+0x1d2>
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a27      	ldr	r2, [pc, #156]	; (8009548 <I2C_DMAError+0x200>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d035      	beq.n	800951a <I2C_DMAError+0x1d2>
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a25      	ldr	r2, [pc, #148]	; (800954c <I2C_DMAError+0x204>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d02f      	beq.n	800951a <I2C_DMAError+0x1d2>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a23      	ldr	r2, [pc, #140]	; (8009550 <I2C_DMAError+0x208>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d029      	beq.n	800951a <I2C_DMAError+0x1d2>
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a21      	ldr	r2, [pc, #132]	; (8009554 <I2C_DMAError+0x20c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d023      	beq.n	800951a <I2C_DMAError+0x1d2>
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a1f      	ldr	r2, [pc, #124]	; (8009558 <I2C_DMAError+0x210>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d01d      	beq.n	800951a <I2C_DMAError+0x1d2>
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a1d      	ldr	r2, [pc, #116]	; (800955c <I2C_DMAError+0x214>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d017      	beq.n	800951a <I2C_DMAError+0x1d2>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a1b      	ldr	r2, [pc, #108]	; (8009560 <I2C_DMAError+0x218>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d011      	beq.n	800951a <I2C_DMAError+0x1d2>
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a19      	ldr	r2, [pc, #100]	; (8009564 <I2C_DMAError+0x21c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00b      	beq.n	800951a <I2C_DMAError+0x1d2>
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a17      	ldr	r2, [pc, #92]	; (8009568 <I2C_DMAError+0x220>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d005      	beq.n	800951a <I2C_DMAError+0x1d2>
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a15      	ldr	r2, [pc, #84]	; (800956c <I2C_DMAError+0x224>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d12a      	bne.n	8009570 <I2C_DMAError+0x228>
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	bf0c      	ite	eq
 8009526:	2301      	moveq	r3, #1
 8009528:	2300      	movne	r3, #0
 800952a:	b2db      	uxtb	r3, r3
 800952c:	e029      	b.n	8009582 <I2C_DMAError+0x23a>
 800952e:	bf00      	nop
 8009530:	40020010 	.word	0x40020010
 8009534:	40020028 	.word	0x40020028
 8009538:	40020040 	.word	0x40020040
 800953c:	40020058 	.word	0x40020058
 8009540:	40020070 	.word	0x40020070
 8009544:	40020088 	.word	0x40020088
 8009548:	400200a0 	.word	0x400200a0
 800954c:	400200b8 	.word	0x400200b8
 8009550:	40020410 	.word	0x40020410
 8009554:	40020428 	.word	0x40020428
 8009558:	40020440 	.word	0x40020440
 800955c:	40020458 	.word	0x40020458
 8009560:	40020470 	.word	0x40020470
 8009564:	40020488 	.word	0x40020488
 8009568:	400204a0 	.word	0x400204a0
 800956c:	400204b8 	.word	0x400204b8
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	bf0c      	ite	eq
 800957c:	2301      	moveq	r3, #1
 800957e:	2300      	movne	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8009586:	2301      	movs	r3, #1
 8009588:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fd fb20 	bl	8006bd0 <HAL_DMA_GetError>
 8009590:	4603      	mov	r3, r0
 8009592:	2b02      	cmp	r3, #2
 8009594:	d00e      	beq.n	80095b4 <I2C_DMAError+0x26c>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00b      	beq.n	80095b4 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095aa:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80095ac:	2110      	movs	r1, #16
 80095ae:	68b8      	ldr	r0, [r7, #8]
 80095b0:	f7ff fd64 	bl	800907c <I2C_ITError>
  }
}
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d6:	2200      	movs	r2, #0
 80095d8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e6:	2200      	movs	r2, #0
 80095e8:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff fe16 	bl	800921c <I2C_TreatErrorCallback>
}
 80095f0:	bf00      	nop
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	4613      	mov	r3, r2
 8009606:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009608:	e022      	b.n	8009650 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009610:	d01e      	beq.n	8009650 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009612:	f7fa ff2f 	bl	8004474 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d302      	bcc.n	8009628 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d113      	bne.n	8009650 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962c:	f043 0220 	orr.w	r2, r3, #32
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2220      	movs	r2, #32
 8009638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e00f      	b.n	8009670 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	699a      	ldr	r2, [r3, #24]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4013      	ands	r3, r2
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	429a      	cmp	r2, r3
 800965e:	bf0c      	ite	eq
 8009660:	2301      	moveq	r3, #1
 8009662:	2300      	movne	r3, #0
 8009664:	b2db      	uxtb	r3, r3
 8009666:	461a      	mov	r2, r3
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	429a      	cmp	r2, r3
 800966c:	d0cd      	beq.n	800960a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009684:	e02c      	b.n	80096e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	68b9      	ldr	r1, [r7, #8]
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 f8ea 	bl	8009864 <I2C_IsErrorOccurred>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e02a      	b.n	80096f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096a0:	d01e      	beq.n	80096e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096a2:	f7fa fee7 	bl	8004474 <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d302      	bcc.n	80096b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d113      	bne.n	80096e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096bc:	f043 0220 	orr.w	r2, r3, #32
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2220      	movs	r2, #32
 80096c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e007      	b.n	80096f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d1cb      	bne.n	8009686 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009704:	e028      	b.n	8009758 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 f8aa 	bl	8009864 <I2C_IsErrorOccurred>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e026      	b.n	8009768 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800971a:	f7fa feab 	bl	8004474 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	d302      	bcc.n	8009730 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d113      	bne.n	8009758 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009734:	f043 0220 	orr.w	r2, r3, #32
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2220      	movs	r2, #32
 8009740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e007      	b.n	8009768 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b20      	cmp	r3, #32
 8009764:	d1cf      	bne.n	8009706 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800977c:	e064      	b.n	8009848 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	68b9      	ldr	r1, [r7, #8]
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 f86e 	bl	8009864 <I2C_IsErrorOccurred>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e062      	b.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f003 0320 	and.w	r3, r3, #32
 800979c:	2b20      	cmp	r3, #32
 800979e:	d138      	bne.n	8009812 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d105      	bne.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	e04e      	b.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b10      	cmp	r3, #16
 80097c6:	d107      	bne.n	80097d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2210      	movs	r2, #16
 80097ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2204      	movs	r2, #4
 80097d4:	645a      	str	r2, [r3, #68]	; 0x44
 80097d6:	e002      	b.n	80097de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2220      	movs	r2, #32
 80097e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6859      	ldr	r1, [r3, #4]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	4b1b      	ldr	r3, [pc, #108]	; (8009860 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80097f2:	400b      	ands	r3, r1
 80097f4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e022      	b.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009812:	f7fa fe2f 	bl	8004474 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	429a      	cmp	r2, r3
 8009820:	d302      	bcc.n	8009828 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10f      	bne.n	8009848 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800982c:	f043 0220 	orr.w	r2, r3, #32
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2220      	movs	r2, #32
 8009838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e007      	b.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b04      	cmp	r3, #4
 8009854:	d193      	bne.n	800977e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	fe00e800 	.word	0xfe00e800

08009864 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08a      	sub	sp, #40	; 0x28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	f003 0310 	and.w	r3, r3, #16
 800988c:	2b00      	cmp	r3, #0
 800988e:	d075      	beq.n	800997c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2210      	movs	r2, #16
 8009896:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009898:	e056      	b.n	8009948 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a0:	d052      	beq.n	8009948 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80098a2:	f7fa fde7 	bl	8004474 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d302      	bcc.n	80098b8 <I2C_IsErrorOccurred+0x54>
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d147      	bne.n	8009948 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098da:	d12e      	bne.n	800993a <I2C_IsErrorOccurred+0xd6>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098e2:	d02a      	beq.n	800993a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80098e4:	7cfb      	ldrb	r3, [r7, #19]
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d027      	beq.n	800993a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80098fa:	f7fa fdbb 	bl	8004474 <HAL_GetTick>
 80098fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009900:	e01b      	b.n	800993a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009902:	f7fa fdb7 	bl	8004474 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	2b19      	cmp	r3, #25
 800990e:	d914      	bls.n	800993a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009914:	f043 0220 	orr.w	r2, r3, #32
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2220      	movs	r2, #32
 8009920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	f003 0320 	and.w	r3, r3, #32
 8009944:	2b20      	cmp	r3, #32
 8009946:	d1dc      	bne.n	8009902 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	f003 0320 	and.w	r3, r3, #32
 8009952:	2b20      	cmp	r3, #32
 8009954:	d003      	beq.n	800995e <I2C_IsErrorOccurred+0xfa>
 8009956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800995a:	2b00      	cmp	r3, #0
 800995c:	d09d      	beq.n	800989a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800995e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009962:	2b00      	cmp	r3, #0
 8009964:	d103      	bne.n	800996e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2220      	movs	r2, #32
 800996c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	f043 0304 	orr.w	r3, r3, #4
 8009974:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00b      	beq.n	80099a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	f043 0301 	orr.w	r3, r3, #1
 8009994:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800999e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	f043 0308 	orr.w	r3, r3, #8
 80099b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00b      	beq.n	80099ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	f043 0302 	orr.w	r3, r3, #2
 80099d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80099ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d01c      	beq.n	8009a2c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff fc39 	bl	800926a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6859      	ldr	r1, [r3, #4]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <I2C_IsErrorOccurred+0x1d4>)
 8009a04:	400b      	ands	r3, r1
 8009a06:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2220      	movs	r2, #32
 8009a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3728      	adds	r7, #40	; 0x28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	fe00e800 	.word	0xfe00e800

08009a3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	607b      	str	r3, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	817b      	strh	r3, [r7, #10]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a4e:	897b      	ldrh	r3, [r7, #10]
 8009a50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a54:	7a7b      	ldrb	r3, [r7, #9]
 8009a56:	041b      	lsls	r3, r3, #16
 8009a58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a5c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a6a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	0d5b      	lsrs	r3, r3, #21
 8009a76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009a7a:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <I2C_TransferConfig+0x60>)
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	43db      	mvns	r3, r3
 8009a80:	ea02 0103 	and.w	r1, r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a8e:	bf00      	nop
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	03ff63ff 	.word	0x03ff63ff

08009aa0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab4:	4a2a      	ldr	r2, [pc, #168]	; (8009b60 <I2C_Enable_IRQ+0xc0>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d004      	beq.n	8009ac4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009abe:	4a29      	ldr	r2, [pc, #164]	; (8009b64 <I2C_Enable_IRQ+0xc4>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d11d      	bne.n	8009b00 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	da03      	bge.n	8009ad4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009ad2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009ad4:	887b      	ldrh	r3, [r7, #2]
 8009ad6:	2b10      	cmp	r3, #16
 8009ad8:	d103      	bne.n	8009ae2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009ae0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009ae2:	887b      	ldrh	r3, [r7, #2]
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d103      	bne.n	8009af0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009aee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009af0:	887b      	ldrh	r3, [r7, #2]
 8009af2:	2b40      	cmp	r3, #64	; 0x40
 8009af4:	d125      	bne.n	8009b42 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009afc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009afe:	e020      	b.n	8009b42 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009b00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	da03      	bge.n	8009b10 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009b0e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009b10:	887b      	ldrh	r3, [r7, #2]
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009b20:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009b22:	887b      	ldrh	r3, [r7, #2]
 8009b24:	f003 0302 	and.w	r3, r3, #2
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009b32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009b34:	887b      	ldrh	r3, [r7, #2]
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d103      	bne.n	8009b42 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f043 0320 	orr.w	r3, r3, #32
 8009b40:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6819      	ldr	r1, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	601a      	str	r2, [r3, #0]
}
 8009b52:	bf00      	nop
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	080081bb 	.word	0x080081bb
 8009b64:	080083a1 	.word	0x080083a1

08009b68 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009b78:	887b      	ldrh	r3, [r7, #2]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00f      	beq.n	8009ba2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009b88:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009b96:	2b28      	cmp	r3, #40	; 0x28
 8009b98:	d003      	beq.n	8009ba2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009ba0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009ba2:	887b      	ldrh	r3, [r7, #2]
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00f      	beq.n	8009bcc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009bb2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009bc0:	2b28      	cmp	r3, #40	; 0x28
 8009bc2:	d003      	beq.n	8009bcc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009bca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009bcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da03      	bge.n	8009bdc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009bda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009bdc:	887b      	ldrh	r3, [r7, #2]
 8009bde:	2b10      	cmp	r3, #16
 8009be0:	d103      	bne.n	8009bea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009be8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009bea:	887b      	ldrh	r3, [r7, #2]
 8009bec:	2b20      	cmp	r3, #32
 8009bee:	d103      	bne.n	8009bf8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f043 0320 	orr.w	r3, r3, #32
 8009bf6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009bf8:	887b      	ldrh	r3, [r7, #2]
 8009bfa:	2b40      	cmp	r3, #64	; 0x40
 8009bfc:	d103      	bne.n	8009c06 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c04:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6819      	ldr	r1, [r3, #0]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	43da      	mvns	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	400a      	ands	r2, r1
 8009c16:	601a      	str	r2, [r3, #0]
}
 8009c18:	bf00      	nop
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d138      	bne.n	8009cac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d101      	bne.n	8009c48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c44:	2302      	movs	r3, #2
 8009c46:	e032      	b.n	8009cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2224      	movs	r2, #36	; 0x24
 8009c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f022 0201 	bic.w	r2, r2, #1
 8009c66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6819      	ldr	r1, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0201 	orr.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e000      	b.n	8009cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cac:	2302      	movs	r3, #2
  }
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d139      	bne.n	8009d44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d101      	bne.n	8009cde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cda:	2302      	movs	r3, #2
 8009cdc:	e033      	b.n	8009d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2224      	movs	r2, #36	; 0x24
 8009cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0201 	bic.w	r2, r2, #1
 8009cfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f042 0201 	orr.w	r2, r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2220      	movs	r2, #32
 8009d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e000      	b.n	8009d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d44:	2302      	movs	r3, #2
  }
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
	...

08009d54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d5c:	4b19      	ldr	r3, [pc, #100]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d00a      	beq.n	8009d7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d68:	4b16      	ldr	r3, [pc, #88]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f003 0307 	and.w	r3, r3, #7
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d001      	beq.n	8009d7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e01f      	b.n	8009dba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e01d      	b.n	8009dba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d7e:	4b11      	ldr	r3, [pc, #68]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	f023 0207 	bic.w	r2, r3, #7
 8009d86:	490f      	ldr	r1, [pc, #60]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009d8e:	f7fa fb71 	bl	8004474 <HAL_GetTick>
 8009d92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d94:	e009      	b.n	8009daa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009d96:	f7fa fb6d 	bl	8004474 <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009da4:	d901      	bls.n	8009daa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e007      	b.n	8009dba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009daa:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009db6:	d1ee      	bne.n	8009d96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	58024800 	.word	0x58024800

08009dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08c      	sub	sp, #48	; 0x30
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	f000 bc1d 	b.w	800a616 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 8087 	beq.w	8009ef8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dea:	4b99      	ldr	r3, [pc, #612]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009df4:	4b96      	ldr	r3, [pc, #600]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	2b10      	cmp	r3, #16
 8009dfe:	d007      	beq.n	8009e10 <HAL_RCC_OscConfig+0x48>
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b18      	cmp	r3, #24
 8009e04:	d110      	bne.n	8009e28 <HAL_RCC_OscConfig+0x60>
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	f003 0303 	and.w	r3, r3, #3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d10b      	bne.n	8009e28 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e10:	4b8f      	ldr	r3, [pc, #572]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d06c      	beq.n	8009ef6 <HAL_RCC_OscConfig+0x12e>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d168      	bne.n	8009ef6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e3f6      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e30:	d106      	bne.n	8009e40 <HAL_RCC_OscConfig+0x78>
 8009e32:	4b87      	ldr	r3, [pc, #540]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a86      	ldr	r2, [pc, #536]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	e02e      	b.n	8009e9e <HAL_RCC_OscConfig+0xd6>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10c      	bne.n	8009e62 <HAL_RCC_OscConfig+0x9a>
 8009e48:	4b81      	ldr	r3, [pc, #516]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a80      	ldr	r2, [pc, #512]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	4b7e      	ldr	r3, [pc, #504]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a7d      	ldr	r2, [pc, #500]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	e01d      	b.n	8009e9e <HAL_RCC_OscConfig+0xd6>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e6a:	d10c      	bne.n	8009e86 <HAL_RCC_OscConfig+0xbe>
 8009e6c:	4b78      	ldr	r3, [pc, #480]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a77      	ldr	r2, [pc, #476]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	4b75      	ldr	r3, [pc, #468]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a74      	ldr	r2, [pc, #464]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	e00b      	b.n	8009e9e <HAL_RCC_OscConfig+0xd6>
 8009e86:	4b72      	ldr	r3, [pc, #456]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a71      	ldr	r2, [pc, #452]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	4b6f      	ldr	r3, [pc, #444]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a6e      	ldr	r2, [pc, #440]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d013      	beq.n	8009ece <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ea6:	f7fa fae5 	bl	8004474 <HAL_GetTick>
 8009eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009eac:	e008      	b.n	8009ec0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009eae:	f7fa fae1 	bl	8004474 <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	2b64      	cmp	r3, #100	; 0x64
 8009eba:	d901      	bls.n	8009ec0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e3aa      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ec0:	4b63      	ldr	r3, [pc, #396]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0f0      	beq.n	8009eae <HAL_RCC_OscConfig+0xe6>
 8009ecc:	e014      	b.n	8009ef8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ece:	f7fa fad1 	bl	8004474 <HAL_GetTick>
 8009ed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ed4:	e008      	b.n	8009ee8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ed6:	f7fa facd 	bl	8004474 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	2b64      	cmp	r3, #100	; 0x64
 8009ee2:	d901      	bls.n	8009ee8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e396      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ee8:	4b59      	ldr	r3, [pc, #356]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1f0      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x10e>
 8009ef4:	e000      	b.n	8009ef8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ef6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0302 	and.w	r3, r3, #2
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 80cb 	beq.w	800a09c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f06:	4b52      	ldr	r3, [pc, #328]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f0e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f10:	4b4f      	ldr	r3, [pc, #316]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f14:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d007      	beq.n	8009f2c <HAL_RCC_OscConfig+0x164>
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b18      	cmp	r3, #24
 8009f20:	d156      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x208>
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	f003 0303 	and.w	r3, r3, #3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d151      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f2c:	4b48      	ldr	r3, [pc, #288]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d005      	beq.n	8009f44 <HAL_RCC_OscConfig+0x17c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e368      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f44:	4b42      	ldr	r3, [pc, #264]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f023 0219 	bic.w	r2, r3, #25
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	493f      	ldr	r1, [pc, #252]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f56:	f7fa fa8d 	bl	8004474 <HAL_GetTick>
 8009f5a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f5c:	e008      	b.n	8009f70 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f5e:	f7fa fa89 	bl	8004474 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d901      	bls.n	8009f70 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e352      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f70:	4b37      	ldr	r3, [pc, #220]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d0f0      	beq.n	8009f5e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f7c:	f7fa faaa 	bl	80044d4 <HAL_GetREVID>
 8009f80:	4603      	mov	r3, r0
 8009f82:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d817      	bhi.n	8009fba <HAL_RCC_OscConfig+0x1f2>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	2b40      	cmp	r3, #64	; 0x40
 8009f90:	d108      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x1dc>
 8009f92:	4b2f      	ldr	r3, [pc, #188]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009f9a:	4a2d      	ldr	r2, [pc, #180]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fa2:	e07b      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fa4:	4b2a      	ldr	r3, [pc, #168]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	031b      	lsls	r3, r3, #12
 8009fb2:	4927      	ldr	r1, [pc, #156]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fb8:	e070      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fba:	4b25      	ldr	r3, [pc, #148]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	061b      	lsls	r3, r3, #24
 8009fc8:	4921      	ldr	r1, [pc, #132]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fce:	e065      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d048      	beq.n	800a06a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009fd8:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f023 0219 	bic.w	r2, r3, #25
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	491a      	ldr	r1, [pc, #104]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fea:	f7fa fa43 	bl	8004474 <HAL_GetTick>
 8009fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ff0:	e008      	b.n	800a004 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ff2:	f7fa fa3f 	bl	8004474 <HAL_GetTick>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d901      	bls.n	800a004 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a000:	2303      	movs	r3, #3
 800a002:	e308      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a004:	4b12      	ldr	r3, [pc, #72]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0304 	and.w	r3, r3, #4
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0f0      	beq.n	8009ff2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a010:	f7fa fa60 	bl	80044d4 <HAL_GetREVID>
 800a014:	4603      	mov	r3, r0
 800a016:	f241 0203 	movw	r2, #4099	; 0x1003
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d81a      	bhi.n	800a054 <HAL_RCC_OscConfig+0x28c>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b40      	cmp	r3, #64	; 0x40
 800a024:	d108      	bne.n	800a038 <HAL_RCC_OscConfig+0x270>
 800a026:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a02e:	4a08      	ldr	r2, [pc, #32]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a034:	6053      	str	r3, [r2, #4]
 800a036:	e031      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
 800a038:	4b05      	ldr	r3, [pc, #20]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	031b      	lsls	r3, r3, #12
 800a046:	4902      	ldr	r1, [pc, #8]	; (800a050 <HAL_RCC_OscConfig+0x288>)
 800a048:	4313      	orrs	r3, r2
 800a04a:	604b      	str	r3, [r1, #4]
 800a04c:	e026      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
 800a04e:	bf00      	nop
 800a050:	58024400 	.word	0x58024400
 800a054:	4b9a      	ldr	r3, [pc, #616]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	061b      	lsls	r3, r3, #24
 800a062:	4997      	ldr	r1, [pc, #604]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a064:	4313      	orrs	r3, r2
 800a066:	604b      	str	r3, [r1, #4]
 800a068:	e018      	b.n	800a09c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a06a:	4b95      	ldr	r3, [pc, #596]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a94      	ldr	r2, [pc, #592]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a070:	f023 0301 	bic.w	r3, r3, #1
 800a074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a076:	f7fa f9fd 	bl	8004474 <HAL_GetTick>
 800a07a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a07c:	e008      	b.n	800a090 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a07e:	f7fa f9f9 	bl	8004474 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d901      	bls.n	800a090 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e2c2      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a090:	4b8b      	ldr	r3, [pc, #556]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1f0      	bne.n	800a07e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0310 	and.w	r3, r3, #16
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 80a9 	beq.w	800a1fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0aa:	4b85      	ldr	r3, [pc, #532]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0b4:	4b82      	ldr	r3, [pc, #520]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d007      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x308>
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	2b18      	cmp	r3, #24
 800a0c4:	d13a      	bne.n	800a13c <HAL_RCC_OscConfig+0x374>
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d135      	bne.n	800a13c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0d0:	4b7b      	ldr	r3, [pc, #492]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x320>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	69db      	ldr	r3, [r3, #28]
 800a0e0:	2b80      	cmp	r3, #128	; 0x80
 800a0e2:	d001      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e296      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0e8:	f7fa f9f4 	bl	80044d4 <HAL_GetREVID>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d817      	bhi.n	800a126 <HAL_RCC_OscConfig+0x35e>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	2b20      	cmp	r3, #32
 800a0fc:	d108      	bne.n	800a110 <HAL_RCC_OscConfig+0x348>
 800a0fe:	4b70      	ldr	r3, [pc, #448]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a106:	4a6e      	ldr	r2, [pc, #440]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a10c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a10e:	e075      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a110:	4b6b      	ldr	r3, [pc, #428]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	069b      	lsls	r3, r3, #26
 800a11e:	4968      	ldr	r1, [pc, #416]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a120:	4313      	orrs	r3, r2
 800a122:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a124:	e06a      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a126:	4b66      	ldr	r3, [pc, #408]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	061b      	lsls	r3, r3, #24
 800a134:	4962      	ldr	r1, [pc, #392]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a136:	4313      	orrs	r3, r2
 800a138:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a13a:	e05f      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d042      	beq.n	800a1ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a144:	4b5e      	ldr	r3, [pc, #376]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a5d      	ldr	r2, [pc, #372]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a14e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a150:	f7fa f990 	bl	8004474 <HAL_GetTick>
 800a154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a156:	e008      	b.n	800a16a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a158:	f7fa f98c 	bl	8004474 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b02      	cmp	r3, #2
 800a164:	d901      	bls.n	800a16a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e255      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a16a:	4b55      	ldr	r3, [pc, #340]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0f0      	beq.n	800a158 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a176:	f7fa f9ad 	bl	80044d4 <HAL_GetREVID>
 800a17a:	4603      	mov	r3, r0
 800a17c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a180:	4293      	cmp	r3, r2
 800a182:	d817      	bhi.n	800a1b4 <HAL_RCC_OscConfig+0x3ec>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d108      	bne.n	800a19e <HAL_RCC_OscConfig+0x3d6>
 800a18c:	4b4c      	ldr	r3, [pc, #304]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a194:	4a4a      	ldr	r2, [pc, #296]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a19a:	6053      	str	r3, [r2, #4]
 800a19c:	e02e      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
 800a19e:	4b48      	ldr	r3, [pc, #288]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	069b      	lsls	r3, r3, #26
 800a1ac:	4944      	ldr	r1, [pc, #272]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	604b      	str	r3, [r1, #4]
 800a1b2:	e023      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
 800a1b4:	4b42      	ldr	r3, [pc, #264]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	061b      	lsls	r3, r3, #24
 800a1c2:	493f      	ldr	r1, [pc, #252]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	60cb      	str	r3, [r1, #12]
 800a1c8:	e018      	b.n	800a1fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1ca:	4b3d      	ldr	r3, [pc, #244]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a3c      	ldr	r2, [pc, #240]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d6:	f7fa f94d 	bl	8004474 <HAL_GetTick>
 800a1da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1dc:	e008      	b.n	800a1f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a1de:	f7fa f949 	bl	8004474 <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d901      	bls.n	800a1f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e212      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1f0:	4b33      	ldr	r3, [pc, #204]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f0      	bne.n	800a1de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0308 	and.w	r3, r3, #8
 800a204:	2b00      	cmp	r3, #0
 800a206:	d036      	beq.n	800a276 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d019      	beq.n	800a244 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a210:	4b2b      	ldr	r3, [pc, #172]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a214:	4a2a      	ldr	r2, [pc, #168]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a216:	f043 0301 	orr.w	r3, r3, #1
 800a21a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a21c:	f7fa f92a 	bl	8004474 <HAL_GetTick>
 800a220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a222:	e008      	b.n	800a236 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a224:	f7fa f926 	bl	8004474 <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d901      	bls.n	800a236 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e1ef      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a236:	4b22      	ldr	r3, [pc, #136]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0f0      	beq.n	800a224 <HAL_RCC_OscConfig+0x45c>
 800a242:	e018      	b.n	800a276 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a244:	4b1e      	ldr	r3, [pc, #120]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a248:	4a1d      	ldr	r2, [pc, #116]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a24a:	f023 0301 	bic.w	r3, r3, #1
 800a24e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a250:	f7fa f910 	bl	8004474 <HAL_GetTick>
 800a254:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a256:	e008      	b.n	800a26a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a258:	f7fa f90c 	bl	8004474 <HAL_GetTick>
 800a25c:	4602      	mov	r2, r0
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	2b02      	cmp	r3, #2
 800a264:	d901      	bls.n	800a26a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e1d5      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a26a:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f0      	bne.n	800a258 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d039      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d01c      	beq.n	800a2c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a28a:	4b0d      	ldr	r3, [pc, #52]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a0c      	ldr	r2, [pc, #48]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a294:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a296:	f7fa f8ed 	bl	8004474 <HAL_GetTick>
 800a29a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a29c:	e008      	b.n	800a2b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a29e:	f7fa f8e9 	bl	8004474 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d901      	bls.n	800a2b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e1b2      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2b0:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <HAL_RCC_OscConfig+0x4f8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d0f0      	beq.n	800a29e <HAL_RCC_OscConfig+0x4d6>
 800a2bc:	e01b      	b.n	800a2f6 <HAL_RCC_OscConfig+0x52e>
 800a2be:	bf00      	nop
 800a2c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2c4:	4b9b      	ldr	r3, [pc, #620]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a9a      	ldr	r2, [pc, #616]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a2ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2d0:	f7fa f8d0 	bl	8004474 <HAL_GetTick>
 800a2d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2d6:	e008      	b.n	800a2ea <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a2d8:	f7fa f8cc 	bl	8004474 <HAL_GetTick>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d901      	bls.n	800a2ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e195      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2ea:	4b92      	ldr	r3, [pc, #584]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1f0      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 8081 	beq.w	800a406 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a304:	4b8c      	ldr	r3, [pc, #560]	; (800a538 <HAL_RCC_OscConfig+0x770>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a8b      	ldr	r2, [pc, #556]	; (800a538 <HAL_RCC_OscConfig+0x770>)
 800a30a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a30e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a310:	f7fa f8b0 	bl	8004474 <HAL_GetTick>
 800a314:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a316:	e008      	b.n	800a32a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a318:	f7fa f8ac 	bl	8004474 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b64      	cmp	r3, #100	; 0x64
 800a324:	d901      	bls.n	800a32a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e175      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a32a:	4b83      	ldr	r3, [pc, #524]	; (800a538 <HAL_RCC_OscConfig+0x770>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0f0      	beq.n	800a318 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d106      	bne.n	800a34c <HAL_RCC_OscConfig+0x584>
 800a33e:	4b7d      	ldr	r3, [pc, #500]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a342:	4a7c      	ldr	r2, [pc, #496]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a344:	f043 0301 	orr.w	r3, r3, #1
 800a348:	6713      	str	r3, [r2, #112]	; 0x70
 800a34a:	e02d      	b.n	800a3a8 <HAL_RCC_OscConfig+0x5e0>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10c      	bne.n	800a36e <HAL_RCC_OscConfig+0x5a6>
 800a354:	4b77      	ldr	r3, [pc, #476]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a358:	4a76      	ldr	r2, [pc, #472]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a35a:	f023 0301 	bic.w	r3, r3, #1
 800a35e:	6713      	str	r3, [r2, #112]	; 0x70
 800a360:	4b74      	ldr	r3, [pc, #464]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a364:	4a73      	ldr	r2, [pc, #460]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a366:	f023 0304 	bic.w	r3, r3, #4
 800a36a:	6713      	str	r3, [r2, #112]	; 0x70
 800a36c:	e01c      	b.n	800a3a8 <HAL_RCC_OscConfig+0x5e0>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	2b05      	cmp	r3, #5
 800a374:	d10c      	bne.n	800a390 <HAL_RCC_OscConfig+0x5c8>
 800a376:	4b6f      	ldr	r3, [pc, #444]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37a:	4a6e      	ldr	r2, [pc, #440]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a37c:	f043 0304 	orr.w	r3, r3, #4
 800a380:	6713      	str	r3, [r2, #112]	; 0x70
 800a382:	4b6c      	ldr	r3, [pc, #432]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a386:	4a6b      	ldr	r2, [pc, #428]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a388:	f043 0301 	orr.w	r3, r3, #1
 800a38c:	6713      	str	r3, [r2, #112]	; 0x70
 800a38e:	e00b      	b.n	800a3a8 <HAL_RCC_OscConfig+0x5e0>
 800a390:	4b68      	ldr	r3, [pc, #416]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a394:	4a67      	ldr	r2, [pc, #412]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a396:	f023 0301 	bic.w	r3, r3, #1
 800a39a:	6713      	str	r3, [r2, #112]	; 0x70
 800a39c:	4b65      	ldr	r3, [pc, #404]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a0:	4a64      	ldr	r2, [pc, #400]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a3a2:	f023 0304 	bic.w	r3, r3, #4
 800a3a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d015      	beq.n	800a3dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3b0:	f7fa f860 	bl	8004474 <HAL_GetTick>
 800a3b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3b6:	e00a      	b.n	800a3ce <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3b8:	f7fa f85c 	bl	8004474 <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d901      	bls.n	800a3ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e123      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3ce:	4b59      	ldr	r3, [pc, #356]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0ee      	beq.n	800a3b8 <HAL_RCC_OscConfig+0x5f0>
 800a3da:	e014      	b.n	800a406 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3dc:	f7fa f84a 	bl	8004474 <HAL_GetTick>
 800a3e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3e2:	e00a      	b.n	800a3fa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3e4:	f7fa f846 	bl	8004474 <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d901      	bls.n	800a3fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e10d      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3fa:	4b4e      	ldr	r3, [pc, #312]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1ee      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 8102 	beq.w	800a614 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a410:	4b48      	ldr	r3, [pc, #288]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a418:	2b18      	cmp	r3, #24
 800a41a:	f000 80bd 	beq.w	800a598 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2b02      	cmp	r3, #2
 800a424:	f040 809e 	bne.w	800a564 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a428:	4b42      	ldr	r3, [pc, #264]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a41      	ldr	r2, [pc, #260]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a42e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a434:	f7fa f81e 	bl	8004474 <HAL_GetTick>
 800a438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a43a:	e008      	b.n	800a44e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a43c:	f7fa f81a 	bl	8004474 <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	2b02      	cmp	r3, #2
 800a448:	d901      	bls.n	800a44e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e0e3      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a44e:	4b39      	ldr	r3, [pc, #228]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1f0      	bne.n	800a43c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a45a:	4b36      	ldr	r3, [pc, #216]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a45c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a45e:	4b37      	ldr	r3, [pc, #220]	; (800a53c <HAL_RCC_OscConfig+0x774>)
 800a460:	4013      	ands	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a46a:	0112      	lsls	r2, r2, #4
 800a46c:	430a      	orrs	r2, r1
 800a46e:	4931      	ldr	r1, [pc, #196]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a470:	4313      	orrs	r3, r2
 800a472:	628b      	str	r3, [r1, #40]	; 0x28
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	3b01      	subs	r3, #1
 800a47a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a482:	3b01      	subs	r3, #1
 800a484:	025b      	lsls	r3, r3, #9
 800a486:	b29b      	uxth	r3, r3
 800a488:	431a      	orrs	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48e:	3b01      	subs	r3, #1
 800a490:	041b      	lsls	r3, r3, #16
 800a492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49c:	3b01      	subs	r3, #1
 800a49e:	061b      	lsls	r3, r3, #24
 800a4a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4a4:	4923      	ldr	r1, [pc, #140]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a4aa:	4b22      	ldr	r3, [pc, #136]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ae:	4a21      	ldr	r2, [pc, #132]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4b0:	f023 0301 	bic.w	r3, r3, #1
 800a4b4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4b6:	4b1f      	ldr	r3, [pc, #124]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ba:	4b21      	ldr	r3, [pc, #132]	; (800a540 <HAL_RCC_OscConfig+0x778>)
 800a4bc:	4013      	ands	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4c2:	00d2      	lsls	r2, r2, #3
 800a4c4:	491b      	ldr	r1, [pc, #108]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4ca:	4b1a      	ldr	r3, [pc, #104]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	f023 020c 	bic.w	r2, r3, #12
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	4917      	ldr	r1, [pc, #92]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a4dc:	4b15      	ldr	r3, [pc, #84]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	f023 0202 	bic.w	r2, r3, #2
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e8:	4912      	ldr	r1, [pc, #72]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a4ee:	4b11      	ldr	r3, [pc, #68]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	4a10      	ldr	r2, [pc, #64]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fa:	4b0e      	ldr	r3, [pc, #56]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	4a0d      	ldr	r2, [pc, #52]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a504:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	4a0a      	ldr	r2, [pc, #40]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a50c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a510:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a512:	4b08      	ldr	r3, [pc, #32]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a516:	4a07      	ldr	r2, [pc, #28]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a518:	f043 0301 	orr.w	r3, r3, #1
 800a51c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a04      	ldr	r2, [pc, #16]	; (800a534 <HAL_RCC_OscConfig+0x76c>)
 800a524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a52a:	f7f9 ffa3 	bl	8004474 <HAL_GetTick>
 800a52e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a530:	e011      	b.n	800a556 <HAL_RCC_OscConfig+0x78e>
 800a532:	bf00      	nop
 800a534:	58024400 	.word	0x58024400
 800a538:	58024800 	.word	0x58024800
 800a53c:	fffffc0c 	.word	0xfffffc0c
 800a540:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a544:	f7f9 ff96 	bl	8004474 <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d901      	bls.n	800a556 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	e05f      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a556:	4b32      	ldr	r3, [pc, #200]	; (800a620 <HAL_RCC_OscConfig+0x858>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0f0      	beq.n	800a544 <HAL_RCC_OscConfig+0x77c>
 800a562:	e057      	b.n	800a614 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a564:	4b2e      	ldr	r3, [pc, #184]	; (800a620 <HAL_RCC_OscConfig+0x858>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a2d      	ldr	r2, [pc, #180]	; (800a620 <HAL_RCC_OscConfig+0x858>)
 800a56a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a56e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a570:	f7f9 ff80 	bl	8004474 <HAL_GetTick>
 800a574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a576:	e008      	b.n	800a58a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a578:	f7f9 ff7c 	bl	8004474 <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	2b02      	cmp	r3, #2
 800a584:	d901      	bls.n	800a58a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a586:	2303      	movs	r3, #3
 800a588:	e045      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a58a:	4b25      	ldr	r3, [pc, #148]	; (800a620 <HAL_RCC_OscConfig+0x858>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1f0      	bne.n	800a578 <HAL_RCC_OscConfig+0x7b0>
 800a596:	e03d      	b.n	800a614 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a598:	4b21      	ldr	r3, [pc, #132]	; (800a620 <HAL_RCC_OscConfig+0x858>)
 800a59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a59e:	4b20      	ldr	r3, [pc, #128]	; (800a620 <HAL_RCC_OscConfig+0x858>)
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d031      	beq.n	800a610 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f003 0203 	and.w	r2, r3, #3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d12a      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	091b      	lsrs	r3, r3, #4
 800a5be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d122      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d11a      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	0a5b      	lsrs	r3, r3, #9
 800a5de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d111      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d108      	bne.n	800a610 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	0e1b      	lsrs	r3, r3, #24
 800a602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d001      	beq.n	800a614 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e000      	b.n	800a616 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3730      	adds	r7, #48	; 0x30
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	58024400 	.word	0x58024400

0800a624 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e19c      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a638:	4b8a      	ldr	r3, [pc, #552]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d910      	bls.n	800a668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a646:	4b87      	ldr	r3, [pc, #540]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f023 020f 	bic.w	r2, r3, #15
 800a64e:	4985      	ldr	r1, [pc, #532]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	4313      	orrs	r3, r2
 800a654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a656:	4b83      	ldr	r3, [pc, #524]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 030f 	and.w	r3, r3, #15
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d001      	beq.n	800a668 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e184      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b00      	cmp	r3, #0
 800a672:	d010      	beq.n	800a696 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	4b7b      	ldr	r3, [pc, #492]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a67a:	699b      	ldr	r3, [r3, #24]
 800a67c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a680:	429a      	cmp	r2, r3
 800a682:	d908      	bls.n	800a696 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a684:	4b78      	ldr	r3, [pc, #480]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	4975      	ldr	r1, [pc, #468]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a692:	4313      	orrs	r3, r2
 800a694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0308 	and.w	r3, r3, #8
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d010      	beq.n	800a6c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	695a      	ldr	r2, [r3, #20]
 800a6a6:	4b70      	ldr	r3, [pc, #448]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d908      	bls.n	800a6c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a6b2:	4b6d      	ldr	r3, [pc, #436]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	496a      	ldr	r1, [pc, #424]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0310 	and.w	r3, r3, #16
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d010      	beq.n	800a6f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	699a      	ldr	r2, [r3, #24]
 800a6d4:	4b64      	ldr	r3, [pc, #400]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6d6:	69db      	ldr	r3, [r3, #28]
 800a6d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d908      	bls.n	800a6f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a6e0:	4b61      	ldr	r3, [pc, #388]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6e2:	69db      	ldr	r3, [r3, #28]
 800a6e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	495e      	ldr	r1, [pc, #376]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0320 	and.w	r3, r3, #32
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d010      	beq.n	800a720 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	69da      	ldr	r2, [r3, #28]
 800a702:	4b59      	ldr	r3, [pc, #356]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d908      	bls.n	800a720 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a70e:	4b56      	ldr	r3, [pc, #344]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	4953      	ldr	r1, [pc, #332]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a71c:	4313      	orrs	r3, r2
 800a71e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0302 	and.w	r3, r3, #2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d010      	beq.n	800a74e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	4b4d      	ldr	r3, [pc, #308]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	f003 030f 	and.w	r3, r3, #15
 800a738:	429a      	cmp	r2, r3
 800a73a:	d908      	bls.n	800a74e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a73c:	4b4a      	ldr	r3, [pc, #296]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	f023 020f 	bic.w	r2, r3, #15
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	4947      	ldr	r1, [pc, #284]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	2b00      	cmp	r3, #0
 800a758:	d055      	beq.n	800a806 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a75a:	4b43      	ldr	r3, [pc, #268]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	4940      	ldr	r1, [pc, #256]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	2b02      	cmp	r3, #2
 800a772:	d107      	bne.n	800a784 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a774:	4b3c      	ldr	r3, [pc, #240]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d121      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e0f6      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d107      	bne.n	800a79c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a78c:	4b36      	ldr	r3, [pc, #216]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d115      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e0ea      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d107      	bne.n	800a7b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7a4:	4b30      	ldr	r3, [pc, #192]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d109      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e0de      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7b4:	4b2c      	ldr	r3, [pc, #176]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e0d6      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a7c4:	4b28      	ldr	r3, [pc, #160]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	f023 0207 	bic.w	r2, r3, #7
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	4925      	ldr	r1, [pc, #148]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7d6:	f7f9 fe4d 	bl	8004474 <HAL_GetTick>
 800a7da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7dc:	e00a      	b.n	800a7f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7de:	f7f9 fe49 	bl	8004474 <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d901      	bls.n	800a7f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e0be      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7f4:	4b1c      	ldr	r3, [pc, #112]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	429a      	cmp	r2, r3
 800a804:	d1eb      	bne.n	800a7de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d010      	beq.n	800a834 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	4b14      	ldr	r3, [pc, #80]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	f003 030f 	and.w	r3, r3, #15
 800a81e:	429a      	cmp	r2, r3
 800a820:	d208      	bcs.n	800a834 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a822:	4b11      	ldr	r3, [pc, #68]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	f023 020f 	bic.w	r2, r3, #15
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	490e      	ldr	r1, [pc, #56]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a830:	4313      	orrs	r3, r2
 800a832:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a834:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 030f 	and.w	r3, r3, #15
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d214      	bcs.n	800a86c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a842:	4b08      	ldr	r3, [pc, #32]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f023 020f 	bic.w	r2, r3, #15
 800a84a:	4906      	ldr	r1, [pc, #24]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	4313      	orrs	r3, r2
 800a850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a852:	4b04      	ldr	r3, [pc, #16]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 030f 	and.w	r3, r3, #15
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d005      	beq.n	800a86c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e086      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
 800a864:	52002000 	.word	0x52002000
 800a868:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d010      	beq.n	800a89a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691a      	ldr	r2, [r3, #16]
 800a87c:	4b3f      	ldr	r3, [pc, #252]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a884:	429a      	cmp	r2, r3
 800a886:	d208      	bcs.n	800a89a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a888:	4b3c      	ldr	r3, [pc, #240]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	4939      	ldr	r1, [pc, #228]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a896:	4313      	orrs	r3, r2
 800a898:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 0308 	and.w	r3, r3, #8
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d010      	beq.n	800a8c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	695a      	ldr	r2, [r3, #20]
 800a8aa:	4b34      	ldr	r3, [pc, #208]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d208      	bcs.n	800a8c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8b6:	4b31      	ldr	r3, [pc, #196]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	492e      	ldr	r1, [pc, #184]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0310 	and.w	r3, r3, #16
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d010      	beq.n	800a8f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	699a      	ldr	r2, [r3, #24]
 800a8d8:	4b28      	ldr	r3, [pc, #160]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d208      	bcs.n	800a8f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a8e4:	4b25      	ldr	r3, [pc, #148]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	4922      	ldr	r1, [pc, #136]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d010      	beq.n	800a924 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	69da      	ldr	r2, [r3, #28]
 800a906:	4b1d      	ldr	r3, [pc, #116]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a90e:	429a      	cmp	r2, r3
 800a910:	d208      	bcs.n	800a924 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a912:	4b1a      	ldr	r3, [pc, #104]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	4917      	ldr	r1, [pc, #92]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a920:	4313      	orrs	r3, r2
 800a922:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a924:	f000 f834 	bl	800a990 <HAL_RCC_GetSysClockFreq>
 800a928:	4602      	mov	r2, r0
 800a92a:	4b14      	ldr	r3, [pc, #80]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	0a1b      	lsrs	r3, r3, #8
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	4912      	ldr	r1, [pc, #72]	; (800a980 <HAL_RCC_ClockConfig+0x35c>)
 800a936:	5ccb      	ldrb	r3, [r1, r3]
 800a938:	f003 031f 	and.w	r3, r3, #31
 800a93c:	fa22 f303 	lsr.w	r3, r2, r3
 800a940:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a942:	4b0e      	ldr	r3, [pc, #56]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	f003 030f 	and.w	r3, r3, #15
 800a94a:	4a0d      	ldr	r2, [pc, #52]	; (800a980 <HAL_RCC_ClockConfig+0x35c>)
 800a94c:	5cd3      	ldrb	r3, [r2, r3]
 800a94e:	f003 031f 	and.w	r3, r3, #31
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	fa22 f303 	lsr.w	r3, r2, r3
 800a958:	4a0a      	ldr	r2, [pc, #40]	; (800a984 <HAL_RCC_ClockConfig+0x360>)
 800a95a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a95c:	4a0a      	ldr	r2, [pc, #40]	; (800a988 <HAL_RCC_ClockConfig+0x364>)
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a962:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <HAL_RCC_ClockConfig+0x368>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4618      	mov	r0, r3
 800a968:	f7f9 fd3a 	bl	80043e0 <HAL_InitTick>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	58024400 	.word	0x58024400
 800a980:	08011d0c 	.word	0x08011d0c
 800a984:	2400001c 	.word	0x2400001c
 800a988:	24000018 	.word	0x24000018
 800a98c:	24000020 	.word	0x24000020

0800a990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a990:	b480      	push	{r7}
 800a992:	b089      	sub	sp, #36	; 0x24
 800a994:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a996:	4bb3      	ldr	r3, [pc, #716]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a99e:	2b18      	cmp	r3, #24
 800a9a0:	f200 8155 	bhi.w	800ac4e <HAL_RCC_GetSysClockFreq+0x2be>
 800a9a4:	a201      	add	r2, pc, #4	; (adr r2, 800a9ac <HAL_RCC_GetSysClockFreq+0x1c>)
 800a9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9aa:	bf00      	nop
 800a9ac:	0800aa11 	.word	0x0800aa11
 800a9b0:	0800ac4f 	.word	0x0800ac4f
 800a9b4:	0800ac4f 	.word	0x0800ac4f
 800a9b8:	0800ac4f 	.word	0x0800ac4f
 800a9bc:	0800ac4f 	.word	0x0800ac4f
 800a9c0:	0800ac4f 	.word	0x0800ac4f
 800a9c4:	0800ac4f 	.word	0x0800ac4f
 800a9c8:	0800ac4f 	.word	0x0800ac4f
 800a9cc:	0800aa37 	.word	0x0800aa37
 800a9d0:	0800ac4f 	.word	0x0800ac4f
 800a9d4:	0800ac4f 	.word	0x0800ac4f
 800a9d8:	0800ac4f 	.word	0x0800ac4f
 800a9dc:	0800ac4f 	.word	0x0800ac4f
 800a9e0:	0800ac4f 	.word	0x0800ac4f
 800a9e4:	0800ac4f 	.word	0x0800ac4f
 800a9e8:	0800ac4f 	.word	0x0800ac4f
 800a9ec:	0800aa3d 	.word	0x0800aa3d
 800a9f0:	0800ac4f 	.word	0x0800ac4f
 800a9f4:	0800ac4f 	.word	0x0800ac4f
 800a9f8:	0800ac4f 	.word	0x0800ac4f
 800a9fc:	0800ac4f 	.word	0x0800ac4f
 800aa00:	0800ac4f 	.word	0x0800ac4f
 800aa04:	0800ac4f 	.word	0x0800ac4f
 800aa08:	0800ac4f 	.word	0x0800ac4f
 800aa0c:	0800aa43 	.word	0x0800aa43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa10:	4b94      	ldr	r3, [pc, #592]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0320 	and.w	r3, r3, #32
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d009      	beq.n	800aa30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa1c:	4b91      	ldr	r3, [pc, #580]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	08db      	lsrs	r3, r3, #3
 800aa22:	f003 0303 	and.w	r3, r3, #3
 800aa26:	4a90      	ldr	r2, [pc, #576]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa28:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800aa2e:	e111      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa30:	4b8d      	ldr	r3, [pc, #564]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa32:	61bb      	str	r3, [r7, #24]
    break;
 800aa34:	e10e      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800aa36:	4b8d      	ldr	r3, [pc, #564]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa38:	61bb      	str	r3, [r7, #24]
    break;
 800aa3a:	e10b      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800aa3c:	4b8c      	ldr	r3, [pc, #560]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aa3e:	61bb      	str	r3, [r7, #24]
    break;
 800aa40:	e108      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa42:	4b88      	ldr	r3, [pc, #544]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa46:	f003 0303 	and.w	r3, r3, #3
 800aa4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800aa4c:	4b85      	ldr	r3, [pc, #532]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	091b      	lsrs	r3, r3, #4
 800aa52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aa58:	4b82      	ldr	r3, [pc, #520]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aa62:	4b80      	ldr	r3, [pc, #512]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa66:	08db      	lsrs	r3, r3, #3
 800aa68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	fb02 f303 	mul.w	r3, r2, r3
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 80e1 	beq.w	800ac48 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	f000 8083 	beq.w	800ab94 <HAL_RCC_GetSysClockFreq+0x204>
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	f200 80a1 	bhi.w	800abd8 <HAL_RCC_GetSysClockFreq+0x248>
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <HAL_RCC_GetSysClockFreq+0x114>
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d056      	beq.n	800ab50 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aaa2:	e099      	b.n	800abd8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaa4:	4b6f      	ldr	r3, [pc, #444]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 0320 	and.w	r3, r3, #32
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d02d      	beq.n	800ab0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aab0:	4b6c      	ldr	r3, [pc, #432]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	08db      	lsrs	r3, r3, #3
 800aab6:	f003 0303 	and.w	r3, r3, #3
 800aaba:	4a6b      	ldr	r2, [pc, #428]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aabc:	fa22 f303 	lsr.w	r3, r2, r3
 800aac0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	ee07 3a90 	vmov	s15, r3
 800aac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aada:	4b62      	ldr	r3, [pc, #392]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaea:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaee:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aaf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ab0a:	e087      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ac78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1e:	4b51      	ldr	r3, [pc, #324]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab32:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab4e:	e065      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab62:	4b40      	ldr	r3, [pc, #256]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab72:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab92:	e043      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ac80 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba6:	4b2f      	ldr	r3, [pc, #188]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800abba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abd6:	e021      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800abe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abea:	4b1e      	ldr	r3, [pc, #120]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfa:	ed97 6a02 	vldr	s12, [r7, #8]
 800abfe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac1a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ac1c:	4b11      	ldr	r3, [pc, #68]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac20:	0a5b      	lsrs	r3, r3, #9
 800ac22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac26:	3301      	adds	r3, #1
 800ac28:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	ee07 3a90 	vmov	s15, r3
 800ac30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac40:	ee17 3a90 	vmov	r3, s15
 800ac44:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ac46:	e005      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	61bb      	str	r3, [r7, #24]
    break;
 800ac4c:	e002      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ac4e:	4b07      	ldr	r3, [pc, #28]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac50:	61bb      	str	r3, [r7, #24]
    break;
 800ac52:	bf00      	nop
  }

  return sysclockfreq;
 800ac54:	69bb      	ldr	r3, [r7, #24]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3724      	adds	r7, #36	; 0x24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	58024400 	.word	0x58024400
 800ac68:	03d09000 	.word	0x03d09000
 800ac6c:	003d0900 	.word	0x003d0900
 800ac70:	02625a00 	.word	0x02625a00
 800ac74:	46000000 	.word	0x46000000
 800ac78:	4c742400 	.word	0x4c742400
 800ac7c:	4a742400 	.word	0x4a742400
 800ac80:	4c189680 	.word	0x4c189680

0800ac84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac8a:	f7ff fe81 	bl	800a990 <HAL_RCC_GetSysClockFreq>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4b10      	ldr	r3, [pc, #64]	; (800acd4 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	0a1b      	lsrs	r3, r3, #8
 800ac96:	f003 030f 	and.w	r3, r3, #15
 800ac9a:	490f      	ldr	r1, [pc, #60]	; (800acd8 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac9c:	5ccb      	ldrb	r3, [r1, r3]
 800ac9e:	f003 031f 	and.w	r3, r3, #31
 800aca2:	fa22 f303 	lsr.w	r3, r2, r3
 800aca6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aca8:	4b0a      	ldr	r3, [pc, #40]	; (800acd4 <HAL_RCC_GetHCLKFreq+0x50>)
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	f003 030f 	and.w	r3, r3, #15
 800acb0:	4a09      	ldr	r2, [pc, #36]	; (800acd8 <HAL_RCC_GetHCLKFreq+0x54>)
 800acb2:	5cd3      	ldrb	r3, [r2, r3]
 800acb4:	f003 031f 	and.w	r3, r3, #31
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	fa22 f303 	lsr.w	r3, r2, r3
 800acbe:	4a07      	ldr	r2, [pc, #28]	; (800acdc <HAL_RCC_GetHCLKFreq+0x58>)
 800acc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800acc2:	4a07      	ldr	r2, [pc, #28]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800acc8:	4b04      	ldr	r3, [pc, #16]	; (800acdc <HAL_RCC_GetHCLKFreq+0x58>)
 800acca:	681b      	ldr	r3, [r3, #0]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	58024400 	.word	0x58024400
 800acd8:	08011d0c 	.word	0x08011d0c
 800acdc:	2400001c 	.word	0x2400001c
 800ace0:	24000018 	.word	0x24000018

0800ace4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ace8:	f7ff ffcc 	bl	800ac84 <HAL_RCC_GetHCLKFreq>
 800acec:	4602      	mov	r2, r0
 800acee:	4b06      	ldr	r3, [pc, #24]	; (800ad08 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	091b      	lsrs	r3, r3, #4
 800acf4:	f003 0307 	and.w	r3, r3, #7
 800acf8:	4904      	ldr	r1, [pc, #16]	; (800ad0c <HAL_RCC_GetPCLK1Freq+0x28>)
 800acfa:	5ccb      	ldrb	r3, [r1, r3]
 800acfc:	f003 031f 	and.w	r3, r3, #31
 800ad00:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	58024400 	.word	0x58024400
 800ad0c:	08011d0c 	.word	0x08011d0c

0800ad10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad14:	f7ff ffb6 	bl	800ac84 <HAL_RCC_GetHCLKFreq>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	4b06      	ldr	r3, [pc, #24]	; (800ad34 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	0a1b      	lsrs	r3, r3, #8
 800ad20:	f003 0307 	and.w	r3, r3, #7
 800ad24:	4904      	ldr	r1, [pc, #16]	; (800ad38 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad26:	5ccb      	ldrb	r3, [r1, r3]
 800ad28:	f003 031f 	and.w	r3, r3, #31
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	58024400 	.word	0x58024400
 800ad38:	08011d0c 	.word	0x08011d0c

0800ad3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad44:	2300      	movs	r3, #0
 800ad46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad48:	2300      	movs	r3, #0
 800ad4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d03f      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad60:	d02a      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ad62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad66:	d824      	bhi.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad6c:	d018      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad72:	d81e      	bhi.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ad78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad7c:	d007      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ad7e:	e018      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad80:	4ba3      	ldr	r3, [pc, #652]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	4aa2      	ldr	r2, [pc, #648]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ad8c:	e015      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3304      	adds	r3, #4
 800ad92:	2102      	movs	r1, #2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f001 f9d5 	bl	800c144 <RCCEx_PLL2_Config>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ad9e:	e00c      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3324      	adds	r3, #36	; 0x24
 800ada4:	2102      	movs	r1, #2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f001 fa7e 	bl	800c2a8 <RCCEx_PLL3_Config>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800adb0:	e003      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	75fb      	strb	r3, [r7, #23]
      break;
 800adb6:	e000      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800adb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d109      	bne.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800adc0:	4b93      	ldr	r3, [pc, #588]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800adc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adcc:	4990      	ldr	r1, [pc, #576]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800adce:	4313      	orrs	r3, r2
 800add0:	650b      	str	r3, [r1, #80]	; 0x50
 800add2:	e001      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d03d      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d826      	bhi.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800adec:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800adee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf2:	bf00      	nop
 800adf4:	0800ae09 	.word	0x0800ae09
 800adf8:	0800ae17 	.word	0x0800ae17
 800adfc:	0800ae29 	.word	0x0800ae29
 800ae00:	0800ae41 	.word	0x0800ae41
 800ae04:	0800ae41 	.word	0x0800ae41
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae08:	4b81      	ldr	r3, [pc, #516]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	4a80      	ldr	r2, [pc, #512]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae14:	e015      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3304      	adds	r3, #4
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f001 f991 	bl	800c144 <RCCEx_PLL2_Config>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae26:	e00c      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3324      	adds	r3, #36	; 0x24
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 fa3a 	bl	800c2a8 <RCCEx_PLL3_Config>
 800ae34:	4603      	mov	r3, r0
 800ae36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae38:	e003      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae3e:	e000      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ae40:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d109      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae48:	4b71      	ldr	r3, [pc, #452]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae4c:	f023 0207 	bic.w	r2, r3, #7
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae54:	496e      	ldr	r1, [pc, #440]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	650b      	str	r3, [r1, #80]	; 0x50
 800ae5a:	e001      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d042      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae74:	d02b      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ae76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae7a:	d825      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ae7c:	2bc0      	cmp	r3, #192	; 0xc0
 800ae7e:	d028      	beq.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ae80:	2bc0      	cmp	r3, #192	; 0xc0
 800ae82:	d821      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ae84:	2b80      	cmp	r3, #128	; 0x80
 800ae86:	d016      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ae88:	2b80      	cmp	r3, #128	; 0x80
 800ae8a:	d81d      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ae90:	2b40      	cmp	r3, #64	; 0x40
 800ae92:	d007      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ae94:	e018      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae96:	4b5e      	ldr	r3, [pc, #376]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9a:	4a5d      	ldr	r2, [pc, #372]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aea2:	e017      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3304      	adds	r3, #4
 800aea8:	2100      	movs	r1, #0
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f001 f94a 	bl	800c144 <RCCEx_PLL2_Config>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aeb4:	e00e      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	3324      	adds	r3, #36	; 0x24
 800aeba:	2100      	movs	r1, #0
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 f9f3 	bl	800c2a8 <RCCEx_PLL3_Config>
 800aec2:	4603      	mov	r3, r0
 800aec4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aec6:	e005      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	75fb      	strb	r3, [r7, #23]
      break;
 800aecc:	e002      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800aece:	bf00      	nop
 800aed0:	e000      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800aed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d109      	bne.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aeda:	4b4d      	ldr	r3, [pc, #308]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aedc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aede:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee6:	494a      	ldr	r1, [pc, #296]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aee8:	4313      	orrs	r3, r2
 800aeea:	650b      	str	r3, [r1, #80]	; 0x50
 800aeec:	e001      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d049      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af08:	d030      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800af0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af0e:	d82a      	bhi.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800af10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af14:	d02c      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800af16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af1a:	d824      	bhi.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800af1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af20:	d018      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800af22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af26:	d81e      	bhi.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800af2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af30:	d007      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800af32:	e018      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af34:	4b36      	ldr	r3, [pc, #216]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	4a35      	ldr	r2, [pc, #212]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af40:	e017      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3304      	adds	r3, #4
 800af46:	2100      	movs	r1, #0
 800af48:	4618      	mov	r0, r3
 800af4a:	f001 f8fb 	bl	800c144 <RCCEx_PLL2_Config>
 800af4e:	4603      	mov	r3, r0
 800af50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800af52:	e00e      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	3324      	adds	r3, #36	; 0x24
 800af58:	2100      	movs	r1, #0
 800af5a:	4618      	mov	r0, r3
 800af5c:	f001 f9a4 	bl	800c2a8 <RCCEx_PLL3_Config>
 800af60:	4603      	mov	r3, r0
 800af62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af64:	e005      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	75fb      	strb	r3, [r7, #23]
      break;
 800af6a:	e002      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800af6c:	bf00      	nop
 800af6e:	e000      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800af70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af78:	4b25      	ldr	r3, [pc, #148]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af7c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af86:	4922      	ldr	r1, [pc, #136]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af88:	4313      	orrs	r3, r2
 800af8a:	658b      	str	r3, [r1, #88]	; 0x58
 800af8c:	e001      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d04b      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800afa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afa8:	d030      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800afaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afae:	d82a      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800afb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afb4:	d02e      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800afb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afba:	d824      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800afbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afc0:	d018      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800afc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afc6:	d81e      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d003      	beq.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800afcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800afd0:	d007      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800afd2:	e018      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afd4:	4b0e      	ldr	r3, [pc, #56]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800afd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd8:	4a0d      	ldr	r2, [pc, #52]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800afda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800afe0:	e019      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3304      	adds	r3, #4
 800afe6:	2100      	movs	r1, #0
 800afe8:	4618      	mov	r0, r3
 800afea:	f001 f8ab 	bl	800c144 <RCCEx_PLL2_Config>
 800afee:	4603      	mov	r3, r0
 800aff0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aff2:	e010      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	3324      	adds	r3, #36	; 0x24
 800aff8:	2100      	movs	r1, #0
 800affa:	4618      	mov	r0, r3
 800affc:	f001 f954 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b000:	4603      	mov	r3, r0
 800b002:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b004:	e007      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	75fb      	strb	r3, [r7, #23]
      break;
 800b00a:	e004      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800b00c:	bf00      	nop
 800b00e:	e002      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b010:	58024400 	.word	0x58024400
      break;
 800b014:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10a      	bne.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b01c:	4b99      	ldr	r3, [pc, #612]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b020:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b02a:	4996      	ldr	r1, [pc, #600]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	658b      	str	r3, [r1, #88]	; 0x58
 800b030:	e001      	b.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b032:	7dfb      	ldrb	r3, [r7, #23]
 800b034:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d032      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b046:	2b30      	cmp	r3, #48	; 0x30
 800b048:	d01c      	beq.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800b04a:	2b30      	cmp	r3, #48	; 0x30
 800b04c:	d817      	bhi.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b04e:	2b20      	cmp	r3, #32
 800b050:	d00c      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b052:	2b20      	cmp	r3, #32
 800b054:	d813      	bhi.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b056:	2b00      	cmp	r3, #0
 800b058:	d016      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b05a:	2b10      	cmp	r3, #16
 800b05c:	d10f      	bne.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b05e:	4b89      	ldr	r3, [pc, #548]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	4a88      	ldr	r2, [pc, #544]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b06a:	e00e      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	3304      	adds	r3, #4
 800b070:	2102      	movs	r1, #2
 800b072:	4618      	mov	r0, r3
 800b074:	f001 f866 	bl	800c144 <RCCEx_PLL2_Config>
 800b078:	4603      	mov	r3, r0
 800b07a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b07c:	e005      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	75fb      	strb	r3, [r7, #23]
      break;
 800b082:	e002      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b084:	bf00      	nop
 800b086:	e000      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d109      	bne.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b090:	4b7c      	ldr	r3, [pc, #496]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b094:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b09c:	4979      	ldr	r1, [pc, #484]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b0a2:	e001      	b.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d047      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0bc:	d030      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b0be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0c2:	d82a      	bhi.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b0c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0c8:	d02c      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b0ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0ce:	d824      	bhi.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b0d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0d4:	d018      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800b0d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0da:	d81e      	bhi.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d003      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0e4:	d007      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800b0e6:	e018      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0e8:	4b66      	ldr	r3, [pc, #408]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ec:	4a65      	ldr	r2, [pc, #404]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b0f4:	e017      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f001 f821 	bl	800c144 <RCCEx_PLL2_Config>
 800b102:	4603      	mov	r3, r0
 800b104:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b106:	e00e      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3324      	adds	r3, #36	; 0x24
 800b10c:	2100      	movs	r1, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f001 f8ca 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b118:	e005      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	75fb      	strb	r3, [r7, #23]
      break;
 800b11e:	e002      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b120:	bf00      	nop
 800b122:	e000      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b124:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b126:	7dfb      	ldrb	r3, [r7, #23]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d109      	bne.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b12c:	4b55      	ldr	r3, [pc, #340]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b130:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b138:	4952      	ldr	r1, [pc, #328]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b13a:	4313      	orrs	r3, r2
 800b13c:	650b      	str	r3, [r1, #80]	; 0x50
 800b13e:	e001      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b140:	7dfb      	ldrb	r3, [r7, #23]
 800b142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d049      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b158:	d02e      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b15a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b15e:	d828      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b164:	d02a      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b166:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b16a:	d822      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b16c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b170:	d026      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800b172:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b176:	d81c      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b17c:	d010      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800b17e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b182:	d816      	bhi.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d01d      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800b188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b18c:	d111      	bne.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3304      	adds	r3, #4
 800b192:	2101      	movs	r1, #1
 800b194:	4618      	mov	r0, r3
 800b196:	f000 ffd5 	bl	800c144 <RCCEx_PLL2_Config>
 800b19a:	4603      	mov	r3, r0
 800b19c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b19e:	e012      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3324      	adds	r3, #36	; 0x24
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 f87e 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b1b0:	e009      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b1b6:	e006      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b1b8:	bf00      	nop
 800b1ba:	e004      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b1bc:	bf00      	nop
 800b1be:	e002      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b1c0:	bf00      	nop
 800b1c2:	e000      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b1c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d109      	bne.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1cc:	4b2d      	ldr	r3, [pc, #180]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b1ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1d8:	492a      	ldr	r1, [pc, #168]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	650b      	str	r3, [r1, #80]	; 0x50
 800b1de:	e001      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d04d      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1fa:	d02e      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b1fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b200:	d828      	bhi.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b206:	d02a      	beq.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b20c:	d822      	bhi.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b20e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b212:	d026      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800b214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b218:	d81c      	bhi.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b21a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b21e:	d010      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b224:	d816      	bhi.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b226:	2b00      	cmp	r3, #0
 800b228:	d01d      	beq.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b22a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b22e:	d111      	bne.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3304      	adds	r3, #4
 800b234:	2101      	movs	r1, #1
 800b236:	4618      	mov	r0, r3
 800b238:	f000 ff84 	bl	800c144 <RCCEx_PLL2_Config>
 800b23c:	4603      	mov	r3, r0
 800b23e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b240:	e012      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3324      	adds	r3, #36	; 0x24
 800b246:	2101      	movs	r1, #1
 800b248:	4618      	mov	r0, r3
 800b24a:	f001 f82d 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b24e:	4603      	mov	r3, r0
 800b250:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b252:	e009      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	75fb      	strb	r3, [r7, #23]
      break;
 800b258:	e006      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b25a:	bf00      	nop
 800b25c:	e004      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b25e:	bf00      	nop
 800b260:	e002      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b262:	bf00      	nop
 800b264:	e000      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b266:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10c      	bne.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b26e:	4b05      	ldr	r3, [pc, #20]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b272:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b27c:	4901      	ldr	r1, [pc, #4]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	658b      	str	r3, [r1, #88]	; 0x58
 800b282:	e003      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d02f      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b29c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2a0:	d00e      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800b2a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2a6:	d814      	bhi.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d015      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800b2ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2b0:	d10f      	bne.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b2:	4baf      	ldr	r3, [pc, #700]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	4aae      	ldr	r2, [pc, #696]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b2b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b2be:	e00c      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 ff3c 	bl	800c144 <RCCEx_PLL2_Config>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b2d0:	e003      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	75fb      	strb	r3, [r7, #23]
      break;
 800b2d6:	e000      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800b2d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d109      	bne.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b2e0:	4ba3      	ldr	r3, [pc, #652]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ec:	49a0      	ldr	r1, [pc, #640]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	650b      	str	r3, [r1, #80]	; 0x50
 800b2f2:	e001      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d032      	beq.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b308:	2b03      	cmp	r3, #3
 800b30a:	d81b      	bhi.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b30c:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b312:	bf00      	nop
 800b314:	0800b34b 	.word	0x0800b34b
 800b318:	0800b325 	.word	0x0800b325
 800b31c:	0800b333 	.word	0x0800b333
 800b320:	0800b34b 	.word	0x0800b34b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b324:	4b92      	ldr	r3, [pc, #584]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	4a91      	ldr	r2, [pc, #580]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b32a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b32e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b330:	e00c      	b.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	3304      	adds	r3, #4
 800b336:	2102      	movs	r1, #2
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 ff03 	bl	800c144 <RCCEx_PLL2_Config>
 800b33e:	4603      	mov	r3, r0
 800b340:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b342:	e003      	b.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	75fb      	strb	r3, [r7, #23]
      break;
 800b348:	e000      	b.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b34a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d109      	bne.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b352:	4b87      	ldr	r3, [pc, #540]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b356:	f023 0203 	bic.w	r2, r3, #3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35e:	4984      	ldr	r1, [pc, #528]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b360:	4313      	orrs	r3, r2
 800b362:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b364:	e001      	b.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b366:	7dfb      	ldrb	r3, [r7, #23]
 800b368:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 8086 	beq.w	800b484 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b378:	4b7e      	ldr	r3, [pc, #504]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a7d      	ldr	r2, [pc, #500]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b37e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b384:	f7f9 f876 	bl	8004474 <HAL_GetTick>
 800b388:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b38a:	e009      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b38c:	f7f9 f872 	bl	8004474 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b64      	cmp	r3, #100	; 0x64
 800b398:	d902      	bls.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	75fb      	strb	r3, [r7, #23]
        break;
 800b39e:	e005      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3a0:	4b74      	ldr	r3, [pc, #464]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d0ef      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b3ac:	7dfb      	ldrb	r3, [r7, #23]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d166      	bne.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b3b2:	4b6f      	ldr	r3, [pc, #444]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3bc:	4053      	eors	r3, r2
 800b3be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d013      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b3c6:	4b6a      	ldr	r3, [pc, #424]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3ce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b3d0:	4b67      	ldr	r3, [pc, #412]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3d4:	4a66      	ldr	r2, [pc, #408]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3da:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b3dc:	4b64      	ldr	r3, [pc, #400]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e0:	4a63      	ldr	r2, [pc, #396]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3e6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b3e8:	4a61      	ldr	r2, [pc, #388]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3f8:	d115      	bne.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3fa:	f7f9 f83b 	bl	8004474 <HAL_GetTick>
 800b3fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b400:	e00b      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b402:	f7f9 f837 	bl	8004474 <HAL_GetTick>
 800b406:	4602      	mov	r2, r0
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b410:	4293      	cmp	r3, r2
 800b412:	d902      	bls.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b414:	2303      	movs	r3, #3
 800b416:	75fb      	strb	r3, [r7, #23]
            break;
 800b418:	e005      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b41a:	4b55      	ldr	r3, [pc, #340]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41e:	f003 0302 	and.w	r3, r3, #2
 800b422:	2b00      	cmp	r3, #0
 800b424:	d0ed      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b426:	7dfb      	ldrb	r3, [r7, #23]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d126      	bne.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b43a:	d10d      	bne.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b43c:	4b4c      	ldr	r3, [pc, #304]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b44a:	0919      	lsrs	r1, r3, #4
 800b44c:	4b4a      	ldr	r3, [pc, #296]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800b44e:	400b      	ands	r3, r1
 800b450:	4947      	ldr	r1, [pc, #284]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b452:	4313      	orrs	r3, r2
 800b454:	610b      	str	r3, [r1, #16]
 800b456:	e005      	b.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b458:	4b45      	ldr	r3, [pc, #276]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	4a44      	ldr	r2, [pc, #272]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b45e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b462:	6113      	str	r3, [r2, #16]
 800b464:	4b42      	ldr	r3, [pc, #264]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b46e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b472:	493f      	ldr	r1, [pc, #252]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b474:	4313      	orrs	r3, r2
 800b476:	670b      	str	r3, [r1, #112]	; 0x70
 800b478:	e004      	b.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
 800b47c:	75bb      	strb	r3, [r7, #22]
 800b47e:	e001      	b.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b480:	7dfb      	ldrb	r3, [r7, #23]
 800b482:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 0301 	and.w	r3, r3, #1
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 8085 	beq.w	800b59c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b496:	2b28      	cmp	r3, #40	; 0x28
 800b498:	d866      	bhi.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b49a:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a0:	0800b57d 	.word	0x0800b57d
 800b4a4:	0800b569 	.word	0x0800b569
 800b4a8:	0800b569 	.word	0x0800b569
 800b4ac:	0800b569 	.word	0x0800b569
 800b4b0:	0800b569 	.word	0x0800b569
 800b4b4:	0800b569 	.word	0x0800b569
 800b4b8:	0800b569 	.word	0x0800b569
 800b4bc:	0800b569 	.word	0x0800b569
 800b4c0:	0800b545 	.word	0x0800b545
 800b4c4:	0800b569 	.word	0x0800b569
 800b4c8:	0800b569 	.word	0x0800b569
 800b4cc:	0800b569 	.word	0x0800b569
 800b4d0:	0800b569 	.word	0x0800b569
 800b4d4:	0800b569 	.word	0x0800b569
 800b4d8:	0800b569 	.word	0x0800b569
 800b4dc:	0800b569 	.word	0x0800b569
 800b4e0:	0800b557 	.word	0x0800b557
 800b4e4:	0800b569 	.word	0x0800b569
 800b4e8:	0800b569 	.word	0x0800b569
 800b4ec:	0800b569 	.word	0x0800b569
 800b4f0:	0800b569 	.word	0x0800b569
 800b4f4:	0800b569 	.word	0x0800b569
 800b4f8:	0800b569 	.word	0x0800b569
 800b4fc:	0800b569 	.word	0x0800b569
 800b500:	0800b57d 	.word	0x0800b57d
 800b504:	0800b569 	.word	0x0800b569
 800b508:	0800b569 	.word	0x0800b569
 800b50c:	0800b569 	.word	0x0800b569
 800b510:	0800b569 	.word	0x0800b569
 800b514:	0800b569 	.word	0x0800b569
 800b518:	0800b569 	.word	0x0800b569
 800b51c:	0800b569 	.word	0x0800b569
 800b520:	0800b57d 	.word	0x0800b57d
 800b524:	0800b569 	.word	0x0800b569
 800b528:	0800b569 	.word	0x0800b569
 800b52c:	0800b569 	.word	0x0800b569
 800b530:	0800b569 	.word	0x0800b569
 800b534:	0800b569 	.word	0x0800b569
 800b538:	0800b569 	.word	0x0800b569
 800b53c:	0800b569 	.word	0x0800b569
 800b540:	0800b57d 	.word	0x0800b57d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	3304      	adds	r3, #4
 800b548:	2101      	movs	r1, #1
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 fdfa 	bl	800c144 <RCCEx_PLL2_Config>
 800b550:	4603      	mov	r3, r0
 800b552:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b554:	e013      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3324      	adds	r3, #36	; 0x24
 800b55a:	2101      	movs	r1, #1
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 fea3 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b562:	4603      	mov	r3, r0
 800b564:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b566:	e00a      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	75fb      	strb	r3, [r7, #23]
      break;
 800b56c:	e007      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b56e:	bf00      	nop
 800b570:	58024400 	.word	0x58024400
 800b574:	58024800 	.word	0x58024800
 800b578:	00ffffcf 	.word	0x00ffffcf
      break;
 800b57c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d109      	bne.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b584:	4b96      	ldr	r3, [pc, #600]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b588:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b590:	4993      	ldr	r1, [pc, #588]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b592:	4313      	orrs	r3, r2
 800b594:	654b      	str	r3, [r1, #84]	; 0x54
 800b596:	e001      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 0302 	and.w	r3, r3, #2
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d038      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5ac:	2b05      	cmp	r3, #5
 800b5ae:	d821      	bhi.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800b5b0:	a201      	add	r2, pc, #4	; (adr r2, 800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800b5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b6:	bf00      	nop
 800b5b8:	0800b5fb 	.word	0x0800b5fb
 800b5bc:	0800b5d1 	.word	0x0800b5d1
 800b5c0:	0800b5e3 	.word	0x0800b5e3
 800b5c4:	0800b5fb 	.word	0x0800b5fb
 800b5c8:	0800b5fb 	.word	0x0800b5fb
 800b5cc:	0800b5fb 	.word	0x0800b5fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 fdb4 	bl	800c144 <RCCEx_PLL2_Config>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b5e0:	e00c      	b.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	3324      	adds	r3, #36	; 0x24
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fe5d 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b5f2:	e003      	b.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5f8:	e000      	b.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800b5fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d109      	bne.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b602:	4b77      	ldr	r3, [pc, #476]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b606:	f023 0207 	bic.w	r2, r3, #7
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b60e:	4974      	ldr	r1, [pc, #464]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b610:	4313      	orrs	r3, r2
 800b612:	654b      	str	r3, [r1, #84]	; 0x54
 800b614:	e001      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 0304 	and.w	r3, r3, #4
 800b622:	2b00      	cmp	r3, #0
 800b624:	d03a      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b62c:	2b05      	cmp	r3, #5
 800b62e:	d821      	bhi.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b630:	a201      	add	r2, pc, #4	; (adr r2, 800b638 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800b632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b636:	bf00      	nop
 800b638:	0800b67b 	.word	0x0800b67b
 800b63c:	0800b651 	.word	0x0800b651
 800b640:	0800b663 	.word	0x0800b663
 800b644:	0800b67b 	.word	0x0800b67b
 800b648:	0800b67b 	.word	0x0800b67b
 800b64c:	0800b67b 	.word	0x0800b67b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	3304      	adds	r3, #4
 800b654:	2101      	movs	r1, #1
 800b656:	4618      	mov	r0, r3
 800b658:	f000 fd74 	bl	800c144 <RCCEx_PLL2_Config>
 800b65c:	4603      	mov	r3, r0
 800b65e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b660:	e00c      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3324      	adds	r3, #36	; 0x24
 800b666:	2101      	movs	r1, #1
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fe1d 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b66e:	4603      	mov	r3, r0
 800b670:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b672:	e003      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]
      break;
 800b678:	e000      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800b67a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10a      	bne.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b682:	4b57      	ldr	r3, [pc, #348]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b686:	f023 0207 	bic.w	r2, r3, #7
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b690:	4953      	ldr	r1, [pc, #332]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b692:	4313      	orrs	r3, r2
 800b694:	658b      	str	r3, [r1, #88]	; 0x58
 800b696:	e001      	b.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b698:	7dfb      	ldrb	r3, [r7, #23]
 800b69a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 0320 	and.w	r3, r3, #32
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d04b      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b2:	d02e      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b6b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b8:	d828      	bhi.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6be:	d02a      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c4:	d822      	bhi.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b6c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6ca:	d026      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b6cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6d0:	d81c      	bhi.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b6d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6d6:	d010      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800b6d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6dc:	d816      	bhi.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d01d      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b6e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6e6:	d111      	bne.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fd28 	bl	800c144 <RCCEx_PLL2_Config>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b6f8:	e012      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3324      	adds	r3, #36	; 0x24
 800b6fe:	2102      	movs	r1, #2
 800b700:	4618      	mov	r0, r3
 800b702:	f000 fdd1 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b706:	4603      	mov	r3, r0
 800b708:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b70a:	e009      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	75fb      	strb	r3, [r7, #23]
      break;
 800b710:	e006      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b712:	bf00      	nop
 800b714:	e004      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b716:	bf00      	nop
 800b718:	e002      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b71a:	bf00      	nop
 800b71c:	e000      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b71e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b720:	7dfb      	ldrb	r3, [r7, #23]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10a      	bne.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b726:	4b2e      	ldr	r3, [pc, #184]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b734:	492a      	ldr	r1, [pc, #168]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b736:	4313      	orrs	r3, r2
 800b738:	654b      	str	r3, [r1, #84]	; 0x54
 800b73a:	e001      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73c:	7dfb      	ldrb	r3, [r7, #23]
 800b73e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d04d      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b752:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b756:	d02e      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b758:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b75c:	d828      	bhi.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b75e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b762:	d02a      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b768:	d822      	bhi.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b76a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b76e:	d026      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b774:	d81c      	bhi.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b77a:	d010      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b77c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b780:	d816      	bhi.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b782:	2b00      	cmp	r3, #0
 800b784:	d01d      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b78a:	d111      	bne.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3304      	adds	r3, #4
 800b790:	2100      	movs	r1, #0
 800b792:	4618      	mov	r0, r3
 800b794:	f000 fcd6 	bl	800c144 <RCCEx_PLL2_Config>
 800b798:	4603      	mov	r3, r0
 800b79a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b79c:	e012      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3324      	adds	r3, #36	; 0x24
 800b7a2:	2102      	movs	r1, #2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 fd7f 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b7ae:	e009      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b7b4:	e006      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b7b6:	bf00      	nop
 800b7b8:	e004      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b7ba:	bf00      	nop
 800b7bc:	e002      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b7be:	bf00      	nop
 800b7c0:	e000      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b7c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7c4:	7dfb      	ldrb	r3, [r7, #23]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10c      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b7ca:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7d8:	4901      	ldr	r1, [pc, #4]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	658b      	str	r3, [r1, #88]	; 0x58
 800b7de:	e003      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b7e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e4:	7dfb      	ldrb	r3, [r7, #23]
 800b7e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d04b      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7fe:	d02e      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b800:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b804:	d828      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b80a:	d02a      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b80c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b810:	d822      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b812:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b816:	d026      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b818:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b81c:	d81c      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b81e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b822:	d010      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b828:	d816      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d01d      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b82e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b832:	d111      	bne.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3304      	adds	r3, #4
 800b838:	2100      	movs	r1, #0
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 fc82 	bl	800c144 <RCCEx_PLL2_Config>
 800b840:	4603      	mov	r3, r0
 800b842:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b844:	e012      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3324      	adds	r3, #36	; 0x24
 800b84a:	2102      	movs	r1, #2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 fd2b 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b852:	4603      	mov	r3, r0
 800b854:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b856:	e009      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	75fb      	strb	r3, [r7, #23]
      break;
 800b85c:	e006      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b85e:	bf00      	nop
 800b860:	e004      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b862:	bf00      	nop
 800b864:	e002      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b866:	bf00      	nop
 800b868:	e000      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b86a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b872:	4b9d      	ldr	r3, [pc, #628]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b880:	4999      	ldr	r1, [pc, #612]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b882:	4313      	orrs	r3, r2
 800b884:	658b      	str	r3, [r1, #88]	; 0x58
 800b886:	e001      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 0308 	and.w	r3, r3, #8
 800b894:	2b00      	cmp	r3, #0
 800b896:	d01a      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b89e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8a2:	d10a      	bne.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3324      	adds	r3, #36	; 0x24
 800b8a8:	2102      	movs	r1, #2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 fcfc 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b8ba:	4b8b      	ldr	r3, [pc, #556]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c8:	4987      	ldr	r1, [pc, #540]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0310 	and.w	r3, r3, #16
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d01a      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8e4:	d10a      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3324      	adds	r3, #36	; 0x24
 800b8ea:	2102      	movs	r1, #2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 fcdb 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d001      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8fc:	4b7a      	ldr	r3, [pc, #488]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b8fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b90a:	4977      	ldr	r1, [pc, #476]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b90c:	4313      	orrs	r3, r2
 800b90e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d034      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b926:	d01d      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b92c:	d817      	bhi.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b936:	d009      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b938:	e011      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3304      	adds	r3, #4
 800b93e:	2100      	movs	r1, #0
 800b940:	4618      	mov	r0, r3
 800b942:	f000 fbff 	bl	800c144 <RCCEx_PLL2_Config>
 800b946:	4603      	mov	r3, r0
 800b948:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b94a:	e00c      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3324      	adds	r3, #36	; 0x24
 800b950:	2102      	movs	r1, #2
 800b952:	4618      	mov	r0, r3
 800b954:	f000 fca8 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b958:	4603      	mov	r3, r0
 800b95a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b95c:	e003      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	75fb      	strb	r3, [r7, #23]
      break;
 800b962:	e000      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b964:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10a      	bne.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b96c:	4b5e      	ldr	r3, [pc, #376]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b97a:	495b      	ldr	r1, [pc, #364]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b97c:	4313      	orrs	r3, r2
 800b97e:	658b      	str	r3, [r1, #88]	; 0x58
 800b980:	e001      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b982:	7dfb      	ldrb	r3, [r7, #23]
 800b984:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d033      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b998:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b99c:	d01c      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b99e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9a2:	d816      	bhi.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b9a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9a8:	d003      	beq.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b9aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9ae:	d007      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b9b0:	e00f      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b2:	4b4d      	ldr	r3, [pc, #308]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	4a4c      	ldr	r2, [pc, #304]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b9b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b9be:	e00c      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3324      	adds	r3, #36	; 0x24
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 fc6e 	bl	800c2a8 <RCCEx_PLL3_Config>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b9d0:	e003      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9d6:	e000      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b9d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10a      	bne.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b9e0:	4b41      	ldr	r3, [pc, #260]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9ee:	493e      	ldr	r1, [pc, #248]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	654b      	str	r3, [r1, #84]	; 0x54
 800b9f4:	e001      	b.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
 800b9f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d029      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800ba0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba12:	d007      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800ba14:	e00f      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba16:	4b34      	ldr	r3, [pc, #208]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1a:	4a33      	ldr	r2, [pc, #204]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ba22:	e00b      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3304      	adds	r3, #4
 800ba28:	2102      	movs	r1, #2
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 fb8a 	bl	800c144 <RCCEx_PLL2_Config>
 800ba30:	4603      	mov	r3, r0
 800ba32:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ba34:	e002      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	75fb      	strb	r3, [r7, #23]
      break;
 800ba3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba3c:	7dfb      	ldrb	r3, [r7, #23]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d109      	bne.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ba42:	4b29      	ldr	r3, [pc, #164]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba4e:	4926      	ldr	r1, [pc, #152]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ba54:	e001      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3324      	adds	r3, #36	; 0x24
 800ba6a:	2102      	movs	r1, #2
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 fc1b 	bl	800c2a8 <RCCEx_PLL3_Config>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d033      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba90:	d017      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ba92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba96:	d811      	bhi.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800ba98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba9c:	d013      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ba9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baa2:	d80b      	bhi.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d010      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800baa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baac:	d106      	bne.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baae:	4b0e      	ldr	r3, [pc, #56]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab2:	4a0d      	ldr	r2, [pc, #52]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800baba:	e007      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	75fb      	strb	r3, [r7, #23]
      break;
 800bac0:	e004      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bac2:	bf00      	nop
 800bac4:	e002      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bac6:	bf00      	nop
 800bac8:	e000      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800baca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10c      	bne.n	800baec <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bad2:	4b05      	ldr	r3, [pc, #20]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bade:	4902      	ldr	r1, [pc, #8]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bae0:	4313      	orrs	r3, r2
 800bae2:	654b      	str	r3, [r1, #84]	; 0x54
 800bae4:	e004      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800bae6:	bf00      	nop
 800bae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d008      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bafc:	4b31      	ldr	r3, [pc, #196]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb08:	492e      	ldr	r1, [pc, #184]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d009      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bb1a:	4b2a      	ldr	r3, [pc, #168]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb28:	4926      	ldr	r1, [pc, #152]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d008      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb3a:	4b22      	ldr	r3, [pc, #136]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb46:	491f      	ldr	r1, [pc, #124]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00d      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb58:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	4a19      	ldr	r2, [pc, #100]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb62:	6113      	str	r3, [r2, #16]
 800bb64:	4b17      	ldr	r3, [pc, #92]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb66:	691a      	ldr	r2, [r3, #16]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bb6e:	4915      	ldr	r1, [pc, #84]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb70:	4313      	orrs	r3, r2
 800bb72:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	da08      	bge.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bb7c:	4b11      	ldr	r3, [pc, #68]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb88:	490e      	ldr	r1, [pc, #56]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d009      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb9a:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bba8:	4906      	ldr	r1, [pc, #24]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bbae:	7dbb      	ldrb	r3, [r7, #22]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d101      	bne.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e000      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3718      	adds	r7, #24
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	58024400 	.word	0x58024400

0800bbc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bbcc:	f7ff f85a 	bl	800ac84 <HAL_RCC_GetHCLKFreq>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	4b06      	ldr	r3, [pc, #24]	; (800bbec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	091b      	lsrs	r3, r3, #4
 800bbd8:	f003 0307 	and.w	r3, r3, #7
 800bbdc:	4904      	ldr	r1, [pc, #16]	; (800bbf0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bbde:	5ccb      	ldrb	r3, [r1, r3]
 800bbe0:	f003 031f 	and.w	r3, r3, #31
 800bbe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	08011d0c 	.word	0x08011d0c

0800bbf4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b089      	sub	sp, #36	; 0x24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbfc:	4ba1      	ldr	r3, [pc, #644]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc00:	f003 0303 	and.w	r3, r3, #3
 800bc04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bc06:	4b9f      	ldr	r3, [pc, #636]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0a:	0b1b      	lsrs	r3, r3, #12
 800bc0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bc12:	4b9c      	ldr	r3, [pc, #624]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc16:	091b      	lsrs	r3, r3, #4
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bc1e:	4b99      	ldr	r3, [pc, #612]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc22:	08db      	lsrs	r3, r3, #3
 800bc24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc28:	693a      	ldr	r2, [r7, #16]
 800bc2a:	fb02 f303 	mul.w	r3, r2, r3
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8111 	beq.w	800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	f000 8083 	beq.w	800bd50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	f200 80a1 	bhi.w	800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d003      	beq.n	800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d056      	beq.n	800bd0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc5e:	e099      	b.n	800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc60:	4b88      	ldr	r3, [pc, #544]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f003 0320 	and.w	r3, r3, #32
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d02d      	beq.n	800bcc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc6c:	4b85      	ldr	r3, [pc, #532]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	08db      	lsrs	r3, r3, #3
 800bc72:	f003 0303 	and.w	r3, r3, #3
 800bc76:	4a84      	ldr	r2, [pc, #528]	; (800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc78:	fa22 f303 	lsr.w	r3, r2, r3
 800bc7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	ee07 3a90 	vmov	s15, r3
 800bc84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	ee07 3a90 	vmov	s15, r3
 800bc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc96:	4b7b      	ldr	r3, [pc, #492]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc9e:	ee07 3a90 	vmov	s15, r3
 800bca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bcc6:	e087      	b.n	800bdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	ee07 3a90 	vmov	s15, r3
 800bcce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bcd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcda:	4b6a      	ldr	r3, [pc, #424]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce2:	ee07 3a90 	vmov	s15, r3
 800bce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcea:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd0a:	e065      	b.n	800bdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	ee07 3a90 	vmov	s15, r3
 800bd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd1e:	4b59      	ldr	r3, [pc, #356]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd26:	ee07 3a90 	vmov	s15, r3
 800bd2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd4e:	e043      	b.n	800bdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	ee07 3a90 	vmov	s15, r3
 800bd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd62:	4b48      	ldr	r3, [pc, #288]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd6a:	ee07 3a90 	vmov	s15, r3
 800bd6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd72:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd92:	e021      	b.n	800bdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	ee07 3a90 	vmov	s15, r3
 800bd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bda2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda6:	4b37      	ldr	r3, [pc, #220]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdae:	ee07 3a90 	vmov	s15, r3
 800bdb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bdd8:	4b2a      	ldr	r3, [pc, #168]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bddc:	0a5b      	lsrs	r3, r3, #9
 800bdde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde2:	ee07 3a90 	vmov	s15, r3
 800bde6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdfe:	ee17 2a90 	vmov	r2, s15
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800be06:	4b1f      	ldr	r3, [pc, #124]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0a:	0c1b      	lsrs	r3, r3, #16
 800be0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be10:	ee07 3a90 	vmov	s15, r3
 800be14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be20:	edd7 6a07 	vldr	s13, [r7, #28]
 800be24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be2c:	ee17 2a90 	vmov	r2, s15
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800be34:	4b13      	ldr	r3, [pc, #76]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be38:	0e1b      	lsrs	r3, r3, #24
 800be3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3e:	ee07 3a90 	vmov	s15, r3
 800be42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be5a:	ee17 2a90 	vmov	r2, s15
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be62:	e008      	b.n	800be76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	609a      	str	r2, [r3, #8]
}
 800be76:	bf00      	nop
 800be78:	3724      	adds	r7, #36	; 0x24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	58024400 	.word	0x58024400
 800be88:	03d09000 	.word	0x03d09000
 800be8c:	46000000 	.word	0x46000000
 800be90:	4c742400 	.word	0x4c742400
 800be94:	4a742400 	.word	0x4a742400
 800be98:	4c189680 	.word	0x4c189680

0800be9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b089      	sub	sp, #36	; 0x24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bea4:	4ba1      	ldr	r3, [pc, #644]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea8:	f003 0303 	and.w	r3, r3, #3
 800beac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800beae:	4b9f      	ldr	r3, [pc, #636]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb2:	0d1b      	lsrs	r3, r3, #20
 800beb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800beb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800beba:	4b9c      	ldr	r3, [pc, #624]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebe:	0a1b      	lsrs	r3, r3, #8
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bec6:	4b99      	ldr	r3, [pc, #612]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beca:	08db      	lsrs	r3, r3, #3
 800becc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	fb02 f303 	mul.w	r3, r2, r3
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bede:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 8111 	beq.w	800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	2b02      	cmp	r3, #2
 800beee:	f000 8083 	beq.w	800bff8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	f200 80a1 	bhi.w	800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d003      	beq.n	800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d056      	beq.n	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bf06:	e099      	b.n	800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf08:	4b88      	ldr	r3, [pc, #544]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 0320 	and.w	r3, r3, #32
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d02d      	beq.n	800bf70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf14:	4b85      	ldr	r3, [pc, #532]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	08db      	lsrs	r3, r3, #3
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	4a84      	ldr	r2, [pc, #528]	; (800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf20:	fa22 f303 	lsr.w	r3, r2, r3
 800bf24:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	ee07 3a90 	vmov	s15, r3
 800bf2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf3e:	4b7b      	ldr	r3, [pc, #492]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf52:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bf6e:	e087      	b.n	800c080 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	ee07 3a90 	vmov	s15, r3
 800bf76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf82:	4b6a      	ldr	r3, [pc, #424]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf96:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfb2:	e065      	b.n	800c080 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	ee07 3a90 	vmov	s15, r3
 800bfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c13c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfc6:	4b59      	ldr	r3, [pc, #356]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfce:	ee07 3a90 	vmov	s15, r3
 800bfd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfda:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bff6:	e043      	b.n	800c080 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	ee07 3a90 	vmov	s15, r3
 800bffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c002:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c140 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c00a:	4b48      	ldr	r3, [pc, #288]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c012:	ee07 3a90 	vmov	s15, r3
 800c016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c01a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c01e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c03a:	e021      	b.n	800c080 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	ee07 3a90 	vmov	s15, r3
 800c042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c046:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c13c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c04e:	4b37      	ldr	r3, [pc, #220]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c056:	ee07 3a90 	vmov	s15, r3
 800c05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c05e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c062:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c06e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c07a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c07e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c080:	4b2a      	ldr	r3, [pc, #168]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c084:	0a5b      	lsrs	r3, r3, #9
 800c086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c08a:	ee07 3a90 	vmov	s15, r3
 800c08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c09a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c09e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0a6:	ee17 2a90 	vmov	r2, s15
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c0ae:	4b1f      	ldr	r3, [pc, #124]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b2:	0c1b      	lsrs	r3, r3, #16
 800c0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b8:	ee07 3a90 	vmov	s15, r3
 800c0bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0d4:	ee17 2a90 	vmov	r2, s15
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c0dc:	4b13      	ldr	r3, [pc, #76]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e0:	0e1b      	lsrs	r3, r3, #24
 800c0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0e6:	ee07 3a90 	vmov	s15, r3
 800c0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c102:	ee17 2a90 	vmov	r2, s15
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c10a:	e008      	b.n	800c11e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	609a      	str	r2, [r3, #8]
}
 800c11e:	bf00      	nop
 800c120:	3724      	adds	r7, #36	; 0x24
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	58024400 	.word	0x58024400
 800c130:	03d09000 	.word	0x03d09000
 800c134:	46000000 	.word	0x46000000
 800c138:	4c742400 	.word	0x4c742400
 800c13c:	4a742400 	.word	0x4a742400
 800c140:	4c189680 	.word	0x4c189680

0800c144 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c152:	4b53      	ldr	r3, [pc, #332]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c156:	f003 0303 	and.w	r3, r3, #3
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d101      	bne.n	800c162 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e099      	b.n	800c296 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c162:	4b4f      	ldr	r3, [pc, #316]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a4e      	ldr	r2, [pc, #312]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c168:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c16c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c16e:	f7f8 f981 	bl	8004474 <HAL_GetTick>
 800c172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c174:	e008      	b.n	800c188 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c176:	f7f8 f97d 	bl	8004474 <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	2b02      	cmp	r3, #2
 800c182:	d901      	bls.n	800c188 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c184:	2303      	movs	r3, #3
 800c186:	e086      	b.n	800c296 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c188:	4b45      	ldr	r3, [pc, #276]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1f0      	bne.n	800c176 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c194:	4b42      	ldr	r3, [pc, #264]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c198:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	031b      	lsls	r3, r3, #12
 800c1a2:	493f      	ldr	r1, [pc, #252]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	628b      	str	r3, [r1, #40]	; 0x28
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	025b      	lsls	r3, r3, #9
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	431a      	orrs	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	041b      	lsls	r3, r3, #16
 800c1c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	061b      	lsls	r3, r3, #24
 800c1d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c1d8:	4931      	ldr	r1, [pc, #196]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1de:	4b30      	ldr	r3, [pc, #192]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	492d      	ldr	r1, [pc, #180]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1f0:	4b2b      	ldr	r3, [pc, #172]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f4:	f023 0220 	bic.w	r2, r3, #32
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	699b      	ldr	r3, [r3, #24]
 800c1fc:	4928      	ldr	r1, [pc, #160]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c1fe:	4313      	orrs	r3, r2
 800c200:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c202:	4b27      	ldr	r3, [pc, #156]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c206:	4a26      	ldr	r2, [pc, #152]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c208:	f023 0310 	bic.w	r3, r3, #16
 800c20c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c20e:	4b24      	ldr	r3, [pc, #144]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c212:	4b24      	ldr	r3, [pc, #144]	; (800c2a4 <RCCEx_PLL2_Config+0x160>)
 800c214:	4013      	ands	r3, r2
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	69d2      	ldr	r2, [r2, #28]
 800c21a:	00d2      	lsls	r2, r2, #3
 800c21c:	4920      	ldr	r1, [pc, #128]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c222:	4b1f      	ldr	r3, [pc, #124]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c226:	4a1e      	ldr	r2, [pc, #120]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c228:	f043 0310 	orr.w	r3, r3, #16
 800c22c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d106      	bne.n	800c242 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c234:	4b1a      	ldr	r3, [pc, #104]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c238:	4a19      	ldr	r2, [pc, #100]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c23a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c23e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c240:	e00f      	b.n	800c262 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d106      	bne.n	800c256 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c248:	4b15      	ldr	r3, [pc, #84]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24c:	4a14      	ldr	r2, [pc, #80]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c24e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c252:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c254:	e005      	b.n	800c262 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c256:	4b12      	ldr	r3, [pc, #72]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25a:	4a11      	ldr	r2, [pc, #68]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c25c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c260:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c262:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a0e      	ldr	r2, [pc, #56]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c268:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c26c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c26e:	f7f8 f901 	bl	8004474 <HAL_GetTick>
 800c272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c274:	e008      	b.n	800c288 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c276:	f7f8 f8fd 	bl	8004474 <HAL_GetTick>
 800c27a:	4602      	mov	r2, r0
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	1ad3      	subs	r3, r2, r3
 800c280:	2b02      	cmp	r3, #2
 800c282:	d901      	bls.n	800c288 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c284:	2303      	movs	r3, #3
 800c286:	e006      	b.n	800c296 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c288:	4b05      	ldr	r3, [pc, #20]	; (800c2a0 <RCCEx_PLL2_Config+0x15c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c290:	2b00      	cmp	r3, #0
 800c292:	d0f0      	beq.n	800c276 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c294:	7bfb      	ldrb	r3, [r7, #15]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	58024400 	.word	0x58024400
 800c2a4:	ffff0007 	.word	0xffff0007

0800c2a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2b6:	4b53      	ldr	r3, [pc, #332]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ba:	f003 0303 	and.w	r3, r3, #3
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d101      	bne.n	800c2c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e099      	b.n	800c3fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c2c6:	4b4f      	ldr	r3, [pc, #316]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a4e      	ldr	r2, [pc, #312]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c2cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2d2:	f7f8 f8cf 	bl	8004474 <HAL_GetTick>
 800c2d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2d8:	e008      	b.n	800c2ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c2da:	f7f8 f8cb 	bl	8004474 <HAL_GetTick>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d901      	bls.n	800c2ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	e086      	b.n	800c3fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2ec:	4b45      	ldr	r3, [pc, #276]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1f0      	bne.n	800c2da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c2f8:	4b42      	ldr	r3, [pc, #264]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	051b      	lsls	r3, r3, #20
 800c306:	493f      	ldr	r1, [pc, #252]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c308:	4313      	orrs	r3, r2
 800c30a:	628b      	str	r3, [r1, #40]	; 0x28
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	3b01      	subs	r3, #1
 800c312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	3b01      	subs	r3, #1
 800c31c:	025b      	lsls	r3, r3, #9
 800c31e:	b29b      	uxth	r3, r3
 800c320:	431a      	orrs	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	3b01      	subs	r3, #1
 800c328:	041b      	lsls	r3, r3, #16
 800c32a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c32e:	431a      	orrs	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	3b01      	subs	r3, #1
 800c336:	061b      	lsls	r3, r3, #24
 800c338:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c33c:	4931      	ldr	r1, [pc, #196]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c33e:	4313      	orrs	r3, r2
 800c340:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c342:	4b30      	ldr	r3, [pc, #192]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c346:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	695b      	ldr	r3, [r3, #20]
 800c34e:	492d      	ldr	r1, [pc, #180]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c350:	4313      	orrs	r3, r2
 800c352:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c354:	4b2b      	ldr	r3, [pc, #172]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c358:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	4928      	ldr	r1, [pc, #160]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c362:	4313      	orrs	r3, r2
 800c364:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c366:	4b27      	ldr	r3, [pc, #156]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36a:	4a26      	ldr	r2, [pc, #152]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c36c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c372:	4b24      	ldr	r3, [pc, #144]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c376:	4b24      	ldr	r3, [pc, #144]	; (800c408 <RCCEx_PLL3_Config+0x160>)
 800c378:	4013      	ands	r3, r2
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	69d2      	ldr	r2, [r2, #28]
 800c37e:	00d2      	lsls	r2, r2, #3
 800c380:	4920      	ldr	r1, [pc, #128]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c382:	4313      	orrs	r3, r2
 800c384:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c386:	4b1f      	ldr	r3, [pc, #124]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38a:	4a1e      	ldr	r2, [pc, #120]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c38c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d106      	bne.n	800c3a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c398:	4b1a      	ldr	r3, [pc, #104]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	4a19      	ldr	r2, [pc, #100]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c39e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c3a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3a4:	e00f      	b.n	800c3c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d106      	bne.n	800c3ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c3ac:	4b15      	ldr	r3, [pc, #84]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	4a14      	ldr	r2, [pc, #80]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c3b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c3b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3b8:	e005      	b.n	800c3c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3ba:	4b12      	ldr	r3, [pc, #72]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3be:	4a11      	ldr	r2, [pc, #68]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c3c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c3c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c3c6:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a0e      	ldr	r2, [pc, #56]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c3cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3d2:	f7f8 f84f 	bl	8004474 <HAL_GetTick>
 800c3d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3d8:	e008      	b.n	800c3ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c3da:	f7f8 f84b 	bl	8004474 <HAL_GetTick>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d901      	bls.n	800c3ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	e006      	b.n	800c3fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3ec:	4b05      	ldr	r3, [pc, #20]	; (800c404 <RCCEx_PLL3_Config+0x15c>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0f0      	beq.n	800c3da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	58024400 	.word	0x58024400
 800c408:	ffff0007 	.word	0xffff0007

0800c40c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e049      	b.n	800c4b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b00      	cmp	r3, #0
 800c428:	d106      	bne.n	800c438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7f5 fdd6 	bl	8001fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	3304      	adds	r3, #4
 800c448:	4619      	mov	r1, r3
 800c44a:	4610      	mov	r0, r2
 800c44c:	f001 f804 	bl	800d458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
	...

0800c4bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d001      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e054      	b.n	800c57e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68da      	ldr	r2, [r3, #12]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f042 0201 	orr.w	r2, r2, #1
 800c4ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a26      	ldr	r2, [pc, #152]	; (800c58c <HAL_TIM_Base_Start_IT+0xd0>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d022      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4fe:	d01d      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a22      	ldr	r2, [pc, #136]	; (800c590 <HAL_TIM_Base_Start_IT+0xd4>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d018      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a21      	ldr	r2, [pc, #132]	; (800c594 <HAL_TIM_Base_Start_IT+0xd8>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d013      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a1f      	ldr	r2, [pc, #124]	; (800c598 <HAL_TIM_Base_Start_IT+0xdc>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d00e      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a1e      	ldr	r2, [pc, #120]	; (800c59c <HAL_TIM_Base_Start_IT+0xe0>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d009      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a1c      	ldr	r2, [pc, #112]	; (800c5a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d004      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a1b      	ldr	r2, [pc, #108]	; (800c5a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d115      	bne.n	800c568 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	689a      	ldr	r2, [r3, #8]
 800c542:	4b19      	ldr	r3, [pc, #100]	; (800c5a8 <HAL_TIM_Base_Start_IT+0xec>)
 800c544:	4013      	ands	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b06      	cmp	r3, #6
 800c54c:	d015      	beq.n	800c57a <HAL_TIM_Base_Start_IT+0xbe>
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c554:	d011      	beq.n	800c57a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f042 0201 	orr.w	r2, r2, #1
 800c564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c566:	e008      	b.n	800c57a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f042 0201 	orr.w	r2, r2, #1
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	e000      	b.n	800c57c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c57a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	40010000 	.word	0x40010000
 800c590:	40000400 	.word	0x40000400
 800c594:	40000800 	.word	0x40000800
 800c598:	40000c00 	.word	0x40000c00
 800c59c:	40010400 	.word	0x40010400
 800c5a0:	40001800 	.word	0x40001800
 800c5a4:	40014000 	.word	0x40014000
 800c5a8:	00010007 	.word	0x00010007

0800c5ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d101      	bne.n	800c5be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e049      	b.n	800c652 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d106      	bne.n	800c5d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f841 	bl	800c65a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	3304      	adds	r3, #4
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	f000 ff34 	bl	800d458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c65a:	b480      	push	{r7}
 800c65c:	b083      	sub	sp, #12
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c662:	bf00      	nop
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
	...

0800c670 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d109      	bne.n	800c694 <HAL_TIM_PWM_Start+0x24>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c686:	b2db      	uxtb	r3, r3
 800c688:	2b01      	cmp	r3, #1
 800c68a:	bf14      	ite	ne
 800c68c:	2301      	movne	r3, #1
 800c68e:	2300      	moveq	r3, #0
 800c690:	b2db      	uxtb	r3, r3
 800c692:	e03c      	b.n	800c70e <HAL_TIM_PWM_Start+0x9e>
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2b04      	cmp	r3, #4
 800c698:	d109      	bne.n	800c6ae <HAL_TIM_PWM_Start+0x3e>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	bf14      	ite	ne
 800c6a6:	2301      	movne	r3, #1
 800c6a8:	2300      	moveq	r3, #0
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	e02f      	b.n	800c70e <HAL_TIM_PWM_Start+0x9e>
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b08      	cmp	r3, #8
 800c6b2:	d109      	bne.n	800c6c8 <HAL_TIM_PWM_Start+0x58>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	bf14      	ite	ne
 800c6c0:	2301      	movne	r3, #1
 800c6c2:	2300      	moveq	r3, #0
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	e022      	b.n	800c70e <HAL_TIM_PWM_Start+0x9e>
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2b0c      	cmp	r3, #12
 800c6cc:	d109      	bne.n	800c6e2 <HAL_TIM_PWM_Start+0x72>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	bf14      	ite	ne
 800c6da:	2301      	movne	r3, #1
 800c6dc:	2300      	moveq	r3, #0
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	e015      	b.n	800c70e <HAL_TIM_PWM_Start+0x9e>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	2b10      	cmp	r3, #16
 800c6e6:	d109      	bne.n	800c6fc <HAL_TIM_PWM_Start+0x8c>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	bf14      	ite	ne
 800c6f4:	2301      	movne	r3, #1
 800c6f6:	2300      	moveq	r3, #0
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	e008      	b.n	800c70e <HAL_TIM_PWM_Start+0x9e>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b01      	cmp	r3, #1
 800c706:	bf14      	ite	ne
 800c708:	2301      	movne	r3, #1
 800c70a:	2300      	moveq	r3, #0
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d001      	beq.n	800c716 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	e0a1      	b.n	800c85a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d104      	bne.n	800c726 <HAL_TIM_PWM_Start+0xb6>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2202      	movs	r2, #2
 800c720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c724:	e023      	b.n	800c76e <HAL_TIM_PWM_Start+0xfe>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b04      	cmp	r3, #4
 800c72a:	d104      	bne.n	800c736 <HAL_TIM_PWM_Start+0xc6>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2202      	movs	r2, #2
 800c730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c734:	e01b      	b.n	800c76e <HAL_TIM_PWM_Start+0xfe>
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2b08      	cmp	r3, #8
 800c73a:	d104      	bne.n	800c746 <HAL_TIM_PWM_Start+0xd6>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2202      	movs	r2, #2
 800c740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c744:	e013      	b.n	800c76e <HAL_TIM_PWM_Start+0xfe>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	2b0c      	cmp	r3, #12
 800c74a:	d104      	bne.n	800c756 <HAL_TIM_PWM_Start+0xe6>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2202      	movs	r2, #2
 800c750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c754:	e00b      	b.n	800c76e <HAL_TIM_PWM_Start+0xfe>
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2b10      	cmp	r3, #16
 800c75a:	d104      	bne.n	800c766 <HAL_TIM_PWM_Start+0xf6>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2202      	movs	r2, #2
 800c760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c764:	e003      	b.n	800c76e <HAL_TIM_PWM_Start+0xfe>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2202      	movs	r2, #2
 800c76a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2201      	movs	r2, #1
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	4618      	mov	r0, r3
 800c778:	f001 fba6 	bl	800dec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a38      	ldr	r2, [pc, #224]	; (800c864 <HAL_TIM_PWM_Start+0x1f4>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d013      	beq.n	800c7ae <HAL_TIM_PWM_Start+0x13e>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a37      	ldr	r2, [pc, #220]	; (800c868 <HAL_TIM_PWM_Start+0x1f8>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d00e      	beq.n	800c7ae <HAL_TIM_PWM_Start+0x13e>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a35      	ldr	r2, [pc, #212]	; (800c86c <HAL_TIM_PWM_Start+0x1fc>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d009      	beq.n	800c7ae <HAL_TIM_PWM_Start+0x13e>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a34      	ldr	r2, [pc, #208]	; (800c870 <HAL_TIM_PWM_Start+0x200>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d004      	beq.n	800c7ae <HAL_TIM_PWM_Start+0x13e>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a32      	ldr	r2, [pc, #200]	; (800c874 <HAL_TIM_PWM_Start+0x204>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d101      	bne.n	800c7b2 <HAL_TIM_PWM_Start+0x142>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e000      	b.n	800c7b4 <HAL_TIM_PWM_Start+0x144>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d007      	beq.n	800c7c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c7c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a25      	ldr	r2, [pc, #148]	; (800c864 <HAL_TIM_PWM_Start+0x1f4>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d022      	beq.n	800c818 <HAL_TIM_PWM_Start+0x1a8>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7da:	d01d      	beq.n	800c818 <HAL_TIM_PWM_Start+0x1a8>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a25      	ldr	r2, [pc, #148]	; (800c878 <HAL_TIM_PWM_Start+0x208>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d018      	beq.n	800c818 <HAL_TIM_PWM_Start+0x1a8>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a24      	ldr	r2, [pc, #144]	; (800c87c <HAL_TIM_PWM_Start+0x20c>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d013      	beq.n	800c818 <HAL_TIM_PWM_Start+0x1a8>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a22      	ldr	r2, [pc, #136]	; (800c880 <HAL_TIM_PWM_Start+0x210>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d00e      	beq.n	800c818 <HAL_TIM_PWM_Start+0x1a8>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a1a      	ldr	r2, [pc, #104]	; (800c868 <HAL_TIM_PWM_Start+0x1f8>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d009      	beq.n	800c818 <HAL_TIM_PWM_Start+0x1a8>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a1e      	ldr	r2, [pc, #120]	; (800c884 <HAL_TIM_PWM_Start+0x214>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d004      	beq.n	800c818 <HAL_TIM_PWM_Start+0x1a8>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a16      	ldr	r2, [pc, #88]	; (800c86c <HAL_TIM_PWM_Start+0x1fc>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d115      	bne.n	800c844 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	689a      	ldr	r2, [r3, #8]
 800c81e:	4b1a      	ldr	r3, [pc, #104]	; (800c888 <HAL_TIM_PWM_Start+0x218>)
 800c820:	4013      	ands	r3, r2
 800c822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2b06      	cmp	r3, #6
 800c828:	d015      	beq.n	800c856 <HAL_TIM_PWM_Start+0x1e6>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c830:	d011      	beq.n	800c856 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f042 0201 	orr.w	r2, r2, #1
 800c840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c842:	e008      	b.n	800c856 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f042 0201 	orr.w	r2, r2, #1
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	e000      	b.n	800c858 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c856:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	40010000 	.word	0x40010000
 800c868:	40010400 	.word	0x40010400
 800c86c:	40014000 	.word	0x40014000
 800c870:	40014400 	.word	0x40014400
 800c874:	40014800 	.word	0x40014800
 800c878:	40000400 	.word	0x40000400
 800c87c:	40000800 	.word	0x40000800
 800c880:	40000c00 	.word	0x40000c00
 800c884:	40001800 	.word	0x40001800
 800c888:	00010007 	.word	0x00010007

0800c88c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e049      	b.n	800c932 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f841 	bl	800c93a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4610      	mov	r0, r2
 800c8cc:	f000 fdc4 	bl	800d458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c942:	bf00      	nop
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
	...

0800c950 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d104      	bne.n	800c96e <HAL_TIM_IC_Start_IT+0x1e>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	e023      	b.n	800c9b6 <HAL_TIM_IC_Start_IT+0x66>
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b04      	cmp	r3, #4
 800c972:	d104      	bne.n	800c97e <HAL_TIM_IC_Start_IT+0x2e>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	e01b      	b.n	800c9b6 <HAL_TIM_IC_Start_IT+0x66>
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	2b08      	cmp	r3, #8
 800c982:	d104      	bne.n	800c98e <HAL_TIM_IC_Start_IT+0x3e>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	e013      	b.n	800c9b6 <HAL_TIM_IC_Start_IT+0x66>
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2b0c      	cmp	r3, #12
 800c992:	d104      	bne.n	800c99e <HAL_TIM_IC_Start_IT+0x4e>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	e00b      	b.n	800c9b6 <HAL_TIM_IC_Start_IT+0x66>
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2b10      	cmp	r3, #16
 800c9a2:	d104      	bne.n	800c9ae <HAL_TIM_IC_Start_IT+0x5e>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	e003      	b.n	800c9b6 <HAL_TIM_IC_Start_IT+0x66>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d104      	bne.n	800c9c8 <HAL_TIM_IC_Start_IT+0x78>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	e013      	b.n	800c9f0 <HAL_TIM_IC_Start_IT+0xa0>
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	2b04      	cmp	r3, #4
 800c9cc:	d104      	bne.n	800c9d8 <HAL_TIM_IC_Start_IT+0x88>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	e00b      	b.n	800c9f0 <HAL_TIM_IC_Start_IT+0xa0>
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	2b08      	cmp	r3, #8
 800c9dc:	d104      	bne.n	800c9e8 <HAL_TIM_IC_Start_IT+0x98>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	e003      	b.n	800c9f0 <HAL_TIM_IC_Start_IT+0xa0>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c9f2:	7bbb      	ldrb	r3, [r7, #14]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d102      	bne.n	800c9fe <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c9f8:	7b7b      	ldrb	r3, [r7, #13]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d001      	beq.n	800ca02 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e0e2      	b.n	800cbc8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d104      	bne.n	800ca12 <HAL_TIM_IC_Start_IT+0xc2>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca10:	e023      	b.n	800ca5a <HAL_TIM_IC_Start_IT+0x10a>
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b04      	cmp	r3, #4
 800ca16:	d104      	bne.n	800ca22 <HAL_TIM_IC_Start_IT+0xd2>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca20:	e01b      	b.n	800ca5a <HAL_TIM_IC_Start_IT+0x10a>
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2b08      	cmp	r3, #8
 800ca26:	d104      	bne.n	800ca32 <HAL_TIM_IC_Start_IT+0xe2>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca30:	e013      	b.n	800ca5a <HAL_TIM_IC_Start_IT+0x10a>
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2b0c      	cmp	r3, #12
 800ca36:	d104      	bne.n	800ca42 <HAL_TIM_IC_Start_IT+0xf2>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca40:	e00b      	b.n	800ca5a <HAL_TIM_IC_Start_IT+0x10a>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b10      	cmp	r3, #16
 800ca46:	d104      	bne.n	800ca52 <HAL_TIM_IC_Start_IT+0x102>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2202      	movs	r2, #2
 800ca4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca50:	e003      	b.n	800ca5a <HAL_TIM_IC_Start_IT+0x10a>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2202      	movs	r2, #2
 800ca56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d104      	bne.n	800ca6a <HAL_TIM_IC_Start_IT+0x11a>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2202      	movs	r2, #2
 800ca64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca68:	e013      	b.n	800ca92 <HAL_TIM_IC_Start_IT+0x142>
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	2b04      	cmp	r3, #4
 800ca6e:	d104      	bne.n	800ca7a <HAL_TIM_IC_Start_IT+0x12a>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca78:	e00b      	b.n	800ca92 <HAL_TIM_IC_Start_IT+0x142>
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b08      	cmp	r3, #8
 800ca7e:	d104      	bne.n	800ca8a <HAL_TIM_IC_Start_IT+0x13a>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2202      	movs	r2, #2
 800ca84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca88:	e003      	b.n	800ca92 <HAL_TIM_IC_Start_IT+0x142>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b0c      	cmp	r3, #12
 800ca96:	d841      	bhi.n	800cb1c <HAL_TIM_IC_Start_IT+0x1cc>
 800ca98:	a201      	add	r2, pc, #4	; (adr r2, 800caa0 <HAL_TIM_IC_Start_IT+0x150>)
 800ca9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9e:	bf00      	nop
 800caa0:	0800cad5 	.word	0x0800cad5
 800caa4:	0800cb1d 	.word	0x0800cb1d
 800caa8:	0800cb1d 	.word	0x0800cb1d
 800caac:	0800cb1d 	.word	0x0800cb1d
 800cab0:	0800cae7 	.word	0x0800cae7
 800cab4:	0800cb1d 	.word	0x0800cb1d
 800cab8:	0800cb1d 	.word	0x0800cb1d
 800cabc:	0800cb1d 	.word	0x0800cb1d
 800cac0:	0800caf9 	.word	0x0800caf9
 800cac4:	0800cb1d 	.word	0x0800cb1d
 800cac8:	0800cb1d 	.word	0x0800cb1d
 800cacc:	0800cb1d 	.word	0x0800cb1d
 800cad0:	0800cb0b 	.word	0x0800cb0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68da      	ldr	r2, [r3, #12]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f042 0202 	orr.w	r2, r2, #2
 800cae2:	60da      	str	r2, [r3, #12]
      break;
 800cae4:	e01d      	b.n	800cb22 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68da      	ldr	r2, [r3, #12]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f042 0204 	orr.w	r2, r2, #4
 800caf4:	60da      	str	r2, [r3, #12]
      break;
 800caf6:	e014      	b.n	800cb22 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68da      	ldr	r2, [r3, #12]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f042 0208 	orr.w	r2, r2, #8
 800cb06:	60da      	str	r2, [r3, #12]
      break;
 800cb08:	e00b      	b.n	800cb22 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68da      	ldr	r2, [r3, #12]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f042 0210 	orr.w	r2, r2, #16
 800cb18:	60da      	str	r2, [r3, #12]
      break;
 800cb1a:	e002      	b.n	800cb22 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	73fb      	strb	r3, [r7, #15]
      break;
 800cb20:	bf00      	nop
  }

  if (status == HAL_OK)
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d14e      	bne.n	800cbc6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	6839      	ldr	r1, [r7, #0]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 f9c9 	bl	800dec8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a25      	ldr	r2, [pc, #148]	; (800cbd0 <HAL_TIM_IC_Start_IT+0x280>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d022      	beq.n	800cb86 <HAL_TIM_IC_Start_IT+0x236>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb48:	d01d      	beq.n	800cb86 <HAL_TIM_IC_Start_IT+0x236>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a21      	ldr	r2, [pc, #132]	; (800cbd4 <HAL_TIM_IC_Start_IT+0x284>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d018      	beq.n	800cb86 <HAL_TIM_IC_Start_IT+0x236>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a1f      	ldr	r2, [pc, #124]	; (800cbd8 <HAL_TIM_IC_Start_IT+0x288>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d013      	beq.n	800cb86 <HAL_TIM_IC_Start_IT+0x236>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a1e      	ldr	r2, [pc, #120]	; (800cbdc <HAL_TIM_IC_Start_IT+0x28c>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d00e      	beq.n	800cb86 <HAL_TIM_IC_Start_IT+0x236>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a1c      	ldr	r2, [pc, #112]	; (800cbe0 <HAL_TIM_IC_Start_IT+0x290>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d009      	beq.n	800cb86 <HAL_TIM_IC_Start_IT+0x236>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a1b      	ldr	r2, [pc, #108]	; (800cbe4 <HAL_TIM_IC_Start_IT+0x294>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d004      	beq.n	800cb86 <HAL_TIM_IC_Start_IT+0x236>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a19      	ldr	r2, [pc, #100]	; (800cbe8 <HAL_TIM_IC_Start_IT+0x298>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d115      	bne.n	800cbb2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	689a      	ldr	r2, [r3, #8]
 800cb8c:	4b17      	ldr	r3, [pc, #92]	; (800cbec <HAL_TIM_IC_Start_IT+0x29c>)
 800cb8e:	4013      	ands	r3, r2
 800cb90:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	2b06      	cmp	r3, #6
 800cb96:	d015      	beq.n	800cbc4 <HAL_TIM_IC_Start_IT+0x274>
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb9e:	d011      	beq.n	800cbc4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f042 0201 	orr.w	r2, r2, #1
 800cbae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbb0:	e008      	b.n	800cbc4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f042 0201 	orr.w	r2, r2, #1
 800cbc0:	601a      	str	r2, [r3, #0]
 800cbc2:	e000      	b.n	800cbc6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbc4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	40010000 	.word	0x40010000
 800cbd4:	40000400 	.word	0x40000400
 800cbd8:	40000800 	.word	0x40000800
 800cbdc:	40000c00 	.word	0x40000c00
 800cbe0:	40010400 	.word	0x40010400
 800cbe4:	40001800 	.word	0x40001800
 800cbe8:	40014000 	.word	0x40014000
 800cbec:	00010007 	.word	0x00010007

0800cbf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	f003 0302 	and.w	r3, r3, #2
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d122      	bne.n	800cc4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f003 0302 	and.w	r3, r3, #2
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	d11b      	bne.n	800cc4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f06f 0202 	mvn.w	r2, #2
 800cc1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2201      	movs	r2, #1
 800cc22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	f003 0303 	and.w	r3, r3, #3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d003      	beq.n	800cc3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7f5 fcac 	bl	8002590 <HAL_TIM_IC_CaptureCallback>
 800cc38:	e005      	b.n	800cc46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fbee 	bl	800d41c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fbf5 	bl	800d430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	f003 0304 	and.w	r3, r3, #4
 800cc56:	2b04      	cmp	r3, #4
 800cc58:	d122      	bne.n	800cca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	f003 0304 	and.w	r3, r3, #4
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d11b      	bne.n	800cca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f06f 0204 	mvn.w	r2, #4
 800cc70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2202      	movs	r2, #2
 800cc76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	699b      	ldr	r3, [r3, #24]
 800cc7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d003      	beq.n	800cc8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7f5 fc82 	bl	8002590 <HAL_TIM_IC_CaptureCallback>
 800cc8c:	e005      	b.n	800cc9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 fbc4 	bl	800d41c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 fbcb 	bl	800d430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	f003 0308 	and.w	r3, r3, #8
 800ccaa:	2b08      	cmp	r3, #8
 800ccac:	d122      	bne.n	800ccf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	f003 0308 	and.w	r3, r3, #8
 800ccb8:	2b08      	cmp	r3, #8
 800ccba:	d11b      	bne.n	800ccf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f06f 0208 	mvn.w	r2, #8
 800ccc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2204      	movs	r2, #4
 800ccca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	69db      	ldr	r3, [r3, #28]
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7f5 fc58 	bl	8002590 <HAL_TIM_IC_CaptureCallback>
 800cce0:	e005      	b.n	800ccee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fb9a 	bl	800d41c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 fba1 	bl	800d430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	f003 0310 	and.w	r3, r3, #16
 800ccfe:	2b10      	cmp	r3, #16
 800cd00:	d122      	bne.n	800cd48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	f003 0310 	and.w	r3, r3, #16
 800cd0c:	2b10      	cmp	r3, #16
 800cd0e:	d11b      	bne.n	800cd48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f06f 0210 	mvn.w	r2, #16
 800cd18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2208      	movs	r2, #8
 800cd1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	69db      	ldr	r3, [r3, #28]
 800cd26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d003      	beq.n	800cd36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7f5 fc2e 	bl	8002590 <HAL_TIM_IC_CaptureCallback>
 800cd34:	e005      	b.n	800cd42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fb70 	bl	800d41c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 fb77 	bl	800d430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	f003 0301 	and.w	r3, r3, #1
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d10e      	bne.n	800cd74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	f003 0301 	and.w	r3, r3, #1
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d107      	bne.n	800cd74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f06f 0201 	mvn.w	r2, #1
 800cd6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fb4a 	bl	800d408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd7e:	2b80      	cmp	r3, #128	; 0x80
 800cd80:	d10e      	bne.n	800cda0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68db      	ldr	r3, [r3, #12]
 800cd88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd8c:	2b80      	cmp	r3, #128	; 0x80
 800cd8e:	d107      	bne.n	800cda0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f001 f952 	bl	800e044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdae:	d10e      	bne.n	800cdce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdba:	2b80      	cmp	r3, #128	; 0x80
 800cdbc:	d107      	bne.n	800cdce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cdc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f001 f945 	bl	800e058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd8:	2b40      	cmp	r3, #64	; 0x40
 800cdda:	d10e      	bne.n	800cdfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cde6:	2b40      	cmp	r3, #64	; 0x40
 800cde8:	d107      	bne.n	800cdfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cdf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 fb25 	bl	800d444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	f003 0320 	and.w	r3, r3, #32
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	d10e      	bne.n	800ce26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	f003 0320 	and.w	r3, r3, #32
 800ce12:	2b20      	cmp	r3, #32
 800ce14:	d107      	bne.n	800ce26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f06f 0220 	mvn.w	r2, #32
 800ce1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f001 f905 	bl	800e030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce26:	bf00      	nop
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b086      	sub	sp, #24
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	60f8      	str	r0, [r7, #12]
 800ce36:	60b9      	str	r1, [r7, #8]
 800ce38:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d101      	bne.n	800ce4c <HAL_TIM_IC_ConfigChannel+0x1e>
 800ce48:	2302      	movs	r3, #2
 800ce4a:	e088      	b.n	800cf5e <HAL_TIM_IC_ConfigChannel+0x130>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d11b      	bne.n	800ce92 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6818      	ldr	r0, [r3, #0]
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	6819      	ldr	r1, [r3, #0]
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	f000 fe65 	bl	800db38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	699a      	ldr	r2, [r3, #24]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f022 020c 	bic.w	r2, r2, #12
 800ce7c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	6999      	ldr	r1, [r3, #24]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	689a      	ldr	r2, [r3, #8]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	430a      	orrs	r2, r1
 800ce8e:	619a      	str	r2, [r3, #24]
 800ce90:	e060      	b.n	800cf54 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2b04      	cmp	r3, #4
 800ce96:	d11c      	bne.n	800ced2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6818      	ldr	r0, [r3, #0]
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	6819      	ldr	r1, [r3, #0]
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	f000 fee9 	bl	800dc7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	699a      	ldr	r2, [r3, #24]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ceba:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6999      	ldr	r1, [r3, #24]
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	021a      	lsls	r2, r3, #8
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	430a      	orrs	r2, r1
 800cece:	619a      	str	r2, [r3, #24]
 800ced0:	e040      	b.n	800cf54 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b08      	cmp	r3, #8
 800ced6:	d11b      	bne.n	800cf10 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6818      	ldr	r0, [r3, #0]
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	6819      	ldr	r1, [r3, #0]
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	685a      	ldr	r2, [r3, #4]
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	f000 ff36 	bl	800dd58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	69da      	ldr	r2, [r3, #28]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f022 020c 	bic.w	r2, r2, #12
 800cefa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	69d9      	ldr	r1, [r3, #28]
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	689a      	ldr	r2, [r3, #8]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	430a      	orrs	r2, r1
 800cf0c:	61da      	str	r2, [r3, #28]
 800cf0e:	e021      	b.n	800cf54 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b0c      	cmp	r3, #12
 800cf14:	d11c      	bne.n	800cf50 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6818      	ldr	r0, [r3, #0]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	6819      	ldr	r1, [r3, #0]
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	685a      	ldr	r2, [r3, #4]
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	f000 ff53 	bl	800ddd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	69da      	ldr	r2, [r3, #28]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cf38:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	69d9      	ldr	r1, [r3, #28]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	021a      	lsls	r2, r3, #8
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	430a      	orrs	r2, r1
 800cf4c:	61da      	str	r2, [r3, #28]
 800cf4e:	e001      	b.n	800cf54 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
	...

0800cf68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf74:	2300      	movs	r3, #0
 800cf76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d101      	bne.n	800cf86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cf82:	2302      	movs	r3, #2
 800cf84:	e0ff      	b.n	800d186 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b14      	cmp	r3, #20
 800cf92:	f200 80f0 	bhi.w	800d176 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cf96:	a201      	add	r2, pc, #4	; (adr r2, 800cf9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9c:	0800cff1 	.word	0x0800cff1
 800cfa0:	0800d177 	.word	0x0800d177
 800cfa4:	0800d177 	.word	0x0800d177
 800cfa8:	0800d177 	.word	0x0800d177
 800cfac:	0800d031 	.word	0x0800d031
 800cfb0:	0800d177 	.word	0x0800d177
 800cfb4:	0800d177 	.word	0x0800d177
 800cfb8:	0800d177 	.word	0x0800d177
 800cfbc:	0800d073 	.word	0x0800d073
 800cfc0:	0800d177 	.word	0x0800d177
 800cfc4:	0800d177 	.word	0x0800d177
 800cfc8:	0800d177 	.word	0x0800d177
 800cfcc:	0800d0b3 	.word	0x0800d0b3
 800cfd0:	0800d177 	.word	0x0800d177
 800cfd4:	0800d177 	.word	0x0800d177
 800cfd8:	0800d177 	.word	0x0800d177
 800cfdc:	0800d0f5 	.word	0x0800d0f5
 800cfe0:	0800d177 	.word	0x0800d177
 800cfe4:	0800d177 	.word	0x0800d177
 800cfe8:	0800d177 	.word	0x0800d177
 800cfec:	0800d135 	.word	0x0800d135
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68b9      	ldr	r1, [r7, #8]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 fac8 	bl	800d58c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	699a      	ldr	r2, [r3, #24]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f042 0208 	orr.w	r2, r2, #8
 800d00a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	699a      	ldr	r2, [r3, #24]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f022 0204 	bic.w	r2, r2, #4
 800d01a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6999      	ldr	r1, [r3, #24]
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	691a      	ldr	r2, [r3, #16]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	430a      	orrs	r2, r1
 800d02c:	619a      	str	r2, [r3, #24]
      break;
 800d02e:	e0a5      	b.n	800d17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	68b9      	ldr	r1, [r7, #8]
 800d036:	4618      	mov	r0, r3
 800d038:	f000 fb38 	bl	800d6ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	699a      	ldr	r2, [r3, #24]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d04a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	699a      	ldr	r2, [r3, #24]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d05a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6999      	ldr	r1, [r3, #24]
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	021a      	lsls	r2, r3, #8
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	430a      	orrs	r2, r1
 800d06e:	619a      	str	r2, [r3, #24]
      break;
 800d070:	e084      	b.n	800d17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	4618      	mov	r0, r3
 800d07a:	f000 fba1 	bl	800d7c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	69da      	ldr	r2, [r3, #28]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f042 0208 	orr.w	r2, r2, #8
 800d08c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	69da      	ldr	r2, [r3, #28]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f022 0204 	bic.w	r2, r2, #4
 800d09c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	69d9      	ldr	r1, [r3, #28]
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	691a      	ldr	r2, [r3, #16]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	61da      	str	r2, [r3, #28]
      break;
 800d0b0:	e064      	b.n	800d17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68b9      	ldr	r1, [r7, #8]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f000 fc09 	bl	800d8d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	69da      	ldr	r2, [r3, #28]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	69da      	ldr	r2, [r3, #28]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d0dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	69d9      	ldr	r1, [r3, #28]
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	021a      	lsls	r2, r3, #8
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	61da      	str	r2, [r3, #28]
      break;
 800d0f2:	e043      	b.n	800d17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68b9      	ldr	r1, [r7, #8]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 fc52 	bl	800d9a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f042 0208 	orr.w	r2, r2, #8
 800d10e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f022 0204 	bic.w	r2, r2, #4
 800d11e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	691a      	ldr	r2, [r3, #16]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	430a      	orrs	r2, r1
 800d130:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d132:	e023      	b.n	800d17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68b9      	ldr	r1, [r7, #8]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 fc96 	bl	800da6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d14e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d15e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	021a      	lsls	r2, r3, #8
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	430a      	orrs	r2, r1
 800d172:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d174:	e002      	b.n	800d17c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d176:	2301      	movs	r3, #1
 800d178:	75fb      	strb	r3, [r7, #23]
      break;
 800d17a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d184:	7dfb      	ldrb	r3, [r7, #23]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3718      	adds	r7, #24
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop

0800d190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d101      	bne.n	800d1ac <HAL_TIM_ConfigClockSource+0x1c>
 800d1a8:	2302      	movs	r3, #2
 800d1aa:	e0dc      	b.n	800d366 <HAL_TIM_ConfigClockSource+0x1d6>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	4b6a      	ldr	r3, [pc, #424]	; (800d370 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d1d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a64      	ldr	r2, [pc, #400]	; (800d374 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	f000 80a9 	beq.w	800d33a <HAL_TIM_ConfigClockSource+0x1aa>
 800d1e8:	4a62      	ldr	r2, [pc, #392]	; (800d374 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	f200 80ae 	bhi.w	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d1f0:	4a61      	ldr	r2, [pc, #388]	; (800d378 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	f000 80a1 	beq.w	800d33a <HAL_TIM_ConfigClockSource+0x1aa>
 800d1f8:	4a5f      	ldr	r2, [pc, #380]	; (800d378 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	f200 80a6 	bhi.w	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d200:	4a5e      	ldr	r2, [pc, #376]	; (800d37c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d202:	4293      	cmp	r3, r2
 800d204:	f000 8099 	beq.w	800d33a <HAL_TIM_ConfigClockSource+0x1aa>
 800d208:	4a5c      	ldr	r2, [pc, #368]	; (800d37c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	f200 809e 	bhi.w	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d210:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d214:	f000 8091 	beq.w	800d33a <HAL_TIM_ConfigClockSource+0x1aa>
 800d218:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d21c:	f200 8096 	bhi.w	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d224:	f000 8089 	beq.w	800d33a <HAL_TIM_ConfigClockSource+0x1aa>
 800d228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d22c:	f200 808e 	bhi.w	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d234:	d03e      	beq.n	800d2b4 <HAL_TIM_ConfigClockSource+0x124>
 800d236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d23a:	f200 8087 	bhi.w	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d23e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d242:	f000 8086 	beq.w	800d352 <HAL_TIM_ConfigClockSource+0x1c2>
 800d246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d24a:	d87f      	bhi.n	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d24c:	2b70      	cmp	r3, #112	; 0x70
 800d24e:	d01a      	beq.n	800d286 <HAL_TIM_ConfigClockSource+0xf6>
 800d250:	2b70      	cmp	r3, #112	; 0x70
 800d252:	d87b      	bhi.n	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d254:	2b60      	cmp	r3, #96	; 0x60
 800d256:	d050      	beq.n	800d2fa <HAL_TIM_ConfigClockSource+0x16a>
 800d258:	2b60      	cmp	r3, #96	; 0x60
 800d25a:	d877      	bhi.n	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d25c:	2b50      	cmp	r3, #80	; 0x50
 800d25e:	d03c      	beq.n	800d2da <HAL_TIM_ConfigClockSource+0x14a>
 800d260:	2b50      	cmp	r3, #80	; 0x50
 800d262:	d873      	bhi.n	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d264:	2b40      	cmp	r3, #64	; 0x40
 800d266:	d058      	beq.n	800d31a <HAL_TIM_ConfigClockSource+0x18a>
 800d268:	2b40      	cmp	r3, #64	; 0x40
 800d26a:	d86f      	bhi.n	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d26c:	2b30      	cmp	r3, #48	; 0x30
 800d26e:	d064      	beq.n	800d33a <HAL_TIM_ConfigClockSource+0x1aa>
 800d270:	2b30      	cmp	r3, #48	; 0x30
 800d272:	d86b      	bhi.n	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d274:	2b20      	cmp	r3, #32
 800d276:	d060      	beq.n	800d33a <HAL_TIM_ConfigClockSource+0x1aa>
 800d278:	2b20      	cmp	r3, #32
 800d27a:	d867      	bhi.n	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d05c      	beq.n	800d33a <HAL_TIM_ConfigClockSource+0x1aa>
 800d280:	2b10      	cmp	r3, #16
 800d282:	d05a      	beq.n	800d33a <HAL_TIM_ConfigClockSource+0x1aa>
 800d284:	e062      	b.n	800d34c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6818      	ldr	r0, [r3, #0]
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	6899      	ldr	r1, [r3, #8]
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	685a      	ldr	r2, [r3, #4]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	f000 fdf7 	bl	800de88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d2a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	609a      	str	r2, [r3, #8]
      break;
 800d2b2:	e04f      	b.n	800d354 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	6899      	ldr	r1, [r3, #8]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	685a      	ldr	r2, [r3, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	f000 fde0 	bl	800de88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	689a      	ldr	r2, [r3, #8]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2d6:	609a      	str	r2, [r3, #8]
      break;
 800d2d8:	e03c      	b.n	800d354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6818      	ldr	r0, [r3, #0]
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	6859      	ldr	r1, [r3, #4]
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	f000 fc9a 	bl	800dc20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2150      	movs	r1, #80	; 0x50
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 fdaa 	bl	800de4c <TIM_ITRx_SetConfig>
      break;
 800d2f8:	e02c      	b.n	800d354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6818      	ldr	r0, [r3, #0]
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	6859      	ldr	r1, [r3, #4]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	461a      	mov	r2, r3
 800d308:	f000 fcf6 	bl	800dcf8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2160      	movs	r1, #96	; 0x60
 800d312:	4618      	mov	r0, r3
 800d314:	f000 fd9a 	bl	800de4c <TIM_ITRx_SetConfig>
      break;
 800d318:	e01c      	b.n	800d354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6818      	ldr	r0, [r3, #0]
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	6859      	ldr	r1, [r3, #4]
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	461a      	mov	r2, r3
 800d328:	f000 fc7a 	bl	800dc20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2140      	movs	r1, #64	; 0x40
 800d332:	4618      	mov	r0, r3
 800d334:	f000 fd8a 	bl	800de4c <TIM_ITRx_SetConfig>
      break;
 800d338:	e00c      	b.n	800d354 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4619      	mov	r1, r3
 800d344:	4610      	mov	r0, r2
 800d346:	f000 fd81 	bl	800de4c <TIM_ITRx_SetConfig>
      break;
 800d34a:	e003      	b.n	800d354 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d34c:	2301      	movs	r3, #1
 800d34e:	73fb      	strb	r3, [r7, #15]
      break;
 800d350:	e000      	b.n	800d354 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d364:	7bfb      	ldrb	r3, [r7, #15]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	ffceff88 	.word	0xffceff88
 800d374:	00100040 	.word	0x00100040
 800d378:	00100030 	.word	0x00100030
 800d37c:	00100020 	.word	0x00100020

0800d380 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d38a:	2300      	movs	r3, #0
 800d38c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2b0c      	cmp	r3, #12
 800d392:	d831      	bhi.n	800d3f8 <HAL_TIM_ReadCapturedValue+0x78>
 800d394:	a201      	add	r2, pc, #4	; (adr r2, 800d39c <HAL_TIM_ReadCapturedValue+0x1c>)
 800d396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39a:	bf00      	nop
 800d39c:	0800d3d1 	.word	0x0800d3d1
 800d3a0:	0800d3f9 	.word	0x0800d3f9
 800d3a4:	0800d3f9 	.word	0x0800d3f9
 800d3a8:	0800d3f9 	.word	0x0800d3f9
 800d3ac:	0800d3db 	.word	0x0800d3db
 800d3b0:	0800d3f9 	.word	0x0800d3f9
 800d3b4:	0800d3f9 	.word	0x0800d3f9
 800d3b8:	0800d3f9 	.word	0x0800d3f9
 800d3bc:	0800d3e5 	.word	0x0800d3e5
 800d3c0:	0800d3f9 	.word	0x0800d3f9
 800d3c4:	0800d3f9 	.word	0x0800d3f9
 800d3c8:	0800d3f9 	.word	0x0800d3f9
 800d3cc:	0800d3ef 	.word	0x0800d3ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d6:	60fb      	str	r3, [r7, #12]

      break;
 800d3d8:	e00f      	b.n	800d3fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e0:	60fb      	str	r3, [r7, #12]

      break;
 800d3e2:	e00a      	b.n	800d3fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ea:	60fb      	str	r3, [r7, #12]

      break;
 800d3ec:	e005      	b.n	800d3fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f4:	60fb      	str	r3, [r7, #12]

      break;
 800d3f6:	e000      	b.n	800d3fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800d3f8:	bf00      	nop
  }

  return tmpreg;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d424:	bf00      	nop
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d438:	bf00      	nop
 800d43a:	370c      	adds	r7, #12
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d44c:	bf00      	nop
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a40      	ldr	r2, [pc, #256]	; (800d56c <TIM_Base_SetConfig+0x114>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d013      	beq.n	800d498 <TIM_Base_SetConfig+0x40>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d476:	d00f      	beq.n	800d498 <TIM_Base_SetConfig+0x40>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a3d      	ldr	r2, [pc, #244]	; (800d570 <TIM_Base_SetConfig+0x118>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00b      	beq.n	800d498 <TIM_Base_SetConfig+0x40>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a3c      	ldr	r2, [pc, #240]	; (800d574 <TIM_Base_SetConfig+0x11c>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d007      	beq.n	800d498 <TIM_Base_SetConfig+0x40>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a3b      	ldr	r2, [pc, #236]	; (800d578 <TIM_Base_SetConfig+0x120>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d003      	beq.n	800d498 <TIM_Base_SetConfig+0x40>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a3a      	ldr	r2, [pc, #232]	; (800d57c <TIM_Base_SetConfig+0x124>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d108      	bne.n	800d4aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d49e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a2f      	ldr	r2, [pc, #188]	; (800d56c <TIM_Base_SetConfig+0x114>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d01f      	beq.n	800d4f2 <TIM_Base_SetConfig+0x9a>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4b8:	d01b      	beq.n	800d4f2 <TIM_Base_SetConfig+0x9a>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a2c      	ldr	r2, [pc, #176]	; (800d570 <TIM_Base_SetConfig+0x118>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d017      	beq.n	800d4f2 <TIM_Base_SetConfig+0x9a>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4a2b      	ldr	r2, [pc, #172]	; (800d574 <TIM_Base_SetConfig+0x11c>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d013      	beq.n	800d4f2 <TIM_Base_SetConfig+0x9a>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4a2a      	ldr	r2, [pc, #168]	; (800d578 <TIM_Base_SetConfig+0x120>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d00f      	beq.n	800d4f2 <TIM_Base_SetConfig+0x9a>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a29      	ldr	r2, [pc, #164]	; (800d57c <TIM_Base_SetConfig+0x124>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d00b      	beq.n	800d4f2 <TIM_Base_SetConfig+0x9a>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4a28      	ldr	r2, [pc, #160]	; (800d580 <TIM_Base_SetConfig+0x128>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d007      	beq.n	800d4f2 <TIM_Base_SetConfig+0x9a>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a27      	ldr	r2, [pc, #156]	; (800d584 <TIM_Base_SetConfig+0x12c>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d003      	beq.n	800d4f2 <TIM_Base_SetConfig+0x9a>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a26      	ldr	r2, [pc, #152]	; (800d588 <TIM_Base_SetConfig+0x130>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d108      	bne.n	800d504 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	4313      	orrs	r3, r2
 800d502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	695b      	ldr	r3, [r3, #20]
 800d50e:	4313      	orrs	r3, r2
 800d510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	689a      	ldr	r2, [r3, #8]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4a10      	ldr	r2, [pc, #64]	; (800d56c <TIM_Base_SetConfig+0x114>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d00f      	beq.n	800d550 <TIM_Base_SetConfig+0xf8>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4a12      	ldr	r2, [pc, #72]	; (800d57c <TIM_Base_SetConfig+0x124>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d00b      	beq.n	800d550 <TIM_Base_SetConfig+0xf8>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4a11      	ldr	r2, [pc, #68]	; (800d580 <TIM_Base_SetConfig+0x128>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d007      	beq.n	800d550 <TIM_Base_SetConfig+0xf8>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a10      	ldr	r2, [pc, #64]	; (800d584 <TIM_Base_SetConfig+0x12c>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d003      	beq.n	800d550 <TIM_Base_SetConfig+0xf8>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4a0f      	ldr	r2, [pc, #60]	; (800d588 <TIM_Base_SetConfig+0x130>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d103      	bne.n	800d558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	691a      	ldr	r2, [r3, #16]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	615a      	str	r2, [r3, #20]
}
 800d55e:	bf00      	nop
 800d560:	3714      	adds	r7, #20
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	40010000 	.word	0x40010000
 800d570:	40000400 	.word	0x40000400
 800d574:	40000800 	.word	0x40000800
 800d578:	40000c00 	.word	0x40000c00
 800d57c:	40010400 	.word	0x40010400
 800d580:	40014000 	.word	0x40014000
 800d584:	40014400 	.word	0x40014400
 800d588:	40014800 	.word	0x40014800

0800d58c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b087      	sub	sp, #28
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	f023 0201 	bic.w	r2, r3, #1
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	4b37      	ldr	r3, [pc, #220]	; (800d694 <TIM_OC1_SetConfig+0x108>)
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f023 0303 	bic.w	r3, r3, #3
 800d5c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68fa      	ldr	r2, [r7, #12]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f023 0302 	bic.w	r3, r3, #2
 800d5d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	697a      	ldr	r2, [r7, #20]
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4a2d      	ldr	r2, [pc, #180]	; (800d698 <TIM_OC1_SetConfig+0x10c>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d00f      	beq.n	800d608 <TIM_OC1_SetConfig+0x7c>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	4a2c      	ldr	r2, [pc, #176]	; (800d69c <TIM_OC1_SetConfig+0x110>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d00b      	beq.n	800d608 <TIM_OC1_SetConfig+0x7c>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4a2b      	ldr	r2, [pc, #172]	; (800d6a0 <TIM_OC1_SetConfig+0x114>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d007      	beq.n	800d608 <TIM_OC1_SetConfig+0x7c>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4a2a      	ldr	r2, [pc, #168]	; (800d6a4 <TIM_OC1_SetConfig+0x118>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d003      	beq.n	800d608 <TIM_OC1_SetConfig+0x7c>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4a29      	ldr	r2, [pc, #164]	; (800d6a8 <TIM_OC1_SetConfig+0x11c>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d10c      	bne.n	800d622 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	f023 0308 	bic.w	r3, r3, #8
 800d60e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	697a      	ldr	r2, [r7, #20]
 800d616:	4313      	orrs	r3, r2
 800d618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	f023 0304 	bic.w	r3, r3, #4
 800d620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4a1c      	ldr	r2, [pc, #112]	; (800d698 <TIM_OC1_SetConfig+0x10c>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d00f      	beq.n	800d64a <TIM_OC1_SetConfig+0xbe>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4a1b      	ldr	r2, [pc, #108]	; (800d69c <TIM_OC1_SetConfig+0x110>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d00b      	beq.n	800d64a <TIM_OC1_SetConfig+0xbe>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4a1a      	ldr	r2, [pc, #104]	; (800d6a0 <TIM_OC1_SetConfig+0x114>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d007      	beq.n	800d64a <TIM_OC1_SetConfig+0xbe>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a19      	ldr	r2, [pc, #100]	; (800d6a4 <TIM_OC1_SetConfig+0x118>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d003      	beq.n	800d64a <TIM_OC1_SetConfig+0xbe>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4a18      	ldr	r2, [pc, #96]	; (800d6a8 <TIM_OC1_SetConfig+0x11c>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d111      	bne.n	800d66e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	4313      	orrs	r3, r2
 800d662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	697a      	ldr	r2, [r7, #20]
 800d686:	621a      	str	r2, [r3, #32]
}
 800d688:	bf00      	nop
 800d68a:	371c      	adds	r7, #28
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	fffeff8f 	.word	0xfffeff8f
 800d698:	40010000 	.word	0x40010000
 800d69c:	40010400 	.word	0x40010400
 800d6a0:	40014000 	.word	0x40014000
 800d6a4:	40014400 	.word	0x40014400
 800d6a8:	40014800 	.word	0x40014800

0800d6ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a1b      	ldr	r3, [r3, #32]
 800d6ba:	f023 0210 	bic.w	r2, r3, #16
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	4b34      	ldr	r3, [pc, #208]	; (800d7a8 <TIM_OC2_SetConfig+0xfc>)
 800d6d8:	4013      	ands	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	021b      	lsls	r3, r3, #8
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	f023 0320 	bic.w	r3, r3, #32
 800d6f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	011b      	lsls	r3, r3, #4
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	4313      	orrs	r3, r2
 800d702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a29      	ldr	r2, [pc, #164]	; (800d7ac <TIM_OC2_SetConfig+0x100>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d003      	beq.n	800d714 <TIM_OC2_SetConfig+0x68>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a28      	ldr	r2, [pc, #160]	; (800d7b0 <TIM_OC2_SetConfig+0x104>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d10d      	bne.n	800d730 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d71a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	011b      	lsls	r3, r3, #4
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	4313      	orrs	r3, r2
 800d726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d72e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	4a1e      	ldr	r2, [pc, #120]	; (800d7ac <TIM_OC2_SetConfig+0x100>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d00f      	beq.n	800d758 <TIM_OC2_SetConfig+0xac>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a1d      	ldr	r2, [pc, #116]	; (800d7b0 <TIM_OC2_SetConfig+0x104>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d00b      	beq.n	800d758 <TIM_OC2_SetConfig+0xac>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	4a1c      	ldr	r2, [pc, #112]	; (800d7b4 <TIM_OC2_SetConfig+0x108>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d007      	beq.n	800d758 <TIM_OC2_SetConfig+0xac>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a1b      	ldr	r2, [pc, #108]	; (800d7b8 <TIM_OC2_SetConfig+0x10c>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d003      	beq.n	800d758 <TIM_OC2_SetConfig+0xac>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a1a      	ldr	r2, [pc, #104]	; (800d7bc <TIM_OC2_SetConfig+0x110>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d113      	bne.n	800d780 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d75e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	695b      	ldr	r3, [r3, #20]
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	4313      	orrs	r3, r2
 800d772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	693a      	ldr	r2, [r7, #16]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	693a      	ldr	r2, [r7, #16]
 800d784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	621a      	str	r2, [r3, #32]
}
 800d79a:	bf00      	nop
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	feff8fff 	.word	0xfeff8fff
 800d7ac:	40010000 	.word	0x40010000
 800d7b0:	40010400 	.word	0x40010400
 800d7b4:	40014000 	.word	0x40014000
 800d7b8:	40014400 	.word	0x40014400
 800d7bc:	40014800 	.word	0x40014800

0800d7c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b087      	sub	sp, #28
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6a1b      	ldr	r3, [r3, #32]
 800d7ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6a1b      	ldr	r3, [r3, #32]
 800d7da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	69db      	ldr	r3, [r3, #28]
 800d7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	4b33      	ldr	r3, [pc, #204]	; (800d8b8 <TIM_OC3_SetConfig+0xf8>)
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f023 0303 	bic.w	r3, r3, #3
 800d7f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	4313      	orrs	r3, r2
 800d800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	697a      	ldr	r2, [r7, #20]
 800d812:	4313      	orrs	r3, r2
 800d814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a28      	ldr	r2, [pc, #160]	; (800d8bc <TIM_OC3_SetConfig+0xfc>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d003      	beq.n	800d826 <TIM_OC3_SetConfig+0x66>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a27      	ldr	r2, [pc, #156]	; (800d8c0 <TIM_OC3_SetConfig+0x100>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d10d      	bne.n	800d842 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d82c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	021b      	lsls	r3, r3, #8
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	4313      	orrs	r3, r2
 800d838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a1d      	ldr	r2, [pc, #116]	; (800d8bc <TIM_OC3_SetConfig+0xfc>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d00f      	beq.n	800d86a <TIM_OC3_SetConfig+0xaa>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	4a1c      	ldr	r2, [pc, #112]	; (800d8c0 <TIM_OC3_SetConfig+0x100>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d00b      	beq.n	800d86a <TIM_OC3_SetConfig+0xaa>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4a1b      	ldr	r2, [pc, #108]	; (800d8c4 <TIM_OC3_SetConfig+0x104>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d007      	beq.n	800d86a <TIM_OC3_SetConfig+0xaa>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a1a      	ldr	r2, [pc, #104]	; (800d8c8 <TIM_OC3_SetConfig+0x108>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d003      	beq.n	800d86a <TIM_OC3_SetConfig+0xaa>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4a19      	ldr	r2, [pc, #100]	; (800d8cc <TIM_OC3_SetConfig+0x10c>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d113      	bne.n	800d892 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	011b      	lsls	r3, r3, #4
 800d880:	693a      	ldr	r2, [r7, #16]
 800d882:	4313      	orrs	r3, r2
 800d884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	011b      	lsls	r3, r3, #4
 800d88c:	693a      	ldr	r2, [r7, #16]
 800d88e:	4313      	orrs	r3, r2
 800d890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	693a      	ldr	r2, [r7, #16]
 800d896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	685a      	ldr	r2, [r3, #4]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	697a      	ldr	r2, [r7, #20]
 800d8aa:	621a      	str	r2, [r3, #32]
}
 800d8ac:	bf00      	nop
 800d8ae:	371c      	adds	r7, #28
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	fffeff8f 	.word	0xfffeff8f
 800d8bc:	40010000 	.word	0x40010000
 800d8c0:	40010400 	.word	0x40010400
 800d8c4:	40014000 	.word	0x40014000
 800d8c8:	40014400 	.word	0x40014400
 800d8cc:	40014800 	.word	0x40014800

0800d8d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a1b      	ldr	r3, [r3, #32]
 800d8de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	69db      	ldr	r3, [r3, #28]
 800d8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	4b24      	ldr	r3, [pc, #144]	; (800d98c <TIM_OC4_SetConfig+0xbc>)
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	021b      	lsls	r3, r3, #8
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	4313      	orrs	r3, r2
 800d912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d91a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	031b      	lsls	r3, r3, #12
 800d922:	693a      	ldr	r2, [r7, #16]
 800d924:	4313      	orrs	r3, r2
 800d926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a19      	ldr	r2, [pc, #100]	; (800d990 <TIM_OC4_SetConfig+0xc0>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d00f      	beq.n	800d950 <TIM_OC4_SetConfig+0x80>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a18      	ldr	r2, [pc, #96]	; (800d994 <TIM_OC4_SetConfig+0xc4>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d00b      	beq.n	800d950 <TIM_OC4_SetConfig+0x80>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a17      	ldr	r2, [pc, #92]	; (800d998 <TIM_OC4_SetConfig+0xc8>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d007      	beq.n	800d950 <TIM_OC4_SetConfig+0x80>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a16      	ldr	r2, [pc, #88]	; (800d99c <TIM_OC4_SetConfig+0xcc>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d003      	beq.n	800d950 <TIM_OC4_SetConfig+0x80>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a15      	ldr	r2, [pc, #84]	; (800d9a0 <TIM_OC4_SetConfig+0xd0>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d109      	bne.n	800d964 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	695b      	ldr	r3, [r3, #20]
 800d95c:	019b      	lsls	r3, r3, #6
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	4313      	orrs	r3, r2
 800d962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	697a      	ldr	r2, [r7, #20]
 800d968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	685a      	ldr	r2, [r3, #4]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	693a      	ldr	r2, [r7, #16]
 800d97c:	621a      	str	r2, [r3, #32]
}
 800d97e:	bf00      	nop
 800d980:	371c      	adds	r7, #28
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	feff8fff 	.word	0xfeff8fff
 800d990:	40010000 	.word	0x40010000
 800d994:	40010400 	.word	0x40010400
 800d998:	40014000 	.word	0x40014000
 800d99c:	40014400 	.word	0x40014400
 800d9a0:	40014800 	.word	0x40014800

0800d9a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b087      	sub	sp, #28
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6a1b      	ldr	r3, [r3, #32]
 800d9b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	4b21      	ldr	r3, [pc, #132]	; (800da54 <TIM_OC5_SetConfig+0xb0>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d9e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	041b      	lsls	r3, r3, #16
 800d9ec:	693a      	ldr	r2, [r7, #16]
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4a18      	ldr	r2, [pc, #96]	; (800da58 <TIM_OC5_SetConfig+0xb4>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d00f      	beq.n	800da1a <TIM_OC5_SetConfig+0x76>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4a17      	ldr	r2, [pc, #92]	; (800da5c <TIM_OC5_SetConfig+0xb8>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d00b      	beq.n	800da1a <TIM_OC5_SetConfig+0x76>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	4a16      	ldr	r2, [pc, #88]	; (800da60 <TIM_OC5_SetConfig+0xbc>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d007      	beq.n	800da1a <TIM_OC5_SetConfig+0x76>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4a15      	ldr	r2, [pc, #84]	; (800da64 <TIM_OC5_SetConfig+0xc0>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d003      	beq.n	800da1a <TIM_OC5_SetConfig+0x76>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	4a14      	ldr	r2, [pc, #80]	; (800da68 <TIM_OC5_SetConfig+0xc4>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d109      	bne.n	800da2e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	021b      	lsls	r3, r3, #8
 800da28:	697a      	ldr	r2, [r7, #20]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	693a      	ldr	r2, [r7, #16]
 800da46:	621a      	str	r2, [r3, #32]
}
 800da48:	bf00      	nop
 800da4a:	371c      	adds	r7, #28
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr
 800da54:	fffeff8f 	.word	0xfffeff8f
 800da58:	40010000 	.word	0x40010000
 800da5c:	40010400 	.word	0x40010400
 800da60:	40014000 	.word	0x40014000
 800da64:	40014400 	.word	0x40014400
 800da68:	40014800 	.word	0x40014800

0800da6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b087      	sub	sp, #28
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6a1b      	ldr	r3, [r3, #32]
 800da7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	4b22      	ldr	r3, [pc, #136]	; (800db20 <TIM_OC6_SetConfig+0xb4>)
 800da98:	4013      	ands	r3, r2
 800da9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	021b      	lsls	r3, r3, #8
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	4313      	orrs	r3, r2
 800daa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800daae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	689b      	ldr	r3, [r3, #8]
 800dab4:	051b      	lsls	r3, r3, #20
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	4313      	orrs	r3, r2
 800daba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a19      	ldr	r2, [pc, #100]	; (800db24 <TIM_OC6_SetConfig+0xb8>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d00f      	beq.n	800dae4 <TIM_OC6_SetConfig+0x78>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4a18      	ldr	r2, [pc, #96]	; (800db28 <TIM_OC6_SetConfig+0xbc>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d00b      	beq.n	800dae4 <TIM_OC6_SetConfig+0x78>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a17      	ldr	r2, [pc, #92]	; (800db2c <TIM_OC6_SetConfig+0xc0>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d007      	beq.n	800dae4 <TIM_OC6_SetConfig+0x78>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a16      	ldr	r2, [pc, #88]	; (800db30 <TIM_OC6_SetConfig+0xc4>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d003      	beq.n	800dae4 <TIM_OC6_SetConfig+0x78>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a15      	ldr	r2, [pc, #84]	; (800db34 <TIM_OC6_SetConfig+0xc8>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d109      	bne.n	800daf8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800daea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	695b      	ldr	r3, [r3, #20]
 800daf0:	029b      	lsls	r3, r3, #10
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	4313      	orrs	r3, r2
 800daf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	697a      	ldr	r2, [r7, #20]
 800dafc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	693a      	ldr	r2, [r7, #16]
 800db10:	621a      	str	r2, [r3, #32]
}
 800db12:	bf00      	nop
 800db14:	371c      	adds	r7, #28
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	feff8fff 	.word	0xfeff8fff
 800db24:	40010000 	.word	0x40010000
 800db28:	40010400 	.word	0x40010400
 800db2c:	40014000 	.word	0x40014000
 800db30:	40014400 	.word	0x40014400
 800db34:	40014800 	.word	0x40014800

0800db38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800db38:	b480      	push	{r7}
 800db3a:	b087      	sub	sp, #28
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
 800db44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	6a1b      	ldr	r3, [r3, #32]
 800db4a:	f023 0201 	bic.w	r2, r3, #1
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	699b      	ldr	r3, [r3, #24]
 800db56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6a1b      	ldr	r3, [r3, #32]
 800db5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	4a28      	ldr	r2, [pc, #160]	; (800dc04 <TIM_TI1_SetConfig+0xcc>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d01b      	beq.n	800db9e <TIM_TI1_SetConfig+0x66>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db6c:	d017      	beq.n	800db9e <TIM_TI1_SetConfig+0x66>
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	4a25      	ldr	r2, [pc, #148]	; (800dc08 <TIM_TI1_SetConfig+0xd0>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d013      	beq.n	800db9e <TIM_TI1_SetConfig+0x66>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	4a24      	ldr	r2, [pc, #144]	; (800dc0c <TIM_TI1_SetConfig+0xd4>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d00f      	beq.n	800db9e <TIM_TI1_SetConfig+0x66>
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	4a23      	ldr	r2, [pc, #140]	; (800dc10 <TIM_TI1_SetConfig+0xd8>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d00b      	beq.n	800db9e <TIM_TI1_SetConfig+0x66>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	4a22      	ldr	r2, [pc, #136]	; (800dc14 <TIM_TI1_SetConfig+0xdc>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d007      	beq.n	800db9e <TIM_TI1_SetConfig+0x66>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	4a21      	ldr	r2, [pc, #132]	; (800dc18 <TIM_TI1_SetConfig+0xe0>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d003      	beq.n	800db9e <TIM_TI1_SetConfig+0x66>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	4a20      	ldr	r2, [pc, #128]	; (800dc1c <TIM_TI1_SetConfig+0xe4>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d101      	bne.n	800dba2 <TIM_TI1_SetConfig+0x6a>
 800db9e:	2301      	movs	r3, #1
 800dba0:	e000      	b.n	800dba4 <TIM_TI1_SetConfig+0x6c>
 800dba2:	2300      	movs	r3, #0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d008      	beq.n	800dbba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	f023 0303 	bic.w	r3, r3, #3
 800dbae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800dbb0:	697a      	ldr	r2, [r7, #20]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	617b      	str	r3, [r7, #20]
 800dbb8:	e003      	b.n	800dbc2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f043 0301 	orr.w	r3, r3, #1
 800dbc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dbc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	011b      	lsls	r3, r3, #4
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	697a      	ldr	r2, [r7, #20]
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	f023 030a 	bic.w	r3, r3, #10
 800dbdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	f003 030a 	and.w	r3, r3, #10
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	697a      	ldr	r2, [r7, #20]
 800dbee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	693a      	ldr	r2, [r7, #16]
 800dbf4:	621a      	str	r2, [r3, #32]
}
 800dbf6:	bf00      	nop
 800dbf8:	371c      	adds	r7, #28
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	40010000 	.word	0x40010000
 800dc08:	40000400 	.word	0x40000400
 800dc0c:	40000800 	.word	0x40000800
 800dc10:	40000c00 	.word	0x40000c00
 800dc14:	40010400 	.word	0x40010400
 800dc18:	40001800 	.word	0x40001800
 800dc1c:	40014000 	.word	0x40014000

0800dc20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6a1b      	ldr	r3, [r3, #32]
 800dc30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6a1b      	ldr	r3, [r3, #32]
 800dc36:	f023 0201 	bic.w	r2, r3, #1
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dc4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	011b      	lsls	r3, r3, #4
 800dc50:	693a      	ldr	r2, [r7, #16]
 800dc52:	4313      	orrs	r3, r2
 800dc54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	f023 030a 	bic.w	r3, r3, #10
 800dc5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc5e:	697a      	ldr	r2, [r7, #20]
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	693a      	ldr	r2, [r7, #16]
 800dc6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	697a      	ldr	r2, [r7, #20]
 800dc70:	621a      	str	r2, [r3, #32]
}
 800dc72:	bf00      	nop
 800dc74:	371c      	adds	r7, #28
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr

0800dc7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b087      	sub	sp, #28
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	60f8      	str	r0, [r7, #12]
 800dc86:	60b9      	str	r1, [r7, #8]
 800dc88:	607a      	str	r2, [r7, #4]
 800dc8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6a1b      	ldr	r3, [r3, #32]
 800dc90:	f023 0210 	bic.w	r2, r3, #16
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	021b      	lsls	r3, r3, #8
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dcbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	031b      	lsls	r3, r3, #12
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	697a      	ldr	r2, [r7, #20]
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dcd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	011b      	lsls	r3, r3, #4
 800dcd6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	693a      	ldr	r2, [r7, #16]
 800dcea:	621a      	str	r2, [r3, #32]
}
 800dcec:	bf00      	nop
 800dcee:	371c      	adds	r7, #28
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b087      	sub	sp, #28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6a1b      	ldr	r3, [r3, #32]
 800dd08:	f023 0210 	bic.w	r2, r3, #16
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	699b      	ldr	r3, [r3, #24]
 800dd14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6a1b      	ldr	r3, [r3, #32]
 800dd1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dd22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	031b      	lsls	r3, r3, #12
 800dd28:	697a      	ldr	r2, [r7, #20]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dd34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	011b      	lsls	r3, r3, #4
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	697a      	ldr	r2, [r7, #20]
 800dd44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	693a      	ldr	r2, [r7, #16]
 800dd4a:	621a      	str	r2, [r3, #32]
}
 800dd4c:	bf00      	nop
 800dd4e:	371c      	adds	r7, #28
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b087      	sub	sp, #28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	69db      	ldr	r3, [r3, #28]
 800dd76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6a1b      	ldr	r3, [r3, #32]
 800dd7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f023 0303 	bic.w	r3, r3, #3
 800dd84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	011b      	lsls	r3, r3, #4
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	697a      	ldr	r2, [r7, #20]
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800dda8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	021b      	lsls	r3, r3, #8
 800ddae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	697a      	ldr	r2, [r7, #20]
 800ddbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	693a      	ldr	r2, [r7, #16]
 800ddc2:	621a      	str	r2, [r3, #32]
}
 800ddc4:	bf00      	nop
 800ddc6:	371c      	adds	r7, #28
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b087      	sub	sp, #28
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
 800dddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	69db      	ldr	r3, [r3, #28]
 800ddee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6a1b      	ldr	r3, [r3, #32]
 800ddf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ddfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	021b      	lsls	r3, r3, #8
 800de02:	697a      	ldr	r2, [r7, #20]
 800de04:	4313      	orrs	r3, r2
 800de06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	031b      	lsls	r3, r3, #12
 800de14:	b29b      	uxth	r3, r3
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	4313      	orrs	r3, r2
 800de1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800de22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	031b      	lsls	r3, r3, #12
 800de28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800de2c:	693a      	ldr	r2, [r7, #16]
 800de2e:	4313      	orrs	r3, r2
 800de30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	697a      	ldr	r2, [r7, #20]
 800de36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	693a      	ldr	r2, [r7, #16]
 800de3c:	621a      	str	r2, [r3, #32]
}
 800de3e:	bf00      	nop
 800de40:	371c      	adds	r7, #28
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
	...

0800de4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	4b09      	ldr	r3, [pc, #36]	; (800de84 <TIM_ITRx_SetConfig+0x38>)
 800de60:	4013      	ands	r3, r2
 800de62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4313      	orrs	r3, r2
 800de6a:	f043 0307 	orr.w	r3, r3, #7
 800de6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	609a      	str	r2, [r3, #8]
}
 800de76:	bf00      	nop
 800de78:	3714      	adds	r7, #20
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	ffcfff8f 	.word	0xffcfff8f

0800de88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de88:	b480      	push	{r7}
 800de8a:	b087      	sub	sp, #28
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	021a      	lsls	r2, r3, #8
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	431a      	orrs	r2, r3
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	4313      	orrs	r3, r2
 800deb0:	697a      	ldr	r2, [r7, #20]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	609a      	str	r2, [r3, #8]
}
 800debc:	bf00      	nop
 800debe:	371c      	adds	r7, #28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dec8:	b480      	push	{r7}
 800deca:	b087      	sub	sp, #28
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	f003 031f 	and.w	r3, r3, #31
 800deda:	2201      	movs	r2, #1
 800dedc:	fa02 f303 	lsl.w	r3, r2, r3
 800dee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6a1a      	ldr	r2, [r3, #32]
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	43db      	mvns	r3, r3
 800deea:	401a      	ands	r2, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6a1a      	ldr	r2, [r3, #32]
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	f003 031f 	and.w	r3, r3, #31
 800defa:	6879      	ldr	r1, [r7, #4]
 800defc:	fa01 f303 	lsl.w	r3, r1, r3
 800df00:	431a      	orrs	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	621a      	str	r2, [r3, #32]
}
 800df06:	bf00      	nop
 800df08:	371c      	adds	r7, #28
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
	...

0800df14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df24:	2b01      	cmp	r3, #1
 800df26:	d101      	bne.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df28:	2302      	movs	r3, #2
 800df2a:	e06d      	b.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2202      	movs	r2, #2
 800df38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a30      	ldr	r2, [pc, #192]	; (800e014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d004      	beq.n	800df60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a2f      	ldr	r2, [pc, #188]	; (800e018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d108      	bne.n	800df72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	4313      	orrs	r3, r2
 800df70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	4313      	orrs	r3, r2
 800df82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a20      	ldr	r2, [pc, #128]	; (800e014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d022      	beq.n	800dfdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df9e:	d01d      	beq.n	800dfdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a1d      	ldr	r2, [pc, #116]	; (800e01c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d018      	beq.n	800dfdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a1c      	ldr	r2, [pc, #112]	; (800e020 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d013      	beq.n	800dfdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a1a      	ldr	r2, [pc, #104]	; (800e024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d00e      	beq.n	800dfdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a15      	ldr	r2, [pc, #84]	; (800e018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d009      	beq.n	800dfdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4a16      	ldr	r2, [pc, #88]	; (800e028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d004      	beq.n	800dfdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a15      	ldr	r2, [pc, #84]	; (800e02c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d10c      	bne.n	800dff6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	68ba      	ldr	r2, [r7, #8]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2201      	movs	r2, #1
 800dffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	40010000 	.word	0x40010000
 800e018:	40010400 	.word	0x40010400
 800e01c:	40000400 	.word	0x40000400
 800e020:	40000800 	.word	0x40000800
 800e024:	40000c00 	.word	0x40000c00
 800e028:	40001800 	.word	0x40001800
 800e02c:	40014000 	.word	0x40014000

0800e030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e060:	bf00      	nop
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d101      	bne.n	800e07e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800e07a:	2301      	movs	r3, #1
 800e07c:	e04a      	b.n	800e114 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e084:	2b00      	cmp	r3, #0
 800e086:	d106      	bne.n	800e096 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f7f4 f969 	bl	8002368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2224      	movs	r2, #36	; 0x24
 800e09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f022 0201 	bic.w	r2, r2, #1
 800e0ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fc9a 	bl	800e9e8 <UART_SetConfig>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d101      	bne.n	800e0be <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e02a      	b.n	800e114 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d002      	beq.n	800e0cc <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f001 f9f6 	bl	800f4b8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	685a      	ldr	r2, [r3, #4]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	689a      	ldr	r2, [r3, #8]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800e0ea:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	689a      	ldr	r2, [r3, #8]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f042 0208 	orr.w	r2, r2, #8
 800e0fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f042 0201 	orr.w	r2, r2, #1
 800e10a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f001 fa75 	bl	800f5fc <UART_CheckIdleState>
 800e112:	4603      	mov	r3, r0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b091      	sub	sp, #68	; 0x44
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	4613      	mov	r3, r2
 800e128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e130:	2b20      	cmp	r3, #32
 800e132:	f040 808c 	bne.w	800e24e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <HAL_UART_Transmit_IT+0x26>
 800e13c:	88fb      	ldrh	r3, [r7, #6]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d101      	bne.n	800e146 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	e084      	b.n	800e250 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d101      	bne.n	800e154 <HAL_UART_Transmit_IT+0x38>
 800e150:	2302      	movs	r3, #2
 800e152:	e07d      	b.n	800e250 <HAL_UART_Transmit_IT+0x134>
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2201      	movs	r2, #1
 800e158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	68ba      	ldr	r2, [r7, #8]
 800e160:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	88fa      	ldrh	r2, [r7, #6]
 800e166:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	88fa      	ldrh	r2, [r7, #6]
 800e16e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2221      	movs	r2, #33	; 0x21
 800e184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e18c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e190:	d12e      	bne.n	800e1f0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e19a:	d107      	bne.n	800e1ac <HAL_UART_Transmit_IT+0x90>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	691b      	ldr	r3, [r3, #16]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d103      	bne.n	800e1ac <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	4a2d      	ldr	r2, [pc, #180]	; (800e25c <HAL_UART_Transmit_IT+0x140>)
 800e1a8:	675a      	str	r2, [r3, #116]	; 0x74
 800e1aa:	e002      	b.n	800e1b2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	4a2c      	ldr	r2, [pc, #176]	; (800e260 <HAL_UART_Transmit_IT+0x144>)
 800e1b0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3308      	adds	r3, #8
 800e1c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c4:	e853 3f00 	ldrex	r3, [r3]
 800e1c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e1d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	3308      	adds	r3, #8
 800e1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1da:	637a      	str	r2, [r7, #52]	; 0x34
 800e1dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1e2:	e841 2300 	strex	r3, r2, [r1]
 800e1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1e5      	bne.n	800e1ba <HAL_UART_Transmit_IT+0x9e>
 800e1ee:	e02c      	b.n	800e24a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1f8:	d107      	bne.n	800e20a <HAL_UART_Transmit_IT+0xee>
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	691b      	ldr	r3, [r3, #16]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d103      	bne.n	800e20a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	4a17      	ldr	r2, [pc, #92]	; (800e264 <HAL_UART_Transmit_IT+0x148>)
 800e206:	675a      	str	r2, [r3, #116]	; 0x74
 800e208:	e002      	b.n	800e210 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	4a16      	ldr	r2, [pc, #88]	; (800e268 <HAL_UART_Transmit_IT+0x14c>)
 800e20e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	e853 3f00 	ldrex	r3, [r3]
 800e224:	613b      	str	r3, [r7, #16]
   return(result);
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e22c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	461a      	mov	r2, r3
 800e234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e236:	623b      	str	r3, [r7, #32]
 800e238:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23a:	69f9      	ldr	r1, [r7, #28]
 800e23c:	6a3a      	ldr	r2, [r7, #32]
 800e23e:	e841 2300 	strex	r3, r2, [r1]
 800e242:	61bb      	str	r3, [r7, #24]
   return(result);
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1e6      	bne.n	800e218 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	e000      	b.n	800e250 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800e24e:	2302      	movs	r3, #2
  }
}
 800e250:	4618      	mov	r0, r3
 800e252:	3744      	adds	r7, #68	; 0x44
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr
 800e25c:	0800fb77 	.word	0x0800fb77
 800e260:	0800fa97 	.word	0x0800fa97
 800e264:	0800f9d5 	.word	0x0800f9d5
 800e268:	0800f91d 	.word	0x0800f91d

0800e26c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b0ba      	sub	sp, #232	; 0xe8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	69db      	ldr	r3, [r3, #28]
 800e27a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e292:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e296:	f640 030f 	movw	r3, #2063	; 0x80f
 800e29a:	4013      	ands	r3, r2
 800e29c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e2a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d11b      	bne.n	800e2e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ac:	f003 0320 	and.w	r3, r3, #32
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d015      	beq.n	800e2e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e2b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2b8:	f003 0320 	and.w	r3, r3, #32
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d105      	bne.n	800e2cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e2c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d009      	beq.n	800e2e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 835a 	beq.w	800e98a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	4798      	blx	r3
      }
      return;
 800e2de:	e354      	b.n	800e98a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e2e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 811f 	beq.w	800e528 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e2ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e2ee:	4b8b      	ldr	r3, [pc, #556]	; (800e51c <HAL_UART_IRQHandler+0x2b0>)
 800e2f0:	4013      	ands	r3, r2
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d106      	bne.n	800e304 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e2f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e2fa:	4b89      	ldr	r3, [pc, #548]	; (800e520 <HAL_UART_IRQHandler+0x2b4>)
 800e2fc:	4013      	ands	r3, r2
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 8112 	beq.w	800e528 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e308:	f003 0301 	and.w	r3, r3, #1
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d011      	beq.n	800e334 <HAL_UART_IRQHandler+0xc8>
 800e310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2201      	movs	r2, #1
 800e322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e32a:	f043 0201 	orr.w	r2, r3, #1
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e338:	f003 0302 	and.w	r3, r3, #2
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d011      	beq.n	800e364 <HAL_UART_IRQHandler+0xf8>
 800e340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e344:	f003 0301 	and.w	r3, r3, #1
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00b      	beq.n	800e364 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2202      	movs	r2, #2
 800e352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e35a:	f043 0204 	orr.w	r2, r3, #4
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e368:	f003 0304 	and.w	r3, r3, #4
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d011      	beq.n	800e394 <HAL_UART_IRQHandler+0x128>
 800e370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e374:	f003 0301 	and.w	r3, r3, #1
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00b      	beq.n	800e394 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2204      	movs	r2, #4
 800e382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e38a:	f043 0202 	orr.w	r2, r3, #2
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e398:	f003 0308 	and.w	r3, r3, #8
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d017      	beq.n	800e3d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3a4:	f003 0320 	and.w	r3, r3, #32
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d105      	bne.n	800e3b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e3ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e3b0:	4b5a      	ldr	r3, [pc, #360]	; (800e51c <HAL_UART_IRQHandler+0x2b0>)
 800e3b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00b      	beq.n	800e3d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2208      	movs	r2, #8
 800e3be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3c6:	f043 0208 	orr.w	r2, r3, #8
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d012      	beq.n	800e402 <HAL_UART_IRQHandler+0x196>
 800e3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00c      	beq.n	800e402 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3f8:	f043 0220 	orr.w	r2, r3, #32
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f000 82c0 	beq.w	800e98e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e412:	f003 0320 	and.w	r3, r3, #32
 800e416:	2b00      	cmp	r3, #0
 800e418:	d013      	beq.n	800e442 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e41a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e41e:	f003 0320 	and.w	r3, r3, #32
 800e422:	2b00      	cmp	r3, #0
 800e424:	d105      	bne.n	800e432 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e42a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d007      	beq.n	800e442 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e436:	2b00      	cmp	r3, #0
 800e438:	d003      	beq.n	800e442 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e456:	2b40      	cmp	r3, #64	; 0x40
 800e458:	d005      	beq.n	800e466 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e45a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e45e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e462:	2b00      	cmp	r3, #0
 800e464:	d04f      	beq.n	800e506 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f001 f9dc 	bl	800f824 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e476:	2b40      	cmp	r3, #64	; 0x40
 800e478:	d141      	bne.n	800e4fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3308      	adds	r3, #8
 800e480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e488:	e853 3f00 	ldrex	r3, [r3]
 800e48c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	3308      	adds	r3, #8
 800e4a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e4a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e4aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e4b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e4b6:	e841 2300 	strex	r3, r2, [r1]
 800e4ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e4be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1d9      	bne.n	800e47a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d013      	beq.n	800e4f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4d2:	4a14      	ldr	r2, [pc, #80]	; (800e524 <HAL_UART_IRQHandler+0x2b8>)
 800e4d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7f7 f9fa 	bl	80058d4 <HAL_DMA_Abort_IT>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d017      	beq.n	800e516 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4f4:	e00f      	b.n	800e516 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 fa60 	bl	800e9bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4fc:	e00b      	b.n	800e516 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 fa5c 	bl	800e9bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e504:	e007      	b.n	800e516 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fa58 	bl	800e9bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e514:	e23b      	b.n	800e98e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e516:	bf00      	nop
    return;
 800e518:	e239      	b.n	800e98e <HAL_UART_IRQHandler+0x722>
 800e51a:	bf00      	nop
 800e51c:	10000001 	.word	0x10000001
 800e520:	04000120 	.word	0x04000120
 800e524:	0800f8f1 	.word	0x0800f8f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	f040 81ce 	bne.w	800e8ce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e536:	f003 0310 	and.w	r3, r3, #16
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f000 81c7 	beq.w	800e8ce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e544:	f003 0310 	and.w	r3, r3, #16
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f000 81c0 	beq.w	800e8ce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2210      	movs	r2, #16
 800e554:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	689b      	ldr	r3, [r3, #8]
 800e55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e560:	2b40      	cmp	r3, #64	; 0x40
 800e562:	f040 813b 	bne.w	800e7dc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a8b      	ldr	r2, [pc, #556]	; (800e79c <HAL_UART_IRQHandler+0x530>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d059      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a89      	ldr	r2, [pc, #548]	; (800e7a0 <HAL_UART_IRQHandler+0x534>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d053      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4a87      	ldr	r2, [pc, #540]	; (800e7a4 <HAL_UART_IRQHandler+0x538>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d04d      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a85      	ldr	r2, [pc, #532]	; (800e7a8 <HAL_UART_IRQHandler+0x53c>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d047      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a83      	ldr	r2, [pc, #524]	; (800e7ac <HAL_UART_IRQHandler+0x540>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d041      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a81      	ldr	r2, [pc, #516]	; (800e7b0 <HAL_UART_IRQHandler+0x544>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d03b      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a7f      	ldr	r2, [pc, #508]	; (800e7b4 <HAL_UART_IRQHandler+0x548>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d035      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a7d      	ldr	r2, [pc, #500]	; (800e7b8 <HAL_UART_IRQHandler+0x54c>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d02f      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a7b      	ldr	r2, [pc, #492]	; (800e7bc <HAL_UART_IRQHandler+0x550>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d029      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a79      	ldr	r2, [pc, #484]	; (800e7c0 <HAL_UART_IRQHandler+0x554>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d023      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a77      	ldr	r2, [pc, #476]	; (800e7c4 <HAL_UART_IRQHandler+0x558>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d01d      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a75      	ldr	r2, [pc, #468]	; (800e7c8 <HAL_UART_IRQHandler+0x55c>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d017      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a73      	ldr	r2, [pc, #460]	; (800e7cc <HAL_UART_IRQHandler+0x560>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d011      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a71      	ldr	r2, [pc, #452]	; (800e7d0 <HAL_UART_IRQHandler+0x564>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d00b      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a6f      	ldr	r2, [pc, #444]	; (800e7d4 <HAL_UART_IRQHandler+0x568>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d005      	beq.n	800e626 <HAL_UART_IRQHandler+0x3ba>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a6d      	ldr	r2, [pc, #436]	; (800e7d8 <HAL_UART_IRQHandler+0x56c>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d105      	bne.n	800e632 <HAL_UART_IRQHandler+0x3c6>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	e004      	b.n	800e63c <HAL_UART_IRQHandler+0x3d0>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e640:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 81a4 	beq.w	800e992 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e650:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e654:	429a      	cmp	r2, r3
 800e656:	f080 819c 	bcs.w	800e992 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e660:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e668:	69db      	ldr	r3, [r3, #28]
 800e66a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e66e:	f000 8086 	beq.w	800e77e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e67a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e67e:	e853 3f00 	ldrex	r3, [r3]
 800e682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e686:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e68a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e68e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	461a      	mov	r2, r3
 800e698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e69c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6a0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e6a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e6ac:	e841 2300 	strex	r3, r2, [r1]
 800e6b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e6b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1da      	bne.n	800e672 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3308      	adds	r3, #8
 800e6c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6c6:	e853 3f00 	ldrex	r3, [r3]
 800e6ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e6cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6ce:	f023 0301 	bic.w	r3, r3, #1
 800e6d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	3308      	adds	r3, #8
 800e6dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e6e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e6e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e6e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e6ec:	e841 2300 	strex	r3, r2, [r1]
 800e6f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e6f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d1e1      	bne.n	800e6bc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3308      	adds	r3, #8
 800e6fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e702:	e853 3f00 	ldrex	r3, [r3]
 800e706:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e70a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e70e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	3308      	adds	r3, #8
 800e718:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e71c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e71e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e720:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e722:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e724:	e841 2300 	strex	r3, r2, [r1]
 800e728:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e72a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1e3      	bne.n	800e6f8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2220      	movs	r2, #32
 800e734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e74c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e74e:	f023 0310 	bic.w	r3, r3, #16
 800e752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e760:	65bb      	str	r3, [r7, #88]	; 0x58
 800e762:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e764:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e768:	e841 2300 	strex	r3, r2, [r1]
 800e76c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e76e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e4      	bne.n	800e73e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e778:	4618      	mov	r0, r3
 800e77a:	f7f6 fd8d 	bl	8005298 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	b29b      	uxth	r3, r3
 800e790:	4619      	mov	r1, r3
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f91c 	bl	800e9d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e798:	e0fb      	b.n	800e992 <HAL_UART_IRQHandler+0x726>
 800e79a:	bf00      	nop
 800e79c:	40020010 	.word	0x40020010
 800e7a0:	40020028 	.word	0x40020028
 800e7a4:	40020040 	.word	0x40020040
 800e7a8:	40020058 	.word	0x40020058
 800e7ac:	40020070 	.word	0x40020070
 800e7b0:	40020088 	.word	0x40020088
 800e7b4:	400200a0 	.word	0x400200a0
 800e7b8:	400200b8 	.word	0x400200b8
 800e7bc:	40020410 	.word	0x40020410
 800e7c0:	40020428 	.word	0x40020428
 800e7c4:	40020440 	.word	0x40020440
 800e7c8:	40020458 	.word	0x40020458
 800e7cc:	40020470 	.word	0x40020470
 800e7d0:	40020488 	.word	0x40020488
 800e7d4:	400204a0 	.word	0x400204a0
 800e7d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	1ad3      	subs	r3, r2, r3
 800e7ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 80cc 	beq.w	800e996 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e7fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e802:	2b00      	cmp	r3, #0
 800e804:	f000 80c7 	beq.w	800e996 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e810:	e853 3f00 	ldrex	r3, [r3]
 800e814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e81c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	461a      	mov	r2, r3
 800e826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e82a:	647b      	str	r3, [r7, #68]	; 0x44
 800e82c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e832:	e841 2300 	strex	r3, r2, [r1]
 800e836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1e4      	bne.n	800e808 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3308      	adds	r3, #8
 800e844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e848:	e853 3f00 	ldrex	r3, [r3]
 800e84c:	623b      	str	r3, [r7, #32]
   return(result);
 800e84e:	6a3a      	ldr	r2, [r7, #32]
 800e850:	4b54      	ldr	r3, [pc, #336]	; (800e9a4 <HAL_UART_IRQHandler+0x738>)
 800e852:	4013      	ands	r3, r2
 800e854:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	3308      	adds	r3, #8
 800e85e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e862:	633a      	str	r2, [r7, #48]	; 0x30
 800e864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e86a:	e841 2300 	strex	r3, r2, [r1]
 800e86e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	2b00      	cmp	r3, #0
 800e874:	d1e3      	bne.n	800e83e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2220      	movs	r2, #32
 800e87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	e853 3f00 	ldrex	r3, [r3]
 800e896:	60fb      	str	r3, [r7, #12]
   return(result);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f023 0310 	bic.w	r3, r3, #16
 800e89e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e8ac:	61fb      	str	r3, [r7, #28]
 800e8ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b0:	69b9      	ldr	r1, [r7, #24]
 800e8b2:	69fa      	ldr	r2, [r7, #28]
 800e8b4:	e841 2300 	strex	r3, r2, [r1]
 800e8b8:	617b      	str	r3, [r7, #20]
   return(result);
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1e4      	bne.n	800e88a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e8c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f882 	bl	800e9d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e8cc:	e063      	b.n	800e996 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e8ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d00e      	beq.n	800e8f8 <HAL_UART_IRQHandler+0x68c>
 800e8da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d008      	beq.n	800e8f8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e8ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f001 f9e0 	bl	800fcb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8f6:	e051      	b.n	800e99c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e900:	2b00      	cmp	r3, #0
 800e902:	d014      	beq.n	800e92e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d105      	bne.n	800e91c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d008      	beq.n	800e92e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e920:	2b00      	cmp	r3, #0
 800e922:	d03a      	beq.n	800e99a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	4798      	blx	r3
    }
    return;
 800e92c:	e035      	b.n	800e99a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e936:	2b00      	cmp	r3, #0
 800e938:	d009      	beq.n	800e94e <HAL_UART_IRQHandler+0x6e2>
 800e93a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e942:	2b00      	cmp	r3, #0
 800e944:	d003      	beq.n	800e94e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f001 f98a 	bl	800fc60 <UART_EndTransmit_IT>
    return;
 800e94c:	e026      	b.n	800e99c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e94e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e956:	2b00      	cmp	r3, #0
 800e958:	d009      	beq.n	800e96e <HAL_UART_IRQHandler+0x702>
 800e95a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e95e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f001 f9b9 	bl	800fcde <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e96c:	e016      	b.n	800e99c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e976:	2b00      	cmp	r3, #0
 800e978:	d010      	beq.n	800e99c <HAL_UART_IRQHandler+0x730>
 800e97a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	da0c      	bge.n	800e99c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f001 f9a1 	bl	800fcca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e988:	e008      	b.n	800e99c <HAL_UART_IRQHandler+0x730>
      return;
 800e98a:	bf00      	nop
 800e98c:	e006      	b.n	800e99c <HAL_UART_IRQHandler+0x730>
    return;
 800e98e:	bf00      	nop
 800e990:	e004      	b.n	800e99c <HAL_UART_IRQHandler+0x730>
      return;
 800e992:	bf00      	nop
 800e994:	e002      	b.n	800e99c <HAL_UART_IRQHandler+0x730>
      return;
 800e996:	bf00      	nop
 800e998:	e000      	b.n	800e99c <HAL_UART_IRQHandler+0x730>
    return;
 800e99a:	bf00      	nop
  }
}
 800e99c:	37e8      	adds	r7, #232	; 0xe8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	effffffe 	.word	0xeffffffe

0800e9a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e9c4:	bf00      	nop
 800e9c6:	370c      	adds	r7, #12
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr

0800e9d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	460b      	mov	r3, r1
 800e9da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e9dc:	bf00      	nop
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9ec:	b092      	sub	sp, #72	; 0x48
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	689a      	ldr	r2, [r3, #8]
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	691b      	ldr	r3, [r3, #16]
 800ea00:	431a      	orrs	r2, r3
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	695b      	ldr	r3, [r3, #20]
 800ea06:	431a      	orrs	r2, r3
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	69db      	ldr	r3, [r3, #28]
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	4bbe      	ldr	r3, [pc, #760]	; (800ed10 <UART_SetConfig+0x328>)
 800ea18:	4013      	ands	r3, r2
 800ea1a:	697a      	ldr	r2, [r7, #20]
 800ea1c:	6812      	ldr	r2, [r2, #0]
 800ea1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea20:	430b      	orrs	r3, r1
 800ea22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	68da      	ldr	r2, [r3, #12]
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	430a      	orrs	r2, r1
 800ea38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4ab3      	ldr	r2, [pc, #716]	; (800ed14 <UART_SetConfig+0x32c>)
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d004      	beq.n	800ea54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	6a1b      	ldr	r3, [r3, #32]
 800ea4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea50:	4313      	orrs	r3, r2
 800ea52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	689a      	ldr	r2, [r3, #8]
 800ea5a:	4baf      	ldr	r3, [pc, #700]	; (800ed18 <UART_SetConfig+0x330>)
 800ea5c:	4013      	ands	r3, r2
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	6812      	ldr	r2, [r2, #0]
 800ea62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea64:	430b      	orrs	r3, r1
 800ea66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea6e:	f023 010f 	bic.w	r1, r3, #15
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	430a      	orrs	r2, r1
 800ea7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4aa6      	ldr	r2, [pc, #664]	; (800ed1c <UART_SetConfig+0x334>)
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d177      	bne.n	800eb78 <UART_SetConfig+0x190>
 800ea88:	4ba5      	ldr	r3, [pc, #660]	; (800ed20 <UART_SetConfig+0x338>)
 800ea8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea90:	2b28      	cmp	r3, #40	; 0x28
 800ea92:	d86d      	bhi.n	800eb70 <UART_SetConfig+0x188>
 800ea94:	a201      	add	r2, pc, #4	; (adr r2, 800ea9c <UART_SetConfig+0xb4>)
 800ea96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea9a:	bf00      	nop
 800ea9c:	0800eb41 	.word	0x0800eb41
 800eaa0:	0800eb71 	.word	0x0800eb71
 800eaa4:	0800eb71 	.word	0x0800eb71
 800eaa8:	0800eb71 	.word	0x0800eb71
 800eaac:	0800eb71 	.word	0x0800eb71
 800eab0:	0800eb71 	.word	0x0800eb71
 800eab4:	0800eb71 	.word	0x0800eb71
 800eab8:	0800eb71 	.word	0x0800eb71
 800eabc:	0800eb49 	.word	0x0800eb49
 800eac0:	0800eb71 	.word	0x0800eb71
 800eac4:	0800eb71 	.word	0x0800eb71
 800eac8:	0800eb71 	.word	0x0800eb71
 800eacc:	0800eb71 	.word	0x0800eb71
 800ead0:	0800eb71 	.word	0x0800eb71
 800ead4:	0800eb71 	.word	0x0800eb71
 800ead8:	0800eb71 	.word	0x0800eb71
 800eadc:	0800eb51 	.word	0x0800eb51
 800eae0:	0800eb71 	.word	0x0800eb71
 800eae4:	0800eb71 	.word	0x0800eb71
 800eae8:	0800eb71 	.word	0x0800eb71
 800eaec:	0800eb71 	.word	0x0800eb71
 800eaf0:	0800eb71 	.word	0x0800eb71
 800eaf4:	0800eb71 	.word	0x0800eb71
 800eaf8:	0800eb71 	.word	0x0800eb71
 800eafc:	0800eb59 	.word	0x0800eb59
 800eb00:	0800eb71 	.word	0x0800eb71
 800eb04:	0800eb71 	.word	0x0800eb71
 800eb08:	0800eb71 	.word	0x0800eb71
 800eb0c:	0800eb71 	.word	0x0800eb71
 800eb10:	0800eb71 	.word	0x0800eb71
 800eb14:	0800eb71 	.word	0x0800eb71
 800eb18:	0800eb71 	.word	0x0800eb71
 800eb1c:	0800eb61 	.word	0x0800eb61
 800eb20:	0800eb71 	.word	0x0800eb71
 800eb24:	0800eb71 	.word	0x0800eb71
 800eb28:	0800eb71 	.word	0x0800eb71
 800eb2c:	0800eb71 	.word	0x0800eb71
 800eb30:	0800eb71 	.word	0x0800eb71
 800eb34:	0800eb71 	.word	0x0800eb71
 800eb38:	0800eb71 	.word	0x0800eb71
 800eb3c:	0800eb69 	.word	0x0800eb69
 800eb40:	2301      	movs	r3, #1
 800eb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb46:	e222      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eb48:	2304      	movs	r3, #4
 800eb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4e:	e21e      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eb50:	2308      	movs	r3, #8
 800eb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb56:	e21a      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eb58:	2310      	movs	r3, #16
 800eb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5e:	e216      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eb60:	2320      	movs	r3, #32
 800eb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb66:	e212      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eb68:	2340      	movs	r3, #64	; 0x40
 800eb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6e:	e20e      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eb70:	2380      	movs	r3, #128	; 0x80
 800eb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb76:	e20a      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a69      	ldr	r2, [pc, #420]	; (800ed24 <UART_SetConfig+0x33c>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d130      	bne.n	800ebe4 <UART_SetConfig+0x1fc>
 800eb82:	4b67      	ldr	r3, [pc, #412]	; (800ed20 <UART_SetConfig+0x338>)
 800eb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb86:	f003 0307 	and.w	r3, r3, #7
 800eb8a:	2b05      	cmp	r3, #5
 800eb8c:	d826      	bhi.n	800ebdc <UART_SetConfig+0x1f4>
 800eb8e:	a201      	add	r2, pc, #4	; (adr r2, 800eb94 <UART_SetConfig+0x1ac>)
 800eb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb94:	0800ebad 	.word	0x0800ebad
 800eb98:	0800ebb5 	.word	0x0800ebb5
 800eb9c:	0800ebbd 	.word	0x0800ebbd
 800eba0:	0800ebc5 	.word	0x0800ebc5
 800eba4:	0800ebcd 	.word	0x0800ebcd
 800eba8:	0800ebd5 	.word	0x0800ebd5
 800ebac:	2300      	movs	r3, #0
 800ebae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb2:	e1ec      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ebb4:	2304      	movs	r3, #4
 800ebb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebba:	e1e8      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ebbc:	2308      	movs	r3, #8
 800ebbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc2:	e1e4      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ebc4:	2310      	movs	r3, #16
 800ebc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebca:	e1e0      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ebcc:	2320      	movs	r3, #32
 800ebce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd2:	e1dc      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ebd4:	2340      	movs	r3, #64	; 0x40
 800ebd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebda:	e1d8      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ebdc:	2380      	movs	r3, #128	; 0x80
 800ebde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe2:	e1d4      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a4f      	ldr	r2, [pc, #316]	; (800ed28 <UART_SetConfig+0x340>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d130      	bne.n	800ec50 <UART_SetConfig+0x268>
 800ebee:	4b4c      	ldr	r3, [pc, #304]	; (800ed20 <UART_SetConfig+0x338>)
 800ebf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebf2:	f003 0307 	and.w	r3, r3, #7
 800ebf6:	2b05      	cmp	r3, #5
 800ebf8:	d826      	bhi.n	800ec48 <UART_SetConfig+0x260>
 800ebfa:	a201      	add	r2, pc, #4	; (adr r2, 800ec00 <UART_SetConfig+0x218>)
 800ebfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec00:	0800ec19 	.word	0x0800ec19
 800ec04:	0800ec21 	.word	0x0800ec21
 800ec08:	0800ec29 	.word	0x0800ec29
 800ec0c:	0800ec31 	.word	0x0800ec31
 800ec10:	0800ec39 	.word	0x0800ec39
 800ec14:	0800ec41 	.word	0x0800ec41
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec1e:	e1b6      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec20:	2304      	movs	r3, #4
 800ec22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec26:	e1b2      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec28:	2308      	movs	r3, #8
 800ec2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2e:	e1ae      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec30:	2310      	movs	r3, #16
 800ec32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec36:	e1aa      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec38:	2320      	movs	r3, #32
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3e:	e1a6      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec40:	2340      	movs	r3, #64	; 0x40
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec46:	e1a2      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec48:	2380      	movs	r3, #128	; 0x80
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4e:	e19e      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a35      	ldr	r2, [pc, #212]	; (800ed2c <UART_SetConfig+0x344>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d130      	bne.n	800ecbc <UART_SetConfig+0x2d4>
 800ec5a:	4b31      	ldr	r3, [pc, #196]	; (800ed20 <UART_SetConfig+0x338>)
 800ec5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec5e:	f003 0307 	and.w	r3, r3, #7
 800ec62:	2b05      	cmp	r3, #5
 800ec64:	d826      	bhi.n	800ecb4 <UART_SetConfig+0x2cc>
 800ec66:	a201      	add	r2, pc, #4	; (adr r2, 800ec6c <UART_SetConfig+0x284>)
 800ec68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6c:	0800ec85 	.word	0x0800ec85
 800ec70:	0800ec8d 	.word	0x0800ec8d
 800ec74:	0800ec95 	.word	0x0800ec95
 800ec78:	0800ec9d 	.word	0x0800ec9d
 800ec7c:	0800eca5 	.word	0x0800eca5
 800ec80:	0800ecad 	.word	0x0800ecad
 800ec84:	2300      	movs	r3, #0
 800ec86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8a:	e180      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec8c:	2304      	movs	r3, #4
 800ec8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec92:	e17c      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec94:	2308      	movs	r3, #8
 800ec96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9a:	e178      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ec9c:	2310      	movs	r3, #16
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca2:	e174      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eca4:	2320      	movs	r3, #32
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecaa:	e170      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ecac:	2340      	movs	r3, #64	; 0x40
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb2:	e16c      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ecb4:	2380      	movs	r3, #128	; 0x80
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecba:	e168      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a1b      	ldr	r2, [pc, #108]	; (800ed30 <UART_SetConfig+0x348>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d142      	bne.n	800ed4c <UART_SetConfig+0x364>
 800ecc6:	4b16      	ldr	r3, [pc, #88]	; (800ed20 <UART_SetConfig+0x338>)
 800ecc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecca:	f003 0307 	and.w	r3, r3, #7
 800ecce:	2b05      	cmp	r3, #5
 800ecd0:	d838      	bhi.n	800ed44 <UART_SetConfig+0x35c>
 800ecd2:	a201      	add	r2, pc, #4	; (adr r2, 800ecd8 <UART_SetConfig+0x2f0>)
 800ecd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd8:	0800ecf1 	.word	0x0800ecf1
 800ecdc:	0800ecf9 	.word	0x0800ecf9
 800ece0:	0800ed01 	.word	0x0800ed01
 800ece4:	0800ed09 	.word	0x0800ed09
 800ece8:	0800ed35 	.word	0x0800ed35
 800ecec:	0800ed3d 	.word	0x0800ed3d
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecf6:	e14a      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ecf8:	2304      	movs	r3, #4
 800ecfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfe:	e146      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ed00:	2308      	movs	r3, #8
 800ed02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed06:	e142      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ed08:	2310      	movs	r3, #16
 800ed0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0e:	e13e      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ed10:	cfff69f3 	.word	0xcfff69f3
 800ed14:	58000c00 	.word	0x58000c00
 800ed18:	11fff4ff 	.word	0x11fff4ff
 800ed1c:	40011000 	.word	0x40011000
 800ed20:	58024400 	.word	0x58024400
 800ed24:	40004400 	.word	0x40004400
 800ed28:	40004800 	.word	0x40004800
 800ed2c:	40004c00 	.word	0x40004c00
 800ed30:	40005000 	.word	0x40005000
 800ed34:	2320      	movs	r3, #32
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3a:	e128      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ed3c:	2340      	movs	r3, #64	; 0x40
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed42:	e124      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ed44:	2380      	movs	r3, #128	; 0x80
 800ed46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed4a:	e120      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4acb      	ldr	r2, [pc, #812]	; (800f080 <UART_SetConfig+0x698>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d176      	bne.n	800ee44 <UART_SetConfig+0x45c>
 800ed56:	4bcb      	ldr	r3, [pc, #812]	; (800f084 <UART_SetConfig+0x69c>)
 800ed58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed5e:	2b28      	cmp	r3, #40	; 0x28
 800ed60:	d86c      	bhi.n	800ee3c <UART_SetConfig+0x454>
 800ed62:	a201      	add	r2, pc, #4	; (adr r2, 800ed68 <UART_SetConfig+0x380>)
 800ed64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed68:	0800ee0d 	.word	0x0800ee0d
 800ed6c:	0800ee3d 	.word	0x0800ee3d
 800ed70:	0800ee3d 	.word	0x0800ee3d
 800ed74:	0800ee3d 	.word	0x0800ee3d
 800ed78:	0800ee3d 	.word	0x0800ee3d
 800ed7c:	0800ee3d 	.word	0x0800ee3d
 800ed80:	0800ee3d 	.word	0x0800ee3d
 800ed84:	0800ee3d 	.word	0x0800ee3d
 800ed88:	0800ee15 	.word	0x0800ee15
 800ed8c:	0800ee3d 	.word	0x0800ee3d
 800ed90:	0800ee3d 	.word	0x0800ee3d
 800ed94:	0800ee3d 	.word	0x0800ee3d
 800ed98:	0800ee3d 	.word	0x0800ee3d
 800ed9c:	0800ee3d 	.word	0x0800ee3d
 800eda0:	0800ee3d 	.word	0x0800ee3d
 800eda4:	0800ee3d 	.word	0x0800ee3d
 800eda8:	0800ee1d 	.word	0x0800ee1d
 800edac:	0800ee3d 	.word	0x0800ee3d
 800edb0:	0800ee3d 	.word	0x0800ee3d
 800edb4:	0800ee3d 	.word	0x0800ee3d
 800edb8:	0800ee3d 	.word	0x0800ee3d
 800edbc:	0800ee3d 	.word	0x0800ee3d
 800edc0:	0800ee3d 	.word	0x0800ee3d
 800edc4:	0800ee3d 	.word	0x0800ee3d
 800edc8:	0800ee25 	.word	0x0800ee25
 800edcc:	0800ee3d 	.word	0x0800ee3d
 800edd0:	0800ee3d 	.word	0x0800ee3d
 800edd4:	0800ee3d 	.word	0x0800ee3d
 800edd8:	0800ee3d 	.word	0x0800ee3d
 800eddc:	0800ee3d 	.word	0x0800ee3d
 800ede0:	0800ee3d 	.word	0x0800ee3d
 800ede4:	0800ee3d 	.word	0x0800ee3d
 800ede8:	0800ee2d 	.word	0x0800ee2d
 800edec:	0800ee3d 	.word	0x0800ee3d
 800edf0:	0800ee3d 	.word	0x0800ee3d
 800edf4:	0800ee3d 	.word	0x0800ee3d
 800edf8:	0800ee3d 	.word	0x0800ee3d
 800edfc:	0800ee3d 	.word	0x0800ee3d
 800ee00:	0800ee3d 	.word	0x0800ee3d
 800ee04:	0800ee3d 	.word	0x0800ee3d
 800ee08:	0800ee35 	.word	0x0800ee35
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee12:	e0bc      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee14:	2304      	movs	r3, #4
 800ee16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1a:	e0b8      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee1c:	2308      	movs	r3, #8
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee22:	e0b4      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee24:	2310      	movs	r3, #16
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2a:	e0b0      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee2c:	2320      	movs	r3, #32
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee32:	e0ac      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee34:	2340      	movs	r3, #64	; 0x40
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3a:	e0a8      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee3c:	2380      	movs	r3, #128	; 0x80
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee42:	e0a4      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4a8f      	ldr	r2, [pc, #572]	; (800f088 <UART_SetConfig+0x6a0>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d130      	bne.n	800eeb0 <UART_SetConfig+0x4c8>
 800ee4e:	4b8d      	ldr	r3, [pc, #564]	; (800f084 <UART_SetConfig+0x69c>)
 800ee50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee52:	f003 0307 	and.w	r3, r3, #7
 800ee56:	2b05      	cmp	r3, #5
 800ee58:	d826      	bhi.n	800eea8 <UART_SetConfig+0x4c0>
 800ee5a:	a201      	add	r2, pc, #4	; (adr r2, 800ee60 <UART_SetConfig+0x478>)
 800ee5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee60:	0800ee79 	.word	0x0800ee79
 800ee64:	0800ee81 	.word	0x0800ee81
 800ee68:	0800ee89 	.word	0x0800ee89
 800ee6c:	0800ee91 	.word	0x0800ee91
 800ee70:	0800ee99 	.word	0x0800ee99
 800ee74:	0800eea1 	.word	0x0800eea1
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7e:	e086      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee80:	2304      	movs	r3, #4
 800ee82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee86:	e082      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee88:	2308      	movs	r3, #8
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8e:	e07e      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee90:	2310      	movs	r3, #16
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee96:	e07a      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ee98:	2320      	movs	r3, #32
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9e:	e076      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eea0:	2340      	movs	r3, #64	; 0x40
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea6:	e072      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eea8:	2380      	movs	r3, #128	; 0x80
 800eeaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeae:	e06e      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a75      	ldr	r2, [pc, #468]	; (800f08c <UART_SetConfig+0x6a4>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d130      	bne.n	800ef1c <UART_SetConfig+0x534>
 800eeba:	4b72      	ldr	r3, [pc, #456]	; (800f084 <UART_SetConfig+0x69c>)
 800eebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eebe:	f003 0307 	and.w	r3, r3, #7
 800eec2:	2b05      	cmp	r3, #5
 800eec4:	d826      	bhi.n	800ef14 <UART_SetConfig+0x52c>
 800eec6:	a201      	add	r2, pc, #4	; (adr r2, 800eecc <UART_SetConfig+0x4e4>)
 800eec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eecc:	0800eee5 	.word	0x0800eee5
 800eed0:	0800eeed 	.word	0x0800eeed
 800eed4:	0800eef5 	.word	0x0800eef5
 800eed8:	0800eefd 	.word	0x0800eefd
 800eedc:	0800ef05 	.word	0x0800ef05
 800eee0:	0800ef0d 	.word	0x0800ef0d
 800eee4:	2300      	movs	r3, #0
 800eee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeea:	e050      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eeec:	2304      	movs	r3, #4
 800eeee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef2:	e04c      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eef4:	2308      	movs	r3, #8
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefa:	e048      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800eefc:	2310      	movs	r3, #16
 800eefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef02:	e044      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef04:	2320      	movs	r3, #32
 800ef06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef0a:	e040      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef0c:	2340      	movs	r3, #64	; 0x40
 800ef0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef12:	e03c      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef14:	2380      	movs	r3, #128	; 0x80
 800ef16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1a:	e038      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a5b      	ldr	r2, [pc, #364]	; (800f090 <UART_SetConfig+0x6a8>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d130      	bne.n	800ef88 <UART_SetConfig+0x5a0>
 800ef26:	4b57      	ldr	r3, [pc, #348]	; (800f084 <UART_SetConfig+0x69c>)
 800ef28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef2a:	f003 0307 	and.w	r3, r3, #7
 800ef2e:	2b05      	cmp	r3, #5
 800ef30:	d826      	bhi.n	800ef80 <UART_SetConfig+0x598>
 800ef32:	a201      	add	r2, pc, #4	; (adr r2, 800ef38 <UART_SetConfig+0x550>)
 800ef34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef38:	0800ef51 	.word	0x0800ef51
 800ef3c:	0800ef59 	.word	0x0800ef59
 800ef40:	0800ef61 	.word	0x0800ef61
 800ef44:	0800ef69 	.word	0x0800ef69
 800ef48:	0800ef71 	.word	0x0800ef71
 800ef4c:	0800ef79 	.word	0x0800ef79
 800ef50:	2302      	movs	r3, #2
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef56:	e01a      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef58:	2304      	movs	r3, #4
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5e:	e016      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef60:	2308      	movs	r3, #8
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef66:	e012      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef68:	2310      	movs	r3, #16
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6e:	e00e      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef70:	2320      	movs	r3, #32
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef76:	e00a      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef78:	2340      	movs	r3, #64	; 0x40
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7e:	e006      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef80:	2380      	movs	r3, #128	; 0x80
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef86:	e002      	b.n	800ef8e <UART_SetConfig+0x5a6>
 800ef88:	2380      	movs	r3, #128	; 0x80
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4a3f      	ldr	r2, [pc, #252]	; (800f090 <UART_SetConfig+0x6a8>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	f040 80f8 	bne.w	800f18a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ef9e:	2b20      	cmp	r3, #32
 800efa0:	dc46      	bgt.n	800f030 <UART_SetConfig+0x648>
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	f2c0 8082 	blt.w	800f0ac <UART_SetConfig+0x6c4>
 800efa8:	3b02      	subs	r3, #2
 800efaa:	2b1e      	cmp	r3, #30
 800efac:	d87e      	bhi.n	800f0ac <UART_SetConfig+0x6c4>
 800efae:	a201      	add	r2, pc, #4	; (adr r2, 800efb4 <UART_SetConfig+0x5cc>)
 800efb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb4:	0800f037 	.word	0x0800f037
 800efb8:	0800f0ad 	.word	0x0800f0ad
 800efbc:	0800f03f 	.word	0x0800f03f
 800efc0:	0800f0ad 	.word	0x0800f0ad
 800efc4:	0800f0ad 	.word	0x0800f0ad
 800efc8:	0800f0ad 	.word	0x0800f0ad
 800efcc:	0800f04f 	.word	0x0800f04f
 800efd0:	0800f0ad 	.word	0x0800f0ad
 800efd4:	0800f0ad 	.word	0x0800f0ad
 800efd8:	0800f0ad 	.word	0x0800f0ad
 800efdc:	0800f0ad 	.word	0x0800f0ad
 800efe0:	0800f0ad 	.word	0x0800f0ad
 800efe4:	0800f0ad 	.word	0x0800f0ad
 800efe8:	0800f0ad 	.word	0x0800f0ad
 800efec:	0800f05f 	.word	0x0800f05f
 800eff0:	0800f0ad 	.word	0x0800f0ad
 800eff4:	0800f0ad 	.word	0x0800f0ad
 800eff8:	0800f0ad 	.word	0x0800f0ad
 800effc:	0800f0ad 	.word	0x0800f0ad
 800f000:	0800f0ad 	.word	0x0800f0ad
 800f004:	0800f0ad 	.word	0x0800f0ad
 800f008:	0800f0ad 	.word	0x0800f0ad
 800f00c:	0800f0ad 	.word	0x0800f0ad
 800f010:	0800f0ad 	.word	0x0800f0ad
 800f014:	0800f0ad 	.word	0x0800f0ad
 800f018:	0800f0ad 	.word	0x0800f0ad
 800f01c:	0800f0ad 	.word	0x0800f0ad
 800f020:	0800f0ad 	.word	0x0800f0ad
 800f024:	0800f0ad 	.word	0x0800f0ad
 800f028:	0800f0ad 	.word	0x0800f0ad
 800f02c:	0800f09f 	.word	0x0800f09f
 800f030:	2b40      	cmp	r3, #64	; 0x40
 800f032:	d037      	beq.n	800f0a4 <UART_SetConfig+0x6bc>
 800f034:	e03a      	b.n	800f0ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f036:	f7fc fdc7 	bl	800bbc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f03a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f03c:	e03c      	b.n	800f0b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f03e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f042:	4618      	mov	r0, r3
 800f044:	f7fc fdd6 	bl	800bbf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f04c:	e034      	b.n	800f0b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f04e:	f107 0318 	add.w	r3, r7, #24
 800f052:	4618      	mov	r0, r3
 800f054:	f7fc ff22 	bl	800be9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f05c:	e02c      	b.n	800f0b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f05e:	4b09      	ldr	r3, [pc, #36]	; (800f084 <UART_SetConfig+0x69c>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f003 0320 	and.w	r3, r3, #32
 800f066:	2b00      	cmp	r3, #0
 800f068:	d016      	beq.n	800f098 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f06a:	4b06      	ldr	r3, [pc, #24]	; (800f084 <UART_SetConfig+0x69c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	08db      	lsrs	r3, r3, #3
 800f070:	f003 0303 	and.w	r3, r3, #3
 800f074:	4a07      	ldr	r2, [pc, #28]	; (800f094 <UART_SetConfig+0x6ac>)
 800f076:	fa22 f303 	lsr.w	r3, r2, r3
 800f07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f07c:	e01c      	b.n	800f0b8 <UART_SetConfig+0x6d0>
 800f07e:	bf00      	nop
 800f080:	40011400 	.word	0x40011400
 800f084:	58024400 	.word	0x58024400
 800f088:	40007800 	.word	0x40007800
 800f08c:	40007c00 	.word	0x40007c00
 800f090:	58000c00 	.word	0x58000c00
 800f094:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f098:	4b9d      	ldr	r3, [pc, #628]	; (800f310 <UART_SetConfig+0x928>)
 800f09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f09c:	e00c      	b.n	800f0b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f09e:	4b9d      	ldr	r3, [pc, #628]	; (800f314 <UART_SetConfig+0x92c>)
 800f0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0a2:	e009      	b.n	800f0b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0aa:	e005      	b.n	800f0b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f0b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f000 81de 	beq.w	800f47c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c4:	4a94      	ldr	r2, [pc, #592]	; (800f318 <UART_SetConfig+0x930>)
 800f0c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	685a      	ldr	r2, [r3, #4]
 800f0d8:	4613      	mov	r3, r2
 800f0da:	005b      	lsls	r3, r3, #1
 800f0dc:	4413      	add	r3, r2
 800f0de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d305      	bcc.n	800f0f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d903      	bls.n	800f0f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f0f6:	e1c1      	b.n	800f47c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	60bb      	str	r3, [r7, #8]
 800f0fe:	60fa      	str	r2, [r7, #12]
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f104:	4a84      	ldr	r2, [pc, #528]	; (800f318 <UART_SetConfig+0x930>)
 800f106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	2200      	movs	r2, #0
 800f10e:	603b      	str	r3, [r7, #0]
 800f110:	607a      	str	r2, [r7, #4]
 800f112:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f116:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f11a:	f7f1 f939 	bl	8000390 <__aeabi_uldivmod>
 800f11e:	4602      	mov	r2, r0
 800f120:	460b      	mov	r3, r1
 800f122:	4610      	mov	r0, r2
 800f124:	4619      	mov	r1, r3
 800f126:	f04f 0200 	mov.w	r2, #0
 800f12a:	f04f 0300 	mov.w	r3, #0
 800f12e:	020b      	lsls	r3, r1, #8
 800f130:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f134:	0202      	lsls	r2, r0, #8
 800f136:	6979      	ldr	r1, [r7, #20]
 800f138:	6849      	ldr	r1, [r1, #4]
 800f13a:	0849      	lsrs	r1, r1, #1
 800f13c:	2000      	movs	r0, #0
 800f13e:	460c      	mov	r4, r1
 800f140:	4605      	mov	r5, r0
 800f142:	eb12 0804 	adds.w	r8, r2, r4
 800f146:	eb43 0905 	adc.w	r9, r3, r5
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	469a      	mov	sl, r3
 800f152:	4693      	mov	fp, r2
 800f154:	4652      	mov	r2, sl
 800f156:	465b      	mov	r3, fp
 800f158:	4640      	mov	r0, r8
 800f15a:	4649      	mov	r1, r9
 800f15c:	f7f1 f918 	bl	8000390 <__aeabi_uldivmod>
 800f160:	4602      	mov	r2, r0
 800f162:	460b      	mov	r3, r1
 800f164:	4613      	mov	r3, r2
 800f166:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f16e:	d308      	bcc.n	800f182 <UART_SetConfig+0x79a>
 800f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f176:	d204      	bcs.n	800f182 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f17e:	60da      	str	r2, [r3, #12]
 800f180:	e17c      	b.n	800f47c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f182:	2301      	movs	r3, #1
 800f184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f188:	e178      	b.n	800f47c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	69db      	ldr	r3, [r3, #28]
 800f18e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f192:	f040 80c5 	bne.w	800f320 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f196:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f19a:	2b20      	cmp	r3, #32
 800f19c:	dc48      	bgt.n	800f230 <UART_SetConfig+0x848>
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	db7b      	blt.n	800f29a <UART_SetConfig+0x8b2>
 800f1a2:	2b20      	cmp	r3, #32
 800f1a4:	d879      	bhi.n	800f29a <UART_SetConfig+0x8b2>
 800f1a6:	a201      	add	r2, pc, #4	; (adr r2, 800f1ac <UART_SetConfig+0x7c4>)
 800f1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ac:	0800f237 	.word	0x0800f237
 800f1b0:	0800f23f 	.word	0x0800f23f
 800f1b4:	0800f29b 	.word	0x0800f29b
 800f1b8:	0800f29b 	.word	0x0800f29b
 800f1bc:	0800f247 	.word	0x0800f247
 800f1c0:	0800f29b 	.word	0x0800f29b
 800f1c4:	0800f29b 	.word	0x0800f29b
 800f1c8:	0800f29b 	.word	0x0800f29b
 800f1cc:	0800f257 	.word	0x0800f257
 800f1d0:	0800f29b 	.word	0x0800f29b
 800f1d4:	0800f29b 	.word	0x0800f29b
 800f1d8:	0800f29b 	.word	0x0800f29b
 800f1dc:	0800f29b 	.word	0x0800f29b
 800f1e0:	0800f29b 	.word	0x0800f29b
 800f1e4:	0800f29b 	.word	0x0800f29b
 800f1e8:	0800f29b 	.word	0x0800f29b
 800f1ec:	0800f267 	.word	0x0800f267
 800f1f0:	0800f29b 	.word	0x0800f29b
 800f1f4:	0800f29b 	.word	0x0800f29b
 800f1f8:	0800f29b 	.word	0x0800f29b
 800f1fc:	0800f29b 	.word	0x0800f29b
 800f200:	0800f29b 	.word	0x0800f29b
 800f204:	0800f29b 	.word	0x0800f29b
 800f208:	0800f29b 	.word	0x0800f29b
 800f20c:	0800f29b 	.word	0x0800f29b
 800f210:	0800f29b 	.word	0x0800f29b
 800f214:	0800f29b 	.word	0x0800f29b
 800f218:	0800f29b 	.word	0x0800f29b
 800f21c:	0800f29b 	.word	0x0800f29b
 800f220:	0800f29b 	.word	0x0800f29b
 800f224:	0800f29b 	.word	0x0800f29b
 800f228:	0800f29b 	.word	0x0800f29b
 800f22c:	0800f28d 	.word	0x0800f28d
 800f230:	2b40      	cmp	r3, #64	; 0x40
 800f232:	d02e      	beq.n	800f292 <UART_SetConfig+0x8aa>
 800f234:	e031      	b.n	800f29a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f236:	f7fb fd55 	bl	800ace4 <HAL_RCC_GetPCLK1Freq>
 800f23a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f23c:	e033      	b.n	800f2a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f23e:	f7fb fd67 	bl	800ad10 <HAL_RCC_GetPCLK2Freq>
 800f242:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f244:	e02f      	b.n	800f2a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fc fcd2 	bl	800bbf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f254:	e027      	b.n	800f2a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f256:	f107 0318 	add.w	r3, r7, #24
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fc fe1e 	bl	800be9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f264:	e01f      	b.n	800f2a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f266:	4b2d      	ldr	r3, [pc, #180]	; (800f31c <UART_SetConfig+0x934>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f003 0320 	and.w	r3, r3, #32
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d009      	beq.n	800f286 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f272:	4b2a      	ldr	r3, [pc, #168]	; (800f31c <UART_SetConfig+0x934>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	08db      	lsrs	r3, r3, #3
 800f278:	f003 0303 	and.w	r3, r3, #3
 800f27c:	4a24      	ldr	r2, [pc, #144]	; (800f310 <UART_SetConfig+0x928>)
 800f27e:	fa22 f303 	lsr.w	r3, r2, r3
 800f282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f284:	e00f      	b.n	800f2a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f286:	4b22      	ldr	r3, [pc, #136]	; (800f310 <UART_SetConfig+0x928>)
 800f288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f28a:	e00c      	b.n	800f2a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f28c:	4b21      	ldr	r3, [pc, #132]	; (800f314 <UART_SetConfig+0x92c>)
 800f28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f290:	e009      	b.n	800f2a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f298:	e005      	b.n	800f2a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f29a:	2300      	movs	r3, #0
 800f29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f2a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	f000 80e7 	beq.w	800f47c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b2:	4a19      	ldr	r2, [pc, #100]	; (800f318 <UART_SetConfig+0x930>)
 800f2b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2c0:	005a      	lsls	r2, r3, #1
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	085b      	lsrs	r3, r3, #1
 800f2c8:	441a      	add	r2, r3
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d6:	2b0f      	cmp	r3, #15
 800f2d8:	d916      	bls.n	800f308 <UART_SetConfig+0x920>
 800f2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2e0:	d212      	bcs.n	800f308 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	f023 030f 	bic.w	r3, r3, #15
 800f2ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ee:	085b      	lsrs	r3, r3, #1
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	f003 0307 	and.w	r3, r3, #7
 800f2f6:	b29a      	uxth	r2, r3
 800f2f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f304:	60da      	str	r2, [r3, #12]
 800f306:	e0b9      	b.n	800f47c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f308:	2301      	movs	r3, #1
 800f30a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f30e:	e0b5      	b.n	800f47c <UART_SetConfig+0xa94>
 800f310:	03d09000 	.word	0x03d09000
 800f314:	003d0900 	.word	0x003d0900
 800f318:	08011d24 	.word	0x08011d24
 800f31c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f320:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f324:	2b20      	cmp	r3, #32
 800f326:	dc49      	bgt.n	800f3bc <UART_SetConfig+0x9d4>
 800f328:	2b00      	cmp	r3, #0
 800f32a:	db7c      	blt.n	800f426 <UART_SetConfig+0xa3e>
 800f32c:	2b20      	cmp	r3, #32
 800f32e:	d87a      	bhi.n	800f426 <UART_SetConfig+0xa3e>
 800f330:	a201      	add	r2, pc, #4	; (adr r2, 800f338 <UART_SetConfig+0x950>)
 800f332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f336:	bf00      	nop
 800f338:	0800f3c3 	.word	0x0800f3c3
 800f33c:	0800f3cb 	.word	0x0800f3cb
 800f340:	0800f427 	.word	0x0800f427
 800f344:	0800f427 	.word	0x0800f427
 800f348:	0800f3d3 	.word	0x0800f3d3
 800f34c:	0800f427 	.word	0x0800f427
 800f350:	0800f427 	.word	0x0800f427
 800f354:	0800f427 	.word	0x0800f427
 800f358:	0800f3e3 	.word	0x0800f3e3
 800f35c:	0800f427 	.word	0x0800f427
 800f360:	0800f427 	.word	0x0800f427
 800f364:	0800f427 	.word	0x0800f427
 800f368:	0800f427 	.word	0x0800f427
 800f36c:	0800f427 	.word	0x0800f427
 800f370:	0800f427 	.word	0x0800f427
 800f374:	0800f427 	.word	0x0800f427
 800f378:	0800f3f3 	.word	0x0800f3f3
 800f37c:	0800f427 	.word	0x0800f427
 800f380:	0800f427 	.word	0x0800f427
 800f384:	0800f427 	.word	0x0800f427
 800f388:	0800f427 	.word	0x0800f427
 800f38c:	0800f427 	.word	0x0800f427
 800f390:	0800f427 	.word	0x0800f427
 800f394:	0800f427 	.word	0x0800f427
 800f398:	0800f427 	.word	0x0800f427
 800f39c:	0800f427 	.word	0x0800f427
 800f3a0:	0800f427 	.word	0x0800f427
 800f3a4:	0800f427 	.word	0x0800f427
 800f3a8:	0800f427 	.word	0x0800f427
 800f3ac:	0800f427 	.word	0x0800f427
 800f3b0:	0800f427 	.word	0x0800f427
 800f3b4:	0800f427 	.word	0x0800f427
 800f3b8:	0800f419 	.word	0x0800f419
 800f3bc:	2b40      	cmp	r3, #64	; 0x40
 800f3be:	d02e      	beq.n	800f41e <UART_SetConfig+0xa36>
 800f3c0:	e031      	b.n	800f426 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3c2:	f7fb fc8f 	bl	800ace4 <HAL_RCC_GetPCLK1Freq>
 800f3c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3c8:	e033      	b.n	800f432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3ca:	f7fb fca1 	bl	800ad10 <HAL_RCC_GetPCLK2Freq>
 800f3ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3d0:	e02f      	b.n	800f432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fc fc0c 	bl	800bbf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e0:	e027      	b.n	800f432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3e2:	f107 0318 	add.w	r3, r7, #24
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fc fd58 	bl	800be9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3f0:	e01f      	b.n	800f432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3f2:	4b2d      	ldr	r3, [pc, #180]	; (800f4a8 <UART_SetConfig+0xac0>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f003 0320 	and.w	r3, r3, #32
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d009      	beq.n	800f412 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3fe:	4b2a      	ldr	r3, [pc, #168]	; (800f4a8 <UART_SetConfig+0xac0>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	08db      	lsrs	r3, r3, #3
 800f404:	f003 0303 	and.w	r3, r3, #3
 800f408:	4a28      	ldr	r2, [pc, #160]	; (800f4ac <UART_SetConfig+0xac4>)
 800f40a:	fa22 f303 	lsr.w	r3, r2, r3
 800f40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f410:	e00f      	b.n	800f432 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f412:	4b26      	ldr	r3, [pc, #152]	; (800f4ac <UART_SetConfig+0xac4>)
 800f414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f416:	e00c      	b.n	800f432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f418:	4b25      	ldr	r3, [pc, #148]	; (800f4b0 <UART_SetConfig+0xac8>)
 800f41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f41c:	e009      	b.n	800f432 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f41e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f424:	e005      	b.n	800f432 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f426:	2300      	movs	r3, #0
 800f428:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f42a:	2301      	movs	r3, #1
 800f42c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f430:	bf00      	nop
    }

    if (pclk != 0U)
 800f432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f434:	2b00      	cmp	r3, #0
 800f436:	d021      	beq.n	800f47c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43c:	4a1d      	ldr	r2, [pc, #116]	; (800f4b4 <UART_SetConfig+0xacc>)
 800f43e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f442:	461a      	mov	r2, r3
 800f444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f446:	fbb3 f2f2 	udiv	r2, r3, r2
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	085b      	lsrs	r3, r3, #1
 800f450:	441a      	add	r2, r3
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	fbb2 f3f3 	udiv	r3, r2, r3
 800f45a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45e:	2b0f      	cmp	r3, #15
 800f460:	d909      	bls.n	800f476 <UART_SetConfig+0xa8e>
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f468:	d205      	bcs.n	800f476 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	60da      	str	r2, [r3, #12]
 800f474:	e002      	b.n	800f47c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f476:	2301      	movs	r3, #1
 800f478:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	2201      	movs	r2, #1
 800f480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	2201      	movs	r2, #1
 800f488:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2200      	movs	r2, #0
 800f490:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	2200      	movs	r2, #0
 800f496:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f498:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3748      	adds	r7, #72	; 0x48
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4a6:	bf00      	nop
 800f4a8:	58024400 	.word	0x58024400
 800f4ac:	03d09000 	.word	0x03d09000
 800f4b0:	003d0900 	.word	0x003d0900
 800f4b4:	08011d24 	.word	0x08011d24

0800f4b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4c4:	f003 0301 	and.w	r3, r3, #1
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00a      	beq.n	800f4e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	430a      	orrs	r2, r1
 800f4e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4e6:	f003 0302 	and.w	r3, r3, #2
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00a      	beq.n	800f504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	430a      	orrs	r2, r1
 800f502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f508:	f003 0304 	and.w	r3, r3, #4
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00a      	beq.n	800f526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	430a      	orrs	r2, r1
 800f524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f52a:	f003 0308 	and.w	r3, r3, #8
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00a      	beq.n	800f548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	430a      	orrs	r2, r1
 800f546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f54c:	f003 0310 	and.w	r3, r3, #16
 800f550:	2b00      	cmp	r3, #0
 800f552:	d00a      	beq.n	800f56a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	430a      	orrs	r2, r1
 800f568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f56e:	f003 0320 	and.w	r3, r3, #32
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00a      	beq.n	800f58c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	689b      	ldr	r3, [r3, #8]
 800f57c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	430a      	orrs	r2, r1
 800f58a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f594:	2b00      	cmp	r3, #0
 800f596:	d01a      	beq.n	800f5ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	430a      	orrs	r2, r1
 800f5ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5b6:	d10a      	bne.n	800f5ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	430a      	orrs	r2, r1
 800f5cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d00a      	beq.n	800f5f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	430a      	orrs	r2, r1
 800f5ee:	605a      	str	r2, [r3, #4]
  }
}
 800f5f0:	bf00      	nop
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b086      	sub	sp, #24
 800f600:	af02      	add	r7, sp, #8
 800f602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f60c:	f7f4 ff32 	bl	8004474 <HAL_GetTick>
 800f610:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f003 0308 	and.w	r3, r3, #8
 800f61c:	2b08      	cmp	r3, #8
 800f61e:	d10e      	bne.n	800f63e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2200      	movs	r2, #0
 800f62a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 f82f 	bl	800f692 <UART_WaitOnFlagUntilTimeout>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f63a:	2303      	movs	r3, #3
 800f63c:	e025      	b.n	800f68a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f003 0304 	and.w	r3, r3, #4
 800f648:	2b04      	cmp	r3, #4
 800f64a:	d10e      	bne.n	800f66a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f64c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f650:	9300      	str	r3, [sp, #0]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 f819 	bl	800f692 <UART_WaitOnFlagUntilTimeout>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d001      	beq.n	800f66a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f666:	2303      	movs	r3, #3
 800f668:	e00f      	b.n	800f68a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2220      	movs	r2, #32
 800f66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2220      	movs	r2, #32
 800f676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b09c      	sub	sp, #112	; 0x70
 800f696:	af00      	add	r7, sp, #0
 800f698:	60f8      	str	r0, [r7, #12]
 800f69a:	60b9      	str	r1, [r7, #8]
 800f69c:	603b      	str	r3, [r7, #0]
 800f69e:	4613      	mov	r3, r2
 800f6a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6a2:	e0a9      	b.n	800f7f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f6a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6aa:	f000 80a5 	beq.w	800f7f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6ae:	f7f4 fee1 	bl	8004474 <HAL_GetTick>
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	1ad3      	subs	r3, r2, r3
 800f6b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d302      	bcc.n	800f6c4 <UART_WaitOnFlagUntilTimeout+0x32>
 800f6be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d140      	bne.n	800f746 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6cc:	e853 3f00 	ldrex	r3, [r3]
 800f6d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f6d8:	667b      	str	r3, [r7, #100]	; 0x64
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f6e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f6ea:	e841 2300 	strex	r3, r2, [r1]
 800f6ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f6f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1e6      	bne.n	800f6c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	3308      	adds	r3, #8
 800f6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f700:	e853 3f00 	ldrex	r3, [r3]
 800f704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f708:	f023 0301 	bic.w	r3, r3, #1
 800f70c:	663b      	str	r3, [r7, #96]	; 0x60
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	3308      	adds	r3, #8
 800f714:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f716:	64ba      	str	r2, [r7, #72]	; 0x48
 800f718:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f71a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f71c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f71e:	e841 2300 	strex	r3, r2, [r1]
 800f722:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f726:	2b00      	cmp	r3, #0
 800f728:	d1e5      	bne.n	800f6f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2220      	movs	r2, #32
 800f72e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2220      	movs	r2, #32
 800f736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2200      	movs	r2, #0
 800f73e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f742:	2303      	movs	r3, #3
 800f744:	e069      	b.n	800f81a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f003 0304 	and.w	r3, r3, #4
 800f750:	2b00      	cmp	r3, #0
 800f752:	d051      	beq.n	800f7f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	69db      	ldr	r3, [r3, #28]
 800f75a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f75e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f762:	d149      	bne.n	800f7f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f76c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f776:	e853 3f00 	ldrex	r3, [r3]
 800f77a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f782:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f78c:	637b      	str	r3, [r7, #52]	; 0x34
 800f78e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f790:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f794:	e841 2300 	strex	r3, r2, [r1]
 800f798:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1e6      	bne.n	800f76e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	3308      	adds	r3, #8
 800f7a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	e853 3f00 	ldrex	r3, [r3]
 800f7ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	f023 0301 	bic.w	r3, r3, #1
 800f7b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	3308      	adds	r3, #8
 800f7be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7c0:	623a      	str	r2, [r7, #32]
 800f7c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c4:	69f9      	ldr	r1, [r7, #28]
 800f7c6:	6a3a      	ldr	r2, [r7, #32]
 800f7c8:	e841 2300 	strex	r3, r2, [r1]
 800f7cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d1e5      	bne.n	800f7a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2220      	movs	r2, #32
 800f7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2220      	movs	r2, #32
 800f7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2220      	movs	r2, #32
 800f7e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	e010      	b.n	800f81a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	69da      	ldr	r2, [r3, #28]
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	4013      	ands	r3, r2
 800f802:	68ba      	ldr	r2, [r7, #8]
 800f804:	429a      	cmp	r2, r3
 800f806:	bf0c      	ite	eq
 800f808:	2301      	moveq	r3, #1
 800f80a:	2300      	movne	r3, #0
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	461a      	mov	r2, r3
 800f810:	79fb      	ldrb	r3, [r7, #7]
 800f812:	429a      	cmp	r2, r3
 800f814:	f43f af46 	beq.w	800f6a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3770      	adds	r7, #112	; 0x70
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
	...

0800f824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f824:	b480      	push	{r7}
 800f826:	b095      	sub	sp, #84	; 0x54
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f834:	e853 3f00 	ldrex	r3, [r3]
 800f838:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f840:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	461a      	mov	r2, r3
 800f848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f84a:	643b      	str	r3, [r7, #64]	; 0x40
 800f84c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f84e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f852:	e841 2300 	strex	r3, r2, [r1]
 800f856:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d1e6      	bne.n	800f82c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	3308      	adds	r3, #8
 800f864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	e853 3f00 	ldrex	r3, [r3]
 800f86c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f86e:	69fa      	ldr	r2, [r7, #28]
 800f870:	4b1e      	ldr	r3, [pc, #120]	; (800f8ec <UART_EndRxTransfer+0xc8>)
 800f872:	4013      	ands	r3, r2
 800f874:	64bb      	str	r3, [r7, #72]	; 0x48
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	3308      	adds	r3, #8
 800f87c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f87e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f880:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f886:	e841 2300 	strex	r3, r2, [r1]
 800f88a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d1e5      	bne.n	800f85e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f896:	2b01      	cmp	r3, #1
 800f898:	d118      	bne.n	800f8cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	e853 3f00 	ldrex	r3, [r3]
 800f8a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	f023 0310 	bic.w	r3, r3, #16
 800f8ae:	647b      	str	r3, [r7, #68]	; 0x44
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8b8:	61bb      	str	r3, [r7, #24]
 800f8ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8bc:	6979      	ldr	r1, [r7, #20]
 800f8be:	69ba      	ldr	r2, [r7, #24]
 800f8c0:	e841 2300 	strex	r3, r2, [r1]
 800f8c4:	613b      	str	r3, [r7, #16]
   return(result);
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1e6      	bne.n	800f89a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2220      	movs	r2, #32
 800f8d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f8e0:	bf00      	nop
 800f8e2:	3754      	adds	r7, #84	; 0x54
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	effffffe 	.word	0xeffffffe

0800f8f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2200      	movs	r2, #0
 800f902:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2200      	movs	r2, #0
 800f90a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f90e:	68f8      	ldr	r0, [r7, #12]
 800f910:	f7ff f854 	bl	800e9bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f914:	bf00      	nop
 800f916:	3710      	adds	r7, #16
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b08f      	sub	sp, #60	; 0x3c
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f92a:	2b21      	cmp	r3, #33	; 0x21
 800f92c:	d14c      	bne.n	800f9c8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f934:	b29b      	uxth	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d132      	bne.n	800f9a0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f940:	6a3b      	ldr	r3, [r7, #32]
 800f942:	e853 3f00 	ldrex	r3, [r3]
 800f946:	61fb      	str	r3, [r7, #28]
   return(result);
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f94e:	637b      	str	r3, [r7, #52]	; 0x34
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	461a      	mov	r2, r3
 800f956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f95a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f95c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f95e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f960:	e841 2300 	strex	r3, r2, [r1]
 800f964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d1e6      	bne.n	800f93a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	e853 3f00 	ldrex	r3, [r3]
 800f978:	60bb      	str	r3, [r7, #8]
   return(result);
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f980:	633b      	str	r3, [r7, #48]	; 0x30
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	461a      	mov	r2, r3
 800f988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98a:	61bb      	str	r3, [r7, #24]
 800f98c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98e:	6979      	ldr	r1, [r7, #20]
 800f990:	69ba      	ldr	r2, [r7, #24]
 800f992:	e841 2300 	strex	r3, r2, [r1]
 800f996:	613b      	str	r3, [r7, #16]
   return(result);
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1e6      	bne.n	800f96c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800f99e:	e013      	b.n	800f9c8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9a4:	781a      	ldrb	r2, [r3, #0]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9b0:	1c5a      	adds	r2, r3, #1
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f9c8:	bf00      	nop
 800f9ca:	373c      	adds	r7, #60	; 0x3c
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr

0800f9d4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b091      	sub	sp, #68	; 0x44
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9e2:	2b21      	cmp	r3, #33	; 0x21
 800f9e4:	d151      	bne.n	800fa8a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d132      	bne.n	800fa58 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fa:	e853 3f00 	ldrex	r3, [r3]
 800f9fe:	623b      	str	r3, [r7, #32]
   return(result);
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa06:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa10:	633b      	str	r3, [r7, #48]	; 0x30
 800fa12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa18:	e841 2300 	strex	r3, r2, [r1]
 800fa1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d1e6      	bne.n	800f9f2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	e853 3f00 	ldrex	r3, [r3]
 800fa30:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa38:	637b      	str	r3, [r7, #52]	; 0x34
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	461a      	mov	r2, r3
 800fa40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa42:	61fb      	str	r3, [r7, #28]
 800fa44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa46:	69b9      	ldr	r1, [r7, #24]
 800fa48:	69fa      	ldr	r2, [r7, #28]
 800fa4a:	e841 2300 	strex	r3, r2, [r1]
 800fa4e:	617b      	str	r3, [r7, #20]
   return(result);
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d1e6      	bne.n	800fa24 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800fa56:	e018      	b.n	800fa8a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa5c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800fa5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa60:	881b      	ldrh	r3, [r3, #0]
 800fa62:	461a      	mov	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fa6c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa72:	1c9a      	adds	r2, r3, #2
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	3b01      	subs	r3, #1
 800fa82:	b29a      	uxth	r2, r3
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800fa8a:	bf00      	nop
 800fa8c:	3744      	adds	r7, #68	; 0x44
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr

0800fa96 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fa96:	b480      	push	{r7}
 800fa98:	b091      	sub	sp, #68	; 0x44
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faa4:	2b21      	cmp	r3, #33	; 0x21
 800faa6:	d160      	bne.n	800fb6a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800faae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fab0:	e057      	b.n	800fb62 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fab8:	b29b      	uxth	r3, r3
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d133      	bne.n	800fb26 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	3308      	adds	r3, #8
 800fac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac8:	e853 3f00 	ldrex	r3, [r3]
 800facc:	623b      	str	r3, [r7, #32]
   return(result);
 800face:	6a3b      	ldr	r3, [r7, #32]
 800fad0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fad4:	63bb      	str	r3, [r7, #56]	; 0x38
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	3308      	adds	r3, #8
 800fadc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fade:	633a      	str	r2, [r7, #48]	; 0x30
 800fae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fae6:	e841 2300 	strex	r3, r2, [r1]
 800faea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800faec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d1e5      	bne.n	800fabe <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	e853 3f00 	ldrex	r3, [r3]
 800fafe:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb06:	637b      	str	r3, [r7, #52]	; 0x34
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb10:	61fb      	str	r3, [r7, #28]
 800fb12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb14:	69b9      	ldr	r1, [r7, #24]
 800fb16:	69fa      	ldr	r2, [r7, #28]
 800fb18:	e841 2300 	strex	r3, r2, [r1]
 800fb1c:	617b      	str	r3, [r7, #20]
   return(result);
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1e6      	bne.n	800faf2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800fb24:	e021      	b.n	800fb6a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	69db      	ldr	r3, [r3, #28]
 800fb2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d013      	beq.n	800fb5c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb38:	781a      	ldrb	r2, [r3, #0]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb44:	1c5a      	adds	r2, r3, #1
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	3b01      	subs	r3, #1
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fb5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb5e:	3b01      	subs	r3, #1
 800fb60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fb62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d1a4      	bne.n	800fab2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800fb68:	e7ff      	b.n	800fb6a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800fb6a:	bf00      	nop
 800fb6c:	3744      	adds	r7, #68	; 0x44
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fb76:	b480      	push	{r7}
 800fb78:	b091      	sub	sp, #68	; 0x44
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb84:	2b21      	cmp	r3, #33	; 0x21
 800fb86:	d165      	bne.n	800fc54 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fb90:	e05c      	b.n	800fc4c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d133      	bne.n	800fc06 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	3308      	adds	r3, #8
 800fba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba6:	6a3b      	ldr	r3, [r7, #32]
 800fba8:	e853 3f00 	ldrex	r3, [r3]
 800fbac:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fbb4:	637b      	str	r3, [r7, #52]	; 0x34
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	3308      	adds	r3, #8
 800fbbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fbc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbc6:	e841 2300 	strex	r3, r2, [r1]
 800fbca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1e5      	bne.n	800fb9e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	e853 3f00 	ldrex	r3, [r3]
 800fbde:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbe6:	633b      	str	r3, [r7, #48]	; 0x30
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	461a      	mov	r2, r3
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	61bb      	str	r3, [r7, #24]
 800fbf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf4:	6979      	ldr	r1, [r7, #20]
 800fbf6:	69ba      	ldr	r2, [r7, #24]
 800fbf8:	e841 2300 	strex	r3, r2, [r1]
 800fbfc:	613b      	str	r3, [r7, #16]
   return(result);
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d1e6      	bne.n	800fbd2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800fc04:	e026      	b.n	800fc54 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	69db      	ldr	r3, [r3, #28]
 800fc0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d018      	beq.n	800fc46 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc18:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800fc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1c:	881b      	ldrh	r3, [r3, #0]
 800fc1e:	461a      	mov	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc28:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc2e:	1c9a      	adds	r2, r3, #2
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fc46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fc4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d19f      	bne.n	800fb92 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800fc52:	e7ff      	b.n	800fc54 <UART_TxISR_16BIT_FIFOEN+0xde>
 800fc54:	bf00      	nop
 800fc56:	3744      	adds	r7, #68	; 0x44
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b088      	sub	sp, #32
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	e853 3f00 	ldrex	r3, [r3]
 800fc74:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc7c:	61fb      	str	r3, [r7, #28]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	461a      	mov	r2, r3
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	61bb      	str	r3, [r7, #24]
 800fc88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc8a:	6979      	ldr	r1, [r7, #20]
 800fc8c:	69ba      	ldr	r2, [r7, #24]
 800fc8e:	e841 2300 	strex	r3, r2, [r1]
 800fc92:	613b      	str	r3, [r7, #16]
   return(result);
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1e6      	bne.n	800fc68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2220      	movs	r2, #32
 800fc9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7fe fe7d 	bl	800e9a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcae:	bf00      	nop
 800fcb0:	3720      	adds	r7, #32
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fcb6:	b480      	push	{r7}
 800fcb8:	b083      	sub	sp, #12
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fcbe:	bf00      	nop
 800fcc0:	370c      	adds	r7, #12
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr

0800fcca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fcca:	b480      	push	{r7}
 800fccc:	b083      	sub	sp, #12
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fcd2:	bf00      	nop
 800fcd4:	370c      	adds	r7, #12
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr

0800fcde <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fcde:	b480      	push	{r7}
 800fce0:	b083      	sub	sp, #12
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fce6:	bf00      	nop
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr

0800fcf2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fcf2:	b480      	push	{r7}
 800fcf4:	b085      	sub	sp, #20
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d101      	bne.n	800fd08 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd04:	2302      	movs	r3, #2
 800fd06:	e027      	b.n	800fd58 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2224      	movs	r2, #36	; 0x24
 800fd14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f022 0201 	bic.w	r2, r2, #1
 800fd2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fd36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2220      	movs	r2, #32
 800fd4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd56:	2300      	movs	r3, #0
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3714      	adds	r7, #20
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd74:	2b01      	cmp	r3, #1
 800fd76:	d101      	bne.n	800fd7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fd78:	2302      	movs	r3, #2
 800fd7a:	e02d      	b.n	800fdd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2201      	movs	r2, #1
 800fd80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2224      	movs	r2, #36	; 0x24
 800fd88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f022 0201 	bic.w	r2, r2, #1
 800fda2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	683a      	ldr	r2, [r7, #0]
 800fdb4:	430a      	orrs	r2, r1
 800fdb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 f84f 	bl	800fe5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2220      	movs	r2, #32
 800fdca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdd6:	2300      	movs	r3, #0
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3710      	adds	r7, #16
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d101      	bne.n	800fdf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fdf4:	2302      	movs	r3, #2
 800fdf6:	e02d      	b.n	800fe54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2224      	movs	r2, #36	; 0x24
 800fe04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f022 0201 	bic.w	r2, r2, #1
 800fe1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	689b      	ldr	r3, [r3, #8]
 800fe26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	683a      	ldr	r2, [r7, #0]
 800fe30:	430a      	orrs	r2, r1
 800fe32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 f811 	bl	800fe5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2220      	movs	r2, #32
 800fe46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe52:	2300      	movs	r3, #0
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3710      	adds	r7, #16
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b085      	sub	sp, #20
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d108      	bne.n	800fe7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2201      	movs	r2, #1
 800fe70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2201      	movs	r2, #1
 800fe78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fe7c:	e031      	b.n	800fee2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fe7e:	2310      	movs	r3, #16
 800fe80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fe82:	2310      	movs	r3, #16
 800fe84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	689b      	ldr	r3, [r3, #8]
 800fe8c:	0e5b      	lsrs	r3, r3, #25
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	f003 0307 	and.w	r3, r3, #7
 800fe94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	0f5b      	lsrs	r3, r3, #29
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	f003 0307 	and.w	r3, r3, #7
 800fea4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fea6:	7bbb      	ldrb	r3, [r7, #14]
 800fea8:	7b3a      	ldrb	r2, [r7, #12]
 800feaa:	4911      	ldr	r1, [pc, #68]	; (800fef0 <UARTEx_SetNbDataToProcess+0x94>)
 800feac:	5c8a      	ldrb	r2, [r1, r2]
 800feae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800feb2:	7b3a      	ldrb	r2, [r7, #12]
 800feb4:	490f      	ldr	r1, [pc, #60]	; (800fef4 <UARTEx_SetNbDataToProcess+0x98>)
 800feb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800feb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800febc:	b29a      	uxth	r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fec4:	7bfb      	ldrb	r3, [r7, #15]
 800fec6:	7b7a      	ldrb	r2, [r7, #13]
 800fec8:	4909      	ldr	r1, [pc, #36]	; (800fef0 <UARTEx_SetNbDataToProcess+0x94>)
 800feca:	5c8a      	ldrb	r2, [r1, r2]
 800fecc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fed0:	7b7a      	ldrb	r2, [r7, #13]
 800fed2:	4908      	ldr	r1, [pc, #32]	; (800fef4 <UARTEx_SetNbDataToProcess+0x98>)
 800fed4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fed6:	fb93 f3f2 	sdiv	r3, r3, r2
 800feda:	b29a      	uxth	r2, r3
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fee2:	bf00      	nop
 800fee4:	3714      	adds	r7, #20
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	08011d3c 	.word	0x08011d3c
 800fef4:	08011d44 	.word	0x08011d44

0800fef8 <__errno>:
 800fef8:	4b01      	ldr	r3, [pc, #4]	; (800ff00 <__errno+0x8>)
 800fefa:	6818      	ldr	r0, [r3, #0]
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	24000028 	.word	0x24000028

0800ff04 <__libc_init_array>:
 800ff04:	b570      	push	{r4, r5, r6, lr}
 800ff06:	4d0d      	ldr	r5, [pc, #52]	; (800ff3c <__libc_init_array+0x38>)
 800ff08:	4c0d      	ldr	r4, [pc, #52]	; (800ff40 <__libc_init_array+0x3c>)
 800ff0a:	1b64      	subs	r4, r4, r5
 800ff0c:	10a4      	asrs	r4, r4, #2
 800ff0e:	2600      	movs	r6, #0
 800ff10:	42a6      	cmp	r6, r4
 800ff12:	d109      	bne.n	800ff28 <__libc_init_array+0x24>
 800ff14:	4d0b      	ldr	r5, [pc, #44]	; (800ff44 <__libc_init_array+0x40>)
 800ff16:	4c0c      	ldr	r4, [pc, #48]	; (800ff48 <__libc_init_array+0x44>)
 800ff18:	f001 fee4 	bl	8011ce4 <_init>
 800ff1c:	1b64      	subs	r4, r4, r5
 800ff1e:	10a4      	asrs	r4, r4, #2
 800ff20:	2600      	movs	r6, #0
 800ff22:	42a6      	cmp	r6, r4
 800ff24:	d105      	bne.n	800ff32 <__libc_init_array+0x2e>
 800ff26:	bd70      	pop	{r4, r5, r6, pc}
 800ff28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff2c:	4798      	blx	r3
 800ff2e:	3601      	adds	r6, #1
 800ff30:	e7ee      	b.n	800ff10 <__libc_init_array+0xc>
 800ff32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff36:	4798      	blx	r3
 800ff38:	3601      	adds	r6, #1
 800ff3a:	e7f2      	b.n	800ff22 <__libc_init_array+0x1e>
 800ff3c:	08013818 	.word	0x08013818
 800ff40:	08013818 	.word	0x08013818
 800ff44:	08013818 	.word	0x08013818
 800ff48:	0801381c 	.word	0x0801381c

0800ff4c <memset>:
 800ff4c:	4402      	add	r2, r0
 800ff4e:	4603      	mov	r3, r0
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d100      	bne.n	800ff56 <memset+0xa>
 800ff54:	4770      	bx	lr
 800ff56:	f803 1b01 	strb.w	r1, [r3], #1
 800ff5a:	e7f9      	b.n	800ff50 <memset+0x4>

0800ff5c <siprintf>:
 800ff5c:	b40e      	push	{r1, r2, r3}
 800ff5e:	b500      	push	{lr}
 800ff60:	b09c      	sub	sp, #112	; 0x70
 800ff62:	ab1d      	add	r3, sp, #116	; 0x74
 800ff64:	9002      	str	r0, [sp, #8]
 800ff66:	9006      	str	r0, [sp, #24]
 800ff68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ff6c:	4809      	ldr	r0, [pc, #36]	; (800ff94 <siprintf+0x38>)
 800ff6e:	9107      	str	r1, [sp, #28]
 800ff70:	9104      	str	r1, [sp, #16]
 800ff72:	4909      	ldr	r1, [pc, #36]	; (800ff98 <siprintf+0x3c>)
 800ff74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff78:	9105      	str	r1, [sp, #20]
 800ff7a:	6800      	ldr	r0, [r0, #0]
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	a902      	add	r1, sp, #8
 800ff80:	f000 f868 	bl	8010054 <_svfiprintf_r>
 800ff84:	9b02      	ldr	r3, [sp, #8]
 800ff86:	2200      	movs	r2, #0
 800ff88:	701a      	strb	r2, [r3, #0]
 800ff8a:	b01c      	add	sp, #112	; 0x70
 800ff8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff90:	b003      	add	sp, #12
 800ff92:	4770      	bx	lr
 800ff94:	24000028 	.word	0x24000028
 800ff98:	ffff0208 	.word	0xffff0208

0800ff9c <__ssputs_r>:
 800ff9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa0:	688e      	ldr	r6, [r1, #8]
 800ffa2:	429e      	cmp	r6, r3
 800ffa4:	4682      	mov	sl, r0
 800ffa6:	460c      	mov	r4, r1
 800ffa8:	4690      	mov	r8, r2
 800ffaa:	461f      	mov	r7, r3
 800ffac:	d838      	bhi.n	8010020 <__ssputs_r+0x84>
 800ffae:	898a      	ldrh	r2, [r1, #12]
 800ffb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ffb4:	d032      	beq.n	801001c <__ssputs_r+0x80>
 800ffb6:	6825      	ldr	r5, [r4, #0]
 800ffb8:	6909      	ldr	r1, [r1, #16]
 800ffba:	eba5 0901 	sub.w	r9, r5, r1
 800ffbe:	6965      	ldr	r5, [r4, #20]
 800ffc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ffc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ffc8:	3301      	adds	r3, #1
 800ffca:	444b      	add	r3, r9
 800ffcc:	106d      	asrs	r5, r5, #1
 800ffce:	429d      	cmp	r5, r3
 800ffd0:	bf38      	it	cc
 800ffd2:	461d      	movcc	r5, r3
 800ffd4:	0553      	lsls	r3, r2, #21
 800ffd6:	d531      	bpl.n	801003c <__ssputs_r+0xa0>
 800ffd8:	4629      	mov	r1, r5
 800ffda:	f000 fb63 	bl	80106a4 <_malloc_r>
 800ffde:	4606      	mov	r6, r0
 800ffe0:	b950      	cbnz	r0, 800fff8 <__ssputs_r+0x5c>
 800ffe2:	230c      	movs	r3, #12
 800ffe4:	f8ca 3000 	str.w	r3, [sl]
 800ffe8:	89a3      	ldrh	r3, [r4, #12]
 800ffea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffee:	81a3      	strh	r3, [r4, #12]
 800fff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fff8:	6921      	ldr	r1, [r4, #16]
 800fffa:	464a      	mov	r2, r9
 800fffc:	f000 fabe 	bl	801057c <memcpy>
 8010000:	89a3      	ldrh	r3, [r4, #12]
 8010002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801000a:	81a3      	strh	r3, [r4, #12]
 801000c:	6126      	str	r6, [r4, #16]
 801000e:	6165      	str	r5, [r4, #20]
 8010010:	444e      	add	r6, r9
 8010012:	eba5 0509 	sub.w	r5, r5, r9
 8010016:	6026      	str	r6, [r4, #0]
 8010018:	60a5      	str	r5, [r4, #8]
 801001a:	463e      	mov	r6, r7
 801001c:	42be      	cmp	r6, r7
 801001e:	d900      	bls.n	8010022 <__ssputs_r+0x86>
 8010020:	463e      	mov	r6, r7
 8010022:	6820      	ldr	r0, [r4, #0]
 8010024:	4632      	mov	r2, r6
 8010026:	4641      	mov	r1, r8
 8010028:	f000 fab6 	bl	8010598 <memmove>
 801002c:	68a3      	ldr	r3, [r4, #8]
 801002e:	1b9b      	subs	r3, r3, r6
 8010030:	60a3      	str	r3, [r4, #8]
 8010032:	6823      	ldr	r3, [r4, #0]
 8010034:	4433      	add	r3, r6
 8010036:	6023      	str	r3, [r4, #0]
 8010038:	2000      	movs	r0, #0
 801003a:	e7db      	b.n	800fff4 <__ssputs_r+0x58>
 801003c:	462a      	mov	r2, r5
 801003e:	f000 fba5 	bl	801078c <_realloc_r>
 8010042:	4606      	mov	r6, r0
 8010044:	2800      	cmp	r0, #0
 8010046:	d1e1      	bne.n	801000c <__ssputs_r+0x70>
 8010048:	6921      	ldr	r1, [r4, #16]
 801004a:	4650      	mov	r0, sl
 801004c:	f000 fabe 	bl	80105cc <_free_r>
 8010050:	e7c7      	b.n	800ffe2 <__ssputs_r+0x46>
	...

08010054 <_svfiprintf_r>:
 8010054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010058:	4698      	mov	r8, r3
 801005a:	898b      	ldrh	r3, [r1, #12]
 801005c:	061b      	lsls	r3, r3, #24
 801005e:	b09d      	sub	sp, #116	; 0x74
 8010060:	4607      	mov	r7, r0
 8010062:	460d      	mov	r5, r1
 8010064:	4614      	mov	r4, r2
 8010066:	d50e      	bpl.n	8010086 <_svfiprintf_r+0x32>
 8010068:	690b      	ldr	r3, [r1, #16]
 801006a:	b963      	cbnz	r3, 8010086 <_svfiprintf_r+0x32>
 801006c:	2140      	movs	r1, #64	; 0x40
 801006e:	f000 fb19 	bl	80106a4 <_malloc_r>
 8010072:	6028      	str	r0, [r5, #0]
 8010074:	6128      	str	r0, [r5, #16]
 8010076:	b920      	cbnz	r0, 8010082 <_svfiprintf_r+0x2e>
 8010078:	230c      	movs	r3, #12
 801007a:	603b      	str	r3, [r7, #0]
 801007c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010080:	e0d1      	b.n	8010226 <_svfiprintf_r+0x1d2>
 8010082:	2340      	movs	r3, #64	; 0x40
 8010084:	616b      	str	r3, [r5, #20]
 8010086:	2300      	movs	r3, #0
 8010088:	9309      	str	r3, [sp, #36]	; 0x24
 801008a:	2320      	movs	r3, #32
 801008c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010090:	f8cd 800c 	str.w	r8, [sp, #12]
 8010094:	2330      	movs	r3, #48	; 0x30
 8010096:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010240 <_svfiprintf_r+0x1ec>
 801009a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801009e:	f04f 0901 	mov.w	r9, #1
 80100a2:	4623      	mov	r3, r4
 80100a4:	469a      	mov	sl, r3
 80100a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100aa:	b10a      	cbz	r2, 80100b0 <_svfiprintf_r+0x5c>
 80100ac:	2a25      	cmp	r2, #37	; 0x25
 80100ae:	d1f9      	bne.n	80100a4 <_svfiprintf_r+0x50>
 80100b0:	ebba 0b04 	subs.w	fp, sl, r4
 80100b4:	d00b      	beq.n	80100ce <_svfiprintf_r+0x7a>
 80100b6:	465b      	mov	r3, fp
 80100b8:	4622      	mov	r2, r4
 80100ba:	4629      	mov	r1, r5
 80100bc:	4638      	mov	r0, r7
 80100be:	f7ff ff6d 	bl	800ff9c <__ssputs_r>
 80100c2:	3001      	adds	r0, #1
 80100c4:	f000 80aa 	beq.w	801021c <_svfiprintf_r+0x1c8>
 80100c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100ca:	445a      	add	r2, fp
 80100cc:	9209      	str	r2, [sp, #36]	; 0x24
 80100ce:	f89a 3000 	ldrb.w	r3, [sl]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f000 80a2 	beq.w	801021c <_svfiprintf_r+0x1c8>
 80100d8:	2300      	movs	r3, #0
 80100da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100e2:	f10a 0a01 	add.w	sl, sl, #1
 80100e6:	9304      	str	r3, [sp, #16]
 80100e8:	9307      	str	r3, [sp, #28]
 80100ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100ee:	931a      	str	r3, [sp, #104]	; 0x68
 80100f0:	4654      	mov	r4, sl
 80100f2:	2205      	movs	r2, #5
 80100f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100f8:	4851      	ldr	r0, [pc, #324]	; (8010240 <_svfiprintf_r+0x1ec>)
 80100fa:	f7f0 f8f9 	bl	80002f0 <memchr>
 80100fe:	9a04      	ldr	r2, [sp, #16]
 8010100:	b9d8      	cbnz	r0, 801013a <_svfiprintf_r+0xe6>
 8010102:	06d0      	lsls	r0, r2, #27
 8010104:	bf44      	itt	mi
 8010106:	2320      	movmi	r3, #32
 8010108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801010c:	0711      	lsls	r1, r2, #28
 801010e:	bf44      	itt	mi
 8010110:	232b      	movmi	r3, #43	; 0x2b
 8010112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010116:	f89a 3000 	ldrb.w	r3, [sl]
 801011a:	2b2a      	cmp	r3, #42	; 0x2a
 801011c:	d015      	beq.n	801014a <_svfiprintf_r+0xf6>
 801011e:	9a07      	ldr	r2, [sp, #28]
 8010120:	4654      	mov	r4, sl
 8010122:	2000      	movs	r0, #0
 8010124:	f04f 0c0a 	mov.w	ip, #10
 8010128:	4621      	mov	r1, r4
 801012a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801012e:	3b30      	subs	r3, #48	; 0x30
 8010130:	2b09      	cmp	r3, #9
 8010132:	d94e      	bls.n	80101d2 <_svfiprintf_r+0x17e>
 8010134:	b1b0      	cbz	r0, 8010164 <_svfiprintf_r+0x110>
 8010136:	9207      	str	r2, [sp, #28]
 8010138:	e014      	b.n	8010164 <_svfiprintf_r+0x110>
 801013a:	eba0 0308 	sub.w	r3, r0, r8
 801013e:	fa09 f303 	lsl.w	r3, r9, r3
 8010142:	4313      	orrs	r3, r2
 8010144:	9304      	str	r3, [sp, #16]
 8010146:	46a2      	mov	sl, r4
 8010148:	e7d2      	b.n	80100f0 <_svfiprintf_r+0x9c>
 801014a:	9b03      	ldr	r3, [sp, #12]
 801014c:	1d19      	adds	r1, r3, #4
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	9103      	str	r1, [sp, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	bfbb      	ittet	lt
 8010156:	425b      	neglt	r3, r3
 8010158:	f042 0202 	orrlt.w	r2, r2, #2
 801015c:	9307      	strge	r3, [sp, #28]
 801015e:	9307      	strlt	r3, [sp, #28]
 8010160:	bfb8      	it	lt
 8010162:	9204      	strlt	r2, [sp, #16]
 8010164:	7823      	ldrb	r3, [r4, #0]
 8010166:	2b2e      	cmp	r3, #46	; 0x2e
 8010168:	d10c      	bne.n	8010184 <_svfiprintf_r+0x130>
 801016a:	7863      	ldrb	r3, [r4, #1]
 801016c:	2b2a      	cmp	r3, #42	; 0x2a
 801016e:	d135      	bne.n	80101dc <_svfiprintf_r+0x188>
 8010170:	9b03      	ldr	r3, [sp, #12]
 8010172:	1d1a      	adds	r2, r3, #4
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	9203      	str	r2, [sp, #12]
 8010178:	2b00      	cmp	r3, #0
 801017a:	bfb8      	it	lt
 801017c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010180:	3402      	adds	r4, #2
 8010182:	9305      	str	r3, [sp, #20]
 8010184:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010250 <_svfiprintf_r+0x1fc>
 8010188:	7821      	ldrb	r1, [r4, #0]
 801018a:	2203      	movs	r2, #3
 801018c:	4650      	mov	r0, sl
 801018e:	f7f0 f8af 	bl	80002f0 <memchr>
 8010192:	b140      	cbz	r0, 80101a6 <_svfiprintf_r+0x152>
 8010194:	2340      	movs	r3, #64	; 0x40
 8010196:	eba0 000a 	sub.w	r0, r0, sl
 801019a:	fa03 f000 	lsl.w	r0, r3, r0
 801019e:	9b04      	ldr	r3, [sp, #16]
 80101a0:	4303      	orrs	r3, r0
 80101a2:	3401      	adds	r4, #1
 80101a4:	9304      	str	r3, [sp, #16]
 80101a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101aa:	4826      	ldr	r0, [pc, #152]	; (8010244 <_svfiprintf_r+0x1f0>)
 80101ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101b0:	2206      	movs	r2, #6
 80101b2:	f7f0 f89d 	bl	80002f0 <memchr>
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d038      	beq.n	801022c <_svfiprintf_r+0x1d8>
 80101ba:	4b23      	ldr	r3, [pc, #140]	; (8010248 <_svfiprintf_r+0x1f4>)
 80101bc:	bb1b      	cbnz	r3, 8010206 <_svfiprintf_r+0x1b2>
 80101be:	9b03      	ldr	r3, [sp, #12]
 80101c0:	3307      	adds	r3, #7
 80101c2:	f023 0307 	bic.w	r3, r3, #7
 80101c6:	3308      	adds	r3, #8
 80101c8:	9303      	str	r3, [sp, #12]
 80101ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101cc:	4433      	add	r3, r6
 80101ce:	9309      	str	r3, [sp, #36]	; 0x24
 80101d0:	e767      	b.n	80100a2 <_svfiprintf_r+0x4e>
 80101d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80101d6:	460c      	mov	r4, r1
 80101d8:	2001      	movs	r0, #1
 80101da:	e7a5      	b.n	8010128 <_svfiprintf_r+0xd4>
 80101dc:	2300      	movs	r3, #0
 80101de:	3401      	adds	r4, #1
 80101e0:	9305      	str	r3, [sp, #20]
 80101e2:	4619      	mov	r1, r3
 80101e4:	f04f 0c0a 	mov.w	ip, #10
 80101e8:	4620      	mov	r0, r4
 80101ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101ee:	3a30      	subs	r2, #48	; 0x30
 80101f0:	2a09      	cmp	r2, #9
 80101f2:	d903      	bls.n	80101fc <_svfiprintf_r+0x1a8>
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d0c5      	beq.n	8010184 <_svfiprintf_r+0x130>
 80101f8:	9105      	str	r1, [sp, #20]
 80101fa:	e7c3      	b.n	8010184 <_svfiprintf_r+0x130>
 80101fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010200:	4604      	mov	r4, r0
 8010202:	2301      	movs	r3, #1
 8010204:	e7f0      	b.n	80101e8 <_svfiprintf_r+0x194>
 8010206:	ab03      	add	r3, sp, #12
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	462a      	mov	r2, r5
 801020c:	4b0f      	ldr	r3, [pc, #60]	; (801024c <_svfiprintf_r+0x1f8>)
 801020e:	a904      	add	r1, sp, #16
 8010210:	4638      	mov	r0, r7
 8010212:	f3af 8000 	nop.w
 8010216:	1c42      	adds	r2, r0, #1
 8010218:	4606      	mov	r6, r0
 801021a:	d1d6      	bne.n	80101ca <_svfiprintf_r+0x176>
 801021c:	89ab      	ldrh	r3, [r5, #12]
 801021e:	065b      	lsls	r3, r3, #25
 8010220:	f53f af2c 	bmi.w	801007c <_svfiprintf_r+0x28>
 8010224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010226:	b01d      	add	sp, #116	; 0x74
 8010228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022c:	ab03      	add	r3, sp, #12
 801022e:	9300      	str	r3, [sp, #0]
 8010230:	462a      	mov	r2, r5
 8010232:	4b06      	ldr	r3, [pc, #24]	; (801024c <_svfiprintf_r+0x1f8>)
 8010234:	a904      	add	r1, sp, #16
 8010236:	4638      	mov	r0, r7
 8010238:	f000 f87a 	bl	8010330 <_printf_i>
 801023c:	e7eb      	b.n	8010216 <_svfiprintf_r+0x1c2>
 801023e:	bf00      	nop
 8010240:	08011d4c 	.word	0x08011d4c
 8010244:	08011d56 	.word	0x08011d56
 8010248:	00000000 	.word	0x00000000
 801024c:	0800ff9d 	.word	0x0800ff9d
 8010250:	08011d52 	.word	0x08011d52

08010254 <_printf_common>:
 8010254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010258:	4616      	mov	r6, r2
 801025a:	4699      	mov	r9, r3
 801025c:	688a      	ldr	r2, [r1, #8]
 801025e:	690b      	ldr	r3, [r1, #16]
 8010260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010264:	4293      	cmp	r3, r2
 8010266:	bfb8      	it	lt
 8010268:	4613      	movlt	r3, r2
 801026a:	6033      	str	r3, [r6, #0]
 801026c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010270:	4607      	mov	r7, r0
 8010272:	460c      	mov	r4, r1
 8010274:	b10a      	cbz	r2, 801027a <_printf_common+0x26>
 8010276:	3301      	adds	r3, #1
 8010278:	6033      	str	r3, [r6, #0]
 801027a:	6823      	ldr	r3, [r4, #0]
 801027c:	0699      	lsls	r1, r3, #26
 801027e:	bf42      	ittt	mi
 8010280:	6833      	ldrmi	r3, [r6, #0]
 8010282:	3302      	addmi	r3, #2
 8010284:	6033      	strmi	r3, [r6, #0]
 8010286:	6825      	ldr	r5, [r4, #0]
 8010288:	f015 0506 	ands.w	r5, r5, #6
 801028c:	d106      	bne.n	801029c <_printf_common+0x48>
 801028e:	f104 0a19 	add.w	sl, r4, #25
 8010292:	68e3      	ldr	r3, [r4, #12]
 8010294:	6832      	ldr	r2, [r6, #0]
 8010296:	1a9b      	subs	r3, r3, r2
 8010298:	42ab      	cmp	r3, r5
 801029a:	dc26      	bgt.n	80102ea <_printf_common+0x96>
 801029c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80102a0:	1e13      	subs	r3, r2, #0
 80102a2:	6822      	ldr	r2, [r4, #0]
 80102a4:	bf18      	it	ne
 80102a6:	2301      	movne	r3, #1
 80102a8:	0692      	lsls	r2, r2, #26
 80102aa:	d42b      	bmi.n	8010304 <_printf_common+0xb0>
 80102ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102b0:	4649      	mov	r1, r9
 80102b2:	4638      	mov	r0, r7
 80102b4:	47c0      	blx	r8
 80102b6:	3001      	adds	r0, #1
 80102b8:	d01e      	beq.n	80102f8 <_printf_common+0xa4>
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	68e5      	ldr	r5, [r4, #12]
 80102be:	6832      	ldr	r2, [r6, #0]
 80102c0:	f003 0306 	and.w	r3, r3, #6
 80102c4:	2b04      	cmp	r3, #4
 80102c6:	bf08      	it	eq
 80102c8:	1aad      	subeq	r5, r5, r2
 80102ca:	68a3      	ldr	r3, [r4, #8]
 80102cc:	6922      	ldr	r2, [r4, #16]
 80102ce:	bf0c      	ite	eq
 80102d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102d4:	2500      	movne	r5, #0
 80102d6:	4293      	cmp	r3, r2
 80102d8:	bfc4      	itt	gt
 80102da:	1a9b      	subgt	r3, r3, r2
 80102dc:	18ed      	addgt	r5, r5, r3
 80102de:	2600      	movs	r6, #0
 80102e0:	341a      	adds	r4, #26
 80102e2:	42b5      	cmp	r5, r6
 80102e4:	d11a      	bne.n	801031c <_printf_common+0xc8>
 80102e6:	2000      	movs	r0, #0
 80102e8:	e008      	b.n	80102fc <_printf_common+0xa8>
 80102ea:	2301      	movs	r3, #1
 80102ec:	4652      	mov	r2, sl
 80102ee:	4649      	mov	r1, r9
 80102f0:	4638      	mov	r0, r7
 80102f2:	47c0      	blx	r8
 80102f4:	3001      	adds	r0, #1
 80102f6:	d103      	bne.n	8010300 <_printf_common+0xac>
 80102f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010300:	3501      	adds	r5, #1
 8010302:	e7c6      	b.n	8010292 <_printf_common+0x3e>
 8010304:	18e1      	adds	r1, r4, r3
 8010306:	1c5a      	adds	r2, r3, #1
 8010308:	2030      	movs	r0, #48	; 0x30
 801030a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801030e:	4422      	add	r2, r4
 8010310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010318:	3302      	adds	r3, #2
 801031a:	e7c7      	b.n	80102ac <_printf_common+0x58>
 801031c:	2301      	movs	r3, #1
 801031e:	4622      	mov	r2, r4
 8010320:	4649      	mov	r1, r9
 8010322:	4638      	mov	r0, r7
 8010324:	47c0      	blx	r8
 8010326:	3001      	adds	r0, #1
 8010328:	d0e6      	beq.n	80102f8 <_printf_common+0xa4>
 801032a:	3601      	adds	r6, #1
 801032c:	e7d9      	b.n	80102e2 <_printf_common+0x8e>
	...

08010330 <_printf_i>:
 8010330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010334:	7e0f      	ldrb	r7, [r1, #24]
 8010336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010338:	2f78      	cmp	r7, #120	; 0x78
 801033a:	4691      	mov	r9, r2
 801033c:	4680      	mov	r8, r0
 801033e:	460c      	mov	r4, r1
 8010340:	469a      	mov	sl, r3
 8010342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010346:	d807      	bhi.n	8010358 <_printf_i+0x28>
 8010348:	2f62      	cmp	r7, #98	; 0x62
 801034a:	d80a      	bhi.n	8010362 <_printf_i+0x32>
 801034c:	2f00      	cmp	r7, #0
 801034e:	f000 80d8 	beq.w	8010502 <_printf_i+0x1d2>
 8010352:	2f58      	cmp	r7, #88	; 0x58
 8010354:	f000 80a3 	beq.w	801049e <_printf_i+0x16e>
 8010358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801035c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010360:	e03a      	b.n	80103d8 <_printf_i+0xa8>
 8010362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010366:	2b15      	cmp	r3, #21
 8010368:	d8f6      	bhi.n	8010358 <_printf_i+0x28>
 801036a:	a101      	add	r1, pc, #4	; (adr r1, 8010370 <_printf_i+0x40>)
 801036c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010370:	080103c9 	.word	0x080103c9
 8010374:	080103dd 	.word	0x080103dd
 8010378:	08010359 	.word	0x08010359
 801037c:	08010359 	.word	0x08010359
 8010380:	08010359 	.word	0x08010359
 8010384:	08010359 	.word	0x08010359
 8010388:	080103dd 	.word	0x080103dd
 801038c:	08010359 	.word	0x08010359
 8010390:	08010359 	.word	0x08010359
 8010394:	08010359 	.word	0x08010359
 8010398:	08010359 	.word	0x08010359
 801039c:	080104e9 	.word	0x080104e9
 80103a0:	0801040d 	.word	0x0801040d
 80103a4:	080104cb 	.word	0x080104cb
 80103a8:	08010359 	.word	0x08010359
 80103ac:	08010359 	.word	0x08010359
 80103b0:	0801050b 	.word	0x0801050b
 80103b4:	08010359 	.word	0x08010359
 80103b8:	0801040d 	.word	0x0801040d
 80103bc:	08010359 	.word	0x08010359
 80103c0:	08010359 	.word	0x08010359
 80103c4:	080104d3 	.word	0x080104d3
 80103c8:	682b      	ldr	r3, [r5, #0]
 80103ca:	1d1a      	adds	r2, r3, #4
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	602a      	str	r2, [r5, #0]
 80103d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103d8:	2301      	movs	r3, #1
 80103da:	e0a3      	b.n	8010524 <_printf_i+0x1f4>
 80103dc:	6820      	ldr	r0, [r4, #0]
 80103de:	6829      	ldr	r1, [r5, #0]
 80103e0:	0606      	lsls	r6, r0, #24
 80103e2:	f101 0304 	add.w	r3, r1, #4
 80103e6:	d50a      	bpl.n	80103fe <_printf_i+0xce>
 80103e8:	680e      	ldr	r6, [r1, #0]
 80103ea:	602b      	str	r3, [r5, #0]
 80103ec:	2e00      	cmp	r6, #0
 80103ee:	da03      	bge.n	80103f8 <_printf_i+0xc8>
 80103f0:	232d      	movs	r3, #45	; 0x2d
 80103f2:	4276      	negs	r6, r6
 80103f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103f8:	485e      	ldr	r0, [pc, #376]	; (8010574 <_printf_i+0x244>)
 80103fa:	230a      	movs	r3, #10
 80103fc:	e019      	b.n	8010432 <_printf_i+0x102>
 80103fe:	680e      	ldr	r6, [r1, #0]
 8010400:	602b      	str	r3, [r5, #0]
 8010402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010406:	bf18      	it	ne
 8010408:	b236      	sxthne	r6, r6
 801040a:	e7ef      	b.n	80103ec <_printf_i+0xbc>
 801040c:	682b      	ldr	r3, [r5, #0]
 801040e:	6820      	ldr	r0, [r4, #0]
 8010410:	1d19      	adds	r1, r3, #4
 8010412:	6029      	str	r1, [r5, #0]
 8010414:	0601      	lsls	r1, r0, #24
 8010416:	d501      	bpl.n	801041c <_printf_i+0xec>
 8010418:	681e      	ldr	r6, [r3, #0]
 801041a:	e002      	b.n	8010422 <_printf_i+0xf2>
 801041c:	0646      	lsls	r6, r0, #25
 801041e:	d5fb      	bpl.n	8010418 <_printf_i+0xe8>
 8010420:	881e      	ldrh	r6, [r3, #0]
 8010422:	4854      	ldr	r0, [pc, #336]	; (8010574 <_printf_i+0x244>)
 8010424:	2f6f      	cmp	r7, #111	; 0x6f
 8010426:	bf0c      	ite	eq
 8010428:	2308      	moveq	r3, #8
 801042a:	230a      	movne	r3, #10
 801042c:	2100      	movs	r1, #0
 801042e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010432:	6865      	ldr	r5, [r4, #4]
 8010434:	60a5      	str	r5, [r4, #8]
 8010436:	2d00      	cmp	r5, #0
 8010438:	bfa2      	ittt	ge
 801043a:	6821      	ldrge	r1, [r4, #0]
 801043c:	f021 0104 	bicge.w	r1, r1, #4
 8010440:	6021      	strge	r1, [r4, #0]
 8010442:	b90e      	cbnz	r6, 8010448 <_printf_i+0x118>
 8010444:	2d00      	cmp	r5, #0
 8010446:	d04d      	beq.n	80104e4 <_printf_i+0x1b4>
 8010448:	4615      	mov	r5, r2
 801044a:	fbb6 f1f3 	udiv	r1, r6, r3
 801044e:	fb03 6711 	mls	r7, r3, r1, r6
 8010452:	5dc7      	ldrb	r7, [r0, r7]
 8010454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010458:	4637      	mov	r7, r6
 801045a:	42bb      	cmp	r3, r7
 801045c:	460e      	mov	r6, r1
 801045e:	d9f4      	bls.n	801044a <_printf_i+0x11a>
 8010460:	2b08      	cmp	r3, #8
 8010462:	d10b      	bne.n	801047c <_printf_i+0x14c>
 8010464:	6823      	ldr	r3, [r4, #0]
 8010466:	07de      	lsls	r6, r3, #31
 8010468:	d508      	bpl.n	801047c <_printf_i+0x14c>
 801046a:	6923      	ldr	r3, [r4, #16]
 801046c:	6861      	ldr	r1, [r4, #4]
 801046e:	4299      	cmp	r1, r3
 8010470:	bfde      	ittt	le
 8010472:	2330      	movle	r3, #48	; 0x30
 8010474:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010478:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801047c:	1b52      	subs	r2, r2, r5
 801047e:	6122      	str	r2, [r4, #16]
 8010480:	f8cd a000 	str.w	sl, [sp]
 8010484:	464b      	mov	r3, r9
 8010486:	aa03      	add	r2, sp, #12
 8010488:	4621      	mov	r1, r4
 801048a:	4640      	mov	r0, r8
 801048c:	f7ff fee2 	bl	8010254 <_printf_common>
 8010490:	3001      	adds	r0, #1
 8010492:	d14c      	bne.n	801052e <_printf_i+0x1fe>
 8010494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010498:	b004      	add	sp, #16
 801049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801049e:	4835      	ldr	r0, [pc, #212]	; (8010574 <_printf_i+0x244>)
 80104a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80104a4:	6829      	ldr	r1, [r5, #0]
 80104a6:	6823      	ldr	r3, [r4, #0]
 80104a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80104ac:	6029      	str	r1, [r5, #0]
 80104ae:	061d      	lsls	r5, r3, #24
 80104b0:	d514      	bpl.n	80104dc <_printf_i+0x1ac>
 80104b2:	07df      	lsls	r7, r3, #31
 80104b4:	bf44      	itt	mi
 80104b6:	f043 0320 	orrmi.w	r3, r3, #32
 80104ba:	6023      	strmi	r3, [r4, #0]
 80104bc:	b91e      	cbnz	r6, 80104c6 <_printf_i+0x196>
 80104be:	6823      	ldr	r3, [r4, #0]
 80104c0:	f023 0320 	bic.w	r3, r3, #32
 80104c4:	6023      	str	r3, [r4, #0]
 80104c6:	2310      	movs	r3, #16
 80104c8:	e7b0      	b.n	801042c <_printf_i+0xfc>
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	f043 0320 	orr.w	r3, r3, #32
 80104d0:	6023      	str	r3, [r4, #0]
 80104d2:	2378      	movs	r3, #120	; 0x78
 80104d4:	4828      	ldr	r0, [pc, #160]	; (8010578 <_printf_i+0x248>)
 80104d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80104da:	e7e3      	b.n	80104a4 <_printf_i+0x174>
 80104dc:	0659      	lsls	r1, r3, #25
 80104de:	bf48      	it	mi
 80104e0:	b2b6      	uxthmi	r6, r6
 80104e2:	e7e6      	b.n	80104b2 <_printf_i+0x182>
 80104e4:	4615      	mov	r5, r2
 80104e6:	e7bb      	b.n	8010460 <_printf_i+0x130>
 80104e8:	682b      	ldr	r3, [r5, #0]
 80104ea:	6826      	ldr	r6, [r4, #0]
 80104ec:	6961      	ldr	r1, [r4, #20]
 80104ee:	1d18      	adds	r0, r3, #4
 80104f0:	6028      	str	r0, [r5, #0]
 80104f2:	0635      	lsls	r5, r6, #24
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	d501      	bpl.n	80104fc <_printf_i+0x1cc>
 80104f8:	6019      	str	r1, [r3, #0]
 80104fa:	e002      	b.n	8010502 <_printf_i+0x1d2>
 80104fc:	0670      	lsls	r0, r6, #25
 80104fe:	d5fb      	bpl.n	80104f8 <_printf_i+0x1c8>
 8010500:	8019      	strh	r1, [r3, #0]
 8010502:	2300      	movs	r3, #0
 8010504:	6123      	str	r3, [r4, #16]
 8010506:	4615      	mov	r5, r2
 8010508:	e7ba      	b.n	8010480 <_printf_i+0x150>
 801050a:	682b      	ldr	r3, [r5, #0]
 801050c:	1d1a      	adds	r2, r3, #4
 801050e:	602a      	str	r2, [r5, #0]
 8010510:	681d      	ldr	r5, [r3, #0]
 8010512:	6862      	ldr	r2, [r4, #4]
 8010514:	2100      	movs	r1, #0
 8010516:	4628      	mov	r0, r5
 8010518:	f7ef feea 	bl	80002f0 <memchr>
 801051c:	b108      	cbz	r0, 8010522 <_printf_i+0x1f2>
 801051e:	1b40      	subs	r0, r0, r5
 8010520:	6060      	str	r0, [r4, #4]
 8010522:	6863      	ldr	r3, [r4, #4]
 8010524:	6123      	str	r3, [r4, #16]
 8010526:	2300      	movs	r3, #0
 8010528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801052c:	e7a8      	b.n	8010480 <_printf_i+0x150>
 801052e:	6923      	ldr	r3, [r4, #16]
 8010530:	462a      	mov	r2, r5
 8010532:	4649      	mov	r1, r9
 8010534:	4640      	mov	r0, r8
 8010536:	47d0      	blx	sl
 8010538:	3001      	adds	r0, #1
 801053a:	d0ab      	beq.n	8010494 <_printf_i+0x164>
 801053c:	6823      	ldr	r3, [r4, #0]
 801053e:	079b      	lsls	r3, r3, #30
 8010540:	d413      	bmi.n	801056a <_printf_i+0x23a>
 8010542:	68e0      	ldr	r0, [r4, #12]
 8010544:	9b03      	ldr	r3, [sp, #12]
 8010546:	4298      	cmp	r0, r3
 8010548:	bfb8      	it	lt
 801054a:	4618      	movlt	r0, r3
 801054c:	e7a4      	b.n	8010498 <_printf_i+0x168>
 801054e:	2301      	movs	r3, #1
 8010550:	4632      	mov	r2, r6
 8010552:	4649      	mov	r1, r9
 8010554:	4640      	mov	r0, r8
 8010556:	47d0      	blx	sl
 8010558:	3001      	adds	r0, #1
 801055a:	d09b      	beq.n	8010494 <_printf_i+0x164>
 801055c:	3501      	adds	r5, #1
 801055e:	68e3      	ldr	r3, [r4, #12]
 8010560:	9903      	ldr	r1, [sp, #12]
 8010562:	1a5b      	subs	r3, r3, r1
 8010564:	42ab      	cmp	r3, r5
 8010566:	dcf2      	bgt.n	801054e <_printf_i+0x21e>
 8010568:	e7eb      	b.n	8010542 <_printf_i+0x212>
 801056a:	2500      	movs	r5, #0
 801056c:	f104 0619 	add.w	r6, r4, #25
 8010570:	e7f5      	b.n	801055e <_printf_i+0x22e>
 8010572:	bf00      	nop
 8010574:	08011d5d 	.word	0x08011d5d
 8010578:	08011d6e 	.word	0x08011d6e

0801057c <memcpy>:
 801057c:	440a      	add	r2, r1
 801057e:	4291      	cmp	r1, r2
 8010580:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010584:	d100      	bne.n	8010588 <memcpy+0xc>
 8010586:	4770      	bx	lr
 8010588:	b510      	push	{r4, lr}
 801058a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801058e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010592:	4291      	cmp	r1, r2
 8010594:	d1f9      	bne.n	801058a <memcpy+0xe>
 8010596:	bd10      	pop	{r4, pc}

08010598 <memmove>:
 8010598:	4288      	cmp	r0, r1
 801059a:	b510      	push	{r4, lr}
 801059c:	eb01 0402 	add.w	r4, r1, r2
 80105a0:	d902      	bls.n	80105a8 <memmove+0x10>
 80105a2:	4284      	cmp	r4, r0
 80105a4:	4623      	mov	r3, r4
 80105a6:	d807      	bhi.n	80105b8 <memmove+0x20>
 80105a8:	1e43      	subs	r3, r0, #1
 80105aa:	42a1      	cmp	r1, r4
 80105ac:	d008      	beq.n	80105c0 <memmove+0x28>
 80105ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105b6:	e7f8      	b.n	80105aa <memmove+0x12>
 80105b8:	4402      	add	r2, r0
 80105ba:	4601      	mov	r1, r0
 80105bc:	428a      	cmp	r2, r1
 80105be:	d100      	bne.n	80105c2 <memmove+0x2a>
 80105c0:	bd10      	pop	{r4, pc}
 80105c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80105c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80105ca:	e7f7      	b.n	80105bc <memmove+0x24>

080105cc <_free_r>:
 80105cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105ce:	2900      	cmp	r1, #0
 80105d0:	d044      	beq.n	801065c <_free_r+0x90>
 80105d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105d6:	9001      	str	r0, [sp, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f1a1 0404 	sub.w	r4, r1, #4
 80105de:	bfb8      	it	lt
 80105e0:	18e4      	addlt	r4, r4, r3
 80105e2:	f000 f913 	bl	801080c <__malloc_lock>
 80105e6:	4a1e      	ldr	r2, [pc, #120]	; (8010660 <_free_r+0x94>)
 80105e8:	9801      	ldr	r0, [sp, #4]
 80105ea:	6813      	ldr	r3, [r2, #0]
 80105ec:	b933      	cbnz	r3, 80105fc <_free_r+0x30>
 80105ee:	6063      	str	r3, [r4, #4]
 80105f0:	6014      	str	r4, [r2, #0]
 80105f2:	b003      	add	sp, #12
 80105f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105f8:	f000 b90e 	b.w	8010818 <__malloc_unlock>
 80105fc:	42a3      	cmp	r3, r4
 80105fe:	d908      	bls.n	8010612 <_free_r+0x46>
 8010600:	6825      	ldr	r5, [r4, #0]
 8010602:	1961      	adds	r1, r4, r5
 8010604:	428b      	cmp	r3, r1
 8010606:	bf01      	itttt	eq
 8010608:	6819      	ldreq	r1, [r3, #0]
 801060a:	685b      	ldreq	r3, [r3, #4]
 801060c:	1949      	addeq	r1, r1, r5
 801060e:	6021      	streq	r1, [r4, #0]
 8010610:	e7ed      	b.n	80105ee <_free_r+0x22>
 8010612:	461a      	mov	r2, r3
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	b10b      	cbz	r3, 801061c <_free_r+0x50>
 8010618:	42a3      	cmp	r3, r4
 801061a:	d9fa      	bls.n	8010612 <_free_r+0x46>
 801061c:	6811      	ldr	r1, [r2, #0]
 801061e:	1855      	adds	r5, r2, r1
 8010620:	42a5      	cmp	r5, r4
 8010622:	d10b      	bne.n	801063c <_free_r+0x70>
 8010624:	6824      	ldr	r4, [r4, #0]
 8010626:	4421      	add	r1, r4
 8010628:	1854      	adds	r4, r2, r1
 801062a:	42a3      	cmp	r3, r4
 801062c:	6011      	str	r1, [r2, #0]
 801062e:	d1e0      	bne.n	80105f2 <_free_r+0x26>
 8010630:	681c      	ldr	r4, [r3, #0]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	6053      	str	r3, [r2, #4]
 8010636:	4421      	add	r1, r4
 8010638:	6011      	str	r1, [r2, #0]
 801063a:	e7da      	b.n	80105f2 <_free_r+0x26>
 801063c:	d902      	bls.n	8010644 <_free_r+0x78>
 801063e:	230c      	movs	r3, #12
 8010640:	6003      	str	r3, [r0, #0]
 8010642:	e7d6      	b.n	80105f2 <_free_r+0x26>
 8010644:	6825      	ldr	r5, [r4, #0]
 8010646:	1961      	adds	r1, r4, r5
 8010648:	428b      	cmp	r3, r1
 801064a:	bf04      	itt	eq
 801064c:	6819      	ldreq	r1, [r3, #0]
 801064e:	685b      	ldreq	r3, [r3, #4]
 8010650:	6063      	str	r3, [r4, #4]
 8010652:	bf04      	itt	eq
 8010654:	1949      	addeq	r1, r1, r5
 8010656:	6021      	streq	r1, [r4, #0]
 8010658:	6054      	str	r4, [r2, #4]
 801065a:	e7ca      	b.n	80105f2 <_free_r+0x26>
 801065c:	b003      	add	sp, #12
 801065e:	bd30      	pop	{r4, r5, pc}
 8010660:	24001034 	.word	0x24001034

08010664 <sbrk_aligned>:
 8010664:	b570      	push	{r4, r5, r6, lr}
 8010666:	4e0e      	ldr	r6, [pc, #56]	; (80106a0 <sbrk_aligned+0x3c>)
 8010668:	460c      	mov	r4, r1
 801066a:	6831      	ldr	r1, [r6, #0]
 801066c:	4605      	mov	r5, r0
 801066e:	b911      	cbnz	r1, 8010676 <sbrk_aligned+0x12>
 8010670:	f000 f8bc 	bl	80107ec <_sbrk_r>
 8010674:	6030      	str	r0, [r6, #0]
 8010676:	4621      	mov	r1, r4
 8010678:	4628      	mov	r0, r5
 801067a:	f000 f8b7 	bl	80107ec <_sbrk_r>
 801067e:	1c43      	adds	r3, r0, #1
 8010680:	d00a      	beq.n	8010698 <sbrk_aligned+0x34>
 8010682:	1cc4      	adds	r4, r0, #3
 8010684:	f024 0403 	bic.w	r4, r4, #3
 8010688:	42a0      	cmp	r0, r4
 801068a:	d007      	beq.n	801069c <sbrk_aligned+0x38>
 801068c:	1a21      	subs	r1, r4, r0
 801068e:	4628      	mov	r0, r5
 8010690:	f000 f8ac 	bl	80107ec <_sbrk_r>
 8010694:	3001      	adds	r0, #1
 8010696:	d101      	bne.n	801069c <sbrk_aligned+0x38>
 8010698:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801069c:	4620      	mov	r0, r4
 801069e:	bd70      	pop	{r4, r5, r6, pc}
 80106a0:	24001038 	.word	0x24001038

080106a4 <_malloc_r>:
 80106a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a8:	1ccd      	adds	r5, r1, #3
 80106aa:	f025 0503 	bic.w	r5, r5, #3
 80106ae:	3508      	adds	r5, #8
 80106b0:	2d0c      	cmp	r5, #12
 80106b2:	bf38      	it	cc
 80106b4:	250c      	movcc	r5, #12
 80106b6:	2d00      	cmp	r5, #0
 80106b8:	4607      	mov	r7, r0
 80106ba:	db01      	blt.n	80106c0 <_malloc_r+0x1c>
 80106bc:	42a9      	cmp	r1, r5
 80106be:	d905      	bls.n	80106cc <_malloc_r+0x28>
 80106c0:	230c      	movs	r3, #12
 80106c2:	603b      	str	r3, [r7, #0]
 80106c4:	2600      	movs	r6, #0
 80106c6:	4630      	mov	r0, r6
 80106c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106cc:	4e2e      	ldr	r6, [pc, #184]	; (8010788 <_malloc_r+0xe4>)
 80106ce:	f000 f89d 	bl	801080c <__malloc_lock>
 80106d2:	6833      	ldr	r3, [r6, #0]
 80106d4:	461c      	mov	r4, r3
 80106d6:	bb34      	cbnz	r4, 8010726 <_malloc_r+0x82>
 80106d8:	4629      	mov	r1, r5
 80106da:	4638      	mov	r0, r7
 80106dc:	f7ff ffc2 	bl	8010664 <sbrk_aligned>
 80106e0:	1c43      	adds	r3, r0, #1
 80106e2:	4604      	mov	r4, r0
 80106e4:	d14d      	bne.n	8010782 <_malloc_r+0xde>
 80106e6:	6834      	ldr	r4, [r6, #0]
 80106e8:	4626      	mov	r6, r4
 80106ea:	2e00      	cmp	r6, #0
 80106ec:	d140      	bne.n	8010770 <_malloc_r+0xcc>
 80106ee:	6823      	ldr	r3, [r4, #0]
 80106f0:	4631      	mov	r1, r6
 80106f2:	4638      	mov	r0, r7
 80106f4:	eb04 0803 	add.w	r8, r4, r3
 80106f8:	f000 f878 	bl	80107ec <_sbrk_r>
 80106fc:	4580      	cmp	r8, r0
 80106fe:	d13a      	bne.n	8010776 <_malloc_r+0xd2>
 8010700:	6821      	ldr	r1, [r4, #0]
 8010702:	3503      	adds	r5, #3
 8010704:	1a6d      	subs	r5, r5, r1
 8010706:	f025 0503 	bic.w	r5, r5, #3
 801070a:	3508      	adds	r5, #8
 801070c:	2d0c      	cmp	r5, #12
 801070e:	bf38      	it	cc
 8010710:	250c      	movcc	r5, #12
 8010712:	4629      	mov	r1, r5
 8010714:	4638      	mov	r0, r7
 8010716:	f7ff ffa5 	bl	8010664 <sbrk_aligned>
 801071a:	3001      	adds	r0, #1
 801071c:	d02b      	beq.n	8010776 <_malloc_r+0xd2>
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	442b      	add	r3, r5
 8010722:	6023      	str	r3, [r4, #0]
 8010724:	e00e      	b.n	8010744 <_malloc_r+0xa0>
 8010726:	6822      	ldr	r2, [r4, #0]
 8010728:	1b52      	subs	r2, r2, r5
 801072a:	d41e      	bmi.n	801076a <_malloc_r+0xc6>
 801072c:	2a0b      	cmp	r2, #11
 801072e:	d916      	bls.n	801075e <_malloc_r+0xba>
 8010730:	1961      	adds	r1, r4, r5
 8010732:	42a3      	cmp	r3, r4
 8010734:	6025      	str	r5, [r4, #0]
 8010736:	bf18      	it	ne
 8010738:	6059      	strne	r1, [r3, #4]
 801073a:	6863      	ldr	r3, [r4, #4]
 801073c:	bf08      	it	eq
 801073e:	6031      	streq	r1, [r6, #0]
 8010740:	5162      	str	r2, [r4, r5]
 8010742:	604b      	str	r3, [r1, #4]
 8010744:	4638      	mov	r0, r7
 8010746:	f104 060b 	add.w	r6, r4, #11
 801074a:	f000 f865 	bl	8010818 <__malloc_unlock>
 801074e:	f026 0607 	bic.w	r6, r6, #7
 8010752:	1d23      	adds	r3, r4, #4
 8010754:	1af2      	subs	r2, r6, r3
 8010756:	d0b6      	beq.n	80106c6 <_malloc_r+0x22>
 8010758:	1b9b      	subs	r3, r3, r6
 801075a:	50a3      	str	r3, [r4, r2]
 801075c:	e7b3      	b.n	80106c6 <_malloc_r+0x22>
 801075e:	6862      	ldr	r2, [r4, #4]
 8010760:	42a3      	cmp	r3, r4
 8010762:	bf0c      	ite	eq
 8010764:	6032      	streq	r2, [r6, #0]
 8010766:	605a      	strne	r2, [r3, #4]
 8010768:	e7ec      	b.n	8010744 <_malloc_r+0xa0>
 801076a:	4623      	mov	r3, r4
 801076c:	6864      	ldr	r4, [r4, #4]
 801076e:	e7b2      	b.n	80106d6 <_malloc_r+0x32>
 8010770:	4634      	mov	r4, r6
 8010772:	6876      	ldr	r6, [r6, #4]
 8010774:	e7b9      	b.n	80106ea <_malloc_r+0x46>
 8010776:	230c      	movs	r3, #12
 8010778:	603b      	str	r3, [r7, #0]
 801077a:	4638      	mov	r0, r7
 801077c:	f000 f84c 	bl	8010818 <__malloc_unlock>
 8010780:	e7a1      	b.n	80106c6 <_malloc_r+0x22>
 8010782:	6025      	str	r5, [r4, #0]
 8010784:	e7de      	b.n	8010744 <_malloc_r+0xa0>
 8010786:	bf00      	nop
 8010788:	24001034 	.word	0x24001034

0801078c <_realloc_r>:
 801078c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010790:	4680      	mov	r8, r0
 8010792:	4614      	mov	r4, r2
 8010794:	460e      	mov	r6, r1
 8010796:	b921      	cbnz	r1, 80107a2 <_realloc_r+0x16>
 8010798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801079c:	4611      	mov	r1, r2
 801079e:	f7ff bf81 	b.w	80106a4 <_malloc_r>
 80107a2:	b92a      	cbnz	r2, 80107b0 <_realloc_r+0x24>
 80107a4:	f7ff ff12 	bl	80105cc <_free_r>
 80107a8:	4625      	mov	r5, r4
 80107aa:	4628      	mov	r0, r5
 80107ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107b0:	f000 f838 	bl	8010824 <_malloc_usable_size_r>
 80107b4:	4284      	cmp	r4, r0
 80107b6:	4607      	mov	r7, r0
 80107b8:	d802      	bhi.n	80107c0 <_realloc_r+0x34>
 80107ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80107be:	d812      	bhi.n	80107e6 <_realloc_r+0x5a>
 80107c0:	4621      	mov	r1, r4
 80107c2:	4640      	mov	r0, r8
 80107c4:	f7ff ff6e 	bl	80106a4 <_malloc_r>
 80107c8:	4605      	mov	r5, r0
 80107ca:	2800      	cmp	r0, #0
 80107cc:	d0ed      	beq.n	80107aa <_realloc_r+0x1e>
 80107ce:	42bc      	cmp	r4, r7
 80107d0:	4622      	mov	r2, r4
 80107d2:	4631      	mov	r1, r6
 80107d4:	bf28      	it	cs
 80107d6:	463a      	movcs	r2, r7
 80107d8:	f7ff fed0 	bl	801057c <memcpy>
 80107dc:	4631      	mov	r1, r6
 80107de:	4640      	mov	r0, r8
 80107e0:	f7ff fef4 	bl	80105cc <_free_r>
 80107e4:	e7e1      	b.n	80107aa <_realloc_r+0x1e>
 80107e6:	4635      	mov	r5, r6
 80107e8:	e7df      	b.n	80107aa <_realloc_r+0x1e>
	...

080107ec <_sbrk_r>:
 80107ec:	b538      	push	{r3, r4, r5, lr}
 80107ee:	4d06      	ldr	r5, [pc, #24]	; (8010808 <_sbrk_r+0x1c>)
 80107f0:	2300      	movs	r3, #0
 80107f2:	4604      	mov	r4, r0
 80107f4:	4608      	mov	r0, r1
 80107f6:	602b      	str	r3, [r5, #0]
 80107f8:	f7f3 fcca 	bl	8004190 <_sbrk>
 80107fc:	1c43      	adds	r3, r0, #1
 80107fe:	d102      	bne.n	8010806 <_sbrk_r+0x1a>
 8010800:	682b      	ldr	r3, [r5, #0]
 8010802:	b103      	cbz	r3, 8010806 <_sbrk_r+0x1a>
 8010804:	6023      	str	r3, [r4, #0]
 8010806:	bd38      	pop	{r3, r4, r5, pc}
 8010808:	2400103c 	.word	0x2400103c

0801080c <__malloc_lock>:
 801080c:	4801      	ldr	r0, [pc, #4]	; (8010814 <__malloc_lock+0x8>)
 801080e:	f000 b811 	b.w	8010834 <__retarget_lock_acquire_recursive>
 8010812:	bf00      	nop
 8010814:	24001040 	.word	0x24001040

08010818 <__malloc_unlock>:
 8010818:	4801      	ldr	r0, [pc, #4]	; (8010820 <__malloc_unlock+0x8>)
 801081a:	f000 b80c 	b.w	8010836 <__retarget_lock_release_recursive>
 801081e:	bf00      	nop
 8010820:	24001040 	.word	0x24001040

08010824 <_malloc_usable_size_r>:
 8010824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010828:	1f18      	subs	r0, r3, #4
 801082a:	2b00      	cmp	r3, #0
 801082c:	bfbc      	itt	lt
 801082e:	580b      	ldrlt	r3, [r1, r0]
 8010830:	18c0      	addlt	r0, r0, r3
 8010832:	4770      	bx	lr

08010834 <__retarget_lock_acquire_recursive>:
 8010834:	4770      	bx	lr

08010836 <__retarget_lock_release_recursive>:
 8010836:	4770      	bx	lr

08010838 <checkint>:
 8010838:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801083c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010840:	429a      	cmp	r2, r3
 8010842:	b570      	push	{r4, r5, r6, lr}
 8010844:	dd2a      	ble.n	801089c <checkint+0x64>
 8010846:	f240 4333 	movw	r3, #1075	; 0x433
 801084a:	429a      	cmp	r2, r3
 801084c:	dc24      	bgt.n	8010898 <checkint+0x60>
 801084e:	1a9b      	subs	r3, r3, r2
 8010850:	f1a3 0620 	sub.w	r6, r3, #32
 8010854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010858:	fa02 f403 	lsl.w	r4, r2, r3
 801085c:	fa02 f606 	lsl.w	r6, r2, r6
 8010860:	f1c3 0520 	rsb	r5, r3, #32
 8010864:	fa22 f505 	lsr.w	r5, r2, r5
 8010868:	4334      	orrs	r4, r6
 801086a:	432c      	orrs	r4, r5
 801086c:	409a      	lsls	r2, r3
 801086e:	ea20 0202 	bic.w	r2, r0, r2
 8010872:	ea21 0404 	bic.w	r4, r1, r4
 8010876:	4322      	orrs	r2, r4
 8010878:	f1a3 0420 	sub.w	r4, r3, #32
 801087c:	f1c3 0220 	rsb	r2, r3, #32
 8010880:	d10c      	bne.n	801089c <checkint+0x64>
 8010882:	40d8      	lsrs	r0, r3
 8010884:	fa01 f302 	lsl.w	r3, r1, r2
 8010888:	4318      	orrs	r0, r3
 801088a:	40e1      	lsrs	r1, r4
 801088c:	4308      	orrs	r0, r1
 801088e:	f000 0001 	and.w	r0, r0, #1
 8010892:	f1d0 0002 	rsbs	r0, r0, #2
 8010896:	bd70      	pop	{r4, r5, r6, pc}
 8010898:	2002      	movs	r0, #2
 801089a:	e7fc      	b.n	8010896 <checkint+0x5e>
 801089c:	2000      	movs	r0, #0
 801089e:	e7fa      	b.n	8010896 <checkint+0x5e>

080108a0 <pow>:
 80108a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108a4:	ee10 4a90 	vmov	r4, s1
 80108a8:	ed2d 8b0a 	vpush	{d8-d12}
 80108ac:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80108b0:	ee11 7a90 	vmov	r7, s3
 80108b4:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80108b8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80108bc:	429a      	cmp	r2, r3
 80108be:	ee10 6a10 	vmov	r6, s0
 80108c2:	ee11 0a10 	vmov	r0, s2
 80108c6:	b086      	sub	sp, #24
 80108c8:	46d4      	mov	ip, sl
 80108ca:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80108ce:	d806      	bhi.n	80108de <pow+0x3e>
 80108d0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80108d4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80108d8:	2b7f      	cmp	r3, #127	; 0x7f
 80108da:	f240 8156 	bls.w	8010b8a <pow+0x2ea>
 80108de:	1802      	adds	r2, r0, r0
 80108e0:	eb47 0107 	adc.w	r1, r7, r7
 80108e4:	f06f 0e01 	mvn.w	lr, #1
 80108e8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 80108ec:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 80108f0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80108f4:	45ce      	cmp	lr, r9
 80108f6:	eb73 0808 	sbcs.w	r8, r3, r8
 80108fa:	d23f      	bcs.n	801097c <pow+0xdc>
 80108fc:	ea52 0301 	orrs.w	r3, r2, r1
 8010900:	f04f 0300 	mov.w	r3, #0
 8010904:	d10c      	bne.n	8010920 <pow+0x80>
 8010906:	19b6      	adds	r6, r6, r6
 8010908:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801090c:	4164      	adcs	r4, r4
 801090e:	42b3      	cmp	r3, r6
 8010910:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010914:	41a3      	sbcs	r3, r4
 8010916:	f0c0 808c 	bcc.w	8010a32 <pow+0x192>
 801091a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801091e:	e028      	b.n	8010972 <pow+0xd2>
 8010920:	4da3      	ldr	r5, [pc, #652]	; (8010bb0 <pow+0x310>)
 8010922:	42ac      	cmp	r4, r5
 8010924:	bf08      	it	eq
 8010926:	429e      	cmpeq	r6, r3
 8010928:	d107      	bne.n	801093a <pow+0x9a>
 801092a:	1800      	adds	r0, r0, r0
 801092c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010930:	417f      	adcs	r7, r7
 8010932:	4283      	cmp	r3, r0
 8010934:	4b9f      	ldr	r3, [pc, #636]	; (8010bb4 <pow+0x314>)
 8010936:	41bb      	sbcs	r3, r7
 8010938:	e7ed      	b.n	8010916 <pow+0x76>
 801093a:	19b6      	adds	r6, r6, r6
 801093c:	489e      	ldr	r0, [pc, #632]	; (8010bb8 <pow+0x318>)
 801093e:	4164      	adcs	r4, r4
 8010940:	42b3      	cmp	r3, r6
 8010942:	eb70 0504 	sbcs.w	r5, r0, r4
 8010946:	d374      	bcc.n	8010a32 <pow+0x192>
 8010948:	4281      	cmp	r1, r0
 801094a:	bf08      	it	eq
 801094c:	429a      	cmpeq	r2, r3
 801094e:	d170      	bne.n	8010a32 <pow+0x192>
 8010950:	4a9a      	ldr	r2, [pc, #616]	; (8010bbc <pow+0x31c>)
 8010952:	4294      	cmp	r4, r2
 8010954:	bf08      	it	eq
 8010956:	429e      	cmpeq	r6, r3
 8010958:	d0df      	beq.n	801091a <pow+0x7a>
 801095a:	4294      	cmp	r4, r2
 801095c:	ea6f 0707 	mvn.w	r7, r7
 8010960:	bf34      	ite	cc
 8010962:	2400      	movcc	r4, #0
 8010964:	2401      	movcs	r4, #1
 8010966:	0fff      	lsrs	r7, r7, #31
 8010968:	42bc      	cmp	r4, r7
 801096a:	f040 81d9 	bne.w	8010d20 <pow+0x480>
 801096e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010972:	b006      	add	sp, #24
 8010974:	ecbd 8b0a 	vpop	{d8-d12}
 8010978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801097c:	eb16 0806 	adds.w	r8, r6, r6
 8010980:	eb44 0904 	adc.w	r9, r4, r4
 8010984:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8010988:	f169 0200 	sbc.w	r2, r9, #0
 801098c:	458e      	cmp	lr, r1
 801098e:	4193      	sbcs	r3, r2
 8010990:	d223      	bcs.n	80109da <pow+0x13a>
 8010992:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010996:	2c00      	cmp	r4, #0
 8010998:	da12      	bge.n	80109c0 <pow+0x120>
 801099a:	4639      	mov	r1, r7
 801099c:	f7ff ff4c 	bl	8010838 <checkint>
 80109a0:	2801      	cmp	r0, #1
 80109a2:	d10d      	bne.n	80109c0 <pow+0x120>
 80109a4:	eeb1 0b40 	vneg.f64	d0, d0
 80109a8:	ea58 0309 	orrs.w	r3, r8, r9
 80109ac:	d10a      	bne.n	80109c4 <pow+0x124>
 80109ae:	2f00      	cmp	r7, #0
 80109b0:	dadf      	bge.n	8010972 <pow+0xd2>
 80109b2:	b006      	add	sp, #24
 80109b4:	ecbd 8b0a 	vpop	{d8-d12}
 80109b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109bc:	f001 b83c 	b.w	8011a38 <__math_divzero>
 80109c0:	2000      	movs	r0, #0
 80109c2:	e7f1      	b.n	80109a8 <pow+0x108>
 80109c4:	2f00      	cmp	r7, #0
 80109c6:	dad4      	bge.n	8010972 <pow+0xd2>
 80109c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80109cc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80109d0:	ed8d 7b00 	vstr	d7, [sp]
 80109d4:	ed9d 0b00 	vldr	d0, [sp]
 80109d8:	e7cb      	b.n	8010972 <pow+0xd2>
 80109da:	2c00      	cmp	r4, #0
 80109dc:	da2c      	bge.n	8010a38 <pow+0x198>
 80109de:	4639      	mov	r1, r7
 80109e0:	f7ff ff2a 	bl	8010838 <checkint>
 80109e4:	b930      	cbnz	r0, 80109f4 <pow+0x154>
 80109e6:	b006      	add	sp, #24
 80109e8:	ecbd 8b0a 	vpop	{d8-d12}
 80109ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109f0:	f001 b83a 	b.w	8011a68 <__math_invalid>
 80109f4:	2801      	cmp	r0, #1
 80109f6:	bf14      	ite	ne
 80109f8:	2000      	movne	r0, #0
 80109fa:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80109fe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010a02:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010a06:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010a0a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8010a10:	d92d      	bls.n	8010a6e <pow+0x1ce>
 8010a12:	4b67      	ldr	r3, [pc, #412]	; (8010bb0 <pow+0x310>)
 8010a14:	2000      	movs	r0, #0
 8010a16:	429c      	cmp	r4, r3
 8010a18:	bf08      	it	eq
 8010a1a:	4286      	cmpeq	r6, r0
 8010a1c:	f43f af7d 	beq.w	801091a <pow+0x7a>
 8010a20:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010a24:	428a      	cmp	r2, r1
 8010a26:	d80c      	bhi.n	8010a42 <pow+0x1a2>
 8010a28:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010a2c:	42b0      	cmp	r0, r6
 8010a2e:	41a3      	sbcs	r3, r4
 8010a30:	d204      	bcs.n	8010a3c <pow+0x19c>
 8010a32:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010a36:	e79c      	b.n	8010972 <pow+0xd2>
 8010a38:	2000      	movs	r0, #0
 8010a3a:	e7e4      	b.n	8010a06 <pow+0x166>
 8010a3c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010a40:	e797      	b.n	8010972 <pow+0xd2>
 8010a42:	2e01      	cmp	r6, #1
 8010a44:	eb74 0303 	sbcs.w	r3, r4, r3
 8010a48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010a4c:	bf34      	ite	cc
 8010a4e:	2301      	movcc	r3, #1
 8010a50:	2300      	movcs	r3, #0
 8010a52:	4295      	cmp	r5, r2
 8010a54:	bf8c      	ite	hi
 8010a56:	2500      	movhi	r5, #0
 8010a58:	2501      	movls	r5, #1
 8010a5a:	42ab      	cmp	r3, r5
 8010a5c:	f000 809d 	beq.w	8010b9a <pow+0x2fa>
 8010a60:	b006      	add	sp, #24
 8010a62:	ecbd 8b0a 	vpop	{d8-d12}
 8010a66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a6a:	f000 bfdd 	b.w	8011a28 <__math_oflow>
 8010a6e:	f1bc 0f00 	cmp.w	ip, #0
 8010a72:	d10b      	bne.n	8010a8c <pow+0x1ec>
 8010a74:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010ba8 <pow+0x308>
 8010a78:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010a7c:	ec53 2b17 	vmov	r2, r3, d7
 8010a80:	ee17 6a10 	vmov	r6, s14
 8010a84:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010a88:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8010a8c:	4b4c      	ldr	r3, [pc, #304]	; (8010bc0 <pow+0x320>)
 8010a8e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010a92:	4423      	add	r3, r4
 8010a94:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010a98:	1519      	asrs	r1, r3, #20
 8010a9a:	0d1b      	lsrs	r3, r3, #20
 8010a9c:	051b      	lsls	r3, r3, #20
 8010a9e:	eba4 0903 	sub.w	r9, r4, r3
 8010aa2:	4b48      	ldr	r3, [pc, #288]	; (8010bc4 <pow+0x324>)
 8010aa4:	ee04 1a10 	vmov	s8, r1
 8010aa8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8010aac:	f1b6 0800 	subs.w	r8, r6, #0
 8010ab0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010ab4:	ec49 8b15 	vmov	d5, r8, r9
 8010ab8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010abc:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010ac0:	ed93 7b00 	vldr	d7, [r3]
 8010ac4:	ed93 5b02 	vldr	d5, [r3, #8]
 8010ac8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010acc:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010ad0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010ad4:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010ad8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010adc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010ae0:	ed93 5b04 	vldr	d5, [r3, #16]
 8010ae4:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010ae8:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010aec:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010af0:	ed93 4b08 	vldr	d4, [r3, #32]
 8010af4:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010af8:	eeb0 9b40 	vmov.f64	d9, d0
 8010afc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010b00:	ed93 5b06 	vldr	d5, [r3, #24]
 8010b04:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010b08:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010b0c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010b10:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010b14:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010b18:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010b1c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010b20:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010b24:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010b28:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010b2c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010b30:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010b34:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010b38:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010b3c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010b40:	eeab ab05 	vfma.f64	d10, d11, d5
 8010b44:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8010b48:	ee21 7b06 	vmul.f64	d7, d1, d6
 8010b4c:	ee17 3a90 	vmov	r3, s15
 8010b50:	eeb0 5b47 	vmov.f64	d5, d7
 8010b54:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010b58:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8010b5c:	18b2      	adds	r2, r6, r2
 8010b5e:	2a3e      	cmp	r2, #62	; 0x3e
 8010b60:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8010b64:	ee38 8b46 	vsub.f64	d8, d8, d6
 8010b68:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8010b6c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8010b70:	d92b      	bls.n	8010bca <pow+0x32a>
 8010b72:	2a00      	cmp	r2, #0
 8010b74:	da0b      	bge.n	8010b8e <pow+0x2ee>
 8010b76:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b7a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	f43f aef7 	beq.w	8010972 <pow+0xd2>
 8010b84:	eeb1 0b40 	vneg.f64	d0, d0
 8010b88:	e6f3      	b.n	8010972 <pow+0xd2>
 8010b8a:	2000      	movs	r0, #0
 8010b8c:	e77e      	b.n	8010a8c <pow+0x1ec>
 8010b8e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010b92:	d919      	bls.n	8010bc8 <pow+0x328>
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f6bf af63 	bge.w	8010a60 <pow+0x1c0>
 8010b9a:	b006      	add	sp, #24
 8010b9c:	ecbd 8b0a 	vpop	{d8-d12}
 8010ba0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ba4:	f000 bf38 	b.w	8011a18 <__math_uflow>
 8010ba8:	00000000 	.word	0x00000000
 8010bac:	43300000 	.word	0x43300000
 8010bb0:	3ff00000 	.word	0x3ff00000
 8010bb4:	fff00000 	.word	0xfff00000
 8010bb8:	ffe00000 	.word	0xffe00000
 8010bbc:	7fe00000 	.word	0x7fe00000
 8010bc0:	c0196aab 	.word	0xc0196aab
 8010bc4:	08011d80 	.word	0x08011d80
 8010bc8:	2600      	movs	r6, #0
 8010bca:	495d      	ldr	r1, [pc, #372]	; (8010d40 <pow+0x4a0>)
 8010bcc:	ed91 4b02 	vldr	d4, [r1, #8]
 8010bd0:	ed91 3b00 	vldr	d3, [r1]
 8010bd4:	eeb0 6b44 	vmov.f64	d6, d4
 8010bd8:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010bdc:	ee16 5a10 	vmov	r5, s12
 8010be0:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010be4:	ed91 4b04 	vldr	d4, [r1, #16]
 8010be8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010bec:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010bf0:	eeb0 0b47 	vmov.f64	d0, d7
 8010bf4:	ed91 7b06 	vldr	d7, [r1, #24]
 8010bf8:	18dc      	adds	r4, r3, r3
 8010bfa:	f104 030f 	add.w	r3, r4, #15
 8010bfe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010c02:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010c06:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010c0a:	ee35 0b00 	vadd.f64	d0, d5, d0
 8010c0e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010c12:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010c16:	ed91 5b08 	vldr	d5, [r1, #32]
 8010c1a:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010c1e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010c22:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010c26:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8010c2a:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010c2e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010c32:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8010c36:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010c3a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010c3e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010c42:	1940      	adds	r0, r0, r5
 8010c44:	2700      	movs	r7, #0
 8010c46:	eb17 020c 	adds.w	r2, r7, ip
 8010c4a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8010c4e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010c52:	2e00      	cmp	r6, #0
 8010c54:	d15f      	bne.n	8010d16 <pow+0x476>
 8010c56:	42bd      	cmp	r5, r7
 8010c58:	db13      	blt.n	8010c82 <pow+0x3e2>
 8010c5a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8010c5e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010c62:	4610      	mov	r0, r2
 8010c64:	ec41 0b10 	vmov	d0, r0, r1
 8010c68:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010c6c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010d28 <pow+0x488>
 8010c70:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010c74:	b006      	add	sp, #24
 8010c76:	ecbd 8b0a 	vpop	{d8-d12}
 8010c7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c7e:	f000 bf0b 	b.w	8011a98 <__math_check_oflow>
 8010c82:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010c86:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010c8a:	4610      	mov	r0, r2
 8010c8c:	ec41 0b15 	vmov	d5, r0, r1
 8010c90:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010c94:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010c98:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010c9c:	eeb0 3bc7 	vabs.f64	d3, d7
 8010ca0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010d30 <pow+0x490>
 8010cac:	d52a      	bpl.n	8010d04 <pow+0x464>
 8010cae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010cb2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cba:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010cbe:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010cc2:	bf48      	it	mi
 8010cc4:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010cc8:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010ccc:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010cd0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010cd4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010cd8:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010cdc:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010ce0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce8:	d104      	bne.n	8010cf4 <pow+0x454>
 8010cea:	4632      	mov	r2, r6
 8010cec:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010cf0:	ec43 2b17 	vmov	d7, r2, r3
 8010cf4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010cf8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010cfc:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010d00:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010d04:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010d08:	b006      	add	sp, #24
 8010d0a:	ecbd 8b0a 	vpop	{d8-d12}
 8010d0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d12:	f000 beb8 	b.w	8011a86 <__math_check_uflow>
 8010d16:	ec43 2b10 	vmov	d0, r2, r3
 8010d1a:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010d1e:	e628      	b.n	8010972 <pow+0xd2>
 8010d20:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010d38 <pow+0x498>
 8010d24:	e625      	b.n	8010972 <pow+0xd2>
 8010d26:	bf00      	nop
 8010d28:	00000000 	.word	0x00000000
 8010d2c:	7f000000 	.word	0x7f000000
 8010d30:	00000000 	.word	0x00000000
 8010d34:	00100000 	.word	0x00100000
	...
 8010d40:	08012f50 	.word	0x08012f50
 8010d44:	00000000 	.word	0x00000000

08010d48 <sin>:
 8010d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d4a:	eeb0 7b40 	vmov.f64	d7, d0
 8010d4e:	ee17 3a90 	vmov	r3, s15
 8010d52:	4a21      	ldr	r2, [pc, #132]	; (8010dd8 <sin+0x90>)
 8010d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	dc07      	bgt.n	8010d6c <sin+0x24>
 8010d5c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010dd0 <sin+0x88>
 8010d60:	2000      	movs	r0, #0
 8010d62:	b005      	add	sp, #20
 8010d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d68:	f000 bde2 	b.w	8011930 <__kernel_sin>
 8010d6c:	4a1b      	ldr	r2, [pc, #108]	; (8010ddc <sin+0x94>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	dd04      	ble.n	8010d7c <sin+0x34>
 8010d72:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010d76:	b005      	add	sp, #20
 8010d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d7c:	4668      	mov	r0, sp
 8010d7e:	f000 f98b 	bl	8011098 <__ieee754_rem_pio2>
 8010d82:	f000 0003 	and.w	r0, r0, #3
 8010d86:	2801      	cmp	r0, #1
 8010d88:	d00a      	beq.n	8010da0 <sin+0x58>
 8010d8a:	2802      	cmp	r0, #2
 8010d8c:	d00f      	beq.n	8010dae <sin+0x66>
 8010d8e:	b9c0      	cbnz	r0, 8010dc2 <sin+0x7a>
 8010d90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d94:	ed9d 0b00 	vldr	d0, [sp]
 8010d98:	2001      	movs	r0, #1
 8010d9a:	f000 fdc9 	bl	8011930 <__kernel_sin>
 8010d9e:	e7ea      	b.n	8010d76 <sin+0x2e>
 8010da0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010da4:	ed9d 0b00 	vldr	d0, [sp]
 8010da8:	f000 fabe 	bl	8011328 <__kernel_cos>
 8010dac:	e7e3      	b.n	8010d76 <sin+0x2e>
 8010dae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010db2:	ed9d 0b00 	vldr	d0, [sp]
 8010db6:	2001      	movs	r0, #1
 8010db8:	f000 fdba 	bl	8011930 <__kernel_sin>
 8010dbc:	eeb1 0b40 	vneg.f64	d0, d0
 8010dc0:	e7d9      	b.n	8010d76 <sin+0x2e>
 8010dc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dc6:	ed9d 0b00 	vldr	d0, [sp]
 8010dca:	f000 faad 	bl	8011328 <__kernel_cos>
 8010dce:	e7f5      	b.n	8010dbc <sin+0x74>
	...
 8010dd8:	3fe921fb 	.word	0x3fe921fb
 8010ddc:	7fefffff 	.word	0x7fefffff

08010de0 <asin>:
 8010de0:	b508      	push	{r3, lr}
 8010de2:	ed2d 8b04 	vpush	{d8-d9}
 8010de6:	eeb0 8b40 	vmov.f64	d8, d0
 8010dea:	f000 f845 	bl	8010e78 <__ieee754_asin>
 8010dee:	eeb4 8b48 	vcmp.f64	d8, d8
 8010df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df6:	eeb0 9b40 	vmov.f64	d9, d0
 8010dfa:	d615      	bvs.n	8010e28 <asin+0x48>
 8010dfc:	eeb0 0b48 	vmov.f64	d0, d8
 8010e00:	f000 fe5e 	bl	8011ac0 <fabs>
 8010e04:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010e08:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e10:	dd0a      	ble.n	8010e28 <asin+0x48>
 8010e12:	f7ff f871 	bl	800fef8 <__errno>
 8010e16:	ecbd 8b04 	vpop	{d8-d9}
 8010e1a:	2321      	movs	r3, #33	; 0x21
 8010e1c:	6003      	str	r3, [r0, #0]
 8010e1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010e22:	4804      	ldr	r0, [pc, #16]	; (8010e34 <asin+0x54>)
 8010e24:	f000 becc 	b.w	8011bc0 <nan>
 8010e28:	eeb0 0b49 	vmov.f64	d0, d9
 8010e2c:	ecbd 8b04 	vpop	{d8-d9}
 8010e30:	bd08      	pop	{r3, pc}
 8010e32:	bf00      	nop
 8010e34:	08011d51 	.word	0x08011d51

08010e38 <sqrt>:
 8010e38:	b508      	push	{r3, lr}
 8010e3a:	ed2d 8b04 	vpush	{d8-d9}
 8010e3e:	eeb0 8b40 	vmov.f64	d8, d0
 8010e42:	f000 fa6d 	bl	8011320 <__ieee754_sqrt>
 8010e46:	eeb4 8b48 	vcmp.f64	d8, d8
 8010e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e4e:	d60c      	bvs.n	8010e6a <sqrt+0x32>
 8010e50:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010e70 <sqrt+0x38>
 8010e54:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5c:	d505      	bpl.n	8010e6a <sqrt+0x32>
 8010e5e:	f7ff f84b 	bl	800fef8 <__errno>
 8010e62:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010e66:	2321      	movs	r3, #33	; 0x21
 8010e68:	6003      	str	r3, [r0, #0]
 8010e6a:	ecbd 8b04 	vpop	{d8-d9}
 8010e6e:	bd08      	pop	{r3, pc}
	...

08010e78 <__ieee754_asin>:
 8010e78:	b538      	push	{r3, r4, r5, lr}
 8010e7a:	ee10 5a90 	vmov	r5, s1
 8010e7e:	4b82      	ldr	r3, [pc, #520]	; (8011088 <__ieee754_asin+0x210>)
 8010e80:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010e84:	429c      	cmp	r4, r3
 8010e86:	ed2d 8b06 	vpush	{d8-d10}
 8010e8a:	dd19      	ble.n	8010ec0 <__ieee754_asin+0x48>
 8010e8c:	ee10 3a10 	vmov	r3, s0
 8010e90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010e94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010e98:	4323      	orrs	r3, r4
 8010e9a:	d10c      	bne.n	8010eb6 <__ieee754_asin+0x3e>
 8010e9c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8011010 <__ieee754_asin+0x198>
 8010ea0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8011018 <__ieee754_asin+0x1a0>
 8010ea4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010ea8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010eac:	eeb0 0b47 	vmov.f64	d0, d7
 8010eb0:	ecbd 8b06 	vpop	{d8-d10}
 8010eb4:	bd38      	pop	{r3, r4, r5, pc}
 8010eb6:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010eba:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8010ebe:	e7f7      	b.n	8010eb0 <__ieee754_asin+0x38>
 8010ec0:	4b72      	ldr	r3, [pc, #456]	; (801108c <__ieee754_asin+0x214>)
 8010ec2:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8010ec6:	429c      	cmp	r4, r3
 8010ec8:	dc0b      	bgt.n	8010ee2 <__ieee754_asin+0x6a>
 8010eca:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8010ece:	da52      	bge.n	8010f76 <__ieee754_asin+0xfe>
 8010ed0:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8011020 <__ieee754_asin+0x1a8>
 8010ed4:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010ed8:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8010edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee0:	dce6      	bgt.n	8010eb0 <__ieee754_asin+0x38>
 8010ee2:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010ee6:	f000 fdeb 	bl	8011ac0 <fabs>
 8010eea:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011028 <__ieee754_asin+0x1b0>
 8010eee:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010ef2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010ef6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011030 <__ieee754_asin+0x1b8>
 8010efa:	eeb0 0b48 	vmov.f64	d0, d8
 8010efe:	eea8 6b07 	vfma.f64	d6, d8, d7
 8010f02:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011038 <__ieee754_asin+0x1c0>
 8010f06:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010f0a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8011040 <__ieee754_asin+0x1c8>
 8010f0e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8011048 <__ieee754_asin+0x1d0>
 8010f12:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010f16:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8011050 <__ieee754_asin+0x1d8>
 8010f1a:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010f1e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011058 <__ieee754_asin+0x1e0>
 8010f22:	eea7 ab08 	vfma.f64	d10, d7, d8
 8010f26:	ee2a ab08 	vmul.f64	d10, d10, d8
 8010f2a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011060 <__ieee754_asin+0x1e8>
 8010f2e:	eea8 7b06 	vfma.f64	d7, d8, d6
 8010f32:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8011068 <__ieee754_asin+0x1f0>
 8010f36:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010f3a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011070 <__ieee754_asin+0x1f8>
 8010f3e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010f42:	eea7 9b08 	vfma.f64	d9, d7, d8
 8010f46:	f000 f9eb 	bl	8011320 <__ieee754_sqrt>
 8010f4a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8010f4e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8010f52:	4b4f      	ldr	r3, [pc, #316]	; (8011090 <__ieee754_asin+0x218>)
 8010f54:	429c      	cmp	r4, r3
 8010f56:	dd3d      	ble.n	8010fd4 <__ieee754_asin+0x15c>
 8010f58:	eea0 0b05 	vfma.f64	d0, d0, d5
 8010f5c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011078 <__ieee754_asin+0x200>
 8010f60:	eea0 7b04 	vfma.f64	d7, d0, d4
 8010f64:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8011018 <__ieee754_asin+0x1a0>
 8010f68:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010f6c:	2d00      	cmp	r5, #0
 8010f6e:	bfd8      	it	le
 8010f70:	eeb1 0b40 	vnegle.f64	d0, d0
 8010f74:	e79c      	b.n	8010eb0 <__ieee754_asin+0x38>
 8010f76:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011028 <__ieee754_asin+0x1b0>
 8010f7a:	ee20 7b00 	vmul.f64	d7, d0, d0
 8010f7e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8011030 <__ieee754_asin+0x1b8>
 8010f82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010f86:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011038 <__ieee754_asin+0x1c0>
 8010f8a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010f8e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8011040 <__ieee754_asin+0x1c8>
 8010f92:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010f96:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8011050 <__ieee754_asin+0x1d8>
 8010f9a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010f9e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8011048 <__ieee754_asin+0x1d0>
 8010fa2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8011058 <__ieee754_asin+0x1e0>
 8010fa6:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010faa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010fae:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011060 <__ieee754_asin+0x1e8>
 8010fb2:	eea7 5b04 	vfma.f64	d5, d7, d4
 8010fb6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8011068 <__ieee754_asin+0x1f0>
 8010fba:	eea5 4b07 	vfma.f64	d4, d5, d7
 8010fbe:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011070 <__ieee754_asin+0x1f8>
 8010fc2:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010fc6:	eea5 9b07 	vfma.f64	d9, d5, d7
 8010fca:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8010fce:	eea0 0b07 	vfma.f64	d0, d0, d7
 8010fd2:	e76d      	b.n	8010eb0 <__ieee754_asin+0x38>
 8010fd4:	ec53 2b10 	vmov	r2, r3, d0
 8010fd8:	2200      	movs	r2, #0
 8010fda:	ec43 2b16 	vmov	d6, r2, r3
 8010fde:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010fe2:	eea6 8b46 	vfms.f64	d8, d6, d6
 8010fe6:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8010fea:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8011010 <__ieee754_asin+0x198>
 8010fee:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010ff2:	eea3 7b44 	vfms.f64	d7, d3, d4
 8010ff6:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8010ffa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8011080 <__ieee754_asin+0x208>
 8010ffe:	eeb0 0b45 	vmov.f64	d0, d5
 8011002:	eea6 0b44 	vfms.f64	d0, d6, d4
 8011006:	ee37 0b40 	vsub.f64	d0, d7, d0
 801100a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801100e:	e7ad      	b.n	8010f6c <__ieee754_asin+0xf4>
 8011010:	33145c07 	.word	0x33145c07
 8011014:	3c91a626 	.word	0x3c91a626
 8011018:	54442d18 	.word	0x54442d18
 801101c:	3ff921fb 	.word	0x3ff921fb
 8011020:	8800759c 	.word	0x8800759c
 8011024:	7e37e43c 	.word	0x7e37e43c
 8011028:	0dfdf709 	.word	0x0dfdf709
 801102c:	3f023de1 	.word	0x3f023de1
 8011030:	7501b288 	.word	0x7501b288
 8011034:	3f49efe0 	.word	0x3f49efe0
 8011038:	b5688f3b 	.word	0xb5688f3b
 801103c:	bfa48228 	.word	0xbfa48228
 8011040:	0e884455 	.word	0x0e884455
 8011044:	3fc9c155 	.word	0x3fc9c155
 8011048:	55555555 	.word	0x55555555
 801104c:	3fc55555 	.word	0x3fc55555
 8011050:	03eb6f7d 	.word	0x03eb6f7d
 8011054:	bfd4d612 	.word	0xbfd4d612
 8011058:	b12e9282 	.word	0xb12e9282
 801105c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011060:	1b8d0159 	.word	0x1b8d0159
 8011064:	bfe6066c 	.word	0xbfe6066c
 8011068:	9c598ac8 	.word	0x9c598ac8
 801106c:	40002ae5 	.word	0x40002ae5
 8011070:	1c8a2d4b 	.word	0x1c8a2d4b
 8011074:	c0033a27 	.word	0xc0033a27
 8011078:	33145c07 	.word	0x33145c07
 801107c:	bc91a626 	.word	0xbc91a626
 8011080:	54442d18 	.word	0x54442d18
 8011084:	3fe921fb 	.word	0x3fe921fb
 8011088:	3fefffff 	.word	0x3fefffff
 801108c:	3fdfffff 	.word	0x3fdfffff
 8011090:	3fef3332 	.word	0x3fef3332
 8011094:	00000000 	.word	0x00000000

08011098 <__ieee754_rem_pio2>:
 8011098:	b570      	push	{r4, r5, r6, lr}
 801109a:	eeb0 7b40 	vmov.f64	d7, d0
 801109e:	ee17 5a90 	vmov	r5, s15
 80110a2:	4b99      	ldr	r3, [pc, #612]	; (8011308 <__ieee754_rem_pio2+0x270>)
 80110a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110a8:	429e      	cmp	r6, r3
 80110aa:	b088      	sub	sp, #32
 80110ac:	4604      	mov	r4, r0
 80110ae:	dc07      	bgt.n	80110c0 <__ieee754_rem_pio2+0x28>
 80110b0:	2200      	movs	r2, #0
 80110b2:	2300      	movs	r3, #0
 80110b4:	ed84 0b00 	vstr	d0, [r4]
 80110b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80110bc:	2000      	movs	r0, #0
 80110be:	e01b      	b.n	80110f8 <__ieee754_rem_pio2+0x60>
 80110c0:	4b92      	ldr	r3, [pc, #584]	; (801130c <__ieee754_rem_pio2+0x274>)
 80110c2:	429e      	cmp	r6, r3
 80110c4:	dc3b      	bgt.n	801113e <__ieee754_rem_pio2+0xa6>
 80110c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80110ca:	2d00      	cmp	r5, #0
 80110cc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80112c8 <__ieee754_rem_pio2+0x230>
 80110d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80110d4:	dd19      	ble.n	801110a <__ieee754_rem_pio2+0x72>
 80110d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80110da:	429e      	cmp	r6, r3
 80110dc:	d00e      	beq.n	80110fc <__ieee754_rem_pio2+0x64>
 80110de:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80112d0 <__ieee754_rem_pio2+0x238>
 80110e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80110e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80110ea:	ed84 5b00 	vstr	d5, [r4]
 80110ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80110f6:	2001      	movs	r0, #1
 80110f8:	b008      	add	sp, #32
 80110fa:	bd70      	pop	{r4, r5, r6, pc}
 80110fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80112d8 <__ieee754_rem_pio2+0x240>
 8011100:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011104:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80112e0 <__ieee754_rem_pio2+0x248>
 8011108:	e7eb      	b.n	80110e2 <__ieee754_rem_pio2+0x4a>
 801110a:	429e      	cmp	r6, r3
 801110c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011110:	d00e      	beq.n	8011130 <__ieee754_rem_pio2+0x98>
 8011112:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80112d0 <__ieee754_rem_pio2+0x238>
 8011116:	ee37 5b06 	vadd.f64	d5, d7, d6
 801111a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801111e:	ed84 5b00 	vstr	d5, [r4]
 8011122:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801112a:	ed84 7b02 	vstr	d7, [r4, #8]
 801112e:	e7e3      	b.n	80110f8 <__ieee754_rem_pio2+0x60>
 8011130:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80112d8 <__ieee754_rem_pio2+0x240>
 8011134:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011138:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80112e0 <__ieee754_rem_pio2+0x248>
 801113c:	e7eb      	b.n	8011116 <__ieee754_rem_pio2+0x7e>
 801113e:	4b74      	ldr	r3, [pc, #464]	; (8011310 <__ieee754_rem_pio2+0x278>)
 8011140:	429e      	cmp	r6, r3
 8011142:	dc70      	bgt.n	8011226 <__ieee754_rem_pio2+0x18e>
 8011144:	f000 fcbc 	bl	8011ac0 <fabs>
 8011148:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801114c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80112e8 <__ieee754_rem_pio2+0x250>
 8011150:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011154:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011158:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801115c:	ee17 0a90 	vmov	r0, s15
 8011160:	eeb1 4b45 	vneg.f64	d4, d5
 8011164:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80112c8 <__ieee754_rem_pio2+0x230>
 8011168:	eea5 0b47 	vfms.f64	d0, d5, d7
 801116c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80112d0 <__ieee754_rem_pio2+0x238>
 8011170:	281f      	cmp	r0, #31
 8011172:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011176:	ee30 6b47 	vsub.f64	d6, d0, d7
 801117a:	dc08      	bgt.n	801118e <__ieee754_rem_pio2+0xf6>
 801117c:	4b65      	ldr	r3, [pc, #404]	; (8011314 <__ieee754_rem_pio2+0x27c>)
 801117e:	1e42      	subs	r2, r0, #1
 8011180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011184:	42b3      	cmp	r3, r6
 8011186:	d002      	beq.n	801118e <__ieee754_rem_pio2+0xf6>
 8011188:	ed84 6b00 	vstr	d6, [r4]
 801118c:	e026      	b.n	80111dc <__ieee754_rem_pio2+0x144>
 801118e:	ee16 3a90 	vmov	r3, s13
 8011192:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011196:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801119a:	2b10      	cmp	r3, #16
 801119c:	ea4f 5226 	mov.w	r2, r6, asr #20
 80111a0:	ddf2      	ble.n	8011188 <__ieee754_rem_pio2+0xf0>
 80111a2:	eeb0 6b40 	vmov.f64	d6, d0
 80111a6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80112d8 <__ieee754_rem_pio2+0x240>
 80111aa:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80112e0 <__ieee754_rem_pio2+0x248>
 80111ae:	eea4 6b07 	vfma.f64	d6, d4, d7
 80111b2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80111b6:	eea4 0b07 	vfma.f64	d0, d4, d7
 80111ba:	eeb0 7b40 	vmov.f64	d7, d0
 80111be:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80111c2:	ee36 3b47 	vsub.f64	d3, d6, d7
 80111c6:	ee13 3a90 	vmov	r3, s7
 80111ca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	2b31      	cmp	r3, #49	; 0x31
 80111d2:	dc17      	bgt.n	8011204 <__ieee754_rem_pio2+0x16c>
 80111d4:	eeb0 0b46 	vmov.f64	d0, d6
 80111d8:	ed84 3b00 	vstr	d3, [r4]
 80111dc:	ed94 6b00 	vldr	d6, [r4]
 80111e0:	2d00      	cmp	r5, #0
 80111e2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80111e6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80111ea:	ed84 0b02 	vstr	d0, [r4, #8]
 80111ee:	da83      	bge.n	80110f8 <__ieee754_rem_pio2+0x60>
 80111f0:	eeb1 6b46 	vneg.f64	d6, d6
 80111f4:	eeb1 0b40 	vneg.f64	d0, d0
 80111f8:	ed84 6b00 	vstr	d6, [r4]
 80111fc:	ed84 0b02 	vstr	d0, [r4, #8]
 8011200:	4240      	negs	r0, r0
 8011202:	e779      	b.n	80110f8 <__ieee754_rem_pio2+0x60>
 8011204:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80112f0 <__ieee754_rem_pio2+0x258>
 8011208:	eeb0 0b46 	vmov.f64	d0, d6
 801120c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011210:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011214:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80112f8 <__ieee754_rem_pio2+0x260>
 8011218:	eea4 7b03 	vfma.f64	d7, d4, d3
 801121c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011220:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011224:	e7b0      	b.n	8011188 <__ieee754_rem_pio2+0xf0>
 8011226:	4b3c      	ldr	r3, [pc, #240]	; (8011318 <__ieee754_rem_pio2+0x280>)
 8011228:	429e      	cmp	r6, r3
 801122a:	dd06      	ble.n	801123a <__ieee754_rem_pio2+0x1a2>
 801122c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011230:	ed80 7b02 	vstr	d7, [r0, #8]
 8011234:	ed80 7b00 	vstr	d7, [r0]
 8011238:	e740      	b.n	80110bc <__ieee754_rem_pio2+0x24>
 801123a:	1532      	asrs	r2, r6, #20
 801123c:	ee10 0a10 	vmov	r0, s0
 8011240:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011244:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011248:	ec41 0b17 	vmov	d7, r0, r1
 801124c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011250:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011300 <__ieee754_rem_pio2+0x268>
 8011254:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011258:	ee37 7b46 	vsub.f64	d7, d7, d6
 801125c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011260:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011264:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011268:	a902      	add	r1, sp, #8
 801126a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801126e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011272:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011276:	ee27 7b05 	vmul.f64	d7, d7, d5
 801127a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801127e:	2603      	movs	r6, #3
 8011280:	4608      	mov	r0, r1
 8011282:	ed91 7b04 	vldr	d7, [r1, #16]
 8011286:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128e:	4633      	mov	r3, r6
 8011290:	f1a1 0108 	sub.w	r1, r1, #8
 8011294:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011298:	d0f3      	beq.n	8011282 <__ieee754_rem_pio2+0x1ea>
 801129a:	4920      	ldr	r1, [pc, #128]	; (801131c <__ieee754_rem_pio2+0x284>)
 801129c:	9101      	str	r1, [sp, #4]
 801129e:	2102      	movs	r1, #2
 80112a0:	9100      	str	r1, [sp, #0]
 80112a2:	4621      	mov	r1, r4
 80112a4:	f000 f8ac 	bl	8011400 <__kernel_rem_pio2>
 80112a8:	2d00      	cmp	r5, #0
 80112aa:	f6bf af25 	bge.w	80110f8 <__ieee754_rem_pio2+0x60>
 80112ae:	ed94 7b00 	vldr	d7, [r4]
 80112b2:	eeb1 7b47 	vneg.f64	d7, d7
 80112b6:	ed84 7b00 	vstr	d7, [r4]
 80112ba:	ed94 7b02 	vldr	d7, [r4, #8]
 80112be:	eeb1 7b47 	vneg.f64	d7, d7
 80112c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80112c6:	e79b      	b.n	8011200 <__ieee754_rem_pio2+0x168>
 80112c8:	54400000 	.word	0x54400000
 80112cc:	3ff921fb 	.word	0x3ff921fb
 80112d0:	1a626331 	.word	0x1a626331
 80112d4:	3dd0b461 	.word	0x3dd0b461
 80112d8:	1a600000 	.word	0x1a600000
 80112dc:	3dd0b461 	.word	0x3dd0b461
 80112e0:	2e037073 	.word	0x2e037073
 80112e4:	3ba3198a 	.word	0x3ba3198a
 80112e8:	6dc9c883 	.word	0x6dc9c883
 80112ec:	3fe45f30 	.word	0x3fe45f30
 80112f0:	2e000000 	.word	0x2e000000
 80112f4:	3ba3198a 	.word	0x3ba3198a
 80112f8:	252049c1 	.word	0x252049c1
 80112fc:	397b839a 	.word	0x397b839a
 8011300:	00000000 	.word	0x00000000
 8011304:	41700000 	.word	0x41700000
 8011308:	3fe921fb 	.word	0x3fe921fb
 801130c:	4002d97b 	.word	0x4002d97b
 8011310:	413921fb 	.word	0x413921fb
 8011314:	08012dc8 	.word	0x08012dc8
 8011318:	7fefffff 	.word	0x7fefffff
 801131c:	08012e48 	.word	0x08012e48

08011320 <__ieee754_sqrt>:
 8011320:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011324:	4770      	bx	lr
	...

08011328 <__kernel_cos>:
 8011328:	ee10 1a90 	vmov	r1, s1
 801132c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011334:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011338:	da05      	bge.n	8011346 <__kernel_cos+0x1e>
 801133a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801133e:	ee17 3a90 	vmov	r3, s15
 8011342:	2b00      	cmp	r3, #0
 8011344:	d03d      	beq.n	80113c2 <__kernel_cos+0x9a>
 8011346:	ee20 3b00 	vmul.f64	d3, d0, d0
 801134a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80113c8 <__kernel_cos+0xa0>
 801134e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80113d0 <__kernel_cos+0xa8>
 8011352:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011356:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80113d8 <__kernel_cos+0xb0>
 801135a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801135e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80113e0 <__kernel_cos+0xb8>
 8011362:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011366:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80113e8 <__kernel_cos+0xc0>
 801136a:	4b23      	ldr	r3, [pc, #140]	; (80113f8 <__kernel_cos+0xd0>)
 801136c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011370:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80113f0 <__kernel_cos+0xc8>
 8011374:	4299      	cmp	r1, r3
 8011376:	eea7 6b03 	vfma.f64	d6, d7, d3
 801137a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801137e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011382:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011386:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801138a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801138e:	dc04      	bgt.n	801139a <__kernel_cos+0x72>
 8011390:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011394:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011398:	4770      	bx	lr
 801139a:	4b18      	ldr	r3, [pc, #96]	; (80113fc <__kernel_cos+0xd4>)
 801139c:	4299      	cmp	r1, r3
 801139e:	dc0d      	bgt.n	80113bc <__kernel_cos+0x94>
 80113a0:	2200      	movs	r2, #0
 80113a2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80113a6:	ec43 2b15 	vmov	d5, r2, r3
 80113aa:	ee34 0b45 	vsub.f64	d0, d4, d5
 80113ae:	ee37 7b45 	vsub.f64	d7, d7, d5
 80113b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80113b6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80113ba:	4770      	bx	lr
 80113bc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80113c0:	e7f3      	b.n	80113aa <__kernel_cos+0x82>
 80113c2:	eeb0 0b44 	vmov.f64	d0, d4
 80113c6:	4770      	bx	lr
 80113c8:	be8838d4 	.word	0xbe8838d4
 80113cc:	bda8fae9 	.word	0xbda8fae9
 80113d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80113d4:	3e21ee9e 	.word	0x3e21ee9e
 80113d8:	809c52ad 	.word	0x809c52ad
 80113dc:	be927e4f 	.word	0xbe927e4f
 80113e0:	19cb1590 	.word	0x19cb1590
 80113e4:	3efa01a0 	.word	0x3efa01a0
 80113e8:	16c15177 	.word	0x16c15177
 80113ec:	bf56c16c 	.word	0xbf56c16c
 80113f0:	5555554c 	.word	0x5555554c
 80113f4:	3fa55555 	.word	0x3fa55555
 80113f8:	3fd33332 	.word	0x3fd33332
 80113fc:	3fe90000 	.word	0x3fe90000

08011400 <__kernel_rem_pio2>:
 8011400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	ed2d 8b06 	vpush	{d8-d10}
 8011408:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801140c:	460f      	mov	r7, r1
 801140e:	9002      	str	r0, [sp, #8]
 8011410:	49c5      	ldr	r1, [pc, #788]	; (8011728 <__kernel_rem_pio2+0x328>)
 8011412:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011414:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011418:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801141c:	9301      	str	r3, [sp, #4]
 801141e:	f112 0f14 	cmn.w	r2, #20
 8011422:	bfa8      	it	ge
 8011424:	2018      	movge	r0, #24
 8011426:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801142a:	bfb8      	it	lt
 801142c:	2000      	movlt	r0, #0
 801142e:	f06f 0417 	mvn.w	r4, #23
 8011432:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8011710 <__kernel_rem_pio2+0x310>
 8011436:	bfa4      	itt	ge
 8011438:	f1a2 0a03 	subge.w	sl, r2, #3
 801143c:	fb9a f0f0 	sdivge	r0, sl, r0
 8011440:	fb00 4404 	mla	r4, r0, r4, r4
 8011444:	1a46      	subs	r6, r0, r1
 8011446:	4414      	add	r4, r2
 8011448:	eb09 0c01 	add.w	ip, r9, r1
 801144c:	ad1a      	add	r5, sp, #104	; 0x68
 801144e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011452:	2200      	movs	r2, #0
 8011454:	4562      	cmp	r2, ip
 8011456:	dd10      	ble.n	801147a <__kernel_rem_pio2+0x7a>
 8011458:	9a01      	ldr	r2, [sp, #4]
 801145a:	ab1a      	add	r3, sp, #104	; 0x68
 801145c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011460:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011464:	f04f 0c00 	mov.w	ip, #0
 8011468:	45cc      	cmp	ip, r9
 801146a:	dc26      	bgt.n	80114ba <__kernel_rem_pio2+0xba>
 801146c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8011710 <__kernel_rem_pio2+0x310>
 8011470:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011474:	4616      	mov	r6, r2
 8011476:	2500      	movs	r5, #0
 8011478:	e015      	b.n	80114a6 <__kernel_rem_pio2+0xa6>
 801147a:	42d6      	cmn	r6, r2
 801147c:	d409      	bmi.n	8011492 <__kernel_rem_pio2+0x92>
 801147e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011482:	ee07 3a90 	vmov	s15, r3
 8011486:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801148a:	eca5 7b02 	vstmia	r5!, {d7}
 801148e:	3201      	adds	r2, #1
 8011490:	e7e0      	b.n	8011454 <__kernel_rem_pio2+0x54>
 8011492:	eeb0 7b46 	vmov.f64	d7, d6
 8011496:	e7f8      	b.n	801148a <__kernel_rem_pio2+0x8a>
 8011498:	ecb8 5b02 	vldmia	r8!, {d5}
 801149c:	ed96 6b00 	vldr	d6, [r6]
 80114a0:	3501      	adds	r5, #1
 80114a2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80114a6:	428d      	cmp	r5, r1
 80114a8:	f1a6 0608 	sub.w	r6, r6, #8
 80114ac:	ddf4      	ble.n	8011498 <__kernel_rem_pio2+0x98>
 80114ae:	ecaa 7b02 	vstmia	sl!, {d7}
 80114b2:	f10c 0c01 	add.w	ip, ip, #1
 80114b6:	3208      	adds	r2, #8
 80114b8:	e7d6      	b.n	8011468 <__kernel_rem_pio2+0x68>
 80114ba:	ab06      	add	r3, sp, #24
 80114bc:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011718 <__kernel_rem_pio2+0x318>
 80114c0:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011720 <__kernel_rem_pio2+0x320>
 80114c4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80114c8:	9303      	str	r3, [sp, #12]
 80114ca:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80114ce:	464d      	mov	r5, r9
 80114d0:	00eb      	lsls	r3, r5, #3
 80114d2:	9304      	str	r3, [sp, #16]
 80114d4:	ab92      	add	r3, sp, #584	; 0x248
 80114d6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80114da:	f10d 0b18 	add.w	fp, sp, #24
 80114de:	ab6a      	add	r3, sp, #424	; 0x1a8
 80114e0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80114e4:	465e      	mov	r6, fp
 80114e6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80114ea:	4628      	mov	r0, r5
 80114ec:	2800      	cmp	r0, #0
 80114ee:	f1a2 0208 	sub.w	r2, r2, #8
 80114f2:	dc4c      	bgt.n	801158e <__kernel_rem_pio2+0x18e>
 80114f4:	4620      	mov	r0, r4
 80114f6:	9105      	str	r1, [sp, #20]
 80114f8:	f000 fb6a 	bl	8011bd0 <scalbn>
 80114fc:	eeb0 8b40 	vmov.f64	d8, d0
 8011500:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011504:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011508:	f000 fae6 	bl	8011ad8 <floor>
 801150c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011510:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011514:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011518:	2c00      	cmp	r4, #0
 801151a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801151e:	ee17 8a90 	vmov	r8, s15
 8011522:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011526:	9905      	ldr	r1, [sp, #20]
 8011528:	dd43      	ble.n	80115b2 <__kernel_rem_pio2+0x1b2>
 801152a:	1e68      	subs	r0, r5, #1
 801152c:	ab06      	add	r3, sp, #24
 801152e:	f1c4 0c18 	rsb	ip, r4, #24
 8011532:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011536:	fa46 f20c 	asr.w	r2, r6, ip
 801153a:	4490      	add	r8, r2
 801153c:	fa02 f20c 	lsl.w	r2, r2, ip
 8011540:	1ab6      	subs	r6, r6, r2
 8011542:	f1c4 0217 	rsb	r2, r4, #23
 8011546:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801154a:	4116      	asrs	r6, r2
 801154c:	2e00      	cmp	r6, #0
 801154e:	dd3f      	ble.n	80115d0 <__kernel_rem_pio2+0x1d0>
 8011550:	f04f 0c00 	mov.w	ip, #0
 8011554:	f108 0801 	add.w	r8, r8, #1
 8011558:	4660      	mov	r0, ip
 801155a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801155e:	4565      	cmp	r5, ip
 8011560:	dc6e      	bgt.n	8011640 <__kernel_rem_pio2+0x240>
 8011562:	2c00      	cmp	r4, #0
 8011564:	dd04      	ble.n	8011570 <__kernel_rem_pio2+0x170>
 8011566:	2c01      	cmp	r4, #1
 8011568:	d07f      	beq.n	801166a <__kernel_rem_pio2+0x26a>
 801156a:	2c02      	cmp	r4, #2
 801156c:	f000 8087 	beq.w	801167e <__kernel_rem_pio2+0x27e>
 8011570:	2e02      	cmp	r6, #2
 8011572:	d12d      	bne.n	80115d0 <__kernel_rem_pio2+0x1d0>
 8011574:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011578:	ee30 8b48 	vsub.f64	d8, d0, d8
 801157c:	b340      	cbz	r0, 80115d0 <__kernel_rem_pio2+0x1d0>
 801157e:	4620      	mov	r0, r4
 8011580:	9105      	str	r1, [sp, #20]
 8011582:	f000 fb25 	bl	8011bd0 <scalbn>
 8011586:	9905      	ldr	r1, [sp, #20]
 8011588:	ee38 8b40 	vsub.f64	d8, d8, d0
 801158c:	e020      	b.n	80115d0 <__kernel_rem_pio2+0x1d0>
 801158e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011592:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011596:	3801      	subs	r0, #1
 8011598:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801159c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80115a0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80115a4:	eca6 0a01 	vstmia	r6!, {s0}
 80115a8:	ed92 0b00 	vldr	d0, [r2]
 80115ac:	ee37 0b00 	vadd.f64	d0, d7, d0
 80115b0:	e79c      	b.n	80114ec <__kernel_rem_pio2+0xec>
 80115b2:	d105      	bne.n	80115c0 <__kernel_rem_pio2+0x1c0>
 80115b4:	1e6a      	subs	r2, r5, #1
 80115b6:	ab06      	add	r3, sp, #24
 80115b8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80115bc:	15f6      	asrs	r6, r6, #23
 80115be:	e7c5      	b.n	801154c <__kernel_rem_pio2+0x14c>
 80115c0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80115c4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80115c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115cc:	da36      	bge.n	801163c <__kernel_rem_pio2+0x23c>
 80115ce:	2600      	movs	r6, #0
 80115d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d8:	f040 80aa 	bne.w	8011730 <__kernel_rem_pio2+0x330>
 80115dc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80115e0:	4658      	mov	r0, fp
 80115e2:	2200      	movs	r2, #0
 80115e4:	4548      	cmp	r0, r9
 80115e6:	da52      	bge.n	801168e <__kernel_rem_pio2+0x28e>
 80115e8:	2a00      	cmp	r2, #0
 80115ea:	f000 8081 	beq.w	80116f0 <__kernel_rem_pio2+0x2f0>
 80115ee:	ab06      	add	r3, sp, #24
 80115f0:	3c18      	subs	r4, #24
 80115f2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 8087 	beq.w	801170a <__kernel_rem_pio2+0x30a>
 80115fc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011600:	4620      	mov	r0, r4
 8011602:	f000 fae5 	bl	8011bd0 <scalbn>
 8011606:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801160a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8011718 <__kernel_rem_pio2+0x318>
 801160e:	a96a      	add	r1, sp, #424	; 0x1a8
 8011610:	f103 0208 	add.w	r2, r3, #8
 8011614:	1888      	adds	r0, r1, r2
 8011616:	4659      	mov	r1, fp
 8011618:	2900      	cmp	r1, #0
 801161a:	f280 80b7 	bge.w	801178c <__kernel_rem_pio2+0x38c>
 801161e:	4659      	mov	r1, fp
 8011620:	2900      	cmp	r1, #0
 8011622:	f2c0 80d5 	blt.w	80117d0 <__kernel_rem_pio2+0x3d0>
 8011626:	a86a      	add	r0, sp, #424	; 0x1a8
 8011628:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801162c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8011710 <__kernel_rem_pio2+0x310>
 8011630:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801172c <__kernel_rem_pio2+0x32c>
 8011634:	2400      	movs	r4, #0
 8011636:	ebab 0001 	sub.w	r0, fp, r1
 801163a:	e0be      	b.n	80117ba <__kernel_rem_pio2+0x3ba>
 801163c:	2602      	movs	r6, #2
 801163e:	e787      	b.n	8011550 <__kernel_rem_pio2+0x150>
 8011640:	f8db 2000 	ldr.w	r2, [fp]
 8011644:	b958      	cbnz	r0, 801165e <__kernel_rem_pio2+0x25e>
 8011646:	b122      	cbz	r2, 8011652 <__kernel_rem_pio2+0x252>
 8011648:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801164c:	f8cb 2000 	str.w	r2, [fp]
 8011650:	2201      	movs	r2, #1
 8011652:	f10c 0c01 	add.w	ip, ip, #1
 8011656:	f10b 0b04 	add.w	fp, fp, #4
 801165a:	4610      	mov	r0, r2
 801165c:	e77f      	b.n	801155e <__kernel_rem_pio2+0x15e>
 801165e:	ebae 0202 	sub.w	r2, lr, r2
 8011662:	f8cb 2000 	str.w	r2, [fp]
 8011666:	4602      	mov	r2, r0
 8011668:	e7f3      	b.n	8011652 <__kernel_rem_pio2+0x252>
 801166a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801166e:	ab06      	add	r3, sp, #24
 8011670:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011674:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011678:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801167c:	e778      	b.n	8011570 <__kernel_rem_pio2+0x170>
 801167e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011682:	ab06      	add	r3, sp, #24
 8011684:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011688:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801168c:	e7f4      	b.n	8011678 <__kernel_rem_pio2+0x278>
 801168e:	ab06      	add	r3, sp, #24
 8011690:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011694:	3801      	subs	r0, #1
 8011696:	431a      	orrs	r2, r3
 8011698:	e7a4      	b.n	80115e4 <__kernel_rem_pio2+0x1e4>
 801169a:	f10c 0c01 	add.w	ip, ip, #1
 801169e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d0f9      	beq.n	801169a <__kernel_rem_pio2+0x29a>
 80116a6:	9b04      	ldr	r3, [sp, #16]
 80116a8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80116ac:	eb0d 0203 	add.w	r2, sp, r3
 80116b0:	9b01      	ldr	r3, [sp, #4]
 80116b2:	18e8      	adds	r0, r5, r3
 80116b4:	ab1a      	add	r3, sp, #104	; 0x68
 80116b6:	1c6e      	adds	r6, r5, #1
 80116b8:	3a98      	subs	r2, #152	; 0x98
 80116ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80116be:	4465      	add	r5, ip
 80116c0:	42b5      	cmp	r5, r6
 80116c2:	f6ff af05 	blt.w	80114d0 <__kernel_rem_pio2+0xd0>
 80116c6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80116ca:	f8dd e008 	ldr.w	lr, [sp, #8]
 80116ce:	ee07 3a90 	vmov	s15, r3
 80116d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80116d6:	f04f 0c00 	mov.w	ip, #0
 80116da:	eca0 7b02 	vstmia	r0!, {d7}
 80116de:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011710 <__kernel_rem_pio2+0x310>
 80116e2:	4680      	mov	r8, r0
 80116e4:	458c      	cmp	ip, r1
 80116e6:	dd07      	ble.n	80116f8 <__kernel_rem_pio2+0x2f8>
 80116e8:	eca2 7b02 	vstmia	r2!, {d7}
 80116ec:	3601      	adds	r6, #1
 80116ee:	e7e7      	b.n	80116c0 <__kernel_rem_pio2+0x2c0>
 80116f0:	9a03      	ldr	r2, [sp, #12]
 80116f2:	f04f 0c01 	mov.w	ip, #1
 80116f6:	e7d2      	b.n	801169e <__kernel_rem_pio2+0x29e>
 80116f8:	ecbe 5b02 	vldmia	lr!, {d5}
 80116fc:	ed38 6b02 	vldmdb	r8!, {d6}
 8011700:	f10c 0c01 	add.w	ip, ip, #1
 8011704:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011708:	e7ec      	b.n	80116e4 <__kernel_rem_pio2+0x2e4>
 801170a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801170e:	e76e      	b.n	80115ee <__kernel_rem_pio2+0x1ee>
	...
 801171c:	3e700000 	.word	0x3e700000
 8011720:	00000000 	.word	0x00000000
 8011724:	41700000 	.word	0x41700000
 8011728:	08013800 	.word	0x08013800
 801172c:	080137c0 	.word	0x080137c0
 8011730:	4260      	negs	r0, r4
 8011732:	eeb0 0b48 	vmov.f64	d0, d8
 8011736:	f000 fa4b 	bl	8011bd0 <scalbn>
 801173a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011918 <__kernel_rem_pio2+0x518>
 801173e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011746:	db18      	blt.n	801177a <__kernel_rem_pio2+0x37a>
 8011748:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011920 <__kernel_rem_pio2+0x520>
 801174c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011750:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011754:	aa06      	add	r2, sp, #24
 8011756:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801175a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801175e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011762:	f105 0b01 	add.w	fp, r5, #1
 8011766:	ee10 3a10 	vmov	r3, s0
 801176a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801176e:	ee17 3a10 	vmov	r3, s14
 8011772:	3418      	adds	r4, #24
 8011774:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011778:	e740      	b.n	80115fc <__kernel_rem_pio2+0x1fc>
 801177a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801177e:	aa06      	add	r2, sp, #24
 8011780:	ee10 3a10 	vmov	r3, s0
 8011784:	46ab      	mov	fp, r5
 8011786:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801178a:	e737      	b.n	80115fc <__kernel_rem_pio2+0x1fc>
 801178c:	ac06      	add	r4, sp, #24
 801178e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8011792:	9401      	str	r4, [sp, #4]
 8011794:	ee07 4a90 	vmov	s15, r4
 8011798:	3901      	subs	r1, #1
 801179a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801179e:	ee27 7b00 	vmul.f64	d7, d7, d0
 80117a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80117a6:	ed20 7b02 	vstmdb	r0!, {d7}
 80117aa:	e735      	b.n	8011618 <__kernel_rem_pio2+0x218>
 80117ac:	ecbc 5b02 	vldmia	ip!, {d5}
 80117b0:	ecb5 6b02 	vldmia	r5!, {d6}
 80117b4:	3401      	adds	r4, #1
 80117b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80117ba:	454c      	cmp	r4, r9
 80117bc:	dc01      	bgt.n	80117c2 <__kernel_rem_pio2+0x3c2>
 80117be:	4284      	cmp	r4, r0
 80117c0:	ddf4      	ble.n	80117ac <__kernel_rem_pio2+0x3ac>
 80117c2:	ac42      	add	r4, sp, #264	; 0x108
 80117c4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80117c8:	ed80 7b00 	vstr	d7, [r0]
 80117cc:	3901      	subs	r1, #1
 80117ce:	e727      	b.n	8011620 <__kernel_rem_pio2+0x220>
 80117d0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80117d2:	2902      	cmp	r1, #2
 80117d4:	dc0a      	bgt.n	80117ec <__kernel_rem_pio2+0x3ec>
 80117d6:	2900      	cmp	r1, #0
 80117d8:	dc2c      	bgt.n	8011834 <__kernel_rem_pio2+0x434>
 80117da:	d045      	beq.n	8011868 <__kernel_rem_pio2+0x468>
 80117dc:	f008 0007 	and.w	r0, r8, #7
 80117e0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80117e4:	ecbd 8b06 	vpop	{d8-d10}
 80117e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ec:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80117ee:	2a03      	cmp	r2, #3
 80117f0:	d1f4      	bne.n	80117dc <__kernel_rem_pio2+0x3dc>
 80117f2:	aa42      	add	r2, sp, #264	; 0x108
 80117f4:	4413      	add	r3, r2
 80117f6:	461a      	mov	r2, r3
 80117f8:	4619      	mov	r1, r3
 80117fa:	4658      	mov	r0, fp
 80117fc:	2800      	cmp	r0, #0
 80117fe:	f1a1 0108 	sub.w	r1, r1, #8
 8011802:	dc54      	bgt.n	80118ae <__kernel_rem_pio2+0x4ae>
 8011804:	4659      	mov	r1, fp
 8011806:	2901      	cmp	r1, #1
 8011808:	f1a2 0208 	sub.w	r2, r2, #8
 801180c:	dc5f      	bgt.n	80118ce <__kernel_rem_pio2+0x4ce>
 801180e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011928 <__kernel_rem_pio2+0x528>
 8011812:	3308      	adds	r3, #8
 8011814:	f1bb 0f01 	cmp.w	fp, #1
 8011818:	dc69      	bgt.n	80118ee <__kernel_rem_pio2+0x4ee>
 801181a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801181e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011822:	2e00      	cmp	r6, #0
 8011824:	d16a      	bne.n	80118fc <__kernel_rem_pio2+0x4fc>
 8011826:	ed87 5b00 	vstr	d5, [r7]
 801182a:	ed87 6b02 	vstr	d6, [r7, #8]
 801182e:	ed87 7b04 	vstr	d7, [r7, #16]
 8011832:	e7d3      	b.n	80117dc <__kernel_rem_pio2+0x3dc>
 8011834:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011928 <__kernel_rem_pio2+0x528>
 8011838:	ab42      	add	r3, sp, #264	; 0x108
 801183a:	441a      	add	r2, r3
 801183c:	465b      	mov	r3, fp
 801183e:	2b00      	cmp	r3, #0
 8011840:	da26      	bge.n	8011890 <__kernel_rem_pio2+0x490>
 8011842:	b35e      	cbz	r6, 801189c <__kernel_rem_pio2+0x49c>
 8011844:	eeb1 7b46 	vneg.f64	d7, d6
 8011848:	ed87 7b00 	vstr	d7, [r7]
 801184c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011850:	aa44      	add	r2, sp, #272	; 0x110
 8011852:	2301      	movs	r3, #1
 8011854:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011858:	459b      	cmp	fp, r3
 801185a:	da22      	bge.n	80118a2 <__kernel_rem_pio2+0x4a2>
 801185c:	b10e      	cbz	r6, 8011862 <__kernel_rem_pio2+0x462>
 801185e:	eeb1 7b47 	vneg.f64	d7, d7
 8011862:	ed87 7b02 	vstr	d7, [r7, #8]
 8011866:	e7b9      	b.n	80117dc <__kernel_rem_pio2+0x3dc>
 8011868:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011928 <__kernel_rem_pio2+0x528>
 801186c:	ab42      	add	r3, sp, #264	; 0x108
 801186e:	441a      	add	r2, r3
 8011870:	f1bb 0f00 	cmp.w	fp, #0
 8011874:	da05      	bge.n	8011882 <__kernel_rem_pio2+0x482>
 8011876:	b10e      	cbz	r6, 801187c <__kernel_rem_pio2+0x47c>
 8011878:	eeb1 7b47 	vneg.f64	d7, d7
 801187c:	ed87 7b00 	vstr	d7, [r7]
 8011880:	e7ac      	b.n	80117dc <__kernel_rem_pio2+0x3dc>
 8011882:	ed32 6b02 	vldmdb	r2!, {d6}
 8011886:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801188a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801188e:	e7ef      	b.n	8011870 <__kernel_rem_pio2+0x470>
 8011890:	ed32 7b02 	vldmdb	r2!, {d7}
 8011894:	3b01      	subs	r3, #1
 8011896:	ee36 6b07 	vadd.f64	d6, d6, d7
 801189a:	e7d0      	b.n	801183e <__kernel_rem_pio2+0x43e>
 801189c:	eeb0 7b46 	vmov.f64	d7, d6
 80118a0:	e7d2      	b.n	8011848 <__kernel_rem_pio2+0x448>
 80118a2:	ecb2 6b02 	vldmia	r2!, {d6}
 80118a6:	3301      	adds	r3, #1
 80118a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118ac:	e7d4      	b.n	8011858 <__kernel_rem_pio2+0x458>
 80118ae:	ed91 7b00 	vldr	d7, [r1]
 80118b2:	ed91 5b02 	vldr	d5, [r1, #8]
 80118b6:	3801      	subs	r0, #1
 80118b8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80118bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118c0:	ed81 6b00 	vstr	d6, [r1]
 80118c4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118c8:	ed81 7b02 	vstr	d7, [r1, #8]
 80118cc:	e796      	b.n	80117fc <__kernel_rem_pio2+0x3fc>
 80118ce:	ed92 7b00 	vldr	d7, [r2]
 80118d2:	ed92 5b02 	vldr	d5, [r2, #8]
 80118d6:	3901      	subs	r1, #1
 80118d8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80118dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118e0:	ed82 6b00 	vstr	d6, [r2]
 80118e4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118e8:	ed82 7b02 	vstr	d7, [r2, #8]
 80118ec:	e78b      	b.n	8011806 <__kernel_rem_pio2+0x406>
 80118ee:	ed33 6b02 	vldmdb	r3!, {d6}
 80118f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80118f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118fa:	e78b      	b.n	8011814 <__kernel_rem_pio2+0x414>
 80118fc:	eeb1 5b45 	vneg.f64	d5, d5
 8011900:	eeb1 6b46 	vneg.f64	d6, d6
 8011904:	ed87 5b00 	vstr	d5, [r7]
 8011908:	eeb1 7b47 	vneg.f64	d7, d7
 801190c:	ed87 6b02 	vstr	d6, [r7, #8]
 8011910:	e78d      	b.n	801182e <__kernel_rem_pio2+0x42e>
 8011912:	bf00      	nop
 8011914:	f3af 8000 	nop.w
 8011918:	00000000 	.word	0x00000000
 801191c:	41700000 	.word	0x41700000
 8011920:	00000000 	.word	0x00000000
 8011924:	3e700000 	.word	0x3e700000
	...

08011930 <__kernel_sin>:
 8011930:	ee10 3a90 	vmov	r3, s1
 8011934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011938:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801193c:	da04      	bge.n	8011948 <__kernel_sin+0x18>
 801193e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011942:	ee17 3a90 	vmov	r3, s15
 8011946:	b35b      	cbz	r3, 80119a0 <__kernel_sin+0x70>
 8011948:	ee20 6b00 	vmul.f64	d6, d0, d0
 801194c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011950:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80119a8 <__kernel_sin+0x78>
 8011954:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119b0 <__kernel_sin+0x80>
 8011958:	eea6 4b07 	vfma.f64	d4, d6, d7
 801195c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80119b8 <__kernel_sin+0x88>
 8011960:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011964:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119c0 <__kernel_sin+0x90>
 8011968:	eea7 4b06 	vfma.f64	d4, d7, d6
 801196c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80119c8 <__kernel_sin+0x98>
 8011970:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011974:	b930      	cbnz	r0, 8011984 <__kernel_sin+0x54>
 8011976:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119d0 <__kernel_sin+0xa0>
 801197a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801197e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011982:	4770      	bx	lr
 8011984:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011988:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801198c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011990:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011994:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80119d8 <__kernel_sin+0xa8>
 8011998:	eea5 1b07 	vfma.f64	d1, d5, d7
 801199c:	ee30 0b41 	vsub.f64	d0, d0, d1
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	f3af 8000 	nop.w
 80119a8:	5acfd57c 	.word	0x5acfd57c
 80119ac:	3de5d93a 	.word	0x3de5d93a
 80119b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80119b4:	be5ae5e6 	.word	0xbe5ae5e6
 80119b8:	57b1fe7d 	.word	0x57b1fe7d
 80119bc:	3ec71de3 	.word	0x3ec71de3
 80119c0:	19c161d5 	.word	0x19c161d5
 80119c4:	bf2a01a0 	.word	0xbf2a01a0
 80119c8:	1110f8a6 	.word	0x1110f8a6
 80119cc:	3f811111 	.word	0x3f811111
 80119d0:	55555549 	.word	0x55555549
 80119d4:	bfc55555 	.word	0xbfc55555
 80119d8:	55555549 	.word	0x55555549
 80119dc:	3fc55555 	.word	0x3fc55555

080119e0 <with_errno>:
 80119e0:	b513      	push	{r0, r1, r4, lr}
 80119e2:	4604      	mov	r4, r0
 80119e4:	ed8d 0b00 	vstr	d0, [sp]
 80119e8:	f7fe fa86 	bl	800fef8 <__errno>
 80119ec:	ed9d 0b00 	vldr	d0, [sp]
 80119f0:	6004      	str	r4, [r0, #0]
 80119f2:	b002      	add	sp, #8
 80119f4:	bd10      	pop	{r4, pc}

080119f6 <xflow>:
 80119f6:	b082      	sub	sp, #8
 80119f8:	b158      	cbz	r0, 8011a12 <xflow+0x1c>
 80119fa:	eeb1 7b40 	vneg.f64	d7, d0
 80119fe:	ed8d 7b00 	vstr	d7, [sp]
 8011a02:	ed9d 7b00 	vldr	d7, [sp]
 8011a06:	2022      	movs	r0, #34	; 0x22
 8011a08:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011a0c:	b002      	add	sp, #8
 8011a0e:	f7ff bfe7 	b.w	80119e0 <with_errno>
 8011a12:	eeb0 7b40 	vmov.f64	d7, d0
 8011a16:	e7f2      	b.n	80119fe <xflow+0x8>

08011a18 <__math_uflow>:
 8011a18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a20 <__math_uflow+0x8>
 8011a1c:	f7ff bfeb 	b.w	80119f6 <xflow>
 8011a20:	00000000 	.word	0x00000000
 8011a24:	10000000 	.word	0x10000000

08011a28 <__math_oflow>:
 8011a28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a30 <__math_oflow+0x8>
 8011a2c:	f7ff bfe3 	b.w	80119f6 <xflow>
 8011a30:	00000000 	.word	0x00000000
 8011a34:	70000000 	.word	0x70000000

08011a38 <__math_divzero>:
 8011a38:	b082      	sub	sp, #8
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a40:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011a44:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011a48:	ed8d 7b00 	vstr	d7, [sp]
 8011a4c:	ed9d 0b00 	vldr	d0, [sp]
 8011a50:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011a60 <__math_divzero+0x28>
 8011a54:	2022      	movs	r0, #34	; 0x22
 8011a56:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011a5a:	b002      	add	sp, #8
 8011a5c:	f7ff bfc0 	b.w	80119e0 <with_errno>
	...

08011a68 <__math_invalid>:
 8011a68:	eeb0 7b40 	vmov.f64	d7, d0
 8011a6c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a74:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011a78:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011a7c:	d602      	bvs.n	8011a84 <__math_invalid+0x1c>
 8011a7e:	2021      	movs	r0, #33	; 0x21
 8011a80:	f7ff bfae 	b.w	80119e0 <with_errno>
 8011a84:	4770      	bx	lr

08011a86 <__math_check_uflow>:
 8011a86:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a8e:	d102      	bne.n	8011a96 <__math_check_uflow+0x10>
 8011a90:	2022      	movs	r0, #34	; 0x22
 8011a92:	f7ff bfa5 	b.w	80119e0 <with_errno>
 8011a96:	4770      	bx	lr

08011a98 <__math_check_oflow>:
 8011a98:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011ab8 <__math_check_oflow+0x20>
 8011a9c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011aa0:	eeb4 7b46 	vcmp.f64	d7, d6
 8011aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa8:	dd02      	ble.n	8011ab0 <__math_check_oflow+0x18>
 8011aaa:	2022      	movs	r0, #34	; 0x22
 8011aac:	f7ff bf98 	b.w	80119e0 <with_errno>
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop
 8011ab4:	f3af 8000 	nop.w
 8011ab8:	ffffffff 	.word	0xffffffff
 8011abc:	7fefffff 	.word	0x7fefffff

08011ac0 <fabs>:
 8011ac0:	ec51 0b10 	vmov	r0, r1, d0
 8011ac4:	ee10 2a10 	vmov	r2, s0
 8011ac8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011acc:	ec43 2b10 	vmov	d0, r2, r3
 8011ad0:	4770      	bx	lr
 8011ad2:	0000      	movs	r0, r0
 8011ad4:	0000      	movs	r0, r0
	...

08011ad8 <floor>:
 8011ad8:	ee10 1a90 	vmov	r1, s1
 8011adc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011ae0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011ae4:	2b13      	cmp	r3, #19
 8011ae6:	b530      	push	{r4, r5, lr}
 8011ae8:	ee10 0a10 	vmov	r0, s0
 8011aec:	ee10 5a10 	vmov	r5, s0
 8011af0:	dc31      	bgt.n	8011b56 <floor+0x7e>
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	da15      	bge.n	8011b22 <floor+0x4a>
 8011af6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011bb0 <floor+0xd8>
 8011afa:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011afe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b06:	dd07      	ble.n	8011b18 <floor+0x40>
 8011b08:	2900      	cmp	r1, #0
 8011b0a:	da4e      	bge.n	8011baa <floor+0xd2>
 8011b0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b10:	4318      	orrs	r0, r3
 8011b12:	d001      	beq.n	8011b18 <floor+0x40>
 8011b14:	4928      	ldr	r1, [pc, #160]	; (8011bb8 <floor+0xe0>)
 8011b16:	2000      	movs	r0, #0
 8011b18:	460b      	mov	r3, r1
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	ec43 2b10 	vmov	d0, r2, r3
 8011b20:	e020      	b.n	8011b64 <floor+0x8c>
 8011b22:	4a26      	ldr	r2, [pc, #152]	; (8011bbc <floor+0xe4>)
 8011b24:	411a      	asrs	r2, r3
 8011b26:	ea01 0402 	and.w	r4, r1, r2
 8011b2a:	4304      	orrs	r4, r0
 8011b2c:	d01a      	beq.n	8011b64 <floor+0x8c>
 8011b2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011bb0 <floor+0xd8>
 8011b32:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b3e:	ddeb      	ble.n	8011b18 <floor+0x40>
 8011b40:	2900      	cmp	r1, #0
 8011b42:	bfbe      	ittt	lt
 8011b44:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011b48:	fa40 f303 	asrlt.w	r3, r0, r3
 8011b4c:	18c9      	addlt	r1, r1, r3
 8011b4e:	ea21 0102 	bic.w	r1, r1, r2
 8011b52:	2000      	movs	r0, #0
 8011b54:	e7e0      	b.n	8011b18 <floor+0x40>
 8011b56:	2b33      	cmp	r3, #51	; 0x33
 8011b58:	dd05      	ble.n	8011b66 <floor+0x8e>
 8011b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b5e:	d101      	bne.n	8011b64 <floor+0x8c>
 8011b60:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011b64:	bd30      	pop	{r4, r5, pc}
 8011b66:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b6e:	40e2      	lsrs	r2, r4
 8011b70:	4202      	tst	r2, r0
 8011b72:	d0f7      	beq.n	8011b64 <floor+0x8c>
 8011b74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011bb0 <floor+0xd8>
 8011b78:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b84:	ddc8      	ble.n	8011b18 <floor+0x40>
 8011b86:	2900      	cmp	r1, #0
 8011b88:	da02      	bge.n	8011b90 <floor+0xb8>
 8011b8a:	2b14      	cmp	r3, #20
 8011b8c:	d103      	bne.n	8011b96 <floor+0xbe>
 8011b8e:	3101      	adds	r1, #1
 8011b90:	ea20 0002 	bic.w	r0, r0, r2
 8011b94:	e7c0      	b.n	8011b18 <floor+0x40>
 8011b96:	2401      	movs	r4, #1
 8011b98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011b9c:	fa04 f303 	lsl.w	r3, r4, r3
 8011ba0:	4418      	add	r0, r3
 8011ba2:	42a8      	cmp	r0, r5
 8011ba4:	bf38      	it	cc
 8011ba6:	1909      	addcc	r1, r1, r4
 8011ba8:	e7f2      	b.n	8011b90 <floor+0xb8>
 8011baa:	2000      	movs	r0, #0
 8011bac:	4601      	mov	r1, r0
 8011bae:	e7b3      	b.n	8011b18 <floor+0x40>
 8011bb0:	8800759c 	.word	0x8800759c
 8011bb4:	7e37e43c 	.word	0x7e37e43c
 8011bb8:	bff00000 	.word	0xbff00000
 8011bbc:	000fffff 	.word	0x000fffff

08011bc0 <nan>:
 8011bc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011bc8 <nan+0x8>
 8011bc4:	4770      	bx	lr
 8011bc6:	bf00      	nop
 8011bc8:	00000000 	.word	0x00000000
 8011bcc:	7ff80000 	.word	0x7ff80000

08011bd0 <scalbn>:
 8011bd0:	ee10 1a90 	vmov	r1, s1
 8011bd4:	b510      	push	{r4, lr}
 8011bd6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011bda:	b98c      	cbnz	r4, 8011c00 <scalbn+0x30>
 8011bdc:	ee10 3a10 	vmov	r3, s0
 8011be0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011be4:	430b      	orrs	r3, r1
 8011be6:	d011      	beq.n	8011c0c <scalbn+0x3c>
 8011be8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8011cb0 <scalbn+0xe0>
 8011bec:	4b3c      	ldr	r3, [pc, #240]	; (8011ce0 <scalbn+0x110>)
 8011bee:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011bf2:	4298      	cmp	r0, r3
 8011bf4:	da0b      	bge.n	8011c0e <scalbn+0x3e>
 8011bf6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011cb8 <scalbn+0xe8>
 8011bfa:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011bfe:	e005      	b.n	8011c0c <scalbn+0x3c>
 8011c00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8011c04:	429c      	cmp	r4, r3
 8011c06:	d107      	bne.n	8011c18 <scalbn+0x48>
 8011c08:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011c0c:	bd10      	pop	{r4, pc}
 8011c0e:	ee10 1a90 	vmov	r1, s1
 8011c12:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011c16:	3c36      	subs	r4, #54	; 0x36
 8011c18:	4404      	add	r4, r0
 8011c1a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8011c1e:	429c      	cmp	r4, r3
 8011c20:	dd0d      	ble.n	8011c3e <scalbn+0x6e>
 8011c22:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011cc0 <scalbn+0xf0>
 8011c26:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011cc8 <scalbn+0xf8>
 8011c2a:	eeb0 6b47 	vmov.f64	d6, d7
 8011c2e:	ee10 3a90 	vmov	r3, s1
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011c38:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011c3c:	e7e6      	b.n	8011c0c <scalbn+0x3c>
 8011c3e:	2c00      	cmp	r4, #0
 8011c40:	dd0a      	ble.n	8011c58 <scalbn+0x88>
 8011c42:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011c46:	ec53 2b10 	vmov	r2, r3, d0
 8011c4a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011c4e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011c52:	ec43 2b10 	vmov	d0, r2, r3
 8011c56:	e7d9      	b.n	8011c0c <scalbn+0x3c>
 8011c58:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8011c5c:	da19      	bge.n	8011c92 <scalbn+0xc2>
 8011c5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011c62:	4298      	cmp	r0, r3
 8011c64:	ee10 3a90 	vmov	r3, s1
 8011c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c6c:	dd09      	ble.n	8011c82 <scalbn+0xb2>
 8011c6e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8011cc0 <scalbn+0xf0>
 8011c72:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011cc8 <scalbn+0xf8>
 8011c76:	eeb0 7b40 	vmov.f64	d7, d0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8011c80:	e7bb      	b.n	8011bfa <scalbn+0x2a>
 8011c82:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8011cb8 <scalbn+0xe8>
 8011c86:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8011cd0 <scalbn+0x100>
 8011c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	e7f4      	b.n	8011c7c <scalbn+0xac>
 8011c92:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011c96:	ec53 2b10 	vmov	r2, r3, d0
 8011c9a:	3436      	adds	r4, #54	; 0x36
 8011c9c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011ca0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011ca4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011cd8 <scalbn+0x108>
 8011ca8:	ec43 2b10 	vmov	d0, r2, r3
 8011cac:	e7a5      	b.n	8011bfa <scalbn+0x2a>
 8011cae:	bf00      	nop
 8011cb0:	00000000 	.word	0x00000000
 8011cb4:	43500000 	.word	0x43500000
 8011cb8:	c2f8f359 	.word	0xc2f8f359
 8011cbc:	01a56e1f 	.word	0x01a56e1f
 8011cc0:	8800759c 	.word	0x8800759c
 8011cc4:	7e37e43c 	.word	0x7e37e43c
 8011cc8:	8800759c 	.word	0x8800759c
 8011ccc:	fe37e43c 	.word	0xfe37e43c
 8011cd0:	c2f8f359 	.word	0xc2f8f359
 8011cd4:	81a56e1f 	.word	0x81a56e1f
 8011cd8:	00000000 	.word	0x00000000
 8011cdc:	3c900000 	.word	0x3c900000
 8011ce0:	ffff3cb0 	.word	0xffff3cb0

08011ce4 <_init>:
 8011ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce6:	bf00      	nop
 8011ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cea:	bc08      	pop	{r3}
 8011cec:	469e      	mov	lr, r3
 8011cee:	4770      	bx	lr

08011cf0 <_fini>:
 8011cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf2:	bf00      	nop
 8011cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cf6:	bc08      	pop	{r3}
 8011cf8:	469e      	mov	lr, r3
 8011cfa:	4770      	bx	lr
