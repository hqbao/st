
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c10  080124a0  080124a0  000224a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080140b0  080140b0  000240b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080140b8  080140b8  000240b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080140bc  080140bc  000240bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  080140c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017f4  240000a0  08014160  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001894  08014160  00031894  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cc65  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f21  00000000  00000000  0004cd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014d8  00000000  00000000  0004fc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013d8  00000000  00000000  00051130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038673  00000000  00000000  00052508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d2ec  00000000  00000000  0008ab7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167332  00000000  00000000  000a7e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020f199  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006238  00000000  00000000  0020f1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012484 	.word	0x08012484

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08012484 	.word	0x08012484

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	ed87 0a02 	vstr	s0, [r7, #8]
 80006a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80006a4:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	609a      	str	r2, [r3, #8]
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <average_filter_init>:
  filter->_last_estimate=filter->_current_estimate;

  return filter->_current_estimate;
}

void average_filter_init(average_filter_t* filter, int width) {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
  filter->width = width;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f04f 0200 	mov.w	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f103 0008 	add.w	r0, r3, #8
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	461a      	mov	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f00f ff79 	bl	80105ec <memset>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000714:	3301      	adds	r3, #1
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	6812      	ldr	r2, [r2, #0]
 800071a:	fb93 f1f2 	sdiv	r1, r3, r2
 800071e:	fb01 f202 	mul.w	r2, r1, r2
 8000722:	1a9a      	subs	r2, r3, r2
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	3302      	adds	r3, #2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000752:	edd7 7a00 	vldr	s15, [r7]
 8000756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	3302      	adds	r3, #2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	ed93 7a01 	vldr	s14, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000784:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000788:	eef0 7a66 	vmov.f32	s15, s13
}
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void flash(uint8_t count) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e010      	b.n	80007ce <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80007ac:	2102      	movs	r1, #2
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <flash+0x48>)
 80007b0:	f007 f8e9 	bl	8007986 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80007b4:	2032      	movs	r0, #50	; 0x32
 80007b6:	f003 ff6f 	bl	8004698 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80007ba:	2102      	movs	r1, #2
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <flash+0x48>)
 80007be:	f007 f8e2 	bl	8007986 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f003 ff68 	bl	8004698 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3301      	adds	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbea      	blt.n	80007ac <flash+0x10>
  }

  HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f003 ff5e 	bl	8004698 <HAL_Delay>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	58020000 	.word	0x58020000

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f003 fec2 	bl	8004574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f890 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 fd5c 	bl	80012b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007f8:	f000 fcce 	bl	8001198 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80007fc:	f000 fae4 	bl	8000dc8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000800:	f000 f946 	bl	8000a90 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000804:	f000 f9dc 	bl	8000bc0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000808:	f000 fa6c 	bl	8000ce4 <MX_TIM5_Init>
  MX_TIM7_Init();
 800080c:	f000 fb12 	bl	8000e34 <MX_TIM7_Init>
  MX_DMA_Init();
 8000810:	f000 fd0e 	bl	8001230 <MX_DMA_Init>
  MX_I2C1_Init();
 8000814:	f000 f8fc 	bl	8000a10 <MX_I2C1_Init>
  MX_UART4_Init();
 8000818:	f000 fb8e 	bl	8000f38 <MX_UART4_Init>
  MX_UART5_Init();
 800081c:	f000 fbd8 	bl	8000fd0 <MX_UART5_Init>
  MX_UART7_Init();
 8000820:	f000 fc22 	bl	8001068 <MX_UART7_Init>
  MX_UART8_Init();
 8000824:	f000 fc6c 	bl	8001100 <MX_UART8_Init>
  MX_TIM17_Init();
 8000828:	f000 fb3c 	bl	8000ea4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2102      	movs	r1, #2
 8000830:	4829      	ldr	r0, [pc, #164]	; (80008d8 <main+0xf0>)
 8000832:	f007 f88f 	bl	8007954 <HAL_GPIO_WritePin>

  flash(5);
 8000836:	2005      	movs	r0, #5
 8000838:	f7ff ffb0 	bl	800079c <flash>

  // Initialise filters for remote control
  init_filters();
 800083c:	f003 fd64 	bl	8004308 <init_filters>

  // Init sensors
  init_sensors();
 8000840:	f003 fd8a 	bl	8004358 <init_sensors>

  flash(5);
 8000844:	2005      	movs	r0, #5
 8000846:	f7ff ffa9 	bl	800079c <flash>

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	4823      	ldr	r0, [pc, #140]	; (80008dc <main+0xf4>)
 800084e:	f00c f985 	bl	800cb5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000852:	2104      	movs	r1, #4
 8000854:	4821      	ldr	r0, [pc, #132]	; (80008dc <main+0xf4>)
 8000856:	f00c f981 	bl	800cb5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 800085a:	2108      	movs	r1, #8
 800085c:	481f      	ldr	r0, [pc, #124]	; (80008dc <main+0xf4>)
 800085e:	f00c f97d 	bl	800cb5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000862:	210c      	movs	r1, #12
 8000864:	481d      	ldr	r0, [pc, #116]	; (80008dc <main+0xf4>)
 8000866:	f00c f979 	bl	800cb5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800086a:	2100      	movs	r1, #0
 800086c:	481c      	ldr	r0, [pc, #112]	; (80008e0 <main+0xf8>)
 800086e:	f00c f975 	bl	800cb5c <HAL_TIM_IC_Start_IT>

  // For ranging sensor
  HAL_TIM_IC_Start_IT(&htim17, TIM_CHANNEL_1);
 8000872:	2100      	movs	r1, #0
 8000874:	481b      	ldr	r0, [pc, #108]	; (80008e4 <main+0xfc>)
 8000876:	f00c f971 	bl	800cb5c <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800087a:	2100      	movs	r1, #0
 800087c:	481a      	ldr	r0, [pc, #104]	; (80008e8 <main+0x100>)
 800087e:	f00b fffd 	bl	800c87c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000882:	2104      	movs	r1, #4
 8000884:	4818      	ldr	r0, [pc, #96]	; (80008e8 <main+0x100>)
 8000886:	f00b fff9 	bl	800c87c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800088a:	2108      	movs	r1, #8
 800088c:	4816      	ldr	r0, [pc, #88]	; (80008e8 <main+0x100>)
 800088e:	f00b fff5 	bl	800c87c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000892:	210c      	movs	r1, #12
 8000894:	4814      	ldr	r0, [pc, #80]	; (80008e8 <main+0x100>)
 8000896:	f00b fff1 	bl	800c87c <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim6);
 800089a:	4814      	ldr	r0, [pc, #80]	; (80008ec <main+0x104>)
 800089c:	f00b ff14 	bl	800c6c8 <HAL_TIM_Base_Start_IT>

  // Monitor timer
  HAL_TIM_Base_Start_IT(&htim7);
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <main+0x108>)
 80008a2:	f00b ff11 	bl	800c6c8 <HAL_TIM_Base_Start_IT>

  // Call receive in circlar mode, don't have to repeat the call to activate callback
  HAL_UART_Receive_DMA(&huart4, g_uart_rx_buffer1, UART_BUF_SIZE);
 80008a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008aa:	4912      	ldr	r1, [pc, #72]	; (80008f4 <main+0x10c>)
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <main+0x110>)
 80008ae:	f00d fde3 	bl	800e478 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, g_uart_rx_buffer2, UART_BUF_SIZE);
 80008b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b6:	4911      	ldr	r1, [pc, #68]	; (80008fc <main+0x114>)
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <main+0x118>)
 80008ba:	f00d fddd 	bl	800e478 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart7, g_uart_rx_buffer3, UART_BUF_SIZE);
 80008be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c2:	4910      	ldr	r1, [pc, #64]	; (8000904 <main+0x11c>)
 80008c4:	4810      	ldr	r0, [pc, #64]	; (8000908 <main+0x120>)
 80008c6:	f00d fdd7 	bl	800e478 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart8, g_uart_rx_buffer4, UART_BUF_SIZE);
 80008ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ce:	490f      	ldr	r1, [pc, #60]	; (800090c <main+0x124>)
 80008d0:	480f      	ldr	r0, [pc, #60]	; (8000910 <main+0x128>)
 80008d2:	f00d fdd1 	bl	800e478 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <main+0xee>
 80008d8:	58020000 	.word	0x58020000
 80008dc:	240001cc 	.word	0x240001cc
 80008e0:	24000218 	.word	0x24000218
 80008e4:	240002fc 	.word	0x240002fc
 80008e8:	24000180 	.word	0x24000180
 80008ec:	24000264 	.word	0x24000264
 80008f0:	240002b0 	.word	0x240002b0
 80008f4:	2400132c 	.word	0x2400132c
 80008f8:	24000348 	.word	0x24000348
 80008fc:	2400142c 	.word	0x2400142c
 8000900:	240003d8 	.word	0x240003d8
 8000904:	2400152c 	.word	0x2400152c
 8000908:	24000468 	.word	0x24000468
 800090c:	2400162c 	.word	0x2400162c
 8000910:	240004f8 	.word	0x240004f8

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	; 0x70
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	224c      	movs	r2, #76	; 0x4c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f00f fe62 	bl	80105ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2220      	movs	r2, #32
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f00f fe5c 	bl	80105ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000934:	2002      	movs	r0, #2
 8000936:	f009 fb13 	bl	8009f60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <SystemClock_Config+0xf4>)
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <SystemClock_Config+0xf4>)
 8000944:	f023 0301 	bic.w	r3, r3, #1
 8000948:	62d3      	str	r3, [r2, #44]	; 0x2c
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <SystemClock_Config+0xf4>)
 800094c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <SystemClock_Config+0xf8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a2c      	ldr	r2, [pc, #176]	; (8000a0c <SystemClock_Config+0xf8>)
 800095a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <SystemClock_Config+0xf8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800096c:	bf00      	nop
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <SystemClock_Config+0xf8>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800097a:	d1f8      	bne.n	800096e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800097c:	2303      	movs	r3, #3
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000986:	2301      	movs	r3, #1
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	2302      	movs	r3, #2
 8000994:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000996:	230a      	movs	r3, #10
 8000998:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800099e:	2304      	movs	r3, #4
 80009a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009aa:	2308      	movs	r3, #8
 80009ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009ae:	2302      	movs	r3, #2
 80009b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	4618      	mov	r0, r3
 80009bc:	f009 fb0a 	bl	8009fd4 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009c6:	f000 fcfb 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	233f      	movs	r3, #63	; 0x3f
 80009cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2303      	movs	r3, #3
 80009d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2101      	movs	r1, #1
 80009ee:	4618      	mov	r0, r3
 80009f0:	f009 ff1e 	bl	800a830 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009fa:	f000 fce1 	bl	80013c0 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3770      	adds	r7, #112	; 0x70
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58000400 	.word	0x58000400
 8000a0c:	58024800 	.word	0x58024800

08000a10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <MX_I2C1_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <MX_I2C1_Init+0x7c>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4a:	480e      	ldr	r0, [pc, #56]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a4c:	f006 ffb6 	bl	80079bc <HAL_I2C_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a56:	f000 fcb3 	bl	80013c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a5e:	f009 f9e7 	bl	8009e30 <HAL_I2CEx_ConfigAnalogFilter>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a68:	f000 fcaa 	bl	80013c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_I2C1_Init+0x74>)
 8000a70:	f009 fa29 	bl	8009ec6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 fca1 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	240000bc 	.word	0x240000bc
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	10c0ecff 	.word	0x10c0ecff

08000a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25;
 8000aca:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000acc:	2219      	movs	r2, #25
 8000ace:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8000ad6:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000ad8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000adc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae4:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aea:	4834      	ldr	r0, [pc, #208]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000aec:	f00b fd94 	bl	800c618 <HAL_TIM_Base_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f000 fc63 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b04:	4619      	mov	r1, r3
 8000b06:	482d      	ldr	r0, [pc, #180]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000b08:	f00c fc48 	bl	800d39c <HAL_TIM_ConfigClockSource>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b12:	f000 fc55 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b16:	4829      	ldr	r0, [pc, #164]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000b18:	f00b fe4e 	bl	800c7b8 <HAL_TIM_PWM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b22:	f000 fc4d 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4821      	ldr	r0, [pc, #132]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000b36:	f00d faf3 	bl	800e120 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b40:	f000 fc3e 	bl	80013c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	; 0x60
 8000b46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4818      	ldr	r0, [pc, #96]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000b5c:	f00c fb0a 	bl	800d174 <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b66:	f000 fc2b 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000b72:	f00c faff 	bl	800d174 <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b7c:	f000 fc20 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	2208      	movs	r2, #8
 8000b84:	4619      	mov	r1, r3
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000b88:	f00c faf4 	bl	800d174 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b92:	f000 fc15 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b96:	463b      	mov	r3, r7
 8000b98:	220c      	movs	r2, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000b9e:	f00c fae9 	bl	800d174 <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000ba8:	f000 fc0a 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM2_Init+0x12c>)
 8000bae:	f001 fb97 	bl	80022e0 <HAL_TIM_MspPostInit>

}
 8000bb2:	bf00      	nop
 8000bb4:	3738      	adds	r7, #56	; 0x38
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000180 	.word	0x24000180

08000bc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	; 0x30
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bec:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000bee:	4a3c      	ldr	r2, [pc, #240]	; (8000ce0 <MX_TIM4_Init+0x120>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 250;
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000bf4:	22fa      	movs	r2, #250	; 0xfa
 8000bf6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000c00:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c12:	4832      	ldr	r0, [pc, #200]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000c14:	f00b fd00 	bl	800c618 <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000c1e:	f000 fbcf 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c28:	f107 0320 	add.w	r3, r7, #32
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482b      	ldr	r0, [pc, #172]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000c30:	f00c fbb4 	bl	800d39c <HAL_TIM_ConfigClockSource>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c3a:	f000 fbc1 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c3e:	4827      	ldr	r0, [pc, #156]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000c40:	f00b ff2a 	bl	800ca98 <HAL_TIM_IC_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000c4a:	f000 fbb9 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481f      	ldr	r0, [pc, #124]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000c5e:	f00d fa5f 	bl	800e120 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000c68:	f000 fbaa 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c70:	2301      	movs	r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	4816      	ldr	r0, [pc, #88]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000c84:	f00c f9d9 	bl	800d03a <HAL_TIM_IC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000c8e:	f000 fb97 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2204      	movs	r2, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4810      	ldr	r0, [pc, #64]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000c9a:	f00c f9ce 	bl	800d03a <HAL_TIM_IC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8000ca4:	f000 fb8c 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2208      	movs	r2, #8
 8000cac:	4619      	mov	r1, r3
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000cb0:	f00c f9c3 	bl	800d03a <HAL_TIM_IC_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8000cba:	f000 fb81 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_TIM4_Init+0x11c>)
 8000cc6:	f00c f9b8 	bl	800d03a <HAL_TIM_IC_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8000cd0:	f000 fb76 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	240001cc 	.word	0x240001cc
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d12:	4a2c      	ldr	r2, [pc, #176]	; (8000dc4 <MX_TIM5_Init+0xe0>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 250;
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d18:	22fa      	movs	r2, #250	; 0xfa
 8000d1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8000d22:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d24:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d36:	4822      	ldr	r0, [pc, #136]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d38:	f00b fc6e 	bl	800c618 <HAL_TIM_Base_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8000d42:	f000 fb3d 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4619      	mov	r1, r3
 8000d52:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d54:	f00c fb22 	bl	800d39c <HAL_TIM_ConfigClockSource>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000d5e:	f000 fb2f 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000d62:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d64:	f00b fe98 	bl	800ca98 <HAL_TIM_IC_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000d6e:	f000 fb27 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000d82:	f00d f9cd 	bl	800e120 <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8000d8c:	f000 fb18 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d90:	230a      	movs	r3, #10
 8000d92:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d94:	2301      	movs	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <MX_TIM5_Init+0xdc>)
 8000da8:	f00c f947 	bl	800d03a <HAL_TIM_IC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8000db2:	f000 fb05 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3730      	adds	r7, #48	; 0x30
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24000218 	.word	0x24000218
 8000dc4:	40000c00 	.word	0x40000c00

08000dc8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_TIM6_Init+0x64>)
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <MX_TIM6_Init+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 250;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_TIM6_Init+0x64>)
 8000de0:	22fa      	movs	r2, #250	; 0xfa
 8000de2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_TIM6_Init+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_TIM6_Init+0x64>)
 8000dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_TIM6_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM6_Init+0x64>)
 8000dfa:	f00b fc0d 	bl	800c618 <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e04:	f000 fadc 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_TIM6_Init+0x64>)
 8000e16:	f00d f983 	bl	800e120 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e20:	f000 face 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	24000264 	.word	0x24000264
 8000e30:	40001000 	.word	0x40001000

08000e34 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_TIM7_Init+0x68>)
 8000e46:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <MX_TIM7_Init+0x6c>)
 8000e48:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_TIM7_Init+0x68>)
 8000e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_TIM7_Init+0x68>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_TIM7_Init+0x68>)
 8000e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_TIM7_Init+0x68>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_TIM7_Init+0x68>)
 8000e68:	f00b fbd6 	bl	800c618 <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000e72:	f000 faa5 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_TIM7_Init+0x68>)
 8000e84:	f00d f94c 	bl	800e120 <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000e8e:	f000 fa97 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	240002b0 	.word	0x240002b0
 8000ea0:	40001400 	.word	0x40001400

08000ea4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <MX_TIM17_Init+0x90>)
 8000eba:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 250;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000ebe:	22fa      	movs	r2, #250	; 0xfa
 8000ec0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 50000;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000eca:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ece:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ee2:	4813      	ldr	r0, [pc, #76]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000ee4:	f00b fb98 	bl	800c618 <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8000eee:	f000 fa67 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8000ef2:	480f      	ldr	r0, [pc, #60]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000ef4:	f00b fdd0 	bl	800ca98 <HAL_TIM_IC_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000efe:	f000 fa5f 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000f02:	230a      	movs	r3, #10
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_TIM17_Init+0x8c>)
 8000f1a:	f00c f88e 	bl	800d03a <HAL_TIM_IC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8000f24:	f000 fa4c 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	240002fc 	.word	0x240002fc
 8000f34:	40014800 	.word	0x40014800

08000f38 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f3e:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <MX_UART4_Init+0x94>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f82:	f00d f979 	bl	800e278 <HAL_HalfDuplex_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f8c:	f000 fa18 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000f94:	f00f fa23 	bl	80103de <HAL_UARTEx_SetTxFifoThreshold>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f9e:	f000 fa0f 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000fa6:	f00f fa58 	bl	801045a <HAL_UARTEx_SetRxFifoThreshold>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000fb0:	f000 fa06 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_UART4_Init+0x90>)
 8000fb6:	f00f f9d9 	bl	801036c <HAL_UARTEx_DisableFifoMode>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000fc0:	f000 f9fe 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	24000348 	.word	0x24000348
 8000fcc:	40004c00 	.word	0x40004c00

08000fd0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_UART5_Init+0x90>)
 8000fd6:	4a23      	ldr	r2, [pc, #140]	; (8001064 <MX_UART5_Init+0x94>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_UART5_Init+0x90>)
 8000fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_UART5_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_UART5_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_UART5_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_UART5_Init+0x90>)
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_UART5_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_UART5_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_UART5_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_UART5_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_UART5_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8001018:	4811      	ldr	r0, [pc, #68]	; (8001060 <MX_UART5_Init+0x90>)
 800101a:	f00d f92d 	bl	800e278 <HAL_HalfDuplex_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001024:	f000 f9cc 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001028:	2100      	movs	r1, #0
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_UART5_Init+0x90>)
 800102c:	f00f f9d7 	bl	80103de <HAL_UARTEx_SetTxFifoThreshold>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001036:	f000 f9c3 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800103a:	2100      	movs	r1, #0
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <MX_UART5_Init+0x90>)
 800103e:	f00f fa0c 	bl	801045a <HAL_UARTEx_SetRxFifoThreshold>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001048:	f000 f9ba 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_UART5_Init+0x90>)
 800104e:	f00f f98d 	bl	801036c <HAL_UARTEx_DisableFifoMode>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001058:	f000 f9b2 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	240003d8 	.word	0x240003d8
 8001064:	40005000 	.word	0x40005000

08001068 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_UART7_Init+0x90>)
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <MX_UART7_Init+0x94>)
 8001070:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_UART7_Init+0x90>)
 8001074:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001078:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_UART7_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_UART7_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_UART7_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_RX;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_UART7_Init+0x90>)
 800108e:	2204      	movs	r2, #4
 8001090:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_UART7_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_UART7_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_UART7_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_UART7_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_UART7_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_UART7_Init+0x90>)
 80010b2:	f00d f8e1 	bl	800e278 <HAL_HalfDuplex_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80010bc:	f000 f980 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_UART7_Init+0x90>)
 80010c4:	f00f f98b 	bl	80103de <HAL_UARTEx_SetTxFifoThreshold>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80010ce:	f000 f977 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <MX_UART7_Init+0x90>)
 80010d6:	f00f f9c0 	bl	801045a <HAL_UARTEx_SetRxFifoThreshold>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80010e0:	f000 f96e 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_UART7_Init+0x90>)
 80010e6:	f00f f941 	bl	801036c <HAL_UARTEx_DisableFifoMode>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f000 f966 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	24000468 	.word	0x24000468
 80010fc:	40007800 	.word	0x40007800

08001100 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_UART8_Init+0x90>)
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <MX_UART8_Init+0x94>)
 8001108:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_UART8_Init+0x90>)
 800110c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001110:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_UART8_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_UART8_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_UART8_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_RX;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_UART8_Init+0x90>)
 8001126:	2204      	movs	r2, #4
 8001128:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_UART8_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_UART8_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_UART8_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_UART8_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_UART8_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <MX_UART8_Init+0x90>)
 800114a:	f00d f895 	bl	800e278 <HAL_HalfDuplex_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001154:	f000 f934 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001158:	2100      	movs	r1, #0
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_UART8_Init+0x90>)
 800115c:	f00f f93f 	bl	80103de <HAL_UARTEx_SetTxFifoThreshold>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001166:	f000 f92b 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <MX_UART8_Init+0x90>)
 800116e:	f00f f974 	bl	801045a <HAL_UARTEx_SetRxFifoThreshold>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001178:	f000 f922 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_UART8_Init+0x90>)
 800117e:	f00f f8f5 	bl	801036c <HAL_UARTEx_DisableFifoMode>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001188:	f000 f91a 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	240004f8 	.word	0x240004f8
 8001194:	40007c00 	.word	0x40007c00

08001198 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_USART1_UART_Init+0x90>)
 800119e:	4a23      	ldr	r2, [pc, #140]	; (800122c <MX_USART1_UART_Init+0x94>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011be:	2208      	movs	r2, #8
 80011c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80011e0:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011e2:	f00d f849 	bl	800e278 <HAL_HalfDuplex_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011ec:	f000 f8e8 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f0:	2100      	movs	r1, #0
 80011f2:	480d      	ldr	r0, [pc, #52]	; (8001228 <MX_USART1_UART_Init+0x90>)
 80011f4:	f00f f8f3 	bl	80103de <HAL_UARTEx_SetTxFifoThreshold>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011fe:	f000 f8df 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <MX_USART1_UART_Init+0x90>)
 8001206:	f00f f928 	bl	801045a <HAL_UARTEx_SetRxFifoThreshold>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001210:	f000 f8d6 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_USART1_UART_Init+0x90>)
 8001216:	f00f f8a9 	bl	801036c <HAL_UARTEx_DisableFifoMode>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001220:	f000 f8ce 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	24000588 	.word	0x24000588
 800122c:	40011000 	.word	0x40011000

08001230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_DMA_Init+0x7c>)
 8001238:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <MX_DMA_Init+0x7c>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_DMA_Init+0x7c>)
 8001248:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	200b      	movs	r0, #11
 800125a:	f003 fb28 	bl	80048ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800125e:	200b      	movs	r0, #11
 8001260:	f003 fb3f 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	200c      	movs	r0, #12
 800126a:	f003 fb20 	bl	80048ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800126e:	200c      	movs	r0, #12
 8001270:	f003 fb37 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	200d      	movs	r0, #13
 800127a:	f003 fb18 	bl	80048ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800127e:	200d      	movs	r0, #13
 8001280:	f003 fb2f 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	200e      	movs	r0, #14
 800128a:	f003 fb10 	bl	80048ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800128e:	200e      	movs	r0, #14
 8001290:	f003 fb27 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	200f      	movs	r0, #15
 800129a:	f003 fb08 	bl	80048ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800129e:	200f      	movs	r0, #15
 80012a0:	f003 fb1f 	bl	80048e2 <HAL_NVIC_EnableIRQ>

}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58024400 	.word	0x58024400

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <MX_GPIO_Init+0x104>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	4a39      	ldr	r2, [pc, #228]	; (80013b4 <MX_GPIO_Init+0x104>)
 80012ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d6:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <MX_GPIO_Init+0x104>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <MX_GPIO_Init+0x104>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <MX_GPIO_Init+0x104>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f4:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <MX_GPIO_Init+0x104>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <MX_GPIO_Init+0x104>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001308:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <MX_GPIO_Init+0x104>)
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <MX_GPIO_Init+0x104>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <MX_GPIO_Init+0x104>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001326:	4a23      	ldr	r2, [pc, #140]	; (80013b4 <MX_GPIO_Init+0x104>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_GPIO_Init+0x104>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_GPIO_Init+0x104>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_GPIO_Init+0x104>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_GPIO_Init+0x104>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2102      	movs	r1, #2
 8001360:	4815      	ldr	r0, [pc, #84]	; (80013b8 <MX_GPIO_Init+0x108>)
 8001362:	f006 faf7 	bl	8007954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136c:	4813      	ldr	r0, [pc, #76]	; (80013bc <MX_GPIO_Init+0x10c>)
 800136e:	f006 faf1 	bl	8007954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001372:	2302      	movs	r3, #2
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <MX_GPIO_Init+0x108>)
 800138a:	f006 f91b 	bl	80075c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800138e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_GPIO_Init+0x10c>)
 80013a8:	f006 f90c 	bl	80075c4 <HAL_GPIO_Init>

}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020000 	.word	0x58020000
 80013bc:	58020400 	.word	0x58020400

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
 80013ca:	0000      	movs	r0, r0
 80013cc:	0000      	movs	r0, r0
	...

080013d0 <calc_angles>:
#define YAW 0
#define PITCH 1
#define ROLL 2

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	ed2d 8b04 	vpush	{d8-d9}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gyro_x / FREQ;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80013e8:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 8001738 <calc_angles+0x368>
 80013ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  mpu6050->gyro_angle[Y] += -mpu6050->gyro_y / FREQ; // Change sign to match the accelerometer's one
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001406:	eef1 6a67 	vneg.f32	s13, s15
 800140a:	ed9f 6acb 	vldr	s12, [pc, #812]	; 8001738 <calc_angles+0x368>
 800140e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001422:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800142c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edd3 7a08 	vldr	s15, [r3, #32]
 8001436:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800143a:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001710 <calc_angles+0x340>
 800143e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001442:	eeb0 0b47 	vmov.f64	d0, d7
 8001446:	f010 f84f 	bl	80114e8 <sin>
 800144a:	eeb0 7b40 	vmov.f64	d7, d0
 800144e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001452:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001456:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001466:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001470:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a08 	vldr	s15, [r3, #32]
 800147a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001710 <calc_angles+0x340>
 8001482:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001486:	eeb0 0b47 	vmov.f64	d0, d7
 800148a:	f010 f82d 	bl	80114e8 <sin>
 800148e:	eeb0 7b40 	vmov.f64	d7, d0
 8001492:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001496:	ee38 7b47 	vsub.f64	d7, d8, d7
 800149a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ae:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014b2:	eeb0 0b47 	vmov.f64	d0, d7
 80014b6:	f00f fdc3 	bl	8011040 <pow>
 80014ba:	eeb0 8b40 	vmov.f64	d8, d0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80014c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014cc:	eeb0 0b47 	vmov.f64	d0, d7
 80014d0:	f00f fdb6 	bl	8011040 <pow>
 80014d4:	eeb0 7b40 	vmov.f64	d7, d0
 80014d8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edd3 7a04 	vldr	s15, [r3, #16]
 80014e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014ea:	eeb0 0b47 	vmov.f64	d0, d7
 80014ee:	f00f fda7 	bl	8011040 <pow>
 80014f2:	eeb0 7b40 	vmov.f64	d7, d0
 80014f6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80014fa:	eeb0 0b47 	vmov.f64	d0, d7
 80014fe:	f010 f86b 	bl	80115d8 <sqrt>
 8001502:	eeb0 7b40 	vmov.f64	d7, d0
 8001506:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800150a:	ee17 2a90 	vmov	r2, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	679a      	str	r2, [r3, #120]	; 0x78

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	edd3 7a02 	vldr	s15, [r3, #8]
 8001518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151c:	ee17 3a90 	vmov	r3, s15
 8001520:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001524:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800152c:	429a      	cmp	r2, r3
 800152e:	da1b      	bge.n	8001568 <calc_angles+0x198>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 6a03 	vldr	s13, [r3, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001546:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800154a:	eeb0 0b47 	vmov.f64	d0, d7
 800154e:	f010 f817 	bl	8011580 <asin>
 8001552:	eeb0 7b40 	vmov.f64	d7, d0
 8001556:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8001718 <calc_angles+0x348>
 800155a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800155e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	edd3 7a03 	vldr	s15, [r3, #12]
 800156e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001572:	ee17 3a90 	vmov	r3, s15
 8001576:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800157a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001582:	429a      	cmp	r2, r3
 8001584:	da1b      	bge.n	80015be <calc_angles+0x1ee>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	edd3 6a02 	vldr	s13, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a0:	eeb0 0b47 	vmov.f64	d0, d7
 80015a4:	f00f ffec 	bl	8011580 <asin>
 80015a8:	eeb0 7b40 	vmov.f64	d7, d0
 80015ac:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001718 <calc_angles+0x348>
 80015b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  }

  if (mpu6050->initialized == 1) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d132      	bne.n	800162e <calc_angles+0x25e>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80015ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80015d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80015e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80015e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001604:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001608:	ee27 6b06 	vmul.f64	d6, d7, d6
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001612:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001616:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800161a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800161e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001622:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800162c:	e00b      	b.n	8001646 <calc_angles+0x276>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	; 0x58

    mpu6050->initialized = 1;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800164c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001650:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001720 <calc_angles+0x350>
 8001654:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800165e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001662:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001728 <calc_angles+0x358>
 8001666:	ee27 7b05 	vmul.f64	d7, d7, d5
 800166a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800166e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800167e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001682:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001720 <calc_angles+0x350>
 8001686:	ee27 6b06 	vmul.f64	d6, d7, d6
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001690:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001694:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001728 <calc_angles+0x358>
 8001698:	ee27 7b05 	vmul.f64	d7, d7, d5
 800169c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  mpu6050->measures[YAW] = -mpu6050->gyro_z; // Store the angular motion for this axis
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80016b0:	eef1 7a67 	vneg.f32	s15, s15
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80016c0:	eef1 7a67 	vneg.f32	s15, s15
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80016d0:	eef1 7a67 	vneg.f32	s15, s15
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80016ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016ee:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001730 <calc_angles+0x360>
 80016f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	ecbd 8b04 	vpop	{d8-d9}
 800170e:	bd80      	pop	{r7, pc}
 8001710:	695f8190 	.word	0x695f8190
 8001714:	3f06e05a 	.word	0x3f06e05a
 8001718:	1a63c1f8 	.word	0x1a63c1f8
 800171c:	404ca5dc 	.word	0x404ca5dc
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	3feccccc 	.word	0x3feccccc
 8001728:	9999999a 	.word	0x9999999a
 800172c:	3fb99999 	.word	0x3fb99999
 8001730:	d2f1a9fc 	.word	0xd2f1a9fc
 8001734:	3f50624d 	.word	0x3f50624d
 8001738:	43c80000 	.word	0x43c80000

0800173c <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	4611      	mov	r1, r2
 8001748:	461a      	mov	r2, r3
 800174a:	460b      	mov	r3, r1
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	4613      	mov	r3, r2
 8001750:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	22d0      	movs	r2, #208	; 0xd0
 800175c:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e00a      	b.n	800177a <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f006 fd1b 	bl	80081a4 <HAL_I2C_GetState>
 800176e:	4603      	mov	r3, r0
 8001770:	2b20      	cmp	r3, #32
 8001772:	d006      	beq.n	8001782 <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3301      	adds	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b04      	cmp	r3, #4
 800177e:	ddf1      	ble.n	8001764 <MPU6050_init+0x28>
 8001780:	e000      	b.n	8001784 <MPU6050_init+0x48>
      break;
 8001782:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b04      	cmp	r3, #4
 8001788:	dd01      	ble.n	800178e <MPU6050_init+0x52>
 800178a:	2301      	movs	r3, #1
 800178c:	e1e1      	b.n	8001b52 <MPU6050_init+0x416>

  // Check MPU id
  uint8_t whoiam = 0x75;
 800178e:	2375      	movs	r3, #117	; 0x75
 8001790:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e011      	b.n	80017bc <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	b299      	uxth	r1, r3
 80017a2:	f107 021b 	add.w	r2, r7, #27
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	f006 f996 	bl	8007adc <HAL_I2C_Master_Transmit>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	ddea      	ble.n	8001798 <MPU6050_init+0x5c>
 80017c2:	e000      	b.n	80017c6 <MPU6050_init+0x8a>
      break;
 80017c4:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	dd01      	ble.n	80017d0 <MPU6050_init+0x94>
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1c0      	b.n	8001b52 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	e011      	b.n	80017fa <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	791b      	ldrb	r3, [r3, #4]
 80017de:	b299      	uxth	r1, r3
 80017e0:	f107 021a 	add.w	r2, r7, #26
 80017e4:	2364      	movs	r3, #100	; 0x64
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	f006 fa6b 	bl	8007cc4 <HAL_I2C_Master_Receive>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	3301      	adds	r3, #1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	ddea      	ble.n	80017d6 <MPU6050_init+0x9a>
 8001800:	e000      	b.n	8001804 <MPU6050_init+0xc8>
      break;
 8001802:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b04      	cmp	r3, #4
 8001808:	dd01      	ble.n	800180e <MPU6050_init+0xd2>
 800180a:	2304      	movs	r3, #4
 800180c:	e1a1      	b.n	8001b52 <MPU6050_init+0x416>

  if (whoiam_res != 0x68) return 5;
 800180e:	7ebb      	ldrb	r3, [r7, #26]
 8001810:	2b68      	cmp	r3, #104	; 0x68
 8001812:	d001      	beq.n	8001818 <MPU6050_init+0xdc>
 8001814:	2305      	movs	r3, #5
 8001816:	e19c      	b.n	8001b52 <MPU6050_init+0x416>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001818:	236b      	movs	r3, #107	; 0x6b
 800181a:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	e011      	b.n	8001846 <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	791b      	ldrb	r3, [r3, #4]
 800182a:	b299      	uxth	r1, r3
 800182c:	f107 0218 	add.w	r2, r7, #24
 8001830:	2364      	movs	r3, #100	; 0x64
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2302      	movs	r3, #2
 8001836:	f006 f951 	bl	8007adc <HAL_I2C_Master_Transmit>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2b04      	cmp	r3, #4
 800184a:	ddea      	ble.n	8001822 <MPU6050_init+0xe6>
 800184c:	e000      	b.n	8001850 <MPU6050_init+0x114>
      break;
 800184e:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b04      	cmp	r3, #4
 8001854:	dd01      	ble.n	800185a <MPU6050_init+0x11e>
 8001856:	2306      	movs	r3, #6
 8001858:	e17b      	b.n	8001b52 <MPU6050_init+0x416>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 800185a:	2319      	movs	r3, #25
 800185c:	753b      	strb	r3, [r7, #20]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e011      	b.n	800188c <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	b299      	uxth	r1, r3
 8001872:	f107 0214 	add.w	r2, r7, #20
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	f006 f92e 	bl	8007adc <HAL_I2C_Master_Transmit>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b04      	cmp	r3, #4
 8001890:	ddea      	ble.n	8001868 <MPU6050_init+0x12c>
 8001892:	e000      	b.n	8001896 <MPU6050_init+0x15a>
      break;
 8001894:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	2b04      	cmp	r3, #4
 800189a:	dd01      	ble.n	80018a0 <MPU6050_init+0x164>
 800189c:	2307      	movs	r3, #7
 800189e:	e158      	b.n	8001b52 <MPU6050_init+0x416>

  // Set accel config
  uint8_t accel_config = 0x1C;
 80018a0:	231c      	movs	r3, #28
 80018a2:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e011      	b.n	80018ce <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	791b      	ldrb	r3, [r3, #4]
 80018b2:	b299      	uxth	r1, r3
 80018b4:	f107 0213 	add.w	r2, r7, #19
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2301      	movs	r3, #1
 80018be:	f006 f90d 	bl	8007adc <HAL_I2C_Master_Transmit>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	3301      	adds	r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	ddea      	ble.n	80018aa <MPU6050_init+0x16e>
 80018d4:	e000      	b.n	80018d8 <MPU6050_init+0x19c>
      break;
 80018d6:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b04      	cmp	r3, #4
 80018dc:	dd01      	ble.n	80018e2 <MPU6050_init+0x1a6>
 80018de:	2308      	movs	r3, #8
 80018e0:	e137      	b.n	8001b52 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e011      	b.n	800190c <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	b299      	uxth	r1, r3
 80018f2:	f107 0213 	add.w	r2, r7, #19
 80018f6:	2364      	movs	r3, #100	; 0x64
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	f006 f9e2 	bl	8007cc4 <HAL_I2C_Master_Receive>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b04      	cmp	r3, #4
 8001910:	ddea      	ble.n	80018e8 <MPU6050_init+0x1ac>
 8001912:	e000      	b.n	8001916 <MPU6050_init+0x1da>
      break;
 8001914:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	2b04      	cmp	r3, #4
 800191a:	dd01      	ble.n	8001920 <MPU6050_init+0x1e4>
 800191c:	2309      	movs	r3, #9
 800191e:	e118      	b.n	8001b52 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001920:	7cfb      	ldrb	r3, [r7, #19]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	f023 0318 	bic.w	r3, r3, #24
 8001928:	b25a      	sxtb	r2, r3
 800192a:	79bb      	ldrb	r3, [r7, #6]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	b25b      	sxtb	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b25b      	sxtb	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	e011      	b.n	8001962 <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	b299      	uxth	r1, r3
 8001948:	f107 0213 	add.w	r2, r7, #19
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	f006 f8c3 	bl	8007adc <HAL_I2C_Master_Transmit>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3301      	adds	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	2b04      	cmp	r3, #4
 8001966:	ddea      	ble.n	800193e <MPU6050_init+0x202>
 8001968:	e000      	b.n	800196c <MPU6050_init+0x230>
      break;
 800196a:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b04      	cmp	r3, #4
 8001970:	dd01      	ble.n	8001976 <MPU6050_init+0x23a>
 8001972:	230a      	movs	r3, #10
 8001974:	e0ed      	b.n	8001b52 <MPU6050_init+0x416>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8001976:	231b      	movs	r3, #27
 8001978:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e011      	b.n	80019a4 <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	791b      	ldrb	r3, [r3, #4]
 8001988:	b299      	uxth	r1, r3
 800198a:	f107 0212 	add.w	r2, r7, #18
 800198e:	2364      	movs	r3, #100	; 0x64
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	f006 f8a2 	bl	8007adc <HAL_I2C_Master_Transmit>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	ddea      	ble.n	8001980 <MPU6050_init+0x244>
 80019aa:	e000      	b.n	80019ae <MPU6050_init+0x272>
      break;
 80019ac:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	dd01      	ble.n	80019b8 <MPU6050_init+0x27c>
 80019b4:	230b      	movs	r3, #11
 80019b6:	e0cc      	b.n	8001b52 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	e011      	b.n	80019e2 <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	791b      	ldrb	r3, [r3, #4]
 80019c6:	b299      	uxth	r1, r3
 80019c8:	f107 0212 	add.w	r2, r7, #18
 80019cc:	2364      	movs	r3, #100	; 0x64
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	f006 f977 	bl	8007cc4 <HAL_I2C_Master_Receive>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	3301      	adds	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	ddea      	ble.n	80019be <MPU6050_init+0x282>
 80019e8:	e000      	b.n	80019ec <MPU6050_init+0x2b0>
      break;
 80019ea:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	dd01      	ble.n	80019f6 <MPU6050_init+0x2ba>
 80019f2:	230c      	movs	r3, #12
 80019f4:	e0ad      	b.n	8001b52 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f023 0318 	bic.w	r3, r3, #24
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	e011      	b.n	8001a3a <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	791b      	ldrb	r3, [r3, #4]
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	f107 0212 	add.w	r2, r7, #18
 8001a24:	2364      	movs	r3, #100	; 0x64
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f006 f857 	bl	8007adc <HAL_I2C_Master_Transmit>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	3301      	adds	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	ddea      	ble.n	8001a16 <MPU6050_init+0x2da>
 8001a40:	e000      	b.n	8001a44 <MPU6050_init+0x308>
      break;
 8001a42:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	dd01      	ble.n	8001a4e <MPU6050_init+0x312>
 8001a4a:	230d      	movs	r3, #13
 8001a4c:	e081      	b.n	8001b52 <MPU6050_init+0x416>
  #define MPU6050_DLPF_BW_94          0x02
  #define MPU6050_DLPF_BW_44          0x03
  #define MPU6050_DLPF_BW_21          0x04
  #define MPU6050_DLPF_BW_10          0x05
  #define MPU6050_DLPF_BW_5           0x06
  uint8_t lpf[2] = {0x1A, MPU6050_DLPF_BW_94};
 8001a4e:	f240 231a 	movw	r3, #538	; 0x21a
 8001a52:	823b      	strh	r3, [r7, #16]
  for (counter = 0; counter < 5; counter += 1) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	e011      	b.n	8001a7e <MPU6050_init+0x342>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, lpf, 2, 100) == HAL_OK) {
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	b299      	uxth	r1, r3
 8001a64:	f107 0210 	add.w	r2, r7, #16
 8001a68:	2364      	movs	r3, #100	; 0x64
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f006 f835 	bl	8007adc <HAL_I2C_Master_Transmit>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <MPU6050_init+0x34a>
  for (counter = 0; counter < 5; counter += 1) {
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	ddea      	ble.n	8001a5a <MPU6050_init+0x31e>
 8001a84:	e000      	b.n	8001a88 <MPU6050_init+0x34c>
      break;
 8001a86:	bf00      	nop
    }
  }
  if (counter >= 5) return 14;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	dd01      	ble.n	8001a92 <MPU6050_init+0x356>
 8001a8e:	230e      	movs	r3, #14
 8001a90:	e05f      	b.n	8001b52 <MPU6050_init+0x416>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3380      	adds	r3, #128	; 0x80
 8001a96:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001b5c <MPU6050_init+0x420>
 8001a9a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a9e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fdf6 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3398      	adds	r3, #152	; 0x98
 8001aac:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001b5c <MPU6050_init+0x420>
 8001ab0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001ab4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fdeb 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	33b0      	adds	r3, #176	; 0xb0
 8001ac2:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001b5c <MPU6050_init+0x420>
 8001ac6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001aca:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fde0 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 1.0); // Gyro x
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	33c8      	adds	r3, #200	; 0xc8
 8001ad8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001adc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001ae0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fdd5 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 1.0); // Gyro y
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	33e0      	adds	r3, #224	; 0xe0
 8001aee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001af2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001af6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fdca 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 1.0); // Gyro z
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	33f8      	adds	r3, #248	; 0xf8
 8001b04:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001b08:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b0c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fdbf 	bl	8000694 <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3354      	adds	r3, #84	; 0x54
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00e fd64 	bl	80105ec <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3360      	adds	r3, #96	; 0x60
 8001b28:	220c      	movs	r2, #12
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00e fd5d 	bl	80105ec <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	336c      	adds	r3, #108	; 0x6c
 8001b36:	220c      	movs	r2, #12
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00e fd56 	bl	80105ec <memset>
  mpu6050->initialized = 0;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  mpu6050->angle_z = 0;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	3dcccccd 	.word	0x3dcccccd

08001b60 <MPU6050_set_offset>:

void MPU6050_set_offset(mpu6050_t *mpu6050,
    float ax_offset, float ay_offset, float az_offset,
    float gx_offset, float gy_offset, float gz_offset) {
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	61f8      	str	r0, [r7, #28]
 8001b68:	ed87 0a06 	vstr	s0, [r7, #24]
 8001b6c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001b70:	ed87 1a04 	vstr	s2, [r7, #16]
 8001b74:	edc7 1a03 	vstr	s3, [r7, #12]
 8001b78:	ed87 2a02 	vstr	s4, [r7, #8]
 8001b7c:	edc7 2a01 	vstr	s5, [r7, #4]
  mpu6050->ax_offset = ax_offset;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
  mpu6050->ay_offset = ay_offset;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
  mpu6050->az_offset = az_offset;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
  mpu6050->gx_offset = gx_offset;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  mpu6050->gy_offset = gy_offset;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
  mpu6050->gz_offset = gz_offset;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ba4:	bf00      	nop
 8001ba6:	3724      	adds	r7, #36	; 0x24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <MPU6050_calibrate>:

void MPU6050_calibrate(mpu6050_t *mpu6050) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  int gx = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
  int gy = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  int gz = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  int ax = -226;
 8001bc4:	f06f 03e1 	mvn.w	r3, #225	; 0xe1
 8001bc8:	60fb      	str	r3, [r7, #12]
  int ay = -20;
 8001bca:	f06f 0313 	mvn.w	r3, #19
 8001bce:	60bb      	str	r3, [r7, #8]
#ifdef CALIBRATE_ANGLE
  ax = 0;
  ay = 0;
#endif

  HAL_Delay(2000);
 8001bd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bd4:	f002 fd60 	bl	8004698 <HAL_Delay>
  for (int i = 0; i < 1100; i += 1) {
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	e03a      	b.n	8001c54 <MPU6050_calibrate+0xa4>
    MPU6050_update(mpu6050);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f88a 	bl	8001cf8 <MPU6050_update>
    HAL_Delay(3);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f002 fd57 	bl	8004698 <HAL_Delay>
    if (i < 100) continue;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b63      	cmp	r3, #99	; 0x63
 8001bee:	dd2d      	ble.n	8001c4c <MPU6050_calibrate+0x9c>
    gx += mpu6050->gx;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c08:	ee17 3a90 	vmov	r3, s15
 8001c0c:	61fb      	str	r3, [r7, #28]
    gy += mpu6050->gy;
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c26:	ee17 3a90 	vmov	r3, s15
 8001c2a:	61bb      	str	r3, [r7, #24]
    gz += mpu6050->gz;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c44:	ee17 3a90 	vmov	r3, s15
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e000      	b.n	8001c4e <MPU6050_calibrate+0x9e>
    if (i < 100) continue;
 8001c4c:	bf00      	nop
  for (int i = 0; i < 1100; i += 1) {
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	3301      	adds	r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f240 424b 	movw	r2, #1099	; 0x44b
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	ddbf      	ble.n	8001bde <MPU6050_calibrate+0x2e>
    ay += mpu6050->ay;
#endif

  }

  gx = gx/1000;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <MPU6050_calibrate+0x140>)
 8001c62:	fb82 1203 	smull	r1, r2, r2, r3
 8001c66:	1192      	asrs	r2, r2, #6
 8001c68:	17db      	asrs	r3, r3, #31
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	61fb      	str	r3, [r7, #28]
  gy = gy/1000;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <MPU6050_calibrate+0x140>)
 8001c72:	fb82 1203 	smull	r1, r2, r2, r3
 8001c76:	1192      	asrs	r2, r2, #6
 8001c78:	17db      	asrs	r3, r3, #31
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	61bb      	str	r3, [r7, #24]
  gz = gz/1000;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <MPU6050_calibrate+0x140>)
 8001c82:	fb82 1203 	smull	r1, r2, r2, r3
 8001c86:	1192      	asrs	r2, r2, #6
 8001c88:	17db      	asrs	r3, r3, #31
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
#ifdef CALIBRATE_ANGLE
  ax = ax/1000;
  ay = ay/1000;
#endif

  MPU6050_set_offset(mpu6050, -ax, -ay, 0, -gx, -gy, -gz);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	425b      	negs	r3, r3
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	425b      	negs	r3, r3
 8001c9e:	ee07 3a10 	vmov	s14, r3
 8001ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	425b      	negs	r3, r3
 8001caa:	ee06 3a90 	vmov	s13, r3
 8001cae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	425b      	negs	r3, r3
 8001cb6:	ee06 3a10 	vmov	s12, r3
 8001cba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	425b      	negs	r3, r3
 8001cc2:	ee05 3a90 	vmov	s11, r3
 8001cc6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001cca:	eef0 2a65 	vmov.f32	s5, s11
 8001cce:	eeb0 2a46 	vmov.f32	s4, s12
 8001cd2:	eef0 1a66 	vmov.f32	s3, s13
 8001cd6:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8001cf4 <MPU6050_calibrate+0x144>
 8001cda:	eef0 0a47 	vmov.f32	s1, s14
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ff3c 	bl	8001b60 <MPU6050_set_offset>
}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	10624dd3 	.word	0x10624dd3
 8001cf4:	00000000 	.word	0x00000000

08001cf8 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	6078      	str	r0, [r7, #4]
  // Read MPU6050
//  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14, 10);
//  HAL_I2C_Mem_Read_IT(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14);
  HAL_I2C_Mem_Read_DMA(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	791b      	ldrb	r3, [r3, #4]
 8001d08:	b299      	uxth	r1, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001d10:	220e      	movs	r2, #14
 8001d12:	9201      	str	r2, [sp, #4]
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2301      	movs	r3, #1
 8001d18:	223b      	movs	r2, #59	; 0x3b
 8001d1a:	f006 f8c9 	bl	8007eb0 <HAL_I2C_Mem_Read_DMA>
  MPU6050_parse_6axis(mpu6050);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f804 	bl	8001d2c <MPU6050_parse_6axis>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(mpu6050->rx_buffer[0] << 8 | mpu6050->rx_buffer[1]);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(mpu6050->rx_buffer[2] << 8 | mpu6050->rx_buffer[3]);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(mpu6050->rx_buffer[4] << 8 | mpu6050->rx_buffer[5]);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	edc3 7a04 	vstr	s15, [r3, #16]

//  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax);
//  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay);
//  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az);

  mpu6050->ax = mpu6050->ax + mpu6050->ax_offset;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = mpu6050->ay + mpu6050->ay_offset;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = mpu6050->az + mpu6050->az_offset;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (mpu6050->rx_buffer[6] << 8 | mpu6050->rx_buffer[7]);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001df8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e04:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001f18 <MPU6050_parse_6axis+0x1ec>
 8001e08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e0c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001f1c <MPU6050_parse_6axis+0x1f0>
 8001e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(mpu6050->rx_buffer[8] << 8 | mpu6050->rx_buffer[9]);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	425b      	negs	r3, r3
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(mpu6050->rx_buffer[10] << 8 | mpu6050->rx_buffer[11]);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(mpu6050->rx_buffer[12] << 8 | mpu6050->rx_buffer[13]);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	425b      	negs	r3, r3
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	edc3 7a08 	vstr	s15, [r3, #32]

//  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx);
//  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy);
//  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz);

  mpu6050->gx = mpu6050->gx + mpu6050->gx_offset;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy + mpu6050->gy_offset;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz + mpu6050->gz_offset;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gyro_x = mpu6050->gx / SSF_GYRO;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ed2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001f20 <MPU6050_parse_6axis+0x1f4>
 8001ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_y = mpu6050->gy / SSF_GYRO;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ee6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001f20 <MPU6050_parse_6axis+0x1f4>
 8001eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  mpu6050->gyro_z = mpu6050->gz / SSF_GYRO;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001efa:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001f20 <MPU6050_parse_6axis+0x1f4>
 8001efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  calc_angles(mpu6050);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fa61 	bl	80013d0 <calc_angles>
}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	43aa0000 	.word	0x43aa0000
 8001f1c:	42121eb8 	.word	0x42121eb8
 8001f20:	42830000 	.word	0x42830000

08001f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_MspInit+0x30>)
 8001f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f30:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_MspInit+0x30>)
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_MspInit+0x30>)
 8001f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	58024400 	.word	0x58024400

08001f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0b8      	sub	sp, #224	; 0xe0
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	22bc      	movs	r2, #188	; 0xbc
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00e fb37 	bl	80105ec <memset>
  if(hi2c->Instance==I2C1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a3f      	ldr	r2, [pc, #252]	; (8002080 <HAL_I2C_MspInit+0x128>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d176      	bne.n	8002076 <HAL_I2C_MspInit+0x11e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f88:	2308      	movs	r3, #8
 8001f8a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 ffd6 	bl	800af48 <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fa2:	f7ff fa0d 	bl	80013c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_I2C_MspInit+0x12c>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	4a35      	ldr	r2, [pc, #212]	; (8002084 <HAL_I2C_MspInit+0x12c>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb6:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_I2C_MspInit+0x12c>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc4:	23c0      	movs	r3, #192	; 0xc0
 8001fc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fca:	2312      	movs	r3, #18
 8001fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4827      	ldr	r0, [pc, #156]	; (8002088 <HAL_I2C_MspInit+0x130>)
 8001fea:	f005 faeb 	bl	80075c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_I2C_MspInit+0x12c>)
 8001ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff4:	4a23      	ldr	r2, [pc, #140]	; (8002084 <HAL_I2C_MspInit+0x12c>)
 8001ff6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_I2C_MspInit+0x12c>)
 8002000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream4;
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_I2C_MspInit+0x134>)
 800200e:	4a20      	ldr	r2, [pc, #128]	; (8002090 <HAL_I2C_MspInit+0x138>)
 8002010:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_I2C_MspInit+0x134>)
 8002014:	2221      	movs	r2, #33	; 0x21
 8002016:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_I2C_MspInit+0x134>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_I2C_MspInit+0x134>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_I2C_MspInit+0x134>)
 8002026:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800202a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_I2C_MspInit+0x134>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_I2C_MspInit+0x134>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_I2C_MspInit+0x134>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_I2C_MspInit+0x134>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_I2C_MspInit+0x134>)
 8002046:	2200      	movs	r2, #0
 8002048:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800204a:	4810      	ldr	r0, [pc, #64]	; (800208c <HAL_I2C_MspInit+0x134>)
 800204c:	f002 fc64 	bl	8004918 <HAL_DMA_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_MspInit+0x102>
    {
      Error_Handler();
 8002056:	f7ff f9b3 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <HAL_I2C_MspInit+0x134>)
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_I2C_MspInit+0x134>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	201f      	movs	r0, #31
 800206c:	f002 fc1f 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002070:	201f      	movs	r0, #31
 8002072:	f002 fc36 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	37e0      	adds	r7, #224	; 0xe0
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005400 	.word	0x40005400
 8002084:	58024400 	.word	0x58024400
 8002088:	58020400 	.word	0x58020400
 800208c:	24000108 	.word	0x24000108
 8002090:	40020070 	.word	0x40020070

08002094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b090      	sub	sp, #64	; 0x40
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d10f      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b6:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 80020b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020bc:	4a7f      	ldr	r2, [pc, #508]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020c6:	4b7d      	ldr	r3, [pc, #500]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 80020c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80020d4:	e0ee      	b.n	80022b4 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM4)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a79      	ldr	r2, [pc, #484]	; (80022c0 <HAL_TIM_Base_MspInit+0x22c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d137      	bne.n	8002150 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020e0:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 80020e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020e6:	4a75      	ldr	r2, [pc, #468]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020f0:	4b72      	ldr	r3, [pc, #456]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 80020f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fe:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002104:	4a6d      	ldr	r2, [pc, #436]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800210e:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	623b      	str	r3, [r7, #32]
 800211a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800211c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800212e:	2302      	movs	r3, #2
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002136:	4619      	mov	r1, r3
 8002138:	4862      	ldr	r0, [pc, #392]	; (80022c4 <HAL_TIM_Base_MspInit+0x230>)
 800213a:	f005 fa43 	bl	80075c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2101      	movs	r1, #1
 8002142:	201e      	movs	r0, #30
 8002144:	f002 fbb3 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002148:	201e      	movs	r0, #30
 800214a:	f002 fbca 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 800214e:	e0b1      	b.n	80022b4 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM5)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5c      	ldr	r2, [pc, #368]	; (80022c8 <HAL_TIM_Base_MspInit+0x234>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d136      	bne.n	80021c8 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800215a:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 800215c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002160:	4a56      	ldr	r2, [pc, #344]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800216a:	4b54      	ldr	r3, [pc, #336]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 800216c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 800217a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217e:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002196:	2301      	movs	r3, #1
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021a6:	2302      	movs	r3, #2
 80021a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ae:	4619      	mov	r1, r3
 80021b0:	4846      	ldr	r0, [pc, #280]	; (80022cc <HAL_TIM_Base_MspInit+0x238>)
 80021b2:	f005 fa07 	bl	80075c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2101      	movs	r1, #1
 80021ba:	2032      	movs	r0, #50	; 0x32
 80021bc:	f002 fb77 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80021c0:	2032      	movs	r0, #50	; 0x32
 80021c2:	f002 fb8e 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 80021c6:	e075      	b.n	80022b4 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM6)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a40      	ldr	r2, [pc, #256]	; (80022d0 <HAL_TIM_Base_MspInit+0x23c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d117      	bne.n	8002202 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021d2:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 80021d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021d8:	4a38      	ldr	r2, [pc, #224]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 80021e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2036      	movs	r0, #54	; 0x36
 80021f6:	f002 fb5a 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021fa:	2036      	movs	r0, #54	; 0x36
 80021fc:	f002 fb71 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 8002200:	e058      	b.n	80022b4 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM7)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a33      	ldr	r2, [pc, #204]	; (80022d4 <HAL_TIM_Base_MspInit+0x240>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d117      	bne.n	800223c <HAL_TIM_Base_MspInit+0x1a8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800220c:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 800220e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002212:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002214:	f043 0320 	orr.w	r3, r3, #32
 8002218:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 800221e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2102      	movs	r1, #2
 800222e:	2037      	movs	r0, #55	; 0x37
 8002230:	f002 fb3d 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002234:	2037      	movs	r0, #55	; 0x37
 8002236:	f002 fb54 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 800223a:	e03b      	b.n	80022b4 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM17)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <HAL_TIM_Base_MspInit+0x244>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d136      	bne.n	80022b4 <HAL_TIM_Base_MspInit+0x220>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 800224e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002252:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800225c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_TIM_Base_MspInit+0x228>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002294:	2301      	movs	r3, #1
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800229c:	4619      	mov	r1, r3
 800229e:	480f      	ldr	r0, [pc, #60]	; (80022dc <HAL_TIM_Base_MspInit+0x248>)
 80022a0:	f005 f990 	bl	80075c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	2076      	movs	r0, #118	; 0x76
 80022aa:	f002 fb00 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80022ae:	2076      	movs	r0, #118	; 0x76
 80022b0:	f002 fb17 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 80022b4:	bf00      	nop
 80022b6:	3740      	adds	r7, #64	; 0x40
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	58024400 	.word	0x58024400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	58020c00 	.word	0x58020c00
 80022c8:	40000c00 	.word	0x40000c00
 80022cc:	58020000 	.word	0x58020000
 80022d0:	40001000 	.word	0x40001000
 80022d4:	40001400 	.word	0x40001400
 80022d8:	40014800 	.word	0x40014800
 80022dc:	58020400 	.word	0x58020400

080022e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d13d      	bne.n	800237e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_TIM_MspPostInit+0xa8>)
 8002304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002308:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <HAL_TIM_MspPostInit+0xa8>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_TIM_MspPostInit+0xa8>)
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_TIM_MspPostInit+0xa8>)
 8002322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <HAL_TIM_MspPostInit+0xa8>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_TIM_MspPostInit+0xa8>)
 8002332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 800233e:	232c      	movs	r3, #44	; 0x2c
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800234e:	2301      	movs	r3, #1
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	480c      	ldr	r0, [pc, #48]	; (800238c <HAL_TIM_MspPostInit+0xac>)
 800235a:	f005 f933 	bl	80075c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800235e:	2308      	movs	r3, #8
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800236e:	2301      	movs	r3, #1
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_TIM_MspPostInit+0xb0>)
 800237a:	f005 f923 	bl	80075c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	58024400 	.word	0x58024400
 800238c:	58020000 	.word	0x58020000
 8002390:	58020400 	.word	0x58020400

08002394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0c0      	sub	sp, #256	; 0x100
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023b0:	22bc      	movs	r2, #188	; 0xbc
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f00e f919 	bl	80105ec <memset>
  if(huart->Instance==UART4)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7e      	ldr	r2, [pc, #504]	; (80025b8 <HAL_UART_MspInit+0x224>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d179      	bne.n	80024b8 <HAL_UART_MspInit+0x124>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80023c4:	2302      	movs	r3, #2
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80023c8:	2303      	movs	r3, #3
 80023ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d2:	4618      	mov	r0, r3
 80023d4:	f008 fdb8 	bl	800af48 <HAL_RCCEx_PeriphCLKConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023de:	f7fe ffef 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80023e2:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_UART_MspInit+0x228>)
 80023e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e8:	4a74      	ldr	r2, [pc, #464]	; (80025bc <HAL_UART_MspInit+0x228>)
 80023ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f2:	4b72      	ldr	r3, [pc, #456]	; (80025bc <HAL_UART_MspInit+0x228>)
 80023f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <HAL_UART_MspInit+0x228>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002406:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <HAL_UART_MspInit+0x228>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002410:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_UART_MspInit+0x228>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800241e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002422:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002426:	2312      	movs	r3, #18
 8002428:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8002438:	2306      	movs	r3, #6
 800243a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002442:	4619      	mov	r1, r3
 8002444:	485e      	ldr	r0, [pc, #376]	; (80025c0 <HAL_UART_MspInit+0x22c>)
 8002446:	f005 f8bd 	bl	80075c4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream0;
 800244a:	4b5e      	ldr	r3, [pc, #376]	; (80025c4 <HAL_UART_MspInit+0x230>)
 800244c:	4a5e      	ldr	r2, [pc, #376]	; (80025c8 <HAL_UART_MspInit+0x234>)
 800244e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002450:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <HAL_UART_MspInit+0x230>)
 8002452:	223f      	movs	r2, #63	; 0x3f
 8002454:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002456:	4b5b      	ldr	r3, [pc, #364]	; (80025c4 <HAL_UART_MspInit+0x230>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800245c:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_UART_MspInit+0x230>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002462:	4b58      	ldr	r3, [pc, #352]	; (80025c4 <HAL_UART_MspInit+0x230>)
 8002464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002468:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800246a:	4b56      	ldr	r3, [pc, #344]	; (80025c4 <HAL_UART_MspInit+0x230>)
 800246c:	2200      	movs	r2, #0
 800246e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002470:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <HAL_UART_MspInit+0x230>)
 8002472:	2200      	movs	r2, #0
 8002474:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002476:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_UART_MspInit+0x230>)
 8002478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800247c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800247e:	4b51      	ldr	r3, [pc, #324]	; (80025c4 <HAL_UART_MspInit+0x230>)
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002484:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <HAL_UART_MspInit+0x230>)
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800248a:	484e      	ldr	r0, [pc, #312]	; (80025c4 <HAL_UART_MspInit+0x230>)
 800248c:	f002 fa44 	bl	8004918 <HAL_DMA_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8002496:	f7fe ff93 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a49      	ldr	r2, [pc, #292]	; (80025c4 <HAL_UART_MspInit+0x230>)
 800249e:	67da      	str	r2, [r3, #124]	; 0x7c
 80024a0:	4a48      	ldr	r2, [pc, #288]	; (80025c4 <HAL_UART_MspInit+0x230>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2102      	movs	r1, #2
 80024aa:	2034      	movs	r0, #52	; 0x34
 80024ac:	f002 f9ff 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80024b0:	2034      	movs	r0, #52	; 0x34
 80024b2:	f002 fa16 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024b6:	e1de      	b.n	8002876 <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART5)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a43      	ldr	r2, [pc, #268]	; (80025cc <HAL_UART_MspInit+0x238>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	f040 808c 	bne.w	80025dc <HAL_UART_MspInit+0x248>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80024c4:	2302      	movs	r3, #2
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80024c8:	2303      	movs	r3, #3
 80024ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024d2:	4618      	mov	r0, r3
 80024d4:	f008 fd38 	bl	800af48 <HAL_RCCEx_PeriphCLKConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 80024de:	f7fe ff6f 	bl	80013c0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_UART_MspInit+0x228>)
 80024e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e8:	4a34      	ldr	r2, [pc, #208]	; (80025bc <HAL_UART_MspInit+0x228>)
 80024ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024f2:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_UART_MspInit+0x228>)
 80024f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_UART_MspInit+0x228>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	4a2d      	ldr	r2, [pc, #180]	; (80025bc <HAL_UART_MspInit+0x228>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_UART_MspInit+0x228>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800251e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002522:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002526:	2312      	movs	r3, #18
 8002528:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002538:	230e      	movs	r3, #14
 800253a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002542:	4619      	mov	r1, r3
 8002544:	4822      	ldr	r0, [pc, #136]	; (80025d0 <HAL_UART_MspInit+0x23c>)
 8002546:	f005 f83d 	bl	80075c4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream1;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_UART_MspInit+0x240>)
 800254c:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <HAL_UART_MspInit+0x244>)
 800254e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_UART_MspInit+0x240>)
 8002552:	2241      	movs	r2, #65	; 0x41
 8002554:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <HAL_UART_MspInit+0x240>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_UART_MspInit+0x240>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <HAL_UART_MspInit+0x240>)
 8002564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002568:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800256a:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_UART_MspInit+0x240>)
 800256c:	2200      	movs	r2, #0
 800256e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_UART_MspInit+0x240>)
 8002572:	2200      	movs	r2, #0
 8002574:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_UART_MspInit+0x240>)
 8002578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_UART_MspInit+0x240>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_UART_MspInit+0x240>)
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800258a:	4812      	ldr	r0, [pc, #72]	; (80025d4 <HAL_UART_MspInit+0x240>)
 800258c:	f002 f9c4 	bl	8004918 <HAL_DMA_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_UART_MspInit+0x206>
      Error_Handler();
 8002596:	f7fe ff13 	bl	80013c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <HAL_UART_MspInit+0x240>)
 800259e:	67da      	str	r2, [r3, #124]	; 0x7c
 80025a0:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_UART_MspInit+0x240>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 2, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2102      	movs	r1, #2
 80025aa:	2035      	movs	r0, #53	; 0x35
 80025ac:	f002 f97f 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80025b0:	2035      	movs	r0, #53	; 0x35
 80025b2:	f002 f996 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 80025b6:	e15e      	b.n	8002876 <HAL_UART_MspInit+0x4e2>
 80025b8:	40004c00 	.word	0x40004c00
 80025bc:	58024400 	.word	0x58024400
 80025c0:	58020000 	.word	0x58020000
 80025c4:	24000618 	.word	0x24000618
 80025c8:	40020010 	.word	0x40020010
 80025cc:	40005000 	.word	0x40005000
 80025d0:	58020400 	.word	0x58020400
 80025d4:	24000690 	.word	0x24000690
 80025d8:	40020028 	.word	0x40020028
  else if(huart->Instance==UART7)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4aa7      	ldr	r2, [pc, #668]	; (8002880 <HAL_UART_MspInit+0x4ec>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d179      	bne.n	80026da <HAL_UART_MspInit+0x346>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80025e6:	2302      	movs	r3, #2
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025f4:	4618      	mov	r0, r3
 80025f6:	f008 fca7 	bl	800af48 <HAL_RCCEx_PeriphCLKConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8002600:	f7fe fede 	bl	80013c0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002604:	4b9f      	ldr	r3, [pc, #636]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800260a:	4a9e      	ldr	r2, [pc, #632]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 800260c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002610:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002614:	4b9b      	ldr	r3, [pc, #620]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800261a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002622:	4b98      	ldr	r3, [pc, #608]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002628:	4a96      	ldr	r2, [pc, #600]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 800262a:	f043 0310 	orr.w	r3, r3, #16
 800262e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002632:	4b94      	ldr	r3, [pc, #592]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002644:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002648:	2312      	movs	r3, #18
 800264a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800265a:	2307      	movs	r3, #7
 800265c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002660:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002664:	4619      	mov	r1, r3
 8002666:	4888      	ldr	r0, [pc, #544]	; (8002888 <HAL_UART_MspInit+0x4f4>)
 8002668:	f004 ffac 	bl	80075c4 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 800266c:	4b87      	ldr	r3, [pc, #540]	; (800288c <HAL_UART_MspInit+0x4f8>)
 800266e:	4a88      	ldr	r2, [pc, #544]	; (8002890 <HAL_UART_MspInit+0x4fc>)
 8002670:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002672:	4b86      	ldr	r3, [pc, #536]	; (800288c <HAL_UART_MspInit+0x4f8>)
 8002674:	224f      	movs	r2, #79	; 0x4f
 8002676:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002678:	4b84      	ldr	r3, [pc, #528]	; (800288c <HAL_UART_MspInit+0x4f8>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800267e:	4b83      	ldr	r3, [pc, #524]	; (800288c <HAL_UART_MspInit+0x4f8>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002684:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_UART_MspInit+0x4f8>)
 8002686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800268a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800268c:	4b7f      	ldr	r3, [pc, #508]	; (800288c <HAL_UART_MspInit+0x4f8>)
 800268e:	2200      	movs	r2, #0
 8002690:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002692:	4b7e      	ldr	r3, [pc, #504]	; (800288c <HAL_UART_MspInit+0x4f8>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002698:	4b7c      	ldr	r3, [pc, #496]	; (800288c <HAL_UART_MspInit+0x4f8>)
 800269a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026a0:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_UART_MspInit+0x4f8>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026a6:	4b79      	ldr	r3, [pc, #484]	; (800288c <HAL_UART_MspInit+0x4f8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80026ac:	4877      	ldr	r0, [pc, #476]	; (800288c <HAL_UART_MspInit+0x4f8>)
 80026ae:	f002 f933 	bl	8004918 <HAL_DMA_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_UART_MspInit+0x328>
      Error_Handler();
 80026b8:	f7fe fe82 	bl	80013c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a73      	ldr	r2, [pc, #460]	; (800288c <HAL_UART_MspInit+0x4f8>)
 80026c0:	67da      	str	r2, [r3, #124]	; 0x7c
 80026c2:	4a72      	ldr	r2, [pc, #456]	; (800288c <HAL_UART_MspInit+0x4f8>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 2, 0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2102      	movs	r1, #2
 80026cc:	2052      	movs	r0, #82	; 0x52
 80026ce:	f002 f8ee 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80026d2:	2052      	movs	r0, #82	; 0x52
 80026d4:	f002 f905 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 80026d8:	e0cd      	b.n	8002876 <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6d      	ldr	r2, [pc, #436]	; (8002894 <HAL_UART_MspInit+0x500>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d178      	bne.n	80027d6 <HAL_UART_MspInit+0x442>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80026e4:	2302      	movs	r3, #2
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80026e8:	2303      	movs	r3, #3
 80026ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026f2:	4618      	mov	r0, r3
 80026f4:	f008 fc28 	bl	800af48 <HAL_RCCEx_PeriphCLKConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_UART_MspInit+0x36e>
      Error_Handler();
 80026fe:	f7fe fe5f 	bl	80013c0 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002702:	4b60      	ldr	r3, [pc, #384]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002708:	4a5e      	ldr	r2, [pc, #376]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 800270a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800270e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002712:	4b5c      	ldr	r3, [pc, #368]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002720:	4b58      	ldr	r3, [pc, #352]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002726:	4a57      	ldr	r2, [pc, #348]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002730:	4b54      	ldr	r3, [pc, #336]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002744:	2312      	movs	r3, #18
 8002746:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002756:	2308      	movs	r3, #8
 8002758:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800275c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002760:	4619      	mov	r1, r3
 8002762:	4849      	ldr	r0, [pc, #292]	; (8002888 <HAL_UART_MspInit+0x4f4>)
 8002764:	f004 ff2e 	bl	80075c4 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream3;
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_UART_MspInit+0x504>)
 800276a:	4a4c      	ldr	r2, [pc, #304]	; (800289c <HAL_UART_MspInit+0x508>)
 800276c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_UART_MspInit+0x504>)
 8002770:	2251      	movs	r2, #81	; 0x51
 8002772:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002774:	4b48      	ldr	r3, [pc, #288]	; (8002898 <HAL_UART_MspInit+0x504>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_UART_MspInit+0x504>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002780:	4b45      	ldr	r3, [pc, #276]	; (8002898 <HAL_UART_MspInit+0x504>)
 8002782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002786:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002788:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_UART_MspInit+0x504>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800278e:	4b42      	ldr	r3, [pc, #264]	; (8002898 <HAL_UART_MspInit+0x504>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002794:	4b40      	ldr	r3, [pc, #256]	; (8002898 <HAL_UART_MspInit+0x504>)
 8002796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800279a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_UART_MspInit+0x504>)
 800279e:	2200      	movs	r2, #0
 80027a0:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_UART_MspInit+0x504>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80027a8:	483b      	ldr	r0, [pc, #236]	; (8002898 <HAL_UART_MspInit+0x504>)
 80027aa:	f002 f8b5 	bl	8004918 <HAL_DMA_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_MspInit+0x424>
      Error_Handler();
 80027b4:	f7fe fe04 	bl	80013c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a37      	ldr	r2, [pc, #220]	; (8002898 <HAL_UART_MspInit+0x504>)
 80027bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80027be:	4a36      	ldr	r2, [pc, #216]	; (8002898 <HAL_UART_MspInit+0x504>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2102      	movs	r1, #2
 80027c8:	2053      	movs	r0, #83	; 0x53
 80027ca:	f002 f870 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80027ce:	2053      	movs	r0, #83	; 0x53
 80027d0:	f002 f887 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 80027d4:	e04f      	b.n	8002876 <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==USART1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a31      	ldr	r2, [pc, #196]	; (80028a0 <HAL_UART_MspInit+0x50c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d14a      	bne.n	8002876 <HAL_UART_MspInit+0x4e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027e0:	2301      	movs	r3, #1
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80027e4:	2318      	movs	r3, #24
 80027e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ee:	4618      	mov	r0, r3
 80027f0:	f008 fbaa 	bl	800af48 <HAL_RCCEx_PeriphCLKConfig>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_UART_MspInit+0x46a>
      Error_Handler();
 80027fa:	f7fe fde1 	bl	80013c0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002804:	4a1f      	ldr	r2, [pc, #124]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002806:	f043 0310 	orr.w	r3, r3, #16
 800280a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 800281e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_UART_MspInit+0x4f0>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800283a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800283e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002842:	2312      	movs	r3, #18
 8002844:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002854:	2304      	movs	r3, #4
 8002856:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800285e:	4619      	mov	r1, r3
 8002860:	4810      	ldr	r0, [pc, #64]	; (80028a4 <HAL_UART_MspInit+0x510>)
 8002862:	f004 feaf 	bl	80075c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	210f      	movs	r1, #15
 800286a:	2025      	movs	r0, #37	; 0x25
 800286c:	f002 f81f 	bl	80048ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002870:	2025      	movs	r0, #37	; 0x25
 8002872:	f002 f836 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 8002876:	bf00      	nop
 8002878:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40007800 	.word	0x40007800
 8002884:	58024400 	.word	0x58024400
 8002888:	58021000 	.word	0x58021000
 800288c:	24000708 	.word	0x24000708
 8002890:	40020040 	.word	0x40020040
 8002894:	40007c00 	.word	0x40007c00
 8002898:	24000780 	.word	0x24000780
 800289c:	40020058 	.word	0x40020058
 80028a0:	40011000 	.word	0x40011000
 80028a4:	58020400 	.word	0x58020400

080028a8 <blink>:
void schedule_400hz(void);
void schedule_20hz(void);
void schedule_10hz(void);
void fly(void);

void blink(void) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  static int blink = 0;
  if (blink == 40) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <blink+0x30>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b28      	cmp	r3, #40	; 0x28
 80028b2:	d103      	bne.n	80028bc <blink+0x14>
 80028b4:	2102      	movs	r1, #2
 80028b6:	4809      	ldr	r0, [pc, #36]	; (80028dc <blink+0x34>)
 80028b8:	f005 f865 	bl	8007986 <HAL_GPIO_TogglePin>
  if (blink >= 40) blink = 0;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <blink+0x30>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b27      	cmp	r3, #39	; 0x27
 80028c2:	dd02      	ble.n	80028ca <blink+0x22>
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <blink+0x30>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
  blink += 1;
 80028ca:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <blink+0x30>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	4a01      	ldr	r2, [pc, #4]	; (80028d8 <blink+0x30>)
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	24001860 	.word	0x24001860
 80028dc:	58020000 	.word	0x58020000

080028e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <NMI_Handler+0x4>

080028e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <MemManage_Handler+0x4>

080028f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <BusFault_Handler+0x4>

080028f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <UsageFault_Handler+0x4>

080028fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292c:	f001 fe94 	bl	8004658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <DMA1_Stream0_IRQHandler+0x10>)
 800293a:	f003 fb17 	bl	8005f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	24000618 	.word	0x24000618

08002948 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <DMA1_Stream1_IRQHandler+0x10>)
 800294e:	f003 fb0d 	bl	8005f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	24000690 	.word	0x24000690

0800295c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <DMA1_Stream2_IRQHandler+0x10>)
 8002962:	f003 fb03 	bl	8005f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	24000708 	.word	0x24000708

08002970 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <DMA1_Stream3_IRQHandler+0x10>)
 8002976:	f003 faf9 	bl	8005f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	24000780 	.word	0x24000780

08002984 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <DMA1_Stream4_IRQHandler+0x10>)
 800298a:	f003 faef 	bl	8005f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	24000108 	.word	0x24000108

08002998 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <TIM4_IRQHandler+0x10>)
 800299e:	f00a fa2d 	bl	800cdfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	240001cc 	.word	0x240001cc

080029ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <I2C1_EV_IRQHandler+0x10>)
 80029b2:	f005 fb75 	bl	80080a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	240000bc 	.word	0x240000bc

080029c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <USART1_IRQHandler+0x10>)
 80029c6:	f00b fdad 	bl	800e524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	24000588 	.word	0x24000588

080029d4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <TIM5_IRQHandler+0x10>)
 80029da:	f00a fa0f 	bl	800cdfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	24000218 	.word	0x24000218

080029e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <UART4_IRQHandler+0x10>)
 80029ee:	f00b fd99 	bl	800e524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	24000348 	.word	0x24000348

080029fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <UART5_IRQHandler+0x10>)
 8002a02:	f00b fd8f 	bl	800e524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	240003d8 	.word	0x240003d8

08002a10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  schedule_400hz();
 8002a14:	f000 fad6 	bl	8002fc4 <schedule_400hz>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <TIM6_DAC_IRQHandler+0x14>)
 8002a1a:	f00a f9ef 	bl	800cdfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	24000264 	.word	0x24000264

08002a28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  schedule_20hz();
 8002a2c:	f000 fae0 	bl	8002ff0 <schedule_20hz>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <TIM7_IRQHandler+0x14>)
 8002a32:	f00a f9e3 	bl	800cdfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	240002b0 	.word	0x240002b0

08002a40 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <UART7_IRQHandler+0x10>)
 8002a46:	f00b fd6d 	bl	800e524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	24000468 	.word	0x24000468

08002a54 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <UART8_IRQHandler+0x10>)
 8002a5a:	f00b fd63 	bl	800e524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	240004f8 	.word	0x240004f8

08002a68 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <TIM17_IRQHandler+0x10>)
 8002a6e:	f00a f9c5 	bl	800cdfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	240002fc 	.word	0x240002fc
 8002a7c:	00000000 	.word	0x00000000

08002a80 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	; 0x30
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4aaa      	ldr	r2, [pc, #680]	; (8002d38 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	f040 81cc 	bne.w	8002e2c <HAL_TIM_IC_CaptureCallback+0x3ac>
    switch (htim->Channel) {
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7f1b      	ldrb	r3, [r3, #28]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	2b07      	cmp	r3, #7
 8002a9c:	f200 80e0 	bhi.w	8002c60 <HAL_TIM_IC_CaptureCallback+0x1e0>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <HAL_TIM_IC_CaptureCallback+0x28>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002ac9 	.word	0x08002ac9
 8002aac:	08002b33 	.word	0x08002b33
 8002ab0:	08002c61 	.word	0x08002c61
 8002ab4:	08002b99 	.word	0x08002b99
 8002ab8:	08002c61 	.word	0x08002c61
 8002abc:	08002c61 	.word	0x08002c61
 8002ac0:	08002c61 	.word	0x08002c61
 8002ac4:	08002bfd 	.word	0x08002bfd
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8002ac8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002acc:	489b      	ldr	r0, [pc, #620]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002ace:	f004 ff29 	bl	8007924 <HAL_GPIO_ReadPin>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4899      	ldr	r0, [pc, #612]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002adc:	f00a fd56 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b97      	ldr	r3, [pc, #604]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002ae6:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8002ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002aec:	4893      	ldr	r0, [pc, #588]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002aee:	f004 ff19 	bl	8007924 <HAL_GPIO_ReadPin>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 80b5 	bne.w	8002c64 <HAL_TIM_IC_CaptureCallback+0x1e4>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002afa:	2100      	movs	r1, #0
 8002afc:	4890      	ldr	r0, [pc, #576]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002afe:	f00a fd45 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b8f      	ldr	r3, [pc, #572]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002b08:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 8002b0a:	4b8e      	ldr	r3, [pc, #568]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4b8d      	ldr	r3, [pc, #564]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	623b      	str	r3, [r7, #32]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2be4      	cmp	r3, #228	; 0xe4
 8002b1a:	f340 80a3 	ble.w	8002c64 <HAL_TIM_IC_CaptureCallback+0x1e4>
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	f240 2206 	movw	r2, #518	; 0x206
 8002b24:	4293      	cmp	r3, r2
 8002b26:	f300 809d 	bgt.w	8002c64 <HAL_TIM_IC_CaptureCallback+0x1e4>
            pwm_in[2] = value;
 8002b2a:	4a86      	ldr	r2, [pc, #536]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 8002b30:	e098      	b.n	8002c64 <HAL_TIM_IC_CaptureCallback+0x1e4>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8002b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b36:	4881      	ldr	r0, [pc, #516]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002b38:	f004 fef4 	bl	8007924 <HAL_GPIO_ReadPin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d107      	bne.n	8002b52 <HAL_TIM_IC_CaptureCallback+0xd2>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8002b42:	2104      	movs	r1, #4
 8002b44:	487e      	ldr	r0, [pc, #504]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002b46:	f00a fd21 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b7d      	ldr	r3, [pc, #500]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002b50:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8002b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b56:	4879      	ldr	r0, [pc, #484]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002b58:	f004 fee4 	bl	8007924 <HAL_GPIO_ReadPin>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 8082 	bne.w	8002c68 <HAL_TIM_IC_CaptureCallback+0x1e8>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8002b64:	2104      	movs	r1, #4
 8002b66:	4876      	ldr	r0, [pc, #472]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002b68:	f00a fd10 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b74      	ldr	r3, [pc, #464]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002b72:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 8002b74:	4b73      	ldr	r3, [pc, #460]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	4b72      	ldr	r3, [pc, #456]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	2be4      	cmp	r3, #228	; 0xe4
 8002b84:	dd70      	ble.n	8002c68 <HAL_TIM_IC_CaptureCallback+0x1e8>
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f240 2206 	movw	r2, #518	; 0x206
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	dc6b      	bgt.n	8002c68 <HAL_TIM_IC_CaptureCallback+0x1e8>
            pwm_in[5] = value;
 8002b90:	4a6c      	ldr	r2, [pc, #432]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 8002b96:	e067      	b.n	8002c68 <HAL_TIM_IC_CaptureCallback+0x1e8>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8002b98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b9c:	4867      	ldr	r0, [pc, #412]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002b9e:	f004 fec1 	bl	8007924 <HAL_GPIO_ReadPin>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IC_CaptureCallback+0x138>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8002ba8:	2108      	movs	r1, #8
 8002baa:	4865      	ldr	r0, [pc, #404]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002bac:	f00a fcee 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b63      	ldr	r3, [pc, #396]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002bb6:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8002bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bbc:	485f      	ldr	r0, [pc, #380]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002bbe:	f004 feb1 	bl	8007924 <HAL_GPIO_ReadPin>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d151      	bne.n	8002c6c <HAL_TIM_IC_CaptureCallback+0x1ec>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8002bc8:	2108      	movs	r1, #8
 8002bca:	485d      	ldr	r0, [pc, #372]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002bcc:	f00a fcde 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b5b      	ldr	r3, [pc, #364]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002bd6:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 8002bd8:	4b5a      	ldr	r3, [pc, #360]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	2be4      	cmp	r3, #228	; 0xe4
 8002be8:	dd40      	ble.n	8002c6c <HAL_TIM_IC_CaptureCallback+0x1ec>
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	f240 2206 	movw	r2, #518	; 0x206
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	dc3b      	bgt.n	8002c6c <HAL_TIM_IC_CaptureCallback+0x1ec>
            pwm_in[8] = value;
 8002bf4:	4a53      	ldr	r2, [pc, #332]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 8002bfa:	e037      	b.n	8002c6c <HAL_TIM_IC_CaptureCallback+0x1ec>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8002bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c00:	484e      	ldr	r0, [pc, #312]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002c02:	f004 fe8f 	bl	8007924 <HAL_GPIO_ReadPin>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IC_CaptureCallback+0x19c>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8002c0c:	210c      	movs	r1, #12
 8002c0e:	484c      	ldr	r0, [pc, #304]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002c10:	f00a fcbc 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8002c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c20:	4846      	ldr	r0, [pc, #280]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002c22:	f004 fe7f 	bl	8007924 <HAL_GPIO_ReadPin>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d121      	bne.n	8002c70 <HAL_TIM_IC_CaptureCallback+0x1f0>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8002c2c:	210c      	movs	r1, #12
 8002c2e:	4844      	ldr	r0, [pc, #272]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002c30:	f00a fcac 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b42      	ldr	r3, [pc, #264]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 8002c3c:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c40:	4b40      	ldr	r3, [pc, #256]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	2be4      	cmp	r3, #228	; 0xe4
 8002c4c:	dd10      	ble.n	8002c70 <HAL_TIM_IC_CaptureCallback+0x1f0>
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	f240 2206 	movw	r2, #518	; 0x206
 8002c54:	4293      	cmp	r3, r2
 8002c56:	dc0b      	bgt.n	8002c70 <HAL_TIM_IC_CaptureCallback+0x1f0>
            pwm_in[11] = value;
 8002c58:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 8002c5e:	e007      	b.n	8002c70 <HAL_TIM_IC_CaptureCallback+0x1f0>
      default:
        break;
 8002c60:	bf00      	nop
 8002c62:	e006      	b.n	8002c72 <HAL_TIM_IC_CaptureCallback+0x1f2>
        break;
 8002c64:	bf00      	nop
 8002c66:	e004      	b.n	8002c72 <HAL_TIM_IC_CaptureCallback+0x1f2>
        break;
 8002c68:	bf00      	nop
 8002c6a:	e002      	b.n	8002c72 <HAL_TIM_IC_CaptureCallback+0x1f2>
        break;
 8002c6c:	bf00      	nop
 8002c6e:	e000      	b.n	8002c72 <HAL_TIM_IC_CaptureCallback+0x1f2>
        break;
 8002c70:	bf00      	nop
    }

    float throttle = average_filter_update(&g_af[0], pwm_in[2] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c82:	eeb0 0a67 	vmov.f32	s0, s15
 8002c86:	4830      	ldr	r0, [pc, #192]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8002c88:	f7fd fd3b 	bl	8000702 <average_filter_update>
 8002c8c:	ed87 0a07 	vstr	s0, [r7, #28]
    float yaw = average_filter_update(&g_af[1], pwm_in[5] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca4:	4829      	ldr	r0, [pc, #164]	; (8002d4c <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8002ca6:	f7fd fd2c 	bl	8000702 <average_filter_update>
 8002caa:	ed87 0a06 	vstr	s0, [r7, #24]
    float pitch = average_filter_update(&g_af[2], pwm_in[11] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8002cae:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc2:	4823      	ldr	r0, [pc, #140]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8002cc4:	f7fd fd1d 	bl	8000702 <average_filter_update>
 8002cc8:	ed87 0a05 	vstr	s0, [r7, #20]
    float roll = average_filter_update(&g_af[3], pwm_in[8] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce0:	481c      	ldr	r0, [pc, #112]	; (8002d54 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8002ce2:	f7fd fd0e 	bl	8000702 <average_filter_update>
 8002ce6:	ed87 0a04 	vstr	s0, [r7, #16]
    if (abs(throttle) > 5) g_throttle = LIMIT(g_throttle + 0.01*throttle, MIN_THROTTLE, MAX_THROTTLE);
 8002cea:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf2:	ee17 3a90 	vmov	r3, s15
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bfb8      	it	lt
 8002cfa:	425b      	neglt	r3, r3
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	dd5c      	ble.n	8002dba <HAL_TIM_IC_CaptureCallback+0x33a>
 8002d00:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002d0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d12:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002d30 <HAL_TIM_IC_CaptureCallback+0x2b0>
 8002d16:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002d1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d26:	d51b      	bpl.n	8002d60 <HAL_TIM_IC_CaptureCallback+0x2e0>
 8002d28:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002d5c <HAL_TIM_IC_CaptureCallback+0x2dc>
 8002d2c:	e042      	b.n	8002db4 <HAL_TIM_IC_CaptureCallback+0x334>
 8002d2e:	bf00      	nop
 8002d30:	47ae147b 	.word	0x47ae147b
 8002d34:	3f847ae1 	.word	0x3f847ae1
 8002d38:	40000800 	.word	0x40000800
 8002d3c:	58020c00 	.word	0x58020c00
 8002d40:	240001cc 	.word	0x240001cc
 8002d44:	24000844 	.word	0x24000844
 8002d48:	24000984 	.word	0x24000984
 8002d4c:	24000b20 	.word	0x24000b20
 8002d50:	24000cbc 	.word	0x24000cbc
 8002d54:	24000e58 	.word	0x24000e58
 8002d58:	240008bc 	.word	0x240008bc
 8002d5c:	00000000 	.word	0x00000000
 8002d60:	4b89      	ldr	r3, [pc, #548]	; (8002f88 <HAL_TIM_IC_CaptureCallback+0x508>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002d6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d72:	ed9f 5b81 	vldr	d5, [pc, #516]	; 8002f78 <HAL_TIM_IC_CaptureCallback+0x4f8>
 8002d76:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002d7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d7e:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8002f80 <HAL_TIM_IC_CaptureCallback+0x500>
 8002d82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	dd02      	ble.n	8002d92 <HAL_TIM_IC_CaptureCallback+0x312>
 8002d8c:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8002f8c <HAL_TIM_IC_CaptureCallback+0x50c>
 8002d90:	e010      	b.n	8002db4 <HAL_TIM_IC_CaptureCallback+0x334>
 8002d92:	4b7d      	ldr	r3, [pc, #500]	; (8002f88 <HAL_TIM_IC_CaptureCallback+0x508>)
 8002d94:	edd3 7a00 	vldr	s15, [r3]
 8002d98:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002d9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002da4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8002f78 <HAL_TIM_IC_CaptureCallback+0x4f8>
 8002da8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002dac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002db0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002db4:	4b74      	ldr	r3, [pc, #464]	; (8002f88 <HAL_TIM_IC_CaptureCallback+0x508>)
 8002db6:	edc3 7a00 	vstr	s15, [r3]
    if (abs(g_yaw - yaw) > 1) g_yaw = yaw;
 8002dba:	4b75      	ldr	r3, [pc, #468]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0x510>)
 8002dbc:	ed93 7a00 	vldr	s14, [r3]
 8002dc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dcc:	ee17 3a90 	vmov	r3, s15
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bfb8      	it	lt
 8002dd4:	425b      	neglt	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	dd02      	ble.n	8002de0 <HAL_TIM_IC_CaptureCallback+0x360>
 8002dda:	4a6d      	ldr	r2, [pc, #436]	; (8002f90 <HAL_TIM_IC_CaptureCallback+0x510>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6013      	str	r3, [r2, #0]
    if (abs(g_pitch - pitch) > 1) g_pitch = pitch;
 8002de0:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <HAL_TIM_IC_CaptureCallback+0x514>)
 8002de2:	ed93 7a00 	vldr	s14, [r3]
 8002de6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df2:	ee17 3a90 	vmov	r3, s15
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bfb8      	it	lt
 8002dfa:	425b      	neglt	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	dd02      	ble.n	8002e06 <HAL_TIM_IC_CaptureCallback+0x386>
 8002e00:	4a64      	ldr	r2, [pc, #400]	; (8002f94 <HAL_TIM_IC_CaptureCallback+0x514>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	6013      	str	r3, [r2, #0]
    if (abs(g_roll - roll) > 1) g_roll = roll;
 8002e06:	4b64      	ldr	r3, [pc, #400]	; (8002f98 <HAL_TIM_IC_CaptureCallback+0x518>)
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e18:	ee17 3a90 	vmov	r3, s15
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bfb8      	it	lt
 8002e20:	425b      	neglt	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	dd02      	ble.n	8002e2c <HAL_TIM_IC_CaptureCallback+0x3ac>
 8002e26:	4a5c      	ldr	r2, [pc, #368]	; (8002f98 <HAL_TIM_IC_CaptureCallback+0x518>)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	6013      	str	r3, [r2, #0]
  }

  if (htim->Instance == TIM5) {
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a5a      	ldr	r2, [pc, #360]	; (8002f9c <HAL_TIM_IC_CaptureCallback+0x51c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d142      	bne.n	8002ebc <HAL_TIM_IC_CaptureCallback+0x43c>
    switch (htim->Channel) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7f1b      	ldrb	r3, [r3, #28]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d12f      	bne.n	8002e9e <HAL_TIM_IC_CaptureCallback+0x41e>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4857      	ldr	r0, [pc, #348]	; (8002fa0 <HAL_TIM_IC_CaptureCallback+0x520>)
 8002e42:	f004 fd6f 	bl	8007924 <HAL_GPIO_ReadPin>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d107      	bne.n	8002e5c <HAL_TIM_IC_CaptureCallback+0x3dc>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4855      	ldr	r0, [pc, #340]	; (8002fa4 <HAL_TIM_IC_CaptureCallback+0x524>)
 8002e50:	f00a fb9c 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4850      	ldr	r0, [pc, #320]	; (8002fa0 <HAL_TIM_IC_CaptureCallback+0x520>)
 8002e60:	f004 fd60 	bl	8007924 <HAL_GPIO_ReadPin>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11b      	bne.n	8002ea2 <HAL_TIM_IC_CaptureCallback+0x422>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	484d      	ldr	r0, [pc, #308]	; (8002fa4 <HAL_TIM_IC_CaptureCallback+0x524>)
 8002e6e:	f00a fb8d 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 8002e7a:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7e:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	60fb      	str	r3, [r7, #12]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2be4      	cmp	r3, #228	; 0xe4
 8002e8a:	dd0a      	ble.n	8002ea2 <HAL_TIM_IC_CaptureCallback+0x422>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f240 2206 	movw	r2, #518	; 0x206
 8002e92:	4293      	cmp	r3, r2
 8002e94:	dc05      	bgt.n	8002ea2 <HAL_TIM_IC_CaptureCallback+0x422>
            pwm_in[14] = value;
 8002e96:	4a44      	ldr	r2, [pc, #272]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6393      	str	r3, [r2, #56]	; 0x38
          }
        }
        break;
 8002e9c:	e001      	b.n	8002ea2 <HAL_TIM_IC_CaptureCallback+0x422>
      default:
        break;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <HAL_TIM_IC_CaptureCallback+0x424>
        break;
 8002ea2:	bf00      	nop
    }

    g_stick1 = pwm_in[14] > MIN_PWN_IN_CAP + 0.5*RANGE_PWM_IN_CAP ? 1 : 0;
 8002ea4:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8002eac:	db02      	blt.n	8002eb4 <HAL_TIM_IC_CaptureCallback+0x434>
 8002eae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002eb2:	e001      	b.n	8002eb8 <HAL_TIM_IC_CaptureCallback+0x438>
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	4a3c      	ldr	r2, [pc, #240]	; (8002fac <HAL_TIM_IC_CaptureCallback+0x52c>)
 8002eba:	6013      	str	r3, [r2, #0]
  }

  static char measuring = 0;
  if (measuring == 0) {
 8002ebc:	4b3c      	ldr	r3, [pc, #240]	; (8002fb0 <HAL_TIM_IC_CaptureCallback+0x530>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10e      	bne.n	8002ee2 <HAL_TIM_IC_CaptureCallback+0x462>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eca:	483a      	ldr	r0, [pc, #232]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0x534>)
 8002ecc:	f004 fd42 	bl	8007954 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ed6:	4837      	ldr	r0, [pc, #220]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0x534>)
 8002ed8:	f004 fd3c 	bl	8007954 <HAL_GPIO_WritePin>
    measuring = 1;
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_TIM_IC_CaptureCallback+0x530>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
  }

  if (measuring == 1 && htim->Instance == TIM17) {
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <HAL_TIM_IC_CaptureCallback+0x530>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d141      	bne.n	8002f6e <HAL_TIM_IC_CaptureCallback+0x4ee>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a32      	ldr	r2, [pc, #200]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0x538>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d13c      	bne.n	8002f6e <HAL_TIM_IC_CaptureCallback+0x4ee>
    switch (htim->Channel) {
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7f1b      	ldrb	r3, [r3, #28]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d12c      	bne.n	8002f56 <HAL_TIM_IC_CaptureCallback+0x4d6>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) {
 8002efc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f00:	482c      	ldr	r0, [pc, #176]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0x534>)
 8002f02:	f004 fd0f 	bl	8007924 <HAL_GPIO_ReadPin>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IC_CaptureCallback+0x49c>
          pwm_in[15] = HAL_TIM_ReadCapturedValue(&htim17, TIM_CHANNEL_1);
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	482b      	ldr	r0, [pc, #172]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0x53c>)
 8002f10:	f00a fb3c 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002f1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_SET) {
 8002f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f20:	4824      	ldr	r0, [pc, #144]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0x534>)
 8002f22:	f004 fcff 	bl	8007924 <HAL_GPIO_ReadPin>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d116      	bne.n	8002f5a <HAL_TIM_IC_CaptureCallback+0x4da>
          pwm_in[16] = HAL_TIM_ReadCapturedValue(&htim17, TIM_CHANNEL_1);
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4823      	ldr	r0, [pc, #140]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0x53c>)
 8002f30:	f00a fb2c 	bl	800d58c <HAL_TIM_ReadCapturedValue>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
          int value = pwm_in[16] - pwm_in[15];
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	60bb      	str	r3, [r7, #8]
          pwm_in[17] = value;
 8002f48:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
          measuring = 0;
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_TIM_IC_CaptureCallback+0x530>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002f54:	e001      	b.n	8002f5a <HAL_TIM_IC_CaptureCallback+0x4da>
      default:
        break;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <HAL_TIM_IC_CaptureCallback+0x4dc>
        break;
 8002f5a:	bf00      	nop
    }

    g_height = pwm_in[17];
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x528>)
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_TIM_IC_CaptureCallback+0x540>)
 8002f6a:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8002f6e:	bf00      	nop
 8002f70:	3730      	adds	r7, #48	; 0x30
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	47ae147b 	.word	0x47ae147b
 8002f7c:	3f847ae1 	.word	0x3f847ae1
 8002f80:	00000000 	.word	0x00000000
 8002f84:	406f2000 	.word	0x406f2000
 8002f88:	240008bc 	.word	0x240008bc
 8002f8c:	43790000 	.word	0x43790000
 8002f90:	240008c8 	.word	0x240008c8
 8002f94:	240008c0 	.word	0x240008c0
 8002f98:	240008c4 	.word	0x240008c4
 8002f9c:	40000c00 	.word	0x40000c00
 8002fa0:	58020000 	.word	0x58020000
 8002fa4:	24000218 	.word	0x24000218
 8002fa8:	24000844 	.word	0x24000844
 8002fac:	240008cc 	.word	0x240008cc
 8002fb0:	24001864 	.word	0x24001864
 8002fb4:	58020400 	.word	0x58020400
 8002fb8:	40014800 	.word	0x40014800
 8002fbc:	240002fc 	.word	0x240002fc
 8002fc0:	240008e8 	.word	0x240008e8

08002fc4 <schedule_400hz>:

void schedule_400hz(void) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 8002fc8:	4803      	ldr	r0, [pc, #12]	; (8002fd8 <schedule_400hz+0x14>)
 8002fca:	f7fe fe95 	bl	8001cf8 <MPU6050_update>
//  MS5611_update(&g_ms5611);
  fly();
 8002fce:	f000 f97f 	bl	80032d0 <fly>
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2400172c 	.word	0x2400172c

08002fdc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <schedule_20hz>:

void schedule_20hz(void) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af00      	add	r7, sp, #0
  static char line[16];
  static int starts[4] = {-1, -1, -1, -1};

  for (int t = 0; t < 4; t += 1) {
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffa:	e10d      	b.n	8003218 <schedule_20hz+0x228>
    int start = starts[t];
 8002ffc:	4a92      	ldr	r2, [pc, #584]	; (8003248 <schedule_20hz+0x258>)
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003004:	623b      	str	r3, [r7, #32]
    int end = -1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800300a:	61fb      	str	r3, [r7, #28]
    uint8_t *p;
    switch (t) {
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	2b03      	cmp	r3, #3
 8003010:	d816      	bhi.n	8003040 <schedule_20hz+0x50>
 8003012:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <schedule_20hz+0x28>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	08003029 	.word	0x08003029
 800301c:	0800302f 	.word	0x0800302f
 8003020:	08003035 	.word	0x08003035
 8003024:	0800303b 	.word	0x0800303b
    case 0: p = g_uart_rx_buffer1; break;
 8003028:	4b88      	ldr	r3, [pc, #544]	; (800324c <schedule_20hz+0x25c>)
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	e008      	b.n	8003040 <schedule_20hz+0x50>
    case 1: p = g_uart_rx_buffer2; break;
 800302e:	4b88      	ldr	r3, [pc, #544]	; (8003250 <schedule_20hz+0x260>)
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e005      	b.n	8003040 <schedule_20hz+0x50>
    case 2: p = g_uart_rx_buffer3; break;
 8003034:	4b87      	ldr	r3, [pc, #540]	; (8003254 <schedule_20hz+0x264>)
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	e002      	b.n	8003040 <schedule_20hz+0x50>
    case 3: p = g_uart_rx_buffer4; break;
 800303a:	4b87      	ldr	r3, [pc, #540]	; (8003258 <schedule_20hz+0x268>)
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	bf00      	nop
    }

    if (start == -1) {
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003046:	d111      	bne.n	800306c <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	e00b      	b.n	8003066 <schedule_20hz+0x76>
        if (p[i] == '$') {
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b24      	cmp	r3, #36	; 0x24
 8003058:	d102      	bne.n	8003060 <schedule_20hz+0x70>
          start = i;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	623b      	str	r3, [r7, #32]
          break;
 800305e:	e005      	b.n	800306c <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3301      	adds	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2bff      	cmp	r3, #255	; 0xff
 800306a:	ddf0      	ble.n	800304e <schedule_20hz+0x5e>
        }
      }
    }

    if (start > -1) {
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db2b      	blt.n	80030ca <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e025      	b.n	80030c4 <schedule_20hz+0xd4>
        if (p[(start+i)%UART_BUF_SIZE] == 0) {
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	425a      	negs	r2, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	bf58      	it	pl
 8003086:	4253      	negpl	r3, r2
 8003088:	461a      	mov	r2, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4413      	add	r3, r2
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d103      	bne.n	800309c <schedule_20hz+0xac>
          start = -1;
 8003094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003098:	623b      	str	r3, [r7, #32]
          break;
 800309a:	e016      	b.n	80030ca <schedule_20hz+0xda>
        }

        if (p[(start+i)%UART_BUF_SIZE] == '\n') {
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	425a      	negs	r2, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	bf58      	it	pl
 80030aa:	4253      	negpl	r3, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4413      	add	r3, r2
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b0a      	cmp	r3, #10
 80030b6:	d102      	bne.n	80030be <schedule_20hz+0xce>
          end = i;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	61fb      	str	r3, [r7, #28]
          break;
 80030bc:	e005      	b.n	80030ca <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3301      	adds	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2bff      	cmp	r3, #255	; 0xff
 80030c8:	ddd6      	ble.n	8003078 <schedule_20hz+0x88>
        }
      }
    }

    if (start > -1 && end > -1) {
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f2c0 809f 	blt.w	8003210 <schedule_20hz+0x220>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f2c0 809b 	blt.w	8003210 <schedule_20hz+0x220>
      memset(line, 0, 16);
 80030da:	2210      	movs	r2, #16
 80030dc:	2100      	movs	r1, #0
 80030de:	485f      	ldr	r0, [pc, #380]	; (800325c <schedule_20hz+0x26c>)
 80030e0:	f00d fa84 	bl	80105ec <memset>

      if (start < end) {
 80030e4:	6a3a      	ldr	r2, [r7, #32]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	da14      	bge.n	8003116 <schedule_20hz+0x126>
        memcpy(line, &p[start], end - start);
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	18d1      	adds	r1, r2, r3
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	4858      	ldr	r0, [pc, #352]	; (800325c <schedule_20hz+0x26c>)
 80030fc:	f00d fa68 	bl	80105d0 <memcpy>
        memset(&p[start], 0, end - start);
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	18d0      	adds	r0, r2, r3
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	461a      	mov	r2, r3
 800310e:	2100      	movs	r1, #0
 8003110:	f00d fa6c 	bl	80105ec <memset>
 8003114:	e027      	b.n	8003166 <schedule_20hz+0x176>
      }
      else if (start > end) {
 8003116:	6a3a      	ldr	r2, [r7, #32]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	429a      	cmp	r2, r3
 800311c:	dd23      	ble.n	8003166 <schedule_20hz+0x176>
        memcpy(line, &p[start], UART_BUF_SIZE - start);
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	18d1      	adds	r1, r2, r3
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800312a:	461a      	mov	r2, r3
 800312c:	484b      	ldr	r0, [pc, #300]	; (800325c <schedule_20hz+0x26c>)
 800312e:	f00d fa4f 	bl	80105d0 <memcpy>
        memset(&p[start], 0, UART_BUF_SIZE - start);
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	18d0      	adds	r0, r2, r3
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800313e:	461a      	mov	r2, r3
 8003140:	2100      	movs	r1, #0
 8003142:	f00d fa53 	bl	80105ec <memset>
        memcpy(&line[UART_BUF_SIZE - start], p, end);
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800314c:	4a43      	ldr	r2, [pc, #268]	; (800325c <schedule_20hz+0x26c>)
 800314e:	4413      	add	r3, r2
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	4618      	mov	r0, r3
 8003156:	f00d fa3b 	bl	80105d0 <memcpy>
        memset(p, 0, end);
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	461a      	mov	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	69b8      	ldr	r0, [r7, #24]
 8003162:	f00d fa43 	bl	80105ec <memset>
      }

      starts[t] = -1;
 8003166:	4a38      	ldr	r2, [pc, #224]	; (8003248 <schedule_20hz+0x258>)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800316e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      int idx = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
      for (idx = 0; idx < 16; idx += 1) {
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e008      	b.n	800318e <schedule_20hz+0x19e>
        if (line[idx] == ',') {
 800317c:	4a37      	ldr	r2, [pc, #220]	; (800325c <schedule_20hz+0x26c>)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b2c      	cmp	r3, #44	; 0x2c
 8003186:	d006      	beq.n	8003196 <schedule_20hz+0x1a6>
      for (idx = 0; idx < 16; idx += 1) {
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3301      	adds	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	ddf3      	ble.n	800317c <schedule_20hz+0x18c>
 8003194:	e000      	b.n	8003198 <schedule_20hz+0x1a8>
          break;
 8003196:	bf00      	nop
        }
      }
      line[idx] = 0;
 8003198:	4a30      	ldr	r2, [pc, #192]	; (800325c <schedule_20hz+0x26c>)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
      int dy = atoi(&line[1]);
 80031a2:	482f      	ldr	r0, [pc, #188]	; (8003260 <schedule_20hz+0x270>)
 80031a4:	f00d f9e6 	bl	8010574 <atoi>
 80031a8:	60b8      	str	r0, [r7, #8]
      int dx = atoi(&line[idx+1]);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3301      	adds	r3, #1
 80031ae:	4a2b      	ldr	r2, [pc, #172]	; (800325c <schedule_20hz+0x26c>)
 80031b0:	4413      	add	r3, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f00d f9de 	bl	8010574 <atoi>
 80031b8:	6078      	str	r0, [r7, #4]
      switch (t) {
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d828      	bhi.n	8003212 <schedule_20hz+0x222>
 80031c0:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <schedule_20hz+0x1d8>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031d9 	.word	0x080031d9
 80031cc:	080031e7 	.word	0x080031e7
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	08003203 	.word	0x08003203
      case 0: drift.left = dx;drift.vert1 = dy; break;
 80031d8:	4a22      	ldr	r2, [pc, #136]	; (8003264 <schedule_20hz+0x274>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	4a21      	ldr	r2, [pc, #132]	; (8003264 <schedule_20hz+0x274>)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	6113      	str	r3, [r2, #16]
 80031e4:	e015      	b.n	8003212 <schedule_20hz+0x222>
      case 1: drift.back = dx;drift.vert2 = dy; break;
 80031e6:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <schedule_20hz+0x274>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6053      	str	r3, [r2, #4]
 80031ec:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <schedule_20hz+0x274>)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6153      	str	r3, [r2, #20]
 80031f2:	e00e      	b.n	8003212 <schedule_20hz+0x222>
      case 2: drift.right = dx;drift.vert3 = dy; break;
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <schedule_20hz+0x274>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60d3      	str	r3, [r2, #12]
 80031fa:	4a1a      	ldr	r2, [pc, #104]	; (8003264 <schedule_20hz+0x274>)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6193      	str	r3, [r2, #24]
 8003200:	e007      	b.n	8003212 <schedule_20hz+0x222>
      case 3: drift.front = dx;drift.vert4 = dy; break;
 8003202:	4a18      	ldr	r2, [pc, #96]	; (8003264 <schedule_20hz+0x274>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4a16      	ldr	r2, [pc, #88]	; (8003264 <schedule_20hz+0x274>)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	61d3      	str	r3, [r2, #28]
 800320e:	e000      	b.n	8003212 <schedule_20hz+0x222>
      }
    }
 8003210:	bf00      	nop
  for (int t = 0; t < 4; t += 1) {
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	3301      	adds	r3, #1
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	2b03      	cmp	r3, #3
 800321c:	f77f aeee 	ble.w	8002ffc <schedule_20hz+0xc>
  }

  static char run_10hz = 1;
  if (run_10hz) schedule_10hz();
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <schedule_20hz+0x278>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <schedule_20hz+0x23c>
 8003228:	f000 f820 	bl	800326c <schedule_10hz>
  run_10hz = !run_10hz;
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <schedule_20hz+0x278>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <schedule_20hz+0x278>)
 800323e:	701a      	strb	r2, [r3, #0]
}
 8003240:	bf00      	nop
 8003242:	3728      	adds	r7, #40	; 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	24000018 	.word	0x24000018
 800324c:	2400132c 	.word	0x2400132c
 8003250:	2400142c 	.word	0x2400142c
 8003254:	2400152c 	.word	0x2400152c
 8003258:	2400162c 	.word	0x2400162c
 800325c:	24001868 	.word	0x24001868
 8003260:	24001869 	.word	0x24001869
 8003264:	240008ec 	.word	0x240008ec
 8003268:	24000028 	.word	0x24000028

0800326c <schedule_10hz>:

void schedule_10hz(void) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af02      	add	r7, sp, #8
      (int)(g_height));
  console(monitor);
#endif // Pressure

#if MONITOR == 8
  memset(monitor, 0, 64);
 8003272:	2240      	movs	r2, #64	; 0x40
 8003274:	2100      	movs	r1, #0
 8003276:	4811      	ldr	r0, [pc, #68]	; (80032bc <schedule_10hz+0x50>)
 8003278:	f00d f9b8 	bl	80105ec <memset>
  sprintf(monitor, "$%d,%d,%d\n",
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <schedule_10hz+0x54>)
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <schedule_10hz+0x58>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8003290:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <schedule_10hz+0x5c>)
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800329a:	ee17 3a90 	vmov	r3, s15
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	ee16 3a90 	vmov	r3, s13
 80032a4:	ee17 2a10 	vmov	r2, s14
 80032a8:	4908      	ldr	r1, [pc, #32]	; (80032cc <schedule_10hz+0x60>)
 80032aa:	4804      	ldr	r0, [pc, #16]	; (80032bc <schedule_10hz+0x50>)
 80032ac:	f00d f9a6 	bl	80105fc <siprintf>
      (int)g_angle_error_x, (int)g_angle_error_y, (int)g_angle_error_z);
  console(monitor);
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <schedule_10hz+0x50>)
 80032b2:	f000 fff7 	bl	80042a4 <console>
#endif // 6 axis
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	2400090c 	.word	0x2400090c
 80032c0:	240007f8 	.word	0x240007f8
 80032c4:	240007fc 	.word	0x240007fc
 80032c8:	24000800 	.word	0x24000800
 80032cc:	080124a0 	.word	0x080124a0

080032d0 <fly>:

void fly() {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
  float angle_x = g_mpu6050.angle_x;
 80032d6:	4bb2      	ldr	r3, [pc, #712]	; (80035a0 <fly+0x2d0>)
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	61fb      	str	r3, [r7, #28]
  float angle_y = g_mpu6050.angle_y;
 80032dc:	4bb0      	ldr	r3, [pc, #704]	; (80035a0 <fly+0x2d0>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	61bb      	str	r3, [r7, #24]
  float angle_z = g_mpu6050.angle_z;
 80032e2:	4baf      	ldr	r3, [pc, #700]	; (80035a0 <fly+0x2d0>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	617b      	str	r3, [r7, #20]
  float gyro_x = g_mpu6050.gyro_x;
 80032e8:	4bad      	ldr	r3, [pc, #692]	; (80035a0 <fly+0x2d0>)
 80032ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ec:	613b      	str	r3, [r7, #16]
  float gyro_y = g_mpu6050.gyro_y;
 80032ee:	4bac      	ldr	r3, [pc, #688]	; (80035a0 <fly+0x2d0>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	60fb      	str	r3, [r7, #12]
  float gyro_z = g_mpu6050.gyro_z;
 80032f4:	4baa      	ldr	r3, [pc, #680]	; (80035a0 <fly+0x2d0>)
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	60bb      	str	r3, [r7, #8]
  float g_drift_pitch = 0;
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  float g_drift_roll = 0;
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	623b      	str	r3, [r7, #32]

  // Add remote control bias
  g_angle_error_y = angle_y - 0.4*g_pitch; // Max 50 degree
 8003306:	edd7 7a06 	vldr	s15, [r7, #24]
 800330a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800330e:	4ba5      	ldr	r3, [pc, #660]	; (80035a4 <fly+0x2d4>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003318:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8003580 <fly+0x2b0>
 800331c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003320:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003324:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003328:	4b9f      	ldr	r3, [pc, #636]	; (80035a8 <fly+0x2d8>)
 800332a:	edc3 7a00 	vstr	s15, [r3]
  g_angle_error_x = angle_x - 0.4*g_roll; // Max 50 degree
 800332e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003332:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003336:	4b9d      	ldr	r3, [pc, #628]	; (80035ac <fly+0x2dc>)
 8003338:	edd3 7a00 	vldr	s15, [r3]
 800333c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003340:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 8003580 <fly+0x2b0>
 8003344:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003348:	ee36 7b47 	vsub.f64	d7, d6, d7
 800334c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003350:	4b97      	ldr	r3, [pc, #604]	; (80035b0 <fly+0x2e0>)
 8003352:	edc3 7a00 	vstr	s15, [r3]
  g_angle_error_z = angle_z;
 8003356:	4a97      	ldr	r2, [pc, #604]	; (80035b4 <fly+0x2e4>)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	6013      	str	r3, [r2, #0]
  if (abs(g_yaw) > 5) {
 800335c:	4b96      	ldr	r3, [pc, #600]	; (80035b8 <fly+0x2e8>)
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003366:	ee17 3a90 	vmov	r3, s15
 800336a:	2b00      	cmp	r3, #0
 800336c:	bfb8      	it	lt
 800336e:	425b      	neglt	r3, r3
 8003370:	2b05      	cmp	r3, #5
 8003372:	dd38      	ble.n	80033e6 <fly+0x116>
    float imbalance_coef = g_yaw > 0 ? 2.0 : 2.0;
 8003374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003378:	607b      	str	r3, [r7, #4]
    g_angle_error_z = LIMIT(-imbalance_coef*g_yaw, -90, 90);
 800337a:	edd7 7a01 	vldr	s15, [r7, #4]
 800337e:	eeb1 7a67 	vneg.f32	s14, s15
 8003382:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <fly+0x2e8>)
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80035bc <fly+0x2ec>
 8003390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d502      	bpl.n	80033a0 <fly+0xd0>
 800339a:	eddf 7a88 	vldr	s15, [pc, #544]	; 80035bc <fly+0x2ec>
 800339e:	e01b      	b.n	80033d8 <fly+0x108>
 80033a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a4:	eeb1 7a67 	vneg.f32	s14, s15
 80033a8:	4b83      	ldr	r3, [pc, #524]	; (80035b8 <fly+0x2e8>)
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b2:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80035c0 <fly+0x2f0>
 80033b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	dd02      	ble.n	80033c6 <fly+0xf6>
 80033c0:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80035c0 <fly+0x2f0>
 80033c4:	e008      	b.n	80033d8 <fly+0x108>
 80033c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ca:	eeb1 7a67 	vneg.f32	s14, s15
 80033ce:	4b7a      	ldr	r3, [pc, #488]	; (80035b8 <fly+0x2e8>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d8:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <fly+0x2e4>)
 80033da:	edc3 7a00 	vstr	s15, [r3]
    g_mpu6050.angle_z = 0;
 80033de:	4b70      	ldr	r3, [pc, #448]	; (80035a0 <fly+0x2d0>)
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if (abs(g_pitch) < 5) {
 80033e6:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <fly+0x2d4>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f0:	ee17 3a90 	vmov	r3, s15
 80033f4:	f113 0f04 	cmn.w	r3, #4
 80033f8:	db47      	blt.n	800348a <fly+0x1ba>
 80033fa:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <fly+0x2d4>)
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003404:	ee17 3a90 	vmov	r3, s15
 8003408:	2b04      	cmp	r3, #4
 800340a:	dc3e      	bgt.n	800348a <fly+0x1ba>
    g_drift_pitch = LIMIT(0.0*(drift.right - drift.left), -50, 50);
 800340c:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <fly+0x2f4>)
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <fly+0x2f4>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800341e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8003588 <fly+0x2b8>
 8003422:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003426:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8003590 <fly+0x2c0>
 800342a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	d502      	bpl.n	800343a <fly+0x16a>
 8003434:	eddf 7a64 	vldr	s15, [pc, #400]	; 80035c8 <fly+0x2f8>
 8003438:	e025      	b.n	8003486 <fly+0x1b6>
 800343a:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <fly+0x2f4>)
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <fly+0x2f4>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800344c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8003588 <fly+0x2b8>
 8003450:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003454:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8003598 <fly+0x2c8>
 8003458:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800345c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003460:	dd02      	ble.n	8003468 <fly+0x198>
 8003462:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80035cc <fly+0x2fc>
 8003466:	e00e      	b.n	8003486 <fly+0x1b6>
 8003468:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <fly+0x2f4>)
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <fly+0x2f4>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800347a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8003588 <fly+0x2b8>
 800347e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003482:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003486:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  }
  if (abs(g_roll) < 5) {
 800348a:	4b48      	ldr	r3, [pc, #288]	; (80035ac <fly+0x2dc>)
 800348c:	edd3 7a00 	vldr	s15, [r3]
 8003490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003494:	ee17 3a90 	vmov	r3, s15
 8003498:	f113 0f04 	cmn.w	r3, #4
 800349c:	db47      	blt.n	800352e <fly+0x25e>
 800349e:	4b43      	ldr	r3, [pc, #268]	; (80035ac <fly+0x2dc>)
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a8:	ee17 3a90 	vmov	r3, s15
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	dc3e      	bgt.n	800352e <fly+0x25e>
    g_drift_roll = LIMIT(0.0*(drift.back - drift.front), -50, 50);
 80034b0:	4b44      	ldr	r3, [pc, #272]	; (80035c4 <fly+0x2f4>)
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <fly+0x2f4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034c2:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003588 <fly+0x2b8>
 80034c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034ca:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003590 <fly+0x2c0>
 80034ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	d502      	bpl.n	80034de <fly+0x20e>
 80034d8:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80035c8 <fly+0x2f8>
 80034dc:	e025      	b.n	800352a <fly+0x25a>
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <fly+0x2f4>)
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <fly+0x2f4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034f0:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003588 <fly+0x2b8>
 80034f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034f8:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8003598 <fly+0x2c8>
 80034fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	dd02      	ble.n	800350c <fly+0x23c>
 8003506:	eddf 7a31 	vldr	s15, [pc, #196]	; 80035cc <fly+0x2fc>
 800350a:	e00e      	b.n	800352a <fly+0x25a>
 800350c:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <fly+0x2f4>)
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <fly+0x2f4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800351e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8003588 <fly+0x2b8>
 8003522:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003526:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800352a:	edc7 7a08 	vstr	s15, [r7, #32]
  }

  // Keep alive for the fly
  static int stop_counter = 0;
  if (g_stick1 == 0) {
 800352e:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <fly+0x300>)
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353c:	d10b      	bne.n	8003556 <fly+0x286>
    if (stop_counter >= 20) {
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <fly+0x304>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b13      	cmp	r3, #19
 8003544:	dd02      	ble.n	800354c <fly+0x27c>
      fly_mode = init;
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <fly+0x308>)
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
    }

    stop_counter += 1;
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <fly+0x304>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <fly+0x304>)
 8003554:	6013      	str	r3, [r2, #0]
  }

  switch (fly_mode) {
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <fly+0x308>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b05      	cmp	r3, #5
 800355c:	f200 867c 	bhi.w	8004258 <fly+0xf88>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <fly+0x298>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	080035dd 	.word	0x080035dd
 800356c:	080036bb 	.word	0x080036bb
 8003570:	08004257 	.word	0x08004257
 8003574:	08003709 	.word	0x08003709
 8003578:	08004257 	.word	0x08004257
 800357c:	0800407d 	.word	0x0800407d
 8003580:	9999999a 	.word	0x9999999a
 8003584:	3fd99999 	.word	0x3fd99999
	...
 8003594:	c0490000 	.word	0xc0490000
 8003598:	00000000 	.word	0x00000000
 800359c:	40490000 	.word	0x40490000
 80035a0:	2400172c 	.word	0x2400172c
 80035a4:	240008c0 	.word	0x240008c0
 80035a8:	240007fc 	.word	0x240007fc
 80035ac:	240008c4 	.word	0x240008c4
 80035b0:	240007f8 	.word	0x240007f8
 80035b4:	24000800 	.word	0x24000800
 80035b8:	240008c8 	.word	0x240008c8
 80035bc:	c2b40000 	.word	0xc2b40000
 80035c0:	42b40000 	.word	0x42b40000
 80035c4:	240008ec 	.word	0x240008ec
 80035c8:	c2480000 	.word	0xc2480000
 80035cc:	42480000 	.word	0x42480000
 80035d0:	240008cc 	.word	0x240008cc
 80035d4:	24001878 	.word	0x24001878
 80035d8:	2400185c 	.word	0x2400185c
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 80035dc:	4bbe      	ldr	r3, [pc, #760]	; (80038d8 <fly+0x608>)
 80035de:	4abf      	ldr	r2, [pc, #764]	; (80038dc <fly+0x60c>)
 80035e0:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 80035e2:	4bbf      	ldr	r3, [pc, #764]	; (80038e0 <fly+0x610>)
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 80035ea:	4bbe      	ldr	r3, [pc, #760]	; (80038e4 <fly+0x614>)
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 80035f2:	4bbd      	ldr	r3, [pc, #756]	; (80038e8 <fly+0x618>)
 80035f4:	4abd      	ldr	r2, [pc, #756]	; (80038ec <fly+0x61c>)
 80035f6:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 80035f8:	4bbd      	ldr	r3, [pc, #756]	; (80038f0 <fly+0x620>)
 80035fa:	4ab8      	ldr	r2, [pc, #736]	; (80038dc <fly+0x60c>)
 80035fc:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 80035fe:	4bbd      	ldr	r3, [pc, #756]	; (80038f4 <fly+0x624>)
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 8003606:	4bbc      	ldr	r3, [pc, #752]	; (80038f8 <fly+0x628>)
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 800360e:	4bbb      	ldr	r3, [pc, #748]	; (80038fc <fly+0x62c>)
 8003610:	4ab6      	ldr	r2, [pc, #728]	; (80038ec <fly+0x61c>)
 8003612:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 8003614:	4bba      	ldr	r3, [pc, #744]	; (8003900 <fly+0x630>)
 8003616:	4ab1      	ldr	r2, [pc, #708]	; (80038dc <fly+0x60c>)
 8003618:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 800361a:	4bba      	ldr	r3, [pc, #744]	; (8003904 <fly+0x634>)
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 8003622:	4bb9      	ldr	r3, [pc, #740]	; (8003908 <fly+0x638>)
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 800362a:	4bb8      	ldr	r3, [pc, #736]	; (800390c <fly+0x63c>)
 800362c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003630:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003632:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003636:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800363a:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800363e:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8003642:	f000 fe43 	bl	80042cc <set_speed>

      // Reset counter before take off
      stop_counter = 0;
 8003646:	4bb2      	ldr	r3, [pc, #712]	; (8003910 <fly+0x640>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

      // Reset angle before take off
      g_mpu6050.angle_z = 0;
 800364c:	4bb1      	ldr	r3, [pc, #708]	; (8003914 <fly+0x644>)
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	645a      	str	r2, [r3, #68]	; 0x44

      // Move sticks to make it ready to take off
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8003654:	4bb0      	ldr	r3, [pc, #704]	; (8003918 <fly+0x648>)
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003662:	d901      	bls.n	8003668 <fly+0x398>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
        fly_mode = ready;
      }

      break;
 8003664:	f000 bdf8 	b.w	8004258 <fly+0xf88>
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8003668:	4bac      	ldr	r3, [pc, #688]	; (800391c <fly+0x64c>)
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003920 <fly+0x650>
 8003672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367a:	d901      	bls.n	8003680 <fly+0x3b0>
      break;
 800367c:	f000 bdec 	b.w	8004258 <fly+0xf88>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8003680:	4ba8      	ldr	r3, [pc, #672]	; (8003924 <fly+0x654>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003920 <fly+0x650>
 800368a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003692:	d901      	bls.n	8003698 <fly+0x3c8>
      break;
 8003694:	f000 bde0 	b.w	8004258 <fly+0xf88>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8003698:	4ba3      	ldr	r3, [pc, #652]	; (8003928 <fly+0x658>)
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800392c <fly+0x65c>
 80036a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036aa:	da01      	bge.n	80036b0 <fly+0x3e0>
      break;
 80036ac:	f000 bdd4 	b.w	8004258 <fly+0xf88>
        fly_mode = ready;
 80036b0:	4b9f      	ldr	r3, [pc, #636]	; (8003930 <fly+0x660>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
      break;
 80036b6:	f000 bdcf 	b.w	8004258 <fly+0xf88>
    case ready:
      // Reset accumulated integral before take off
      g_I_pitch_accumulated = 0;
 80036ba:	4b9e      	ldr	r3, [pc, #632]	; (8003934 <fly+0x664>)
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 80036c2:	4b9d      	ldr	r3, [pc, #628]	; (8003938 <fly+0x668>)
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 80036ca:	4b9c      	ldr	r3, [pc, #624]	; (800393c <fly+0x66c>)
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 80036d2:	f640 2328 	movw	r3, #2600	; 0xa28
 80036d6:	f640 2228 	movw	r2, #2600	; 0xa28
 80036da:	f640 2128 	movw	r1, #2600	; 0xa28
 80036de:	f640 2028 	movw	r0, #2600	; 0xa28
 80036e2:	f000 fdf3 	bl	80042cc <set_speed>

      // Switch to fly mode
      if (g_throttle > 5) {
 80036e6:	4b8c      	ldr	r3, [pc, #560]	; (8003918 <fly+0x648>)
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80036f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	dc01      	bgt.n	80036fe <fly+0x42e>
        fly_mode = moving;
      }

      break;
 80036fa:	f000 bdad 	b.w	8004258 <fly+0xf88>
        fly_mode = moving;
 80036fe:	4b8c      	ldr	r3, [pc, #560]	; (8003930 <fly+0x660>)
 8003700:	2203      	movs	r2, #3
 8003702:	701a      	strb	r2, [r3, #0]
      break;
 8003704:	f000 bda8 	b.w	8004258 <fly+0xf88>
    case holding:

      break;
    case moving:
      g_P_pitch = LIMIT(g_angle_error_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8003708:	4b8d      	ldr	r3, [pc, #564]	; (8003940 <fly+0x670>)
 800370a:	ed93 7a00 	vldr	s14, [r3]
 800370e:	4b72      	ldr	r3, [pc, #456]	; (80038d8 <fly+0x608>)
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003718:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003944 <fly+0x674>
 800371c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003724:	d502      	bpl.n	800372c <fly+0x45c>
 8003726:	eddf 7a87 	vldr	s15, [pc, #540]	; 8003944 <fly+0x674>
 800372a:	e019      	b.n	8003760 <fly+0x490>
 800372c:	4b84      	ldr	r3, [pc, #528]	; (8003940 <fly+0x670>)
 800372e:	ed93 7a00 	vldr	s14, [r3]
 8003732:	4b69      	ldr	r3, [pc, #420]	; (80038d8 <fly+0x608>)
 8003734:	edd3 7a00 	vldr	s15, [r3]
 8003738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003948 <fly+0x678>
 8003740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	dd02      	ble.n	8003750 <fly+0x480>
 800374a:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8003948 <fly+0x678>
 800374e:	e007      	b.n	8003760 <fly+0x490>
 8003750:	4b7b      	ldr	r3, [pc, #492]	; (8003940 <fly+0x670>)
 8003752:	ed93 7a00 	vldr	s14, [r3]
 8003756:	4b60      	ldr	r3, [pc, #384]	; (80038d8 <fly+0x608>)
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	4b7a      	ldr	r3, [pc, #488]	; (800394c <fly+0x67c>)
 8003762:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += g_angle_error_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 8003766:	4b73      	ldr	r3, [pc, #460]	; (8003934 <fly+0x664>)
 8003768:	edd3 7a00 	vldr	s15, [r3]
 800376c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003770:	4b73      	ldr	r3, [pc, #460]	; (8003940 <fly+0x670>)
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800377a:	ed9f 5b51 	vldr	d5, [pc, #324]	; 80038c0 <fly+0x5f0>
 800377e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003782:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003786:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800378a:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <fly+0x664>)
 800378c:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated = LIMIT(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <fly+0x664>)
 8003792:	edd3 7a00 	vldr	s15, [r3]
 8003796:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800379a:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <fly+0x610>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80037a4:	ed9f 4b48 	vldr	d4, [pc, #288]	; 80038c8 <fly+0x5f8>
 80037a8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80037ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	d507      	bpl.n	80037c6 <fly+0x4f6>
 80037b6:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <fly+0x610>)
 80037b8:	ed93 7a00 	vldr	s14, [r3]
 80037bc:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003950 <fly+0x680>
 80037c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c4:	e01d      	b.n	8003802 <fly+0x532>
 80037c6:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <fly+0x664>)
 80037c8:	edd3 7a00 	vldr	s15, [r3]
 80037cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80037d0:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <fly+0x610>)
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80037da:	ed9f 4b3d 	vldr	d4, [pc, #244]	; 80038d0 <fly+0x600>
 80037de:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80037e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80037e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ea:	dd07      	ble.n	80037fc <fly+0x52c>
 80037ec:	4b3c      	ldr	r3, [pc, #240]	; (80038e0 <fly+0x610>)
 80037ee:	ed93 7a00 	vldr	s14, [r3]
 80037f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003954 <fly+0x684>
 80037f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fa:	e002      	b.n	8003802 <fly+0x532>
 80037fc:	4b4d      	ldr	r3, [pc, #308]	; (8003934 <fly+0x664>)
 80037fe:	edd3 7a00 	vldr	s15, [r3]
 8003802:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <fly+0x664>)
 8003804:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 8003808:	4b4a      	ldr	r3, [pc, #296]	; (8003934 <fly+0x664>)
 800380a:	ed93 7a00 	vldr	s14, [r3]
 800380e:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <fly+0x610>)
 8003810:	edd3 7a00 	vldr	s15, [r3]
 8003814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003818:	4b4f      	ldr	r3, [pc, #316]	; (8003958 <fly+0x688>)
 800381a:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = LIMIT(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <fly+0x618>)
 8003820:	ed93 7a00 	vldr	s14, [r3]
 8003824:	edd7 7a04 	vldr	s15, [r7, #16]
 8003828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003944 <fly+0x674>
 8003830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003838:	d502      	bpl.n	8003840 <fly+0x570>
 800383a:	eddf 7a42 	vldr	s15, [pc, #264]	; 8003944 <fly+0x674>
 800383e:	e017      	b.n	8003870 <fly+0x5a0>
 8003840:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <fly+0x618>)
 8003842:	ed93 7a00 	vldr	s14, [r3]
 8003846:	edd7 7a04 	vldr	s15, [r7, #16]
 800384a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003948 <fly+0x678>
 8003852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	dd02      	ble.n	8003862 <fly+0x592>
 800385c:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8003948 <fly+0x678>
 8003860:	e006      	b.n	8003870 <fly+0x5a0>
 8003862:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <fly+0x618>)
 8003864:	ed93 7a00 	vldr	s14, [r3]
 8003868:	edd7 7a04 	vldr	s15, [r7, #16]
 800386c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003870:	4b3a      	ldr	r3, [pc, #232]	; (800395c <fly+0x68c>)
 8003872:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = LIMIT(g_angle_error_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 8003876:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <fly+0x690>)
 8003878:	ed93 7a00 	vldr	s14, [r3]
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <fly+0x620>)
 800387e:	edd3 7a00 	vldr	s15, [r3]
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003944 <fly+0x674>
 800388a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	d502      	bpl.n	800389a <fly+0x5ca>
 8003894:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003944 <fly+0x674>
 8003898:	e06c      	b.n	8003974 <fly+0x6a4>
 800389a:	4b31      	ldr	r3, [pc, #196]	; (8003960 <fly+0x690>)
 800389c:	ed93 7a00 	vldr	s14, [r3]
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <fly+0x620>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
 80038a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038aa:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003948 <fly+0x678>
 80038ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b6:	dd55      	ble.n	8003964 <fly+0x694>
 80038b8:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003948 <fly+0x678>
 80038bc:	e05a      	b.n	8003974 <fly+0x6a4>
 80038be:	bf00      	nop
	...
 80038cc:	c0704000 	.word	0xc0704000
 80038d0:	00000000 	.word	0x00000000
 80038d4:	40704000 	.word	0x40704000
 80038d8:	24000000 	.word	0x24000000
 80038dc:	40e00000 	.word	0x40e00000
 80038e0:	240008d0 	.word	0x240008d0
 80038e4:	240008d4 	.word	0x240008d4
 80038e8:	24000004 	.word	0x24000004
 80038ec:	3fcccccd 	.word	0x3fcccccd
 80038f0:	24000008 	.word	0x24000008
 80038f4:	240008d8 	.word	0x240008d8
 80038f8:	240008dc 	.word	0x240008dc
 80038fc:	2400000c 	.word	0x2400000c
 8003900:	24000010 	.word	0x24000010
 8003904:	240008e0 	.word	0x240008e0
 8003908:	240008e4 	.word	0x240008e4
 800390c:	24000014 	.word	0x24000014
 8003910:	24001878 	.word	0x24001878
 8003914:	2400172c 	.word	0x2400172c
 8003918:	240008bc 	.word	0x240008bc
 800391c:	240008c8 	.word	0x240008c8
 8003920:	c2f40000 	.word	0xc2f40000
 8003924:	240008c0 	.word	0x240008c0
 8003928:	240008c4 	.word	0x240008c4
 800392c:	42f40000 	.word	0x42f40000
 8003930:	2400185c 	.word	0x2400185c
 8003934:	2400080c 	.word	0x2400080c
 8003938:	2400081c 	.word	0x2400081c
 800393c:	2400082c 	.word	0x2400082c
 8003940:	240007fc 	.word	0x240007fc
 8003944:	c4430000 	.word	0xc4430000
 8003948:	44430000 	.word	0x44430000
 800394c:	24000804 	.word	0x24000804
 8003950:	c3820000 	.word	0xc3820000
 8003954:	43820000 	.word	0x43820000
 8003958:	24000808 	.word	0x24000808
 800395c:	24000810 	.word	0x24000810
 8003960:	240007f8 	.word	0x240007f8
 8003964:	4baa      	ldr	r3, [pc, #680]	; (8003c10 <fly+0x940>)
 8003966:	ed93 7a00 	vldr	s14, [r3]
 800396a:	4baa      	ldr	r3, [pc, #680]	; (8003c14 <fly+0x944>)
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003974:	4ba8      	ldr	r3, [pc, #672]	; (8003c18 <fly+0x948>)
 8003976:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += g_angle_error_x*I_ROLL_PERIOD;
 800397a:	4ba8      	ldr	r3, [pc, #672]	; (8003c1c <fly+0x94c>)
 800397c:	edd3 7a00 	vldr	s15, [r3]
 8003980:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003984:	4ba2      	ldr	r3, [pc, #648]	; (8003c10 <fly+0x940>)
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800398e:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8003be8 <fly+0x918>
 8003992:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003996:	ee36 7b07 	vadd.f64	d7, d6, d7
 800399a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800399e:	4b9f      	ldr	r3, [pc, #636]	; (8003c1c <fly+0x94c>)
 80039a0:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated = LIMIT(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 80039a4:	4b9d      	ldr	r3, [pc, #628]	; (8003c1c <fly+0x94c>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039ae:	4b9c      	ldr	r3, [pc, #624]	; (8003c20 <fly+0x950>)
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80039b8:	ed9f 4b8d 	vldr	d4, [pc, #564]	; 8003bf0 <fly+0x920>
 80039bc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80039c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	d507      	bpl.n	80039da <fly+0x70a>
 80039ca:	4b95      	ldr	r3, [pc, #596]	; (8003c20 <fly+0x950>)
 80039cc:	ed93 7a00 	vldr	s14, [r3]
 80039d0:	eddf 6a94 	vldr	s13, [pc, #592]	; 8003c24 <fly+0x954>
 80039d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d8:	e01d      	b.n	8003a16 <fly+0x746>
 80039da:	4b90      	ldr	r3, [pc, #576]	; (8003c1c <fly+0x94c>)
 80039dc:	edd3 7a00 	vldr	s15, [r3]
 80039e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039e4:	4b8e      	ldr	r3, [pc, #568]	; (8003c20 <fly+0x950>)
 80039e6:	edd3 7a00 	vldr	s15, [r3]
 80039ea:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80039ee:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8003bf8 <fly+0x928>
 80039f2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80039f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80039fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fe:	dd07      	ble.n	8003a10 <fly+0x740>
 8003a00:	4b87      	ldr	r3, [pc, #540]	; (8003c20 <fly+0x950>)
 8003a02:	ed93 7a00 	vldr	s14, [r3]
 8003a06:	eddf 6a88 	vldr	s13, [pc, #544]	; 8003c28 <fly+0x958>
 8003a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0e:	e002      	b.n	8003a16 <fly+0x746>
 8003a10:	4b82      	ldr	r3, [pc, #520]	; (8003c1c <fly+0x94c>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	4b81      	ldr	r3, [pc, #516]	; (8003c1c <fly+0x94c>)
 8003a18:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 8003a1c:	4b7f      	ldr	r3, [pc, #508]	; (8003c1c <fly+0x94c>)
 8003a1e:	ed93 7a00 	vldr	s14, [r3]
 8003a22:	4b7f      	ldr	r3, [pc, #508]	; (8003c20 <fly+0x950>)
 8003a24:	edd3 7a00 	vldr	s15, [r3]
 8003a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2c:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <fly+0x95c>)
 8003a2e:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = LIMIT(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 8003a32:	4b7f      	ldr	r3, [pc, #508]	; (8003c30 <fly+0x960>)
 8003a34:	ed93 7a00 	vldr	s14, [r3]
 8003a38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a40:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003c34 <fly+0x964>
 8003a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	d502      	bpl.n	8003a54 <fly+0x784>
 8003a4e:	eddf 7a79 	vldr	s15, [pc, #484]	; 8003c34 <fly+0x964>
 8003a52:	e017      	b.n	8003a84 <fly+0x7b4>
 8003a54:	4b76      	ldr	r3, [pc, #472]	; (8003c30 <fly+0x960>)
 8003a56:	ed93 7a00 	vldr	s14, [r3]
 8003a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003c38 <fly+0x968>
 8003a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6e:	dd02      	ble.n	8003a76 <fly+0x7a6>
 8003a70:	eddf 7a71 	vldr	s15, [pc, #452]	; 8003c38 <fly+0x968>
 8003a74:	e006      	b.n	8003a84 <fly+0x7b4>
 8003a76:	4b6e      	ldr	r3, [pc, #440]	; (8003c30 <fly+0x960>)
 8003a78:	ed93 7a00 	vldr	s14, [r3]
 8003a7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a84:	4b6d      	ldr	r3, [pc, #436]	; (8003c3c <fly+0x96c>)
 8003a86:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = LIMIT(g_angle_error_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 8003a8a:	4b6d      	ldr	r3, [pc, #436]	; (8003c40 <fly+0x970>)
 8003a8c:	ed93 7a00 	vldr	s14, [r3]
 8003a90:	4b6c      	ldr	r3, [pc, #432]	; (8003c44 <fly+0x974>)
 8003a92:	edd3 7a00 	vldr	s15, [r3]
 8003a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003c34 <fly+0x964>
 8003a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa6:	d502      	bpl.n	8003aae <fly+0x7de>
 8003aa8:	eddf 7a62 	vldr	s15, [pc, #392]	; 8003c34 <fly+0x964>
 8003aac:	e019      	b.n	8003ae2 <fly+0x812>
 8003aae:	4b64      	ldr	r3, [pc, #400]	; (8003c40 <fly+0x970>)
 8003ab0:	ed93 7a00 	vldr	s14, [r3]
 8003ab4:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <fly+0x974>)
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abe:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003c38 <fly+0x968>
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	dd02      	ble.n	8003ad2 <fly+0x802>
 8003acc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003c38 <fly+0x968>
 8003ad0:	e007      	b.n	8003ae2 <fly+0x812>
 8003ad2:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <fly+0x970>)
 8003ad4:	ed93 7a00 	vldr	s14, [r3]
 8003ad8:	4b5a      	ldr	r3, [pc, #360]	; (8003c44 <fly+0x974>)
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	4b59      	ldr	r3, [pc, #356]	; (8003c48 <fly+0x978>)
 8003ae4:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += g_angle_error_z*I_YAW_PERIOD;
 8003ae8:	4b58      	ldr	r3, [pc, #352]	; (8003c4c <fly+0x97c>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003af2:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <fly+0x970>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003afc:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8003be8 <fly+0x918>
 8003b00:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003b04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b0c:	4b4f      	ldr	r3, [pc, #316]	; (8003c4c <fly+0x97c>)
 8003b0e:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated = LIMIT(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 8003b12:	4b4e      	ldr	r3, [pc, #312]	; (8003c4c <fly+0x97c>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b1c:	4b4c      	ldr	r3, [pc, #304]	; (8003c50 <fly+0x980>)
 8003b1e:	edd3 7a00 	vldr	s15, [r3]
 8003b22:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003b26:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8003c00 <fly+0x930>
 8003b2a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003b2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b36:	d507      	bpl.n	8003b48 <fly+0x878>
 8003b38:	4b45      	ldr	r3, [pc, #276]	; (8003c50 <fly+0x980>)
 8003b3a:	ed93 7a00 	vldr	s14, [r3]
 8003b3e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8003c54 <fly+0x984>
 8003b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b46:	e01d      	b.n	8003b84 <fly+0x8b4>
 8003b48:	4b40      	ldr	r3, [pc, #256]	; (8003c4c <fly+0x97c>)
 8003b4a:	edd3 7a00 	vldr	s15, [r3]
 8003b4e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b52:	4b3f      	ldr	r3, [pc, #252]	; (8003c50 <fly+0x980>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003b5c:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 8003c08 <fly+0x938>
 8003b60:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003b64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6c:	dd07      	ble.n	8003b7e <fly+0x8ae>
 8003b6e:	4b38      	ldr	r3, [pc, #224]	; (8003c50 <fly+0x980>)
 8003b70:	ed93 7a00 	vldr	s14, [r3]
 8003b74:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c58 <fly+0x988>
 8003b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7c:	e002      	b.n	8003b84 <fly+0x8b4>
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <fly+0x97c>)
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <fly+0x97c>)
 8003b86:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 8003b8a:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <fly+0x97c>)
 8003b8c:	ed93 7a00 	vldr	s14, [r3]
 8003b90:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <fly+0x980>)
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <fly+0x98c>)
 8003b9c:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = LIMIT(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 8003ba0:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <fly+0x990>)
 8003ba2:	ed93 7a00 	vldr	s14, [r3]
 8003ba6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bae:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003c34 <fly+0x964>
 8003bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bba:	d502      	bpl.n	8003bc2 <fly+0x8f2>
 8003bbc:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003c34 <fly+0x964>
 8003bc0:	e057      	b.n	8003c72 <fly+0x9a2>
 8003bc2:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <fly+0x990>)
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003c38 <fly+0x968>
 8003bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	dd42      	ble.n	8003c64 <fly+0x994>
 8003bde:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003c38 <fly+0x968>
 8003be2:	e046      	b.n	8003c72 <fly+0x9a2>
 8003be4:	f3af 8000 	nop.w
	...
 8003bf4:	c0604000 	.word	0xc0604000
 8003bf8:	00000000 	.word	0x00000000
 8003bfc:	40604000 	.word	0x40604000
 8003c00:	00000000 	.word	0x00000000
 8003c04:	c0704000 	.word	0xc0704000
 8003c08:	00000000 	.word	0x00000000
 8003c0c:	40704000 	.word	0x40704000
 8003c10:	240007f8 	.word	0x240007f8
 8003c14:	24000008 	.word	0x24000008
 8003c18:	24000814 	.word	0x24000814
 8003c1c:	2400081c 	.word	0x2400081c
 8003c20:	240008d8 	.word	0x240008d8
 8003c24:	c3020000 	.word	0xc3020000
 8003c28:	43020000 	.word	0x43020000
 8003c2c:	24000818 	.word	0x24000818
 8003c30:	2400000c 	.word	0x2400000c
 8003c34:	c4430000 	.word	0xc4430000
 8003c38:	44430000 	.word	0x44430000
 8003c3c:	24000820 	.word	0x24000820
 8003c40:	24000800 	.word	0x24000800
 8003c44:	24000010 	.word	0x24000010
 8003c48:	24000824 	.word	0x24000824
 8003c4c:	2400082c 	.word	0x2400082c
 8003c50:	240008e0 	.word	0x240008e0
 8003c54:	c3820000 	.word	0xc3820000
 8003c58:	43820000 	.word	0x43820000
 8003c5c:	24000828 	.word	0x24000828
 8003c60:	24000014 	.word	0x24000014
 8003c64:	4bc0      	ldr	r3, [pc, #768]	; (8003f68 <fly+0xc98>)
 8003c66:	ed93 7a00 	vldr	s14, [r3]
 8003c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	4bbe      	ldr	r3, [pc, #760]	; (8003f6c <fly+0xc9c>)
 8003c74:	edc3 7a00 	vstr	s15, [r3]

      float background = MIN_SPEED + 5*(15.81f*sqrt(g_throttle));
 8003c78:	4bbd      	ldr	r3, [pc, #756]	; (8003f70 <fly+0xca0>)
 8003c7a:	edd3 7a00 	vldr	s15, [r3]
 8003c7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c82:	eeb0 0b47 	vmov.f64	d0, d7
 8003c86:	f00d fca7 	bl	80115d8 <sqrt>
 8003c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8003c8e:	ed9f 6bb2 	vldr	d6, [pc, #712]	; 8003f58 <fly+0xc88>
 8003c92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c96:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8003c9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c9e:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8003f60 <fly+0xc90>
 8003ca2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ca6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003caa:	edc7 7a00 	vstr	s15, [r7]

      g_sig1 = background + (g_P_pitch + g_I_pitch + g_D_pitch + g_drift_pitch) - (g_P_roll + g_I_roll + g_D_roll + g_drift_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003cae:	4bb1      	ldr	r3, [pc, #708]	; (8003f74 <fly+0xca4>)
 8003cb0:	ed93 7a00 	vldr	s14, [r3]
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	; (8003f78 <fly+0xca8>)
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cbe:	4baf      	ldr	r3, [pc, #700]	; (8003f7c <fly+0xcac>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cd0:	edd7 7a00 	vldr	s15, [r7]
 8003cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cd8:	4ba9      	ldr	r3, [pc, #676]	; (8003f80 <fly+0xcb0>)
 8003cda:	edd3 6a00 	vldr	s13, [r3]
 8003cde:	4ba9      	ldr	r3, [pc, #676]	; (8003f84 <fly+0xcb4>)
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ce8:	4ba7      	ldr	r3, [pc, #668]	; (8003f88 <fly+0xcb8>)
 8003cea:	edd3 7a00 	vldr	s15, [r3]
 8003cee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003cf2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cfe:	4ba3      	ldr	r3, [pc, #652]	; (8003f8c <fly+0xcbc>)
 8003d00:	edd3 6a00 	vldr	s13, [r3]
 8003d04:	4ba2      	ldr	r3, [pc, #648]	; (8003f90 <fly+0xcc0>)
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003d0e:	4b97      	ldr	r3, [pc, #604]	; (8003f6c <fly+0xc9c>)
 8003d10:	edd3 7a00 	vldr	s15, [r3]
 8003d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d1c:	4b9d      	ldr	r3, [pc, #628]	; (8003f94 <fly+0xcc4>)
 8003d1e:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = background + (g_P_pitch + g_I_pitch + g_D_pitch + g_drift_pitch) + (g_P_roll + g_I_roll + g_D_roll + g_drift_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003d22:	4b94      	ldr	r3, [pc, #592]	; (8003f74 <fly+0xca4>)
 8003d24:	ed93 7a00 	vldr	s14, [r3]
 8003d28:	4b93      	ldr	r3, [pc, #588]	; (8003f78 <fly+0xca8>)
 8003d2a:	edd3 7a00 	vldr	s15, [r3]
 8003d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d32:	4b92      	ldr	r3, [pc, #584]	; (8003f7c <fly+0xcac>)
 8003d34:	edd3 7a00 	vldr	s15, [r3]
 8003d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d44:	edd7 7a00 	vldr	s15, [r7]
 8003d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d4c:	4b8c      	ldr	r3, [pc, #560]	; (8003f80 <fly+0xcb0>)
 8003d4e:	edd3 6a00 	vldr	s13, [r3]
 8003d52:	4b8c      	ldr	r3, [pc, #560]	; (8003f84 <fly+0xcb4>)
 8003d54:	edd3 7a00 	vldr	s15, [r3]
 8003d58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003d5c:	4b8a      	ldr	r3, [pc, #552]	; (8003f88 <fly+0xcb8>)
 8003d5e:	edd3 7a00 	vldr	s15, [r3]
 8003d62:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003d66:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d72:	4b86      	ldr	r3, [pc, #536]	; (8003f8c <fly+0xcbc>)
 8003d74:	edd3 6a00 	vldr	s13, [r3]
 8003d78:	4b85      	ldr	r3, [pc, #532]	; (8003f90 <fly+0xcc0>)
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003d82:	4b7a      	ldr	r3, [pc, #488]	; (8003f6c <fly+0xc9c>)
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d90:	4b81      	ldr	r3, [pc, #516]	; (8003f98 <fly+0xcc8>)
 8003d92:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = background - (g_P_pitch + g_I_pitch + g_D_pitch + g_drift_pitch) + (g_P_roll + g_I_roll + g_D_roll + g_drift_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003d96:	4b77      	ldr	r3, [pc, #476]	; (8003f74 <fly+0xca4>)
 8003d98:	ed93 7a00 	vldr	s14, [r3]
 8003d9c:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <fly+0xca8>)
 8003d9e:	edd3 7a00 	vldr	s15, [r3]
 8003da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003da6:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <fly+0xcac>)
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003db0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db8:	ed97 7a00 	vldr	s14, [r7]
 8003dbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dc0:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <fly+0xcb0>)
 8003dc2:	edd3 6a00 	vldr	s13, [r3]
 8003dc6:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <fly+0xcb4>)
 8003dc8:	edd3 7a00 	vldr	s15, [r3]
 8003dcc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003dd0:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <fly+0xcb8>)
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003dda:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003de6:	4b69      	ldr	r3, [pc, #420]	; (8003f8c <fly+0xcbc>)
 8003de8:	edd3 6a00 	vldr	s13, [r3]
 8003dec:	4b68      	ldr	r3, [pc, #416]	; (8003f90 <fly+0xcc0>)
 8003dee:	edd3 7a00 	vldr	s15, [r3]
 8003df2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003df6:	4b5d      	ldr	r3, [pc, #372]	; (8003f6c <fly+0xc9c>)
 8003df8:	edd3 7a00 	vldr	s15, [r3]
 8003dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e04:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <fly+0xccc>)
 8003e06:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = background - (g_P_pitch + g_I_pitch + g_D_pitch + g_drift_pitch) - (g_P_roll + g_I_roll + g_D_roll + g_drift_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003e0a:	4b5a      	ldr	r3, [pc, #360]	; (8003f74 <fly+0xca4>)
 8003e0c:	ed93 7a00 	vldr	s14, [r3]
 8003e10:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <fly+0xca8>)
 8003e12:	edd3 7a00 	vldr	s15, [r3]
 8003e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e1a:	4b58      	ldr	r3, [pc, #352]	; (8003f7c <fly+0xcac>)
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e2c:	ed97 7a00 	vldr	s14, [r7]
 8003e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e34:	4b52      	ldr	r3, [pc, #328]	; (8003f80 <fly+0xcb0>)
 8003e36:	edd3 6a00 	vldr	s13, [r3]
 8003e3a:	4b52      	ldr	r3, [pc, #328]	; (8003f84 <fly+0xcb4>)
 8003e3c:	edd3 7a00 	vldr	s15, [r3]
 8003e40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003e44:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <fly+0xcb8>)
 8003e46:	edd3 7a00 	vldr	s15, [r3]
 8003e4a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003e4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e5a:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <fly+0xcbc>)
 8003e5c:	edd3 6a00 	vldr	s13, [r3]
 8003e60:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <fly+0xcc0>)
 8003e62:	edd3 7a00 	vldr	s15, [r3]
 8003e66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003e6a:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <fly+0xc9c>)
 8003e6c:	edd3 7a00 	vldr	s15, [r3]
 8003e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e78:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <fly+0xcd0>)
 8003e7a:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = LIMIT(g_sig1, MIN_SPEED, MAX_SPEED);
 8003e7e:	4b45      	ldr	r3, [pc, #276]	; (8003f94 <fly+0xcc4>)
 8003e80:	edd3 7a00 	vldr	s15, [r3]
 8003e84:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003fa4 <fly+0xcd4>
 8003e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e90:	d501      	bpl.n	8003e96 <fly+0xbc6>
 8003e92:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <fly+0xcd8>)
 8003e94:	e00d      	b.n	8003eb2 <fly+0xbe2>
 8003e96:	4b3f      	ldr	r3, [pc, #252]	; (8003f94 <fly+0xcc4>)
 8003e98:	edd3 7a00 	vldr	s15, [r3]
 8003e9c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003fac <fly+0xcdc>
 8003ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea8:	dd01      	ble.n	8003eae <fly+0xbde>
 8003eaa:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <fly+0xce0>)
 8003eac:	e001      	b.n	8003eb2 <fly+0xbe2>
 8003eae:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <fly+0xcc4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a38      	ldr	r2, [pc, #224]	; (8003f94 <fly+0xcc4>)
 8003eb4:	6013      	str	r3, [r2, #0]
      g_sig2 = LIMIT(g_sig2, MIN_SPEED, MAX_SPEED);
 8003eb6:	4b38      	ldr	r3, [pc, #224]	; (8003f98 <fly+0xcc8>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003fa4 <fly+0xcd4>
 8003ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec8:	d501      	bpl.n	8003ece <fly+0xbfe>
 8003eca:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <fly+0xcd8>)
 8003ecc:	e00d      	b.n	8003eea <fly+0xc1a>
 8003ece:	4b32      	ldr	r3, [pc, #200]	; (8003f98 <fly+0xcc8>)
 8003ed0:	edd3 7a00 	vldr	s15, [r3]
 8003ed4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003fac <fly+0xcdc>
 8003ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	dd01      	ble.n	8003ee6 <fly+0xc16>
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <fly+0xce0>)
 8003ee4:	e001      	b.n	8003eea <fly+0xc1a>
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <fly+0xcc8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <fly+0xcc8>)
 8003eec:	6013      	str	r3, [r2, #0]
      g_sig3 = LIMIT(g_sig3, MIN_SPEED, MAX_SPEED);
 8003eee:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <fly+0xccc>)
 8003ef0:	edd3 7a00 	vldr	s15, [r3]
 8003ef4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003fa4 <fly+0xcd4>
 8003ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f00:	d501      	bpl.n	8003f06 <fly+0xc36>
 8003f02:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <fly+0xcd8>)
 8003f04:	e00d      	b.n	8003f22 <fly+0xc52>
 8003f06:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <fly+0xccc>)
 8003f08:	edd3 7a00 	vldr	s15, [r3]
 8003f0c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003fac <fly+0xcdc>
 8003f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	dd01      	ble.n	8003f1e <fly+0xc4e>
 8003f1a:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <fly+0xce0>)
 8003f1c:	e001      	b.n	8003f22 <fly+0xc52>
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <fly+0xccc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <fly+0xccc>)
 8003f24:	6013      	str	r3, [r2, #0]
      g_sig4 = LIMIT(g_sig4, MIN_SPEED, MAX_SPEED);
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <fly+0xcd0>)
 8003f28:	edd3 7a00 	vldr	s15, [r3]
 8003f2c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003fa4 <fly+0xcd4>
 8003f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f38:	d501      	bpl.n	8003f3e <fly+0xc6e>
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <fly+0xcd8>)
 8003f3c:	e03c      	b.n	8003fb8 <fly+0xce8>
 8003f3e:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <fly+0xcd0>)
 8003f40:	edd3 7a00 	vldr	s15, [r3]
 8003f44:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003fac <fly+0xcdc>
 8003f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f50:	dd30      	ble.n	8003fb4 <fly+0xce4>
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <fly+0xce0>)
 8003f54:	e030      	b.n	8003fb8 <fly+0xce8>
 8003f56:	bf00      	nop
 8003f58:	60000000 	.word	0x60000000
 8003f5c:	402f9eb8 	.word	0x402f9eb8
 8003f60:	00000000 	.word	0x00000000
 8003f64:	40a45000 	.word	0x40a45000
 8003f68:	24000014 	.word	0x24000014
 8003f6c:	24000830 	.word	0x24000830
 8003f70:	240008bc 	.word	0x240008bc
 8003f74:	24000804 	.word	0x24000804
 8003f78:	24000808 	.word	0x24000808
 8003f7c:	24000810 	.word	0x24000810
 8003f80:	24000814 	.word	0x24000814
 8003f84:	24000818 	.word	0x24000818
 8003f88:	24000820 	.word	0x24000820
 8003f8c:	24000824 	.word	0x24000824
 8003f90:	24000828 	.word	0x24000828
 8003f94:	24000834 	.word	0x24000834
 8003f98:	24000838 	.word	0x24000838
 8003f9c:	2400083c 	.word	0x2400083c
 8003fa0:	24000840 	.word	0x24000840
 8003fa4:	45228000 	.word	0x45228000
 8003fa8:	45228000 	.word	0x45228000
 8003fac:	45a28000 	.word	0x45a28000
 8003fb0:	45a28000 	.word	0x45a28000
 8003fb4:	4baa      	ldr	r3, [pc, #680]	; (8004260 <fly+0xf90>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4aa9      	ldr	r2, [pc, #676]	; (8004260 <fly+0xf90>)
 8003fba:	6013      	str	r3, [r2, #0]

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003fbc:	4ba9      	ldr	r3, [pc, #676]	; (8004264 <fly+0xf94>)
 8003fbe:	edd3 7a00 	vldr	s15, [r3]
 8003fc2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003fc6:	4ba8      	ldr	r3, [pc, #672]	; (8004268 <fly+0xf98>)
 8003fc8:	edd3 7a00 	vldr	s15, [r3]
 8003fcc:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003fd0:	4ba6      	ldr	r3, [pc, #664]	; (800426c <fly+0xf9c>)
 8003fd2:	edd3 7a00 	vldr	s15, [r3]
 8003fd6:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003fda:	4ba1      	ldr	r3, [pc, #644]	; (8004260 <fly+0xf90>)
 8003fdc:	edd3 7a00 	vldr	s15, [r3]
 8003fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe4:	ee17 3a90 	vmov	r3, s15
 8003fe8:	ee16 2a10 	vmov	r2, s12
 8003fec:	ee16 1a90 	vmov	r1, s13
 8003ff0:	ee17 0a10 	vmov	r0, s14
 8003ff4:	f000 f96a 	bl	80042cc <set_speed>

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 8003ff8:	4b9d      	ldr	r3, [pc, #628]	; (8004270 <fly+0xfa0>)
 8003ffa:	edd3 7a00 	vldr	s15, [r3]
 8003ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	d80b      	bhi.n	8004020 <fly+0xd50>
        if (stop_counter >= 10) {
 8004008:	4b9a      	ldr	r3, [pc, #616]	; (8004274 <fly+0xfa4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b09      	cmp	r3, #9
 800400e:	dd02      	ble.n	8004016 <fly+0xd46>
          fly_mode = init;
 8004010:	4b99      	ldr	r3, [pc, #612]	; (8004278 <fly+0xfa8>)
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
        }

        stop_counter += 1;
 8004016:	4b97      	ldr	r3, [pc, #604]	; (8004274 <fly+0xfa4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3301      	adds	r3, #1
 800401c:	4a95      	ldr	r2, [pc, #596]	; (8004274 <fly+0xfa4>)
 800401e:	6013      	str	r3, [r2, #0]
      }

      // Stop if angle too large (crashed), can disable if test with the rig
      if (g_angle_error_x < -90 || g_angle_error_x > 90 || g_angle_error_y < -90 || g_angle_error_y > 90) {
 8004020:	4b96      	ldr	r3, [pc, #600]	; (800427c <fly+0xfac>)
 8004022:	edd3 7a00 	vldr	s15, [r3]
 8004026:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8004280 <fly+0xfb0>
 800402a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	d41d      	bmi.n	8004070 <fly+0xda0>
 8004034:	4b91      	ldr	r3, [pc, #580]	; (800427c <fly+0xfac>)
 8004036:	edd3 7a00 	vldr	s15, [r3]
 800403a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8004284 <fly+0xfb4>
 800403e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004046:	dc13      	bgt.n	8004070 <fly+0xda0>
 8004048:	4b8f      	ldr	r3, [pc, #572]	; (8004288 <fly+0xfb8>)
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004280 <fly+0xfb0>
 8004052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405a:	d409      	bmi.n	8004070 <fly+0xda0>
 800405c:	4b8a      	ldr	r3, [pc, #552]	; (8004288 <fly+0xfb8>)
 800405e:	edd3 7a00 	vldr	s15, [r3]
 8004062:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8004284 <fly+0xfb4>
 8004066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	dd02      	ble.n	8004076 <fly+0xda6>
        fly_mode = init;
 8004070:	4b81      	ldr	r3, [pc, #516]	; (8004278 <fly+0xfa8>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
      }

      blink();
 8004076:	f7fe fc17 	bl	80028a8 <blink>
      break;
 800407a:	e0ed      	b.n	8004258 <fly+0xf88>
    case landing:

      break;
    case testing:
      blink();
 800407c:	f7fe fc14 	bl	80028a8 <blink>
      g_sig1 = MIN_SPEED + LIMIT(10*g_throttle, 0, MAX_SPEED);
 8004080:	4b7b      	ldr	r3, [pc, #492]	; (8004270 <fly+0xfa0>)
 8004082:	edd3 7a00 	vldr	s15, [r3]
 8004086:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800408a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800408e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004096:	d502      	bpl.n	800409e <fly+0xdce>
 8004098:	eddf 7a7c 	vldr	s15, [pc, #496]	; 800428c <fly+0xfbc>
 800409c:	e017      	b.n	80040ce <fly+0xdfe>
 800409e:	4b74      	ldr	r3, [pc, #464]	; (8004270 <fly+0xfa0>)
 80040a0:	edd3 7a00 	vldr	s15, [r3]
 80040a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ac:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004290 <fly+0xfc0>
 80040b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b8:	dd02      	ble.n	80040c0 <fly+0xdf0>
 80040ba:	eddf 7a75 	vldr	s15, [pc, #468]	; 8004290 <fly+0xfc0>
 80040be:	e006      	b.n	80040ce <fly+0xdfe>
 80040c0:	4b6b      	ldr	r3, [pc, #428]	; (8004270 <fly+0xfa0>)
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ce:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004294 <fly+0xfc4>
 80040d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <fly+0xf94>)
 80040d8:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + LIMIT(20*g_yaw, 0, MAX_SPEED);
 80040dc:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <fly+0xfc8>)
 80040de:	edd3 7a00 	vldr	s15, [r3]
 80040e2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80040e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f2:	d502      	bpl.n	80040fa <fly+0xe2a>
 80040f4:	eddf 7a65 	vldr	s15, [pc, #404]	; 800428c <fly+0xfbc>
 80040f8:	e017      	b.n	800412a <fly+0xe5a>
 80040fa:	4b67      	ldr	r3, [pc, #412]	; (8004298 <fly+0xfc8>)
 80040fc:	edd3 7a00 	vldr	s15, [r3]
 8004100:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004108:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004290 <fly+0xfc0>
 800410c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004114:	dd02      	ble.n	800411c <fly+0xe4c>
 8004116:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8004290 <fly+0xfc0>
 800411a:	e006      	b.n	800412a <fly+0xe5a>
 800411c:	4b5e      	ldr	r3, [pc, #376]	; (8004298 <fly+0xfc8>)
 800411e:	edd3 7a00 	vldr	s15, [r3]
 8004122:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800412a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004294 <fly+0xfc4>
 800412e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004132:	4b4d      	ldr	r3, [pc, #308]	; (8004268 <fly+0xf98>)
 8004134:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + LIMIT(20*g_pitch, 0, MAX_SPEED);
 8004138:	4b58      	ldr	r3, [pc, #352]	; (800429c <fly+0xfcc>)
 800413a:	edd3 7a00 	vldr	s15, [r3]
 800413e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414e:	d502      	bpl.n	8004156 <fly+0xe86>
 8004150:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800428c <fly+0xfbc>
 8004154:	e017      	b.n	8004186 <fly+0xeb6>
 8004156:	4b51      	ldr	r3, [pc, #324]	; (800429c <fly+0xfcc>)
 8004158:	edd3 7a00 	vldr	s15, [r3]
 800415c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004164:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004290 <fly+0xfc0>
 8004168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004170:	dd02      	ble.n	8004178 <fly+0xea8>
 8004172:	eddf 7a47 	vldr	s15, [pc, #284]	; 8004290 <fly+0xfc0>
 8004176:	e006      	b.n	8004186 <fly+0xeb6>
 8004178:	4b48      	ldr	r3, [pc, #288]	; (800429c <fly+0xfcc>)
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004186:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004294 <fly+0xfc4>
 800418a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800418e:	4b37      	ldr	r3, [pc, #220]	; (800426c <fly+0xf9c>)
 8004190:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + LIMIT(20*g_roll, 0, MAX_SPEED);
 8004194:	4b42      	ldr	r3, [pc, #264]	; (80042a0 <fly+0xfd0>)
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800419e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041aa:	d502      	bpl.n	80041b2 <fly+0xee2>
 80041ac:	eddf 7a37 	vldr	s15, [pc, #220]	; 800428c <fly+0xfbc>
 80041b0:	e017      	b.n	80041e2 <fly+0xf12>
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <fly+0xfd0>)
 80041b4:	edd3 7a00 	vldr	s15, [r3]
 80041b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80041bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004290 <fly+0xfc0>
 80041c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041cc:	dd02      	ble.n	80041d4 <fly+0xf04>
 80041ce:	eddf 7a30 	vldr	s15, [pc, #192]	; 8004290 <fly+0xfc0>
 80041d2:	e006      	b.n	80041e2 <fly+0xf12>
 80041d4:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <fly+0xfd0>)
 80041d6:	edd3 7a00 	vldr	s15, [r3]
 80041da:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80041de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004294 <fly+0xfc4>
 80041e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041ea:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <fly+0xf90>)
 80041ec:	edc3 7a00 	vstr	s15, [r3]

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 80041f0:	4b1f      	ldr	r3, [pc, #124]	; (8004270 <fly+0xfa0>)
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	d80b      	bhi.n	8004218 <fly+0xf48>
        if (stop_counter >= 10) {
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <fly+0xfa4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b09      	cmp	r3, #9
 8004206:	dd02      	ble.n	800420e <fly+0xf3e>
          fly_mode = init;
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <fly+0xfa8>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
        }

        stop_counter += 1;
 800420e:	4b19      	ldr	r3, [pc, #100]	; (8004274 <fly+0xfa4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	4a17      	ldr	r2, [pc, #92]	; (8004274 <fly+0xfa4>)
 8004216:	6013      	str	r3, [r2, #0]
      }

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <fly+0xf94>)
 800421a:	edd3 7a00 	vldr	s15, [r3]
 800421e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <fly+0xf98>)
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <fly+0xf9c>)
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8004236:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <fly+0xf90>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004240:	ee17 3a90 	vmov	r3, s15
 8004244:	ee16 2a10 	vmov	r2, s12
 8004248:	ee16 1a90 	vmov	r1, s13
 800424c:	ee17 0a10 	vmov	r0, s14
 8004250:	f000 f83c 	bl	80042cc <set_speed>
      break;
 8004254:	e000      	b.n	8004258 <fly+0xf88>
      break;
 8004256:	bf00      	nop
  }
}
 8004258:	bf00      	nop
 800425a:	3728      	adds	r7, #40	; 0x28
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	24000840 	.word	0x24000840
 8004264:	24000834 	.word	0x24000834
 8004268:	24000838 	.word	0x24000838
 800426c:	2400083c 	.word	0x2400083c
 8004270:	240008bc 	.word	0x240008bc
 8004274:	24001878 	.word	0x24001878
 8004278:	2400185c 	.word	0x2400185c
 800427c:	240007f8 	.word	0x240007f8
 8004280:	c2b40000 	.word	0xc2b40000
 8004284:	42b40000 	.word	0x42b40000
 8004288:	240007fc 	.word	0x240007fc
 800428c:	00000000 	.word	0x00000000
 8004290:	45a28000 	.word	0x45a28000
 8004294:	45228000 	.word	0x45228000
 8004298:	240008c8 	.word	0x240008c8
 800429c:	240008c0 	.word	0x240008c0
 80042a0:	240008c4 	.word	0x240008c4

080042a4 <console>:

void console(const char *str) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fc f817 	bl	80002e0 <strlen>
 80042b2:	4603      	mov	r3, r0
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4803      	ldr	r0, [pc, #12]	; (80042c8 <console+0x24>)
 80042bc:	f00a f834 	bl	800e328 <HAL_UART_Transmit_IT>
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	24000588 	.word	0x24000588

080042cc <set_speed>:

void set_speed(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4) {
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  TIM2->CCR1 = m1;
 80042da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = m2;
 80042e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6393      	str	r3, [r2, #56]	; 0x38
  TIM2->CCR3 = m3;
 80042ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = m4;
 80042f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <init_filters>:

void init_filters() {
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  average_filter_init(&g_af[0], 5); // Thrust
 800430c:	2105      	movs	r1, #5
 800430e:	480c      	ldr	r0, [pc, #48]	; (8004340 <init_filters+0x38>)
 8004310:	f7fc f9d9 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[1], 5); // Yaw
 8004314:	2105      	movs	r1, #5
 8004316:	480b      	ldr	r0, [pc, #44]	; (8004344 <init_filters+0x3c>)
 8004318:	f7fc f9d5 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[2], 5); // Pitch
 800431c:	2105      	movs	r1, #5
 800431e:	480a      	ldr	r0, [pc, #40]	; (8004348 <init_filters+0x40>)
 8004320:	f7fc f9d1 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[3], 5); // Roll
 8004324:	2105      	movs	r1, #5
 8004326:	4809      	ldr	r0, [pc, #36]	; (800434c <init_filters+0x44>)
 8004328:	f7fc f9cd 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[4], 5); // Stick 1
 800432c:	2105      	movs	r1, #5
 800432e:	4808      	ldr	r0, [pc, #32]	; (8004350 <init_filters+0x48>)
 8004330:	f7fc f9c9 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[5], 5); // Stick 1
 8004334:	2105      	movs	r1, #5
 8004336:	4807      	ldr	r0, [pc, #28]	; (8004354 <init_filters+0x4c>)
 8004338:	f7fc f9c5 	bl	80006c6 <average_filter_init>
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}
 8004340:	24000984 	.word	0x24000984
 8004344:	24000b20 	.word	0x24000b20
 8004348:	24000cbc 	.word	0x24000cbc
 800434c:	24000e58 	.word	0x24000e58
 8004350:	24000ff4 	.word	0x24000ff4
 8004354:	24001190 	.word	0x24001190

08004358 <init_sensors>:

void init_sensors() {
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af02      	add	r7, sp, #8
  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 800435e:	2303      	movs	r3, #3
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	2303      	movs	r3, #3
 8004364:	2200      	movs	r2, #0
 8004366:	490b      	ldr	r1, [pc, #44]	; (8004394 <init_sensors+0x3c>)
 8004368:	480b      	ldr	r0, [pc, #44]	; (8004398 <init_sensors+0x40>)
 800436a:	f7fd f9e7 	bl	800173c <MPU6050_init>
 800436e:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <init_sensors+0x2a>
    flash(error);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	4618      	mov	r0, r3
 800437c:	f7fc fa0e 	bl	800079c <flash>
  while (1) {
 8004380:	e7ed      	b.n	800435e <init_sensors+0x6>
    if (error == 0) break;
 8004382:	bf00      	nop
  }

  MPU6050_calibrate(&g_mpu6050);
 8004384:	4804      	ldr	r0, [pc, #16]	; (8004398 <init_sensors+0x40>)
 8004386:	f7fd fc13 	bl	8001bb0 <MPU6050_calibrate>
//        &g_ms5611,
//        &hi2c1);
//    if (error == 0) break;
//    flash(error);
//  }
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	240000bc 	.word	0x240000bc
 8004398:	2400172c 	.word	0x2400172c

0800439c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <_sbrk+0x5c>)
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <_sbrk+0x60>)
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <_sbrk+0x64>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <_sbrk+0x64>)
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <_sbrk+0x68>)
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <_sbrk+0x64>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d207      	bcs.n	80043dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043cc:	f00c f8d6 	bl	801057c <__errno>
 80043d0:	4603      	mov	r3, r0
 80043d2:	220c      	movs	r2, #12
 80043d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043da:	e009      	b.n	80043f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <_sbrk+0x64>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <_sbrk+0x64>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	4a05      	ldr	r2, [pc, #20]	; (8004400 <_sbrk+0x64>)
 80043ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	24080000 	.word	0x24080000
 80043fc:	00000400 	.word	0x00000400
 8004400:	2400187c 	.word	0x2400187c
 8004404:	24001898 	.word	0x24001898

08004408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800440c:	4b39      	ldr	r3, [pc, #228]	; (80044f4 <SystemInit+0xec>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	4a38      	ldr	r2, [pc, #224]	; (80044f4 <SystemInit+0xec>)
 8004414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800441c:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <SystemInit+0xf0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	2b06      	cmp	r3, #6
 8004426:	d807      	bhi.n	8004438 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004428:	4b33      	ldr	r3, [pc, #204]	; (80044f8 <SystemInit+0xf0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 030f 	bic.w	r3, r3, #15
 8004430:	4a31      	ldr	r2, [pc, #196]	; (80044f8 <SystemInit+0xf0>)
 8004432:	f043 0307 	orr.w	r3, r3, #7
 8004436:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004438:	4b30      	ldr	r3, [pc, #192]	; (80044fc <SystemInit+0xf4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2f      	ldr	r2, [pc, #188]	; (80044fc <SystemInit+0xf4>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004444:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <SystemInit+0xf4>)
 8004446:	2200      	movs	r2, #0
 8004448:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800444a:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <SystemInit+0xf4>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	492b      	ldr	r1, [pc, #172]	; (80044fc <SystemInit+0xf4>)
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <SystemInit+0xf8>)
 8004452:	4013      	ands	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004456:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <SystemInit+0xf0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004462:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <SystemInit+0xf0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 030f 	bic.w	r3, r3, #15
 800446a:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <SystemInit+0xf0>)
 800446c:	f043 0307 	orr.w	r3, r3, #7
 8004470:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <SystemInit+0xf4>)
 8004474:	2200      	movs	r2, #0
 8004476:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004478:	4b20      	ldr	r3, [pc, #128]	; (80044fc <SystemInit+0xf4>)
 800447a:	2200      	movs	r2, #0
 800447c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800447e:	4b1f      	ldr	r3, [pc, #124]	; (80044fc <SystemInit+0xf4>)
 8004480:	2200      	movs	r2, #0
 8004482:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004484:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <SystemInit+0xf4>)
 8004486:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <SystemInit+0xfc>)
 8004488:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800448a:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <SystemInit+0xf4>)
 800448c:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <SystemInit+0x100>)
 800448e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004490:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <SystemInit+0xf4>)
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <SystemInit+0x104>)
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004496:	4b19      	ldr	r3, [pc, #100]	; (80044fc <SystemInit+0xf4>)
 8004498:	2200      	movs	r2, #0
 800449a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800449c:	4b17      	ldr	r3, [pc, #92]	; (80044fc <SystemInit+0xf4>)
 800449e:	4a1b      	ldr	r2, [pc, #108]	; (800450c <SystemInit+0x104>)
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80044a2:	4b16      	ldr	r3, [pc, #88]	; (80044fc <SystemInit+0xf4>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80044a8:	4b14      	ldr	r3, [pc, #80]	; (80044fc <SystemInit+0xf4>)
 80044aa:	4a18      	ldr	r2, [pc, #96]	; (800450c <SystemInit+0x104>)
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <SystemInit+0xf4>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <SystemInit+0xf4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a10      	ldr	r2, [pc, #64]	; (80044fc <SystemInit+0xf4>)
 80044ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <SystemInit+0xf4>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <SystemInit+0x108>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4b12      	ldr	r3, [pc, #72]	; (8004514 <SystemInit+0x10c>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d2:	d202      	bcs.n	80044da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <SystemInit+0x110>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <SystemInit+0x114>)
 80044dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80044e0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044e2:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <SystemInit+0xec>)
 80044e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044e8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80044ea:	bf00      	nop
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000ed00 	.word	0xe000ed00
 80044f8:	52002000 	.word	0x52002000
 80044fc:	58024400 	.word	0x58024400
 8004500:	eaf6ed7f 	.word	0xeaf6ed7f
 8004504:	02020200 	.word	0x02020200
 8004508:	01ff0000 	.word	0x01ff0000
 800450c:	01010280 	.word	0x01010280
 8004510:	5c001000 	.word	0x5c001000
 8004514:	ffff0000 	.word	0xffff0000
 8004518:	51008108 	.word	0x51008108
 800451c:	52004000 	.word	0x52004000

08004520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004558 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004524:	f7ff ff70 	bl	8004408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004528:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800452a:	e003      	b.n	8004534 <LoopCopyDataInit>

0800452c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800452e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004530:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004532:	3104      	adds	r1, #4

08004534 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004534:	480a      	ldr	r0, [pc, #40]	; (8004560 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004538:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800453a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800453c:	d3f6      	bcc.n	800452c <CopyDataInit>
  ldr  r2, =_sbss
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004540:	e002      	b.n	8004548 <LoopFillZerobss>

08004542 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004542:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004544:	f842 3b04 	str.w	r3, [r2], #4

08004548 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004548:	4b08      	ldr	r3, [pc, #32]	; (800456c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800454a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800454c:	d3f9      	bcc.n	8004542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800454e:	f00c f81b 	bl	8010588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004552:	f7fc f949 	bl	80007e8 <main>
  bx  lr    
 8004556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004558:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800455c:	080140c0 	.word	0x080140c0
  ldr  r0, =_sdata
 8004560:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004564:	240000a0 	.word	0x240000a0
  ldr  r2, =_sbss
 8004568:	240000a0 	.word	0x240000a0
  ldr  r3, = _ebss
 800456c:	24001894 	.word	0x24001894

08004570 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004570:	e7fe      	b.n	8004570 <ADC3_IRQHandler>
	...

08004574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800457a:	2003      	movs	r0, #3
 800457c:	f000 f98c 	bl	8004898 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004580:	f006 fb0c 	bl	800ab9c <HAL_RCC_GetSysClockFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <HAL_Init+0x68>)
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	4913      	ldr	r1, [pc, #76]	; (80045e0 <HAL_Init+0x6c>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
 800459c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <HAL_Init+0x68>)
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <HAL_Init+0x6c>)
 80045a8:	5cd3      	ldrb	r3, [r2, r3]
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
 80045b4:	4a0b      	ldr	r2, [pc, #44]	; (80045e4 <HAL_Init+0x70>)
 80045b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045b8:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <HAL_Init+0x74>)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045be:	2000      	movs	r0, #0
 80045c0:	f000 f814 	bl	80045ec <HAL_InitTick>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e002      	b.n	80045d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80045ce:	f7fd fca9 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	58024400 	.word	0x58024400
 80045e0:	080124ac 	.word	0x080124ac
 80045e4:	24000030 	.word	0x24000030
 80045e8:	2400002c 	.word	0x2400002c

080045ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_InitTick+0x60>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e021      	b.n	8004644 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004600:	4b13      	ldr	r3, [pc, #76]	; (8004650 <HAL_InitTick+0x64>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_InitTick+0x60>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4619      	mov	r1, r3
 800460a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800460e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f971 	bl	80048fe <HAL_SYSTICK_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e00e      	b.n	8004644 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b0f      	cmp	r3, #15
 800462a:	d80a      	bhi.n	8004642 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800462c:	2200      	movs	r2, #0
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004634:	f000 f93b 	bl	80048ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004638:	4a06      	ldr	r2, [pc, #24]	; (8004654 <HAL_InitTick+0x68>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	24000038 	.word	0x24000038
 8004650:	2400002c 	.word	0x2400002c
 8004654:	24000034 	.word	0x24000034

08004658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_IncTick+0x20>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_IncTick+0x24>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4413      	add	r3, r2
 8004668:	4a04      	ldr	r2, [pc, #16]	; (800467c <HAL_IncTick+0x24>)
 800466a:	6013      	str	r3, [r2, #0]
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	24000038 	.word	0x24000038
 800467c:	24001880 	.word	0x24001880

08004680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return uwTick;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <HAL_GetTick+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	24001880 	.word	0x24001880

08004698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7ff ffee 	bl	8004680 <HAL_GetTick>
 80046a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b0:	d005      	beq.n	80046be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <HAL_Delay+0x44>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046be:	bf00      	nop
 80046c0:	f7ff ffde 	bl	8004680 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d8f7      	bhi.n	80046c0 <HAL_Delay+0x28>
  {
  }
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	24000038 	.word	0x24000038

080046e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80046e4:	4b03      	ldr	r3, [pc, #12]	; (80046f4 <HAL_GetREVID+0x14>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	0c1b      	lsrs	r3, r3, #16
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	5c001000 	.word	0x5c001000

080046f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <__NVIC_SetPriorityGrouping+0x40>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004714:	4013      	ands	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <__NVIC_SetPriorityGrouping+0x44>)
 8004722:	4313      	orrs	r3, r2
 8004724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004726:	4a04      	ldr	r2, [pc, #16]	; (8004738 <__NVIC_SetPriorityGrouping+0x40>)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	60d3      	str	r3, [r2, #12]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	e000ed00 	.word	0xe000ed00
 800473c:	05fa0000 	.word	0x05fa0000

08004740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <__NVIC_GetPriorityGrouping+0x18>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	0a1b      	lsrs	r3, r3, #8
 800474a:	f003 0307 	and.w	r3, r3, #7
}
 800474e:	4618      	mov	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800476a:	2b00      	cmp	r3, #0
 800476c:	db0b      	blt.n	8004786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	f003 021f 	and.w	r2, r3, #31
 8004774:	4907      	ldr	r1, [pc, #28]	; (8004794 <__NVIC_EnableIRQ+0x38>)
 8004776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	2001      	movs	r0, #1
 800477e:	fa00 f202 	lsl.w	r2, r0, r2
 8004782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	e000e100 	.word	0xe000e100

08004798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db0a      	blt.n	80047c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	490c      	ldr	r1, [pc, #48]	; (80047e4 <__NVIC_SetPriority+0x4c>)
 80047b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	440b      	add	r3, r1
 80047bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047c0:	e00a      	b.n	80047d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4908      	ldr	r1, [pc, #32]	; (80047e8 <__NVIC_SetPriority+0x50>)
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	3b04      	subs	r3, #4
 80047d0:	0112      	lsls	r2, r2, #4
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	440b      	add	r3, r1
 80047d6:	761a      	strb	r2, [r3, #24]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000e100 	.word	0xe000e100
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f1c3 0307 	rsb	r3, r3, #7
 8004806:	2b04      	cmp	r3, #4
 8004808:	bf28      	it	cs
 800480a:	2304      	movcs	r3, #4
 800480c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3304      	adds	r3, #4
 8004812:	2b06      	cmp	r3, #6
 8004814:	d902      	bls.n	800481c <NVIC_EncodePriority+0x30>
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3b03      	subs	r3, #3
 800481a:	e000      	b.n	800481e <NVIC_EncodePriority+0x32>
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43da      	mvns	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	401a      	ands	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fa01 f303 	lsl.w	r3, r1, r3
 800483e:	43d9      	mvns	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004844:	4313      	orrs	r3, r2
         );
}
 8004846:	4618      	mov	r0, r3
 8004848:	3724      	adds	r7, #36	; 0x24
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3b01      	subs	r3, #1
 8004860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004864:	d301      	bcc.n	800486a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004866:	2301      	movs	r3, #1
 8004868:	e00f      	b.n	800488a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800486a:	4a0a      	ldr	r2, [pc, #40]	; (8004894 <SysTick_Config+0x40>)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3b01      	subs	r3, #1
 8004870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004872:	210f      	movs	r1, #15
 8004874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004878:	f7ff ff8e 	bl	8004798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <SysTick_Config+0x40>)
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004882:	4b04      	ldr	r3, [pc, #16]	; (8004894 <SysTick_Config+0x40>)
 8004884:	2207      	movs	r2, #7
 8004886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	e000e010 	.word	0xe000e010

08004898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ff29 	bl	80046f8 <__NVIC_SetPriorityGrouping>
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b086      	sub	sp, #24
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	4603      	mov	r3, r0
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048bc:	f7ff ff40 	bl	8004740 <__NVIC_GetPriorityGrouping>
 80048c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f7ff ff90 	bl	80047ec <NVIC_EncodePriority>
 80048cc:	4602      	mov	r2, r0
 80048ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ff5f 	bl	8004798 <__NVIC_SetPriority>
}
 80048da:	bf00      	nop
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	4603      	mov	r3, r0
 80048ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff ff33 	bl	800475c <__NVIC_EnableIRQ>
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff ffa4 	bl	8004854 <SysTick_Config>
 800490c:	4603      	mov	r3, r0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004920:	f7ff feae 	bl	8004680 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e316      	b.n	8004f5e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a66      	ldr	r2, [pc, #408]	; (8004ad0 <HAL_DMA_Init+0x1b8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04a      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a65      	ldr	r2, [pc, #404]	; (8004ad4 <HAL_DMA_Init+0x1bc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d045      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a63      	ldr	r2, [pc, #396]	; (8004ad8 <HAL_DMA_Init+0x1c0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d040      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a62      	ldr	r2, [pc, #392]	; (8004adc <HAL_DMA_Init+0x1c4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d03b      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a60      	ldr	r2, [pc, #384]	; (8004ae0 <HAL_DMA_Init+0x1c8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d036      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a5f      	ldr	r2, [pc, #380]	; (8004ae4 <HAL_DMA_Init+0x1cc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d031      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a5d      	ldr	r2, [pc, #372]	; (8004ae8 <HAL_DMA_Init+0x1d0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02c      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a5c      	ldr	r2, [pc, #368]	; (8004aec <HAL_DMA_Init+0x1d4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a5a      	ldr	r2, [pc, #360]	; (8004af0 <HAL_DMA_Init+0x1d8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a59      	ldr	r2, [pc, #356]	; (8004af4 <HAL_DMA_Init+0x1dc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a57      	ldr	r2, [pc, #348]	; (8004af8 <HAL_DMA_Init+0x1e0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a56      	ldr	r2, [pc, #344]	; (8004afc <HAL_DMA_Init+0x1e4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a54      	ldr	r2, [pc, #336]	; (8004b00 <HAL_DMA_Init+0x1e8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a53      	ldr	r2, [pc, #332]	; (8004b04 <HAL_DMA_Init+0x1ec>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a51      	ldr	r2, [pc, #324]	; (8004b08 <HAL_DMA_Init+0x1f0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_DMA_Init+0xb8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a50      	ldr	r2, [pc, #320]	; (8004b0c <HAL_DMA_Init+0x1f4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d101      	bne.n	80049d4 <HAL_DMA_Init+0xbc>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <HAL_DMA_Init+0xbe>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 813b 	beq.w	8004c52 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a37      	ldr	r2, [pc, #220]	; (8004ad0 <HAL_DMA_Init+0x1b8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d04a      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a36      	ldr	r2, [pc, #216]	; (8004ad4 <HAL_DMA_Init+0x1bc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d045      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a34      	ldr	r2, [pc, #208]	; (8004ad8 <HAL_DMA_Init+0x1c0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d040      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a33      	ldr	r2, [pc, #204]	; (8004adc <HAL_DMA_Init+0x1c4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d03b      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a31      	ldr	r2, [pc, #196]	; (8004ae0 <HAL_DMA_Init+0x1c8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d036      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a30      	ldr	r2, [pc, #192]	; (8004ae4 <HAL_DMA_Init+0x1cc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d031      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2e      	ldr	r2, [pc, #184]	; (8004ae8 <HAL_DMA_Init+0x1d0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d02c      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a2d      	ldr	r2, [pc, #180]	; (8004aec <HAL_DMA_Init+0x1d4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d027      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2b      	ldr	r2, [pc, #172]	; (8004af0 <HAL_DMA_Init+0x1d8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d022      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2a      	ldr	r2, [pc, #168]	; (8004af4 <HAL_DMA_Init+0x1dc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d01d      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a28      	ldr	r2, [pc, #160]	; (8004af8 <HAL_DMA_Init+0x1e0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d018      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a27      	ldr	r2, [pc, #156]	; (8004afc <HAL_DMA_Init+0x1e4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d013      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a25      	ldr	r2, [pc, #148]	; (8004b00 <HAL_DMA_Init+0x1e8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00e      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a24      	ldr	r2, [pc, #144]	; (8004b04 <HAL_DMA_Init+0x1ec>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <HAL_DMA_Init+0x1f0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_DMA_Init+0x174>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <HAL_DMA_Init+0x1f4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d108      	bne.n	8004a9e <HAL_DMA_Init+0x186>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e007      	b.n	8004aae <HAL_DMA_Init+0x196>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0201 	bic.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004aae:	e02f      	b.n	8004b10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ab0:	f7ff fde6 	bl	8004680 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b05      	cmp	r3, #5
 8004abc:	d928      	bls.n	8004b10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e246      	b.n	8004f5e <HAL_DMA_Init+0x646>
 8004ad0:	40020010 	.word	0x40020010
 8004ad4:	40020028 	.word	0x40020028
 8004ad8:	40020040 	.word	0x40020040
 8004adc:	40020058 	.word	0x40020058
 8004ae0:	40020070 	.word	0x40020070
 8004ae4:	40020088 	.word	0x40020088
 8004ae8:	400200a0 	.word	0x400200a0
 8004aec:	400200b8 	.word	0x400200b8
 8004af0:	40020410 	.word	0x40020410
 8004af4:	40020428 	.word	0x40020428
 8004af8:	40020440 	.word	0x40020440
 8004afc:	40020458 	.word	0x40020458
 8004b00:	40020470 	.word	0x40020470
 8004b04:	40020488 	.word	0x40020488
 8004b08:	400204a0 	.word	0x400204a0
 8004b0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1c8      	bne.n	8004ab0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4b83      	ldr	r3, [pc, #524]	; (8004d38 <HAL_DMA_Init+0x420>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d107      	bne.n	8004b74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b74:	4b71      	ldr	r3, [pc, #452]	; (8004d3c <HAL_DMA_Init+0x424>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b71      	ldr	r3, [pc, #452]	; (8004d40 <HAL_DMA_Init+0x428>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b80:	d328      	bcc.n	8004bd4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b28      	cmp	r3, #40	; 0x28
 8004b88:	d903      	bls.n	8004b92 <HAL_DMA_Init+0x27a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b90:	d917      	bls.n	8004bc2 <HAL_DMA_Init+0x2aa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b3e      	cmp	r3, #62	; 0x3e
 8004b98:	d903      	bls.n	8004ba2 <HAL_DMA_Init+0x28a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b42      	cmp	r3, #66	; 0x42
 8004ba0:	d90f      	bls.n	8004bc2 <HAL_DMA_Init+0x2aa>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b46      	cmp	r3, #70	; 0x46
 8004ba8:	d903      	bls.n	8004bb2 <HAL_DMA_Init+0x29a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b48      	cmp	r3, #72	; 0x48
 8004bb0:	d907      	bls.n	8004bc2 <HAL_DMA_Init+0x2aa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b4e      	cmp	r3, #78	; 0x4e
 8004bb8:	d905      	bls.n	8004bc6 <HAL_DMA_Init+0x2ae>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b52      	cmp	r3, #82	; 0x52
 8004bc0:	d801      	bhi.n	8004bc6 <HAL_DMA_Init+0x2ae>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <HAL_DMA_Init+0x2b0>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0307 	bic.w	r3, r3, #7
 8004bea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d117      	bne.n	8004c2e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f002 fb4d 	bl	80072b0 <DMA_CheckFifoParam>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2240      	movs	r2, #64	; 0x40
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e197      	b.n	8004f5e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f002 fa88 	bl	800714c <DMA_CalcBaseAndBitshift>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	223f      	movs	r2, #63	; 0x3f
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	e0cd      	b.n	8004dee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a3b      	ldr	r2, [pc, #236]	; (8004d44 <HAL_DMA_Init+0x42c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d022      	beq.n	8004ca2 <HAL_DMA_Init+0x38a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a39      	ldr	r2, [pc, #228]	; (8004d48 <HAL_DMA_Init+0x430>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01d      	beq.n	8004ca2 <HAL_DMA_Init+0x38a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a38      	ldr	r2, [pc, #224]	; (8004d4c <HAL_DMA_Init+0x434>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d018      	beq.n	8004ca2 <HAL_DMA_Init+0x38a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a36      	ldr	r2, [pc, #216]	; (8004d50 <HAL_DMA_Init+0x438>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_DMA_Init+0x38a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a35      	ldr	r2, [pc, #212]	; (8004d54 <HAL_DMA_Init+0x43c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00e      	beq.n	8004ca2 <HAL_DMA_Init+0x38a>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a33      	ldr	r2, [pc, #204]	; (8004d58 <HAL_DMA_Init+0x440>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_DMA_Init+0x38a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a32      	ldr	r2, [pc, #200]	; (8004d5c <HAL_DMA_Init+0x444>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_DMA_Init+0x38a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a30      	ldr	r2, [pc, #192]	; (8004d60 <HAL_DMA_Init+0x448>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_DMA_Init+0x38e>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_DMA_Init+0x390>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8097 	beq.w	8004ddc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <HAL_DMA_Init+0x42c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d021      	beq.n	8004cfc <HAL_DMA_Init+0x3e4>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <HAL_DMA_Init+0x430>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01c      	beq.n	8004cfc <HAL_DMA_Init+0x3e4>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <HAL_DMA_Init+0x434>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d017      	beq.n	8004cfc <HAL_DMA_Init+0x3e4>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <HAL_DMA_Init+0x438>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d012      	beq.n	8004cfc <HAL_DMA_Init+0x3e4>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <HAL_DMA_Init+0x43c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00d      	beq.n	8004cfc <HAL_DMA_Init+0x3e4>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <HAL_DMA_Init+0x440>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d008      	beq.n	8004cfc <HAL_DMA_Init+0x3e4>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_DMA_Init+0x444>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <HAL_DMA_Init+0x3e4>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a19      	ldr	r2, [pc, #100]	; (8004d60 <HAL_DMA_Init+0x448>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_DMA_Init+0x44c>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d020      	beq.n	8004d68 <HAL_DMA_Init+0x450>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b80      	cmp	r3, #128	; 0x80
 8004d2c:	d102      	bne.n	8004d34 <HAL_DMA_Init+0x41c>
 8004d2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d32:	e01a      	b.n	8004d6a <HAL_DMA_Init+0x452>
 8004d34:	2300      	movs	r3, #0
 8004d36:	e018      	b.n	8004d6a <HAL_DMA_Init+0x452>
 8004d38:	fe10803f 	.word	0xfe10803f
 8004d3c:	5c001000 	.word	0x5c001000
 8004d40:	ffff0000 	.word	0xffff0000
 8004d44:	58025408 	.word	0x58025408
 8004d48:	5802541c 	.word	0x5802541c
 8004d4c:	58025430 	.word	0x58025430
 8004d50:	58025444 	.word	0x58025444
 8004d54:	58025458 	.word	0x58025458
 8004d58:	5802546c 	.word	0x5802546c
 8004d5c:	58025480 	.word	0x58025480
 8004d60:	58025494 	.word	0x58025494
 8004d64:	fffe000f 	.word	0xfffe000f
 8004d68:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68d2      	ldr	r2, [r2, #12]
 8004d6e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d98:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	4b6e      	ldr	r3, [pc, #440]	; (8004f68 <HAL_DMA_Init+0x650>)
 8004db0:	4413      	add	r3, r2
 8004db2:	4a6e      	ldr	r2, [pc, #440]	; (8004f6c <HAL_DMA_Init+0x654>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	009a      	lsls	r2, r3, #2
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f002 f9c3 	bl	800714c <DMA_CalcBaseAndBitshift>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e008      	b.n	8004dee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2240      	movs	r2, #64	; 0x40
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2203      	movs	r2, #3
 8004de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0b7      	b.n	8004f5e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a5f      	ldr	r2, [pc, #380]	; (8004f70 <HAL_DMA_Init+0x658>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d072      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5d      	ldr	r2, [pc, #372]	; (8004f74 <HAL_DMA_Init+0x65c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d06d      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a5c      	ldr	r2, [pc, #368]	; (8004f78 <HAL_DMA_Init+0x660>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d068      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a5a      	ldr	r2, [pc, #360]	; (8004f7c <HAL_DMA_Init+0x664>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d063      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a59      	ldr	r2, [pc, #356]	; (8004f80 <HAL_DMA_Init+0x668>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d05e      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a57      	ldr	r2, [pc, #348]	; (8004f84 <HAL_DMA_Init+0x66c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d059      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a56      	ldr	r2, [pc, #344]	; (8004f88 <HAL_DMA_Init+0x670>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d054      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a54      	ldr	r2, [pc, #336]	; (8004f8c <HAL_DMA_Init+0x674>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d04f      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a53      	ldr	r2, [pc, #332]	; (8004f90 <HAL_DMA_Init+0x678>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04a      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a51      	ldr	r2, [pc, #324]	; (8004f94 <HAL_DMA_Init+0x67c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d045      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a50      	ldr	r2, [pc, #320]	; (8004f98 <HAL_DMA_Init+0x680>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d040      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a4e      	ldr	r2, [pc, #312]	; (8004f9c <HAL_DMA_Init+0x684>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d03b      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a4d      	ldr	r2, [pc, #308]	; (8004fa0 <HAL_DMA_Init+0x688>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d036      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a4b      	ldr	r2, [pc, #300]	; (8004fa4 <HAL_DMA_Init+0x68c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a4a      	ldr	r2, [pc, #296]	; (8004fa8 <HAL_DMA_Init+0x690>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d02c      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a48      	ldr	r2, [pc, #288]	; (8004fac <HAL_DMA_Init+0x694>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d027      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a47      	ldr	r2, [pc, #284]	; (8004fb0 <HAL_DMA_Init+0x698>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a45      	ldr	r2, [pc, #276]	; (8004fb4 <HAL_DMA_Init+0x69c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a44      	ldr	r2, [pc, #272]	; (8004fb8 <HAL_DMA_Init+0x6a0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a42      	ldr	r2, [pc, #264]	; (8004fbc <HAL_DMA_Init+0x6a4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a41      	ldr	r2, [pc, #260]	; (8004fc0 <HAL_DMA_Init+0x6a8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a3f      	ldr	r2, [pc, #252]	; (8004fc4 <HAL_DMA_Init+0x6ac>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a3e      	ldr	r2, [pc, #248]	; (8004fc8 <HAL_DMA_Init+0x6b0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_DMA_Init+0x5c6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3c      	ldr	r2, [pc, #240]	; (8004fcc <HAL_DMA_Init+0x6b4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <HAL_DMA_Init+0x5ca>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_DMA_Init+0x5cc>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d032      	beq.n	8004f4e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f002 fa5d 	bl	80073a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b80      	cmp	r3, #128	; 0x80
 8004ef4:	d102      	bne.n	8004efc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d010      	beq.n	8004f3c <HAL_DMA_Init+0x624>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d80c      	bhi.n	8004f3c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f002 fada 	bl	80074dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	e008      	b.n	8004f4e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	a7fdabf8 	.word	0xa7fdabf8
 8004f6c:	cccccccd 	.word	0xcccccccd
 8004f70:	40020010 	.word	0x40020010
 8004f74:	40020028 	.word	0x40020028
 8004f78:	40020040 	.word	0x40020040
 8004f7c:	40020058 	.word	0x40020058
 8004f80:	40020070 	.word	0x40020070
 8004f84:	40020088 	.word	0x40020088
 8004f88:	400200a0 	.word	0x400200a0
 8004f8c:	400200b8 	.word	0x400200b8
 8004f90:	40020410 	.word	0x40020410
 8004f94:	40020428 	.word	0x40020428
 8004f98:	40020440 	.word	0x40020440
 8004f9c:	40020458 	.word	0x40020458
 8004fa0:	40020470 	.word	0x40020470
 8004fa4:	40020488 	.word	0x40020488
 8004fa8:	400204a0 	.word	0x400204a0
 8004fac:	400204b8 	.word	0x400204b8
 8004fb0:	58025408 	.word	0x58025408
 8004fb4:	5802541c 	.word	0x5802541c
 8004fb8:	58025430 	.word	0x58025430
 8004fbc:	58025444 	.word	0x58025444
 8004fc0:	58025458 	.word	0x58025458
 8004fc4:	5802546c 	.word	0x5802546c
 8004fc8:	58025480 	.word	0x58025480
 8004fcc:	58025494 	.word	0x58025494

08004fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e226      	b.n	800543a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_DMA_Start_IT+0x2a>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e21f      	b.n	800543a <HAL_DMA_Start_IT+0x46a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	f040 820a 	bne.w	8005424 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a68      	ldr	r2, [pc, #416]	; (80051c4 <HAL_DMA_Start_IT+0x1f4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d04a      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a66      	ldr	r2, [pc, #408]	; (80051c8 <HAL_DMA_Start_IT+0x1f8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d045      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a65      	ldr	r2, [pc, #404]	; (80051cc <HAL_DMA_Start_IT+0x1fc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d040      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a63      	ldr	r2, [pc, #396]	; (80051d0 <HAL_DMA_Start_IT+0x200>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d03b      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a62      	ldr	r2, [pc, #392]	; (80051d4 <HAL_DMA_Start_IT+0x204>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d036      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a60      	ldr	r2, [pc, #384]	; (80051d8 <HAL_DMA_Start_IT+0x208>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d031      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a5f      	ldr	r2, [pc, #380]	; (80051dc <HAL_DMA_Start_IT+0x20c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d02c      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a5d      	ldr	r2, [pc, #372]	; (80051e0 <HAL_DMA_Start_IT+0x210>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d027      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a5c      	ldr	r2, [pc, #368]	; (80051e4 <HAL_DMA_Start_IT+0x214>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d022      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a5a      	ldr	r2, [pc, #360]	; (80051e8 <HAL_DMA_Start_IT+0x218>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01d      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a59      	ldr	r2, [pc, #356]	; (80051ec <HAL_DMA_Start_IT+0x21c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d018      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a57      	ldr	r2, [pc, #348]	; (80051f0 <HAL_DMA_Start_IT+0x220>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a56      	ldr	r2, [pc, #344]	; (80051f4 <HAL_DMA_Start_IT+0x224>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00e      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a54      	ldr	r2, [pc, #336]	; (80051f8 <HAL_DMA_Start_IT+0x228>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d009      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a53      	ldr	r2, [pc, #332]	; (80051fc <HAL_DMA_Start_IT+0x22c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a51      	ldr	r2, [pc, #324]	; (8005200 <HAL_DMA_Start_IT+0x230>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d108      	bne.n	80050d0 <HAL_DMA_Start_IT+0x100>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e007      	b.n	80050e0 <HAL_DMA_Start_IT+0x110>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f001 fe84 	bl	8006df4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a34      	ldr	r2, [pc, #208]	; (80051c4 <HAL_DMA_Start_IT+0x1f4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d04a      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a33      	ldr	r2, [pc, #204]	; (80051c8 <HAL_DMA_Start_IT+0x1f8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d045      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a31      	ldr	r2, [pc, #196]	; (80051cc <HAL_DMA_Start_IT+0x1fc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d040      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a30      	ldr	r2, [pc, #192]	; (80051d0 <HAL_DMA_Start_IT+0x200>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d03b      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2e      	ldr	r2, [pc, #184]	; (80051d4 <HAL_DMA_Start_IT+0x204>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d036      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2d      	ldr	r2, [pc, #180]	; (80051d8 <HAL_DMA_Start_IT+0x208>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d031      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2b      	ldr	r2, [pc, #172]	; (80051dc <HAL_DMA_Start_IT+0x20c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d02c      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <HAL_DMA_Start_IT+0x210>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d027      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a28      	ldr	r2, [pc, #160]	; (80051e4 <HAL_DMA_Start_IT+0x214>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d022      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a27      	ldr	r2, [pc, #156]	; (80051e8 <HAL_DMA_Start_IT+0x218>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d01d      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a25      	ldr	r2, [pc, #148]	; (80051ec <HAL_DMA_Start_IT+0x21c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a24      	ldr	r2, [pc, #144]	; (80051f0 <HAL_DMA_Start_IT+0x220>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a22      	ldr	r2, [pc, #136]	; (80051f4 <HAL_DMA_Start_IT+0x224>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a21      	ldr	r2, [pc, #132]	; (80051f8 <HAL_DMA_Start_IT+0x228>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1f      	ldr	r2, [pc, #124]	; (80051fc <HAL_DMA_Start_IT+0x22c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <HAL_DMA_Start_IT+0x230>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d101      	bne.n	8005190 <HAL_DMA_Start_IT+0x1c0>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <HAL_DMA_Start_IT+0x1c2>
 8005190:	2300      	movs	r3, #0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d036      	beq.n	8005204 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 021e 	bic.w	r2, r3, #30
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0216 	orr.w	r2, r2, #22
 80051a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03e      	beq.n	8005230 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0208 	orr.w	r2, r2, #8
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e035      	b.n	8005230 <HAL_DMA_Start_IT+0x260>
 80051c4:	40020010 	.word	0x40020010
 80051c8:	40020028 	.word	0x40020028
 80051cc:	40020040 	.word	0x40020040
 80051d0:	40020058 	.word	0x40020058
 80051d4:	40020070 	.word	0x40020070
 80051d8:	40020088 	.word	0x40020088
 80051dc:	400200a0 	.word	0x400200a0
 80051e0:	400200b8 	.word	0x400200b8
 80051e4:	40020410 	.word	0x40020410
 80051e8:	40020428 	.word	0x40020428
 80051ec:	40020440 	.word	0x40020440
 80051f0:	40020458 	.word	0x40020458
 80051f4:	40020470 	.word	0x40020470
 80051f8:	40020488 	.word	0x40020488
 80051fc:	400204a0 	.word	0x400204a0
 8005200:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 020e 	bic.w	r2, r3, #14
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 020a 	orr.w	r2, r2, #10
 8005216:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0204 	orr.w	r2, r2, #4
 800522e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a83      	ldr	r2, [pc, #524]	; (8005444 <HAL_DMA_Start_IT+0x474>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d072      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a82      	ldr	r2, [pc, #520]	; (8005448 <HAL_DMA_Start_IT+0x478>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d06d      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a80      	ldr	r2, [pc, #512]	; (800544c <HAL_DMA_Start_IT+0x47c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d068      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a7f      	ldr	r2, [pc, #508]	; (8005450 <HAL_DMA_Start_IT+0x480>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d063      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a7d      	ldr	r2, [pc, #500]	; (8005454 <HAL_DMA_Start_IT+0x484>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d05e      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7c      	ldr	r2, [pc, #496]	; (8005458 <HAL_DMA_Start_IT+0x488>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d059      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a7a      	ldr	r2, [pc, #488]	; (800545c <HAL_DMA_Start_IT+0x48c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d054      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a79      	ldr	r2, [pc, #484]	; (8005460 <HAL_DMA_Start_IT+0x490>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d04f      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a77      	ldr	r2, [pc, #476]	; (8005464 <HAL_DMA_Start_IT+0x494>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d04a      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a76      	ldr	r2, [pc, #472]	; (8005468 <HAL_DMA_Start_IT+0x498>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d045      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a74      	ldr	r2, [pc, #464]	; (800546c <HAL_DMA_Start_IT+0x49c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d040      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a73      	ldr	r2, [pc, #460]	; (8005470 <HAL_DMA_Start_IT+0x4a0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d03b      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a71      	ldr	r2, [pc, #452]	; (8005474 <HAL_DMA_Start_IT+0x4a4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d036      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a70      	ldr	r2, [pc, #448]	; (8005478 <HAL_DMA_Start_IT+0x4a8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d031      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a6e      	ldr	r2, [pc, #440]	; (800547c <HAL_DMA_Start_IT+0x4ac>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02c      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a6d      	ldr	r2, [pc, #436]	; (8005480 <HAL_DMA_Start_IT+0x4b0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d027      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a6b      	ldr	r2, [pc, #428]	; (8005484 <HAL_DMA_Start_IT+0x4b4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d022      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6a      	ldr	r2, [pc, #424]	; (8005488 <HAL_DMA_Start_IT+0x4b8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d01d      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a68      	ldr	r2, [pc, #416]	; (800548c <HAL_DMA_Start_IT+0x4bc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a67      	ldr	r2, [pc, #412]	; (8005490 <HAL_DMA_Start_IT+0x4c0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a65      	ldr	r2, [pc, #404]	; (8005494 <HAL_DMA_Start_IT+0x4c4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a64      	ldr	r2, [pc, #400]	; (8005498 <HAL_DMA_Start_IT+0x4c8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a62      	ldr	r2, [pc, #392]	; (800549c <HAL_DMA_Start_IT+0x4cc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a61      	ldr	r2, [pc, #388]	; (80054a0 <HAL_DMA_Start_IT+0x4d0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d101      	bne.n	8005324 <HAL_DMA_Start_IT+0x354>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_DMA_Start_IT+0x356>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01a      	beq.n	8005360 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005346:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a37      	ldr	r2, [pc, #220]	; (8005444 <HAL_DMA_Start_IT+0x474>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d04a      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a36      	ldr	r2, [pc, #216]	; (8005448 <HAL_DMA_Start_IT+0x478>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d045      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a34      	ldr	r2, [pc, #208]	; (800544c <HAL_DMA_Start_IT+0x47c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d040      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a33      	ldr	r2, [pc, #204]	; (8005450 <HAL_DMA_Start_IT+0x480>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d03b      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a31      	ldr	r2, [pc, #196]	; (8005454 <HAL_DMA_Start_IT+0x484>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d036      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a30      	ldr	r2, [pc, #192]	; (8005458 <HAL_DMA_Start_IT+0x488>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d031      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2e      	ldr	r2, [pc, #184]	; (800545c <HAL_DMA_Start_IT+0x48c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d02c      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2d      	ldr	r2, [pc, #180]	; (8005460 <HAL_DMA_Start_IT+0x490>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d027      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <HAL_DMA_Start_IT+0x494>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d022      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <HAL_DMA_Start_IT+0x498>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d01d      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a28      	ldr	r2, [pc, #160]	; (800546c <HAL_DMA_Start_IT+0x49c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d018      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a27      	ldr	r2, [pc, #156]	; (8005470 <HAL_DMA_Start_IT+0x4a0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a25      	ldr	r2, [pc, #148]	; (8005474 <HAL_DMA_Start_IT+0x4a4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00e      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a24      	ldr	r2, [pc, #144]	; (8005478 <HAL_DMA_Start_IT+0x4a8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d009      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a22      	ldr	r2, [pc, #136]	; (800547c <HAL_DMA_Start_IT+0x4ac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a21      	ldr	r2, [pc, #132]	; (8005480 <HAL_DMA_Start_IT+0x4b0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <HAL_DMA_Start_IT+0x442>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	e012      	b.n	8005438 <HAL_DMA_Start_IT+0x468>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e009      	b.n	8005438 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800542a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40020010 	.word	0x40020010
 8005448:	40020028 	.word	0x40020028
 800544c:	40020040 	.word	0x40020040
 8005450:	40020058 	.word	0x40020058
 8005454:	40020070 	.word	0x40020070
 8005458:	40020088 	.word	0x40020088
 800545c:	400200a0 	.word	0x400200a0
 8005460:	400200b8 	.word	0x400200b8
 8005464:	40020410 	.word	0x40020410
 8005468:	40020428 	.word	0x40020428
 800546c:	40020440 	.word	0x40020440
 8005470:	40020458 	.word	0x40020458
 8005474:	40020470 	.word	0x40020470
 8005478:	40020488 	.word	0x40020488
 800547c:	400204a0 	.word	0x400204a0
 8005480:	400204b8 	.word	0x400204b8
 8005484:	58025408 	.word	0x58025408
 8005488:	5802541c 	.word	0x5802541c
 800548c:	58025430 	.word	0x58025430
 8005490:	58025444 	.word	0x58025444
 8005494:	58025458 	.word	0x58025458
 8005498:	5802546c 	.word	0x5802546c
 800549c:	58025480 	.word	0x58025480
 80054a0:	58025494 	.word	0x58025494

080054a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80054ac:	f7ff f8e8 	bl	8004680 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e2dc      	b.n	8005a76 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d008      	beq.n	80054da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e2cd      	b.n	8005a76 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a76      	ldr	r2, [pc, #472]	; (80056b8 <HAL_DMA_Abort+0x214>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d04a      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a74      	ldr	r2, [pc, #464]	; (80056bc <HAL_DMA_Abort+0x218>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d045      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a73      	ldr	r2, [pc, #460]	; (80056c0 <HAL_DMA_Abort+0x21c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d040      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a71      	ldr	r2, [pc, #452]	; (80056c4 <HAL_DMA_Abort+0x220>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d03b      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a70      	ldr	r2, [pc, #448]	; (80056c8 <HAL_DMA_Abort+0x224>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d036      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6e      	ldr	r2, [pc, #440]	; (80056cc <HAL_DMA_Abort+0x228>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d031      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6d      	ldr	r2, [pc, #436]	; (80056d0 <HAL_DMA_Abort+0x22c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d02c      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a6b      	ldr	r2, [pc, #428]	; (80056d4 <HAL_DMA_Abort+0x230>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d027      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a6a      	ldr	r2, [pc, #424]	; (80056d8 <HAL_DMA_Abort+0x234>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d022      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a68      	ldr	r2, [pc, #416]	; (80056dc <HAL_DMA_Abort+0x238>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01d      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a67      	ldr	r2, [pc, #412]	; (80056e0 <HAL_DMA_Abort+0x23c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d018      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a65      	ldr	r2, [pc, #404]	; (80056e4 <HAL_DMA_Abort+0x240>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a64      	ldr	r2, [pc, #400]	; (80056e8 <HAL_DMA_Abort+0x244>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00e      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a62      	ldr	r2, [pc, #392]	; (80056ec <HAL_DMA_Abort+0x248>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a61      	ldr	r2, [pc, #388]	; (80056f0 <HAL_DMA_Abort+0x24c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_DMA_Abort+0xd6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a5f      	ldr	r2, [pc, #380]	; (80056f4 <HAL_DMA_Abort+0x250>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d101      	bne.n	800557e <HAL_DMA_Abort+0xda>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <HAL_DMA_Abort+0xdc>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d013      	beq.n	80055ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 021e 	bic.w	r2, r2, #30
 8005592:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	e00a      	b.n	80055c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 020e 	bic.w	r2, r2, #14
 80055ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a3c      	ldr	r2, [pc, #240]	; (80056b8 <HAL_DMA_Abort+0x214>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d072      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a3a      	ldr	r2, [pc, #232]	; (80056bc <HAL_DMA_Abort+0x218>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d06d      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a39      	ldr	r2, [pc, #228]	; (80056c0 <HAL_DMA_Abort+0x21c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d068      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a37      	ldr	r2, [pc, #220]	; (80056c4 <HAL_DMA_Abort+0x220>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d063      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a36      	ldr	r2, [pc, #216]	; (80056c8 <HAL_DMA_Abort+0x224>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d05e      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a34      	ldr	r2, [pc, #208]	; (80056cc <HAL_DMA_Abort+0x228>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d059      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a33      	ldr	r2, [pc, #204]	; (80056d0 <HAL_DMA_Abort+0x22c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d054      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a31      	ldr	r2, [pc, #196]	; (80056d4 <HAL_DMA_Abort+0x230>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d04f      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a30      	ldr	r2, [pc, #192]	; (80056d8 <HAL_DMA_Abort+0x234>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d04a      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2e      	ldr	r2, [pc, #184]	; (80056dc <HAL_DMA_Abort+0x238>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d045      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <HAL_DMA_Abort+0x23c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d040      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <HAL_DMA_Abort+0x240>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d03b      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2a      	ldr	r2, [pc, #168]	; (80056e8 <HAL_DMA_Abort+0x244>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d036      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a28      	ldr	r2, [pc, #160]	; (80056ec <HAL_DMA_Abort+0x248>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d031      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a27      	ldr	r2, [pc, #156]	; (80056f0 <HAL_DMA_Abort+0x24c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d02c      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <HAL_DMA_Abort+0x250>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d027      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a24      	ldr	r2, [pc, #144]	; (80056f8 <HAL_DMA_Abort+0x254>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d022      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a22      	ldr	r2, [pc, #136]	; (80056fc <HAL_DMA_Abort+0x258>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01d      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a21      	ldr	r2, [pc, #132]	; (8005700 <HAL_DMA_Abort+0x25c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d018      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1f      	ldr	r2, [pc, #124]	; (8005704 <HAL_DMA_Abort+0x260>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <HAL_DMA_Abort+0x264>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1c      	ldr	r2, [pc, #112]	; (800570c <HAL_DMA_Abort+0x268>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d009      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <HAL_DMA_Abort+0x26c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_DMA_Abort+0x20e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a19      	ldr	r2, [pc, #100]	; (8005714 <HAL_DMA_Abort+0x270>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d132      	bne.n	8005718 <HAL_DMA_Abort+0x274>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e031      	b.n	800571a <HAL_DMA_Abort+0x276>
 80056b6:	bf00      	nop
 80056b8:	40020010 	.word	0x40020010
 80056bc:	40020028 	.word	0x40020028
 80056c0:	40020040 	.word	0x40020040
 80056c4:	40020058 	.word	0x40020058
 80056c8:	40020070 	.word	0x40020070
 80056cc:	40020088 	.word	0x40020088
 80056d0:	400200a0 	.word	0x400200a0
 80056d4:	400200b8 	.word	0x400200b8
 80056d8:	40020410 	.word	0x40020410
 80056dc:	40020428 	.word	0x40020428
 80056e0:	40020440 	.word	0x40020440
 80056e4:	40020458 	.word	0x40020458
 80056e8:	40020470 	.word	0x40020470
 80056ec:	40020488 	.word	0x40020488
 80056f0:	400204a0 	.word	0x400204a0
 80056f4:	400204b8 	.word	0x400204b8
 80056f8:	58025408 	.word	0x58025408
 80056fc:	5802541c 	.word	0x5802541c
 8005700:	58025430 	.word	0x58025430
 8005704:	58025444 	.word	0x58025444
 8005708:	58025458 	.word	0x58025458
 800570c:	5802546c 	.word	0x5802546c
 8005710:	58025480 	.word	0x58025480
 8005714:	58025494 	.word	0x58025494
 8005718:	2300      	movs	r3, #0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800572c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6d      	ldr	r2, [pc, #436]	; (80058e8 <HAL_DMA_Abort+0x444>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d04a      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a6b      	ldr	r2, [pc, #428]	; (80058ec <HAL_DMA_Abort+0x448>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d045      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a6a      	ldr	r2, [pc, #424]	; (80058f0 <HAL_DMA_Abort+0x44c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d040      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a68      	ldr	r2, [pc, #416]	; (80058f4 <HAL_DMA_Abort+0x450>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d03b      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a67      	ldr	r2, [pc, #412]	; (80058f8 <HAL_DMA_Abort+0x454>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d036      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a65      	ldr	r2, [pc, #404]	; (80058fc <HAL_DMA_Abort+0x458>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d031      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a64      	ldr	r2, [pc, #400]	; (8005900 <HAL_DMA_Abort+0x45c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d02c      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a62      	ldr	r2, [pc, #392]	; (8005904 <HAL_DMA_Abort+0x460>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d027      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a61      	ldr	r2, [pc, #388]	; (8005908 <HAL_DMA_Abort+0x464>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d022      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a5f      	ldr	r2, [pc, #380]	; (800590c <HAL_DMA_Abort+0x468>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01d      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a5e      	ldr	r2, [pc, #376]	; (8005910 <HAL_DMA_Abort+0x46c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d018      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a5c      	ldr	r2, [pc, #368]	; (8005914 <HAL_DMA_Abort+0x470>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a5b      	ldr	r2, [pc, #364]	; (8005918 <HAL_DMA_Abort+0x474>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a59      	ldr	r2, [pc, #356]	; (800591c <HAL_DMA_Abort+0x478>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a58      	ldr	r2, [pc, #352]	; (8005920 <HAL_DMA_Abort+0x47c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_DMA_Abort+0x32a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a56      	ldr	r2, [pc, #344]	; (8005924 <HAL_DMA_Abort+0x480>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d108      	bne.n	80057e0 <HAL_DMA_Abort+0x33c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0201 	bic.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	e007      	b.n	80057f0 <HAL_DMA_Abort+0x34c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80057f0:	e013      	b.n	800581a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057f2:	f7fe ff45 	bl	8004680 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b05      	cmp	r3, #5
 80057fe:	d90c      	bls.n	800581a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2203      	movs	r2, #3
 800580a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e12d      	b.n	8005a76 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e5      	bne.n	80057f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <HAL_DMA_Abort+0x444>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d04a      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a2d      	ldr	r2, [pc, #180]	; (80058ec <HAL_DMA_Abort+0x448>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d045      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2c      	ldr	r2, [pc, #176]	; (80058f0 <HAL_DMA_Abort+0x44c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d040      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <HAL_DMA_Abort+0x450>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d03b      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <HAL_DMA_Abort+0x454>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d036      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a27      	ldr	r2, [pc, #156]	; (80058fc <HAL_DMA_Abort+0x458>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d031      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a26      	ldr	r2, [pc, #152]	; (8005900 <HAL_DMA_Abort+0x45c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d02c      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a24      	ldr	r2, [pc, #144]	; (8005904 <HAL_DMA_Abort+0x460>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d027      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a23      	ldr	r2, [pc, #140]	; (8005908 <HAL_DMA_Abort+0x464>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d022      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a21      	ldr	r2, [pc, #132]	; (800590c <HAL_DMA_Abort+0x468>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01d      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a20      	ldr	r2, [pc, #128]	; (8005910 <HAL_DMA_Abort+0x46c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d018      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <HAL_DMA_Abort+0x470>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <HAL_DMA_Abort+0x474>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00e      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1b      	ldr	r2, [pc, #108]	; (800591c <HAL_DMA_Abort+0x478>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d009      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1a      	ldr	r2, [pc, #104]	; (8005920 <HAL_DMA_Abort+0x47c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_DMA_Abort+0x422>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a18      	ldr	r2, [pc, #96]	; (8005924 <HAL_DMA_Abort+0x480>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d101      	bne.n	80058ca <HAL_DMA_Abort+0x426>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <HAL_DMA_Abort+0x428>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02b      	beq.n	8005928 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	223f      	movs	r2, #63	; 0x3f
 80058e0:	409a      	lsls	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	609a      	str	r2, [r3, #8]
 80058e6:	e02a      	b.n	800593e <HAL_DMA_Abort+0x49a>
 80058e8:	40020010 	.word	0x40020010
 80058ec:	40020028 	.word	0x40020028
 80058f0:	40020040 	.word	0x40020040
 80058f4:	40020058 	.word	0x40020058
 80058f8:	40020070 	.word	0x40020070
 80058fc:	40020088 	.word	0x40020088
 8005900:	400200a0 	.word	0x400200a0
 8005904:	400200b8 	.word	0x400200b8
 8005908:	40020410 	.word	0x40020410
 800590c:	40020428 	.word	0x40020428
 8005910:	40020440 	.word	0x40020440
 8005914:	40020458 	.word	0x40020458
 8005918:	40020470 	.word	0x40020470
 800591c:	40020488 	.word	0x40020488
 8005920:	400204a0 	.word	0x400204a0
 8005924:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2201      	movs	r2, #1
 8005938:	409a      	lsls	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a4f      	ldr	r2, [pc, #316]	; (8005a80 <HAL_DMA_Abort+0x5dc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d072      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a4d      	ldr	r2, [pc, #308]	; (8005a84 <HAL_DMA_Abort+0x5e0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d06d      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a4c      	ldr	r2, [pc, #304]	; (8005a88 <HAL_DMA_Abort+0x5e4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d068      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a4a      	ldr	r2, [pc, #296]	; (8005a8c <HAL_DMA_Abort+0x5e8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d063      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a49      	ldr	r2, [pc, #292]	; (8005a90 <HAL_DMA_Abort+0x5ec>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d05e      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a47      	ldr	r2, [pc, #284]	; (8005a94 <HAL_DMA_Abort+0x5f0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d059      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a46      	ldr	r2, [pc, #280]	; (8005a98 <HAL_DMA_Abort+0x5f4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d054      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a44      	ldr	r2, [pc, #272]	; (8005a9c <HAL_DMA_Abort+0x5f8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d04f      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a43      	ldr	r2, [pc, #268]	; (8005aa0 <HAL_DMA_Abort+0x5fc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d04a      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a41      	ldr	r2, [pc, #260]	; (8005aa4 <HAL_DMA_Abort+0x600>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d045      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a40      	ldr	r2, [pc, #256]	; (8005aa8 <HAL_DMA_Abort+0x604>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d040      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a3e      	ldr	r2, [pc, #248]	; (8005aac <HAL_DMA_Abort+0x608>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d03b      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a3d      	ldr	r2, [pc, #244]	; (8005ab0 <HAL_DMA_Abort+0x60c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d036      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a3b      	ldr	r2, [pc, #236]	; (8005ab4 <HAL_DMA_Abort+0x610>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d031      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a3a      	ldr	r2, [pc, #232]	; (8005ab8 <HAL_DMA_Abort+0x614>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d02c      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a38      	ldr	r2, [pc, #224]	; (8005abc <HAL_DMA_Abort+0x618>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d027      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a37      	ldr	r2, [pc, #220]	; (8005ac0 <HAL_DMA_Abort+0x61c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d022      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a35      	ldr	r2, [pc, #212]	; (8005ac4 <HAL_DMA_Abort+0x620>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01d      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a34      	ldr	r2, [pc, #208]	; (8005ac8 <HAL_DMA_Abort+0x624>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d018      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a32      	ldr	r2, [pc, #200]	; (8005acc <HAL_DMA_Abort+0x628>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a31      	ldr	r2, [pc, #196]	; (8005ad0 <HAL_DMA_Abort+0x62c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00e      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <HAL_DMA_Abort+0x630>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a2e      	ldr	r2, [pc, #184]	; (8005ad8 <HAL_DMA_Abort+0x634>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_DMA_Abort+0x58a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a2c      	ldr	r2, [pc, #176]	; (8005adc <HAL_DMA_Abort+0x638>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <HAL_DMA_Abort+0x58e>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_DMA_Abort+0x590>
 8005a32:	2300      	movs	r3, #0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d015      	beq.n	8005a64 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a40:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a58:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a62:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40020010 	.word	0x40020010
 8005a84:	40020028 	.word	0x40020028
 8005a88:	40020040 	.word	0x40020040
 8005a8c:	40020058 	.word	0x40020058
 8005a90:	40020070 	.word	0x40020070
 8005a94:	40020088 	.word	0x40020088
 8005a98:	400200a0 	.word	0x400200a0
 8005a9c:	400200b8 	.word	0x400200b8
 8005aa0:	40020410 	.word	0x40020410
 8005aa4:	40020428 	.word	0x40020428
 8005aa8:	40020440 	.word	0x40020440
 8005aac:	40020458 	.word	0x40020458
 8005ab0:	40020470 	.word	0x40020470
 8005ab4:	40020488 	.word	0x40020488
 8005ab8:	400204a0 	.word	0x400204a0
 8005abc:	400204b8 	.word	0x400204b8
 8005ac0:	58025408 	.word	0x58025408
 8005ac4:	5802541c 	.word	0x5802541c
 8005ac8:	58025430 	.word	0x58025430
 8005acc:	58025444 	.word	0x58025444
 8005ad0:	58025458 	.word	0x58025458
 8005ad4:	5802546c 	.word	0x5802546c
 8005ad8:	58025480 	.word	0x58025480
 8005adc:	58025494 	.word	0x58025494

08005ae0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e237      	b.n	8005f62 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d004      	beq.n	8005b08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e22c      	b.n	8005f62 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a5c      	ldr	r2, [pc, #368]	; (8005c80 <HAL_DMA_Abort_IT+0x1a0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d04a      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a5b      	ldr	r2, [pc, #364]	; (8005c84 <HAL_DMA_Abort_IT+0x1a4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d045      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a59      	ldr	r2, [pc, #356]	; (8005c88 <HAL_DMA_Abort_IT+0x1a8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d040      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a58      	ldr	r2, [pc, #352]	; (8005c8c <HAL_DMA_Abort_IT+0x1ac>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d03b      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a56      	ldr	r2, [pc, #344]	; (8005c90 <HAL_DMA_Abort_IT+0x1b0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d036      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a55      	ldr	r2, [pc, #340]	; (8005c94 <HAL_DMA_Abort_IT+0x1b4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d031      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a53      	ldr	r2, [pc, #332]	; (8005c98 <HAL_DMA_Abort_IT+0x1b8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d02c      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a52      	ldr	r2, [pc, #328]	; (8005c9c <HAL_DMA_Abort_IT+0x1bc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d027      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a50      	ldr	r2, [pc, #320]	; (8005ca0 <HAL_DMA_Abort_IT+0x1c0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d022      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a4f      	ldr	r2, [pc, #316]	; (8005ca4 <HAL_DMA_Abort_IT+0x1c4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d01d      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a4d      	ldr	r2, [pc, #308]	; (8005ca8 <HAL_DMA_Abort_IT+0x1c8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d018      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a4c      	ldr	r2, [pc, #304]	; (8005cac <HAL_DMA_Abort_IT+0x1cc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d013      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a4a      	ldr	r2, [pc, #296]	; (8005cb0 <HAL_DMA_Abort_IT+0x1d0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00e      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a49      	ldr	r2, [pc, #292]	; (8005cb4 <HAL_DMA_Abort_IT+0x1d4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d009      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a47      	ldr	r2, [pc, #284]	; (8005cb8 <HAL_DMA_Abort_IT+0x1d8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d004      	beq.n	8005ba8 <HAL_DMA_Abort_IT+0xc8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a46      	ldr	r2, [pc, #280]	; (8005cbc <HAL_DMA_Abort_IT+0x1dc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d101      	bne.n	8005bac <HAL_DMA_Abort_IT+0xcc>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <HAL_DMA_Abort_IT+0xce>
 8005bac:	2300      	movs	r3, #0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 8086 	beq.w	8005cc0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2204      	movs	r2, #4
 8005bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2f      	ldr	r2, [pc, #188]	; (8005c80 <HAL_DMA_Abort_IT+0x1a0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d04a      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2e      	ldr	r2, [pc, #184]	; (8005c84 <HAL_DMA_Abort_IT+0x1a4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d045      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2c      	ldr	r2, [pc, #176]	; (8005c88 <HAL_DMA_Abort_IT+0x1a8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d040      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a2b      	ldr	r2, [pc, #172]	; (8005c8c <HAL_DMA_Abort_IT+0x1ac>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d03b      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a29      	ldr	r2, [pc, #164]	; (8005c90 <HAL_DMA_Abort_IT+0x1b0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d036      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a28      	ldr	r2, [pc, #160]	; (8005c94 <HAL_DMA_Abort_IT+0x1b4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d031      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a26      	ldr	r2, [pc, #152]	; (8005c98 <HAL_DMA_Abort_IT+0x1b8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d02c      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a25      	ldr	r2, [pc, #148]	; (8005c9c <HAL_DMA_Abort_IT+0x1bc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d027      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a23      	ldr	r2, [pc, #140]	; (8005ca0 <HAL_DMA_Abort_IT+0x1c0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d022      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a22      	ldr	r2, [pc, #136]	; (8005ca4 <HAL_DMA_Abort_IT+0x1c4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d01d      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a20      	ldr	r2, [pc, #128]	; (8005ca8 <HAL_DMA_Abort_IT+0x1c8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d018      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <HAL_DMA_Abort_IT+0x1cc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d013      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <HAL_DMA_Abort_IT+0x1d0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00e      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1c      	ldr	r2, [pc, #112]	; (8005cb4 <HAL_DMA_Abort_IT+0x1d4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d009      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <HAL_DMA_Abort_IT+0x1d8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_DMA_Abort_IT+0x17c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <HAL_DMA_Abort_IT+0x1dc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d108      	bne.n	8005c6e <HAL_DMA_Abort_IT+0x18e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e178      	b.n	8005f60 <HAL_DMA_Abort_IT+0x480>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e16f      	b.n	8005f60 <HAL_DMA_Abort_IT+0x480>
 8005c80:	40020010 	.word	0x40020010
 8005c84:	40020028 	.word	0x40020028
 8005c88:	40020040 	.word	0x40020040
 8005c8c:	40020058 	.word	0x40020058
 8005c90:	40020070 	.word	0x40020070
 8005c94:	40020088 	.word	0x40020088
 8005c98:	400200a0 	.word	0x400200a0
 8005c9c:	400200b8 	.word	0x400200b8
 8005ca0:	40020410 	.word	0x40020410
 8005ca4:	40020428 	.word	0x40020428
 8005ca8:	40020440 	.word	0x40020440
 8005cac:	40020458 	.word	0x40020458
 8005cb0:	40020470 	.word	0x40020470
 8005cb4:	40020488 	.word	0x40020488
 8005cb8:	400204a0 	.word	0x400204a0
 8005cbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 020e 	bic.w	r2, r2, #14
 8005cce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a6c      	ldr	r2, [pc, #432]	; (8005e88 <HAL_DMA_Abort_IT+0x3a8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d04a      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a6b      	ldr	r2, [pc, #428]	; (8005e8c <HAL_DMA_Abort_IT+0x3ac>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d045      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a69      	ldr	r2, [pc, #420]	; (8005e90 <HAL_DMA_Abort_IT+0x3b0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d040      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a68      	ldr	r2, [pc, #416]	; (8005e94 <HAL_DMA_Abort_IT+0x3b4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d03b      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a66      	ldr	r2, [pc, #408]	; (8005e98 <HAL_DMA_Abort_IT+0x3b8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d036      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a65      	ldr	r2, [pc, #404]	; (8005e9c <HAL_DMA_Abort_IT+0x3bc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d031      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a63      	ldr	r2, [pc, #396]	; (8005ea0 <HAL_DMA_Abort_IT+0x3c0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d02c      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a62      	ldr	r2, [pc, #392]	; (8005ea4 <HAL_DMA_Abort_IT+0x3c4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d027      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a60      	ldr	r2, [pc, #384]	; (8005ea8 <HAL_DMA_Abort_IT+0x3c8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a5f      	ldr	r2, [pc, #380]	; (8005eac <HAL_DMA_Abort_IT+0x3cc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d01d      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a5d      	ldr	r2, [pc, #372]	; (8005eb0 <HAL_DMA_Abort_IT+0x3d0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a5c      	ldr	r2, [pc, #368]	; (8005eb4 <HAL_DMA_Abort_IT+0x3d4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5a      	ldr	r2, [pc, #360]	; (8005eb8 <HAL_DMA_Abort_IT+0x3d8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a59      	ldr	r2, [pc, #356]	; (8005ebc <HAL_DMA_Abort_IT+0x3dc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a57      	ldr	r2, [pc, #348]	; (8005ec0 <HAL_DMA_Abort_IT+0x3e0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x290>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a56      	ldr	r2, [pc, #344]	; (8005ec4 <HAL_DMA_Abort_IT+0x3e4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <HAL_DMA_Abort_IT+0x2a2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	e007      	b.n	8005d92 <HAL_DMA_Abort_IT+0x2b2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a3c      	ldr	r2, [pc, #240]	; (8005e88 <HAL_DMA_Abort_IT+0x3a8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d072      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a3a      	ldr	r2, [pc, #232]	; (8005e8c <HAL_DMA_Abort_IT+0x3ac>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d06d      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a39      	ldr	r2, [pc, #228]	; (8005e90 <HAL_DMA_Abort_IT+0x3b0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d068      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a37      	ldr	r2, [pc, #220]	; (8005e94 <HAL_DMA_Abort_IT+0x3b4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d063      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a36      	ldr	r2, [pc, #216]	; (8005e98 <HAL_DMA_Abort_IT+0x3b8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d05e      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a34      	ldr	r2, [pc, #208]	; (8005e9c <HAL_DMA_Abort_IT+0x3bc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d059      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a33      	ldr	r2, [pc, #204]	; (8005ea0 <HAL_DMA_Abort_IT+0x3c0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d054      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a31      	ldr	r2, [pc, #196]	; (8005ea4 <HAL_DMA_Abort_IT+0x3c4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d04f      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a30      	ldr	r2, [pc, #192]	; (8005ea8 <HAL_DMA_Abort_IT+0x3c8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d04a      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a2e      	ldr	r2, [pc, #184]	; (8005eac <HAL_DMA_Abort_IT+0x3cc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d045      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a2d      	ldr	r2, [pc, #180]	; (8005eb0 <HAL_DMA_Abort_IT+0x3d0>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d040      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2b      	ldr	r2, [pc, #172]	; (8005eb4 <HAL_DMA_Abort_IT+0x3d4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d03b      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a2a      	ldr	r2, [pc, #168]	; (8005eb8 <HAL_DMA_Abort_IT+0x3d8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d036      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a28      	ldr	r2, [pc, #160]	; (8005ebc <HAL_DMA_Abort_IT+0x3dc>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d031      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a27      	ldr	r2, [pc, #156]	; (8005ec0 <HAL_DMA_Abort_IT+0x3e0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d02c      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a25      	ldr	r2, [pc, #148]	; (8005ec4 <HAL_DMA_Abort_IT+0x3e4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d027      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a24      	ldr	r2, [pc, #144]	; (8005ec8 <HAL_DMA_Abort_IT+0x3e8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d022      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <HAL_DMA_Abort_IT+0x3ec>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01d      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <HAL_DMA_Abort_IT+0x3f0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d018      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <HAL_DMA_Abort_IT+0x3f4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ed8 <HAL_DMA_Abort_IT+0x3f8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00e      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1c      	ldr	r2, [pc, #112]	; (8005edc <HAL_DMA_Abort_IT+0x3fc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1b      	ldr	r2, [pc, #108]	; (8005ee0 <HAL_DMA_Abort_IT+0x400>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_DMA_Abort_IT+0x3a2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <HAL_DMA_Abort_IT+0x404>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d132      	bne.n	8005ee8 <HAL_DMA_Abort_IT+0x408>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e031      	b.n	8005eea <HAL_DMA_Abort_IT+0x40a>
 8005e86:	bf00      	nop
 8005e88:	40020010 	.word	0x40020010
 8005e8c:	40020028 	.word	0x40020028
 8005e90:	40020040 	.word	0x40020040
 8005e94:	40020058 	.word	0x40020058
 8005e98:	40020070 	.word	0x40020070
 8005e9c:	40020088 	.word	0x40020088
 8005ea0:	400200a0 	.word	0x400200a0
 8005ea4:	400200b8 	.word	0x400200b8
 8005ea8:	40020410 	.word	0x40020410
 8005eac:	40020428 	.word	0x40020428
 8005eb0:	40020440 	.word	0x40020440
 8005eb4:	40020458 	.word	0x40020458
 8005eb8:	40020470 	.word	0x40020470
 8005ebc:	40020488 	.word	0x40020488
 8005ec0:	400204a0 	.word	0x400204a0
 8005ec4:	400204b8 	.word	0x400204b8
 8005ec8:	58025408 	.word	0x58025408
 8005ecc:	5802541c 	.word	0x5802541c
 8005ed0:	58025430 	.word	0x58025430
 8005ed4:	58025444 	.word	0x58025444
 8005ed8:	58025458 	.word	0x58025458
 8005edc:	5802546c 	.word	0x5802546c
 8005ee0:	58025480 	.word	0x58025480
 8005ee4:	58025494 	.word	0x58025494
 8005ee8:	2300      	movs	r3, #0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d028      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005efc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop

08005f6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f78:	4b67      	ldr	r3, [pc, #412]	; (8006118 <HAL_DMA_IRQHandler+0x1ac>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a67      	ldr	r2, [pc, #412]	; (800611c <HAL_DMA_IRQHandler+0x1b0>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	0a9b      	lsrs	r3, r3, #10
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a5f      	ldr	r2, [pc, #380]	; (8006120 <HAL_DMA_IRQHandler+0x1b4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d04a      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a5d      	ldr	r2, [pc, #372]	; (8006124 <HAL_DMA_IRQHandler+0x1b8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d045      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a5c      	ldr	r2, [pc, #368]	; (8006128 <HAL_DMA_IRQHandler+0x1bc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d040      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5a      	ldr	r2, [pc, #360]	; (800612c <HAL_DMA_IRQHandler+0x1c0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d03b      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a59      	ldr	r2, [pc, #356]	; (8006130 <HAL_DMA_IRQHandler+0x1c4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d036      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a57      	ldr	r2, [pc, #348]	; (8006134 <HAL_DMA_IRQHandler+0x1c8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d031      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a56      	ldr	r2, [pc, #344]	; (8006138 <HAL_DMA_IRQHandler+0x1cc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d02c      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a54      	ldr	r2, [pc, #336]	; (800613c <HAL_DMA_IRQHandler+0x1d0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d027      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a53      	ldr	r2, [pc, #332]	; (8006140 <HAL_DMA_IRQHandler+0x1d4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d022      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a51      	ldr	r2, [pc, #324]	; (8006144 <HAL_DMA_IRQHandler+0x1d8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01d      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a50      	ldr	r2, [pc, #320]	; (8006148 <HAL_DMA_IRQHandler+0x1dc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d018      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a4e      	ldr	r2, [pc, #312]	; (800614c <HAL_DMA_IRQHandler+0x1e0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a4d      	ldr	r2, [pc, #308]	; (8006150 <HAL_DMA_IRQHandler+0x1e4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00e      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a4b      	ldr	r2, [pc, #300]	; (8006154 <HAL_DMA_IRQHandler+0x1e8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d009      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a4a      	ldr	r2, [pc, #296]	; (8006158 <HAL_DMA_IRQHandler+0x1ec>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d004      	beq.n	800603e <HAL_DMA_IRQHandler+0xd2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a48      	ldr	r2, [pc, #288]	; (800615c <HAL_DMA_IRQHandler+0x1f0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d101      	bne.n	8006042 <HAL_DMA_IRQHandler+0xd6>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <HAL_DMA_IRQHandler+0xd8>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 842b 	beq.w	80068a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	2208      	movs	r2, #8
 8006054:	409a      	lsls	r2, r3
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	4013      	ands	r3, r2
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80a2 	beq.w	80061a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a2e      	ldr	r2, [pc, #184]	; (8006120 <HAL_DMA_IRQHandler+0x1b4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d04a      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a2d      	ldr	r2, [pc, #180]	; (8006124 <HAL_DMA_IRQHandler+0x1b8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d045      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2b      	ldr	r2, [pc, #172]	; (8006128 <HAL_DMA_IRQHandler+0x1bc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d040      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2a      	ldr	r2, [pc, #168]	; (800612c <HAL_DMA_IRQHandler+0x1c0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d03b      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a28      	ldr	r2, [pc, #160]	; (8006130 <HAL_DMA_IRQHandler+0x1c4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d036      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a27      	ldr	r2, [pc, #156]	; (8006134 <HAL_DMA_IRQHandler+0x1c8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d031      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a25      	ldr	r2, [pc, #148]	; (8006138 <HAL_DMA_IRQHandler+0x1cc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d02c      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a24      	ldr	r2, [pc, #144]	; (800613c <HAL_DMA_IRQHandler+0x1d0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d027      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_DMA_IRQHandler+0x1d4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d022      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a21      	ldr	r2, [pc, #132]	; (8006144 <HAL_DMA_IRQHandler+0x1d8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d01d      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1f      	ldr	r2, [pc, #124]	; (8006148 <HAL_DMA_IRQHandler+0x1dc>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d018      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1e      	ldr	r2, [pc, #120]	; (800614c <HAL_DMA_IRQHandler+0x1e0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d013      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <HAL_DMA_IRQHandler+0x1e4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00e      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1b      	ldr	r2, [pc, #108]	; (8006154 <HAL_DMA_IRQHandler+0x1e8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d009      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a19      	ldr	r2, [pc, #100]	; (8006158 <HAL_DMA_IRQHandler+0x1ec>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d004      	beq.n	8006100 <HAL_DMA_IRQHandler+0x194>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a18      	ldr	r2, [pc, #96]	; (800615c <HAL_DMA_IRQHandler+0x1f0>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d12f      	bne.n	8006160 <HAL_DMA_IRQHandler+0x1f4>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	bf14      	ite	ne
 800610e:	2301      	movne	r3, #1
 8006110:	2300      	moveq	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	e02e      	b.n	8006174 <HAL_DMA_IRQHandler+0x208>
 8006116:	bf00      	nop
 8006118:	2400002c 	.word	0x2400002c
 800611c:	1b4e81b5 	.word	0x1b4e81b5
 8006120:	40020010 	.word	0x40020010
 8006124:	40020028 	.word	0x40020028
 8006128:	40020040 	.word	0x40020040
 800612c:	40020058 	.word	0x40020058
 8006130:	40020070 	.word	0x40020070
 8006134:	40020088 	.word	0x40020088
 8006138:	400200a0 	.word	0x400200a0
 800613c:	400200b8 	.word	0x400200b8
 8006140:	40020410 	.word	0x40020410
 8006144:	40020428 	.word	0x40020428
 8006148:	40020440 	.word	0x40020440
 800614c:	40020458 	.word	0x40020458
 8006150:	40020470 	.word	0x40020470
 8006154:	40020488 	.word	0x40020488
 8006158:	400204a0 	.word	0x400204a0
 800615c:	400204b8 	.word	0x400204b8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	bf14      	ite	ne
 800616e:	2301      	movne	r3, #1
 8006170:	2300      	moveq	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d015      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0204 	bic.w	r2, r2, #4
 8006186:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	2208      	movs	r2, #8
 8006192:	409a      	lsls	r2, r3
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	f043 0201 	orr.w	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	fa22 f303 	lsr.w	r3, r2, r3
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d06e      	beq.n	8006298 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a69      	ldr	r2, [pc, #420]	; (8006364 <HAL_DMA_IRQHandler+0x3f8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d04a      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a67      	ldr	r2, [pc, #412]	; (8006368 <HAL_DMA_IRQHandler+0x3fc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d045      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a66      	ldr	r2, [pc, #408]	; (800636c <HAL_DMA_IRQHandler+0x400>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d040      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a64      	ldr	r2, [pc, #400]	; (8006370 <HAL_DMA_IRQHandler+0x404>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d03b      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a63      	ldr	r2, [pc, #396]	; (8006374 <HAL_DMA_IRQHandler+0x408>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d036      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a61      	ldr	r2, [pc, #388]	; (8006378 <HAL_DMA_IRQHandler+0x40c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d031      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a60      	ldr	r2, [pc, #384]	; (800637c <HAL_DMA_IRQHandler+0x410>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d02c      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a5e      	ldr	r2, [pc, #376]	; (8006380 <HAL_DMA_IRQHandler+0x414>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d027      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a5d      	ldr	r2, [pc, #372]	; (8006384 <HAL_DMA_IRQHandler+0x418>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a5b      	ldr	r2, [pc, #364]	; (8006388 <HAL_DMA_IRQHandler+0x41c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01d      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a5a      	ldr	r2, [pc, #360]	; (800638c <HAL_DMA_IRQHandler+0x420>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a58      	ldr	r2, [pc, #352]	; (8006390 <HAL_DMA_IRQHandler+0x424>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a57      	ldr	r2, [pc, #348]	; (8006394 <HAL_DMA_IRQHandler+0x428>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a55      	ldr	r2, [pc, #340]	; (8006398 <HAL_DMA_IRQHandler+0x42c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a54      	ldr	r2, [pc, #336]	; (800639c <HAL_DMA_IRQHandler+0x430>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_DMA_IRQHandler+0x2ee>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a52      	ldr	r2, [pc, #328]	; (80063a0 <HAL_DMA_IRQHandler+0x434>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d10a      	bne.n	8006270 <HAL_DMA_IRQHandler+0x304>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006264:	2b00      	cmp	r3, #0
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	e003      	b.n	8006278 <HAL_DMA_IRQHandler+0x30c>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2300      	movs	r3, #0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00d      	beq.n	8006298 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	2201      	movs	r2, #1
 8006286:	409a      	lsls	r2, r3
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006290:	f043 0202 	orr.w	r2, r3, #2
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2204      	movs	r2, #4
 80062a2:	409a      	lsls	r2, r3
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 808f 	beq.w	80063cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2c      	ldr	r2, [pc, #176]	; (8006364 <HAL_DMA_IRQHandler+0x3f8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d04a      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2a      	ldr	r2, [pc, #168]	; (8006368 <HAL_DMA_IRQHandler+0x3fc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d045      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a29      	ldr	r2, [pc, #164]	; (800636c <HAL_DMA_IRQHandler+0x400>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d040      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a27      	ldr	r2, [pc, #156]	; (8006370 <HAL_DMA_IRQHandler+0x404>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d03b      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a26      	ldr	r2, [pc, #152]	; (8006374 <HAL_DMA_IRQHandler+0x408>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d036      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a24      	ldr	r2, [pc, #144]	; (8006378 <HAL_DMA_IRQHandler+0x40c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d031      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a23      	ldr	r2, [pc, #140]	; (800637c <HAL_DMA_IRQHandler+0x410>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d02c      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a21      	ldr	r2, [pc, #132]	; (8006380 <HAL_DMA_IRQHandler+0x414>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d027      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a20      	ldr	r2, [pc, #128]	; (8006384 <HAL_DMA_IRQHandler+0x418>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d022      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <HAL_DMA_IRQHandler+0x41c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d01d      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1d      	ldr	r2, [pc, #116]	; (800638c <HAL_DMA_IRQHandler+0x420>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d018      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <HAL_DMA_IRQHandler+0x424>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d013      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1a      	ldr	r2, [pc, #104]	; (8006394 <HAL_DMA_IRQHandler+0x428>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00e      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a18      	ldr	r2, [pc, #96]	; (8006398 <HAL_DMA_IRQHandler+0x42c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d009      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a17      	ldr	r2, [pc, #92]	; (800639c <HAL_DMA_IRQHandler+0x430>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_DMA_IRQHandler+0x3e2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <HAL_DMA_IRQHandler+0x434>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d12a      	bne.n	80063a4 <HAL_DMA_IRQHandler+0x438>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	bf14      	ite	ne
 800635c:	2301      	movne	r3, #1
 800635e:	2300      	moveq	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	e023      	b.n	80063ac <HAL_DMA_IRQHandler+0x440>
 8006364:	40020010 	.word	0x40020010
 8006368:	40020028 	.word	0x40020028
 800636c:	40020040 	.word	0x40020040
 8006370:	40020058 	.word	0x40020058
 8006374:	40020070 	.word	0x40020070
 8006378:	40020088 	.word	0x40020088
 800637c:	400200a0 	.word	0x400200a0
 8006380:	400200b8 	.word	0x400200b8
 8006384:	40020410 	.word	0x40020410
 8006388:	40020428 	.word	0x40020428
 800638c:	40020440 	.word	0x40020440
 8006390:	40020458 	.word	0x40020458
 8006394:	40020470 	.word	0x40020470
 8006398:	40020488 	.word	0x40020488
 800639c:	400204a0 	.word	0x400204a0
 80063a0:	400204b8 	.word	0x400204b8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2300      	movs	r3, #0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2204      	movs	r2, #4
 80063ba:	409a      	lsls	r2, r3
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c4:	f043 0204 	orr.w	r2, r3, #4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2210      	movs	r2, #16
 80063d6:	409a      	lsls	r2, r3
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 80a6 	beq.w	800652e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a85      	ldr	r2, [pc, #532]	; (80065fc <HAL_DMA_IRQHandler+0x690>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d04a      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a83      	ldr	r2, [pc, #524]	; (8006600 <HAL_DMA_IRQHandler+0x694>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d045      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a82      	ldr	r2, [pc, #520]	; (8006604 <HAL_DMA_IRQHandler+0x698>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d040      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a80      	ldr	r2, [pc, #512]	; (8006608 <HAL_DMA_IRQHandler+0x69c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d03b      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a7f      	ldr	r2, [pc, #508]	; (800660c <HAL_DMA_IRQHandler+0x6a0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d036      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a7d      	ldr	r2, [pc, #500]	; (8006610 <HAL_DMA_IRQHandler+0x6a4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d031      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a7c      	ldr	r2, [pc, #496]	; (8006614 <HAL_DMA_IRQHandler+0x6a8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d02c      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a7a      	ldr	r2, [pc, #488]	; (8006618 <HAL_DMA_IRQHandler+0x6ac>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d027      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a79      	ldr	r2, [pc, #484]	; (800661c <HAL_DMA_IRQHandler+0x6b0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a77      	ldr	r2, [pc, #476]	; (8006620 <HAL_DMA_IRQHandler+0x6b4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01d      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a76      	ldr	r2, [pc, #472]	; (8006624 <HAL_DMA_IRQHandler+0x6b8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a74      	ldr	r2, [pc, #464]	; (8006628 <HAL_DMA_IRQHandler+0x6bc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a73      	ldr	r2, [pc, #460]	; (800662c <HAL_DMA_IRQHandler+0x6c0>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a71      	ldr	r2, [pc, #452]	; (8006630 <HAL_DMA_IRQHandler+0x6c4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a70      	ldr	r2, [pc, #448]	; (8006634 <HAL_DMA_IRQHandler+0x6c8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_DMA_IRQHandler+0x516>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a6e      	ldr	r2, [pc, #440]	; (8006638 <HAL_DMA_IRQHandler+0x6cc>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d10a      	bne.n	8006498 <HAL_DMA_IRQHandler+0x52c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	bf14      	ite	ne
 8006490:	2301      	movne	r3, #1
 8006492:	2300      	moveq	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	e009      	b.n	80064ac <HAL_DMA_IRQHandler+0x540>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d03e      	beq.n	800652e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b4:	f003 031f 	and.w	r3, r3, #31
 80064b8:	2210      	movs	r2, #16
 80064ba:	409a      	lsls	r2, r3
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d018      	beq.n	8006500 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d108      	bne.n	80064ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d024      	beq.n	800652e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	4798      	blx	r3
 80064ec:	e01f      	b.n	800652e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01b      	beq.n	800652e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
 80064fe:	e016      	b.n	800652e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0208 	bic.w	r2, r2, #8
 800651c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	2220      	movs	r2, #32
 8006538:	409a      	lsls	r2, r3
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	4013      	ands	r3, r2
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 8110 	beq.w	8006764 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a2c      	ldr	r2, [pc, #176]	; (80065fc <HAL_DMA_IRQHandler+0x690>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d04a      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a2b      	ldr	r2, [pc, #172]	; (8006600 <HAL_DMA_IRQHandler+0x694>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d045      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a29      	ldr	r2, [pc, #164]	; (8006604 <HAL_DMA_IRQHandler+0x698>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d040      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a28      	ldr	r2, [pc, #160]	; (8006608 <HAL_DMA_IRQHandler+0x69c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d03b      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a26      	ldr	r2, [pc, #152]	; (800660c <HAL_DMA_IRQHandler+0x6a0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d036      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a25      	ldr	r2, [pc, #148]	; (8006610 <HAL_DMA_IRQHandler+0x6a4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d031      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a23      	ldr	r2, [pc, #140]	; (8006614 <HAL_DMA_IRQHandler+0x6a8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d02c      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_DMA_IRQHandler+0x6ac>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d027      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a20      	ldr	r2, [pc, #128]	; (800661c <HAL_DMA_IRQHandler+0x6b0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d022      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1f      	ldr	r2, [pc, #124]	; (8006620 <HAL_DMA_IRQHandler+0x6b4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d01d      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <HAL_DMA_IRQHandler+0x6b8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d018      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <HAL_DMA_IRQHandler+0x6bc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d013      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1a      	ldr	r2, [pc, #104]	; (800662c <HAL_DMA_IRQHandler+0x6c0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a19      	ldr	r2, [pc, #100]	; (8006630 <HAL_DMA_IRQHandler+0x6c4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d009      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a17      	ldr	r2, [pc, #92]	; (8006634 <HAL_DMA_IRQHandler+0x6c8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x678>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a16      	ldr	r2, [pc, #88]	; (8006638 <HAL_DMA_IRQHandler+0x6cc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d12b      	bne.n	800663c <HAL_DMA_IRQHandler+0x6d0>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	bf14      	ite	ne
 80065f2:	2301      	movne	r3, #1
 80065f4:	2300      	moveq	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	e02a      	b.n	8006650 <HAL_DMA_IRQHandler+0x6e4>
 80065fa:	bf00      	nop
 80065fc:	40020010 	.word	0x40020010
 8006600:	40020028 	.word	0x40020028
 8006604:	40020040 	.word	0x40020040
 8006608:	40020058 	.word	0x40020058
 800660c:	40020070 	.word	0x40020070
 8006610:	40020088 	.word	0x40020088
 8006614:	400200a0 	.word	0x400200a0
 8006618:	400200b8 	.word	0x400200b8
 800661c:	40020410 	.word	0x40020410
 8006620:	40020428 	.word	0x40020428
 8006624:	40020440 	.word	0x40020440
 8006628:	40020458 	.word	0x40020458
 800662c:	40020470 	.word	0x40020470
 8006630:	40020488 	.word	0x40020488
 8006634:	400204a0 	.word	0x400204a0
 8006638:	400204b8 	.word	0x400204b8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	bf14      	ite	ne
 800664a:	2301      	movne	r3, #1
 800664c:	2300      	moveq	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8087 	beq.w	8006764 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2220      	movs	r2, #32
 8006660:	409a      	lsls	r2, r3
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b04      	cmp	r3, #4
 8006670:	d139      	bne.n	80066e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0216 	bic.w	r2, r2, #22
 8006680:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006690:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d103      	bne.n	80066a2 <HAL_DMA_IRQHandler+0x736>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d007      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0208 	bic.w	r2, r2, #8
 80066b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	223f      	movs	r2, #63	; 0x3f
 80066bc:	409a      	lsls	r2, r3
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 834a 	beq.w	8006d70 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
          }
          return;
 80066e4:	e344      	b.n	8006d70 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d018      	beq.n	8006726 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d108      	bne.n	8006714 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	2b00      	cmp	r3, #0
 8006708:	d02c      	beq.n	8006764 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
 8006712:	e027      	b.n	8006764 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d023      	beq.n	8006764 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
 8006724:	e01e      	b.n	8006764 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10f      	bne.n	8006754 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0210 	bic.w	r2, r2, #16
 8006742:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8306 	beq.w	8006d7a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8088 	beq.w	800688c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2204      	movs	r2, #4
 8006780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a7a      	ldr	r2, [pc, #488]	; (8006974 <HAL_DMA_IRQHandler+0xa08>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d04a      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a79      	ldr	r2, [pc, #484]	; (8006978 <HAL_DMA_IRQHandler+0xa0c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d045      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a77      	ldr	r2, [pc, #476]	; (800697c <HAL_DMA_IRQHandler+0xa10>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d040      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a76      	ldr	r2, [pc, #472]	; (8006980 <HAL_DMA_IRQHandler+0xa14>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d03b      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a74      	ldr	r2, [pc, #464]	; (8006984 <HAL_DMA_IRQHandler+0xa18>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d036      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a73      	ldr	r2, [pc, #460]	; (8006988 <HAL_DMA_IRQHandler+0xa1c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d031      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a71      	ldr	r2, [pc, #452]	; (800698c <HAL_DMA_IRQHandler+0xa20>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d02c      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a70      	ldr	r2, [pc, #448]	; (8006990 <HAL_DMA_IRQHandler+0xa24>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d027      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a6e      	ldr	r2, [pc, #440]	; (8006994 <HAL_DMA_IRQHandler+0xa28>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d022      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a6d      	ldr	r2, [pc, #436]	; (8006998 <HAL_DMA_IRQHandler+0xa2c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d01d      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a6b      	ldr	r2, [pc, #428]	; (800699c <HAL_DMA_IRQHandler+0xa30>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d018      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6a      	ldr	r2, [pc, #424]	; (80069a0 <HAL_DMA_IRQHandler+0xa34>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a68      	ldr	r2, [pc, #416]	; (80069a4 <HAL_DMA_IRQHandler+0xa38>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00e      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a67      	ldr	r2, [pc, #412]	; (80069a8 <HAL_DMA_IRQHandler+0xa3c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a65      	ldr	r2, [pc, #404]	; (80069ac <HAL_DMA_IRQHandler+0xa40>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_DMA_IRQHandler+0x8b8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a64      	ldr	r2, [pc, #400]	; (80069b0 <HAL_DMA_IRQHandler+0xa44>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d108      	bne.n	8006836 <HAL_DMA_IRQHandler+0x8ca>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e007      	b.n	8006846 <HAL_DMA_IRQHandler+0x8da>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684e:	429a      	cmp	r2, r3
 8006850:	d307      	bcc.n	8006862 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f2      	bne.n	8006846 <HAL_DMA_IRQHandler+0x8da>
 8006860:	e000      	b.n	8006864 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006862:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2203      	movs	r2, #3
 8006876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800687a:	e003      	b.n	8006884 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8272 	beq.w	8006d7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	e26c      	b.n	8006d7a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a43      	ldr	r2, [pc, #268]	; (80069b4 <HAL_DMA_IRQHandler+0xa48>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d022      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x984>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a42      	ldr	r2, [pc, #264]	; (80069b8 <HAL_DMA_IRQHandler+0xa4c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d01d      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x984>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a40      	ldr	r2, [pc, #256]	; (80069bc <HAL_DMA_IRQHandler+0xa50>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d018      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x984>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a3f      	ldr	r2, [pc, #252]	; (80069c0 <HAL_DMA_IRQHandler+0xa54>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x984>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a3d      	ldr	r2, [pc, #244]	; (80069c4 <HAL_DMA_IRQHandler+0xa58>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00e      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x984>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3c      	ldr	r2, [pc, #240]	; (80069c8 <HAL_DMA_IRQHandler+0xa5c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d009      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x984>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a3a      	ldr	r2, [pc, #232]	; (80069cc <HAL_DMA_IRQHandler+0xa60>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d004      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x984>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a39      	ldr	r2, [pc, #228]	; (80069d0 <HAL_DMA_IRQHandler+0xa64>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d101      	bne.n	80068f4 <HAL_DMA_IRQHandler+0x988>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <HAL_DMA_IRQHandler+0x98a>
 80068f4:	2300      	movs	r3, #0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 823f 	beq.w	8006d7a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2204      	movs	r2, #4
 800690e:	409a      	lsls	r2, r3
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	4013      	ands	r3, r2
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80cd 	beq.w	8006ab4 <HAL_DMA_IRQHandler+0xb48>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80c7 	beq.w	8006ab4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	2204      	movs	r2, #4
 8006930:	409a      	lsls	r2, r3
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d049      	beq.n	80069d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 8210 	beq.w	8006d74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800695c:	e20a      	b.n	8006d74 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 8206 	beq.w	8006d74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006970:	e200      	b.n	8006d74 <HAL_DMA_IRQHandler+0xe08>
 8006972:	bf00      	nop
 8006974:	40020010 	.word	0x40020010
 8006978:	40020028 	.word	0x40020028
 800697c:	40020040 	.word	0x40020040
 8006980:	40020058 	.word	0x40020058
 8006984:	40020070 	.word	0x40020070
 8006988:	40020088 	.word	0x40020088
 800698c:	400200a0 	.word	0x400200a0
 8006990:	400200b8 	.word	0x400200b8
 8006994:	40020410 	.word	0x40020410
 8006998:	40020428 	.word	0x40020428
 800699c:	40020440 	.word	0x40020440
 80069a0:	40020458 	.word	0x40020458
 80069a4:	40020470 	.word	0x40020470
 80069a8:	40020488 	.word	0x40020488
 80069ac:	400204a0 	.word	0x400204a0
 80069b0:	400204b8 	.word	0x400204b8
 80069b4:	58025408 	.word	0x58025408
 80069b8:	5802541c 	.word	0x5802541c
 80069bc:	58025430 	.word	0x58025430
 80069c0:	58025444 	.word	0x58025444
 80069c4:	58025458 	.word	0x58025458
 80069c8:	5802546c 	.word	0x5802546c
 80069cc:	58025480 	.word	0x58025480
 80069d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d160      	bne.n	8006aa0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7f      	ldr	r2, [pc, #508]	; (8006be0 <HAL_DMA_IRQHandler+0xc74>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d04a      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a7d      	ldr	r2, [pc, #500]	; (8006be4 <HAL_DMA_IRQHandler+0xc78>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d045      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a7c      	ldr	r2, [pc, #496]	; (8006be8 <HAL_DMA_IRQHandler+0xc7c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d040      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a7a      	ldr	r2, [pc, #488]	; (8006bec <HAL_DMA_IRQHandler+0xc80>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d03b      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a79      	ldr	r2, [pc, #484]	; (8006bf0 <HAL_DMA_IRQHandler+0xc84>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d036      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a77      	ldr	r2, [pc, #476]	; (8006bf4 <HAL_DMA_IRQHandler+0xc88>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d031      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a76      	ldr	r2, [pc, #472]	; (8006bf8 <HAL_DMA_IRQHandler+0xc8c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d02c      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a74      	ldr	r2, [pc, #464]	; (8006bfc <HAL_DMA_IRQHandler+0xc90>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d027      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a73      	ldr	r2, [pc, #460]	; (8006c00 <HAL_DMA_IRQHandler+0xc94>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d022      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a71      	ldr	r2, [pc, #452]	; (8006c04 <HAL_DMA_IRQHandler+0xc98>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01d      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a70      	ldr	r2, [pc, #448]	; (8006c08 <HAL_DMA_IRQHandler+0xc9c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a6e      	ldr	r2, [pc, #440]	; (8006c0c <HAL_DMA_IRQHandler+0xca0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6d      	ldr	r2, [pc, #436]	; (8006c10 <HAL_DMA_IRQHandler+0xca4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a6b      	ldr	r2, [pc, #428]	; (8006c14 <HAL_DMA_IRQHandler+0xca8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a6a      	ldr	r2, [pc, #424]	; (8006c18 <HAL_DMA_IRQHandler+0xcac>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_DMA_IRQHandler+0xb12>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a68      	ldr	r2, [pc, #416]	; (8006c1c <HAL_DMA_IRQHandler+0xcb0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d108      	bne.n	8006a90 <HAL_DMA_IRQHandler+0xb24>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 0208 	bic.w	r2, r2, #8
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	e007      	b.n	8006aa0 <HAL_DMA_IRQHandler+0xb34>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0204 	bic.w	r2, r2, #4
 8006a9e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8165 	beq.w	8006d74 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab2:	e15f      	b.n	8006d74 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	2202      	movs	r2, #2
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80c5 	beq.w	8006c54 <HAL_DMA_IRQHandler+0xce8>
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80bf 	beq.w	8006c54 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2202      	movs	r2, #2
 8006ae0:	409a      	lsls	r2, r3
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d018      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 813a 	beq.w	8006d78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b0c:	e134      	b.n	8006d78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 8130 	beq.w	8006d78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b20:	e12a      	b.n	8006d78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 8089 	bne.w	8006c40 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2b      	ldr	r2, [pc, #172]	; (8006be0 <HAL_DMA_IRQHandler+0xc74>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d04a      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a29      	ldr	r2, [pc, #164]	; (8006be4 <HAL_DMA_IRQHandler+0xc78>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d045      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a28      	ldr	r2, [pc, #160]	; (8006be8 <HAL_DMA_IRQHandler+0xc7c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d040      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a26      	ldr	r2, [pc, #152]	; (8006bec <HAL_DMA_IRQHandler+0xc80>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d03b      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a25      	ldr	r2, [pc, #148]	; (8006bf0 <HAL_DMA_IRQHandler+0xc84>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d036      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a23      	ldr	r2, [pc, #140]	; (8006bf4 <HAL_DMA_IRQHandler+0xc88>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d031      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a22      	ldr	r2, [pc, #136]	; (8006bf8 <HAL_DMA_IRQHandler+0xc8c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d02c      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a20      	ldr	r2, [pc, #128]	; (8006bfc <HAL_DMA_IRQHandler+0xc90>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d027      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1f      	ldr	r2, [pc, #124]	; (8006c00 <HAL_DMA_IRQHandler+0xc94>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d022      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <HAL_DMA_IRQHandler+0xc98>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01d      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1c      	ldr	r2, [pc, #112]	; (8006c08 <HAL_DMA_IRQHandler+0xc9c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d018      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1a      	ldr	r2, [pc, #104]	; (8006c0c <HAL_DMA_IRQHandler+0xca0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a19      	ldr	r2, [pc, #100]	; (8006c10 <HAL_DMA_IRQHandler+0xca4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00e      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a17      	ldr	r2, [pc, #92]	; (8006c14 <HAL_DMA_IRQHandler+0xca8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <HAL_DMA_IRQHandler+0xcac>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_DMA_IRQHandler+0xc62>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a14      	ldr	r2, [pc, #80]	; (8006c1c <HAL_DMA_IRQHandler+0xcb0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d128      	bne.n	8006c20 <HAL_DMA_IRQHandler+0xcb4>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0214 	bic.w	r2, r2, #20
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e027      	b.n	8006c30 <HAL_DMA_IRQHandler+0xcc4>
 8006be0:	40020010 	.word	0x40020010
 8006be4:	40020028 	.word	0x40020028
 8006be8:	40020040 	.word	0x40020040
 8006bec:	40020058 	.word	0x40020058
 8006bf0:	40020070 	.word	0x40020070
 8006bf4:	40020088 	.word	0x40020088
 8006bf8:	400200a0 	.word	0x400200a0
 8006bfc:	400200b8 	.word	0x400200b8
 8006c00:	40020410 	.word	0x40020410
 8006c04:	40020428 	.word	0x40020428
 8006c08:	40020440 	.word	0x40020440
 8006c0c:	40020458 	.word	0x40020458
 8006c10:	40020470 	.word	0x40020470
 8006c14:	40020488 	.word	0x40020488
 8006c18:	400204a0 	.word	0x400204a0
 8006c1c:	400204b8 	.word	0x400204b8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 020a 	bic.w	r2, r2, #10
 8006c2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8097 	beq.w	8006d78 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c52:	e091      	b.n	8006d78 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8088 	beq.w	8006d7a <HAL_DMA_IRQHandler+0xe0e>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 8082 	beq.w	8006d7a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a41      	ldr	r2, [pc, #260]	; (8006d80 <HAL_DMA_IRQHandler+0xe14>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d04a      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a3f      	ldr	r2, [pc, #252]	; (8006d84 <HAL_DMA_IRQHandler+0xe18>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d045      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a3e      	ldr	r2, [pc, #248]	; (8006d88 <HAL_DMA_IRQHandler+0xe1c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d040      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a3c      	ldr	r2, [pc, #240]	; (8006d8c <HAL_DMA_IRQHandler+0xe20>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d03b      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a3b      	ldr	r2, [pc, #236]	; (8006d90 <HAL_DMA_IRQHandler+0xe24>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d036      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a39      	ldr	r2, [pc, #228]	; (8006d94 <HAL_DMA_IRQHandler+0xe28>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d031      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a38      	ldr	r2, [pc, #224]	; (8006d98 <HAL_DMA_IRQHandler+0xe2c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d02c      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a36      	ldr	r2, [pc, #216]	; (8006d9c <HAL_DMA_IRQHandler+0xe30>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d027      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a35      	ldr	r2, [pc, #212]	; (8006da0 <HAL_DMA_IRQHandler+0xe34>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d022      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a33      	ldr	r2, [pc, #204]	; (8006da4 <HAL_DMA_IRQHandler+0xe38>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01d      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a32      	ldr	r2, [pc, #200]	; (8006da8 <HAL_DMA_IRQHandler+0xe3c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d018      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a30      	ldr	r2, [pc, #192]	; (8006dac <HAL_DMA_IRQHandler+0xe40>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a2f      	ldr	r2, [pc, #188]	; (8006db0 <HAL_DMA_IRQHandler+0xe44>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a2d      	ldr	r2, [pc, #180]	; (8006db4 <HAL_DMA_IRQHandler+0xe48>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2c      	ldr	r2, [pc, #176]	; (8006db8 <HAL_DMA_IRQHandler+0xe4c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_DMA_IRQHandler+0xdaa>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2a      	ldr	r2, [pc, #168]	; (8006dbc <HAL_DMA_IRQHandler+0xe50>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d108      	bne.n	8006d28 <HAL_DMA_IRQHandler+0xdbc>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 021c 	bic.w	r2, r2, #28
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	e007      	b.n	8006d38 <HAL_DMA_IRQHandler+0xdcc>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 020e 	bic.w	r2, r2, #14
 8006d36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	2201      	movs	r2, #1
 8006d42:	409a      	lsls	r2, r3
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d009      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
 8006d6e:	e004      	b.n	8006d7a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d70:	bf00      	nop
 8006d72:	e002      	b.n	8006d7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d74:	bf00      	nop
 8006d76:	e000      	b.n	8006d7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d78:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d7a:	3728      	adds	r7, #40	; 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40020010 	.word	0x40020010
 8006d84:	40020028 	.word	0x40020028
 8006d88:	40020040 	.word	0x40020040
 8006d8c:	40020058 	.word	0x40020058
 8006d90:	40020070 	.word	0x40020070
 8006d94:	40020088 	.word	0x40020088
 8006d98:	400200a0 	.word	0x400200a0
 8006d9c:	400200b8 	.word	0x400200b8
 8006da0:	40020410 	.word	0x40020410
 8006da4:	40020428 	.word	0x40020428
 8006da8:	40020440 	.word	0x40020440
 8006dac:	40020458 	.word	0x40020458
 8006db0:	40020470 	.word	0x40020470
 8006db4:	40020488 	.word	0x40020488
 8006db8:	400204a0 	.word	0x400204a0
 8006dbc:	400204b8 	.word	0x400204b8

08006dc0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dce:	b2db      	uxtb	r3, r3
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a7f      	ldr	r2, [pc, #508]	; (8007010 <DMA_SetConfig+0x21c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d072      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a7d      	ldr	r2, [pc, #500]	; (8007014 <DMA_SetConfig+0x220>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d06d      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a7c      	ldr	r2, [pc, #496]	; (8007018 <DMA_SetConfig+0x224>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d068      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a7a      	ldr	r2, [pc, #488]	; (800701c <DMA_SetConfig+0x228>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d063      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a79      	ldr	r2, [pc, #484]	; (8007020 <DMA_SetConfig+0x22c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d05e      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a77      	ldr	r2, [pc, #476]	; (8007024 <DMA_SetConfig+0x230>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d059      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a76      	ldr	r2, [pc, #472]	; (8007028 <DMA_SetConfig+0x234>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d054      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a74      	ldr	r2, [pc, #464]	; (800702c <DMA_SetConfig+0x238>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d04f      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a73      	ldr	r2, [pc, #460]	; (8007030 <DMA_SetConfig+0x23c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d04a      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a71      	ldr	r2, [pc, #452]	; (8007034 <DMA_SetConfig+0x240>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d045      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a70      	ldr	r2, [pc, #448]	; (8007038 <DMA_SetConfig+0x244>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d040      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a6e      	ldr	r2, [pc, #440]	; (800703c <DMA_SetConfig+0x248>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d03b      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a6d      	ldr	r2, [pc, #436]	; (8007040 <DMA_SetConfig+0x24c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d036      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a6b      	ldr	r2, [pc, #428]	; (8007044 <DMA_SetConfig+0x250>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d031      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a6a      	ldr	r2, [pc, #424]	; (8007048 <DMA_SetConfig+0x254>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d02c      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a68      	ldr	r2, [pc, #416]	; (800704c <DMA_SetConfig+0x258>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d027      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a67      	ldr	r2, [pc, #412]	; (8007050 <DMA_SetConfig+0x25c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d022      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a65      	ldr	r2, [pc, #404]	; (8007054 <DMA_SetConfig+0x260>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01d      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a64      	ldr	r2, [pc, #400]	; (8007058 <DMA_SetConfig+0x264>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d018      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a62      	ldr	r2, [pc, #392]	; (800705c <DMA_SetConfig+0x268>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d013      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a61      	ldr	r2, [pc, #388]	; (8007060 <DMA_SetConfig+0x26c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00e      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5f      	ldr	r2, [pc, #380]	; (8007064 <DMA_SetConfig+0x270>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d009      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a5e      	ldr	r2, [pc, #376]	; (8007068 <DMA_SetConfig+0x274>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d004      	beq.n	8006efe <DMA_SetConfig+0x10a>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a5c      	ldr	r2, [pc, #368]	; (800706c <DMA_SetConfig+0x278>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d101      	bne.n	8006f02 <DMA_SetConfig+0x10e>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <DMA_SetConfig+0x110>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00d      	beq.n	8006f24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a39      	ldr	r2, [pc, #228]	; (8007010 <DMA_SetConfig+0x21c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d04a      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a38      	ldr	r2, [pc, #224]	; (8007014 <DMA_SetConfig+0x220>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d045      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a36      	ldr	r2, [pc, #216]	; (8007018 <DMA_SetConfig+0x224>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d040      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a35      	ldr	r2, [pc, #212]	; (800701c <DMA_SetConfig+0x228>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d03b      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a33      	ldr	r2, [pc, #204]	; (8007020 <DMA_SetConfig+0x22c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d036      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a32      	ldr	r2, [pc, #200]	; (8007024 <DMA_SetConfig+0x230>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d031      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a30      	ldr	r2, [pc, #192]	; (8007028 <DMA_SetConfig+0x234>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d02c      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a2f      	ldr	r2, [pc, #188]	; (800702c <DMA_SetConfig+0x238>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d027      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a2d      	ldr	r2, [pc, #180]	; (8007030 <DMA_SetConfig+0x23c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d022      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a2c      	ldr	r2, [pc, #176]	; (8007034 <DMA_SetConfig+0x240>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d01d      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a2a      	ldr	r2, [pc, #168]	; (8007038 <DMA_SetConfig+0x244>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d018      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a29      	ldr	r2, [pc, #164]	; (800703c <DMA_SetConfig+0x248>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d013      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a27      	ldr	r2, [pc, #156]	; (8007040 <DMA_SetConfig+0x24c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00e      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a26      	ldr	r2, [pc, #152]	; (8007044 <DMA_SetConfig+0x250>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d009      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a24      	ldr	r2, [pc, #144]	; (8007048 <DMA_SetConfig+0x254>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d004      	beq.n	8006fc4 <DMA_SetConfig+0x1d0>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a23      	ldr	r2, [pc, #140]	; (800704c <DMA_SetConfig+0x258>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d101      	bne.n	8006fc8 <DMA_SetConfig+0x1d4>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <DMA_SetConfig+0x1d6>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d059      	beq.n	8007082 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	223f      	movs	r2, #63	; 0x3f
 8006fd8:	409a      	lsls	r2, r3
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b40      	cmp	r3, #64	; 0x40
 8006ffc:	d138      	bne.n	8007070 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800700e:	e086      	b.n	800711e <DMA_SetConfig+0x32a>
 8007010:	40020010 	.word	0x40020010
 8007014:	40020028 	.word	0x40020028
 8007018:	40020040 	.word	0x40020040
 800701c:	40020058 	.word	0x40020058
 8007020:	40020070 	.word	0x40020070
 8007024:	40020088 	.word	0x40020088
 8007028:	400200a0 	.word	0x400200a0
 800702c:	400200b8 	.word	0x400200b8
 8007030:	40020410 	.word	0x40020410
 8007034:	40020428 	.word	0x40020428
 8007038:	40020440 	.word	0x40020440
 800703c:	40020458 	.word	0x40020458
 8007040:	40020470 	.word	0x40020470
 8007044:	40020488 	.word	0x40020488
 8007048:	400204a0 	.word	0x400204a0
 800704c:	400204b8 	.word	0x400204b8
 8007050:	58025408 	.word	0x58025408
 8007054:	5802541c 	.word	0x5802541c
 8007058:	58025430 	.word	0x58025430
 800705c:	58025444 	.word	0x58025444
 8007060:	58025458 	.word	0x58025458
 8007064:	5802546c 	.word	0x5802546c
 8007068:	58025480 	.word	0x58025480
 800706c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]
}
 8007080:	e04d      	b.n	800711e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a29      	ldr	r2, [pc, #164]	; (800712c <DMA_SetConfig+0x338>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d022      	beq.n	80070d2 <DMA_SetConfig+0x2de>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a27      	ldr	r2, [pc, #156]	; (8007130 <DMA_SetConfig+0x33c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01d      	beq.n	80070d2 <DMA_SetConfig+0x2de>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a26      	ldr	r2, [pc, #152]	; (8007134 <DMA_SetConfig+0x340>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d018      	beq.n	80070d2 <DMA_SetConfig+0x2de>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a24      	ldr	r2, [pc, #144]	; (8007138 <DMA_SetConfig+0x344>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <DMA_SetConfig+0x2de>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a23      	ldr	r2, [pc, #140]	; (800713c <DMA_SetConfig+0x348>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00e      	beq.n	80070d2 <DMA_SetConfig+0x2de>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a21      	ldr	r2, [pc, #132]	; (8007140 <DMA_SetConfig+0x34c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <DMA_SetConfig+0x2de>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a20      	ldr	r2, [pc, #128]	; (8007144 <DMA_SetConfig+0x350>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <DMA_SetConfig+0x2de>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <DMA_SetConfig+0x354>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d101      	bne.n	80070d6 <DMA_SetConfig+0x2e2>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <DMA_SetConfig+0x2e4>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d020      	beq.n	800711e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	2201      	movs	r2, #1
 80070e6:	409a      	lsls	r2, r3
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b40      	cmp	r3, #64	; 0x40
 80070fa:	d108      	bne.n	800710e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	60da      	str	r2, [r3, #12]
}
 800710c:	e007      	b.n	800711e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	60da      	str	r2, [r3, #12]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	58025408 	.word	0x58025408
 8007130:	5802541c 	.word	0x5802541c
 8007134:	58025430 	.word	0x58025430
 8007138:	58025444 	.word	0x58025444
 800713c:	58025458 	.word	0x58025458
 8007140:	5802546c 	.word	0x5802546c
 8007144:	58025480 	.word	0x58025480
 8007148:	58025494 	.word	0x58025494

0800714c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a42      	ldr	r2, [pc, #264]	; (8007264 <DMA_CalcBaseAndBitshift+0x118>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d04a      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a41      	ldr	r2, [pc, #260]	; (8007268 <DMA_CalcBaseAndBitshift+0x11c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d045      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a3f      	ldr	r2, [pc, #252]	; (800726c <DMA_CalcBaseAndBitshift+0x120>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d040      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a3e      	ldr	r2, [pc, #248]	; (8007270 <DMA_CalcBaseAndBitshift+0x124>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d03b      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a3c      	ldr	r2, [pc, #240]	; (8007274 <DMA_CalcBaseAndBitshift+0x128>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d036      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a3b      	ldr	r2, [pc, #236]	; (8007278 <DMA_CalcBaseAndBitshift+0x12c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d031      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a39      	ldr	r2, [pc, #228]	; (800727c <DMA_CalcBaseAndBitshift+0x130>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d02c      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a38      	ldr	r2, [pc, #224]	; (8007280 <DMA_CalcBaseAndBitshift+0x134>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d027      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a36      	ldr	r2, [pc, #216]	; (8007284 <DMA_CalcBaseAndBitshift+0x138>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d022      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a35      	ldr	r2, [pc, #212]	; (8007288 <DMA_CalcBaseAndBitshift+0x13c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d01d      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a33      	ldr	r2, [pc, #204]	; (800728c <DMA_CalcBaseAndBitshift+0x140>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d018      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a32      	ldr	r2, [pc, #200]	; (8007290 <DMA_CalcBaseAndBitshift+0x144>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d013      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a30      	ldr	r2, [pc, #192]	; (8007294 <DMA_CalcBaseAndBitshift+0x148>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00e      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a2f      	ldr	r2, [pc, #188]	; (8007298 <DMA_CalcBaseAndBitshift+0x14c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d009      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a2d      	ldr	r2, [pc, #180]	; (800729c <DMA_CalcBaseAndBitshift+0x150>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d004      	beq.n	80071f4 <DMA_CalcBaseAndBitshift+0xa8>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a2c      	ldr	r2, [pc, #176]	; (80072a0 <DMA_CalcBaseAndBitshift+0x154>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d101      	bne.n	80071f8 <DMA_CalcBaseAndBitshift+0xac>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <DMA_CalcBaseAndBitshift+0xae>
 80071f8:	2300      	movs	r3, #0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d024      	beq.n	8007248 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	3b10      	subs	r3, #16
 8007206:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <DMA_CalcBaseAndBitshift+0x158>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	091b      	lsrs	r3, r3, #4
 800720e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	4a24      	ldr	r2, [pc, #144]	; (80072a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007218:	5cd3      	ldrb	r3, [r2, r3]
 800721a:	461a      	mov	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b03      	cmp	r3, #3
 8007224:	d908      	bls.n	8007238 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	4b1f      	ldr	r3, [pc, #124]	; (80072ac <DMA_CalcBaseAndBitshift+0x160>)
 800722e:	4013      	ands	r3, r2
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	659a      	str	r2, [r3, #88]	; 0x58
 8007236:	e00d      	b.n	8007254 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	4b1b      	ldr	r3, [pc, #108]	; (80072ac <DMA_CalcBaseAndBitshift+0x160>)
 8007240:	4013      	ands	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6593      	str	r3, [r2, #88]	; 0x58
 8007246:	e005      	b.n	8007254 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	40020010 	.word	0x40020010
 8007268:	40020028 	.word	0x40020028
 800726c:	40020040 	.word	0x40020040
 8007270:	40020058 	.word	0x40020058
 8007274:	40020070 	.word	0x40020070
 8007278:	40020088 	.word	0x40020088
 800727c:	400200a0 	.word	0x400200a0
 8007280:	400200b8 	.word	0x400200b8
 8007284:	40020410 	.word	0x40020410
 8007288:	40020428 	.word	0x40020428
 800728c:	40020440 	.word	0x40020440
 8007290:	40020458 	.word	0x40020458
 8007294:	40020470 	.word	0x40020470
 8007298:	40020488 	.word	0x40020488
 800729c:	400204a0 	.word	0x400204a0
 80072a0:	400204b8 	.word	0x400204b8
 80072a4:	aaaaaaab 	.word	0xaaaaaaab
 80072a8:	080124bc 	.word	0x080124bc
 80072ac:	fffffc00 	.word	0xfffffc00

080072b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d120      	bne.n	8007306 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d858      	bhi.n	800737e <DMA_CheckFifoParam+0xce>
 80072cc:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <DMA_CheckFifoParam+0x24>)
 80072ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d2:	bf00      	nop
 80072d4:	080072e5 	.word	0x080072e5
 80072d8:	080072f7 	.word	0x080072f7
 80072dc:	080072e5 	.word	0x080072e5
 80072e0:	0800737f 	.word	0x0800737f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d048      	beq.n	8007382 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072f4:	e045      	b.n	8007382 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072fe:	d142      	bne.n	8007386 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007304:	e03f      	b.n	8007386 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730e:	d123      	bne.n	8007358 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007314:	2b03      	cmp	r3, #3
 8007316:	d838      	bhi.n	800738a <DMA_CheckFifoParam+0xda>
 8007318:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <DMA_CheckFifoParam+0x70>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007331 	.word	0x08007331
 8007324:	08007337 	.word	0x08007337
 8007328:	08007331 	.word	0x08007331
 800732c:	08007349 	.word	0x08007349
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	73fb      	strb	r3, [r7, #15]
        break;
 8007334:	e030      	b.n	8007398 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d025      	beq.n	800738e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007346:	e022      	b.n	800738e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007350:	d11f      	bne.n	8007392 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007356:	e01c      	b.n	8007392 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	2b02      	cmp	r3, #2
 800735e:	d902      	bls.n	8007366 <DMA_CheckFifoParam+0xb6>
 8007360:	2b03      	cmp	r3, #3
 8007362:	d003      	beq.n	800736c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007364:	e018      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	73fb      	strb	r3, [r7, #15]
        break;
 800736a:	e015      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00e      	beq.n	8007396 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
    break;
 800737c:	e00b      	b.n	8007396 <DMA_CheckFifoParam+0xe6>
        break;
 800737e:	bf00      	nop
 8007380:	e00a      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
        break;
 8007382:	bf00      	nop
 8007384:	e008      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
        break;
 8007386:	bf00      	nop
 8007388:	e006      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
        break;
 800738a:	bf00      	nop
 800738c:	e004      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
        break;
 800738e:	bf00      	nop
 8007390:	e002      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
        break;
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
    break;
 8007396:	bf00      	nop
    }
  }

  return status;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop

080073a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a38      	ldr	r2, [pc, #224]	; (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d022      	beq.n	8007406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a36      	ldr	r2, [pc, #216]	; (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d01d      	beq.n	8007406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a35      	ldr	r2, [pc, #212]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d018      	beq.n	8007406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a33      	ldr	r2, [pc, #204]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a32      	ldr	r2, [pc, #200]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00e      	beq.n	8007406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a30      	ldr	r2, [pc, #192]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d009      	beq.n	8007406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2f      	ldr	r2, [pc, #188]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a2d      	ldr	r2, [pc, #180]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d101      	bne.n	800740a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800740a:	2300      	movs	r3, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01a      	beq.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	3b08      	subs	r3, #8
 8007418:	4a28      	ldr	r2, [pc, #160]	; (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800741a:	fba2 2303 	umull	r2, r3, r2, r3
 800741e:	091b      	lsrs	r3, r3, #4
 8007420:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4b26      	ldr	r3, [pc, #152]	; (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a24      	ldr	r2, [pc, #144]	; (80074c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007434:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2201      	movs	r2, #1
 800743e:	409a      	lsls	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007444:	e024      	b.n	8007490 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	3b10      	subs	r3, #16
 800744e:	4a1e      	ldr	r2, [pc, #120]	; (80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	091b      	lsrs	r3, r3, #4
 8007456:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d806      	bhi.n	800746e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d902      	bls.n	800746e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3308      	adds	r3, #8
 800746c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	461a      	mov	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a16      	ldr	r2, [pc, #88]	; (80074d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007480:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2201      	movs	r2, #1
 800748a:	409a      	lsls	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	58025408 	.word	0x58025408
 80074a0:	5802541c 	.word	0x5802541c
 80074a4:	58025430 	.word	0x58025430
 80074a8:	58025444 	.word	0x58025444
 80074ac:	58025458 	.word	0x58025458
 80074b0:	5802546c 	.word	0x5802546c
 80074b4:	58025480 	.word	0x58025480
 80074b8:	58025494 	.word	0x58025494
 80074bc:	cccccccd 	.word	0xcccccccd
 80074c0:	16009600 	.word	0x16009600
 80074c4:	58025880 	.word	0x58025880
 80074c8:	aaaaaaab 	.word	0xaaaaaaab
 80074cc:	400204b8 	.word	0x400204b8
 80074d0:	4002040f 	.word	0x4002040f
 80074d4:	10008200 	.word	0x10008200
 80074d8:	40020880 	.word	0x40020880

080074dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d04a      	beq.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d847      	bhi.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a25      	ldr	r2, [pc, #148]	; (8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d022      	beq.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a24      	ldr	r2, [pc, #144]	; (8007598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d01d      	beq.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a22      	ldr	r2, [pc, #136]	; (800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d018      	beq.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d013      	beq.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a1f      	ldr	r2, [pc, #124]	; (80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00e      	beq.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a1e      	ldr	r2, [pc, #120]	; (80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d009      	beq.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a1c      	ldr	r2, [pc, #112]	; (80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d004      	beq.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a1b      	ldr	r2, [pc, #108]	; (80075b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d101      	bne.n	800754c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800754c:	2300      	movs	r3, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4b17      	ldr	r3, [pc, #92]	; (80075b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a15      	ldr	r2, [pc, #84]	; (80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007564:	671a      	str	r2, [r3, #112]	; 0x70
 8007566:	e009      	b.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4b14      	ldr	r3, [pc, #80]	; (80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	461a      	mov	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a11      	ldr	r2, [pc, #68]	; (80075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800757a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3b01      	subs	r3, #1
 8007580:	2201      	movs	r2, #1
 8007582:	409a      	lsls	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007588:	bf00      	nop
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	58025408 	.word	0x58025408
 8007598:	5802541c 	.word	0x5802541c
 800759c:	58025430 	.word	0x58025430
 80075a0:	58025444 	.word	0x58025444
 80075a4:	58025458 	.word	0x58025458
 80075a8:	5802546c 	.word	0x5802546c
 80075ac:	58025480 	.word	0x58025480
 80075b0:	58025494 	.word	0x58025494
 80075b4:	1600963f 	.word	0x1600963f
 80075b8:	58025940 	.word	0x58025940
 80075bc:	1000823f 	.word	0x1000823f
 80075c0:	40020940 	.word	0x40020940

080075c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b089      	sub	sp, #36	; 0x24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80075d2:	4b89      	ldr	r3, [pc, #548]	; (80077f8 <HAL_GPIO_Init+0x234>)
 80075d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075d6:	e194      	b.n	8007902 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	2101      	movs	r1, #1
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	fa01 f303 	lsl.w	r3, r1, r3
 80075e4:	4013      	ands	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8186 	beq.w	80078fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d005      	beq.n	8007608 <HAL_GPIO_Init+0x44>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d130      	bne.n	800766a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	2203      	movs	r2, #3
 8007614:	fa02 f303 	lsl.w	r3, r2, r3
 8007618:	43db      	mvns	r3, r3
 800761a:	69ba      	ldr	r2, [r7, #24]
 800761c:	4013      	ands	r3, r2
 800761e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	4313      	orrs	r3, r2
 8007630:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800763e:	2201      	movs	r2, #1
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	fa02 f303 	lsl.w	r3, r2, r3
 8007646:	43db      	mvns	r3, r3
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	4013      	ands	r3, r2
 800764c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	091b      	lsrs	r3, r3, #4
 8007654:	f003 0201 	and.w	r2, r3, #1
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	4313      	orrs	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	2b03      	cmp	r3, #3
 8007674:	d017      	beq.n	80076a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	2203      	movs	r2, #3
 8007682:	fa02 f303 	lsl.w	r3, r2, r3
 8007686:	43db      	mvns	r3, r3
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	4013      	ands	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	4313      	orrs	r3, r2
 800769e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d123      	bne.n	80076fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	08da      	lsrs	r2, r3, #3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3208      	adds	r2, #8
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	220f      	movs	r2, #15
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	43db      	mvns	r3, r3
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	4013      	ands	r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	08da      	lsrs	r2, r3, #3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3208      	adds	r2, #8
 80076f4:	69b9      	ldr	r1, [r7, #24]
 80076f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	2203      	movs	r2, #3
 8007706:	fa02 f303 	lsl.w	r3, r2, r3
 800770a:	43db      	mvns	r3, r3
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	4013      	ands	r3, r2
 8007710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f003 0203 	and.w	r2, r3, #3
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	fa02 f303 	lsl.w	r3, r2, r3
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	4313      	orrs	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 80e0 	beq.w	80078fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800773c:	4b2f      	ldr	r3, [pc, #188]	; (80077fc <HAL_GPIO_Init+0x238>)
 800773e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007742:	4a2e      	ldr	r2, [pc, #184]	; (80077fc <HAL_GPIO_Init+0x238>)
 8007744:	f043 0302 	orr.w	r3, r3, #2
 8007748:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800774c:	4b2b      	ldr	r3, [pc, #172]	; (80077fc <HAL_GPIO_Init+0x238>)
 800774e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800775a:	4a29      	ldr	r2, [pc, #164]	; (8007800 <HAL_GPIO_Init+0x23c>)
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	089b      	lsrs	r3, r3, #2
 8007760:	3302      	adds	r3, #2
 8007762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	220f      	movs	r2, #15
 8007772:	fa02 f303 	lsl.w	r3, r2, r3
 8007776:	43db      	mvns	r3, r3
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	4013      	ands	r3, r2
 800777c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a20      	ldr	r2, [pc, #128]	; (8007804 <HAL_GPIO_Init+0x240>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d052      	beq.n	800782c <HAL_GPIO_Init+0x268>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1f      	ldr	r2, [pc, #124]	; (8007808 <HAL_GPIO_Init+0x244>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d031      	beq.n	80077f2 <HAL_GPIO_Init+0x22e>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a1e      	ldr	r2, [pc, #120]	; (800780c <HAL_GPIO_Init+0x248>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d02b      	beq.n	80077ee <HAL_GPIO_Init+0x22a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <HAL_GPIO_Init+0x24c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d025      	beq.n	80077ea <HAL_GPIO_Init+0x226>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1c      	ldr	r2, [pc, #112]	; (8007814 <HAL_GPIO_Init+0x250>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d01f      	beq.n	80077e6 <HAL_GPIO_Init+0x222>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a1b      	ldr	r2, [pc, #108]	; (8007818 <HAL_GPIO_Init+0x254>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d019      	beq.n	80077e2 <HAL_GPIO_Init+0x21e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a1a      	ldr	r2, [pc, #104]	; (800781c <HAL_GPIO_Init+0x258>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d013      	beq.n	80077de <HAL_GPIO_Init+0x21a>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a19      	ldr	r2, [pc, #100]	; (8007820 <HAL_GPIO_Init+0x25c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00d      	beq.n	80077da <HAL_GPIO_Init+0x216>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a18      	ldr	r2, [pc, #96]	; (8007824 <HAL_GPIO_Init+0x260>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d007      	beq.n	80077d6 <HAL_GPIO_Init+0x212>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a17      	ldr	r2, [pc, #92]	; (8007828 <HAL_GPIO_Init+0x264>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d101      	bne.n	80077d2 <HAL_GPIO_Init+0x20e>
 80077ce:	2309      	movs	r3, #9
 80077d0:	e02d      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077d2:	230a      	movs	r3, #10
 80077d4:	e02b      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077d6:	2308      	movs	r3, #8
 80077d8:	e029      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077da:	2307      	movs	r3, #7
 80077dc:	e027      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077de:	2306      	movs	r3, #6
 80077e0:	e025      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077e2:	2305      	movs	r3, #5
 80077e4:	e023      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077e6:	2304      	movs	r3, #4
 80077e8:	e021      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077ea:	2303      	movs	r3, #3
 80077ec:	e01f      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e01d      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e01b      	b.n	800782e <HAL_GPIO_Init+0x26a>
 80077f6:	bf00      	nop
 80077f8:	58000080 	.word	0x58000080
 80077fc:	58024400 	.word	0x58024400
 8007800:	58000400 	.word	0x58000400
 8007804:	58020000 	.word	0x58020000
 8007808:	58020400 	.word	0x58020400
 800780c:	58020800 	.word	0x58020800
 8007810:	58020c00 	.word	0x58020c00
 8007814:	58021000 	.word	0x58021000
 8007818:	58021400 	.word	0x58021400
 800781c:	58021800 	.word	0x58021800
 8007820:	58021c00 	.word	0x58021c00
 8007824:	58022000 	.word	0x58022000
 8007828:	58022400 	.word	0x58022400
 800782c:	2300      	movs	r3, #0
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	f002 0203 	and.w	r2, r2, #3
 8007834:	0092      	lsls	r2, r2, #2
 8007836:	4093      	lsls	r3, r2
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800783e:	4938      	ldr	r1, [pc, #224]	; (8007920 <HAL_GPIO_Init+0x35c>)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	089b      	lsrs	r3, r3, #2
 8007844:	3302      	adds	r3, #2
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800784c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	43db      	mvns	r3, r3
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	4013      	ands	r3, r2
 800785c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800787a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	43db      	mvns	r3, r3
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	4013      	ands	r3, r2
 800788a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80078a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	43db      	mvns	r3, r3
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	4013      	ands	r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	43db      	mvns	r3, r3
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	4013      	ands	r3, r2
 80078e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3301      	adds	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	fa22 f303 	lsr.w	r3, r2, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	f47f ae63 	bne.w	80075d8 <HAL_GPIO_Init+0x14>
  }
}
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	3724      	adds	r7, #36	; 0x24
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	58000400 	.word	0x58000400

08007924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	887b      	ldrh	r3, [r7, #2]
 8007936:	4013      	ands	r3, r2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800793c:	2301      	movs	r3, #1
 800793e:	73fb      	strb	r3, [r7, #15]
 8007940:	e001      	b.n	8007946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007942:	2300      	movs	r3, #0
 8007944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	807b      	strh	r3, [r7, #2]
 8007960:	4613      	mov	r3, r2
 8007962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007964:	787b      	ldrb	r3, [r7, #1]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800796a:	887a      	ldrh	r2, [r7, #2]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007970:	e003      	b.n	800797a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007972:	887b      	ldrh	r3, [r7, #2]
 8007974:	041a      	lsls	r2, r3, #16
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	619a      	str	r2, [r3, #24]
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	460b      	mov	r3, r1
 8007990:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007998:	887a      	ldrh	r2, [r7, #2]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4013      	ands	r3, r2
 800799e:	041a      	lsls	r2, r3, #16
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	43d9      	mvns	r1, r3
 80079a4:	887b      	ldrh	r3, [r7, #2]
 80079a6:	400b      	ands	r3, r1
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	619a      	str	r2, [r3, #24]
}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
	...

080079bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e07f      	b.n	8007ace <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fa fab8 	bl	8001f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2224      	movs	r2, #36	; 0x24
 80079ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0201 	bic.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d107      	bne.n	8007a36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a32:	609a      	str	r2, [r3, #8]
 8007a34:	e006      	b.n	8007a44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d104      	bne.n	8007a56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6859      	ldr	r1, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	4b1d      	ldr	r3, [pc, #116]	; (8007ad8 <HAL_I2C_Init+0x11c>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691a      	ldr	r2, [r3, #16]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	69d9      	ldr	r1, [r3, #28]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1a      	ldr	r2, [r3, #32]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	02008000 	.word	0x02008000

08007adc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	460b      	mov	r3, r1
 8007aea:	817b      	strh	r3, [r7, #10]
 8007aec:	4613      	mov	r3, r2
 8007aee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	f040 80da 	bne.w	8007cb2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_I2C_Master_Transmit+0x30>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e0d3      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b14:	f7fc fdb4 	bl	8004680 <HAL_GetTick>
 8007b18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	2319      	movs	r3, #25
 8007b20:	2201      	movs	r2, #1
 8007b22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f001 fe6c 	bl	8009804 <I2C_WaitOnFlagUntilTimeout>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e0be      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2221      	movs	r2, #33	; 0x21
 8007b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2210      	movs	r2, #16
 8007b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	893a      	ldrh	r2, [r7, #8]
 8007b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2bff      	cmp	r3, #255	; 0xff
 8007b66:	d90e      	bls.n	8007b86 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	22ff      	movs	r2, #255	; 0xff
 8007b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	8979      	ldrh	r1, [r7, #10]
 8007b76:	4b51      	ldr	r3, [pc, #324]	; (8007cbc <HAL_I2C_Master_Transmit+0x1e0>)
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f002 f862 	bl	8009c48 <I2C_TransferConfig>
 8007b84:	e06c      	b.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	8979      	ldrh	r1, [r7, #10]
 8007b98:	4b48      	ldr	r3, [pc, #288]	; (8007cbc <HAL_I2C_Master_Transmit+0x1e0>)
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f002 f851 	bl	8009c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007ba6:	e05b      	b.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	6a39      	ldr	r1, [r7, #32]
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f001 fe69 	bl	8009884 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e07b      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d034      	beq.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d130      	bne.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	2200      	movs	r2, #0
 8007c06:	2180      	movs	r1, #128	; 0x80
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f001 fdfb 	bl	8009804 <I2C_WaitOnFlagUntilTimeout>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e04d      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2bff      	cmp	r3, #255	; 0xff
 8007c20:	d90e      	bls.n	8007c40 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	22ff      	movs	r2, #255	; 0xff
 8007c26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	8979      	ldrh	r1, [r7, #10]
 8007c30:	2300      	movs	r3, #0
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f002 f805 	bl	8009c48 <I2C_TransferConfig>
 8007c3e:	e00f      	b.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	8979      	ldrh	r1, [r7, #10]
 8007c52:	2300      	movs	r3, #0
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f001 fff4 	bl	8009c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d19e      	bne.n	8007ba8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	6a39      	ldr	r1, [r7, #32]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f001 fe48 	bl	8009904 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e01a      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2220      	movs	r2, #32
 8007c84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6859      	ldr	r1, [r3, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <HAL_I2C_Master_Transmit+0x1e4>)
 8007c92:	400b      	ands	r3, r1
 8007c94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e000      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007cb2:	2302      	movs	r3, #2
  }
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	80002000 	.word	0x80002000
 8007cc0:	fe00e800 	.word	0xfe00e800

08007cc4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	817b      	strh	r3, [r7, #10]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	f040 80db 	bne.w	8007e9c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_I2C_Master_Receive+0x30>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e0d4      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cfc:	f7fc fcc0 	bl	8004680 <HAL_GetTick>
 8007d00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	2319      	movs	r3, #25
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f001 fd78 	bl	8009804 <I2C_WaitOnFlagUntilTimeout>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e0bf      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2222      	movs	r2, #34	; 0x22
 8007d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2210      	movs	r2, #16
 8007d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	893a      	ldrh	r2, [r7, #8]
 8007d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2bff      	cmp	r3, #255	; 0xff
 8007d4e:	d90e      	bls.n	8007d6e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	22ff      	movs	r2, #255	; 0xff
 8007d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	8979      	ldrh	r1, [r7, #10]
 8007d5e:	4b52      	ldr	r3, [pc, #328]	; (8007ea8 <HAL_I2C_Master_Receive+0x1e4>)
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f001 ff6e 	bl	8009c48 <I2C_TransferConfig>
 8007d6c:	e06d      	b.n	8007e4a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	8979      	ldrh	r1, [r7, #10]
 8007d80:	4b49      	ldr	r3, [pc, #292]	; (8007ea8 <HAL_I2C_Master_Receive+0x1e4>)
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f001 ff5d 	bl	8009c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007d8e:	e05c      	b.n	8007e4a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	6a39      	ldr	r1, [r7, #32]
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f001 fdf1 	bl	800997c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e07c      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d034      	beq.n	8007e4a <HAL_I2C_Master_Receive+0x186>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d130      	bne.n	8007e4a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	2200      	movs	r2, #0
 8007df0:	2180      	movs	r1, #128	; 0x80
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f001 fd06 	bl	8009804 <I2C_WaitOnFlagUntilTimeout>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e04d      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2bff      	cmp	r3, #255	; 0xff
 8007e0a:	d90e      	bls.n	8007e2a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	22ff      	movs	r2, #255	; 0xff
 8007e10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	8979      	ldrh	r1, [r7, #10]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f001 ff10 	bl	8009c48 <I2C_TransferConfig>
 8007e28:	e00f      	b.n	8007e4a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	8979      	ldrh	r1, [r7, #10]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f001 feff 	bl	8009c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d19d      	bne.n	8007d90 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	6a39      	ldr	r1, [r7, #32]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f001 fd53 	bl	8009904 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e01a      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6859      	ldr	r1, [r3, #4]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <HAL_I2C_Master_Receive+0x1e8>)
 8007e7c:	400b      	ands	r3, r1
 8007e7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e000      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007e9c:	2302      	movs	r3, #2
  }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	80002400 	.word	0x80002400
 8007eac:	fe00e800 	.word	0xfe00e800

08007eb0 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	; 0x28
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	4608      	mov	r0, r1
 8007eba:	4611      	mov	r1, r2
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	817b      	strh	r3, [r7, #10]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	813b      	strh	r3, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	f040 80d5 	bne.w	8008082 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <HAL_I2C_Mem_Read_DMA+0x34>
 8007ede:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d105      	bne.n	8007ef0 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e0c9      	b.n	8008084 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007efe:	d101      	bne.n	8007f04 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8007f00:	2302      	movs	r3, #2
 8007f02:	e0bf      	b.n	8008084 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_I2C_Mem_Read_DMA+0x62>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e0b8      	b.n	8008084 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f1a:	f7fc fbb1 	bl	8004680 <HAL_GetTick>
 8007f1e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2222      	movs	r2, #34	; 0x22
 8007f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2240      	movs	r2, #64	; 0x40
 8007f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4a51      	ldr	r2, [pc, #324]	; (800808c <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8007f46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a51      	ldr	r2, [pc, #324]	; (8008090 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8007f4c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2bff      	cmp	r3, #255	; 0xff
 8007f56:	d906      	bls.n	8007f66 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	22ff      	movs	r2, #255	; 0xff
 8007f5c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	e007      	b.n	8007f76 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f74:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007f76:	88f8      	ldrh	r0, [r7, #6]
 8007f78:	893a      	ldrh	r2, [r7, #8]
 8007f7a:	8979      	ldrh	r1, [r7, #10]
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	2319      	movs	r3, #25
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4603      	mov	r3, r0
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 fcf2 	bl	8008970 <I2C_RequestMemoryRead>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e072      	b.n	8008084 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d020      	beq.n	8007fe8 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007faa:	4a3a      	ldr	r2, [pc, #232]	; (8008094 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8007fac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	4a39      	ldr	r2, [pc, #228]	; (8008098 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8007fb4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fba:	2200      	movs	r2, #0
 8007fbc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3324      	adds	r3, #36	; 0x24
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fd8:	f7fc fffa 	bl	8004fd0 <HAL_DMA_Start_IT>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d139      	bne.n	800805a <HAL_I2C_Mem_Read_DMA+0x1aa>
 8007fe6:	e013      	b.n	8008010 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e039      	b.n	8008084 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008014:	b2da      	uxtb	r2, r3
 8008016:	8979      	ldrh	r1, [r7, #10]
 8008018:	4b20      	ldr	r3, [pc, #128]	; (800809c <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f001 fe12 	bl	8009c48 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800803e:	2110      	movs	r1, #16
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f001 fe33 	bl	8009cac <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008054:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	e014      	b.n	8008084 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806e:	f043 0210 	orr.w	r2, r3, #16
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8008082:	2302      	movs	r3, #2
  }
}
 8008084:	4618      	mov	r0, r3
 8008086:	3720      	adds	r7, #32
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	ffff0000 	.word	0xffff0000
 8008090:	080083c7 	.word	0x080083c7
 8008094:	080094bf 	.word	0x080094bf
 8008098:	08009555 	.word	0x08009555
 800809c:	80002400 	.word	0x80002400

080080a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	68f9      	ldr	r1, [r7, #12]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	4798      	blx	r3
  }
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
 8008130:	4613      	mov	r3, r2
 8008132:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081b2:	b2db      	uxtb	r3, r3
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <I2C_Slave_ISR_IT+0x24>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e0ec      	b.n	80083be <I2C_Slave_ISR_IT+0x1fe>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	095b      	lsrs	r3, r3, #5
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d009      	beq.n	800820c <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008204:	6939      	ldr	r1, [r7, #16]
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 fdf0 	bl	8008dec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	091b      	lsrs	r3, r3, #4
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d04d      	beq.n	80082b4 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	091b      	lsrs	r3, r3, #4
 800821c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008220:	2b00      	cmp	r3, #0
 8008222:	d047      	beq.n	80082b4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d128      	bne.n	8008280 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b28      	cmp	r3, #40	; 0x28
 8008238:	d108      	bne.n	800824c <I2C_Slave_ISR_IT+0x8c>
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008240:	d104      	bne.n	800824c <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008242:	6939      	ldr	r1, [r7, #16]
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 ffc9 	bl	80091dc <I2C_ITListenCplt>
 800824a:	e032      	b.n	80082b2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b29      	cmp	r3, #41	; 0x29
 8008256:	d10e      	bne.n	8008276 <I2C_Slave_ISR_IT+0xb6>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800825e:	d00a      	beq.n	8008276 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2210      	movs	r2, #16
 8008266:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f001 f904 	bl	8009476 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 fc93 	bl	8008b9a <I2C_ITSlaveSeqCplt>
 8008274:	e01d      	b.n	80082b2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2210      	movs	r2, #16
 800827c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800827e:	e096      	b.n	80083ae <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2210      	movs	r2, #16
 8008286:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828c:	f043 0204 	orr.w	r2, r3, #4
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d004      	beq.n	80082a4 <I2C_Slave_ISR_IT+0xe4>
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082a0:	f040 8085 	bne.w	80083ae <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a8:	4619      	mov	r1, r3
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 ffec 	bl	8009288 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80082b0:	e07d      	b.n	80083ae <I2C_Slave_ISR_IT+0x1ee>
 80082b2:	e07c      	b.n	80083ae <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	089b      	lsrs	r3, r3, #2
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d030      	beq.n	8008322 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	089b      	lsrs	r3, r3, #2
 80082c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d02a      	beq.n	8008322 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d018      	beq.n	8008308 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f2:	3b01      	subs	r3, #1
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082fe:	b29b      	uxth	r3, r3
 8008300:	3b01      	subs	r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800830c:	b29b      	uxth	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d14f      	bne.n	80083b2 <I2C_Slave_ISR_IT+0x1f2>
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008318:	d04b      	beq.n	80083b2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 fc3d 	bl	8008b9a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008320:	e047      	b.n	80083b2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	08db      	lsrs	r3, r3, #3
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	08db      	lsrs	r3, r3, #3
 8008332:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800833a:	6939      	ldr	r1, [r7, #16]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 fb6b 	bl	8008a18 <I2C_ITAddrCplt>
 8008342:	e037      	b.n	80083b4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	085b      	lsrs	r3, r3, #1
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d031      	beq.n	80083b4 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02b      	beq.n	80083b4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d018      	beq.n	8008398 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008380:	b29b      	uxth	r3, r3
 8008382:	3b01      	subs	r3, #1
 8008384:	b29a      	uxth	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838e:	3b01      	subs	r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	851a      	strh	r2, [r3, #40]	; 0x28
 8008396:	e00d      	b.n	80083b4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800839e:	d002      	beq.n	80083a6 <I2C_Slave_ISR_IT+0x1e6>
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fbf7 	bl	8008b9a <I2C_ITSlaveSeqCplt>
 80083ac:	e002      	b.n	80083b4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80083ae:	bf00      	nop
 80083b0:	e000      	b.n	80083b4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80083b2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b088      	sub	sp, #32
 80083ca:	af02      	add	r7, sp, #8
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d101      	bne.n	80083e0 <I2C_Master_ISR_DMA+0x1a>
 80083dc:	2302      	movs	r3, #2
 80083de:	e0e1      	b.n	80085a4 <I2C_Master_ISR_DMA+0x1de>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	091b      	lsrs	r3, r3, #4
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d017      	beq.n	8008424 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	091b      	lsrs	r3, r3, #4
 80083f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d011      	beq.n	8008424 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2210      	movs	r2, #16
 8008406:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840c:	f043 0204 	orr.w	r2, r3, #4
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008414:	2120      	movs	r1, #32
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f001 fc48 	bl	8009cac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f001 f82a 	bl	8009476 <I2C_Flush_TXDR>
 8008422:	e0ba      	b.n	800859a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	09db      	lsrs	r3, r3, #7
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d072      	beq.n	8008516 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	099b      	lsrs	r3, r3, #6
 8008434:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008438:	2b00      	cmp	r3, #0
 800843a:	d06c      	beq.n	8008516 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800844a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d04e      	beq.n	80084f4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	b29b      	uxth	r3, r3
 800845e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008462:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008468:	b29b      	uxth	r3, r3
 800846a:	2bff      	cmp	r3, #255	; 0xff
 800846c:	d906      	bls.n	800847c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	22ff      	movs	r2, #255	; 0xff
 8008472:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	e010      	b.n	800849e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008480:	b29a      	uxth	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800848e:	d003      	beq.n	8008498 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	e002      	b.n	800849e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008498:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800849c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	8a79      	ldrh	r1, [r7, #18]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f001 fbcb 	bl	8009c48 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b22      	cmp	r3, #34	; 0x22
 80084ce:	d108      	bne.n	80084e2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084de:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80084e0:	e05b      	b.n	800859a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80084f2:	e052      	b.n	800859a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008502:	d003      	beq.n	800850c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fb0b 	bl	8008b20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800850a:	e046      	b.n	800859a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800850c:	2140      	movs	r1, #64	; 0x40
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 feba 	bl	8009288 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008514:	e041      	b.n	800859a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	099b      	lsrs	r3, r3, #6
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d029      	beq.n	8008576 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	099b      	lsrs	r3, r3, #6
 8008526:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800852a:	2b00      	cmp	r3, #0
 800852c:	d023      	beq.n	8008576 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d119      	bne.n	800856c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008546:	d027      	beq.n	8008598 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008550:	d108      	bne.n	8008564 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008560:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008562:	e019      	b.n	8008598 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fadb 	bl	8008b20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800856a:	e015      	b.n	8008598 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800856c:	2140      	movs	r1, #64	; 0x40
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 fe8a 	bl	8009288 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008574:	e010      	b.n	8008598 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800858e:	68b9      	ldr	r1, [r7, #8]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 fb61 	bl	8008c58 <I2C_ITMasterCplt>
 8008596:	e000      	b.n	800859a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008598:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <I2C_Slave_ISR_DMA+0x24>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e1ca      	b.n	8008966 <I2C_Slave_ISR_DMA+0x3ba>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d009      	beq.n	80085f8 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	095b      	lsrs	r3, r3, #5
 80085e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 fbfa 	bl	8008dec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	091b      	lsrs	r3, r3, #4
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 819b 	beq.w	800893c <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	091b      	lsrs	r3, r3, #4
 800860a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8194 	beq.w	800893c <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	0b9b      	lsrs	r3, r3, #14
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	0bdb      	lsrs	r3, r3, #15
 8008624:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 8180 	beq.w	800892e <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d07c      	beq.n	8008730 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	0bdb      	lsrs	r3, r3, #15
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d076      	beq.n	8008730 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a74      	ldr	r2, [pc, #464]	; (800881c <I2C_Slave_ISR_DMA+0x270>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d059      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a72      	ldr	r2, [pc, #456]	; (8008820 <I2C_Slave_ISR_DMA+0x274>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d053      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a70      	ldr	r2, [pc, #448]	; (8008824 <I2C_Slave_ISR_DMA+0x278>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d04d      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a6e      	ldr	r2, [pc, #440]	; (8008828 <I2C_Slave_ISR_DMA+0x27c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d047      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a6c      	ldr	r2, [pc, #432]	; (800882c <I2C_Slave_ISR_DMA+0x280>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d041      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a6a      	ldr	r2, [pc, #424]	; (8008830 <I2C_Slave_ISR_DMA+0x284>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d03b      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a68      	ldr	r2, [pc, #416]	; (8008834 <I2C_Slave_ISR_DMA+0x288>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d035      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a66      	ldr	r2, [pc, #408]	; (8008838 <I2C_Slave_ISR_DMA+0x28c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d02f      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a64      	ldr	r2, [pc, #400]	; (800883c <I2C_Slave_ISR_DMA+0x290>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d029      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a62      	ldr	r2, [pc, #392]	; (8008840 <I2C_Slave_ISR_DMA+0x294>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d023      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a60      	ldr	r2, [pc, #384]	; (8008844 <I2C_Slave_ISR_DMA+0x298>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d01d      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a5e      	ldr	r2, [pc, #376]	; (8008848 <I2C_Slave_ISR_DMA+0x29c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d017      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a5c      	ldr	r2, [pc, #368]	; (800884c <I2C_Slave_ISR_DMA+0x2a0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d011      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a5a      	ldr	r2, [pc, #360]	; (8008850 <I2C_Slave_ISR_DMA+0x2a4>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d00b      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a58      	ldr	r2, [pc, #352]	; (8008854 <I2C_Slave_ISR_DMA+0x2a8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d005      	beq.n	8008702 <I2C_Slave_ISR_DMA+0x156>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a56      	ldr	r2, [pc, #344]	; (8008858 <I2C_Slave_ISR_DMA+0x2ac>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d109      	bne.n	8008716 <I2C_Slave_ISR_DMA+0x16a>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	bf0c      	ite	eq
 800870e:	2301      	moveq	r3, #1
 8008710:	2300      	movne	r3, #0
 8008712:	b2db      	uxtb	r3, r3
 8008714:	e008      	b.n	8008728 <I2C_Slave_ISR_DMA+0x17c>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	bf0c      	ite	eq
 8008722:	2301      	moveq	r3, #1
 8008724:	2300      	movne	r3, #0
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 800872c:	2301      	movs	r3, #1
 800872e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 809e 	beq.w	8008876 <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	0b9b      	lsrs	r3, r3, #14
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8097 	beq.w	8008876 <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a33      	ldr	r2, [pc, #204]	; (800881c <I2C_Slave_ISR_DMA+0x270>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d059      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a31      	ldr	r2, [pc, #196]	; (8008820 <I2C_Slave_ISR_DMA+0x274>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d053      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a2f      	ldr	r2, [pc, #188]	; (8008824 <I2C_Slave_ISR_DMA+0x278>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d04d      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a2d      	ldr	r2, [pc, #180]	; (8008828 <I2C_Slave_ISR_DMA+0x27c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d047      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a2b      	ldr	r2, [pc, #172]	; (800882c <I2C_Slave_ISR_DMA+0x280>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d041      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a29      	ldr	r2, [pc, #164]	; (8008830 <I2C_Slave_ISR_DMA+0x284>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d03b      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a27      	ldr	r2, [pc, #156]	; (8008834 <I2C_Slave_ISR_DMA+0x288>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d035      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a25      	ldr	r2, [pc, #148]	; (8008838 <I2C_Slave_ISR_DMA+0x28c>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d02f      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a23      	ldr	r2, [pc, #140]	; (800883c <I2C_Slave_ISR_DMA+0x290>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d029      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a21      	ldr	r2, [pc, #132]	; (8008840 <I2C_Slave_ISR_DMA+0x294>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d023      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a1f      	ldr	r2, [pc, #124]	; (8008844 <I2C_Slave_ISR_DMA+0x298>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d01d      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a1d      	ldr	r2, [pc, #116]	; (8008848 <I2C_Slave_ISR_DMA+0x29c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d017      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1b      	ldr	r2, [pc, #108]	; (800884c <I2C_Slave_ISR_DMA+0x2a0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d011      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a19      	ldr	r2, [pc, #100]	; (8008850 <I2C_Slave_ISR_DMA+0x2a4>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00b      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a17      	ldr	r2, [pc, #92]	; (8008854 <I2C_Slave_ISR_DMA+0x2a8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d005      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x25c>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a15      	ldr	r2, [pc, #84]	; (8008858 <I2C_Slave_ISR_DMA+0x2ac>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d129      	bne.n	800885c <I2C_Slave_ISR_DMA+0x2b0>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	bf0c      	ite	eq
 8008814:	2301      	moveq	r3, #1
 8008816:	2300      	movne	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	e028      	b.n	800886e <I2C_Slave_ISR_DMA+0x2c2>
 800881c:	40020010 	.word	0x40020010
 8008820:	40020028 	.word	0x40020028
 8008824:	40020040 	.word	0x40020040
 8008828:	40020058 	.word	0x40020058
 800882c:	40020070 	.word	0x40020070
 8008830:	40020088 	.word	0x40020088
 8008834:	400200a0 	.word	0x400200a0
 8008838:	400200b8 	.word	0x400200b8
 800883c:	40020410 	.word	0x40020410
 8008840:	40020428 	.word	0x40020428
 8008844:	40020440 	.word	0x40020440
 8008848:	40020458 	.word	0x40020458
 800884c:	40020470 	.word	0x40020470
 8008850:	40020488 	.word	0x40020488
 8008854:	400204a0 	.word	0x400204a0
 8008858:	400204b8 	.word	0x400204b8
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	bf0c      	ite	eq
 8008868:	2301      	moveq	r3, #1
 800886a:	2300      	movne	r3, #0
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
 8008872:	2301      	movs	r3, #1
 8008874:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d128      	bne.n	80088ce <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b28      	cmp	r3, #40	; 0x28
 8008886:	d108      	bne.n	800889a <I2C_Slave_ISR_DMA+0x2ee>
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800888e:	d104      	bne.n	800889a <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 fca2 	bl	80091dc <I2C_ITListenCplt>
 8008898:	e048      	b.n	800892c <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b29      	cmp	r3, #41	; 0x29
 80088a4:	d10e      	bne.n	80088c4 <I2C_Slave_ISR_DMA+0x318>
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088ac:	d00a      	beq.n	80088c4 <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2210      	movs	r2, #16
 80088b4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 fddd 	bl	8009476 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f96c 	bl	8008b9a <I2C_ITSlaveSeqCplt>
 80088c2:	e033      	b.n	800892c <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2210      	movs	r2, #16
 80088ca:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80088cc:	e034      	b.n	8008938 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2210      	movs	r2, #16
 80088d4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088da:	f043 0204 	orr.w	r2, r3, #4
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <I2C_Slave_ISR_DMA+0x34c>
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088f6:	d11f      	bne.n	8008938 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	2b21      	cmp	r3, #33	; 0x21
 80088fc:	d002      	beq.n	8008904 <I2C_Slave_ISR_DMA+0x358>
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	2b29      	cmp	r3, #41	; 0x29
 8008902:	d103      	bne.n	800890c <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2221      	movs	r2, #33	; 0x21
 8008908:	631a      	str	r2, [r3, #48]	; 0x30
 800890a:	e008      	b.n	800891e <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	2b22      	cmp	r3, #34	; 0x22
 8008910:	d002      	beq.n	8008918 <I2C_Slave_ISR_DMA+0x36c>
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b2a      	cmp	r3, #42	; 0x2a
 8008916:	d102      	bne.n	800891e <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2222      	movs	r2, #34	; 0x22
 800891c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008922:	4619      	mov	r1, r3
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 fcaf 	bl	8009288 <I2C_ITError>
      if (treatdmanack == 1U)
 800892a:	e005      	b.n	8008938 <I2C_Slave_ISR_DMA+0x38c>
 800892c:	e004      	b.n	8008938 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2210      	movs	r2, #16
 8008934:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008936:	e011      	b.n	800895c <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
 8008938:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800893a:	e00f      	b.n	800895c <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	08db      	lsrs	r3, r3, #3
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d009      	beq.n	800895c <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	08db      	lsrs	r3, r3, #3
 800894c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 f85e 	bl	8008a18 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop

08008970 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af02      	add	r7, sp, #8
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	4608      	mov	r0, r1
 800897a:	4611      	mov	r1, r2
 800897c:	461a      	mov	r2, r3
 800897e:	4603      	mov	r3, r0
 8008980:	817b      	strh	r3, [r7, #10]
 8008982:	460b      	mov	r3, r1
 8008984:	813b      	strh	r3, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800898a:	88fb      	ldrh	r3, [r7, #6]
 800898c:	b2da      	uxtb	r2, r3
 800898e:	8979      	ldrh	r1, [r7, #10]
 8008990:	4b20      	ldr	r3, [pc, #128]	; (8008a14 <I2C_RequestMemoryRead+0xa4>)
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	2300      	movs	r3, #0
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f001 f956 	bl	8009c48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	69b9      	ldr	r1, [r7, #24]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 ff6f 	bl	8009884 <I2C_WaitOnTXISFlagUntilTimeout>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e02c      	b.n	8008a0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d105      	bne.n	80089c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089b6:	893b      	ldrh	r3, [r7, #8]
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	629a      	str	r2, [r3, #40]	; 0x28
 80089c0:	e015      	b.n	80089ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80089c2:	893b      	ldrh	r3, [r7, #8]
 80089c4:	0a1b      	lsrs	r3, r3, #8
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089d0:	69fa      	ldr	r2, [r7, #28]
 80089d2:	69b9      	ldr	r1, [r7, #24]
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 ff55 	bl	8009884 <I2C_WaitOnTXISFlagUntilTimeout>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e012      	b.n	8008a0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089e4:	893b      	ldrh	r3, [r7, #8]
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2200      	movs	r2, #0
 80089f6:	2140      	movs	r1, #64	; 0x40
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 ff03 	bl	8009804 <I2C_WaitOnFlagUntilTimeout>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e000      	b.n	8008a0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	80002000 	.word	0x80002000

08008a18 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a2e:	2b28      	cmp	r3, #40	; 0x28
 8008a30:	d16a      	bne.n	8008b08 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	0c1b      	lsrs	r3, r3, #16
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	0c1b      	lsrs	r3, r3, #16
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008a50:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a5e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008a6c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d138      	bne.n	8008ae8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008a76:	897b      	ldrh	r3, [r7, #10]
 8008a78:	09db      	lsrs	r3, r3, #7
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	89bb      	ldrh	r3, [r7, #12]
 8008a7e:	4053      	eors	r3, r2
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	f003 0306 	and.w	r3, r3, #6
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d11c      	bne.n	8008ac4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008a8a:	897b      	ldrh	r3, [r7, #10]
 8008a8c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d13b      	bne.n	8008b18 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2208      	movs	r2, #8
 8008aac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ab6:	89ba      	ldrh	r2, [r7, #12]
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff fb31 	bl	8008124 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ac2:	e029      	b.n	8008b18 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008ac4:	893b      	ldrh	r3, [r7, #8]
 8008ac6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 f951 	bl	8009d74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ada:	89ba      	ldrh	r2, [r7, #12]
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff fb1f 	bl	8008124 <HAL_I2C_AddrCallback>
}
 8008ae6:	e017      	b.n	8008b18 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f001 f941 	bl	8009d74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008afa:	89ba      	ldrh	r2, [r7, #12]
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff fb0f 	bl	8008124 <HAL_I2C_AddrCallback>
}
 8008b06:	e007      	b.n	8008b18 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2208      	movs	r2, #8
 8008b0e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008b18:	bf00      	nop
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b21      	cmp	r3, #33	; 0x21
 8008b3a:	d115      	bne.n	8008b68 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2211      	movs	r2, #17
 8008b48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b50:	2101      	movs	r1, #1
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 f90e 	bl	8009d74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff fab7 	bl	80080d4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008b66:	e014      	b.n	8008b92 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2212      	movs	r2, #18
 8008b74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008b7c:	2102      	movs	r1, #2
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 f8f8 	bl	8009d74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7ff faab 	bl	80080e8 <HAL_I2C_MasterRxCpltCallback>
}
 8008b92:	bf00      	nop
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	0b9b      	lsrs	r3, r3, #14
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d008      	beq.n	8008bd0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	e00d      	b.n	8008bec <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	0bdb      	lsrs	r3, r3, #15
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d007      	beq.n	8008bec <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bea:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b29      	cmp	r3, #41	; 0x29
 8008bf6:	d112      	bne.n	8008c1e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2228      	movs	r2, #40	; 0x28
 8008bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2221      	movs	r2, #33	; 0x21
 8008c04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c06:	2101      	movs	r1, #1
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 f8b3 	bl	8009d74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff fa70 	bl	80080fc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c1c:	e017      	b.n	8008c4e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b2a      	cmp	r3, #42	; 0x2a
 8008c28:	d111      	bne.n	8008c4e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2228      	movs	r2, #40	; 0x28
 8008c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2222      	movs	r2, #34	; 0x22
 8008c36:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008c38:	2102      	movs	r1, #2
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 f89a 	bl	8009d74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff fa61 	bl	8008110 <HAL_I2C_SlaveRxCpltCallback>
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b21      	cmp	r3, #33	; 0x21
 8008c78:	d107      	bne.n	8008c8a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 f879 	bl	8009d74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2211      	movs	r2, #17
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30
 8008c88:	e00c      	b.n	8008ca4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b22      	cmp	r3, #34	; 0x22
 8008c94:	d106      	bne.n	8008ca4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008c96:	2102      	movs	r1, #2
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f86b 	bl	8009d74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2212      	movs	r2, #18
 8008ca2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6859      	ldr	r1, [r3, #4]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	4b4d      	ldr	r3, [pc, #308]	; (8008de4 <I2C_ITMasterCplt+0x18c>)
 8008cb0:	400b      	ands	r3, r1
 8008cb2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a4a      	ldr	r2, [pc, #296]	; (8008de8 <I2C_ITMasterCplt+0x190>)
 8008cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	091b      	lsrs	r3, r3, #4
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d009      	beq.n	8008ce0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2210      	movs	r2, #16
 8008cd2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd8:	f043 0204 	orr.w	r2, r3, #4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b60      	cmp	r3, #96	; 0x60
 8008cea:	d10b      	bne.n	8008d04 <I2C_ITMasterCplt+0xac>
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	089b      	lsrs	r3, r3, #2
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008d02:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fbb6 	bl	8009476 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b60      	cmp	r3, #96	; 0x60
 8008d1a:	d002      	beq.n	8008d22 <I2C_ITMasterCplt+0xca>
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d006      	beq.n	8008d30 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 faad 	bl	8009288 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008d2e:	e054      	b.n	8008dda <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b21      	cmp	r3, #33	; 0x21
 8008d3a:	d124      	bne.n	8008d86 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b40      	cmp	r3, #64	; 0x40
 8008d54:	d10b      	bne.n	8008d6e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff f9f4 	bl	8008154 <HAL_I2C_MemTxCpltCallback>
}
 8008d6c:	e035      	b.n	8008dda <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff f9a8 	bl	80080d4 <HAL_I2C_MasterTxCpltCallback>
}
 8008d84:	e029      	b.n	8008dda <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b22      	cmp	r3, #34	; 0x22
 8008d90:	d123      	bne.n	8008dda <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b40      	cmp	r3, #64	; 0x40
 8008daa:	d10b      	bne.n	8008dc4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff f9d3 	bl	8008168 <HAL_I2C_MemRxCpltCallback>
}
 8008dc2:	e00a      	b.n	8008dda <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff f987 	bl	80080e8 <HAL_I2C_MasterRxCpltCallback>
}
 8008dda:	bf00      	nop
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	fe00e800 	.word	0xfe00e800
 8008de8:	ffff0000 	.word	0xffff0000

08008dec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e08:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b21      	cmp	r3, #33	; 0x21
 8008e16:	d002      	beq.n	8008e1e <I2C_ITSlaveCplt+0x32>
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	2b29      	cmp	r3, #41	; 0x29
 8008e1c:	d108      	bne.n	8008e30 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008e1e:	f248 0101 	movw	r1, #32769	; 0x8001
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 ffa6 	bl	8009d74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2221      	movs	r2, #33	; 0x21
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8008e2e:	e00d      	b.n	8008e4c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	2b22      	cmp	r3, #34	; 0x22
 8008e34:	d002      	beq.n	8008e3c <I2C_ITSlaveCplt+0x50>
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	2b2a      	cmp	r3, #42	; 0x2a
 8008e3a:	d107      	bne.n	8008e4c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008e3c:	f248 0102 	movw	r1, #32770	; 0x8002
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 ff97 	bl	8009d74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2222      	movs	r2, #34	; 0x22
 8008e4a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e5a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6859      	ldr	r1, [r3, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	4b80      	ldr	r3, [pc, #512]	; (8009068 <I2C_ITSlaveCplt+0x27c>)
 8008e68:	400b      	ands	r3, r1
 8008e6a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fb02 	bl	8009476 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	0b9b      	lsrs	r3, r3, #14
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d07a      	beq.n	8008f74 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 8111 	beq.w	80090ba <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a73      	ldr	r2, [pc, #460]	; (800906c <I2C_ITSlaveCplt+0x280>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d059      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a71      	ldr	r2, [pc, #452]	; (8009070 <I2C_ITSlaveCplt+0x284>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d053      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a6f      	ldr	r2, [pc, #444]	; (8009074 <I2C_ITSlaveCplt+0x288>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d04d      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a6d      	ldr	r2, [pc, #436]	; (8009078 <I2C_ITSlaveCplt+0x28c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d047      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a6b      	ldr	r2, [pc, #428]	; (800907c <I2C_ITSlaveCplt+0x290>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d041      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a69      	ldr	r2, [pc, #420]	; (8009080 <I2C_ITSlaveCplt+0x294>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d03b      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a67      	ldr	r2, [pc, #412]	; (8009084 <I2C_ITSlaveCplt+0x298>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d035      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a65      	ldr	r2, [pc, #404]	; (8009088 <I2C_ITSlaveCplt+0x29c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d02f      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a63      	ldr	r2, [pc, #396]	; (800908c <I2C_ITSlaveCplt+0x2a0>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d029      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a61      	ldr	r2, [pc, #388]	; (8009090 <I2C_ITSlaveCplt+0x2a4>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d023      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a5f      	ldr	r2, [pc, #380]	; (8009094 <I2C_ITSlaveCplt+0x2a8>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d01d      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a5d      	ldr	r2, [pc, #372]	; (8009098 <I2C_ITSlaveCplt+0x2ac>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d017      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a5b      	ldr	r2, [pc, #364]	; (800909c <I2C_ITSlaveCplt+0x2b0>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d011      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a59      	ldr	r2, [pc, #356]	; (80090a0 <I2C_ITSlaveCplt+0x2b4>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00b      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a57      	ldr	r2, [pc, #348]	; (80090a4 <I2C_ITSlaveCplt+0x2b8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d005      	beq.n	8008f58 <I2C_ITSlaveCplt+0x16c>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a55      	ldr	r2, [pc, #340]	; (80090a8 <I2C_ITSlaveCplt+0x2bc>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d105      	bne.n	8008f64 <I2C_ITSlaveCplt+0x178>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	e004      	b.n	8008f6e <I2C_ITSlaveCplt+0x182>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	8553      	strh	r3, [r2, #42]	; 0x2a
 8008f72:	e0a2      	b.n	80090ba <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	0bdb      	lsrs	r3, r3, #15
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 809c 	beq.w	80090ba <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 808f 	beq.w	80090ba <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a32      	ldr	r2, [pc, #200]	; (800906c <I2C_ITSlaveCplt+0x280>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d059      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a30      	ldr	r2, [pc, #192]	; (8009070 <I2C_ITSlaveCplt+0x284>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d053      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a2e      	ldr	r2, [pc, #184]	; (8009074 <I2C_ITSlaveCplt+0x288>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d04d      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a2c      	ldr	r2, [pc, #176]	; (8009078 <I2C_ITSlaveCplt+0x28c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d047      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a2a      	ldr	r2, [pc, #168]	; (800907c <I2C_ITSlaveCplt+0x290>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d041      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a28      	ldr	r2, [pc, #160]	; (8009080 <I2C_ITSlaveCplt+0x294>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d03b      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a26      	ldr	r2, [pc, #152]	; (8009084 <I2C_ITSlaveCplt+0x298>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d035      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a24      	ldr	r2, [pc, #144]	; (8009088 <I2C_ITSlaveCplt+0x29c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d02f      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a22      	ldr	r2, [pc, #136]	; (800908c <I2C_ITSlaveCplt+0x2a0>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d029      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a20      	ldr	r2, [pc, #128]	; (8009090 <I2C_ITSlaveCplt+0x2a4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d023      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a1e      	ldr	r2, [pc, #120]	; (8009094 <I2C_ITSlaveCplt+0x2a8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d01d      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1c      	ldr	r2, [pc, #112]	; (8009098 <I2C_ITSlaveCplt+0x2ac>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d017      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1a      	ldr	r2, [pc, #104]	; (800909c <I2C_ITSlaveCplt+0x2b0>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d011      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <I2C_ITSlaveCplt+0x2b4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00b      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a16      	ldr	r2, [pc, #88]	; (80090a4 <I2C_ITSlaveCplt+0x2b8>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d005      	beq.n	800905c <I2C_ITSlaveCplt+0x270>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a14      	ldr	r2, [pc, #80]	; (80090a8 <I2C_ITSlaveCplt+0x2bc>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d127      	bne.n	80090ac <I2C_ITSlaveCplt+0x2c0>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	b29b      	uxth	r3, r3
 8009066:	e026      	b.n	80090b6 <I2C_ITSlaveCplt+0x2ca>
 8009068:	fe00e800 	.word	0xfe00e800
 800906c:	40020010 	.word	0x40020010
 8009070:	40020028 	.word	0x40020028
 8009074:	40020040 	.word	0x40020040
 8009078:	40020058 	.word	0x40020058
 800907c:	40020070 	.word	0x40020070
 8009080:	40020088 	.word	0x40020088
 8009084:	400200a0 	.word	0x400200a0
 8009088:	400200b8 	.word	0x400200b8
 800908c:	40020410 	.word	0x40020410
 8009090:	40020428 	.word	0x40020428
 8009094:	40020440 	.word	0x40020440
 8009098:	40020458 	.word	0x40020458
 800909c:	40020470 	.word	0x40020470
 80090a0:	40020488 	.word	0x40020488
 80090a4:	400204a0 	.word	0x400204a0
 80090a8:	400204b8 	.word	0x400204b8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	089b      	lsrs	r3, r3, #2
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d020      	beq.n	8009108 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f023 0304 	bic.w	r3, r3, #4
 80090cc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	b2d2      	uxtb	r2, r2
 80090da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00c      	beq.n	8009108 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fe:	b29b      	uxth	r3, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009116:	f043 0204 	orr.w	r2, r3, #4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009130:	2b00      	cmp	r3, #0
 8009132:	d010      	beq.n	8009156 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8a4 	bl	8009288 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b28      	cmp	r3, #40	; 0x28
 800914a:	d141      	bne.n	80091d0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800914c:	6979      	ldr	r1, [r7, #20]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f844 	bl	80091dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009154:	e03c      	b.n	80091d0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800915e:	d014      	beq.n	800918a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff fd1a 	bl	8008b9a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a1b      	ldr	r2, [pc, #108]	; (80091d8 <I2C_ITSlaveCplt+0x3ec>)
 800916a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7fe ffdc 	bl	8008140 <HAL_I2C_ListenCpltCallback>
}
 8009188:	e022      	b.n	80091d0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b22      	cmp	r3, #34	; 0x22
 8009194:	d10e      	bne.n	80091b4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7fe ffaf 	bl	8008110 <HAL_I2C_SlaveRxCpltCallback>
}
 80091b2:	e00d      	b.n	80091d0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2220      	movs	r2, #32
 80091b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7fe ff96 	bl	80080fc <HAL_I2C_SlaveTxCpltCallback>
}
 80091d0:	bf00      	nop
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	ffff0000 	.word	0xffff0000

080091dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a26      	ldr	r2, [pc, #152]	; (8009284 <I2C_ITListenCplt+0xa8>)
 80091ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	089b      	lsrs	r3, r3, #2
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d022      	beq.n	800925a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009230:	2b00      	cmp	r3, #0
 8009232:	d012      	beq.n	800925a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009238:	3b01      	subs	r3, #1
 800923a:	b29a      	uxth	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009244:	b29b      	uxth	r3, r3
 8009246:	3b01      	subs	r3, #1
 8009248:	b29a      	uxth	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009252:	f043 0204 	orr.w	r2, r3, #4
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800925a:	f248 0103 	movw	r1, #32771	; 0x8003
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fd88 	bl	8009d74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2210      	movs	r2, #16
 800926a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7fe ff63 	bl	8008140 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800927a:	bf00      	nop
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	ffff0000 	.word	0xffff0000

08009288 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a5d      	ldr	r2, [pc, #372]	; (800941c <I2C_ITError+0x194>)
 80092a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	2b28      	cmp	r3, #40	; 0x28
 80092be:	d005      	beq.n	80092cc <I2C_ITError+0x44>
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	2b29      	cmp	r3, #41	; 0x29
 80092c4:	d002      	beq.n	80092cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ca:	d10b      	bne.n	80092e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80092cc:	2103      	movs	r1, #3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fd50 	bl	8009d74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2228      	movs	r2, #40	; 0x28
 80092d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a50      	ldr	r2, [pc, #320]	; (8009420 <I2C_ITError+0x198>)
 80092e0:	635a      	str	r2, [r3, #52]	; 0x34
 80092e2:	e011      	b.n	8009308 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80092e4:	f248 0103 	movw	r1, #32771	; 0x8003
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fd43 	bl	8009d74 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b60      	cmp	r3, #96	; 0x60
 80092f8:	d003      	beq.n	8009302 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2220      	movs	r2, #32
 80092fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	2b00      	cmp	r3, #0
 8009314:	d039      	beq.n	800938a <I2C_ITError+0x102>
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2b11      	cmp	r3, #17
 800931a:	d002      	beq.n	8009322 <I2C_ITError+0x9a>
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b21      	cmp	r3, #33	; 0x21
 8009320:	d133      	bne.n	800938a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800932c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009330:	d107      	bne.n	8009342 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009340:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009346:	4618      	mov	r0, r3
 8009348:	f7fd fd3a 	bl	8006dc0 <HAL_DMA_GetState>
 800934c:	4603      	mov	r3, r0
 800934e:	2b01      	cmp	r3, #1
 8009350:	d017      	beq.n	8009382 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	4a33      	ldr	r2, [pc, #204]	; (8009424 <I2C_ITError+0x19c>)
 8009358:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	4618      	mov	r0, r3
 8009368:	f7fc fbba 	bl	8005ae0 <HAL_DMA_Abort_IT>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d04d      	beq.n	800940e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800937c:	4610      	mov	r0, r2
 800937e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009380:	e045      	b.n	800940e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f850 	bl	8009428 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009388:	e041      	b.n	800940e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d039      	beq.n	8009406 <I2C_ITError+0x17e>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2b12      	cmp	r3, #18
 8009396:	d002      	beq.n	800939e <I2C_ITError+0x116>
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2b22      	cmp	r3, #34	; 0x22
 800939c:	d133      	bne.n	8009406 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ac:	d107      	bne.n	80093be <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093bc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fd fcfc 	bl	8006dc0 <HAL_DMA_GetState>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d017      	beq.n	80093fe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d2:	4a14      	ldr	r2, [pc, #80]	; (8009424 <I2C_ITError+0x19c>)
 80093d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fc fb7c 	bl	8005ae0 <HAL_DMA_Abort_IT>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d011      	beq.n	8009412 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80093f8:	4610      	mov	r0, r2
 80093fa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80093fc:	e009      	b.n	8009412 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f812 	bl	8009428 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009404:	e005      	b.n	8009412 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f80e 	bl	8009428 <I2C_TreatErrorCallback>
  }
}
 800940c:	e002      	b.n	8009414 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800940e:	bf00      	nop
 8009410:	e000      	b.n	8009414 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009412:	bf00      	nop
}
 8009414:	bf00      	nop
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	ffff0000 	.word	0xffff0000
 8009420:	080081c1 	.word	0x080081c1
 8009424:	080097c9 	.word	0x080097c9

08009428 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b60      	cmp	r3, #96	; 0x60
 800943a:	d10e      	bne.n	800945a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7fe fe9c 	bl	8008190 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009458:	e009      	b.n	800946e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7fe fe87 	bl	800817c <HAL_I2C_ErrorCallback>
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b02      	cmp	r3, #2
 800948a:	d103      	bne.n	8009494 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2200      	movs	r2, #0
 8009492:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d007      	beq.n	80094b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	699a      	ldr	r2, [r3, #24]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0201 	orr.w	r2, r2, #1
 80094b0:	619a      	str	r2, [r3, #24]
  }
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094da:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80094e6:	2120      	movs	r1, #32
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 fbdf 	bl	8009cac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80094ee:	e02d      	b.n	800954c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80094f8:	441a      	add	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009502:	b29b      	uxth	r3, r3
 8009504:	2bff      	cmp	r3, #255	; 0xff
 8009506:	d903      	bls.n	8009510 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	22ff      	movs	r2, #255	; 0xff
 800950c:	851a      	strh	r2, [r3, #40]	; 0x28
 800950e:	e004      	b.n	800951a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009514:	b29a      	uxth	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3324      	adds	r3, #36	; 0x24
 8009524:	4619      	mov	r1, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009530:	f7fb fd4e 	bl	8004fd0 <HAL_DMA_Start_IT>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d004      	beq.n	8009544 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800953a:	2110      	movs	r1, #16
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff fea3 	bl	8009288 <I2C_ITError>
}
 8009542:	e003      	b.n	800954c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009544:	2140      	movs	r1, #64	; 0x40
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 fbb0 	bl	8009cac <I2C_Enable_IRQ>
}
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	2b00      	cmp	r3, #0
 800956c:	d076      	beq.n	800965c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a71      	ldr	r2, [pc, #452]	; (800973c <I2C_DMAError+0x1e8>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d059      	beq.n	800962e <I2C_DMAError+0xda>
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a6f      	ldr	r2, [pc, #444]	; (8009740 <I2C_DMAError+0x1ec>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d053      	beq.n	800962e <I2C_DMAError+0xda>
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a6d      	ldr	r2, [pc, #436]	; (8009744 <I2C_DMAError+0x1f0>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d04d      	beq.n	800962e <I2C_DMAError+0xda>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a6b      	ldr	r2, [pc, #428]	; (8009748 <I2C_DMAError+0x1f4>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d047      	beq.n	800962e <I2C_DMAError+0xda>
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a69      	ldr	r2, [pc, #420]	; (800974c <I2C_DMAError+0x1f8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d041      	beq.n	800962e <I2C_DMAError+0xda>
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a67      	ldr	r2, [pc, #412]	; (8009750 <I2C_DMAError+0x1fc>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d03b      	beq.n	800962e <I2C_DMAError+0xda>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a65      	ldr	r2, [pc, #404]	; (8009754 <I2C_DMAError+0x200>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d035      	beq.n	800962e <I2C_DMAError+0xda>
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a63      	ldr	r2, [pc, #396]	; (8009758 <I2C_DMAError+0x204>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d02f      	beq.n	800962e <I2C_DMAError+0xda>
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a61      	ldr	r2, [pc, #388]	; (800975c <I2C_DMAError+0x208>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d029      	beq.n	800962e <I2C_DMAError+0xda>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a5f      	ldr	r2, [pc, #380]	; (8009760 <I2C_DMAError+0x20c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d023      	beq.n	800962e <I2C_DMAError+0xda>
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a5d      	ldr	r2, [pc, #372]	; (8009764 <I2C_DMAError+0x210>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d01d      	beq.n	800962e <I2C_DMAError+0xda>
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a5b      	ldr	r2, [pc, #364]	; (8009768 <I2C_DMAError+0x214>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d017      	beq.n	800962e <I2C_DMAError+0xda>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a59      	ldr	r2, [pc, #356]	; (800976c <I2C_DMAError+0x218>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d011      	beq.n	800962e <I2C_DMAError+0xda>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a57      	ldr	r2, [pc, #348]	; (8009770 <I2C_DMAError+0x21c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00b      	beq.n	800962e <I2C_DMAError+0xda>
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a55      	ldr	r2, [pc, #340]	; (8009774 <I2C_DMAError+0x220>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d005      	beq.n	800962e <I2C_DMAError+0xda>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a53      	ldr	r2, [pc, #332]	; (8009778 <I2C_DMAError+0x224>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d109      	bne.n	8009642 <I2C_DMAError+0xee>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	bf0c      	ite	eq
 800963a:	2301      	moveq	r3, #1
 800963c:	2300      	movne	r3, #0
 800963e:	b2db      	uxtb	r3, r3
 8009640:	e008      	b.n	8009654 <I2C_DMAError+0x100>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	bf0c      	ite	eq
 800964e:	2301      	moveq	r3, #1
 8009650:	2300      	movne	r3, #0
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8009658:	2301      	movs	r3, #1
 800965a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 8098 	beq.w	8009796 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a33      	ldr	r2, [pc, #204]	; (800973c <I2C_DMAError+0x1e8>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d059      	beq.n	8009726 <I2C_DMAError+0x1d2>
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a31      	ldr	r2, [pc, #196]	; (8009740 <I2C_DMAError+0x1ec>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d053      	beq.n	8009726 <I2C_DMAError+0x1d2>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a2f      	ldr	r2, [pc, #188]	; (8009744 <I2C_DMAError+0x1f0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d04d      	beq.n	8009726 <I2C_DMAError+0x1d2>
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a2d      	ldr	r2, [pc, #180]	; (8009748 <I2C_DMAError+0x1f4>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d047      	beq.n	8009726 <I2C_DMAError+0x1d2>
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a2b      	ldr	r2, [pc, #172]	; (800974c <I2C_DMAError+0x1f8>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d041      	beq.n	8009726 <I2C_DMAError+0x1d2>
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a29      	ldr	r2, [pc, #164]	; (8009750 <I2C_DMAError+0x1fc>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d03b      	beq.n	8009726 <I2C_DMAError+0x1d2>
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a27      	ldr	r2, [pc, #156]	; (8009754 <I2C_DMAError+0x200>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d035      	beq.n	8009726 <I2C_DMAError+0x1d2>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a25      	ldr	r2, [pc, #148]	; (8009758 <I2C_DMAError+0x204>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d02f      	beq.n	8009726 <I2C_DMAError+0x1d2>
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a23      	ldr	r2, [pc, #140]	; (800975c <I2C_DMAError+0x208>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d029      	beq.n	8009726 <I2C_DMAError+0x1d2>
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a21      	ldr	r2, [pc, #132]	; (8009760 <I2C_DMAError+0x20c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d023      	beq.n	8009726 <I2C_DMAError+0x1d2>
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a1f      	ldr	r2, [pc, #124]	; (8009764 <I2C_DMAError+0x210>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d01d      	beq.n	8009726 <I2C_DMAError+0x1d2>
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a1d      	ldr	r2, [pc, #116]	; (8009768 <I2C_DMAError+0x214>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d017      	beq.n	8009726 <I2C_DMAError+0x1d2>
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a1b      	ldr	r2, [pc, #108]	; (800976c <I2C_DMAError+0x218>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d011      	beq.n	8009726 <I2C_DMAError+0x1d2>
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a19      	ldr	r2, [pc, #100]	; (8009770 <I2C_DMAError+0x21c>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d00b      	beq.n	8009726 <I2C_DMAError+0x1d2>
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a17      	ldr	r2, [pc, #92]	; (8009774 <I2C_DMAError+0x220>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d005      	beq.n	8009726 <I2C_DMAError+0x1d2>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a15      	ldr	r2, [pc, #84]	; (8009778 <I2C_DMAError+0x224>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d12a      	bne.n	800977c <I2C_DMAError+0x228>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	bf0c      	ite	eq
 8009732:	2301      	moveq	r3, #1
 8009734:	2300      	movne	r3, #0
 8009736:	b2db      	uxtb	r3, r3
 8009738:	e029      	b.n	800978e <I2C_DMAError+0x23a>
 800973a:	bf00      	nop
 800973c:	40020010 	.word	0x40020010
 8009740:	40020028 	.word	0x40020028
 8009744:	40020040 	.word	0x40020040
 8009748:	40020058 	.word	0x40020058
 800974c:	40020070 	.word	0x40020070
 8009750:	40020088 	.word	0x40020088
 8009754:	400200a0 	.word	0x400200a0
 8009758:	400200b8 	.word	0x400200b8
 800975c:	40020410 	.word	0x40020410
 8009760:	40020428 	.word	0x40020428
 8009764:	40020440 	.word	0x40020440
 8009768:	40020458 	.word	0x40020458
 800976c:	40020470 	.word	0x40020470
 8009770:	40020488 	.word	0x40020488
 8009774:	400204a0 	.word	0x400204a0
 8009778:	400204b8 	.word	0x400204b8
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	bf0c      	ite	eq
 8009788:	2301      	moveq	r3, #1
 800978a:	2300      	movne	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8009792:	2301      	movs	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7fd fb20 	bl	8006ddc <HAL_DMA_GetError>
 800979c:	4603      	mov	r3, r0
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d00e      	beq.n	80097c0 <I2C_DMAError+0x26c>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685a      	ldr	r2, [r3, #4]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097b6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80097b8:	2110      	movs	r1, #16
 80097ba:	68b8      	ldr	r0, [r7, #8]
 80097bc:	f7ff fd64 	bl	8009288 <I2C_ITError>
  }
}
 80097c0:	bf00      	nop
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	2200      	movs	r2, #0
 80097e4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f2:	2200      	movs	r2, #0
 80097f4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7ff fe16 	bl	8009428 <I2C_TreatErrorCallback>
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4613      	mov	r3, r2
 8009812:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009814:	e022      	b.n	800985c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800981c:	d01e      	beq.n	800985c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981e:	f7fa ff2f 	bl	8004680 <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d302      	bcc.n	8009834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d113      	bne.n	800985c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009838:	f043 0220 	orr.w	r2, r3, #32
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2220      	movs	r2, #32
 8009844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e00f      	b.n	800987c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699a      	ldr	r2, [r3, #24]
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4013      	ands	r3, r2
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	429a      	cmp	r2, r3
 800986a:	bf0c      	ite	eq
 800986c:	2301      	moveq	r3, #1
 800986e:	2300      	movne	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	461a      	mov	r2, r3
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	429a      	cmp	r2, r3
 8009878:	d0cd      	beq.n	8009816 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009890:	e02c      	b.n	80098ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f000 f8ea 	bl	8009a70 <I2C_IsErrorOccurred>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e02a      	b.n	80098fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ac:	d01e      	beq.n	80098ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ae:	f7fa fee7 	bl	8004680 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d302      	bcc.n	80098c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d113      	bne.n	80098ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c8:	f043 0220 	orr.w	r2, r3, #32
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e007      	b.n	80098fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d1cb      	bne.n	8009892 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009910:	e028      	b.n	8009964 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	68b9      	ldr	r1, [r7, #8]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f000 f8aa 	bl	8009a70 <I2C_IsErrorOccurred>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e026      	b.n	8009974 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009926:	f7fa feab 	bl	8004680 <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	429a      	cmp	r2, r3
 8009934:	d302      	bcc.n	800993c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d113      	bne.n	8009964 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009940:	f043 0220 	orr.w	r2, r3, #32
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2220      	movs	r2, #32
 800994c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e007      	b.n	8009974 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b20      	cmp	r3, #32
 8009970:	d1cf      	bne.n	8009912 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009988:	e064      	b.n	8009a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	68b9      	ldr	r1, [r7, #8]
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 f86e 	bl	8009a70 <I2C_IsErrorOccurred>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e062      	b.n	8009a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b20      	cmp	r3, #32
 80099aa:	d138      	bne.n	8009a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	f003 0304 	and.w	r3, r3, #4
 80099b6:	2b04      	cmp	r3, #4
 80099b8:	d105      	bne.n	80099c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e04e      	b.n	8009a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	f003 0310 	and.w	r3, r3, #16
 80099d0:	2b10      	cmp	r3, #16
 80099d2:	d107      	bne.n	80099e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2210      	movs	r2, #16
 80099da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2204      	movs	r2, #4
 80099e0:	645a      	str	r2, [r3, #68]	; 0x44
 80099e2:	e002      	b.n	80099ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2220      	movs	r2, #32
 80099f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6859      	ldr	r1, [r3, #4]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	4b1b      	ldr	r3, [pc, #108]	; (8009a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80099fe:	400b      	ands	r3, r1
 8009a00:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e022      	b.n	8009a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1e:	f7fa fe2f 	bl	8004680 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d302      	bcc.n	8009a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10f      	bne.n	8009a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a38:	f043 0220 	orr.w	r2, r3, #32
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e007      	b.n	8009a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	f003 0304 	and.w	r3, r3, #4
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d193      	bne.n	800998a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	fe00e800 	.word	0xfe00e800

08009a70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08a      	sub	sp, #40	; 0x28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	f003 0310 	and.w	r3, r3, #16
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d075      	beq.n	8009b88 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2210      	movs	r2, #16
 8009aa2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009aa4:	e056      	b.n	8009b54 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aac:	d052      	beq.n	8009b54 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009aae:	f7fa fde7 	bl	8004680 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d302      	bcc.n	8009ac4 <I2C_IsErrorOccurred+0x54>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d147      	bne.n	8009b54 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ace:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ad6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ae6:	d12e      	bne.n	8009b46 <I2C_IsErrorOccurred+0xd6>
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aee:	d02a      	beq.n	8009b46 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009af0:	7cfb      	ldrb	r3, [r7, #19]
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d027      	beq.n	8009b46 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b04:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b06:	f7fa fdbb 	bl	8004680 <HAL_GetTick>
 8009b0a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b0c:	e01b      	b.n	8009b46 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b0e:	f7fa fdb7 	bl	8004680 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b19      	cmp	r3, #25
 8009b1a:	d914      	bls.n	8009b46 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b20:	f043 0220 	orr.w	r2, r3, #32
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b20      	cmp	r3, #32
 8009b52:	d1dc      	bne.n	8009b0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	f003 0320 	and.w	r3, r3, #32
 8009b5e:	2b20      	cmp	r3, #32
 8009b60:	d003      	beq.n	8009b6a <I2C_IsErrorOccurred+0xfa>
 8009b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d09d      	beq.n	8009aa6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d103      	bne.n	8009b7a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2220      	movs	r2, #32
 8009b78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	f043 0304 	orr.w	r3, r3, #4
 8009b80:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	f043 0301 	orr.w	r3, r3, #1
 8009ba0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009baa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00b      	beq.n	8009bd4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	f043 0308 	orr.w	r3, r3, #8
 8009bc2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	f043 0302 	orr.w	r3, r3, #2
 8009be4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01c      	beq.n	8009c38 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff fc39 	bl	8009476 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6859      	ldr	r1, [r3, #4]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	4b0d      	ldr	r3, [pc, #52]	; (8009c44 <I2C_IsErrorOccurred+0x1d4>)
 8009c10:	400b      	ands	r3, r1
 8009c12:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2220      	movs	r2, #32
 8009c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3728      	adds	r7, #40	; 0x28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	fe00e800 	.word	0xfe00e800

08009c48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	607b      	str	r3, [r7, #4]
 8009c52:	460b      	mov	r3, r1
 8009c54:	817b      	strh	r3, [r7, #10]
 8009c56:	4613      	mov	r3, r2
 8009c58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c5a:	897b      	ldrh	r3, [r7, #10]
 8009c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c60:	7a7b      	ldrb	r3, [r7, #9]
 8009c62:	041b      	lsls	r3, r3, #16
 8009c64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c68:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c76:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	0d5b      	lsrs	r3, r3, #21
 8009c82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c86:	4b08      	ldr	r3, [pc, #32]	; (8009ca8 <I2C_TransferConfig+0x60>)
 8009c88:	430b      	orrs	r3, r1
 8009c8a:	43db      	mvns	r3, r3
 8009c8c:	ea02 0103 	and.w	r1, r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c9a:	bf00      	nop
 8009c9c:	371c      	adds	r7, #28
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	03ff63ff 	.word	0x03ff63ff

08009cac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc0:	4a2a      	ldr	r2, [pc, #168]	; (8009d6c <I2C_Enable_IRQ+0xc0>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d004      	beq.n	8009cd0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009cca:	4a29      	ldr	r2, [pc, #164]	; (8009d70 <I2C_Enable_IRQ+0xc4>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d11d      	bne.n	8009d0c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009cd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	da03      	bge.n	8009ce0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009cde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009ce0:	887b      	ldrh	r3, [r7, #2]
 8009ce2:	2b10      	cmp	r3, #16
 8009ce4:	d103      	bne.n	8009cee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009cec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009cee:	887b      	ldrh	r3, [r7, #2]
 8009cf0:	2b20      	cmp	r3, #32
 8009cf2:	d103      	bne.n	8009cfc <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009cfa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009cfc:	887b      	ldrh	r3, [r7, #2]
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d125      	bne.n	8009d4e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d08:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009d0a:	e020      	b.n	8009d4e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009d0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	da03      	bge.n	8009d1c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009d1a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d1c:	887b      	ldrh	r3, [r7, #2]
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009d2c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009d2e:	887b      	ldrh	r3, [r7, #2]
 8009d30:	f003 0302 	and.w	r3, r3, #2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d003      	beq.n	8009d40 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009d3e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009d40:	887b      	ldrh	r3, [r7, #2]
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	d103      	bne.n	8009d4e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f043 0320 	orr.w	r3, r3, #32
 8009d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6819      	ldr	r1, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	601a      	str	r2, [r3, #0]
}
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	080083c7 	.word	0x080083c7
 8009d70:	080085ad 	.word	0x080085ad

08009d74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d84:	887b      	ldrh	r3, [r7, #2]
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00f      	beq.n	8009dae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009d94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009da2:	2b28      	cmp	r3, #40	; 0x28
 8009da4:	d003      	beq.n	8009dae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009dac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009dae:	887b      	ldrh	r3, [r7, #2]
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00f      	beq.n	8009dd8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009dbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009dcc:	2b28      	cmp	r3, #40	; 0x28
 8009dce:	d003      	beq.n	8009dd8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009dd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009dd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	da03      	bge.n	8009de8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009de6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009de8:	887b      	ldrh	r3, [r7, #2]
 8009dea:	2b10      	cmp	r3, #16
 8009dec:	d103      	bne.n	8009df6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009df4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009df6:	887b      	ldrh	r3, [r7, #2]
 8009df8:	2b20      	cmp	r3, #32
 8009dfa:	d103      	bne.n	8009e04 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f043 0320 	orr.w	r3, r3, #32
 8009e02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009e04:	887b      	ldrh	r3, [r7, #2]
 8009e06:	2b40      	cmp	r3, #64	; 0x40
 8009e08:	d103      	bne.n	8009e12 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e10:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6819      	ldr	r1, [r3, #0]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	43da      	mvns	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	400a      	ands	r2, r1
 8009e22:	601a      	str	r2, [r3, #0]
}
 8009e24:	bf00      	nop
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b20      	cmp	r3, #32
 8009e44:	d138      	bne.n	8009eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d101      	bne.n	8009e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e50:	2302      	movs	r3, #2
 8009e52:	e032      	b.n	8009eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2224      	movs	r2, #36	; 0x24
 8009e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f022 0201 	bic.w	r2, r2, #1
 8009e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6819      	ldr	r1, [r3, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	430a      	orrs	r2, r1
 8009e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 0201 	orr.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	e000      	b.n	8009eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009eb8:	2302      	movs	r3, #2
  }
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	d139      	bne.n	8009f50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d101      	bne.n	8009eea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	e033      	b.n	8009f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2224      	movs	r2, #36	; 0x24
 8009ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0201 	bic.w	r2, r2, #1
 8009f08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009f18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f042 0201 	orr.w	r2, r2, #1
 8009f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e000      	b.n	8009f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f50:	2302      	movs	r3, #2
  }
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
	...

08009f60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f68:	4b19      	ldr	r3, [pc, #100]	; (8009fd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	d00a      	beq.n	8009f8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f74:	4b16      	ldr	r3, [pc, #88]	; (8009fd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f003 0307 	and.w	r3, r3, #7
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d001      	beq.n	8009f86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e01f      	b.n	8009fc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	e01d      	b.n	8009fc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f8a:	4b11      	ldr	r3, [pc, #68]	; (8009fd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f023 0207 	bic.w	r2, r3, #7
 8009f92:	490f      	ldr	r1, [pc, #60]	; (8009fd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009f9a:	f7fa fb71 	bl	8004680 <HAL_GetTick>
 8009f9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fa0:	e009      	b.n	8009fb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009fa2:	f7fa fb6d 	bl	8004680 <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fb0:	d901      	bls.n	8009fb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e007      	b.n	8009fc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fb6:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc2:	d1ee      	bne.n	8009fa2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	58024800 	.word	0x58024800

08009fd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08c      	sub	sp, #48	; 0x30
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d102      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	f000 bc1d 	b.w	800a822 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 8087 	beq.w	800a104 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ff6:	4b99      	ldr	r3, [pc, #612]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a000:	4b96      	ldr	r3, [pc, #600]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a004:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a008:	2b10      	cmp	r3, #16
 800a00a:	d007      	beq.n	800a01c <HAL_RCC_OscConfig+0x48>
 800a00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00e:	2b18      	cmp	r3, #24
 800a010:	d110      	bne.n	800a034 <HAL_RCC_OscConfig+0x60>
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	f003 0303 	and.w	r3, r3, #3
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d10b      	bne.n	800a034 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a01c:	4b8f      	ldr	r3, [pc, #572]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d06c      	beq.n	800a102 <HAL_RCC_OscConfig+0x12e>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d168      	bne.n	800a102 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e3f6      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a03c:	d106      	bne.n	800a04c <HAL_RCC_OscConfig+0x78>
 800a03e:	4b87      	ldr	r3, [pc, #540]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a86      	ldr	r2, [pc, #536]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	e02e      	b.n	800a0aa <HAL_RCC_OscConfig+0xd6>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10c      	bne.n	800a06e <HAL_RCC_OscConfig+0x9a>
 800a054:	4b81      	ldr	r3, [pc, #516]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a80      	ldr	r2, [pc, #512]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a05a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	4b7e      	ldr	r3, [pc, #504]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a7d      	ldr	r2, [pc, #500]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	e01d      	b.n	800a0aa <HAL_RCC_OscConfig+0xd6>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a076:	d10c      	bne.n	800a092 <HAL_RCC_OscConfig+0xbe>
 800a078:	4b78      	ldr	r3, [pc, #480]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a77      	ldr	r2, [pc, #476]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a07e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	4b75      	ldr	r3, [pc, #468]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a74      	ldr	r2, [pc, #464]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a08a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	e00b      	b.n	800a0aa <HAL_RCC_OscConfig+0xd6>
 800a092:	4b72      	ldr	r3, [pc, #456]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a71      	ldr	r2, [pc, #452]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	4b6f      	ldr	r3, [pc, #444]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a6e      	ldr	r2, [pc, #440]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a0a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d013      	beq.n	800a0da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b2:	f7fa fae5 	bl	8004680 <HAL_GetTick>
 800a0b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0b8:	e008      	b.n	800a0cc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0ba:	f7fa fae1 	bl	8004680 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	2b64      	cmp	r3, #100	; 0x64
 800a0c6:	d901      	bls.n	800a0cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e3aa      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0cc:	4b63      	ldr	r3, [pc, #396]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0f0      	beq.n	800a0ba <HAL_RCC_OscConfig+0xe6>
 800a0d8:	e014      	b.n	800a104 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0da:	f7fa fad1 	bl	8004680 <HAL_GetTick>
 800a0de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0e0:	e008      	b.n	800a0f4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0e2:	f7fa facd 	bl	8004680 <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	2b64      	cmp	r3, #100	; 0x64
 800a0ee:	d901      	bls.n	800a0f4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e396      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0f4:	4b59      	ldr	r3, [pc, #356]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1f0      	bne.n	800a0e2 <HAL_RCC_OscConfig+0x10e>
 800a100:	e000      	b.n	800a104 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a102:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 80cb 	beq.w	800a2a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a112:	4b52      	ldr	r3, [pc, #328]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a11a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a11c:	4b4f      	ldr	r3, [pc, #316]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a120:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d007      	beq.n	800a138 <HAL_RCC_OscConfig+0x164>
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	2b18      	cmp	r3, #24
 800a12c:	d156      	bne.n	800a1dc <HAL_RCC_OscConfig+0x208>
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	f003 0303 	and.w	r3, r3, #3
 800a134:	2b00      	cmp	r3, #0
 800a136:	d151      	bne.n	800a1dc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a138:	4b48      	ldr	r3, [pc, #288]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <HAL_RCC_OscConfig+0x17c>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e368      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a150:	4b42      	ldr	r3, [pc, #264]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f023 0219 	bic.w	r2, r3, #25
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	493f      	ldr	r1, [pc, #252]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a162:	f7fa fa8d 	bl	8004680 <HAL_GetTick>
 800a166:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a168:	e008      	b.n	800a17c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a16a:	f7fa fa89 	bl	8004680 <HAL_GetTick>
 800a16e:	4602      	mov	r2, r0
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	2b02      	cmp	r3, #2
 800a176:	d901      	bls.n	800a17c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e352      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a17c:	4b37      	ldr	r3, [pc, #220]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d0f0      	beq.n	800a16a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a188:	f7fa faaa 	bl	80046e0 <HAL_GetREVID>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a192:	4293      	cmp	r3, r2
 800a194:	d817      	bhi.n	800a1c6 <HAL_RCC_OscConfig+0x1f2>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	2b40      	cmp	r3, #64	; 0x40
 800a19c:	d108      	bne.n	800a1b0 <HAL_RCC_OscConfig+0x1dc>
 800a19e:	4b2f      	ldr	r3, [pc, #188]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1a6:	4a2d      	ldr	r2, [pc, #180]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a1a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1ae:	e07b      	b.n	800a2a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1b0:	4b2a      	ldr	r3, [pc, #168]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	031b      	lsls	r3, r3, #12
 800a1be:	4927      	ldr	r1, [pc, #156]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1c4:	e070      	b.n	800a2a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1c6:	4b25      	ldr	r3, [pc, #148]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	061b      	lsls	r3, r3, #24
 800a1d4:	4921      	ldr	r1, [pc, #132]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1da:	e065      	b.n	800a2a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d048      	beq.n	800a276 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1e4:	4b1d      	ldr	r3, [pc, #116]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f023 0219 	bic.w	r2, r3, #25
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	491a      	ldr	r1, [pc, #104]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f6:	f7fa fa43 	bl	8004680 <HAL_GetTick>
 800a1fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1fc:	e008      	b.n	800a210 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1fe:	f7fa fa3f 	bl	8004680 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d901      	bls.n	800a210 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e308      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a210:	4b12      	ldr	r3, [pc, #72]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0304 	and.w	r3, r3, #4
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d0f0      	beq.n	800a1fe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a21c:	f7fa fa60 	bl	80046e0 <HAL_GetREVID>
 800a220:	4603      	mov	r3, r0
 800a222:	f241 0203 	movw	r2, #4099	; 0x1003
 800a226:	4293      	cmp	r3, r2
 800a228:	d81a      	bhi.n	800a260 <HAL_RCC_OscConfig+0x28c>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	2b40      	cmp	r3, #64	; 0x40
 800a230:	d108      	bne.n	800a244 <HAL_RCC_OscConfig+0x270>
 800a232:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a23a:	4a08      	ldr	r2, [pc, #32]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a23c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a240:	6053      	str	r3, [r2, #4]
 800a242:	e031      	b.n	800a2a8 <HAL_RCC_OscConfig+0x2d4>
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	031b      	lsls	r3, r3, #12
 800a252:	4902      	ldr	r1, [pc, #8]	; (800a25c <HAL_RCC_OscConfig+0x288>)
 800a254:	4313      	orrs	r3, r2
 800a256:	604b      	str	r3, [r1, #4]
 800a258:	e026      	b.n	800a2a8 <HAL_RCC_OscConfig+0x2d4>
 800a25a:	bf00      	nop
 800a25c:	58024400 	.word	0x58024400
 800a260:	4b9a      	ldr	r3, [pc, #616]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	061b      	lsls	r3, r3, #24
 800a26e:	4997      	ldr	r1, [pc, #604]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a270:	4313      	orrs	r3, r2
 800a272:	604b      	str	r3, [r1, #4]
 800a274:	e018      	b.n	800a2a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a276:	4b95      	ldr	r3, [pc, #596]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a94      	ldr	r2, [pc, #592]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a27c:	f023 0301 	bic.w	r3, r3, #1
 800a280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a282:	f7fa f9fd 	bl	8004680 <HAL_GetTick>
 800a286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a288:	e008      	b.n	800a29c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a28a:	f7fa f9f9 	bl	8004680 <HAL_GetTick>
 800a28e:	4602      	mov	r2, r0
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b02      	cmp	r3, #2
 800a296:	d901      	bls.n	800a29c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e2c2      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a29c:	4b8b      	ldr	r3, [pc, #556]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1f0      	bne.n	800a28a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 0310 	and.w	r3, r3, #16
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 80a9 	beq.w	800a408 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2b6:	4b85      	ldr	r3, [pc, #532]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2c0:	4b82      	ldr	r3, [pc, #520]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	d007      	beq.n	800a2dc <HAL_RCC_OscConfig+0x308>
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	2b18      	cmp	r3, #24
 800a2d0:	d13a      	bne.n	800a348 <HAL_RCC_OscConfig+0x374>
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f003 0303 	and.w	r3, r3, #3
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d135      	bne.n	800a348 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2dc:	4b7b      	ldr	r3, [pc, #492]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d005      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x320>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	2b80      	cmp	r3, #128	; 0x80
 800a2ee:	d001      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e296      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2f4:	f7fa f9f4 	bl	80046e0 <HAL_GetREVID>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d817      	bhi.n	800a332 <HAL_RCC_OscConfig+0x35e>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	2b20      	cmp	r3, #32
 800a308:	d108      	bne.n	800a31c <HAL_RCC_OscConfig+0x348>
 800a30a:	4b70      	ldr	r3, [pc, #448]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a312:	4a6e      	ldr	r2, [pc, #440]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a318:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a31a:	e075      	b.n	800a408 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a31c:	4b6b      	ldr	r3, [pc, #428]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	069b      	lsls	r3, r3, #26
 800a32a:	4968      	ldr	r1, [pc, #416]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a330:	e06a      	b.n	800a408 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a332:	4b66      	ldr	r3, [pc, #408]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	061b      	lsls	r3, r3, #24
 800a340:	4962      	ldr	r1, [pc, #392]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a342:	4313      	orrs	r3, r2
 800a344:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a346:	e05f      	b.n	800a408 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d042      	beq.n	800a3d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a350:	4b5e      	ldr	r3, [pc, #376]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a5d      	ldr	r2, [pc, #372]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a35c:	f7fa f990 	bl	8004680 <HAL_GetTick>
 800a360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a362:	e008      	b.n	800a376 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a364:	f7fa f98c 	bl	8004680 <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d901      	bls.n	800a376 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e255      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a376:	4b55      	ldr	r3, [pc, #340]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0f0      	beq.n	800a364 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a382:	f7fa f9ad 	bl	80046e0 <HAL_GetREVID>
 800a386:	4603      	mov	r3, r0
 800a388:	f241 0203 	movw	r2, #4099	; 0x1003
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d817      	bhi.n	800a3c0 <HAL_RCC_OscConfig+0x3ec>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	2b20      	cmp	r3, #32
 800a396:	d108      	bne.n	800a3aa <HAL_RCC_OscConfig+0x3d6>
 800a398:	4b4c      	ldr	r3, [pc, #304]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a3a0:	4a4a      	ldr	r2, [pc, #296]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a3a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3a6:	6053      	str	r3, [r2, #4]
 800a3a8:	e02e      	b.n	800a408 <HAL_RCC_OscConfig+0x434>
 800a3aa:	4b48      	ldr	r3, [pc, #288]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	069b      	lsls	r3, r3, #26
 800a3b8:	4944      	ldr	r1, [pc, #272]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	604b      	str	r3, [r1, #4]
 800a3be:	e023      	b.n	800a408 <HAL_RCC_OscConfig+0x434>
 800a3c0:	4b42      	ldr	r3, [pc, #264]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	061b      	lsls	r3, r3, #24
 800a3ce:	493f      	ldr	r1, [pc, #252]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	60cb      	str	r3, [r1, #12]
 800a3d4:	e018      	b.n	800a408 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a3d6:	4b3d      	ldr	r3, [pc, #244]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a3c      	ldr	r2, [pc, #240]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a3dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e2:	f7fa f94d 	bl	8004680 <HAL_GetTick>
 800a3e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3e8:	e008      	b.n	800a3fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a3ea:	f7fa f949 	bl	8004680 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d901      	bls.n	800a3fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e212      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3fc:	4b33      	ldr	r3, [pc, #204]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1f0      	bne.n	800a3ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0308 	and.w	r3, r3, #8
 800a410:	2b00      	cmp	r3, #0
 800a412:	d036      	beq.n	800a482 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d019      	beq.n	800a450 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a41c:	4b2b      	ldr	r3, [pc, #172]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a420:	4a2a      	ldr	r2, [pc, #168]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a422:	f043 0301 	orr.w	r3, r3, #1
 800a426:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a428:	f7fa f92a 	bl	8004680 <HAL_GetTick>
 800a42c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a430:	f7fa f926 	bl	8004680 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e1ef      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a442:	4b22      	ldr	r3, [pc, #136]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a446:	f003 0302 	and.w	r3, r3, #2
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0f0      	beq.n	800a430 <HAL_RCC_OscConfig+0x45c>
 800a44e:	e018      	b.n	800a482 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a450:	4b1e      	ldr	r3, [pc, #120]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a454:	4a1d      	ldr	r2, [pc, #116]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a45c:	f7fa f910 	bl	8004680 <HAL_GetTick>
 800a460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a462:	e008      	b.n	800a476 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a464:	f7fa f90c 	bl	8004680 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d901      	bls.n	800a476 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e1d5      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a476:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a47a:	f003 0302 	and.w	r3, r3, #2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1f0      	bne.n	800a464 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d039      	beq.n	800a502 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d01c      	beq.n	800a4d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a496:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a0c      	ldr	r2, [pc, #48]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a49c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4a2:	f7fa f8ed 	bl	8004680 <HAL_GetTick>
 800a4a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4a8:	e008      	b.n	800a4bc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a4aa:	f7fa f8e9 	bl	8004680 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d901      	bls.n	800a4bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e1b2      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4bc:	4b03      	ldr	r3, [pc, #12]	; (800a4cc <HAL_RCC_OscConfig+0x4f8>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d0f0      	beq.n	800a4aa <HAL_RCC_OscConfig+0x4d6>
 800a4c8:	e01b      	b.n	800a502 <HAL_RCC_OscConfig+0x52e>
 800a4ca:	bf00      	nop
 800a4cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a4d0:	4b9b      	ldr	r3, [pc, #620]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a9a      	ldr	r2, [pc, #616]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a4d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4dc:	f7fa f8d0 	bl	8004680 <HAL_GetTick>
 800a4e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4e2:	e008      	b.n	800a4f6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a4e4:	f7fa f8cc 	bl	8004680 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e195      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4f6:	4b92      	ldr	r3, [pc, #584]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1f0      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0304 	and.w	r3, r3, #4
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 8081 	beq.w	800a612 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a510:	4b8c      	ldr	r3, [pc, #560]	; (800a744 <HAL_RCC_OscConfig+0x770>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a8b      	ldr	r2, [pc, #556]	; (800a744 <HAL_RCC_OscConfig+0x770>)
 800a516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a51a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a51c:	f7fa f8b0 	bl	8004680 <HAL_GetTick>
 800a520:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a522:	e008      	b.n	800a536 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a524:	f7fa f8ac 	bl	8004680 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	2b64      	cmp	r3, #100	; 0x64
 800a530:	d901      	bls.n	800a536 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a532:	2303      	movs	r3, #3
 800a534:	e175      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a536:	4b83      	ldr	r3, [pc, #524]	; (800a744 <HAL_RCC_OscConfig+0x770>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d0f0      	beq.n	800a524 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d106      	bne.n	800a558 <HAL_RCC_OscConfig+0x584>
 800a54a:	4b7d      	ldr	r3, [pc, #500]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a54e:	4a7c      	ldr	r2, [pc, #496]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a550:	f043 0301 	orr.w	r3, r3, #1
 800a554:	6713      	str	r3, [r2, #112]	; 0x70
 800a556:	e02d      	b.n	800a5b4 <HAL_RCC_OscConfig+0x5e0>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10c      	bne.n	800a57a <HAL_RCC_OscConfig+0x5a6>
 800a560:	4b77      	ldr	r3, [pc, #476]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a564:	4a76      	ldr	r2, [pc, #472]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a566:	f023 0301 	bic.w	r3, r3, #1
 800a56a:	6713      	str	r3, [r2, #112]	; 0x70
 800a56c:	4b74      	ldr	r3, [pc, #464]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a56e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a570:	4a73      	ldr	r2, [pc, #460]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a572:	f023 0304 	bic.w	r3, r3, #4
 800a576:	6713      	str	r3, [r2, #112]	; 0x70
 800a578:	e01c      	b.n	800a5b4 <HAL_RCC_OscConfig+0x5e0>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	2b05      	cmp	r3, #5
 800a580:	d10c      	bne.n	800a59c <HAL_RCC_OscConfig+0x5c8>
 800a582:	4b6f      	ldr	r3, [pc, #444]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a586:	4a6e      	ldr	r2, [pc, #440]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a588:	f043 0304 	orr.w	r3, r3, #4
 800a58c:	6713      	str	r3, [r2, #112]	; 0x70
 800a58e:	4b6c      	ldr	r3, [pc, #432]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a592:	4a6b      	ldr	r2, [pc, #428]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a594:	f043 0301 	orr.w	r3, r3, #1
 800a598:	6713      	str	r3, [r2, #112]	; 0x70
 800a59a:	e00b      	b.n	800a5b4 <HAL_RCC_OscConfig+0x5e0>
 800a59c:	4b68      	ldr	r3, [pc, #416]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a0:	4a67      	ldr	r2, [pc, #412]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a5a2:	f023 0301 	bic.w	r3, r3, #1
 800a5a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a5a8:	4b65      	ldr	r3, [pc, #404]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ac:	4a64      	ldr	r2, [pc, #400]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a5ae:	f023 0304 	bic.w	r3, r3, #4
 800a5b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d015      	beq.n	800a5e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5bc:	f7fa f860 	bl	8004680 <HAL_GetTick>
 800a5c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5c2:	e00a      	b.n	800a5da <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5c4:	f7fa f85c 	bl	8004680 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d901      	bls.n	800a5da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	e123      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5da:	4b59      	ldr	r3, [pc, #356]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5de:	f003 0302 	and.w	r3, r3, #2
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d0ee      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x5f0>
 800a5e6:	e014      	b.n	800a612 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5e8:	f7fa f84a 	bl	8004680 <HAL_GetTick>
 800a5ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5ee:	e00a      	b.n	800a606 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5f0:	f7fa f846 	bl	8004680 <HAL_GetTick>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e10d      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a606:	4b4e      	ldr	r3, [pc, #312]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60a:	f003 0302 	and.w	r3, r3, #2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1ee      	bne.n	800a5f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 8102 	beq.w	800a820 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a61c:	4b48      	ldr	r3, [pc, #288]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a624:	2b18      	cmp	r3, #24
 800a626:	f000 80bd 	beq.w	800a7a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	2b02      	cmp	r3, #2
 800a630:	f040 809e 	bne.w	800a770 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a634:	4b42      	ldr	r3, [pc, #264]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a41      	ldr	r2, [pc, #260]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a63a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a63e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a640:	f7fa f81e 	bl	8004680 <HAL_GetTick>
 800a644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a646:	e008      	b.n	800a65a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a648:	f7fa f81a 	bl	8004680 <HAL_GetTick>
 800a64c:	4602      	mov	r2, r0
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	2b02      	cmp	r3, #2
 800a654:	d901      	bls.n	800a65a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a656:	2303      	movs	r3, #3
 800a658:	e0e3      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a65a:	4b39      	ldr	r3, [pc, #228]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1f0      	bne.n	800a648 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a666:	4b36      	ldr	r3, [pc, #216]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a66a:	4b37      	ldr	r3, [pc, #220]	; (800a748 <HAL_RCC_OscConfig+0x774>)
 800a66c:	4013      	ands	r3, r2
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a676:	0112      	lsls	r2, r2, #4
 800a678:	430a      	orrs	r2, r1
 800a67a:	4931      	ldr	r1, [pc, #196]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	628b      	str	r3, [r1, #40]	; 0x28
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a684:	3b01      	subs	r3, #1
 800a686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a68e:	3b01      	subs	r3, #1
 800a690:	025b      	lsls	r3, r3, #9
 800a692:	b29b      	uxth	r3, r3
 800a694:	431a      	orrs	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69a:	3b01      	subs	r3, #1
 800a69c:	041b      	lsls	r3, r3, #16
 800a69e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	061b      	lsls	r3, r3, #24
 800a6ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6b0:	4923      	ldr	r1, [pc, #140]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a6b6:	4b22      	ldr	r3, [pc, #136]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ba:	4a21      	ldr	r2, [pc, #132]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6bc:	f023 0301 	bic.w	r3, r3, #1
 800a6c0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6c2:	4b1f      	ldr	r3, [pc, #124]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6c6:	4b21      	ldr	r3, [pc, #132]	; (800a74c <HAL_RCC_OscConfig+0x778>)
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a6ce:	00d2      	lsls	r2, r2, #3
 800a6d0:	491b      	ldr	r1, [pc, #108]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a6d6:	4b1a      	ldr	r3, [pc, #104]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6da:	f023 020c 	bic.w	r2, r3, #12
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e2:	4917      	ldr	r1, [pc, #92]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a6e8:	4b15      	ldr	r3, [pc, #84]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ec:	f023 0202 	bic.w	r2, r3, #2
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f4:	4912      	ldr	r1, [pc, #72]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a6fa:	4b11      	ldr	r3, [pc, #68]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fe:	4a10      	ldr	r2, [pc, #64]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a704:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a706:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70a:	4a0d      	ldr	r2, [pc, #52]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a70c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a710:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a712:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	4a0a      	ldr	r2, [pc, #40]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a71c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a71e:	4b08      	ldr	r3, [pc, #32]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a722:	4a07      	ldr	r2, [pc, #28]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a724:	f043 0301 	orr.w	r3, r3, #1
 800a728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a72a:	4b05      	ldr	r3, [pc, #20]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a04      	ldr	r2, [pc, #16]	; (800a740 <HAL_RCC_OscConfig+0x76c>)
 800a730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a736:	f7f9 ffa3 	bl	8004680 <HAL_GetTick>
 800a73a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a73c:	e011      	b.n	800a762 <HAL_RCC_OscConfig+0x78e>
 800a73e:	bf00      	nop
 800a740:	58024400 	.word	0x58024400
 800a744:	58024800 	.word	0x58024800
 800a748:	fffffc0c 	.word	0xfffffc0c
 800a74c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a750:	f7f9 ff96 	bl	8004680 <HAL_GetTick>
 800a754:	4602      	mov	r2, r0
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d901      	bls.n	800a762 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e05f      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a762:	4b32      	ldr	r3, [pc, #200]	; (800a82c <HAL_RCC_OscConfig+0x858>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d0f0      	beq.n	800a750 <HAL_RCC_OscConfig+0x77c>
 800a76e:	e057      	b.n	800a820 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a770:	4b2e      	ldr	r3, [pc, #184]	; (800a82c <HAL_RCC_OscConfig+0x858>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a2d      	ldr	r2, [pc, #180]	; (800a82c <HAL_RCC_OscConfig+0x858>)
 800a776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a77a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a77c:	f7f9 ff80 	bl	8004680 <HAL_GetTick>
 800a780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a782:	e008      	b.n	800a796 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a784:	f7f9 ff7c 	bl	8004680 <HAL_GetTick>
 800a788:	4602      	mov	r2, r0
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d901      	bls.n	800a796 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e045      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a796:	4b25      	ldr	r3, [pc, #148]	; (800a82c <HAL_RCC_OscConfig+0x858>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1f0      	bne.n	800a784 <HAL_RCC_OscConfig+0x7b0>
 800a7a2:	e03d      	b.n	800a820 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a7a4:	4b21      	ldr	r3, [pc, #132]	; (800a82c <HAL_RCC_OscConfig+0x858>)
 800a7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a7aa:	4b20      	ldr	r3, [pc, #128]	; (800a82c <HAL_RCC_OscConfig+0x858>)
 800a7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d031      	beq.n	800a81c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f003 0203 	and.w	r2, r3, #3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d12a      	bne.n	800a81c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	091b      	lsrs	r3, r3, #4
 800a7ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d122      	bne.n	800a81c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d11a      	bne.n	800a81c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	0a5b      	lsrs	r3, r3, #9
 800a7ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d111      	bne.n	800a81c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	0c1b      	lsrs	r3, r3, #16
 800a7fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a806:	429a      	cmp	r2, r3
 800a808:	d108      	bne.n	800a81c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	0e1b      	lsrs	r3, r3, #24
 800a80e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a818:	429a      	cmp	r2, r3
 800a81a:	d001      	beq.n	800a820 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e000      	b.n	800a822 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3730      	adds	r7, #48	; 0x30
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	58024400 	.word	0x58024400

0800a830 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e19c      	b.n	800ab7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a844:	4b8a      	ldr	r3, [pc, #552]	; (800aa70 <HAL_RCC_ClockConfig+0x240>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 030f 	and.w	r3, r3, #15
 800a84c:	683a      	ldr	r2, [r7, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d910      	bls.n	800a874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a852:	4b87      	ldr	r3, [pc, #540]	; (800aa70 <HAL_RCC_ClockConfig+0x240>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f023 020f 	bic.w	r2, r3, #15
 800a85a:	4985      	ldr	r1, [pc, #532]	; (800aa70 <HAL_RCC_ClockConfig+0x240>)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	4313      	orrs	r3, r2
 800a860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a862:	4b83      	ldr	r3, [pc, #524]	; (800aa70 <HAL_RCC_ClockConfig+0x240>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d001      	beq.n	800a874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e184      	b.n	800ab7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0304 	and.w	r3, r3, #4
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d010      	beq.n	800a8a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691a      	ldr	r2, [r3, #16]
 800a884:	4b7b      	ldr	r3, [pc, #492]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d908      	bls.n	800a8a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a890:	4b78      	ldr	r3, [pc, #480]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	4975      	ldr	r1, [pc, #468]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d010      	beq.n	800a8d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695a      	ldr	r2, [r3, #20]
 800a8b2:	4b70      	ldr	r3, [pc, #448]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d908      	bls.n	800a8d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8be:	4b6d      	ldr	r3, [pc, #436]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	496a      	ldr	r1, [pc, #424]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0310 	and.w	r3, r3, #16
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d010      	beq.n	800a8fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	699a      	ldr	r2, [r3, #24]
 800a8e0:	4b64      	ldr	r3, [pc, #400]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d908      	bls.n	800a8fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a8ec:	4b61      	ldr	r3, [pc, #388]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	495e      	ldr	r1, [pc, #376]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0320 	and.w	r3, r3, #32
 800a906:	2b00      	cmp	r3, #0
 800a908:	d010      	beq.n	800a92c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	69da      	ldr	r2, [r3, #28]
 800a90e:	4b59      	ldr	r3, [pc, #356]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a916:	429a      	cmp	r2, r3
 800a918:	d908      	bls.n	800a92c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a91a:	4b56      	ldr	r3, [pc, #344]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	4953      	ldr	r1, [pc, #332]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a928:	4313      	orrs	r3, r2
 800a92a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0302 	and.w	r3, r3, #2
 800a934:	2b00      	cmp	r3, #0
 800a936:	d010      	beq.n	800a95a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68da      	ldr	r2, [r3, #12]
 800a93c:	4b4d      	ldr	r3, [pc, #308]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	f003 030f 	and.w	r3, r3, #15
 800a944:	429a      	cmp	r2, r3
 800a946:	d908      	bls.n	800a95a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a948:	4b4a      	ldr	r3, [pc, #296]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	f023 020f 	bic.w	r2, r3, #15
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	4947      	ldr	r1, [pc, #284]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a956:	4313      	orrs	r3, r2
 800a958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	d055      	beq.n	800aa12 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a966:	4b43      	ldr	r3, [pc, #268]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	4940      	ldr	r1, [pc, #256]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a974:	4313      	orrs	r3, r2
 800a976:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d107      	bne.n	800a990 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a980:	4b3c      	ldr	r3, [pc, #240]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d121      	bne.n	800a9d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e0f6      	b.n	800ab7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	2b03      	cmp	r3, #3
 800a996:	d107      	bne.n	800a9a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a998:	4b36      	ldr	r3, [pc, #216]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d115      	bne.n	800a9d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e0ea      	b.n	800ab7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d107      	bne.n	800a9c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9b0:	4b30      	ldr	r3, [pc, #192]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d109      	bne.n	800a9d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e0de      	b.n	800ab7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9c0:	4b2c      	ldr	r3, [pc, #176]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e0d6      	b.n	800ab7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9d0:	4b28      	ldr	r3, [pc, #160]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	f023 0207 	bic.w	r2, r3, #7
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4925      	ldr	r1, [pc, #148]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9e2:	f7f9 fe4d 	bl	8004680 <HAL_GetTick>
 800a9e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9e8:	e00a      	b.n	800aa00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9ea:	f7f9 fe49 	bl	8004680 <HAL_GetTick>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d901      	bls.n	800aa00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e0be      	b.n	800ab7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa00:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	00db      	lsls	r3, r3, #3
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d1eb      	bne.n	800a9ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0302 	and.w	r3, r3, #2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d010      	beq.n	800aa40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68da      	ldr	r2, [r3, #12]
 800aa22:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	f003 030f 	and.w	r3, r3, #15
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d208      	bcs.n	800aa40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa2e:	4b11      	ldr	r3, [pc, #68]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	f023 020f 	bic.w	r2, r3, #15
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	490e      	ldr	r1, [pc, #56]	; (800aa74 <HAL_RCC_ClockConfig+0x244>)
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa40:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <HAL_RCC_ClockConfig+0x240>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 030f 	and.w	r3, r3, #15
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d214      	bcs.n	800aa78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa4e:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <HAL_RCC_ClockConfig+0x240>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f023 020f 	bic.w	r2, r3, #15
 800aa56:	4906      	ldr	r1, [pc, #24]	; (800aa70 <HAL_RCC_ClockConfig+0x240>)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa5e:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <HAL_RCC_ClockConfig+0x240>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 030f 	and.w	r3, r3, #15
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d005      	beq.n	800aa78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e086      	b.n	800ab7e <HAL_RCC_ClockConfig+0x34e>
 800aa70:	52002000 	.word	0x52002000
 800aa74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d010      	beq.n	800aaa6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691a      	ldr	r2, [r3, #16]
 800aa88:	4b3f      	ldr	r3, [pc, #252]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d208      	bcs.n	800aaa6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa94:	4b3c      	ldr	r3, [pc, #240]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	4939      	ldr	r1, [pc, #228]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0308 	and.w	r3, r3, #8
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d010      	beq.n	800aad4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	695a      	ldr	r2, [r3, #20]
 800aab6:	4b34      	ldr	r3, [pc, #208]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d208      	bcs.n	800aad4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aac2:	4b31      	ldr	r3, [pc, #196]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	492e      	ldr	r1, [pc, #184]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800aad0:	4313      	orrs	r3, r2
 800aad2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0310 	and.w	r3, r3, #16
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d010      	beq.n	800ab02 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	699a      	ldr	r2, [r3, #24]
 800aae4:	4b28      	ldr	r3, [pc, #160]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d208      	bcs.n	800ab02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aaf0:	4b25      	ldr	r3, [pc, #148]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	4922      	ldr	r1, [pc, #136]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f003 0320 	and.w	r3, r3, #32
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d010      	beq.n	800ab30 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	69da      	ldr	r2, [r3, #28]
 800ab12:	4b1d      	ldr	r3, [pc, #116]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d208      	bcs.n	800ab30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ab1e:	4b1a      	ldr	r3, [pc, #104]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	4917      	ldr	r1, [pc, #92]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ab30:	f000 f834 	bl	800ab9c <HAL_RCC_GetSysClockFreq>
 800ab34:	4602      	mov	r2, r0
 800ab36:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	0a1b      	lsrs	r3, r3, #8
 800ab3c:	f003 030f 	and.w	r3, r3, #15
 800ab40:	4912      	ldr	r1, [pc, #72]	; (800ab8c <HAL_RCC_ClockConfig+0x35c>)
 800ab42:	5ccb      	ldrb	r3, [r1, r3]
 800ab44:	f003 031f 	and.w	r3, r3, #31
 800ab48:	fa22 f303 	lsr.w	r3, r2, r3
 800ab4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab4e:	4b0e      	ldr	r3, [pc, #56]	; (800ab88 <HAL_RCC_ClockConfig+0x358>)
 800ab50:	699b      	ldr	r3, [r3, #24]
 800ab52:	f003 030f 	and.w	r3, r3, #15
 800ab56:	4a0d      	ldr	r2, [pc, #52]	; (800ab8c <HAL_RCC_ClockConfig+0x35c>)
 800ab58:	5cd3      	ldrb	r3, [r2, r3]
 800ab5a:	f003 031f 	and.w	r3, r3, #31
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	fa22 f303 	lsr.w	r3, r2, r3
 800ab64:	4a0a      	ldr	r2, [pc, #40]	; (800ab90 <HAL_RCC_ClockConfig+0x360>)
 800ab66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab68:	4a0a      	ldr	r2, [pc, #40]	; (800ab94 <HAL_RCC_ClockConfig+0x364>)
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ab6e:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <HAL_RCC_ClockConfig+0x368>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7f9 fd3a 	bl	80045ec <HAL_InitTick>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	58024400 	.word	0x58024400
 800ab8c:	080124ac 	.word	0x080124ac
 800ab90:	24000030 	.word	0x24000030
 800ab94:	2400002c 	.word	0x2400002c
 800ab98:	24000034 	.word	0x24000034

0800ab9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b089      	sub	sp, #36	; 0x24
 800aba0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aba2:	4bb3      	ldr	r3, [pc, #716]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abaa:	2b18      	cmp	r3, #24
 800abac:	f200 8155 	bhi.w	800ae5a <HAL_RCC_GetSysClockFreq+0x2be>
 800abb0:	a201      	add	r2, pc, #4	; (adr r2, 800abb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800abb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb6:	bf00      	nop
 800abb8:	0800ac1d 	.word	0x0800ac1d
 800abbc:	0800ae5b 	.word	0x0800ae5b
 800abc0:	0800ae5b 	.word	0x0800ae5b
 800abc4:	0800ae5b 	.word	0x0800ae5b
 800abc8:	0800ae5b 	.word	0x0800ae5b
 800abcc:	0800ae5b 	.word	0x0800ae5b
 800abd0:	0800ae5b 	.word	0x0800ae5b
 800abd4:	0800ae5b 	.word	0x0800ae5b
 800abd8:	0800ac43 	.word	0x0800ac43
 800abdc:	0800ae5b 	.word	0x0800ae5b
 800abe0:	0800ae5b 	.word	0x0800ae5b
 800abe4:	0800ae5b 	.word	0x0800ae5b
 800abe8:	0800ae5b 	.word	0x0800ae5b
 800abec:	0800ae5b 	.word	0x0800ae5b
 800abf0:	0800ae5b 	.word	0x0800ae5b
 800abf4:	0800ae5b 	.word	0x0800ae5b
 800abf8:	0800ac49 	.word	0x0800ac49
 800abfc:	0800ae5b 	.word	0x0800ae5b
 800ac00:	0800ae5b 	.word	0x0800ae5b
 800ac04:	0800ae5b 	.word	0x0800ae5b
 800ac08:	0800ae5b 	.word	0x0800ae5b
 800ac0c:	0800ae5b 	.word	0x0800ae5b
 800ac10:	0800ae5b 	.word	0x0800ae5b
 800ac14:	0800ae5b 	.word	0x0800ae5b
 800ac18:	0800ac4f 	.word	0x0800ac4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac1c:	4b94      	ldr	r3, [pc, #592]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0320 	and.w	r3, r3, #32
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d009      	beq.n	800ac3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac28:	4b91      	ldr	r3, [pc, #580]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	08db      	lsrs	r3, r3, #3
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	4a90      	ldr	r2, [pc, #576]	; (800ae74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac34:	fa22 f303 	lsr.w	r3, r2, r3
 800ac38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ac3a:	e111      	b.n	800ae60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac3c:	4b8d      	ldr	r3, [pc, #564]	; (800ae74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac3e:	61bb      	str	r3, [r7, #24]
    break;
 800ac40:	e10e      	b.n	800ae60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ac42:	4b8d      	ldr	r3, [pc, #564]	; (800ae78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac44:	61bb      	str	r3, [r7, #24]
    break;
 800ac46:	e10b      	b.n	800ae60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ac48:	4b8c      	ldr	r3, [pc, #560]	; (800ae7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ac4a:	61bb      	str	r3, [r7, #24]
    break;
 800ac4c:	e108      	b.n	800ae60 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac4e:	4b88      	ldr	r3, [pc, #544]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ac58:	4b85      	ldr	r3, [pc, #532]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5c:	091b      	lsrs	r3, r3, #4
 800ac5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac64:	4b82      	ldr	r3, [pc, #520]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ac6e:	4b80      	ldr	r3, [pc, #512]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac72:	08db      	lsrs	r3, r3, #3
 800ac74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	fb02 f303 	mul.w	r3, r2, r3
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 80e1 	beq.w	800ae54 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	f000 8083 	beq.w	800ada0 <HAL_RCC_GetSysClockFreq+0x204>
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	f200 80a1 	bhi.w	800ade4 <HAL_RCC_GetSysClockFreq+0x248>
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d003      	beq.n	800acb0 <HAL_RCC_GetSysClockFreq+0x114>
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d056      	beq.n	800ad5c <HAL_RCC_GetSysClockFreq+0x1c0>
 800acae:	e099      	b.n	800ade4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acb0:	4b6f      	ldr	r3, [pc, #444]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0320 	and.w	r3, r3, #32
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d02d      	beq.n	800ad18 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acbc:	4b6c      	ldr	r3, [pc, #432]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	08db      	lsrs	r3, r3, #3
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	4a6b      	ldr	r2, [pc, #428]	; (800ae74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800acc8:	fa22 f303 	lsr.w	r3, r2, r3
 800accc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	ee07 3a90 	vmov	s15, r3
 800acd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace6:	4b62      	ldr	r3, [pc, #392]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ace8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf6:	ed97 6a02 	vldr	s12, [r7, #8]
 800acfa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ae80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800acfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ad16:	e087      	b.n	800ae28 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	ee07 3a90 	vmov	s15, r3
 800ad1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad22:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ae84 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ad26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad2a:	4b51      	ldr	r3, [pc, #324]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ae80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad5a:	e065      	b.n	800ae28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	ee07 3a90 	vmov	s15, r3
 800ad62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad66:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ae88 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad6e:	4b40      	ldr	r3, [pc, #256]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ae80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad9e:	e043      	b.n	800ae28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	ee07 3a90 	vmov	s15, r3
 800ada6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adaa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ae8c <HAL_RCC_GetSysClockFreq+0x2f0>
 800adae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adb2:	4b2f      	ldr	r3, [pc, #188]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800adc6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ae80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800add2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800add6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ade2:	e021      	b.n	800ae28 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	ee07 3a90 	vmov	s15, r3
 800adea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adee:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ae88 <HAL_RCC_GetSysClockFreq+0x2ec>
 800adf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adf6:	4b1e      	ldr	r3, [pc, #120]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adfe:	ee07 3a90 	vmov	s15, r3
 800ae02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ae80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae26:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ae28:	4b11      	ldr	r3, [pc, #68]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2c:	0a5b      	lsrs	r3, r3, #9
 800ae2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae32:	3301      	adds	r3, #1
 800ae34:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	ee07 3a90 	vmov	s15, r3
 800ae3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae4c:	ee17 3a90 	vmov	r3, s15
 800ae50:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ae52:	e005      	b.n	800ae60 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	61bb      	str	r3, [r7, #24]
    break;
 800ae58:	e002      	b.n	800ae60 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ae5a:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae5c:	61bb      	str	r3, [r7, #24]
    break;
 800ae5e:	bf00      	nop
  }

  return sysclockfreq;
 800ae60:	69bb      	ldr	r3, [r7, #24]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3724      	adds	r7, #36	; 0x24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	58024400 	.word	0x58024400
 800ae74:	03d09000 	.word	0x03d09000
 800ae78:	003d0900 	.word	0x003d0900
 800ae7c:	02625a00 	.word	0x02625a00
 800ae80:	46000000 	.word	0x46000000
 800ae84:	4c742400 	.word	0x4c742400
 800ae88:	4a742400 	.word	0x4a742400
 800ae8c:	4c189680 	.word	0x4c189680

0800ae90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ae96:	f7ff fe81 	bl	800ab9c <HAL_RCC_GetSysClockFreq>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	0a1b      	lsrs	r3, r3, #8
 800aea2:	f003 030f 	and.w	r3, r3, #15
 800aea6:	490f      	ldr	r1, [pc, #60]	; (800aee4 <HAL_RCC_GetHCLKFreq+0x54>)
 800aea8:	5ccb      	ldrb	r3, [r1, r3]
 800aeaa:	f003 031f 	and.w	r3, r3, #31
 800aeae:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <HAL_RCC_GetHCLKFreq+0x50>)
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	f003 030f 	and.w	r3, r3, #15
 800aebc:	4a09      	ldr	r2, [pc, #36]	; (800aee4 <HAL_RCC_GetHCLKFreq+0x54>)
 800aebe:	5cd3      	ldrb	r3, [r2, r3]
 800aec0:	f003 031f 	and.w	r3, r3, #31
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeca:	4a07      	ldr	r2, [pc, #28]	; (800aee8 <HAL_RCC_GetHCLKFreq+0x58>)
 800aecc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aece:	4a07      	ldr	r2, [pc, #28]	; (800aeec <HAL_RCC_GetHCLKFreq+0x5c>)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aed4:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <HAL_RCC_GetHCLKFreq+0x58>)
 800aed6:	681b      	ldr	r3, [r3, #0]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	58024400 	.word	0x58024400
 800aee4:	080124ac 	.word	0x080124ac
 800aee8:	24000030 	.word	0x24000030
 800aeec:	2400002c 	.word	0x2400002c

0800aef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aef4:	f7ff ffcc 	bl	800ae90 <HAL_RCC_GetHCLKFreq>
 800aef8:	4602      	mov	r2, r0
 800aefa:	4b06      	ldr	r3, [pc, #24]	; (800af14 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	091b      	lsrs	r3, r3, #4
 800af00:	f003 0307 	and.w	r3, r3, #7
 800af04:	4904      	ldr	r1, [pc, #16]	; (800af18 <HAL_RCC_GetPCLK1Freq+0x28>)
 800af06:	5ccb      	ldrb	r3, [r1, r3]
 800af08:	f003 031f 	and.w	r3, r3, #31
 800af0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af10:	4618      	mov	r0, r3
 800af12:	bd80      	pop	{r7, pc}
 800af14:	58024400 	.word	0x58024400
 800af18:	080124ac 	.word	0x080124ac

0800af1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800af20:	f7ff ffb6 	bl	800ae90 <HAL_RCC_GetHCLKFreq>
 800af24:	4602      	mov	r2, r0
 800af26:	4b06      	ldr	r3, [pc, #24]	; (800af40 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af28:	69db      	ldr	r3, [r3, #28]
 800af2a:	0a1b      	lsrs	r3, r3, #8
 800af2c:	f003 0307 	and.w	r3, r3, #7
 800af30:	4904      	ldr	r1, [pc, #16]	; (800af44 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af32:	5ccb      	ldrb	r3, [r1, r3]
 800af34:	f003 031f 	and.w	r3, r3, #31
 800af38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	58024400 	.word	0x58024400
 800af44:	080124ac 	.word	0x080124ac

0800af48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af50:	2300      	movs	r3, #0
 800af52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af54:	2300      	movs	r3, #0
 800af56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d03f      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af6c:	d02a      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800af6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af72:	d824      	bhi.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800af74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af78:	d018      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800af7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af7e:	d81e      	bhi.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800af84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af88:	d007      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800af8a:	e018      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af8c:	4ba3      	ldr	r3, [pc, #652]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	4aa2      	ldr	r2, [pc, #648]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800af98:	e015      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	3304      	adds	r3, #4
 800af9e:	2102      	movs	r1, #2
 800afa0:	4618      	mov	r0, r3
 800afa2:	f001 f9d5 	bl	800c350 <RCCEx_PLL2_Config>
 800afa6:	4603      	mov	r3, r0
 800afa8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800afaa:	e00c      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3324      	adds	r3, #36	; 0x24
 800afb0:	2102      	movs	r1, #2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 fa7e 	bl	800c4b4 <RCCEx_PLL3_Config>
 800afb8:	4603      	mov	r3, r0
 800afba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800afbc:	e003      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	75fb      	strb	r3, [r7, #23]
      break;
 800afc2:	e000      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800afc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d109      	bne.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800afcc:	4b93      	ldr	r3, [pc, #588]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800afce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afd8:	4990      	ldr	r1, [pc, #576]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800afda:	4313      	orrs	r3, r2
 800afdc:	650b      	str	r3, [r1, #80]	; 0x50
 800afde:	e001      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afec:	2b00      	cmp	r3, #0
 800afee:	d03d      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	d826      	bhi.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aff8:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800affa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affe:	bf00      	nop
 800b000:	0800b015 	.word	0x0800b015
 800b004:	0800b023 	.word	0x0800b023
 800b008:	0800b035 	.word	0x0800b035
 800b00c:	0800b04d 	.word	0x0800b04d
 800b010:	0800b04d 	.word	0x0800b04d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b014:	4b81      	ldr	r3, [pc, #516]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	4a80      	ldr	r2, [pc, #512]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b01e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b020:	e015      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3304      	adds	r3, #4
 800b026:	2100      	movs	r1, #0
 800b028:	4618      	mov	r0, r3
 800b02a:	f001 f991 	bl	800c350 <RCCEx_PLL2_Config>
 800b02e:	4603      	mov	r3, r0
 800b030:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b032:	e00c      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3324      	adds	r3, #36	; 0x24
 800b038:	2100      	movs	r1, #0
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 fa3a 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b040:	4603      	mov	r3, r0
 800b042:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b044:	e003      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	75fb      	strb	r3, [r7, #23]
      break;
 800b04a:	e000      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b04c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b04e:	7dfb      	ldrb	r3, [r7, #23]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d109      	bne.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b054:	4b71      	ldr	r3, [pc, #452]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b058:	f023 0207 	bic.w	r2, r3, #7
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b060:	496e      	ldr	r1, [pc, #440]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b062:	4313      	orrs	r3, r2
 800b064:	650b      	str	r3, [r1, #80]	; 0x50
 800b066:	e001      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b068:	7dfb      	ldrb	r3, [r7, #23]
 800b06a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b074:	2b00      	cmp	r3, #0
 800b076:	d042      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b07c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b080:	d02b      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b086:	d825      	bhi.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b088:	2bc0      	cmp	r3, #192	; 0xc0
 800b08a:	d028      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b08c:	2bc0      	cmp	r3, #192	; 0xc0
 800b08e:	d821      	bhi.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b090:	2b80      	cmp	r3, #128	; 0x80
 800b092:	d016      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b094:	2b80      	cmp	r3, #128	; 0x80
 800b096:	d81d      	bhi.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b09c:	2b40      	cmp	r3, #64	; 0x40
 800b09e:	d007      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b0a0:	e018      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0a2:	4b5e      	ldr	r3, [pc, #376]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	4a5d      	ldr	r2, [pc, #372]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b0a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b0ae:	e017      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 f94a 	bl	800c350 <RCCEx_PLL2_Config>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b0c0:	e00e      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3324      	adds	r3, #36	; 0x24
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 f9f3 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b0d2:	e005      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0d8:	e002      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b0da:	bf00      	nop
 800b0dc:	e000      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b0de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d109      	bne.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b0e6:	4b4d      	ldr	r3, [pc, #308]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0f2:	494a      	ldr	r1, [pc, #296]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	650b      	str	r3, [r1, #80]	; 0x50
 800b0f8:	e001      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b106:	2b00      	cmp	r3, #0
 800b108:	d049      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b114:	d030      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b11a:	d82a      	bhi.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b11c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b120:	d02c      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b122:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b126:	d824      	bhi.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b12c:	d018      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b12e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b132:	d81e      	bhi.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b134:	2b00      	cmp	r3, #0
 800b136:	d003      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b13c:	d007      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b13e:	e018      	b.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b140:	4b36      	ldr	r3, [pc, #216]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b144:	4a35      	ldr	r2, [pc, #212]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b14a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b14c:	e017      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3304      	adds	r3, #4
 800b152:	2100      	movs	r1, #0
 800b154:	4618      	mov	r0, r3
 800b156:	f001 f8fb 	bl	800c350 <RCCEx_PLL2_Config>
 800b15a:	4603      	mov	r3, r0
 800b15c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b15e:	e00e      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3324      	adds	r3, #36	; 0x24
 800b164:	2100      	movs	r1, #0
 800b166:	4618      	mov	r0, r3
 800b168:	f001 f9a4 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b16c:	4603      	mov	r3, r0
 800b16e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b170:	e005      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	75fb      	strb	r3, [r7, #23]
      break;
 800b176:	e002      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b178:	bf00      	nop
 800b17a:	e000      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b17c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b17e:	7dfb      	ldrb	r3, [r7, #23]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b184:	4b25      	ldr	r3, [pc, #148]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b188:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b192:	4922      	ldr	r1, [pc, #136]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b194:	4313      	orrs	r3, r2
 800b196:	658b      	str	r3, [r1, #88]	; 0x58
 800b198:	e001      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d04b      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1b4:	d030      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b1b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1ba:	d82a      	bhi.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b1bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1c0:	d02e      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b1c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1c6:	d824      	bhi.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b1c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1cc:	d018      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b1ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1d2:	d81e      	bhi.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b1d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1dc:	d007      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b1de:	e018      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1e0:	4b0e      	ldr	r3, [pc, #56]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e4:	4a0d      	ldr	r2, [pc, #52]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b1e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b1ec:	e019      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f001 f8ab 	bl	800c350 <RCCEx_PLL2_Config>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b1fe:	e010      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3324      	adds	r3, #36	; 0x24
 800b204:	2100      	movs	r1, #0
 800b206:	4618      	mov	r0, r3
 800b208:	f001 f954 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b20c:	4603      	mov	r3, r0
 800b20e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b210:	e007      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	75fb      	strb	r3, [r7, #23]
      break;
 800b216:	e004      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800b218:	bf00      	nop
 800b21a:	e002      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b21c:	58024400 	.word	0x58024400
      break;
 800b220:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10a      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b228:	4b99      	ldr	r3, [pc, #612]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b22c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b236:	4996      	ldr	r1, [pc, #600]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b238:	4313      	orrs	r3, r2
 800b23a:	658b      	str	r3, [r1, #88]	; 0x58
 800b23c:	e001      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
 800b240:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d032      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b252:	2b30      	cmp	r3, #48	; 0x30
 800b254:	d01c      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800b256:	2b30      	cmp	r3, #48	; 0x30
 800b258:	d817      	bhi.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	d00c      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b25e:	2b20      	cmp	r3, #32
 800b260:	d813      	bhi.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b262:	2b00      	cmp	r3, #0
 800b264:	d016      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b266:	2b10      	cmp	r3, #16
 800b268:	d10f      	bne.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b26a:	4b89      	ldr	r3, [pc, #548]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	4a88      	ldr	r2, [pc, #544]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b274:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b276:	e00e      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3304      	adds	r3, #4
 800b27c:	2102      	movs	r1, #2
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 f866 	bl	800c350 <RCCEx_PLL2_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b288:	e005      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	75fb      	strb	r3, [r7, #23]
      break;
 800b28e:	e002      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b290:	bf00      	nop
 800b292:	e000      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b294:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d109      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b29c:	4b7c      	ldr	r3, [pc, #496]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b29e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2a8:	4979      	ldr	r1, [pc, #484]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b2ae:	e001      	b.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
 800b2b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d047      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2c8:	d030      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b2ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2ce:	d82a      	bhi.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b2d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2d4:	d02c      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b2d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2da:	d824      	bhi.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b2dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2e0:	d018      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800b2e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2e6:	d81e      	bhi.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d003      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f0:	d007      	beq.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800b2f2:	e018      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2f4:	4b66      	ldr	r3, [pc, #408]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	4a65      	ldr	r2, [pc, #404]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b2fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b300:	e017      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	3304      	adds	r3, #4
 800b306:	2100      	movs	r1, #0
 800b308:	4618      	mov	r0, r3
 800b30a:	f001 f821 	bl	800c350 <RCCEx_PLL2_Config>
 800b30e:	4603      	mov	r3, r0
 800b310:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b312:	e00e      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3324      	adds	r3, #36	; 0x24
 800b318:	2100      	movs	r1, #0
 800b31a:	4618      	mov	r0, r3
 800b31c:	f001 f8ca 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b320:	4603      	mov	r3, r0
 800b322:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b324:	e005      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	75fb      	strb	r3, [r7, #23]
      break;
 800b32a:	e002      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b32c:	bf00      	nop
 800b32e:	e000      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b330:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d109      	bne.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b338:	4b55      	ldr	r3, [pc, #340]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b33c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b344:	4952      	ldr	r1, [pc, #328]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b346:	4313      	orrs	r3, r2
 800b348:	650b      	str	r3, [r1, #80]	; 0x50
 800b34a:	e001      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d049      	beq.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b364:	d02e      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b366:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b36a:	d828      	bhi.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b36c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b370:	d02a      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b376:	d822      	bhi.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b378:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b37c:	d026      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800b37e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b382:	d81c      	bhi.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b388:	d010      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x464>
 800b38a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b38e:	d816      	bhi.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01d      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800b394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b398:	d111      	bne.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3304      	adds	r3, #4
 800b39e:	2101      	movs	r1, #1
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 ffd5 	bl	800c350 <RCCEx_PLL2_Config>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b3aa:	e012      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3324      	adds	r3, #36	; 0x24
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f001 f87e 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b3bc:	e009      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c2:	e006      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b3c4:	bf00      	nop
 800b3c6:	e004      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b3c8:	bf00      	nop
 800b3ca:	e002      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b3cc:	bf00      	nop
 800b3ce:	e000      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b3d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d109      	bne.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b3d8:	4b2d      	ldr	r3, [pc, #180]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b3da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3e4:	492a      	ldr	r1, [pc, #168]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	650b      	str	r3, [r1, #80]	; 0x50
 800b3ea:	e001      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
 800b3ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d04d      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b406:	d02e      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b40c:	d828      	bhi.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b412:	d02a      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b418:	d822      	bhi.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b41a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b41e:	d026      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x526>
 800b420:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b424:	d81c      	bhi.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b42a:	d010      	beq.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b42c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b430:	d816      	bhi.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01d      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b43a:	d111      	bne.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3304      	adds	r3, #4
 800b440:	2101      	movs	r1, #1
 800b442:	4618      	mov	r0, r3
 800b444:	f000 ff84 	bl	800c350 <RCCEx_PLL2_Config>
 800b448:	4603      	mov	r3, r0
 800b44a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b44c:	e012      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3324      	adds	r3, #36	; 0x24
 800b452:	2101      	movs	r1, #1
 800b454:	4618      	mov	r0, r3
 800b456:	f001 f82d 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b45a:	4603      	mov	r3, r0
 800b45c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b45e:	e009      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	75fb      	strb	r3, [r7, #23]
      break;
 800b464:	e006      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b466:	bf00      	nop
 800b468:	e004      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b46a:	bf00      	nop
 800b46c:	e002      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b46e:	bf00      	nop
 800b470:	e000      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b472:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b474:	7dfb      	ldrb	r3, [r7, #23]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10c      	bne.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b47a:	4b05      	ldr	r3, [pc, #20]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b47c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b47e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b488:	4901      	ldr	r1, [pc, #4]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b48a:	4313      	orrs	r3, r2
 800b48c:	658b      	str	r3, [r1, #88]	; 0x58
 800b48e:	e003      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b494:	7dfb      	ldrb	r3, [r7, #23]
 800b496:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d02f      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ac:	d00e      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800b4ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b2:	d814      	bhi.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x596>
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d015      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800b4b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4bc:	d10f      	bne.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4be:	4baf      	ldr	r3, [pc, #700]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c2:	4aae      	ldr	r2, [pc, #696]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b4c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b4ca:	e00c      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 ff3c 	bl	800c350 <RCCEx_PLL2_Config>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b4dc:	e003      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4e2:	e000      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800b4e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4e6:	7dfb      	ldrb	r3, [r7, #23]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d109      	bne.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b4ec:	4ba3      	ldr	r3, [pc, #652]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f8:	49a0      	ldr	r1, [pc, #640]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	650b      	str	r3, [r1, #80]	; 0x50
 800b4fe:	e001      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d032      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b514:	2b03      	cmp	r3, #3
 800b516:	d81b      	bhi.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b518:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51e:	bf00      	nop
 800b520:	0800b557 	.word	0x0800b557
 800b524:	0800b531 	.word	0x0800b531
 800b528:	0800b53f 	.word	0x0800b53f
 800b52c:	0800b557 	.word	0x0800b557
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b530:	4b92      	ldr	r3, [pc, #584]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b534:	4a91      	ldr	r2, [pc, #580]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b53a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b53c:	e00c      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	3304      	adds	r3, #4
 800b542:	2102      	movs	r1, #2
 800b544:	4618      	mov	r0, r3
 800b546:	f000 ff03 	bl	800c350 <RCCEx_PLL2_Config>
 800b54a:	4603      	mov	r3, r0
 800b54c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b54e:	e003      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	75fb      	strb	r3, [r7, #23]
      break;
 800b554:	e000      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b556:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b558:	7dfb      	ldrb	r3, [r7, #23]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d109      	bne.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b55e:	4b87      	ldr	r3, [pc, #540]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b562:	f023 0203 	bic.w	r2, r3, #3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b56a:	4984      	ldr	r1, [pc, #528]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b56c:	4313      	orrs	r3, r2
 800b56e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b570:	e001      	b.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b572:	7dfb      	ldrb	r3, [r7, #23]
 800b574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 8086 	beq.w	800b690 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b584:	4b7e      	ldr	r3, [pc, #504]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a7d      	ldr	r2, [pc, #500]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b58a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b58e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b590:	f7f9 f876 	bl	8004680 <HAL_GetTick>
 800b594:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b596:	e009      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b598:	f7f9 f872 	bl	8004680 <HAL_GetTick>
 800b59c:	4602      	mov	r2, r0
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	2b64      	cmp	r3, #100	; 0x64
 800b5a4:	d902      	bls.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	75fb      	strb	r3, [r7, #23]
        break;
 800b5aa:	e005      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5ac:	4b74      	ldr	r3, [pc, #464]	; (800b780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0ef      	beq.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d166      	bne.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b5be:	4b6f      	ldr	r3, [pc, #444]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b5c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5c8:	4053      	eors	r3, r2
 800b5ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d013      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b5d2:	4b6a      	ldr	r3, [pc, #424]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b5d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b5dc:	4b67      	ldr	r3, [pc, #412]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b5de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e0:	4a66      	ldr	r2, [pc, #408]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b5e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b5e8:	4b64      	ldr	r3, [pc, #400]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ec:	4a63      	ldr	r2, [pc, #396]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b5ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b5f4:	4a61      	ldr	r2, [pc, #388]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b604:	d115      	bne.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b606:	f7f9 f83b 	bl	8004680 <HAL_GetTick>
 800b60a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b60c:	e00b      	b.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b60e:	f7f9 f837 	bl	8004680 <HAL_GetTick>
 800b612:	4602      	mov	r2, r0
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	f241 3288 	movw	r2, #5000	; 0x1388
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d902      	bls.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b620:	2303      	movs	r3, #3
 800b622:	75fb      	strb	r3, [r7, #23]
            break;
 800b624:	e005      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b626:	4b55      	ldr	r3, [pc, #340]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b62a:	f003 0302 	and.w	r3, r3, #2
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d0ed      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b632:	7dfb      	ldrb	r3, [r7, #23]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d126      	bne.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b63e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b646:	d10d      	bne.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b648:	4b4c      	ldr	r3, [pc, #304]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b656:	0919      	lsrs	r1, r3, #4
 800b658:	4b4a      	ldr	r3, [pc, #296]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800b65a:	400b      	ands	r3, r1
 800b65c:	4947      	ldr	r1, [pc, #284]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	610b      	str	r3, [r1, #16]
 800b662:	e005      	b.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b664:	4b45      	ldr	r3, [pc, #276]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	4a44      	ldr	r2, [pc, #272]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b66a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b66e:	6113      	str	r3, [r2, #16]
 800b670:	4b42      	ldr	r3, [pc, #264]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b67a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b67e:	493f      	ldr	r1, [pc, #252]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b680:	4313      	orrs	r3, r2
 800b682:	670b      	str	r3, [r1, #112]	; 0x70
 800b684:	e004      	b.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b686:	7dfb      	ldrb	r3, [r7, #23]
 800b688:	75bb      	strb	r3, [r7, #22]
 800b68a:	e001      	b.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
 800b68e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 8085 	beq.w	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6a2:	2b28      	cmp	r3, #40	; 0x28
 800b6a4:	d866      	bhi.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b6a6:	a201      	add	r2, pc, #4	; (adr r2, 800b6ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ac:	0800b789 	.word	0x0800b789
 800b6b0:	0800b775 	.word	0x0800b775
 800b6b4:	0800b775 	.word	0x0800b775
 800b6b8:	0800b775 	.word	0x0800b775
 800b6bc:	0800b775 	.word	0x0800b775
 800b6c0:	0800b775 	.word	0x0800b775
 800b6c4:	0800b775 	.word	0x0800b775
 800b6c8:	0800b775 	.word	0x0800b775
 800b6cc:	0800b751 	.word	0x0800b751
 800b6d0:	0800b775 	.word	0x0800b775
 800b6d4:	0800b775 	.word	0x0800b775
 800b6d8:	0800b775 	.word	0x0800b775
 800b6dc:	0800b775 	.word	0x0800b775
 800b6e0:	0800b775 	.word	0x0800b775
 800b6e4:	0800b775 	.word	0x0800b775
 800b6e8:	0800b775 	.word	0x0800b775
 800b6ec:	0800b763 	.word	0x0800b763
 800b6f0:	0800b775 	.word	0x0800b775
 800b6f4:	0800b775 	.word	0x0800b775
 800b6f8:	0800b775 	.word	0x0800b775
 800b6fc:	0800b775 	.word	0x0800b775
 800b700:	0800b775 	.word	0x0800b775
 800b704:	0800b775 	.word	0x0800b775
 800b708:	0800b775 	.word	0x0800b775
 800b70c:	0800b789 	.word	0x0800b789
 800b710:	0800b775 	.word	0x0800b775
 800b714:	0800b775 	.word	0x0800b775
 800b718:	0800b775 	.word	0x0800b775
 800b71c:	0800b775 	.word	0x0800b775
 800b720:	0800b775 	.word	0x0800b775
 800b724:	0800b775 	.word	0x0800b775
 800b728:	0800b775 	.word	0x0800b775
 800b72c:	0800b789 	.word	0x0800b789
 800b730:	0800b775 	.word	0x0800b775
 800b734:	0800b775 	.word	0x0800b775
 800b738:	0800b775 	.word	0x0800b775
 800b73c:	0800b775 	.word	0x0800b775
 800b740:	0800b775 	.word	0x0800b775
 800b744:	0800b775 	.word	0x0800b775
 800b748:	0800b775 	.word	0x0800b775
 800b74c:	0800b789 	.word	0x0800b789
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3304      	adds	r3, #4
 800b754:	2101      	movs	r1, #1
 800b756:	4618      	mov	r0, r3
 800b758:	f000 fdfa 	bl	800c350 <RCCEx_PLL2_Config>
 800b75c:	4603      	mov	r3, r0
 800b75e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b760:	e013      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3324      	adds	r3, #36	; 0x24
 800b766:	2101      	movs	r1, #1
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fea3 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b76e:	4603      	mov	r3, r0
 800b770:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b772:	e00a      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	75fb      	strb	r3, [r7, #23]
      break;
 800b778:	e007      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b77a:	bf00      	nop
 800b77c:	58024400 	.word	0x58024400
 800b780:	58024800 	.word	0x58024800
 800b784:	00ffffcf 	.word	0x00ffffcf
      break;
 800b788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d109      	bne.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b790:	4b96      	ldr	r3, [pc, #600]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b794:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b79c:	4993      	ldr	r1, [pc, #588]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	654b      	str	r3, [r1, #84]	; 0x54
 800b7a2:	e001      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a4:	7dfb      	ldrb	r3, [r7, #23]
 800b7a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0302 	and.w	r3, r3, #2
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d038      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7b8:	2b05      	cmp	r3, #5
 800b7ba:	d821      	bhi.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800b7bc:	a201      	add	r2, pc, #4	; (adr r2, 800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b807 	.word	0x0800b807
 800b7c8:	0800b7dd 	.word	0x0800b7dd
 800b7cc:	0800b7ef 	.word	0x0800b7ef
 800b7d0:	0800b807 	.word	0x0800b807
 800b7d4:	0800b807 	.word	0x0800b807
 800b7d8:	0800b807 	.word	0x0800b807
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fdb4 	bl	800c350 <RCCEx_PLL2_Config>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b7ec:	e00c      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3324      	adds	r3, #36	; 0x24
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fe5d 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b7fe:	e003      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	75fb      	strb	r3, [r7, #23]
      break;
 800b804:	e000      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800b806:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b808:	7dfb      	ldrb	r3, [r7, #23]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d109      	bne.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b80e:	4b77      	ldr	r3, [pc, #476]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b812:	f023 0207 	bic.w	r2, r3, #7
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b81a:	4974      	ldr	r1, [pc, #464]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b81c:	4313      	orrs	r3, r2
 800b81e:	654b      	str	r3, [r1, #84]	; 0x54
 800b820:	e001      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b822:	7dfb      	ldrb	r3, [r7, #23]
 800b824:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f003 0304 	and.w	r3, r3, #4
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d03a      	beq.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b838:	2b05      	cmp	r3, #5
 800b83a:	d821      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b83c:	a201      	add	r2, pc, #4	; (adr r2, 800b844 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800b83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b842:	bf00      	nop
 800b844:	0800b887 	.word	0x0800b887
 800b848:	0800b85d 	.word	0x0800b85d
 800b84c:	0800b86f 	.word	0x0800b86f
 800b850:	0800b887 	.word	0x0800b887
 800b854:	0800b887 	.word	0x0800b887
 800b858:	0800b887 	.word	0x0800b887
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3304      	adds	r3, #4
 800b860:	2101      	movs	r1, #1
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fd74 	bl	800c350 <RCCEx_PLL2_Config>
 800b868:	4603      	mov	r3, r0
 800b86a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b86c:	e00c      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	3324      	adds	r3, #36	; 0x24
 800b872:	2101      	movs	r1, #1
 800b874:	4618      	mov	r0, r3
 800b876:	f000 fe1d 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b87a:	4603      	mov	r3, r0
 800b87c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b87e:	e003      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	75fb      	strb	r3, [r7, #23]
      break;
 800b884:	e000      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800b886:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10a      	bne.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b88e:	4b57      	ldr	r3, [pc, #348]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b892:	f023 0207 	bic.w	r2, r3, #7
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b89c:	4953      	ldr	r1, [pc, #332]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	658b      	str	r3, [r1, #88]	; 0x58
 800b8a2:	e001      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
 800b8a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0320 	and.w	r3, r3, #32
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d04b      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8be:	d02e      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b8c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8c4:	d828      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ca:	d02a      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b8cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8d0:	d822      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b8d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8d6:	d026      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b8d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8dc:	d81c      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8e2:	d010      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800b8e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8e8:	d816      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d01d      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b8ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8f2:	d111      	bne.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f000 fd28 	bl	800c350 <RCCEx_PLL2_Config>
 800b900:	4603      	mov	r3, r0
 800b902:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b904:	e012      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3324      	adds	r3, #36	; 0x24
 800b90a:	2102      	movs	r1, #2
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 fdd1 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b912:	4603      	mov	r3, r0
 800b914:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b916:	e009      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	75fb      	strb	r3, [r7, #23]
      break;
 800b91c:	e006      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b91e:	bf00      	nop
 800b920:	e004      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b922:	bf00      	nop
 800b924:	e002      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b926:	bf00      	nop
 800b928:	e000      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b92a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b932:	4b2e      	ldr	r3, [pc, #184]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b936:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b940:	492a      	ldr	r1, [pc, #168]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b942:	4313      	orrs	r3, r2
 800b944:	654b      	str	r3, [r1, #84]	; 0x54
 800b946:	e001      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b948:	7dfb      	ldrb	r3, [r7, #23]
 800b94a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b954:	2b00      	cmp	r3, #0
 800b956:	d04d      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b95e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b962:	d02e      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b964:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b968:	d828      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b96a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b96e:	d02a      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b974:	d822      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b97a:	d026      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b97c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b980:	d81c      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b986:	d010      	beq.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b98c:	d816      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d01d      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b996:	d111      	bne.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3304      	adds	r3, #4
 800b99c:	2100      	movs	r1, #0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 fcd6 	bl	800c350 <RCCEx_PLL2_Config>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b9a8:	e012      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	3324      	adds	r3, #36	; 0x24
 800b9ae:	2102      	movs	r1, #2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 fd7f 	bl	800c4b4 <RCCEx_PLL3_Config>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b9ba:	e009      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c0:	e006      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b9c2:	bf00      	nop
 800b9c4:	e004      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b9c6:	bf00      	nop
 800b9c8:	e002      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b9ca:	bf00      	nop
 800b9cc:	e000      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b9ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10c      	bne.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b9d6:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b9d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b9e4:	4901      	ldr	r1, [pc, #4]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	658b      	str	r3, [r1, #88]	; 0x58
 800b9ea:	e003      	b.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b9ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f0:	7dfb      	ldrb	r3, [r7, #23]
 800b9f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d04b      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba0a:	d02e      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ba0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba10:	d828      	bhi.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ba12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba16:	d02a      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ba18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba1c:	d822      	bhi.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ba1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba22:	d026      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800ba24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba28:	d81c      	bhi.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ba2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba2e:	d010      	beq.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800ba30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba34:	d816      	bhi.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d01d      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800ba3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba3e:	d111      	bne.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	3304      	adds	r3, #4
 800ba44:	2100      	movs	r1, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 fc82 	bl	800c350 <RCCEx_PLL2_Config>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ba50:	e012      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	3324      	adds	r3, #36	; 0x24
 800ba56:	2102      	movs	r1, #2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 fd2b 	bl	800c4b4 <RCCEx_PLL3_Config>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ba62:	e009      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	75fb      	strb	r3, [r7, #23]
      break;
 800ba68:	e006      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ba6a:	bf00      	nop
 800ba6c:	e004      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ba6e:	bf00      	nop
 800ba70:	e002      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ba72:	bf00      	nop
 800ba74:	e000      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ba76:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba78:	7dfb      	ldrb	r3, [r7, #23]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10a      	bne.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ba7e:	4b9d      	ldr	r3, [pc, #628]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba8c:	4999      	ldr	r1, [pc, #612]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	658b      	str	r3, [r1, #88]	; 0x58
 800ba92:	e001      	b.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba94:	7dfb      	ldrb	r3, [r7, #23]
 800ba96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f003 0308 	and.w	r3, r3, #8
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d01a      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baae:	d10a      	bne.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	3324      	adds	r3, #36	; 0x24
 800bab4:	2102      	movs	r1, #2
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 fcfc 	bl	800c4b4 <RCCEx_PLL3_Config>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bac6:	4b8b      	ldr	r3, [pc, #556]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad4:	4987      	ldr	r1, [pc, #540]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bad6:	4313      	orrs	r3, r2
 800bad8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f003 0310 	and.w	r3, r3, #16
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d01a      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baf0:	d10a      	bne.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	3324      	adds	r3, #36	; 0x24
 800baf6:	2102      	movs	r1, #2
 800baf8:	4618      	mov	r0, r3
 800bafa:	f000 fcdb 	bl	800c4b4 <RCCEx_PLL3_Config>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb08:	4b7a      	ldr	r3, [pc, #488]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb16:	4977      	ldr	r1, [pc, #476]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d034      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb32:	d01d      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800bb34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb38:	d817      	bhi.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800bb3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb42:	d009      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800bb44:	e011      	b.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f000 fbff 	bl	800c350 <RCCEx_PLL2_Config>
 800bb52:	4603      	mov	r3, r0
 800bb54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bb56:	e00c      	b.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3324      	adds	r3, #36	; 0x24
 800bb5c:	2102      	movs	r1, #2
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f000 fca8 	bl	800c4b4 <RCCEx_PLL3_Config>
 800bb64:	4603      	mov	r3, r0
 800bb66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bb68:	e003      	b.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	75fb      	strb	r3, [r7, #23]
      break;
 800bb6e:	e000      	b.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800bb70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10a      	bne.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb78:	4b5e      	ldr	r3, [pc, #376]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb86:	495b      	ldr	r1, [pc, #364]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	658b      	str	r3, [r1, #88]	; 0x58
 800bb8c:	e001      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d033      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bba8:	d01c      	beq.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800bbaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bbae:	d816      	bhi.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800bbb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbb4:	d003      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800bbb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbba:	d007      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800bbbc:	e00f      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbbe:	4b4d      	ldr	r3, [pc, #308]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc2:	4a4c      	ldr	r2, [pc, #304]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bbc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800bbca:	e00c      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3324      	adds	r3, #36	; 0x24
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 fc6e 	bl	800c4b4 <RCCEx_PLL3_Config>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bbdc:	e003      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	75fb      	strb	r3, [r7, #23]
      break;
 800bbe2:	e000      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800bbe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10a      	bne.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bbec:	4b41      	ldr	r3, [pc, #260]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bbee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbfa:	493e      	ldr	r1, [pc, #248]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	654b      	str	r3, [r1, #84]	; 0x54
 800bc00:	e001      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
 800bc04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d029      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800bc1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc1e:	d007      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800bc20:	e00f      	b.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc22:	4b34      	ldr	r3, [pc, #208]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc26:	4a33      	ldr	r2, [pc, #204]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bc28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bc2e:	e00b      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	2102      	movs	r1, #2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fb8a 	bl	800c350 <RCCEx_PLL2_Config>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bc40:	e002      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	75fb      	strb	r3, [r7, #23]
      break;
 800bc46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d109      	bne.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc4e:	4b29      	ldr	r3, [pc, #164]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bc50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc5a:	4926      	ldr	r1, [pc, #152]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bc60:	e001      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
 800bc64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	3324      	adds	r3, #36	; 0x24
 800bc76:	2102      	movs	r1, #2
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 fc1b 	bl	800c4b4 <RCCEx_PLL3_Config>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d033      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc9c:	d017      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800bc9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bca2:	d811      	bhi.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800bca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bca8:	d013      	beq.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800bcaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcae:	d80b      	bhi.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d010      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800bcb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb8:	d106      	bne.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcba:	4b0e      	ldr	r3, [pc, #56]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcbe:	4a0d      	ldr	r2, [pc, #52]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bcc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bcc6:	e007      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	75fb      	strb	r3, [r7, #23]
      break;
 800bccc:	e004      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bcce:	bf00      	nop
 800bcd0:	e002      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bcd2:	bf00      	nop
 800bcd4:	e000      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bcd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10c      	bne.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bcde:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcea:	4902      	ldr	r1, [pc, #8]	; (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bcec:	4313      	orrs	r3, r2
 800bcee:	654b      	str	r3, [r1, #84]	; 0x54
 800bcf0:	e004      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800bcf2:	bf00      	nop
 800bcf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
 800bcfa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d008      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd08:	4b31      	ldr	r3, [pc, #196]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd14:	492e      	ldr	r1, [pc, #184]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d009      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bd26:	4b2a      	ldr	r3, [pc, #168]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd34:	4926      	ldr	r1, [pc, #152]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd36:	4313      	orrs	r3, r2
 800bd38:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d008      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd46:	4b22      	ldr	r3, [pc, #136]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd52:	491f      	ldr	r1, [pc, #124]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd54:	4313      	orrs	r3, r2
 800bd56:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00d      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd64:	4b1a      	ldr	r3, [pc, #104]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	4a19      	ldr	r2, [pc, #100]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd6e:	6113      	str	r3, [r2, #16]
 800bd70:	4b17      	ldr	r3, [pc, #92]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd72:	691a      	ldr	r2, [r3, #16]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bd7a:	4915      	ldr	r1, [pc, #84]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	da08      	bge.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bd88:	4b11      	ldr	r3, [pc, #68]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd94:	490e      	ldr	r1, [pc, #56]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d009      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bda6:	4b0a      	ldr	r3, [pc, #40]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdb4:	4906      	ldr	r1, [pc, #24]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bdba:	7dbb      	ldrb	r3, [r7, #22]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	e000      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	58024400 	.word	0x58024400

0800bdd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bdd8:	f7ff f85a 	bl	800ae90 <HAL_RCC_GetHCLKFreq>
 800bddc:	4602      	mov	r2, r0
 800bdde:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	091b      	lsrs	r3, r3, #4
 800bde4:	f003 0307 	and.w	r3, r3, #7
 800bde8:	4904      	ldr	r1, [pc, #16]	; (800bdfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bdea:	5ccb      	ldrb	r3, [r1, r3]
 800bdec:	f003 031f 	and.w	r3, r3, #31
 800bdf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	58024400 	.word	0x58024400
 800bdfc:	080124ac 	.word	0x080124ac

0800be00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800be00:	b480      	push	{r7}
 800be02:	b089      	sub	sp, #36	; 0x24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be08:	4ba1      	ldr	r3, [pc, #644]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be0c:	f003 0303 	and.w	r3, r3, #3
 800be10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800be12:	4b9f      	ldr	r3, [pc, #636]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be16:	0b1b      	lsrs	r3, r3, #12
 800be18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800be1e:	4b9c      	ldr	r3, [pc, #624]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be22:	091b      	lsrs	r3, r3, #4
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800be2a:	4b99      	ldr	r3, [pc, #612]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be2e:	08db      	lsrs	r3, r3, #3
 800be30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	fb02 f303 	mul.w	r3, r2, r3
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 8111 	beq.w	800c070 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	2b02      	cmp	r3, #2
 800be52:	f000 8083 	beq.w	800bf5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	f200 80a1 	bhi.w	800bfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d056      	beq.n	800bf18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800be6a:	e099      	b.n	800bfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be6c:	4b88      	ldr	r3, [pc, #544]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 0320 	and.w	r3, r3, #32
 800be74:	2b00      	cmp	r3, #0
 800be76:	d02d      	beq.n	800bed4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be78:	4b85      	ldr	r3, [pc, #532]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	08db      	lsrs	r3, r3, #3
 800be7e:	f003 0303 	and.w	r3, r3, #3
 800be82:	4a84      	ldr	r2, [pc, #528]	; (800c094 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800be84:	fa22 f303 	lsr.w	r3, r2, r3
 800be88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	ee07 3a90 	vmov	s15, r3
 800be90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bea2:	4b7b      	ldr	r3, [pc, #492]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800beb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800beba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bece:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bed2:	e087      	b.n	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bede:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c09c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bee6:	4b6a      	ldr	r3, [pc, #424]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800befa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800befe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf16:	e065      	b.n	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf2a:	4b59      	ldr	r3, [pc, #356]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf5a:	e043      	b.n	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bf6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf6e:	4b48      	ldr	r3, [pc, #288]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf9e:	e021      	b.n	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bfae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb2:	4b37      	ldr	r3, [pc, #220]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfba:	ee07 3a90 	vmov	s15, r3
 800bfbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bfca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bfe4:	4b2a      	ldr	r3, [pc, #168]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe8:	0a5b      	lsrs	r3, r3, #9
 800bfea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bffe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00a:	ee17 2a90 	vmov	r2, s15
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c012:	4b1f      	ldr	r3, [pc, #124]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c016:	0c1b      	lsrs	r3, r3, #16
 800c018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c01c:	ee07 3a90 	vmov	s15, r3
 800c020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c02c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c038:	ee17 2a90 	vmov	r2, s15
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c040:	4b13      	ldr	r3, [pc, #76]	; (800c090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c044:	0e1b      	lsrs	r3, r3, #24
 800c046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c05a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c05e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c066:	ee17 2a90 	vmov	r2, s15
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c06e:	e008      	b.n	800c082 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	609a      	str	r2, [r3, #8]
}
 800c082:	bf00      	nop
 800c084:	3724      	adds	r7, #36	; 0x24
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	58024400 	.word	0x58024400
 800c094:	03d09000 	.word	0x03d09000
 800c098:	46000000 	.word	0x46000000
 800c09c:	4c742400 	.word	0x4c742400
 800c0a0:	4a742400 	.word	0x4a742400
 800c0a4:	4c189680 	.word	0x4c189680

0800c0a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b089      	sub	sp, #36	; 0x24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0b0:	4ba1      	ldr	r3, [pc, #644]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b4:	f003 0303 	and.w	r3, r3, #3
 800c0b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c0ba:	4b9f      	ldr	r3, [pc, #636]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0be:	0d1b      	lsrs	r3, r3, #20
 800c0c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c0c6:	4b9c      	ldr	r3, [pc, #624]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ca:	0a1b      	lsrs	r3, r3, #8
 800c0cc:	f003 0301 	and.w	r3, r3, #1
 800c0d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c0d2:	4b99      	ldr	r3, [pc, #612]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d6:	08db      	lsrs	r3, r3, #3
 800c0d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	fb02 f303 	mul.w	r3, r2, r3
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 8111 	beq.w	800c318 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	f000 8083 	beq.w	800c204 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	2b02      	cmp	r3, #2
 800c102:	f200 80a1 	bhi.w	800c248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d003      	beq.n	800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d056      	beq.n	800c1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c112:	e099      	b.n	800c248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c114:	4b88      	ldr	r3, [pc, #544]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f003 0320 	and.w	r3, r3, #32
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d02d      	beq.n	800c17c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c120:	4b85      	ldr	r3, [pc, #532]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	08db      	lsrs	r3, r3, #3
 800c126:	f003 0303 	and.w	r3, r3, #3
 800c12a:	4a84      	ldr	r2, [pc, #528]	; (800c33c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c12c:	fa22 f303 	lsr.w	r3, r2, r3
 800c130:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	ee07 3a90 	vmov	s15, r3
 800c138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	ee07 3a90 	vmov	s15, r3
 800c142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c14a:	4b7b      	ldr	r3, [pc, #492]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c152:	ee07 3a90 	vmov	s15, r3
 800c156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c15e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c176:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c17a:	e087      	b.n	800c28c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	ee07 3a90 	vmov	s15, r3
 800c182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c186:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c344 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c18e:	4b6a      	ldr	r3, [pc, #424]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1be:	e065      	b.n	800c28c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1d2:	4b59      	ldr	r3, [pc, #356]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1da:	ee07 3a90 	vmov	s15, r3
 800c1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c202:	e043      	b.n	800c28c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c34c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c216:	4b48      	ldr	r3, [pc, #288]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c21e:	ee07 3a90 	vmov	s15, r3
 800c222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c226:	ed97 6a03 	vldr	s12, [r7, #12]
 800c22a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c246:	e021      	b.n	800c28c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	ee07 3a90 	vmov	s15, r3
 800c24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c252:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c25a:	4b37      	ldr	r3, [pc, #220]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c262:	ee07 3a90 	vmov	s15, r3
 800c266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c26e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c27a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c286:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c28a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c28c:	4b2a      	ldr	r3, [pc, #168]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c290:	0a5b      	lsrs	r3, r3, #9
 800c292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c296:	ee07 3a90 	vmov	s15, r3
 800c29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2b2:	ee17 2a90 	vmov	r2, s15
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c2ba:	4b1f      	ldr	r3, [pc, #124]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2be:	0c1b      	lsrs	r3, r3, #16
 800c2c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2c4:	ee07 3a90 	vmov	s15, r3
 800c2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2e0:	ee17 2a90 	vmov	r2, s15
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c2e8:	4b13      	ldr	r3, [pc, #76]	; (800c338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ec:	0e1b      	lsrs	r3, r3, #24
 800c2ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2f2:	ee07 3a90 	vmov	s15, r3
 800c2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c302:	edd7 6a07 	vldr	s13, [r7, #28]
 800c306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c30a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c30e:	ee17 2a90 	vmov	r2, s15
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c316:	e008      	b.n	800c32a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	609a      	str	r2, [r3, #8]
}
 800c32a:	bf00      	nop
 800c32c:	3724      	adds	r7, #36	; 0x24
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	58024400 	.word	0x58024400
 800c33c:	03d09000 	.word	0x03d09000
 800c340:	46000000 	.word	0x46000000
 800c344:	4c742400 	.word	0x4c742400
 800c348:	4a742400 	.word	0x4a742400
 800c34c:	4c189680 	.word	0x4c189680

0800c350 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c35e:	4b53      	ldr	r3, [pc, #332]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c362:	f003 0303 	and.w	r3, r3, #3
 800c366:	2b03      	cmp	r3, #3
 800c368:	d101      	bne.n	800c36e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e099      	b.n	800c4a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c36e:	4b4f      	ldr	r3, [pc, #316]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a4e      	ldr	r2, [pc, #312]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c374:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c37a:	f7f8 f981 	bl	8004680 <HAL_GetTick>
 800c37e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c380:	e008      	b.n	800c394 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c382:	f7f8 f97d 	bl	8004680 <HAL_GetTick>
 800c386:	4602      	mov	r2, r0
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d901      	bls.n	800c394 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c390:	2303      	movs	r3, #3
 800c392:	e086      	b.n	800c4a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c394:	4b45      	ldr	r3, [pc, #276]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1f0      	bne.n	800c382 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c3a0:	4b42      	ldr	r3, [pc, #264]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	031b      	lsls	r3, r3, #12
 800c3ae:	493f      	ldr	r1, [pc, #252]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	628b      	str	r3, [r1, #40]	; 0x28
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	025b      	lsls	r3, r3, #9
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	431a      	orrs	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	041b      	lsls	r3, r3, #16
 800c3d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	061b      	lsls	r3, r3, #24
 800c3e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3e4:	4931      	ldr	r1, [pc, #196]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c3ea:	4b30      	ldr	r3, [pc, #192]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	492d      	ldr	r1, [pc, #180]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c3fc:	4b2b      	ldr	r3, [pc, #172]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c400:	f023 0220 	bic.w	r2, r3, #32
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	4928      	ldr	r1, [pc, #160]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c40e:	4b27      	ldr	r3, [pc, #156]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c412:	4a26      	ldr	r2, [pc, #152]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c414:	f023 0310 	bic.w	r3, r3, #16
 800c418:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c41a:	4b24      	ldr	r3, [pc, #144]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c41c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c41e:	4b24      	ldr	r3, [pc, #144]	; (800c4b0 <RCCEx_PLL2_Config+0x160>)
 800c420:	4013      	ands	r3, r2
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	69d2      	ldr	r2, [r2, #28]
 800c426:	00d2      	lsls	r2, r2, #3
 800c428:	4920      	ldr	r1, [pc, #128]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c42a:	4313      	orrs	r3, r2
 800c42c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c42e:	4b1f      	ldr	r3, [pc, #124]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c432:	4a1e      	ldr	r2, [pc, #120]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c434:	f043 0310 	orr.w	r3, r3, #16
 800c438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d106      	bne.n	800c44e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c440:	4b1a      	ldr	r3, [pc, #104]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c444:	4a19      	ldr	r2, [pc, #100]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c44a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c44c:	e00f      	b.n	800c46e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d106      	bne.n	800c462 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c454:	4b15      	ldr	r3, [pc, #84]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c458:	4a14      	ldr	r2, [pc, #80]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c45a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c45e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c460:	e005      	b.n	800c46e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c462:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c466:	4a11      	ldr	r2, [pc, #68]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c46c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c46e:	4b0f      	ldr	r3, [pc, #60]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a0e      	ldr	r2, [pc, #56]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c47a:	f7f8 f901 	bl	8004680 <HAL_GetTick>
 800c47e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c480:	e008      	b.n	800c494 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c482:	f7f8 f8fd 	bl	8004680 <HAL_GetTick>
 800c486:	4602      	mov	r2, r0
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	1ad3      	subs	r3, r2, r3
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	d901      	bls.n	800c494 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c490:	2303      	movs	r3, #3
 800c492:	e006      	b.n	800c4a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c494:	4b05      	ldr	r3, [pc, #20]	; (800c4ac <RCCEx_PLL2_Config+0x15c>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d0f0      	beq.n	800c482 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	58024400 	.word	0x58024400
 800c4b0:	ffff0007 	.word	0xffff0007

0800c4b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4c2:	4b53      	ldr	r3, [pc, #332]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c6:	f003 0303 	and.w	r3, r3, #3
 800c4ca:	2b03      	cmp	r3, #3
 800c4cc:	d101      	bne.n	800c4d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e099      	b.n	800c606 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c4d2:	4b4f      	ldr	r3, [pc, #316]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a4e      	ldr	r2, [pc, #312]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c4d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4de:	f7f8 f8cf 	bl	8004680 <HAL_GetTick>
 800c4e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c4e4:	e008      	b.n	800c4f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c4e6:	f7f8 f8cb 	bl	8004680 <HAL_GetTick>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d901      	bls.n	800c4f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	e086      	b.n	800c606 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c4f8:	4b45      	ldr	r3, [pc, #276]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1f0      	bne.n	800c4e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c504:	4b42      	ldr	r3, [pc, #264]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c508:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	051b      	lsls	r3, r3, #20
 800c512:	493f      	ldr	r1, [pc, #252]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c514:	4313      	orrs	r3, r2
 800c516:	628b      	str	r3, [r1, #40]	; 0x28
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	3b01      	subs	r3, #1
 800c51e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	3b01      	subs	r3, #1
 800c528:	025b      	lsls	r3, r3, #9
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	431a      	orrs	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	3b01      	subs	r3, #1
 800c534:	041b      	lsls	r3, r3, #16
 800c536:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c53a:	431a      	orrs	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	3b01      	subs	r3, #1
 800c542:	061b      	lsls	r3, r3, #24
 800c544:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c548:	4931      	ldr	r1, [pc, #196]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c54a:	4313      	orrs	r3, r2
 800c54c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c54e:	4b30      	ldr	r3, [pc, #192]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	695b      	ldr	r3, [r3, #20]
 800c55a:	492d      	ldr	r1, [pc, #180]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c55c:	4313      	orrs	r3, r2
 800c55e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c560:	4b2b      	ldr	r3, [pc, #172]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c564:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	4928      	ldr	r1, [pc, #160]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c56e:	4313      	orrs	r3, r2
 800c570:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c572:	4b27      	ldr	r3, [pc, #156]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c576:	4a26      	ldr	r2, [pc, #152]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c57c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c57e:	4b24      	ldr	r3, [pc, #144]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c582:	4b24      	ldr	r3, [pc, #144]	; (800c614 <RCCEx_PLL3_Config+0x160>)
 800c584:	4013      	ands	r3, r2
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	69d2      	ldr	r2, [r2, #28]
 800c58a:	00d2      	lsls	r2, r2, #3
 800c58c:	4920      	ldr	r1, [pc, #128]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c58e:	4313      	orrs	r3, r2
 800c590:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c592:	4b1f      	ldr	r3, [pc, #124]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c596:	4a1e      	ldr	r2, [pc, #120]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c59c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c5a4:	4b1a      	ldr	r3, [pc, #104]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	4a19      	ldr	r2, [pc, #100]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c5aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c5ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c5b0:	e00f      	b.n	800c5d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d106      	bne.n	800c5c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c5b8:	4b15      	ldr	r3, [pc, #84]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5bc:	4a14      	ldr	r2, [pc, #80]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c5be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c5c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c5c4:	e005      	b.n	800c5d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c5c6:	4b12      	ldr	r3, [pc, #72]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ca:	4a11      	ldr	r2, [pc, #68]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c5cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c5d2:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a0e      	ldr	r2, [pc, #56]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c5d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5de:	f7f8 f84f 	bl	8004680 <HAL_GetTick>
 800c5e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c5e4:	e008      	b.n	800c5f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c5e6:	f7f8 f84b 	bl	8004680 <HAL_GetTick>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d901      	bls.n	800c5f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	e006      	b.n	800c606 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c5f8:	4b05      	ldr	r3, [pc, #20]	; (800c610 <RCCEx_PLL3_Config+0x15c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c600:	2b00      	cmp	r3, #0
 800c602:	d0f0      	beq.n	800c5e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c604:	7bfb      	ldrb	r3, [r7, #15]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	58024400 	.word	0x58024400
 800c614:	ffff0007 	.word	0xffff0007

0800c618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e049      	b.n	800c6be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d106      	bne.n	800c644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7f5 fd28 	bl	8002094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2202      	movs	r2, #2
 800c648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	3304      	adds	r3, #4
 800c654:	4619      	mov	r1, r3
 800c656:	4610      	mov	r0, r2
 800c658:	f001 f804 	bl	800d664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
	...

0800c6c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d001      	beq.n	800c6e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e054      	b.n	800c78a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68da      	ldr	r2, [r3, #12]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f042 0201 	orr.w	r2, r2, #1
 800c6f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a26      	ldr	r2, [pc, #152]	; (800c798 <HAL_TIM_Base_Start_IT+0xd0>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d022      	beq.n	800c748 <HAL_TIM_Base_Start_IT+0x80>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c70a:	d01d      	beq.n	800c748 <HAL_TIM_Base_Start_IT+0x80>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a22      	ldr	r2, [pc, #136]	; (800c79c <HAL_TIM_Base_Start_IT+0xd4>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d018      	beq.n	800c748 <HAL_TIM_Base_Start_IT+0x80>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a21      	ldr	r2, [pc, #132]	; (800c7a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d013      	beq.n	800c748 <HAL_TIM_Base_Start_IT+0x80>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a1f      	ldr	r2, [pc, #124]	; (800c7a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d00e      	beq.n	800c748 <HAL_TIM_Base_Start_IT+0x80>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a1e      	ldr	r2, [pc, #120]	; (800c7a8 <HAL_TIM_Base_Start_IT+0xe0>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d009      	beq.n	800c748 <HAL_TIM_Base_Start_IT+0x80>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a1c      	ldr	r2, [pc, #112]	; (800c7ac <HAL_TIM_Base_Start_IT+0xe4>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d004      	beq.n	800c748 <HAL_TIM_Base_Start_IT+0x80>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4a1b      	ldr	r2, [pc, #108]	; (800c7b0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d115      	bne.n	800c774 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	689a      	ldr	r2, [r3, #8]
 800c74e:	4b19      	ldr	r3, [pc, #100]	; (800c7b4 <HAL_TIM_Base_Start_IT+0xec>)
 800c750:	4013      	ands	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2b06      	cmp	r3, #6
 800c758:	d015      	beq.n	800c786 <HAL_TIM_Base_Start_IT+0xbe>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c760:	d011      	beq.n	800c786 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f042 0201 	orr.w	r2, r2, #1
 800c770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c772:	e008      	b.n	800c786 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f042 0201 	orr.w	r2, r2, #1
 800c782:	601a      	str	r2, [r3, #0]
 800c784:	e000      	b.n	800c788 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	40010000 	.word	0x40010000
 800c79c:	40000400 	.word	0x40000400
 800c7a0:	40000800 	.word	0x40000800
 800c7a4:	40000c00 	.word	0x40000c00
 800c7a8:	40010400 	.word	0x40010400
 800c7ac:	40001800 	.word	0x40001800
 800c7b0:	40014000 	.word	0x40014000
 800c7b4:	00010007 	.word	0x00010007

0800c7b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d101      	bne.n	800c7ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e049      	b.n	800c85e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d106      	bne.n	800c7e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f841 	bl	800c866 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2202      	movs	r2, #2
 800c7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	f000 ff34 	bl	800d664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2201      	movs	r2, #1
 800c820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c866:	b480      	push	{r7}
 800c868:	b083      	sub	sp, #12
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c86e:	bf00      	nop
 800c870:	370c      	adds	r7, #12
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
	...

0800c87c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d109      	bne.n	800c8a0 <HAL_TIM_PWM_Start+0x24>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b01      	cmp	r3, #1
 800c896:	bf14      	ite	ne
 800c898:	2301      	movne	r3, #1
 800c89a:	2300      	moveq	r3, #0
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	e03c      	b.n	800c91a <HAL_TIM_PWM_Start+0x9e>
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2b04      	cmp	r3, #4
 800c8a4:	d109      	bne.n	800c8ba <HAL_TIM_PWM_Start+0x3e>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	bf14      	ite	ne
 800c8b2:	2301      	movne	r3, #1
 800c8b4:	2300      	moveq	r3, #0
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	e02f      	b.n	800c91a <HAL_TIM_PWM_Start+0x9e>
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	2b08      	cmp	r3, #8
 800c8be:	d109      	bne.n	800c8d4 <HAL_TIM_PWM_Start+0x58>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	bf14      	ite	ne
 800c8cc:	2301      	movne	r3, #1
 800c8ce:	2300      	moveq	r3, #0
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	e022      	b.n	800c91a <HAL_TIM_PWM_Start+0x9e>
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	2b0c      	cmp	r3, #12
 800c8d8:	d109      	bne.n	800c8ee <HAL_TIM_PWM_Start+0x72>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	bf14      	ite	ne
 800c8e6:	2301      	movne	r3, #1
 800c8e8:	2300      	moveq	r3, #0
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	e015      	b.n	800c91a <HAL_TIM_PWM_Start+0x9e>
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	2b10      	cmp	r3, #16
 800c8f2:	d109      	bne.n	800c908 <HAL_TIM_PWM_Start+0x8c>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	bf14      	ite	ne
 800c900:	2301      	movne	r3, #1
 800c902:	2300      	moveq	r3, #0
 800c904:	b2db      	uxtb	r3, r3
 800c906:	e008      	b.n	800c91a <HAL_TIM_PWM_Start+0x9e>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b01      	cmp	r3, #1
 800c912:	bf14      	ite	ne
 800c914:	2301      	movne	r3, #1
 800c916:	2300      	moveq	r3, #0
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e0a1      	b.n	800ca66 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d104      	bne.n	800c932 <HAL_TIM_PWM_Start+0xb6>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2202      	movs	r2, #2
 800c92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c930:	e023      	b.n	800c97a <HAL_TIM_PWM_Start+0xfe>
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b04      	cmp	r3, #4
 800c936:	d104      	bne.n	800c942 <HAL_TIM_PWM_Start+0xc6>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2202      	movs	r2, #2
 800c93c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c940:	e01b      	b.n	800c97a <HAL_TIM_PWM_Start+0xfe>
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2b08      	cmp	r3, #8
 800c946:	d104      	bne.n	800c952 <HAL_TIM_PWM_Start+0xd6>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2202      	movs	r2, #2
 800c94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c950:	e013      	b.n	800c97a <HAL_TIM_PWM_Start+0xfe>
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	2b0c      	cmp	r3, #12
 800c956:	d104      	bne.n	800c962 <HAL_TIM_PWM_Start+0xe6>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2202      	movs	r2, #2
 800c95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c960:	e00b      	b.n	800c97a <HAL_TIM_PWM_Start+0xfe>
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	2b10      	cmp	r3, #16
 800c966:	d104      	bne.n	800c972 <HAL_TIM_PWM_Start+0xf6>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2202      	movs	r2, #2
 800c96c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c970:	e003      	b.n	800c97a <HAL_TIM_PWM_Start+0xfe>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2202      	movs	r2, #2
 800c976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2201      	movs	r2, #1
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	4618      	mov	r0, r3
 800c984:	f001 fba6 	bl	800e0d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a38      	ldr	r2, [pc, #224]	; (800ca70 <HAL_TIM_PWM_Start+0x1f4>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d013      	beq.n	800c9ba <HAL_TIM_PWM_Start+0x13e>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a37      	ldr	r2, [pc, #220]	; (800ca74 <HAL_TIM_PWM_Start+0x1f8>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d00e      	beq.n	800c9ba <HAL_TIM_PWM_Start+0x13e>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a35      	ldr	r2, [pc, #212]	; (800ca78 <HAL_TIM_PWM_Start+0x1fc>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d009      	beq.n	800c9ba <HAL_TIM_PWM_Start+0x13e>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a34      	ldr	r2, [pc, #208]	; (800ca7c <HAL_TIM_PWM_Start+0x200>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d004      	beq.n	800c9ba <HAL_TIM_PWM_Start+0x13e>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a32      	ldr	r2, [pc, #200]	; (800ca80 <HAL_TIM_PWM_Start+0x204>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d101      	bne.n	800c9be <HAL_TIM_PWM_Start+0x142>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e000      	b.n	800c9c0 <HAL_TIM_PWM_Start+0x144>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d007      	beq.n	800c9d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a25      	ldr	r2, [pc, #148]	; (800ca70 <HAL_TIM_PWM_Start+0x1f4>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d022      	beq.n	800ca24 <HAL_TIM_PWM_Start+0x1a8>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9e6:	d01d      	beq.n	800ca24 <HAL_TIM_PWM_Start+0x1a8>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a25      	ldr	r2, [pc, #148]	; (800ca84 <HAL_TIM_PWM_Start+0x208>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d018      	beq.n	800ca24 <HAL_TIM_PWM_Start+0x1a8>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a24      	ldr	r2, [pc, #144]	; (800ca88 <HAL_TIM_PWM_Start+0x20c>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d013      	beq.n	800ca24 <HAL_TIM_PWM_Start+0x1a8>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a22      	ldr	r2, [pc, #136]	; (800ca8c <HAL_TIM_PWM_Start+0x210>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d00e      	beq.n	800ca24 <HAL_TIM_PWM_Start+0x1a8>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a1a      	ldr	r2, [pc, #104]	; (800ca74 <HAL_TIM_PWM_Start+0x1f8>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d009      	beq.n	800ca24 <HAL_TIM_PWM_Start+0x1a8>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a1e      	ldr	r2, [pc, #120]	; (800ca90 <HAL_TIM_PWM_Start+0x214>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d004      	beq.n	800ca24 <HAL_TIM_PWM_Start+0x1a8>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a16      	ldr	r2, [pc, #88]	; (800ca78 <HAL_TIM_PWM_Start+0x1fc>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d115      	bne.n	800ca50 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	689a      	ldr	r2, [r3, #8]
 800ca2a:	4b1a      	ldr	r3, [pc, #104]	; (800ca94 <HAL_TIM_PWM_Start+0x218>)
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b06      	cmp	r3, #6
 800ca34:	d015      	beq.n	800ca62 <HAL_TIM_PWM_Start+0x1e6>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca3c:	d011      	beq.n	800ca62 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f042 0201 	orr.w	r2, r2, #1
 800ca4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca4e:	e008      	b.n	800ca62 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f042 0201 	orr.w	r2, r2, #1
 800ca5e:	601a      	str	r2, [r3, #0]
 800ca60:	e000      	b.n	800ca64 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca64:	2300      	movs	r3, #0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	40010000 	.word	0x40010000
 800ca74:	40010400 	.word	0x40010400
 800ca78:	40014000 	.word	0x40014000
 800ca7c:	40014400 	.word	0x40014400
 800ca80:	40014800 	.word	0x40014800
 800ca84:	40000400 	.word	0x40000400
 800ca88:	40000800 	.word	0x40000800
 800ca8c:	40000c00 	.word	0x40000c00
 800ca90:	40001800 	.word	0x40001800
 800ca94:	00010007 	.word	0x00010007

0800ca98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d101      	bne.n	800caaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	e049      	b.n	800cb3e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d106      	bne.n	800cac4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f841 	bl	800cb46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2202      	movs	r2, #2
 800cac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	3304      	adds	r3, #4
 800cad4:	4619      	mov	r1, r3
 800cad6:	4610      	mov	r0, r2
 800cad8:	f000 fdc4 	bl	800d664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2201      	movs	r2, #1
 800cb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800cb46:	b480      	push	{r7}
 800cb48:	b083      	sub	sp, #12
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800cb4e:	bf00      	nop
 800cb50:	370c      	adds	r7, #12
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
	...

0800cb5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d104      	bne.n	800cb7a <HAL_TIM_IC_Start_IT+0x1e>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	e023      	b.n	800cbc2 <HAL_TIM_IC_Start_IT+0x66>
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b04      	cmp	r3, #4
 800cb7e:	d104      	bne.n	800cb8a <HAL_TIM_IC_Start_IT+0x2e>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	e01b      	b.n	800cbc2 <HAL_TIM_IC_Start_IT+0x66>
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d104      	bne.n	800cb9a <HAL_TIM_IC_Start_IT+0x3e>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	e013      	b.n	800cbc2 <HAL_TIM_IC_Start_IT+0x66>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b0c      	cmp	r3, #12
 800cb9e:	d104      	bne.n	800cbaa <HAL_TIM_IC_Start_IT+0x4e>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	e00b      	b.n	800cbc2 <HAL_TIM_IC_Start_IT+0x66>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b10      	cmp	r3, #16
 800cbae:	d104      	bne.n	800cbba <HAL_TIM_IC_Start_IT+0x5e>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	e003      	b.n	800cbc2 <HAL_TIM_IC_Start_IT+0x66>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d104      	bne.n	800cbd4 <HAL_TIM_IC_Start_IT+0x78>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	e013      	b.n	800cbfc <HAL_TIM_IC_Start_IT+0xa0>
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	d104      	bne.n	800cbe4 <HAL_TIM_IC_Start_IT+0x88>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	e00b      	b.n	800cbfc <HAL_TIM_IC_Start_IT+0xa0>
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	2b08      	cmp	r3, #8
 800cbe8:	d104      	bne.n	800cbf4 <HAL_TIM_IC_Start_IT+0x98>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	e003      	b.n	800cbfc <HAL_TIM_IC_Start_IT+0xa0>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800cbfe:	7bbb      	ldrb	r3, [r7, #14]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d102      	bne.n	800cc0a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800cc04:	7b7b      	ldrb	r3, [r7, #13]
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d001      	beq.n	800cc0e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e0e2      	b.n	800cdd4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <HAL_TIM_IC_Start_IT+0xc2>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2202      	movs	r2, #2
 800cc18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc1c:	e023      	b.n	800cc66 <HAL_TIM_IC_Start_IT+0x10a>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	d104      	bne.n	800cc2e <HAL_TIM_IC_Start_IT+0xd2>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2202      	movs	r2, #2
 800cc28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc2c:	e01b      	b.n	800cc66 <HAL_TIM_IC_Start_IT+0x10a>
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2b08      	cmp	r3, #8
 800cc32:	d104      	bne.n	800cc3e <HAL_TIM_IC_Start_IT+0xe2>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc3c:	e013      	b.n	800cc66 <HAL_TIM_IC_Start_IT+0x10a>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b0c      	cmp	r3, #12
 800cc42:	d104      	bne.n	800cc4e <HAL_TIM_IC_Start_IT+0xf2>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2202      	movs	r2, #2
 800cc48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc4c:	e00b      	b.n	800cc66 <HAL_TIM_IC_Start_IT+0x10a>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b10      	cmp	r3, #16
 800cc52:	d104      	bne.n	800cc5e <HAL_TIM_IC_Start_IT+0x102>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2202      	movs	r2, #2
 800cc58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc5c:	e003      	b.n	800cc66 <HAL_TIM_IC_Start_IT+0x10a>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2202      	movs	r2, #2
 800cc62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d104      	bne.n	800cc76 <HAL_TIM_IC_Start_IT+0x11a>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2202      	movs	r2, #2
 800cc70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc74:	e013      	b.n	800cc9e <HAL_TIM_IC_Start_IT+0x142>
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d104      	bne.n	800cc86 <HAL_TIM_IC_Start_IT+0x12a>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2202      	movs	r2, #2
 800cc80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc84:	e00b      	b.n	800cc9e <HAL_TIM_IC_Start_IT+0x142>
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	2b08      	cmp	r3, #8
 800cc8a:	d104      	bne.n	800cc96 <HAL_TIM_IC_Start_IT+0x13a>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2202      	movs	r2, #2
 800cc90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cc94:	e003      	b.n	800cc9e <HAL_TIM_IC_Start_IT+0x142>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2202      	movs	r2, #2
 800cc9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b0c      	cmp	r3, #12
 800cca2:	d841      	bhi.n	800cd28 <HAL_TIM_IC_Start_IT+0x1cc>
 800cca4:	a201      	add	r2, pc, #4	; (adr r2, 800ccac <HAL_TIM_IC_Start_IT+0x150>)
 800cca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccaa:	bf00      	nop
 800ccac:	0800cce1 	.word	0x0800cce1
 800ccb0:	0800cd29 	.word	0x0800cd29
 800ccb4:	0800cd29 	.word	0x0800cd29
 800ccb8:	0800cd29 	.word	0x0800cd29
 800ccbc:	0800ccf3 	.word	0x0800ccf3
 800ccc0:	0800cd29 	.word	0x0800cd29
 800ccc4:	0800cd29 	.word	0x0800cd29
 800ccc8:	0800cd29 	.word	0x0800cd29
 800cccc:	0800cd05 	.word	0x0800cd05
 800ccd0:	0800cd29 	.word	0x0800cd29
 800ccd4:	0800cd29 	.word	0x0800cd29
 800ccd8:	0800cd29 	.word	0x0800cd29
 800ccdc:	0800cd17 	.word	0x0800cd17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68da      	ldr	r2, [r3, #12]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f042 0202 	orr.w	r2, r2, #2
 800ccee:	60da      	str	r2, [r3, #12]
      break;
 800ccf0:	e01d      	b.n	800cd2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	68da      	ldr	r2, [r3, #12]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f042 0204 	orr.w	r2, r2, #4
 800cd00:	60da      	str	r2, [r3, #12]
      break;
 800cd02:	e014      	b.n	800cd2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	68da      	ldr	r2, [r3, #12]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f042 0208 	orr.w	r2, r2, #8
 800cd12:	60da      	str	r2, [r3, #12]
      break;
 800cd14:	e00b      	b.n	800cd2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68da      	ldr	r2, [r3, #12]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f042 0210 	orr.w	r2, r2, #16
 800cd24:	60da      	str	r2, [r3, #12]
      break;
 800cd26:	e002      	b.n	800cd2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	73fb      	strb	r3, [r7, #15]
      break;
 800cd2c:	bf00      	nop
  }

  if (status == HAL_OK)
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d14e      	bne.n	800cdd2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f001 f9c9 	bl	800e0d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a25      	ldr	r2, [pc, #148]	; (800cddc <HAL_TIM_IC_Start_IT+0x280>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d022      	beq.n	800cd92 <HAL_TIM_IC_Start_IT+0x236>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd54:	d01d      	beq.n	800cd92 <HAL_TIM_IC_Start_IT+0x236>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a21      	ldr	r2, [pc, #132]	; (800cde0 <HAL_TIM_IC_Start_IT+0x284>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d018      	beq.n	800cd92 <HAL_TIM_IC_Start_IT+0x236>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a1f      	ldr	r2, [pc, #124]	; (800cde4 <HAL_TIM_IC_Start_IT+0x288>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d013      	beq.n	800cd92 <HAL_TIM_IC_Start_IT+0x236>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a1e      	ldr	r2, [pc, #120]	; (800cde8 <HAL_TIM_IC_Start_IT+0x28c>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d00e      	beq.n	800cd92 <HAL_TIM_IC_Start_IT+0x236>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a1c      	ldr	r2, [pc, #112]	; (800cdec <HAL_TIM_IC_Start_IT+0x290>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d009      	beq.n	800cd92 <HAL_TIM_IC_Start_IT+0x236>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a1b      	ldr	r2, [pc, #108]	; (800cdf0 <HAL_TIM_IC_Start_IT+0x294>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d004      	beq.n	800cd92 <HAL_TIM_IC_Start_IT+0x236>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a19      	ldr	r2, [pc, #100]	; (800cdf4 <HAL_TIM_IC_Start_IT+0x298>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d115      	bne.n	800cdbe <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	689a      	ldr	r2, [r3, #8]
 800cd98:	4b17      	ldr	r3, [pc, #92]	; (800cdf8 <HAL_TIM_IC_Start_IT+0x29c>)
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	2b06      	cmp	r3, #6
 800cda2:	d015      	beq.n	800cdd0 <HAL_TIM_IC_Start_IT+0x274>
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdaa:	d011      	beq.n	800cdd0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f042 0201 	orr.w	r2, r2, #1
 800cdba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdbc:	e008      	b.n	800cdd0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f042 0201 	orr.w	r2, r2, #1
 800cdcc:	601a      	str	r2, [r3, #0]
 800cdce:	e000      	b.n	800cdd2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdd0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	40010000 	.word	0x40010000
 800cde0:	40000400 	.word	0x40000400
 800cde4:	40000800 	.word	0x40000800
 800cde8:	40000c00 	.word	0x40000c00
 800cdec:	40010400 	.word	0x40010400
 800cdf0:	40001800 	.word	0x40001800
 800cdf4:	40014000 	.word	0x40014000
 800cdf8:	00010007 	.word	0x00010007

0800cdfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	f003 0302 	and.w	r3, r3, #2
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d122      	bne.n	800ce58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d11b      	bne.n	800ce58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f06f 0202 	mvn.w	r2, #2
 800ce28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	f003 0303 	and.w	r3, r3, #3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d003      	beq.n	800ce46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7f5 fe1e 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 800ce44:	e005      	b.n	800ce52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fbee 	bl	800d628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 fbf5 	bl	800d63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2200      	movs	r2, #0
 800ce56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	f003 0304 	and.w	r3, r3, #4
 800ce62:	2b04      	cmp	r3, #4
 800ce64:	d122      	bne.n	800ceac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b04      	cmp	r3, #4
 800ce72:	d11b      	bne.n	800ceac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f06f 0204 	mvn.w	r2, #4
 800ce7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2202      	movs	r2, #2
 800ce82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d003      	beq.n	800ce9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7f5 fdf4 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 800ce98:	e005      	b.n	800cea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 fbc4 	bl	800d628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 fbcb 	bl	800d63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	f003 0308 	and.w	r3, r3, #8
 800ceb6:	2b08      	cmp	r3, #8
 800ceb8:	d122      	bne.n	800cf00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	f003 0308 	and.w	r3, r3, #8
 800cec4:	2b08      	cmp	r3, #8
 800cec6:	d11b      	bne.n	800cf00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f06f 0208 	mvn.w	r2, #8
 800ced0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2204      	movs	r2, #4
 800ced6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	69db      	ldr	r3, [r3, #28]
 800cede:	f003 0303 	and.w	r3, r3, #3
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d003      	beq.n	800ceee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7f5 fdca 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 800ceec:	e005      	b.n	800cefa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 fb9a 	bl	800d628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 fba1 	bl	800d63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	f003 0310 	and.w	r3, r3, #16
 800cf0a:	2b10      	cmp	r3, #16
 800cf0c:	d122      	bne.n	800cf54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	f003 0310 	and.w	r3, r3, #16
 800cf18:	2b10      	cmp	r3, #16
 800cf1a:	d11b      	bne.n	800cf54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f06f 0210 	mvn.w	r2, #16
 800cf24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2208      	movs	r2, #8
 800cf2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	69db      	ldr	r3, [r3, #28]
 800cf32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d003      	beq.n	800cf42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7f5 fda0 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 800cf40:	e005      	b.n	800cf4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fb70 	bl	800d628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fb77 	bl	800d63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	f003 0301 	and.w	r3, r3, #1
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d10e      	bne.n	800cf80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	f003 0301 	and.w	r3, r3, #1
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d107      	bne.n	800cf80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f06f 0201 	mvn.w	r2, #1
 800cf78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fb4a 	bl	800d614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf8a:	2b80      	cmp	r3, #128	; 0x80
 800cf8c:	d10e      	bne.n	800cfac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf98:	2b80      	cmp	r3, #128	; 0x80
 800cf9a:	d107      	bne.n	800cfac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cfa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f001 f952 	bl	800e250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfba:	d10e      	bne.n	800cfda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfc6:	2b80      	cmp	r3, #128	; 0x80
 800cfc8:	d107      	bne.n	800cfda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cfd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f001 f945 	bl	800e264 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	691b      	ldr	r3, [r3, #16]
 800cfe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfe4:	2b40      	cmp	r3, #64	; 0x40
 800cfe6:	d10e      	bne.n	800d006 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cff2:	2b40      	cmp	r3, #64	; 0x40
 800cff4:	d107      	bne.n	800d006 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fb25 	bl	800d650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	f003 0320 	and.w	r3, r3, #32
 800d010:	2b20      	cmp	r3, #32
 800d012:	d10e      	bne.n	800d032 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	f003 0320 	and.w	r3, r3, #32
 800d01e:	2b20      	cmp	r3, #32
 800d020:	d107      	bne.n	800d032 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f06f 0220 	mvn.w	r2, #32
 800d02a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f001 f905 	bl	800e23c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d032:	bf00      	nop
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b086      	sub	sp, #24
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d050:	2b01      	cmp	r3, #1
 800d052:	d101      	bne.n	800d058 <HAL_TIM_IC_ConfigChannel+0x1e>
 800d054:	2302      	movs	r3, #2
 800d056:	e088      	b.n	800d16a <HAL_TIM_IC_ConfigChannel+0x130>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d11b      	bne.n	800d09e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6818      	ldr	r0, [r3, #0]
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	6819      	ldr	r1, [r3, #0]
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	685a      	ldr	r2, [r3, #4]
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	f000 fe65 	bl	800dd44 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	699a      	ldr	r2, [r3, #24]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f022 020c 	bic.w	r2, r2, #12
 800d088:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6999      	ldr	r1, [r3, #24]
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	689a      	ldr	r2, [r3, #8]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	430a      	orrs	r2, r1
 800d09a:	619a      	str	r2, [r3, #24]
 800d09c:	e060      	b.n	800d160 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b04      	cmp	r3, #4
 800d0a2:	d11c      	bne.n	800d0de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6818      	ldr	r0, [r3, #0]
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	6819      	ldr	r1, [r3, #0]
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	f000 fee9 	bl	800de8a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	699a      	ldr	r2, [r3, #24]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d0c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	6999      	ldr	r1, [r3, #24]
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	021a      	lsls	r2, r3, #8
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	430a      	orrs	r2, r1
 800d0da:	619a      	str	r2, [r3, #24]
 800d0dc:	e040      	b.n	800d160 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d11b      	bne.n	800d11c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6818      	ldr	r0, [r3, #0]
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	6819      	ldr	r1, [r3, #0]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	f000 ff36 	bl	800df64 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	69da      	ldr	r2, [r3, #28]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f022 020c 	bic.w	r2, r2, #12
 800d106:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	69d9      	ldr	r1, [r3, #28]
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	689a      	ldr	r2, [r3, #8]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	430a      	orrs	r2, r1
 800d118:	61da      	str	r2, [r3, #28]
 800d11a:	e021      	b.n	800d160 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b0c      	cmp	r3, #12
 800d120:	d11c      	bne.n	800d15c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6818      	ldr	r0, [r3, #0]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	6819      	ldr	r1, [r3, #0]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	f000 ff53 	bl	800dfdc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	69da      	ldr	r2, [r3, #28]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d144:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	69d9      	ldr	r1, [r3, #28]
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	021a      	lsls	r2, r3, #8
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	430a      	orrs	r2, r1
 800d158:	61da      	str	r2, [r3, #28]
 800d15a:	e001      	b.n	800d160 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d168:	7dfb      	ldrb	r3, [r7, #23]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3718      	adds	r7, #24
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
	...

0800d174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d180:	2300      	movs	r3, #0
 800d182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d101      	bne.n	800d192 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d18e:	2302      	movs	r3, #2
 800d190:	e0ff      	b.n	800d392 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2201      	movs	r2, #1
 800d196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b14      	cmp	r3, #20
 800d19e:	f200 80f0 	bhi.w	800d382 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d1a2:	a201      	add	r2, pc, #4	; (adr r2, 800d1a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a8:	0800d1fd 	.word	0x0800d1fd
 800d1ac:	0800d383 	.word	0x0800d383
 800d1b0:	0800d383 	.word	0x0800d383
 800d1b4:	0800d383 	.word	0x0800d383
 800d1b8:	0800d23d 	.word	0x0800d23d
 800d1bc:	0800d383 	.word	0x0800d383
 800d1c0:	0800d383 	.word	0x0800d383
 800d1c4:	0800d383 	.word	0x0800d383
 800d1c8:	0800d27f 	.word	0x0800d27f
 800d1cc:	0800d383 	.word	0x0800d383
 800d1d0:	0800d383 	.word	0x0800d383
 800d1d4:	0800d383 	.word	0x0800d383
 800d1d8:	0800d2bf 	.word	0x0800d2bf
 800d1dc:	0800d383 	.word	0x0800d383
 800d1e0:	0800d383 	.word	0x0800d383
 800d1e4:	0800d383 	.word	0x0800d383
 800d1e8:	0800d301 	.word	0x0800d301
 800d1ec:	0800d383 	.word	0x0800d383
 800d1f0:	0800d383 	.word	0x0800d383
 800d1f4:	0800d383 	.word	0x0800d383
 800d1f8:	0800d341 	.word	0x0800d341
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68b9      	ldr	r1, [r7, #8]
 800d202:	4618      	mov	r0, r3
 800d204:	f000 fac8 	bl	800d798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	699a      	ldr	r2, [r3, #24]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f042 0208 	orr.w	r2, r2, #8
 800d216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	699a      	ldr	r2, [r3, #24]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f022 0204 	bic.w	r2, r2, #4
 800d226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6999      	ldr	r1, [r3, #24]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	691a      	ldr	r2, [r3, #16]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	430a      	orrs	r2, r1
 800d238:	619a      	str	r2, [r3, #24]
      break;
 800d23a:	e0a5      	b.n	800d388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	4618      	mov	r0, r3
 800d244:	f000 fb38 	bl	800d8b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	699a      	ldr	r2, [r3, #24]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	699a      	ldr	r2, [r3, #24]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6999      	ldr	r1, [r3, #24]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	021a      	lsls	r2, r3, #8
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	430a      	orrs	r2, r1
 800d27a:	619a      	str	r2, [r3, #24]
      break;
 800d27c:	e084      	b.n	800d388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	68b9      	ldr	r1, [r7, #8]
 800d284:	4618      	mov	r0, r3
 800d286:	f000 fba1 	bl	800d9cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	69da      	ldr	r2, [r3, #28]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f042 0208 	orr.w	r2, r2, #8
 800d298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	69da      	ldr	r2, [r3, #28]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f022 0204 	bic.w	r2, r2, #4
 800d2a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	69d9      	ldr	r1, [r3, #28]
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	691a      	ldr	r2, [r3, #16]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	430a      	orrs	r2, r1
 800d2ba:	61da      	str	r2, [r3, #28]
      break;
 800d2bc:	e064      	b.n	800d388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	68b9      	ldr	r1, [r7, #8]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 fc09 	bl	800dadc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	69da      	ldr	r2, [r3, #28]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	69da      	ldr	r2, [r3, #28]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	69d9      	ldr	r1, [r3, #28]
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	021a      	lsls	r2, r3, #8
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	430a      	orrs	r2, r1
 800d2fc:	61da      	str	r2, [r3, #28]
      break;
 800d2fe:	e043      	b.n	800d388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	68b9      	ldr	r1, [r7, #8]
 800d306:	4618      	mov	r0, r3
 800d308:	f000 fc52 	bl	800dbb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f042 0208 	orr.w	r2, r2, #8
 800d31a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f022 0204 	bic.w	r2, r2, #4
 800d32a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	691a      	ldr	r2, [r3, #16]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	430a      	orrs	r2, r1
 800d33c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d33e:	e023      	b.n	800d388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68b9      	ldr	r1, [r7, #8]
 800d346:	4618      	mov	r0, r3
 800d348:	f000 fc96 	bl	800dc78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d35a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d36a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	691b      	ldr	r3, [r3, #16]
 800d376:	021a      	lsls	r2, r3, #8
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	430a      	orrs	r2, r1
 800d37e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d380:	e002      	b.n	800d388 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	75fb      	strb	r3, [r7, #23]
      break;
 800d386:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d390:	7dfb      	ldrb	r3, [r7, #23]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3718      	adds	r7, #24
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop

0800d39c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d101      	bne.n	800d3b8 <HAL_TIM_ConfigClockSource+0x1c>
 800d3b4:	2302      	movs	r3, #2
 800d3b6:	e0dc      	b.n	800d572 <HAL_TIM_ConfigClockSource+0x1d6>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2202      	movs	r2, #2
 800d3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	4b6a      	ldr	r3, [pc, #424]	; (800d57c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d3de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a64      	ldr	r2, [pc, #400]	; (800d580 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	f000 80a9 	beq.w	800d546 <HAL_TIM_ConfigClockSource+0x1aa>
 800d3f4:	4a62      	ldr	r2, [pc, #392]	; (800d580 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	f200 80ae 	bhi.w	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3fc:	4a61      	ldr	r2, [pc, #388]	; (800d584 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	f000 80a1 	beq.w	800d546 <HAL_TIM_ConfigClockSource+0x1aa>
 800d404:	4a5f      	ldr	r2, [pc, #380]	; (800d584 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d406:	4293      	cmp	r3, r2
 800d408:	f200 80a6 	bhi.w	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d40c:	4a5e      	ldr	r2, [pc, #376]	; (800d588 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	f000 8099 	beq.w	800d546 <HAL_TIM_ConfigClockSource+0x1aa>
 800d414:	4a5c      	ldr	r2, [pc, #368]	; (800d588 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d416:	4293      	cmp	r3, r2
 800d418:	f200 809e 	bhi.w	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d41c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d420:	f000 8091 	beq.w	800d546 <HAL_TIM_ConfigClockSource+0x1aa>
 800d424:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d428:	f200 8096 	bhi.w	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d42c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d430:	f000 8089 	beq.w	800d546 <HAL_TIM_ConfigClockSource+0x1aa>
 800d434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d438:	f200 808e 	bhi.w	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d43c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d440:	d03e      	beq.n	800d4c0 <HAL_TIM_ConfigClockSource+0x124>
 800d442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d446:	f200 8087 	bhi.w	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d44e:	f000 8086 	beq.w	800d55e <HAL_TIM_ConfigClockSource+0x1c2>
 800d452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d456:	d87f      	bhi.n	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d458:	2b70      	cmp	r3, #112	; 0x70
 800d45a:	d01a      	beq.n	800d492 <HAL_TIM_ConfigClockSource+0xf6>
 800d45c:	2b70      	cmp	r3, #112	; 0x70
 800d45e:	d87b      	bhi.n	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d460:	2b60      	cmp	r3, #96	; 0x60
 800d462:	d050      	beq.n	800d506 <HAL_TIM_ConfigClockSource+0x16a>
 800d464:	2b60      	cmp	r3, #96	; 0x60
 800d466:	d877      	bhi.n	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d468:	2b50      	cmp	r3, #80	; 0x50
 800d46a:	d03c      	beq.n	800d4e6 <HAL_TIM_ConfigClockSource+0x14a>
 800d46c:	2b50      	cmp	r3, #80	; 0x50
 800d46e:	d873      	bhi.n	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d470:	2b40      	cmp	r3, #64	; 0x40
 800d472:	d058      	beq.n	800d526 <HAL_TIM_ConfigClockSource+0x18a>
 800d474:	2b40      	cmp	r3, #64	; 0x40
 800d476:	d86f      	bhi.n	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d478:	2b30      	cmp	r3, #48	; 0x30
 800d47a:	d064      	beq.n	800d546 <HAL_TIM_ConfigClockSource+0x1aa>
 800d47c:	2b30      	cmp	r3, #48	; 0x30
 800d47e:	d86b      	bhi.n	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d480:	2b20      	cmp	r3, #32
 800d482:	d060      	beq.n	800d546 <HAL_TIM_ConfigClockSource+0x1aa>
 800d484:	2b20      	cmp	r3, #32
 800d486:	d867      	bhi.n	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d05c      	beq.n	800d546 <HAL_TIM_ConfigClockSource+0x1aa>
 800d48c:	2b10      	cmp	r3, #16
 800d48e:	d05a      	beq.n	800d546 <HAL_TIM_ConfigClockSource+0x1aa>
 800d490:	e062      	b.n	800d558 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6818      	ldr	r0, [r3, #0]
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	6899      	ldr	r1, [r3, #8]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	685a      	ldr	r2, [r3, #4]
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	f000 fdf7 	bl	800e094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d4b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	609a      	str	r2, [r3, #8]
      break;
 800d4be:	e04f      	b.n	800d560 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	6899      	ldr	r1, [r3, #8]
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	f000 fde0 	bl	800e094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	689a      	ldr	r2, [r3, #8]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4e2:	609a      	str	r2, [r3, #8]
      break;
 800d4e4:	e03c      	b.n	800d560 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6818      	ldr	r0, [r3, #0]
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	6859      	ldr	r1, [r3, #4]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	f000 fc9a 	bl	800de2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2150      	movs	r1, #80	; 0x50
 800d4fe:	4618      	mov	r0, r3
 800d500:	f000 fdaa 	bl	800e058 <TIM_ITRx_SetConfig>
      break;
 800d504:	e02c      	b.n	800d560 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6818      	ldr	r0, [r3, #0]
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	6859      	ldr	r1, [r3, #4]
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	461a      	mov	r2, r3
 800d514:	f000 fcf6 	bl	800df04 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2160      	movs	r1, #96	; 0x60
 800d51e:	4618      	mov	r0, r3
 800d520:	f000 fd9a 	bl	800e058 <TIM_ITRx_SetConfig>
      break;
 800d524:	e01c      	b.n	800d560 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	6859      	ldr	r1, [r3, #4]
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	461a      	mov	r2, r3
 800d534:	f000 fc7a 	bl	800de2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2140      	movs	r1, #64	; 0x40
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 fd8a 	bl	800e058 <TIM_ITRx_SetConfig>
      break;
 800d544:	e00c      	b.n	800d560 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4619      	mov	r1, r3
 800d550:	4610      	mov	r0, r2
 800d552:	f000 fd81 	bl	800e058 <TIM_ITRx_SetConfig>
      break;
 800d556:	e003      	b.n	800d560 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	73fb      	strb	r3, [r7, #15]
      break;
 800d55c:	e000      	b.n	800d560 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d55e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d570:	7bfb      	ldrb	r3, [r7, #15]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	ffceff88 	.word	0xffceff88
 800d580:	00100040 	.word	0x00100040
 800d584:	00100030 	.word	0x00100030
 800d588:	00100020 	.word	0x00100020

0800d58c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d596:	2300      	movs	r3, #0
 800d598:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b0c      	cmp	r3, #12
 800d59e:	d831      	bhi.n	800d604 <HAL_TIM_ReadCapturedValue+0x78>
 800d5a0:	a201      	add	r2, pc, #4	; (adr r2, 800d5a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 800d5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a6:	bf00      	nop
 800d5a8:	0800d5dd 	.word	0x0800d5dd
 800d5ac:	0800d605 	.word	0x0800d605
 800d5b0:	0800d605 	.word	0x0800d605
 800d5b4:	0800d605 	.word	0x0800d605
 800d5b8:	0800d5e7 	.word	0x0800d5e7
 800d5bc:	0800d605 	.word	0x0800d605
 800d5c0:	0800d605 	.word	0x0800d605
 800d5c4:	0800d605 	.word	0x0800d605
 800d5c8:	0800d5f1 	.word	0x0800d5f1
 800d5cc:	0800d605 	.word	0x0800d605
 800d5d0:	0800d605 	.word	0x0800d605
 800d5d4:	0800d605 	.word	0x0800d605
 800d5d8:	0800d5fb 	.word	0x0800d5fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e2:	60fb      	str	r3, [r7, #12]

      break;
 800d5e4:	e00f      	b.n	800d606 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ec:	60fb      	str	r3, [r7, #12]

      break;
 800d5ee:	e00a      	b.n	800d606 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f6:	60fb      	str	r3, [r7, #12]

      break;
 800d5f8:	e005      	b.n	800d606 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d600:	60fb      	str	r3, [r7, #12]

      break;
 800d602:	e000      	b.n	800d606 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800d604:	bf00      	nop
  }

  return tmpreg;
 800d606:	68fb      	ldr	r3, [r7, #12]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3714      	adds	r7, #20
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d61c:	bf00      	nop
 800d61e:	370c      	adds	r7, #12
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d630:	bf00      	nop
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	4a40      	ldr	r2, [pc, #256]	; (800d778 <TIM_Base_SetConfig+0x114>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d013      	beq.n	800d6a4 <TIM_Base_SetConfig+0x40>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d682:	d00f      	beq.n	800d6a4 <TIM_Base_SetConfig+0x40>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4a3d      	ldr	r2, [pc, #244]	; (800d77c <TIM_Base_SetConfig+0x118>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d00b      	beq.n	800d6a4 <TIM_Base_SetConfig+0x40>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4a3c      	ldr	r2, [pc, #240]	; (800d780 <TIM_Base_SetConfig+0x11c>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d007      	beq.n	800d6a4 <TIM_Base_SetConfig+0x40>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	4a3b      	ldr	r2, [pc, #236]	; (800d784 <TIM_Base_SetConfig+0x120>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d003      	beq.n	800d6a4 <TIM_Base_SetConfig+0x40>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4a3a      	ldr	r2, [pc, #232]	; (800d788 <TIM_Base_SetConfig+0x124>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d108      	bne.n	800d6b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a2f      	ldr	r2, [pc, #188]	; (800d778 <TIM_Base_SetConfig+0x114>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d01f      	beq.n	800d6fe <TIM_Base_SetConfig+0x9a>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6c4:	d01b      	beq.n	800d6fe <TIM_Base_SetConfig+0x9a>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a2c      	ldr	r2, [pc, #176]	; (800d77c <TIM_Base_SetConfig+0x118>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d017      	beq.n	800d6fe <TIM_Base_SetConfig+0x9a>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4a2b      	ldr	r2, [pc, #172]	; (800d780 <TIM_Base_SetConfig+0x11c>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d013      	beq.n	800d6fe <TIM_Base_SetConfig+0x9a>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4a2a      	ldr	r2, [pc, #168]	; (800d784 <TIM_Base_SetConfig+0x120>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d00f      	beq.n	800d6fe <TIM_Base_SetConfig+0x9a>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4a29      	ldr	r2, [pc, #164]	; (800d788 <TIM_Base_SetConfig+0x124>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d00b      	beq.n	800d6fe <TIM_Base_SetConfig+0x9a>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4a28      	ldr	r2, [pc, #160]	; (800d78c <TIM_Base_SetConfig+0x128>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d007      	beq.n	800d6fe <TIM_Base_SetConfig+0x9a>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	4a27      	ldr	r2, [pc, #156]	; (800d790 <TIM_Base_SetConfig+0x12c>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d003      	beq.n	800d6fe <TIM_Base_SetConfig+0x9a>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4a26      	ldr	r2, [pc, #152]	; (800d794 <TIM_Base_SetConfig+0x130>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d108      	bne.n	800d710 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	689a      	ldr	r2, [r3, #8]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4a10      	ldr	r2, [pc, #64]	; (800d778 <TIM_Base_SetConfig+0x114>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d00f      	beq.n	800d75c <TIM_Base_SetConfig+0xf8>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a12      	ldr	r2, [pc, #72]	; (800d788 <TIM_Base_SetConfig+0x124>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d00b      	beq.n	800d75c <TIM_Base_SetConfig+0xf8>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	4a11      	ldr	r2, [pc, #68]	; (800d78c <TIM_Base_SetConfig+0x128>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d007      	beq.n	800d75c <TIM_Base_SetConfig+0xf8>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4a10      	ldr	r2, [pc, #64]	; (800d790 <TIM_Base_SetConfig+0x12c>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d003      	beq.n	800d75c <TIM_Base_SetConfig+0xf8>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a0f      	ldr	r2, [pc, #60]	; (800d794 <TIM_Base_SetConfig+0x130>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d103      	bne.n	800d764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	691a      	ldr	r2, [r3, #16]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2201      	movs	r2, #1
 800d768:	615a      	str	r2, [r3, #20]
}
 800d76a:	bf00      	nop
 800d76c:	3714      	adds	r7, #20
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	40010000 	.word	0x40010000
 800d77c:	40000400 	.word	0x40000400
 800d780:	40000800 	.word	0x40000800
 800d784:	40000c00 	.word	0x40000c00
 800d788:	40010400 	.word	0x40010400
 800d78c:	40014000 	.word	0x40014000
 800d790:	40014400 	.word	0x40014400
 800d794:	40014800 	.word	0x40014800

0800d798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d798:	b480      	push	{r7}
 800d79a:	b087      	sub	sp, #28
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	f023 0201 	bic.w	r2, r3, #1
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	699b      	ldr	r3, [r3, #24]
 800d7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	4b37      	ldr	r3, [pc, #220]	; (800d8a0 <TIM_OC1_SetConfig+0x108>)
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f023 0303 	bic.w	r3, r3, #3
 800d7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	f023 0302 	bic.w	r3, r3, #2
 800d7e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	697a      	ldr	r2, [r7, #20]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	4a2d      	ldr	r2, [pc, #180]	; (800d8a4 <TIM_OC1_SetConfig+0x10c>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d00f      	beq.n	800d814 <TIM_OC1_SetConfig+0x7c>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4a2c      	ldr	r2, [pc, #176]	; (800d8a8 <TIM_OC1_SetConfig+0x110>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d00b      	beq.n	800d814 <TIM_OC1_SetConfig+0x7c>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4a2b      	ldr	r2, [pc, #172]	; (800d8ac <TIM_OC1_SetConfig+0x114>)
 800d800:	4293      	cmp	r3, r2
 800d802:	d007      	beq.n	800d814 <TIM_OC1_SetConfig+0x7c>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4a2a      	ldr	r2, [pc, #168]	; (800d8b0 <TIM_OC1_SetConfig+0x118>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d003      	beq.n	800d814 <TIM_OC1_SetConfig+0x7c>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a29      	ldr	r2, [pc, #164]	; (800d8b4 <TIM_OC1_SetConfig+0x11c>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d10c      	bne.n	800d82e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	f023 0308 	bic.w	r3, r3, #8
 800d81a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	4313      	orrs	r3, r2
 800d824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	f023 0304 	bic.w	r3, r3, #4
 800d82c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a1c      	ldr	r2, [pc, #112]	; (800d8a4 <TIM_OC1_SetConfig+0x10c>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d00f      	beq.n	800d856 <TIM_OC1_SetConfig+0xbe>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a1b      	ldr	r2, [pc, #108]	; (800d8a8 <TIM_OC1_SetConfig+0x110>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d00b      	beq.n	800d856 <TIM_OC1_SetConfig+0xbe>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a1a      	ldr	r2, [pc, #104]	; (800d8ac <TIM_OC1_SetConfig+0x114>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d007      	beq.n	800d856 <TIM_OC1_SetConfig+0xbe>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a19      	ldr	r2, [pc, #100]	; (800d8b0 <TIM_OC1_SetConfig+0x118>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d003      	beq.n	800d856 <TIM_OC1_SetConfig+0xbe>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a18      	ldr	r2, [pc, #96]	; (800d8b4 <TIM_OC1_SetConfig+0x11c>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d111      	bne.n	800d87a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d85c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	4313      	orrs	r3, r2
 800d86e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	699b      	ldr	r3, [r3, #24]
 800d874:	693a      	ldr	r2, [r7, #16]
 800d876:	4313      	orrs	r3, r2
 800d878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	693a      	ldr	r2, [r7, #16]
 800d87e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	685a      	ldr	r2, [r3, #4]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	697a      	ldr	r2, [r7, #20]
 800d892:	621a      	str	r2, [r3, #32]
}
 800d894:	bf00      	nop
 800d896:	371c      	adds	r7, #28
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	fffeff8f 	.word	0xfffeff8f
 800d8a4:	40010000 	.word	0x40010000
 800d8a8:	40010400 	.word	0x40010400
 800d8ac:	40014000 	.word	0x40014000
 800d8b0:	40014400 	.word	0x40014400
 800d8b4:	40014800 	.word	0x40014800

0800d8b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b087      	sub	sp, #28
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6a1b      	ldr	r3, [r3, #32]
 800d8c6:	f023 0210 	bic.w	r2, r3, #16
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	4b34      	ldr	r3, [pc, #208]	; (800d9b4 <TIM_OC2_SetConfig+0xfc>)
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	021b      	lsls	r3, r3, #8
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	f023 0320 	bic.w	r3, r3, #32
 800d902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	011b      	lsls	r3, r3, #4
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4a29      	ldr	r2, [pc, #164]	; (800d9b8 <TIM_OC2_SetConfig+0x100>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d003      	beq.n	800d920 <TIM_OC2_SetConfig+0x68>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	4a28      	ldr	r2, [pc, #160]	; (800d9bc <TIM_OC2_SetConfig+0x104>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d10d      	bne.n	800d93c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	011b      	lsls	r3, r3, #4
 800d92e:	697a      	ldr	r2, [r7, #20]
 800d930:	4313      	orrs	r3, r2
 800d932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d93a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4a1e      	ldr	r2, [pc, #120]	; (800d9b8 <TIM_OC2_SetConfig+0x100>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d00f      	beq.n	800d964 <TIM_OC2_SetConfig+0xac>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4a1d      	ldr	r2, [pc, #116]	; (800d9bc <TIM_OC2_SetConfig+0x104>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d00b      	beq.n	800d964 <TIM_OC2_SetConfig+0xac>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4a1c      	ldr	r2, [pc, #112]	; (800d9c0 <TIM_OC2_SetConfig+0x108>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d007      	beq.n	800d964 <TIM_OC2_SetConfig+0xac>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a1b      	ldr	r2, [pc, #108]	; (800d9c4 <TIM_OC2_SetConfig+0x10c>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d003      	beq.n	800d964 <TIM_OC2_SetConfig+0xac>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a1a      	ldr	r2, [pc, #104]	; (800d9c8 <TIM_OC2_SetConfig+0x110>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d113      	bne.n	800d98c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d96a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	695b      	ldr	r3, [r3, #20]
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	693a      	ldr	r2, [r7, #16]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	699b      	ldr	r3, [r3, #24]
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	693a      	ldr	r2, [r7, #16]
 800d988:	4313      	orrs	r3, r2
 800d98a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	621a      	str	r2, [r3, #32]
}
 800d9a6:	bf00      	nop
 800d9a8:	371c      	adds	r7, #28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	feff8fff 	.word	0xfeff8fff
 800d9b8:	40010000 	.word	0x40010000
 800d9bc:	40010400 	.word	0x40010400
 800d9c0:	40014000 	.word	0x40014000
 800d9c4:	40014400 	.word	0x40014400
 800d9c8:	40014800 	.word	0x40014800

0800d9cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a1b      	ldr	r3, [r3, #32]
 800d9da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a1b      	ldr	r3, [r3, #32]
 800d9e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	69db      	ldr	r3, [r3, #28]
 800d9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	4b33      	ldr	r3, [pc, #204]	; (800dac4 <TIM_OC3_SetConfig+0xf8>)
 800d9f8:	4013      	ands	r3, r2
 800d9fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f023 0303 	bic.w	r3, r3, #3
 800da02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	4313      	orrs	r3, r2
 800da0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	021b      	lsls	r3, r3, #8
 800da1c:	697a      	ldr	r2, [r7, #20]
 800da1e:	4313      	orrs	r3, r2
 800da20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4a28      	ldr	r2, [pc, #160]	; (800dac8 <TIM_OC3_SetConfig+0xfc>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d003      	beq.n	800da32 <TIM_OC3_SetConfig+0x66>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4a27      	ldr	r2, [pc, #156]	; (800dacc <TIM_OC3_SetConfig+0x100>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d10d      	bne.n	800da4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	021b      	lsls	r3, r3, #8
 800da40:	697a      	ldr	r2, [r7, #20]
 800da42:	4313      	orrs	r3, r2
 800da44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	4a1d      	ldr	r2, [pc, #116]	; (800dac8 <TIM_OC3_SetConfig+0xfc>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d00f      	beq.n	800da76 <TIM_OC3_SetConfig+0xaa>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	4a1c      	ldr	r2, [pc, #112]	; (800dacc <TIM_OC3_SetConfig+0x100>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d00b      	beq.n	800da76 <TIM_OC3_SetConfig+0xaa>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4a1b      	ldr	r2, [pc, #108]	; (800dad0 <TIM_OC3_SetConfig+0x104>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d007      	beq.n	800da76 <TIM_OC3_SetConfig+0xaa>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4a1a      	ldr	r2, [pc, #104]	; (800dad4 <TIM_OC3_SetConfig+0x108>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d003      	beq.n	800da76 <TIM_OC3_SetConfig+0xaa>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	4a19      	ldr	r2, [pc, #100]	; (800dad8 <TIM_OC3_SetConfig+0x10c>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d113      	bne.n	800da9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	695b      	ldr	r3, [r3, #20]
 800da8a:	011b      	lsls	r3, r3, #4
 800da8c:	693a      	ldr	r2, [r7, #16]
 800da8e:	4313      	orrs	r3, r2
 800da90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	699b      	ldr	r3, [r3, #24]
 800da96:	011b      	lsls	r3, r3, #4
 800da98:	693a      	ldr	r2, [r7, #16]
 800da9a:	4313      	orrs	r3, r2
 800da9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	693a      	ldr	r2, [r7, #16]
 800daa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	697a      	ldr	r2, [r7, #20]
 800dab6:	621a      	str	r2, [r3, #32]
}
 800dab8:	bf00      	nop
 800daba:	371c      	adds	r7, #28
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr
 800dac4:	fffeff8f 	.word	0xfffeff8f
 800dac8:	40010000 	.word	0x40010000
 800dacc:	40010400 	.word	0x40010400
 800dad0:	40014000 	.word	0x40014000
 800dad4:	40014400 	.word	0x40014400
 800dad8:	40014800 	.word	0x40014800

0800dadc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dadc:	b480      	push	{r7}
 800dade:	b087      	sub	sp, #28
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a1b      	ldr	r3, [r3, #32]
 800daea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6a1b      	ldr	r3, [r3, #32]
 800daf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	69db      	ldr	r3, [r3, #28]
 800db02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	4b24      	ldr	r3, [pc, #144]	; (800db98 <TIM_OC4_SetConfig+0xbc>)
 800db08:	4013      	ands	r3, r2
 800db0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	021b      	lsls	r3, r3, #8
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	4313      	orrs	r3, r2
 800db1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	031b      	lsls	r3, r3, #12
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	4313      	orrs	r3, r2
 800db32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4a19      	ldr	r2, [pc, #100]	; (800db9c <TIM_OC4_SetConfig+0xc0>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d00f      	beq.n	800db5c <TIM_OC4_SetConfig+0x80>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4a18      	ldr	r2, [pc, #96]	; (800dba0 <TIM_OC4_SetConfig+0xc4>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d00b      	beq.n	800db5c <TIM_OC4_SetConfig+0x80>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4a17      	ldr	r2, [pc, #92]	; (800dba4 <TIM_OC4_SetConfig+0xc8>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d007      	beq.n	800db5c <TIM_OC4_SetConfig+0x80>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a16      	ldr	r2, [pc, #88]	; (800dba8 <TIM_OC4_SetConfig+0xcc>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d003      	beq.n	800db5c <TIM_OC4_SetConfig+0x80>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a15      	ldr	r2, [pc, #84]	; (800dbac <TIM_OC4_SetConfig+0xd0>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d109      	bne.n	800db70 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	695b      	ldr	r3, [r3, #20]
 800db68:	019b      	lsls	r3, r3, #6
 800db6a:	697a      	ldr	r2, [r7, #20]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	697a      	ldr	r2, [r7, #20]
 800db74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	685a      	ldr	r2, [r3, #4]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	693a      	ldr	r2, [r7, #16]
 800db88:	621a      	str	r2, [r3, #32]
}
 800db8a:	bf00      	nop
 800db8c:	371c      	adds	r7, #28
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	feff8fff 	.word	0xfeff8fff
 800db9c:	40010000 	.word	0x40010000
 800dba0:	40010400 	.word	0x40010400
 800dba4:	40014000 	.word	0x40014000
 800dba8:	40014400 	.word	0x40014400
 800dbac:	40014800 	.word	0x40014800

0800dbb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a1b      	ldr	r3, [r3, #32]
 800dbbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a1b      	ldr	r3, [r3, #32]
 800dbca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	4b21      	ldr	r3, [pc, #132]	; (800dc60 <TIM_OC5_SetConfig+0xb0>)
 800dbdc:	4013      	ands	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dbf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	041b      	lsls	r3, r3, #16
 800dbf8:	693a      	ldr	r2, [r7, #16]
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a18      	ldr	r2, [pc, #96]	; (800dc64 <TIM_OC5_SetConfig+0xb4>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d00f      	beq.n	800dc26 <TIM_OC5_SetConfig+0x76>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a17      	ldr	r2, [pc, #92]	; (800dc68 <TIM_OC5_SetConfig+0xb8>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d00b      	beq.n	800dc26 <TIM_OC5_SetConfig+0x76>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4a16      	ldr	r2, [pc, #88]	; (800dc6c <TIM_OC5_SetConfig+0xbc>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d007      	beq.n	800dc26 <TIM_OC5_SetConfig+0x76>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4a15      	ldr	r2, [pc, #84]	; (800dc70 <TIM_OC5_SetConfig+0xc0>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d003      	beq.n	800dc26 <TIM_OC5_SetConfig+0x76>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a14      	ldr	r2, [pc, #80]	; (800dc74 <TIM_OC5_SetConfig+0xc4>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d109      	bne.n	800dc3a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	695b      	ldr	r3, [r3, #20]
 800dc32:	021b      	lsls	r3, r3, #8
 800dc34:	697a      	ldr	r2, [r7, #20]
 800dc36:	4313      	orrs	r3, r2
 800dc38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	697a      	ldr	r2, [r7, #20]
 800dc3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	685a      	ldr	r2, [r3, #4]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	693a      	ldr	r2, [r7, #16]
 800dc52:	621a      	str	r2, [r3, #32]
}
 800dc54:	bf00      	nop
 800dc56:	371c      	adds	r7, #28
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	fffeff8f 	.word	0xfffeff8f
 800dc64:	40010000 	.word	0x40010000
 800dc68:	40010400 	.word	0x40010400
 800dc6c:	40014000 	.word	0x40014000
 800dc70:	40014400 	.word	0x40014400
 800dc74:	40014800 	.word	0x40014800

0800dc78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a1b      	ldr	r3, [r3, #32]
 800dc86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a1b      	ldr	r3, [r3, #32]
 800dc92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	4b22      	ldr	r3, [pc, #136]	; (800dd2c <TIM_OC6_SetConfig+0xb4>)
 800dca4:	4013      	ands	r3, r2
 800dca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	021b      	lsls	r3, r3, #8
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dcba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	051b      	lsls	r3, r3, #20
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a19      	ldr	r2, [pc, #100]	; (800dd30 <TIM_OC6_SetConfig+0xb8>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d00f      	beq.n	800dcf0 <TIM_OC6_SetConfig+0x78>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4a18      	ldr	r2, [pc, #96]	; (800dd34 <TIM_OC6_SetConfig+0xbc>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d00b      	beq.n	800dcf0 <TIM_OC6_SetConfig+0x78>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a17      	ldr	r2, [pc, #92]	; (800dd38 <TIM_OC6_SetConfig+0xc0>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d007      	beq.n	800dcf0 <TIM_OC6_SetConfig+0x78>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a16      	ldr	r2, [pc, #88]	; (800dd3c <TIM_OC6_SetConfig+0xc4>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d003      	beq.n	800dcf0 <TIM_OC6_SetConfig+0x78>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a15      	ldr	r2, [pc, #84]	; (800dd40 <TIM_OC6_SetConfig+0xc8>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d109      	bne.n	800dd04 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dcf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	695b      	ldr	r3, [r3, #20]
 800dcfc:	029b      	lsls	r3, r3, #10
 800dcfe:	697a      	ldr	r2, [r7, #20]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	697a      	ldr	r2, [r7, #20]
 800dd08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	621a      	str	r2, [r3, #32]
}
 800dd1e:	bf00      	nop
 800dd20:	371c      	adds	r7, #28
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	feff8fff 	.word	0xfeff8fff
 800dd30:	40010000 	.word	0x40010000
 800dd34:	40010400 	.word	0x40010400
 800dd38:	40014000 	.word	0x40014000
 800dd3c:	40014400 	.word	0x40014400
 800dd40:	40014800 	.word	0x40014800

0800dd44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b087      	sub	sp, #28
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
 800dd50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	f023 0201 	bic.w	r2, r3, #1
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6a1b      	ldr	r3, [r3, #32]
 800dd68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	4a28      	ldr	r2, [pc, #160]	; (800de10 <TIM_TI1_SetConfig+0xcc>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d01b      	beq.n	800ddaa <TIM_TI1_SetConfig+0x66>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd78:	d017      	beq.n	800ddaa <TIM_TI1_SetConfig+0x66>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	4a25      	ldr	r2, [pc, #148]	; (800de14 <TIM_TI1_SetConfig+0xd0>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d013      	beq.n	800ddaa <TIM_TI1_SetConfig+0x66>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	4a24      	ldr	r2, [pc, #144]	; (800de18 <TIM_TI1_SetConfig+0xd4>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d00f      	beq.n	800ddaa <TIM_TI1_SetConfig+0x66>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	4a23      	ldr	r2, [pc, #140]	; (800de1c <TIM_TI1_SetConfig+0xd8>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d00b      	beq.n	800ddaa <TIM_TI1_SetConfig+0x66>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	4a22      	ldr	r2, [pc, #136]	; (800de20 <TIM_TI1_SetConfig+0xdc>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d007      	beq.n	800ddaa <TIM_TI1_SetConfig+0x66>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	4a21      	ldr	r2, [pc, #132]	; (800de24 <TIM_TI1_SetConfig+0xe0>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d003      	beq.n	800ddaa <TIM_TI1_SetConfig+0x66>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	4a20      	ldr	r2, [pc, #128]	; (800de28 <TIM_TI1_SetConfig+0xe4>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d101      	bne.n	800ddae <TIM_TI1_SetConfig+0x6a>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e000      	b.n	800ddb0 <TIM_TI1_SetConfig+0x6c>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d008      	beq.n	800ddc6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	f023 0303 	bic.w	r3, r3, #3
 800ddba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	617b      	str	r3, [r7, #20]
 800ddc4:	e003      	b.n	800ddce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	f043 0301 	orr.w	r3, r3, #1
 800ddcc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ddd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	011b      	lsls	r3, r3, #4
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	697a      	ldr	r2, [r7, #20]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	f023 030a 	bic.w	r3, r3, #10
 800dde8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	f003 030a 	and.w	r3, r3, #10
 800ddf0:	693a      	ldr	r2, [r7, #16]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	697a      	ldr	r2, [r7, #20]
 800ddfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	693a      	ldr	r2, [r7, #16]
 800de00:	621a      	str	r2, [r3, #32]
}
 800de02:	bf00      	nop
 800de04:	371c      	adds	r7, #28
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	40010000 	.word	0x40010000
 800de14:	40000400 	.word	0x40000400
 800de18:	40000800 	.word	0x40000800
 800de1c:	40000c00 	.word	0x40000c00
 800de20:	40010400 	.word	0x40010400
 800de24:	40001800 	.word	0x40001800
 800de28:	40014000 	.word	0x40014000

0800de2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b087      	sub	sp, #28
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6a1b      	ldr	r3, [r3, #32]
 800de3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	6a1b      	ldr	r3, [r3, #32]
 800de42:	f023 0201 	bic.w	r2, r3, #1
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800de56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	011b      	lsls	r3, r3, #4
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	4313      	orrs	r3, r2
 800de60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	f023 030a 	bic.w	r3, r3, #10
 800de68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	4313      	orrs	r3, r2
 800de70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	697a      	ldr	r2, [r7, #20]
 800de7c:	621a      	str	r2, [r3, #32]
}
 800de7e:	bf00      	nop
 800de80:	371c      	adds	r7, #28
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr

0800de8a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800de8a:	b480      	push	{r7}
 800de8c:	b087      	sub	sp, #28
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	f023 0210 	bic.w	r2, r3, #16
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	6a1b      	ldr	r3, [r3, #32]
 800deae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800deb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	021b      	lsls	r3, r3, #8
 800debc:	697a      	ldr	r2, [r7, #20]
 800debe:	4313      	orrs	r3, r2
 800dec0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	031b      	lsls	r3, r3, #12
 800dece:	b29b      	uxth	r3, r3
 800ded0:	697a      	ldr	r2, [r7, #20]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dedc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	011b      	lsls	r3, r3, #4
 800dee2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dee6:	693a      	ldr	r2, [r7, #16]
 800dee8:	4313      	orrs	r3, r2
 800deea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	693a      	ldr	r2, [r7, #16]
 800def6:	621a      	str	r2, [r3, #32]
}
 800def8:	bf00      	nop
 800defa:	371c      	adds	r7, #28
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df04:	b480      	push	{r7}
 800df06:	b087      	sub	sp, #28
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6a1b      	ldr	r3, [r3, #32]
 800df14:	f023 0210 	bic.w	r2, r3, #16
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	031b      	lsls	r3, r3, #12
 800df34:	697a      	ldr	r2, [r7, #20]
 800df36:	4313      	orrs	r3, r2
 800df38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	011b      	lsls	r3, r3, #4
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	4313      	orrs	r3, r2
 800df4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	697a      	ldr	r2, [r7, #20]
 800df50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	693a      	ldr	r2, [r7, #16]
 800df56:	621a      	str	r2, [r3, #32]
}
 800df58:	bf00      	nop
 800df5a:	371c      	adds	r7, #28
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800df64:	b480      	push	{r7}
 800df66:	b087      	sub	sp, #28
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
 800df70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6a1b      	ldr	r3, [r3, #32]
 800df76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	69db      	ldr	r3, [r3, #28]
 800df82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6a1b      	ldr	r3, [r3, #32]
 800df88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	f023 0303 	bic.w	r3, r3, #3
 800df90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4313      	orrs	r3, r2
 800df98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dfa0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	011b      	lsls	r3, r3, #4
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	697a      	ldr	r2, [r7, #20]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800dfb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	021b      	lsls	r3, r3, #8
 800dfba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	697a      	ldr	r2, [r7, #20]
 800dfc8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	621a      	str	r2, [r3, #32]
}
 800dfd0:	bf00      	nop
 800dfd2:	371c      	adds	r7, #28
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b087      	sub	sp, #28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6a1b      	ldr	r3, [r3, #32]
 800dfee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	69db      	ldr	r3, [r3, #28]
 800dffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6a1b      	ldr	r3, [r3, #32]
 800e000:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e008:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	021b      	lsls	r3, r3, #8
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	4313      	orrs	r3, r2
 800e012:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e01a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	031b      	lsls	r3, r3, #12
 800e020:	b29b      	uxth	r3, r3
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	4313      	orrs	r3, r2
 800e026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e02e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	031b      	lsls	r3, r3, #12
 800e034:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e038:	693a      	ldr	r2, [r7, #16]
 800e03a:	4313      	orrs	r3, r2
 800e03c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	697a      	ldr	r2, [r7, #20]
 800e042:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	621a      	str	r2, [r3, #32]
}
 800e04a:	bf00      	nop
 800e04c:	371c      	adds	r7, #28
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr
	...

0800e058 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	4b09      	ldr	r3, [pc, #36]	; (800e090 <TIM_ITRx_SetConfig+0x38>)
 800e06c:	4013      	ands	r3, r2
 800e06e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e070:	683a      	ldr	r2, [r7, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	4313      	orrs	r3, r2
 800e076:	f043 0307 	orr.w	r3, r3, #7
 800e07a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	609a      	str	r2, [r3, #8]
}
 800e082:	bf00      	nop
 800e084:	3714      	adds	r7, #20
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	ffcfff8f 	.word	0xffcfff8f

0800e094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e094:	b480      	push	{r7}
 800e096:	b087      	sub	sp, #28
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
 800e0a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e0ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	021a      	lsls	r2, r3, #8
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	431a      	orrs	r2, r3
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	697a      	ldr	r2, [r7, #20]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	609a      	str	r2, [r3, #8]
}
 800e0c8:	bf00      	nop
 800e0ca:	371c      	adds	r7, #28
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	f003 031f 	and.w	r3, r3, #31
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6a1a      	ldr	r2, [r3, #32]
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	43db      	mvns	r3, r3
 800e0f6:	401a      	ands	r2, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6a1a      	ldr	r2, [r3, #32]
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	f003 031f 	and.w	r3, r3, #31
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	fa01 f303 	lsl.w	r3, r1, r3
 800e10c:	431a      	orrs	r2, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	621a      	str	r2, [r3, #32]
}
 800e112:	bf00      	nop
 800e114:	371c      	adds	r7, #28
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
	...

0800e120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e130:	2b01      	cmp	r3, #1
 800e132:	d101      	bne.n	800e138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e134:	2302      	movs	r3, #2
 800e136:	e06d      	b.n	800e214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2201      	movs	r2, #1
 800e13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2202      	movs	r2, #2
 800e144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a30      	ldr	r2, [pc, #192]	; (800e220 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d004      	beq.n	800e16c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a2f      	ldr	r2, [pc, #188]	; (800e224 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d108      	bne.n	800e17e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e172:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	4313      	orrs	r3, r2
 800e17c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e184:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	4313      	orrs	r3, r2
 800e18e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	68fa      	ldr	r2, [r7, #12]
 800e196:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a20      	ldr	r2, [pc, #128]	; (800e220 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d022      	beq.n	800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1aa:	d01d      	beq.n	800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a1d      	ldr	r2, [pc, #116]	; (800e228 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d018      	beq.n	800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4a1c      	ldr	r2, [pc, #112]	; (800e22c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d013      	beq.n	800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a1a      	ldr	r2, [pc, #104]	; (800e230 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d00e      	beq.n	800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a15      	ldr	r2, [pc, #84]	; (800e224 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d009      	beq.n	800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a16      	ldr	r2, [pc, #88]	; (800e234 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d004      	beq.n	800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a15      	ldr	r2, [pc, #84]	; (800e238 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d10c      	bne.n	800e202 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	68ba      	ldr	r2, [r7, #8]
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	68ba      	ldr	r2, [r7, #8]
 800e200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2201      	movs	r2, #1
 800e206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	40010000 	.word	0x40010000
 800e224:	40010400 	.word	0x40010400
 800e228:	40000400 	.word	0x40000400
 800e22c:	40000800 	.word	0x40000800
 800e230:	40000c00 	.word	0x40000c00
 800e234:	40001800 	.word	0x40001800
 800e238:	40014000 	.word	0x40014000

0800e23c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e244:	bf00      	nop
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e250:	b480      	push	{r7}
 800e252:	b083      	sub	sp, #12
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e258:	bf00      	nop
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e26c:	bf00      	nop
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d101      	bne.n	800e28a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800e286:	2301      	movs	r3, #1
 800e288:	e04a      	b.n	800e320 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e290:	2b00      	cmp	r3, #0
 800e292:	d106      	bne.n	800e2a2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7f4 f879 	bl	8002394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2224      	movs	r2, #36	; 0x24
 800e2a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f022 0201 	bic.w	r2, r2, #1
 800e2b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 fcfa 	bl	800ecb4 <UART_SetConfig>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d101      	bne.n	800e2ca <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e02a      	b.n	800e320 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d002      	beq.n	800e2d8 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f001 fa56 	bl	800f784 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	685a      	ldr	r2, [r3, #4]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e2e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	689a      	ldr	r2, [r3, #8]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800e2f6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	689a      	ldr	r2, [r3, #8]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f042 0208 	orr.w	r2, r2, #8
 800e306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f042 0201 	orr.w	r2, r2, #1
 800e316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f001 fad5 	bl	800f8c8 <UART_CheckIdleState>
 800e31e:	4603      	mov	r3, r0
}
 800e320:	4618      	mov	r0, r3
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e328:	b480      	push	{r7}
 800e32a:	b091      	sub	sp, #68	; 0x44
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	4613      	mov	r3, r2
 800e334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e33c:	2b20      	cmp	r3, #32
 800e33e:	f040 808c 	bne.w	800e45a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d002      	beq.n	800e34e <HAL_UART_Transmit_IT+0x26>
 800e348:	88fb      	ldrh	r3, [r7, #6]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d101      	bne.n	800e352 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800e34e:	2301      	movs	r3, #1
 800e350:	e084      	b.n	800e45c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d101      	bne.n	800e360 <HAL_UART_Transmit_IT+0x38>
 800e35c:	2302      	movs	r3, #2
 800e35e:	e07d      	b.n	800e45c <HAL_UART_Transmit_IT+0x134>
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	88fa      	ldrh	r2, [r7, #6]
 800e372:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	88fa      	ldrh	r2, [r7, #6]
 800e37a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2200      	movs	r2, #0
 800e382:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2221      	movs	r2, #33	; 0x21
 800e390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e39c:	d12e      	bne.n	800e3fc <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	689b      	ldr	r3, [r3, #8]
 800e3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3a6:	d107      	bne.n	800e3b8 <HAL_UART_Transmit_IT+0x90>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d103      	bne.n	800e3b8 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	4a2d      	ldr	r2, [pc, #180]	; (800e468 <HAL_UART_Transmit_IT+0x140>)
 800e3b4:	675a      	str	r2, [r3, #116]	; 0x74
 800e3b6:	e002      	b.n	800e3be <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	4a2c      	ldr	r2, [pc, #176]	; (800e46c <HAL_UART_Transmit_IT+0x144>)
 800e3bc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3308      	adds	r3, #8
 800e3cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d0:	e853 3f00 	ldrex	r3, [r3]
 800e3d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e3dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3308      	adds	r3, #8
 800e3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3e6:	637a      	str	r2, [r7, #52]	; 0x34
 800e3e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3ee:	e841 2300 	strex	r3, r2, [r1]
 800e3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1e5      	bne.n	800e3c6 <HAL_UART_Transmit_IT+0x9e>
 800e3fa:	e02c      	b.n	800e456 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e404:	d107      	bne.n	800e416 <HAL_UART_Transmit_IT+0xee>
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	691b      	ldr	r3, [r3, #16]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d103      	bne.n	800e416 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	4a17      	ldr	r2, [pc, #92]	; (800e470 <HAL_UART_Transmit_IT+0x148>)
 800e412:	675a      	str	r2, [r3, #116]	; 0x74
 800e414:	e002      	b.n	800e41c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	4a16      	ldr	r2, [pc, #88]	; (800e474 <HAL_UART_Transmit_IT+0x14c>)
 800e41a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	e853 3f00 	ldrex	r3, [r3]
 800e430:	613b      	str	r3, [r7, #16]
   return(result);
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	461a      	mov	r2, r3
 800e440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e442:	623b      	str	r3, [r7, #32]
 800e444:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e446:	69f9      	ldr	r1, [r7, #28]
 800e448:	6a3a      	ldr	r2, [r7, #32]
 800e44a:	e841 2300 	strex	r3, r2, [r1]
 800e44e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1e6      	bne.n	800e424 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800e456:	2300      	movs	r3, #0
 800e458:	e000      	b.n	800e45c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800e45a:	2302      	movs	r3, #2
  }
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3744      	adds	r7, #68	; 0x44
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr
 800e468:	080101f1 	.word	0x080101f1
 800e46c:	08010111 	.word	0x08010111
 800e470:	0801004f 	.word	0x0801004f
 800e474:	0800ff97 	.word	0x0800ff97

0800e478 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b08a      	sub	sp, #40	; 0x28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	4613      	mov	r3, r2
 800e484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e48c:	2b20      	cmp	r3, #32
 800e48e:	d142      	bne.n	800e516 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d002      	beq.n	800e49c <HAL_UART_Receive_DMA+0x24>
 800e496:	88fb      	ldrh	r3, [r7, #6]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d101      	bne.n	800e4a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e49c:	2301      	movs	r3, #1
 800e49e:	e03b      	b.n	800e518 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d101      	bne.n	800e4ae <HAL_UART_Receive_DMA+0x36>
 800e4aa:	2302      	movs	r3, #2
 800e4ac:	e034      	b.n	800e518 <HAL_UART_Receive_DMA+0xa0>
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a17      	ldr	r2, [pc, #92]	; (800e520 <HAL_UART_Receive_DMA+0xa8>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d01f      	beq.n	800e506 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d018      	beq.n	800e506 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	e853 3f00 	ldrex	r3, [r3]
 800e4e0:	613b      	str	r3, [r7, #16]
   return(result);
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	623b      	str	r3, [r7, #32]
 800e4f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f6:	69f9      	ldr	r1, [r7, #28]
 800e4f8:	6a3a      	ldr	r2, [r7, #32]
 800e4fa:	e841 2300 	strex	r3, r2, [r1]
 800e4fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1e6      	bne.n	800e4d4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e506:	88fb      	ldrh	r3, [r7, #6]
 800e508:	461a      	mov	r2, r3
 800e50a:	68b9      	ldr	r1, [r7, #8]
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f001 faef 	bl	800faf0 <UART_Start_Receive_DMA>
 800e512:	4603      	mov	r3, r0
 800e514:	e000      	b.n	800e518 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e516:	2302      	movs	r3, #2
  }
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3728      	adds	r7, #40	; 0x28
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	58000c00 	.word	0x58000c00

0800e524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b0ba      	sub	sp, #232	; 0xe8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	69db      	ldr	r3, [r3, #28]
 800e532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e54a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e54e:	f640 030f 	movw	r3, #2063	; 0x80f
 800e552:	4013      	ands	r3, r2
 800e554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d11b      	bne.n	800e598 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e564:	f003 0320 	and.w	r3, r3, #32
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d015      	beq.n	800e598 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e56c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e570:	f003 0320 	and.w	r3, r3, #32
 800e574:	2b00      	cmp	r3, #0
 800e576:	d105      	bne.n	800e584 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e57c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e580:	2b00      	cmp	r3, #0
 800e582:	d009      	beq.n	800e598 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f000 835a 	beq.w	800ec42 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	4798      	blx	r3
      }
      return;
 800e596:	e354      	b.n	800ec42 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f000 811f 	beq.w	800e7e0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e5a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e5a6:	4b8b      	ldr	r3, [pc, #556]	; (800e7d4 <HAL_UART_IRQHandler+0x2b0>)
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d106      	bne.n	800e5bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e5ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e5b2:	4b89      	ldr	r3, [pc, #548]	; (800e7d8 <HAL_UART_IRQHandler+0x2b4>)
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f000 8112 	beq.w	800e7e0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5c0:	f003 0301 	and.w	r3, r3, #1
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d011      	beq.n	800e5ec <HAL_UART_IRQHandler+0xc8>
 800e5c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00b      	beq.n	800e5ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2201      	movs	r2, #1
 800e5da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5e2:	f043 0201 	orr.w	r2, r3, #1
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5f0:	f003 0302 	and.w	r3, r3, #2
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d011      	beq.n	800e61c <HAL_UART_IRQHandler+0xf8>
 800e5f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5fc:	f003 0301 	and.w	r3, r3, #1
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00b      	beq.n	800e61c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2202      	movs	r2, #2
 800e60a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e612:	f043 0204 	orr.w	r2, r3, #4
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e61c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e620:	f003 0304 	and.w	r3, r3, #4
 800e624:	2b00      	cmp	r3, #0
 800e626:	d011      	beq.n	800e64c <HAL_UART_IRQHandler+0x128>
 800e628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e62c:	f003 0301 	and.w	r3, r3, #1
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00b      	beq.n	800e64c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2204      	movs	r2, #4
 800e63a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e642:	f043 0202 	orr.w	r2, r3, #2
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e64c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e650:	f003 0308 	and.w	r3, r3, #8
 800e654:	2b00      	cmp	r3, #0
 800e656:	d017      	beq.n	800e688 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e65c:	f003 0320 	and.w	r3, r3, #32
 800e660:	2b00      	cmp	r3, #0
 800e662:	d105      	bne.n	800e670 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e664:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e668:	4b5a      	ldr	r3, [pc, #360]	; (800e7d4 <HAL_UART_IRQHandler+0x2b0>)
 800e66a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00b      	beq.n	800e688 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2208      	movs	r2, #8
 800e676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e67e:	f043 0208 	orr.w	r2, r3, #8
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e68c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e690:	2b00      	cmp	r3, #0
 800e692:	d012      	beq.n	800e6ba <HAL_UART_IRQHandler+0x196>
 800e694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00c      	beq.n	800e6ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6b0:	f043 0220 	orr.w	r2, r3, #32
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f000 82c0 	beq.w	800ec46 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6ca:	f003 0320 	and.w	r3, r3, #32
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d013      	beq.n	800e6fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e6d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6d6:	f003 0320 	and.w	r3, r3, #32
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d105      	bne.n	800e6ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e6de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d007      	beq.n	800e6fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d003      	beq.n	800e6fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	689b      	ldr	r3, [r3, #8]
 800e70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e70e:	2b40      	cmp	r3, #64	; 0x40
 800e710:	d005      	beq.n	800e71e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e716:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d04f      	beq.n	800e7be <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f001 fad0 	bl	800fcc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	689b      	ldr	r3, [r3, #8]
 800e72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e72e:	2b40      	cmp	r3, #64	; 0x40
 800e730:	d141      	bne.n	800e7b6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3308      	adds	r3, #8
 800e738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e740:	e853 3f00 	ldrex	r3, [r3]
 800e744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e74c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	3308      	adds	r3, #8
 800e75a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e75e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e76a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e76e:	e841 2300 	strex	r3, r2, [r1]
 800e772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1d9      	bne.n	800e732 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e782:	2b00      	cmp	r3, #0
 800e784:	d013      	beq.n	800e7ae <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e78a:	4a14      	ldr	r2, [pc, #80]	; (800e7dc <HAL_UART_IRQHandler+0x2b8>)
 800e78c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e792:	4618      	mov	r0, r3
 800e794:	f7f7 f9a4 	bl	8005ae0 <HAL_DMA_Abort_IT>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d017      	beq.n	800e7ce <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ac:	e00f      	b.n	800e7ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 fa6a 	bl	800ec88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7b4:	e00b      	b.n	800e7ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 fa66 	bl	800ec88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7bc:	e007      	b.n	800e7ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fa62 	bl	800ec88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e7cc:	e23b      	b.n	800ec46 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ce:	bf00      	nop
    return;
 800e7d0:	e239      	b.n	800ec46 <HAL_UART_IRQHandler+0x722>
 800e7d2:	bf00      	nop
 800e7d4:	10000001 	.word	0x10000001
 800e7d8:	04000120 	.word	0x04000120
 800e7dc:	0800ff6b 	.word	0x0800ff6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	f040 81ce 	bne.w	800eb86 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e7ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7ee:	f003 0310 	and.w	r3, r3, #16
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	f000 81c7 	beq.w	800eb86 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7fc:	f003 0310 	and.w	r3, r3, #16
 800e800:	2b00      	cmp	r3, #0
 800e802:	f000 81c0 	beq.w	800eb86 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2210      	movs	r2, #16
 800e80c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e818:	2b40      	cmp	r3, #64	; 0x40
 800e81a:	f040 813b 	bne.w	800ea94 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a8b      	ldr	r2, [pc, #556]	; (800ea54 <HAL_UART_IRQHandler+0x530>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d059      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a89      	ldr	r2, [pc, #548]	; (800ea58 <HAL_UART_IRQHandler+0x534>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d053      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a87      	ldr	r2, [pc, #540]	; (800ea5c <HAL_UART_IRQHandler+0x538>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d04d      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a85      	ldr	r2, [pc, #532]	; (800ea60 <HAL_UART_IRQHandler+0x53c>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d047      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a83      	ldr	r2, [pc, #524]	; (800ea64 <HAL_UART_IRQHandler+0x540>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d041      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a81      	ldr	r2, [pc, #516]	; (800ea68 <HAL_UART_IRQHandler+0x544>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d03b      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a7f      	ldr	r2, [pc, #508]	; (800ea6c <HAL_UART_IRQHandler+0x548>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d035      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a7d      	ldr	r2, [pc, #500]	; (800ea70 <HAL_UART_IRQHandler+0x54c>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d02f      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a7b      	ldr	r2, [pc, #492]	; (800ea74 <HAL_UART_IRQHandler+0x550>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d029      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a79      	ldr	r2, [pc, #484]	; (800ea78 <HAL_UART_IRQHandler+0x554>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d023      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a77      	ldr	r2, [pc, #476]	; (800ea7c <HAL_UART_IRQHandler+0x558>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d01d      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a75      	ldr	r2, [pc, #468]	; (800ea80 <HAL_UART_IRQHandler+0x55c>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d017      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a73      	ldr	r2, [pc, #460]	; (800ea84 <HAL_UART_IRQHandler+0x560>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d011      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a71      	ldr	r2, [pc, #452]	; (800ea88 <HAL_UART_IRQHandler+0x564>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d00b      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a6f      	ldr	r2, [pc, #444]	; (800ea8c <HAL_UART_IRQHandler+0x568>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d005      	beq.n	800e8de <HAL_UART_IRQHandler+0x3ba>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a6d      	ldr	r2, [pc, #436]	; (800ea90 <HAL_UART_IRQHandler+0x56c>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d105      	bne.n	800e8ea <HAL_UART_IRQHandler+0x3c6>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	e004      	b.n	800e8f4 <HAL_UART_IRQHandler+0x3d0>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e8f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	f000 81a4 	beq.w	800ec4a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e908:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e90c:	429a      	cmp	r2, r3
 800e90e:	f080 819c 	bcs.w	800ec4a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e918:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e920:	69db      	ldr	r3, [r3, #28]
 800e922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e926:	f000 8086 	beq.w	800ea36 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e936:	e853 3f00 	ldrex	r3, [r3]
 800e93a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e93e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e946:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	461a      	mov	r2, r3
 800e950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e958:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e960:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e964:	e841 2300 	strex	r3, r2, [r1]
 800e968:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e96c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1da      	bne.n	800e92a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	3308      	adds	r3, #8
 800e97a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e97e:	e853 3f00 	ldrex	r3, [r3]
 800e982:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e986:	f023 0301 	bic.w	r3, r3, #1
 800e98a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3308      	adds	r3, #8
 800e994:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e998:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e99c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e9a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e9a4:	e841 2300 	strex	r3, r2, [r1]
 800e9a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e9aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1e1      	bne.n	800e974 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9ba:	e853 3f00 	ldrex	r3, [r3]
 800e9be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e9c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	3308      	adds	r3, #8
 800e9d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e9d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e9d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e9da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e9dc:	e841 2300 	strex	r3, r2, [r1]
 800e9e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e9e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1e3      	bne.n	800e9b0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2220      	movs	r2, #32
 800e9ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9fe:	e853 3f00 	ldrex	r3, [r3]
 800ea02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea06:	f023 0310 	bic.w	r3, r3, #16
 800ea0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea18:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea20:	e841 2300 	strex	r3, r2, [r1]
 800ea24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1e4      	bne.n	800e9f6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7f6 fd37 	bl	80054a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	1ad3      	subs	r3, r2, r3
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f926 	bl	800ec9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea50:	e0fb      	b.n	800ec4a <HAL_UART_IRQHandler+0x726>
 800ea52:	bf00      	nop
 800ea54:	40020010 	.word	0x40020010
 800ea58:	40020028 	.word	0x40020028
 800ea5c:	40020040 	.word	0x40020040
 800ea60:	40020058 	.word	0x40020058
 800ea64:	40020070 	.word	0x40020070
 800ea68:	40020088 	.word	0x40020088
 800ea6c:	400200a0 	.word	0x400200a0
 800ea70:	400200b8 	.word	0x400200b8
 800ea74:	40020410 	.word	0x40020410
 800ea78:	40020428 	.word	0x40020428
 800ea7c:	40020440 	.word	0x40020440
 800ea80:	40020458 	.word	0x40020458
 800ea84:	40020470 	.word	0x40020470
 800ea88:	40020488 	.word	0x40020488
 800ea8c:	400204a0 	.word	0x400204a0
 800ea90:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f000 80cc 	beq.w	800ec4e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800eab6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f000 80c7 	beq.w	800ec4e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac8:	e853 3f00 	ldrex	r3, [r3]
 800eacc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ead4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	461a      	mov	r2, r3
 800eade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eae2:	647b      	str	r3, [r7, #68]	; 0x44
 800eae4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaea:	e841 2300 	strex	r3, r2, [r1]
 800eaee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eaf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1e4      	bne.n	800eac0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	3308      	adds	r3, #8
 800eafc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb00:	e853 3f00 	ldrex	r3, [r3]
 800eb04:	623b      	str	r3, [r7, #32]
   return(result);
 800eb06:	6a3a      	ldr	r2, [r7, #32]
 800eb08:	4b54      	ldr	r3, [pc, #336]	; (800ec5c <HAL_UART_IRQHandler+0x738>)
 800eb0a:	4013      	ands	r3, r2
 800eb0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3308      	adds	r3, #8
 800eb16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800eb1a:	633a      	str	r2, [r7, #48]	; 0x30
 800eb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb22:	e841 2300 	strex	r3, r2, [r1]
 800eb26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1e3      	bne.n	800eaf6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2220      	movs	r2, #32
 800eb32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	e853 3f00 	ldrex	r3, [r3]
 800eb4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f023 0310 	bic.w	r3, r3, #16
 800eb56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eb64:	61fb      	str	r3, [r7, #28]
 800eb66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb68:	69b9      	ldr	r1, [r7, #24]
 800eb6a:	69fa      	ldr	r2, [r7, #28]
 800eb6c:	e841 2300 	strex	r3, r2, [r1]
 800eb70:	617b      	str	r3, [r7, #20]
   return(result);
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d1e4      	bne.n	800eb42 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eb78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 f88c 	bl	800ec9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb84:	e063      	b.n	800ec4e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eb86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00e      	beq.n	800ebb0 <HAL_UART_IRQHandler+0x68c>
 800eb92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d008      	beq.n	800ebb0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f001 fbc1 	bl	8010330 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebae:	e051      	b.n	800ec54 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ebb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d014      	beq.n	800ebe6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ebbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d105      	bne.n	800ebd4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ebc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d008      	beq.n	800ebe6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d03a      	beq.n	800ec52 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	4798      	blx	r3
    }
    return;
 800ebe4:	e035      	b.n	800ec52 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ebe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d009      	beq.n	800ec06 <HAL_UART_IRQHandler+0x6e2>
 800ebf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d003      	beq.n	800ec06 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f001 fb6b 	bl	80102da <UART_EndTransmit_IT>
    return;
 800ec04:	e026      	b.n	800ec54 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ec06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d009      	beq.n	800ec26 <HAL_UART_IRQHandler+0x702>
 800ec12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d003      	beq.n	800ec26 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f001 fb9a 	bl	8010358 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec24:	e016      	b.n	800ec54 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ec26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d010      	beq.n	800ec54 <HAL_UART_IRQHandler+0x730>
 800ec32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	da0c      	bge.n	800ec54 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f001 fb82 	bl	8010344 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec40:	e008      	b.n	800ec54 <HAL_UART_IRQHandler+0x730>
      return;
 800ec42:	bf00      	nop
 800ec44:	e006      	b.n	800ec54 <HAL_UART_IRQHandler+0x730>
    return;
 800ec46:	bf00      	nop
 800ec48:	e004      	b.n	800ec54 <HAL_UART_IRQHandler+0x730>
      return;
 800ec4a:	bf00      	nop
 800ec4c:	e002      	b.n	800ec54 <HAL_UART_IRQHandler+0x730>
      return;
 800ec4e:	bf00      	nop
 800ec50:	e000      	b.n	800ec54 <HAL_UART_IRQHandler+0x730>
    return;
 800ec52:	bf00      	nop
  }
}
 800ec54:	37e8      	adds	r7, #232	; 0xe8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	effffffe 	.word	0xeffffffe

0800ec60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ec68:	bf00      	nop
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	460b      	mov	r3, r1
 800eca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecb8:	b092      	sub	sp, #72	; 0x48
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	689a      	ldr	r2, [r3, #8]
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	691b      	ldr	r3, [r3, #16]
 800eccc:	431a      	orrs	r2, r3
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	431a      	orrs	r2, r3
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	69db      	ldr	r3, [r3, #28]
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	4bbe      	ldr	r3, [pc, #760]	; (800efdc <UART_SetConfig+0x328>)
 800ece4:	4013      	ands	r3, r2
 800ece6:	697a      	ldr	r2, [r7, #20]
 800ece8:	6812      	ldr	r2, [r2, #0]
 800ecea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecec:	430b      	orrs	r3, r1
 800ecee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	68da      	ldr	r2, [r3, #12]
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	430a      	orrs	r2, r1
 800ed04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	699b      	ldr	r3, [r3, #24]
 800ed0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4ab3      	ldr	r2, [pc, #716]	; (800efe0 <UART_SetConfig+0x32c>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d004      	beq.n	800ed20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	689a      	ldr	r2, [r3, #8]
 800ed26:	4baf      	ldr	r3, [pc, #700]	; (800efe4 <UART_SetConfig+0x330>)
 800ed28:	4013      	ands	r3, r2
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	6812      	ldr	r2, [r2, #0]
 800ed2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed30:	430b      	orrs	r3, r1
 800ed32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3a:	f023 010f 	bic.w	r1, r3, #15
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	430a      	orrs	r2, r1
 800ed48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4aa6      	ldr	r2, [pc, #664]	; (800efe8 <UART_SetConfig+0x334>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d177      	bne.n	800ee44 <UART_SetConfig+0x190>
 800ed54:	4ba5      	ldr	r3, [pc, #660]	; (800efec <UART_SetConfig+0x338>)
 800ed56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed5c:	2b28      	cmp	r3, #40	; 0x28
 800ed5e:	d86d      	bhi.n	800ee3c <UART_SetConfig+0x188>
 800ed60:	a201      	add	r2, pc, #4	; (adr r2, 800ed68 <UART_SetConfig+0xb4>)
 800ed62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed66:	bf00      	nop
 800ed68:	0800ee0d 	.word	0x0800ee0d
 800ed6c:	0800ee3d 	.word	0x0800ee3d
 800ed70:	0800ee3d 	.word	0x0800ee3d
 800ed74:	0800ee3d 	.word	0x0800ee3d
 800ed78:	0800ee3d 	.word	0x0800ee3d
 800ed7c:	0800ee3d 	.word	0x0800ee3d
 800ed80:	0800ee3d 	.word	0x0800ee3d
 800ed84:	0800ee3d 	.word	0x0800ee3d
 800ed88:	0800ee15 	.word	0x0800ee15
 800ed8c:	0800ee3d 	.word	0x0800ee3d
 800ed90:	0800ee3d 	.word	0x0800ee3d
 800ed94:	0800ee3d 	.word	0x0800ee3d
 800ed98:	0800ee3d 	.word	0x0800ee3d
 800ed9c:	0800ee3d 	.word	0x0800ee3d
 800eda0:	0800ee3d 	.word	0x0800ee3d
 800eda4:	0800ee3d 	.word	0x0800ee3d
 800eda8:	0800ee1d 	.word	0x0800ee1d
 800edac:	0800ee3d 	.word	0x0800ee3d
 800edb0:	0800ee3d 	.word	0x0800ee3d
 800edb4:	0800ee3d 	.word	0x0800ee3d
 800edb8:	0800ee3d 	.word	0x0800ee3d
 800edbc:	0800ee3d 	.word	0x0800ee3d
 800edc0:	0800ee3d 	.word	0x0800ee3d
 800edc4:	0800ee3d 	.word	0x0800ee3d
 800edc8:	0800ee25 	.word	0x0800ee25
 800edcc:	0800ee3d 	.word	0x0800ee3d
 800edd0:	0800ee3d 	.word	0x0800ee3d
 800edd4:	0800ee3d 	.word	0x0800ee3d
 800edd8:	0800ee3d 	.word	0x0800ee3d
 800eddc:	0800ee3d 	.word	0x0800ee3d
 800ede0:	0800ee3d 	.word	0x0800ee3d
 800ede4:	0800ee3d 	.word	0x0800ee3d
 800ede8:	0800ee2d 	.word	0x0800ee2d
 800edec:	0800ee3d 	.word	0x0800ee3d
 800edf0:	0800ee3d 	.word	0x0800ee3d
 800edf4:	0800ee3d 	.word	0x0800ee3d
 800edf8:	0800ee3d 	.word	0x0800ee3d
 800edfc:	0800ee3d 	.word	0x0800ee3d
 800ee00:	0800ee3d 	.word	0x0800ee3d
 800ee04:	0800ee3d 	.word	0x0800ee3d
 800ee08:	0800ee35 	.word	0x0800ee35
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee12:	e222      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee14:	2304      	movs	r3, #4
 800ee16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1a:	e21e      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee1c:	2308      	movs	r3, #8
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee22:	e21a      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee24:	2310      	movs	r3, #16
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2a:	e216      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee2c:	2320      	movs	r3, #32
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee32:	e212      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee34:	2340      	movs	r3, #64	; 0x40
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3a:	e20e      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee3c:	2380      	movs	r3, #128	; 0x80
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee42:	e20a      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4a69      	ldr	r2, [pc, #420]	; (800eff0 <UART_SetConfig+0x33c>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d130      	bne.n	800eeb0 <UART_SetConfig+0x1fc>
 800ee4e:	4b67      	ldr	r3, [pc, #412]	; (800efec <UART_SetConfig+0x338>)
 800ee50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee52:	f003 0307 	and.w	r3, r3, #7
 800ee56:	2b05      	cmp	r3, #5
 800ee58:	d826      	bhi.n	800eea8 <UART_SetConfig+0x1f4>
 800ee5a:	a201      	add	r2, pc, #4	; (adr r2, 800ee60 <UART_SetConfig+0x1ac>)
 800ee5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee60:	0800ee79 	.word	0x0800ee79
 800ee64:	0800ee81 	.word	0x0800ee81
 800ee68:	0800ee89 	.word	0x0800ee89
 800ee6c:	0800ee91 	.word	0x0800ee91
 800ee70:	0800ee99 	.word	0x0800ee99
 800ee74:	0800eea1 	.word	0x0800eea1
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7e:	e1ec      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee80:	2304      	movs	r3, #4
 800ee82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee86:	e1e8      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee88:	2308      	movs	r3, #8
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8e:	e1e4      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee90:	2310      	movs	r3, #16
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee96:	e1e0      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ee98:	2320      	movs	r3, #32
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9e:	e1dc      	b.n	800f25a <UART_SetConfig+0x5a6>
 800eea0:	2340      	movs	r3, #64	; 0x40
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea6:	e1d8      	b.n	800f25a <UART_SetConfig+0x5a6>
 800eea8:	2380      	movs	r3, #128	; 0x80
 800eeaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeae:	e1d4      	b.n	800f25a <UART_SetConfig+0x5a6>
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a4f      	ldr	r2, [pc, #316]	; (800eff4 <UART_SetConfig+0x340>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d130      	bne.n	800ef1c <UART_SetConfig+0x268>
 800eeba:	4b4c      	ldr	r3, [pc, #304]	; (800efec <UART_SetConfig+0x338>)
 800eebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eebe:	f003 0307 	and.w	r3, r3, #7
 800eec2:	2b05      	cmp	r3, #5
 800eec4:	d826      	bhi.n	800ef14 <UART_SetConfig+0x260>
 800eec6:	a201      	add	r2, pc, #4	; (adr r2, 800eecc <UART_SetConfig+0x218>)
 800eec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eecc:	0800eee5 	.word	0x0800eee5
 800eed0:	0800eeed 	.word	0x0800eeed
 800eed4:	0800eef5 	.word	0x0800eef5
 800eed8:	0800eefd 	.word	0x0800eefd
 800eedc:	0800ef05 	.word	0x0800ef05
 800eee0:	0800ef0d 	.word	0x0800ef0d
 800eee4:	2300      	movs	r3, #0
 800eee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeea:	e1b6      	b.n	800f25a <UART_SetConfig+0x5a6>
 800eeec:	2304      	movs	r3, #4
 800eeee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef2:	e1b2      	b.n	800f25a <UART_SetConfig+0x5a6>
 800eef4:	2308      	movs	r3, #8
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefa:	e1ae      	b.n	800f25a <UART_SetConfig+0x5a6>
 800eefc:	2310      	movs	r3, #16
 800eefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef02:	e1aa      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef04:	2320      	movs	r3, #32
 800ef06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef0a:	e1a6      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef0c:	2340      	movs	r3, #64	; 0x40
 800ef0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef12:	e1a2      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef14:	2380      	movs	r3, #128	; 0x80
 800ef16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1a:	e19e      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a35      	ldr	r2, [pc, #212]	; (800eff8 <UART_SetConfig+0x344>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d130      	bne.n	800ef88 <UART_SetConfig+0x2d4>
 800ef26:	4b31      	ldr	r3, [pc, #196]	; (800efec <UART_SetConfig+0x338>)
 800ef28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef2a:	f003 0307 	and.w	r3, r3, #7
 800ef2e:	2b05      	cmp	r3, #5
 800ef30:	d826      	bhi.n	800ef80 <UART_SetConfig+0x2cc>
 800ef32:	a201      	add	r2, pc, #4	; (adr r2, 800ef38 <UART_SetConfig+0x284>)
 800ef34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef38:	0800ef51 	.word	0x0800ef51
 800ef3c:	0800ef59 	.word	0x0800ef59
 800ef40:	0800ef61 	.word	0x0800ef61
 800ef44:	0800ef69 	.word	0x0800ef69
 800ef48:	0800ef71 	.word	0x0800ef71
 800ef4c:	0800ef79 	.word	0x0800ef79
 800ef50:	2300      	movs	r3, #0
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef56:	e180      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef58:	2304      	movs	r3, #4
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5e:	e17c      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef60:	2308      	movs	r3, #8
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef66:	e178      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef68:	2310      	movs	r3, #16
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6e:	e174      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef70:	2320      	movs	r3, #32
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef76:	e170      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef78:	2340      	movs	r3, #64	; 0x40
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7e:	e16c      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef80:	2380      	movs	r3, #128	; 0x80
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef86:	e168      	b.n	800f25a <UART_SetConfig+0x5a6>
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a1b      	ldr	r2, [pc, #108]	; (800effc <UART_SetConfig+0x348>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d142      	bne.n	800f018 <UART_SetConfig+0x364>
 800ef92:	4b16      	ldr	r3, [pc, #88]	; (800efec <UART_SetConfig+0x338>)
 800ef94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef96:	f003 0307 	and.w	r3, r3, #7
 800ef9a:	2b05      	cmp	r3, #5
 800ef9c:	d838      	bhi.n	800f010 <UART_SetConfig+0x35c>
 800ef9e:	a201      	add	r2, pc, #4	; (adr r2, 800efa4 <UART_SetConfig+0x2f0>)
 800efa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa4:	0800efbd 	.word	0x0800efbd
 800efa8:	0800efc5 	.word	0x0800efc5
 800efac:	0800efcd 	.word	0x0800efcd
 800efb0:	0800efd5 	.word	0x0800efd5
 800efb4:	0800f001 	.word	0x0800f001
 800efb8:	0800f009 	.word	0x0800f009
 800efbc:	2300      	movs	r3, #0
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc2:	e14a      	b.n	800f25a <UART_SetConfig+0x5a6>
 800efc4:	2304      	movs	r3, #4
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efca:	e146      	b.n	800f25a <UART_SetConfig+0x5a6>
 800efcc:	2308      	movs	r3, #8
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd2:	e142      	b.n	800f25a <UART_SetConfig+0x5a6>
 800efd4:	2310      	movs	r3, #16
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e13e      	b.n	800f25a <UART_SetConfig+0x5a6>
 800efdc:	cfff69f3 	.word	0xcfff69f3
 800efe0:	58000c00 	.word	0x58000c00
 800efe4:	11fff4ff 	.word	0x11fff4ff
 800efe8:	40011000 	.word	0x40011000
 800efec:	58024400 	.word	0x58024400
 800eff0:	40004400 	.word	0x40004400
 800eff4:	40004800 	.word	0x40004800
 800eff8:	40004c00 	.word	0x40004c00
 800effc:	40005000 	.word	0x40005000
 800f000:	2320      	movs	r3, #32
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f006:	e128      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f008:	2340      	movs	r3, #64	; 0x40
 800f00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00e:	e124      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f010:	2380      	movs	r3, #128	; 0x80
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f016:	e120      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4acb      	ldr	r2, [pc, #812]	; (800f34c <UART_SetConfig+0x698>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d176      	bne.n	800f110 <UART_SetConfig+0x45c>
 800f022:	4bcb      	ldr	r3, [pc, #812]	; (800f350 <UART_SetConfig+0x69c>)
 800f024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f02a:	2b28      	cmp	r3, #40	; 0x28
 800f02c:	d86c      	bhi.n	800f108 <UART_SetConfig+0x454>
 800f02e:	a201      	add	r2, pc, #4	; (adr r2, 800f034 <UART_SetConfig+0x380>)
 800f030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f034:	0800f0d9 	.word	0x0800f0d9
 800f038:	0800f109 	.word	0x0800f109
 800f03c:	0800f109 	.word	0x0800f109
 800f040:	0800f109 	.word	0x0800f109
 800f044:	0800f109 	.word	0x0800f109
 800f048:	0800f109 	.word	0x0800f109
 800f04c:	0800f109 	.word	0x0800f109
 800f050:	0800f109 	.word	0x0800f109
 800f054:	0800f0e1 	.word	0x0800f0e1
 800f058:	0800f109 	.word	0x0800f109
 800f05c:	0800f109 	.word	0x0800f109
 800f060:	0800f109 	.word	0x0800f109
 800f064:	0800f109 	.word	0x0800f109
 800f068:	0800f109 	.word	0x0800f109
 800f06c:	0800f109 	.word	0x0800f109
 800f070:	0800f109 	.word	0x0800f109
 800f074:	0800f0e9 	.word	0x0800f0e9
 800f078:	0800f109 	.word	0x0800f109
 800f07c:	0800f109 	.word	0x0800f109
 800f080:	0800f109 	.word	0x0800f109
 800f084:	0800f109 	.word	0x0800f109
 800f088:	0800f109 	.word	0x0800f109
 800f08c:	0800f109 	.word	0x0800f109
 800f090:	0800f109 	.word	0x0800f109
 800f094:	0800f0f1 	.word	0x0800f0f1
 800f098:	0800f109 	.word	0x0800f109
 800f09c:	0800f109 	.word	0x0800f109
 800f0a0:	0800f109 	.word	0x0800f109
 800f0a4:	0800f109 	.word	0x0800f109
 800f0a8:	0800f109 	.word	0x0800f109
 800f0ac:	0800f109 	.word	0x0800f109
 800f0b0:	0800f109 	.word	0x0800f109
 800f0b4:	0800f0f9 	.word	0x0800f0f9
 800f0b8:	0800f109 	.word	0x0800f109
 800f0bc:	0800f109 	.word	0x0800f109
 800f0c0:	0800f109 	.word	0x0800f109
 800f0c4:	0800f109 	.word	0x0800f109
 800f0c8:	0800f109 	.word	0x0800f109
 800f0cc:	0800f109 	.word	0x0800f109
 800f0d0:	0800f109 	.word	0x0800f109
 800f0d4:	0800f101 	.word	0x0800f101
 800f0d8:	2301      	movs	r3, #1
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0de:	e0bc      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f0e0:	2304      	movs	r3, #4
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e6:	e0b8      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f0e8:	2308      	movs	r3, #8
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ee:	e0b4      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f0f0:	2310      	movs	r3, #16
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f6:	e0b0      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f0f8:	2320      	movs	r3, #32
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fe:	e0ac      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f100:	2340      	movs	r3, #64	; 0x40
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f106:	e0a8      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f108:	2380      	movs	r3, #128	; 0x80
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10e:	e0a4      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a8f      	ldr	r2, [pc, #572]	; (800f354 <UART_SetConfig+0x6a0>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d130      	bne.n	800f17c <UART_SetConfig+0x4c8>
 800f11a:	4b8d      	ldr	r3, [pc, #564]	; (800f350 <UART_SetConfig+0x69c>)
 800f11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f11e:	f003 0307 	and.w	r3, r3, #7
 800f122:	2b05      	cmp	r3, #5
 800f124:	d826      	bhi.n	800f174 <UART_SetConfig+0x4c0>
 800f126:	a201      	add	r2, pc, #4	; (adr r2, 800f12c <UART_SetConfig+0x478>)
 800f128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f12c:	0800f145 	.word	0x0800f145
 800f130:	0800f14d 	.word	0x0800f14d
 800f134:	0800f155 	.word	0x0800f155
 800f138:	0800f15d 	.word	0x0800f15d
 800f13c:	0800f165 	.word	0x0800f165
 800f140:	0800f16d 	.word	0x0800f16d
 800f144:	2300      	movs	r3, #0
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e086      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f14c:	2304      	movs	r3, #4
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e082      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f154:	2308      	movs	r3, #8
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e07e      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f15c:	2310      	movs	r3, #16
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f162:	e07a      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f164:	2320      	movs	r3, #32
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16a:	e076      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f16c:	2340      	movs	r3, #64	; 0x40
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f172:	e072      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f174:	2380      	movs	r3, #128	; 0x80
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17a:	e06e      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a75      	ldr	r2, [pc, #468]	; (800f358 <UART_SetConfig+0x6a4>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d130      	bne.n	800f1e8 <UART_SetConfig+0x534>
 800f186:	4b72      	ldr	r3, [pc, #456]	; (800f350 <UART_SetConfig+0x69c>)
 800f188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f18a:	f003 0307 	and.w	r3, r3, #7
 800f18e:	2b05      	cmp	r3, #5
 800f190:	d826      	bhi.n	800f1e0 <UART_SetConfig+0x52c>
 800f192:	a201      	add	r2, pc, #4	; (adr r2, 800f198 <UART_SetConfig+0x4e4>)
 800f194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f198:	0800f1b1 	.word	0x0800f1b1
 800f19c:	0800f1b9 	.word	0x0800f1b9
 800f1a0:	0800f1c1 	.word	0x0800f1c1
 800f1a4:	0800f1c9 	.word	0x0800f1c9
 800f1a8:	0800f1d1 	.word	0x0800f1d1
 800f1ac:	0800f1d9 	.word	0x0800f1d9
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b6:	e050      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f1b8:	2304      	movs	r3, #4
 800f1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1be:	e04c      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f1c0:	2308      	movs	r3, #8
 800f1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1c6:	e048      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f1c8:	2310      	movs	r3, #16
 800f1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ce:	e044      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f1d0:	2320      	movs	r3, #32
 800f1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1d6:	e040      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f1d8:	2340      	movs	r3, #64	; 0x40
 800f1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1de:	e03c      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f1e0:	2380      	movs	r3, #128	; 0x80
 800f1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1e6:	e038      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a5b      	ldr	r2, [pc, #364]	; (800f35c <UART_SetConfig+0x6a8>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d130      	bne.n	800f254 <UART_SetConfig+0x5a0>
 800f1f2:	4b57      	ldr	r3, [pc, #348]	; (800f350 <UART_SetConfig+0x69c>)
 800f1f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1f6:	f003 0307 	and.w	r3, r3, #7
 800f1fa:	2b05      	cmp	r3, #5
 800f1fc:	d826      	bhi.n	800f24c <UART_SetConfig+0x598>
 800f1fe:	a201      	add	r2, pc, #4	; (adr r2, 800f204 <UART_SetConfig+0x550>)
 800f200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f204:	0800f21d 	.word	0x0800f21d
 800f208:	0800f225 	.word	0x0800f225
 800f20c:	0800f22d 	.word	0x0800f22d
 800f210:	0800f235 	.word	0x0800f235
 800f214:	0800f23d 	.word	0x0800f23d
 800f218:	0800f245 	.word	0x0800f245
 800f21c:	2302      	movs	r3, #2
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f222:	e01a      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f224:	2304      	movs	r3, #4
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22a:	e016      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f22c:	2308      	movs	r3, #8
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f232:	e012      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f234:	2310      	movs	r3, #16
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f23a:	e00e      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f23c:	2320      	movs	r3, #32
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f242:	e00a      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f244:	2340      	movs	r3, #64	; 0x40
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24a:	e006      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f24c:	2380      	movs	r3, #128	; 0x80
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f252:	e002      	b.n	800f25a <UART_SetConfig+0x5a6>
 800f254:	2380      	movs	r3, #128	; 0x80
 800f256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4a3f      	ldr	r2, [pc, #252]	; (800f35c <UART_SetConfig+0x6a8>)
 800f260:	4293      	cmp	r3, r2
 800f262:	f040 80f8 	bne.w	800f456 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f266:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f26a:	2b20      	cmp	r3, #32
 800f26c:	dc46      	bgt.n	800f2fc <UART_SetConfig+0x648>
 800f26e:	2b02      	cmp	r3, #2
 800f270:	f2c0 8082 	blt.w	800f378 <UART_SetConfig+0x6c4>
 800f274:	3b02      	subs	r3, #2
 800f276:	2b1e      	cmp	r3, #30
 800f278:	d87e      	bhi.n	800f378 <UART_SetConfig+0x6c4>
 800f27a:	a201      	add	r2, pc, #4	; (adr r2, 800f280 <UART_SetConfig+0x5cc>)
 800f27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f280:	0800f303 	.word	0x0800f303
 800f284:	0800f379 	.word	0x0800f379
 800f288:	0800f30b 	.word	0x0800f30b
 800f28c:	0800f379 	.word	0x0800f379
 800f290:	0800f379 	.word	0x0800f379
 800f294:	0800f379 	.word	0x0800f379
 800f298:	0800f31b 	.word	0x0800f31b
 800f29c:	0800f379 	.word	0x0800f379
 800f2a0:	0800f379 	.word	0x0800f379
 800f2a4:	0800f379 	.word	0x0800f379
 800f2a8:	0800f379 	.word	0x0800f379
 800f2ac:	0800f379 	.word	0x0800f379
 800f2b0:	0800f379 	.word	0x0800f379
 800f2b4:	0800f379 	.word	0x0800f379
 800f2b8:	0800f32b 	.word	0x0800f32b
 800f2bc:	0800f379 	.word	0x0800f379
 800f2c0:	0800f379 	.word	0x0800f379
 800f2c4:	0800f379 	.word	0x0800f379
 800f2c8:	0800f379 	.word	0x0800f379
 800f2cc:	0800f379 	.word	0x0800f379
 800f2d0:	0800f379 	.word	0x0800f379
 800f2d4:	0800f379 	.word	0x0800f379
 800f2d8:	0800f379 	.word	0x0800f379
 800f2dc:	0800f379 	.word	0x0800f379
 800f2e0:	0800f379 	.word	0x0800f379
 800f2e4:	0800f379 	.word	0x0800f379
 800f2e8:	0800f379 	.word	0x0800f379
 800f2ec:	0800f379 	.word	0x0800f379
 800f2f0:	0800f379 	.word	0x0800f379
 800f2f4:	0800f379 	.word	0x0800f379
 800f2f8:	0800f36b 	.word	0x0800f36b
 800f2fc:	2b40      	cmp	r3, #64	; 0x40
 800f2fe:	d037      	beq.n	800f370 <UART_SetConfig+0x6bc>
 800f300:	e03a      	b.n	800f378 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f302:	f7fc fd67 	bl	800bdd4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f308:	e03c      	b.n	800f384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f30a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fc fd76 	bl	800be00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f318:	e034      	b.n	800f384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f31a:	f107 0318 	add.w	r3, r7, #24
 800f31e:	4618      	mov	r0, r3
 800f320:	f7fc fec2 	bl	800c0a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f328:	e02c      	b.n	800f384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f32a:	4b09      	ldr	r3, [pc, #36]	; (800f350 <UART_SetConfig+0x69c>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f003 0320 	and.w	r3, r3, #32
 800f332:	2b00      	cmp	r3, #0
 800f334:	d016      	beq.n	800f364 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f336:	4b06      	ldr	r3, [pc, #24]	; (800f350 <UART_SetConfig+0x69c>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	08db      	lsrs	r3, r3, #3
 800f33c:	f003 0303 	and.w	r3, r3, #3
 800f340:	4a07      	ldr	r2, [pc, #28]	; (800f360 <UART_SetConfig+0x6ac>)
 800f342:	fa22 f303 	lsr.w	r3, r2, r3
 800f346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f348:	e01c      	b.n	800f384 <UART_SetConfig+0x6d0>
 800f34a:	bf00      	nop
 800f34c:	40011400 	.word	0x40011400
 800f350:	58024400 	.word	0x58024400
 800f354:	40007800 	.word	0x40007800
 800f358:	40007c00 	.word	0x40007c00
 800f35c:	58000c00 	.word	0x58000c00
 800f360:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f364:	4b9d      	ldr	r3, [pc, #628]	; (800f5dc <UART_SetConfig+0x928>)
 800f366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f368:	e00c      	b.n	800f384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f36a:	4b9d      	ldr	r3, [pc, #628]	; (800f5e0 <UART_SetConfig+0x92c>)
 800f36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f36e:	e009      	b.n	800f384 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f376:	e005      	b.n	800f384 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f378:	2300      	movs	r3, #0
 800f37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f37c:	2301      	movs	r3, #1
 800f37e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f382:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f386:	2b00      	cmp	r3, #0
 800f388:	f000 81de 	beq.w	800f748 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f390:	4a94      	ldr	r2, [pc, #592]	; (800f5e4 <UART_SetConfig+0x930>)
 800f392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f396:	461a      	mov	r2, r3
 800f398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f39a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f39e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	685a      	ldr	r2, [r3, #4]
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	005b      	lsls	r3, r3, #1
 800f3a8:	4413      	add	r3, r2
 800f3aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d305      	bcc.n	800f3bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d903      	bls.n	800f3c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f3c2:	e1c1      	b.n	800f748 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	60bb      	str	r3, [r7, #8]
 800f3ca:	60fa      	str	r2, [r7, #12]
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d0:	4a84      	ldr	r2, [pc, #528]	; (800f5e4 <UART_SetConfig+0x930>)
 800f3d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	2200      	movs	r2, #0
 800f3da:	603b      	str	r3, [r7, #0]
 800f3dc:	607a      	str	r2, [r7, #4]
 800f3de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f3e6:	f7f0 ffd3 	bl	8000390 <__aeabi_uldivmod>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	4610      	mov	r0, r2
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	f04f 0200 	mov.w	r2, #0
 800f3f6:	f04f 0300 	mov.w	r3, #0
 800f3fa:	020b      	lsls	r3, r1, #8
 800f3fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f400:	0202      	lsls	r2, r0, #8
 800f402:	6979      	ldr	r1, [r7, #20]
 800f404:	6849      	ldr	r1, [r1, #4]
 800f406:	0849      	lsrs	r1, r1, #1
 800f408:	2000      	movs	r0, #0
 800f40a:	460c      	mov	r4, r1
 800f40c:	4605      	mov	r5, r0
 800f40e:	eb12 0804 	adds.w	r8, r2, r4
 800f412:	eb43 0905 	adc.w	r9, r3, r5
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	469a      	mov	sl, r3
 800f41e:	4693      	mov	fp, r2
 800f420:	4652      	mov	r2, sl
 800f422:	465b      	mov	r3, fp
 800f424:	4640      	mov	r0, r8
 800f426:	4649      	mov	r1, r9
 800f428:	f7f0 ffb2 	bl	8000390 <__aeabi_uldivmod>
 800f42c:	4602      	mov	r2, r0
 800f42e:	460b      	mov	r3, r1
 800f430:	4613      	mov	r3, r2
 800f432:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f43a:	d308      	bcc.n	800f44e <UART_SetConfig+0x79a>
 800f43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f442:	d204      	bcs.n	800f44e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f44a:	60da      	str	r2, [r3, #12]
 800f44c:	e17c      	b.n	800f748 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f44e:	2301      	movs	r3, #1
 800f450:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f454:	e178      	b.n	800f748 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f45e:	f040 80c5 	bne.w	800f5ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f462:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f466:	2b20      	cmp	r3, #32
 800f468:	dc48      	bgt.n	800f4fc <UART_SetConfig+0x848>
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	db7b      	blt.n	800f566 <UART_SetConfig+0x8b2>
 800f46e:	2b20      	cmp	r3, #32
 800f470:	d879      	bhi.n	800f566 <UART_SetConfig+0x8b2>
 800f472:	a201      	add	r2, pc, #4	; (adr r2, 800f478 <UART_SetConfig+0x7c4>)
 800f474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f478:	0800f503 	.word	0x0800f503
 800f47c:	0800f50b 	.word	0x0800f50b
 800f480:	0800f567 	.word	0x0800f567
 800f484:	0800f567 	.word	0x0800f567
 800f488:	0800f513 	.word	0x0800f513
 800f48c:	0800f567 	.word	0x0800f567
 800f490:	0800f567 	.word	0x0800f567
 800f494:	0800f567 	.word	0x0800f567
 800f498:	0800f523 	.word	0x0800f523
 800f49c:	0800f567 	.word	0x0800f567
 800f4a0:	0800f567 	.word	0x0800f567
 800f4a4:	0800f567 	.word	0x0800f567
 800f4a8:	0800f567 	.word	0x0800f567
 800f4ac:	0800f567 	.word	0x0800f567
 800f4b0:	0800f567 	.word	0x0800f567
 800f4b4:	0800f567 	.word	0x0800f567
 800f4b8:	0800f533 	.word	0x0800f533
 800f4bc:	0800f567 	.word	0x0800f567
 800f4c0:	0800f567 	.word	0x0800f567
 800f4c4:	0800f567 	.word	0x0800f567
 800f4c8:	0800f567 	.word	0x0800f567
 800f4cc:	0800f567 	.word	0x0800f567
 800f4d0:	0800f567 	.word	0x0800f567
 800f4d4:	0800f567 	.word	0x0800f567
 800f4d8:	0800f567 	.word	0x0800f567
 800f4dc:	0800f567 	.word	0x0800f567
 800f4e0:	0800f567 	.word	0x0800f567
 800f4e4:	0800f567 	.word	0x0800f567
 800f4e8:	0800f567 	.word	0x0800f567
 800f4ec:	0800f567 	.word	0x0800f567
 800f4f0:	0800f567 	.word	0x0800f567
 800f4f4:	0800f567 	.word	0x0800f567
 800f4f8:	0800f559 	.word	0x0800f559
 800f4fc:	2b40      	cmp	r3, #64	; 0x40
 800f4fe:	d02e      	beq.n	800f55e <UART_SetConfig+0x8aa>
 800f500:	e031      	b.n	800f566 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f502:	f7fb fcf5 	bl	800aef0 <HAL_RCC_GetPCLK1Freq>
 800f506:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f508:	e033      	b.n	800f572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f50a:	f7fb fd07 	bl	800af1c <HAL_RCC_GetPCLK2Freq>
 800f50e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f510:	e02f      	b.n	800f572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f516:	4618      	mov	r0, r3
 800f518:	f7fc fc72 	bl	800be00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f520:	e027      	b.n	800f572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f522:	f107 0318 	add.w	r3, r7, #24
 800f526:	4618      	mov	r0, r3
 800f528:	f7fc fdbe 	bl	800c0a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f530:	e01f      	b.n	800f572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f532:	4b2d      	ldr	r3, [pc, #180]	; (800f5e8 <UART_SetConfig+0x934>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f003 0320 	and.w	r3, r3, #32
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d009      	beq.n	800f552 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f53e:	4b2a      	ldr	r3, [pc, #168]	; (800f5e8 <UART_SetConfig+0x934>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	08db      	lsrs	r3, r3, #3
 800f544:	f003 0303 	and.w	r3, r3, #3
 800f548:	4a24      	ldr	r2, [pc, #144]	; (800f5dc <UART_SetConfig+0x928>)
 800f54a:	fa22 f303 	lsr.w	r3, r2, r3
 800f54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f550:	e00f      	b.n	800f572 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f552:	4b22      	ldr	r3, [pc, #136]	; (800f5dc <UART_SetConfig+0x928>)
 800f554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f556:	e00c      	b.n	800f572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f558:	4b21      	ldr	r3, [pc, #132]	; (800f5e0 <UART_SetConfig+0x92c>)
 800f55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f55c:	e009      	b.n	800f572 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f55e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f564:	e005      	b.n	800f572 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f566:	2300      	movs	r3, #0
 800f568:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f56a:	2301      	movs	r3, #1
 800f56c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f570:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f574:	2b00      	cmp	r3, #0
 800f576:	f000 80e7 	beq.w	800f748 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f57e:	4a19      	ldr	r2, [pc, #100]	; (800f5e4 <UART_SetConfig+0x930>)
 800f580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f584:	461a      	mov	r2, r3
 800f586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f588:	fbb3 f3f2 	udiv	r3, r3, r2
 800f58c:	005a      	lsls	r2, r3, #1
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	085b      	lsrs	r3, r3, #1
 800f594:	441a      	add	r2, r3
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f59e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a2:	2b0f      	cmp	r3, #15
 800f5a4:	d916      	bls.n	800f5d4 <UART_SetConfig+0x920>
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5ac:	d212      	bcs.n	800f5d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	f023 030f 	bic.w	r3, r3, #15
 800f5b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	085b      	lsrs	r3, r3, #1
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	f003 0307 	and.w	r3, r3, #7
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f5d0:	60da      	str	r2, [r3, #12]
 800f5d2:	e0b9      	b.n	800f748 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f5da:	e0b5      	b.n	800f748 <UART_SetConfig+0xa94>
 800f5dc:	03d09000 	.word	0x03d09000
 800f5e0:	003d0900 	.word	0x003d0900
 800f5e4:	080124c4 	.word	0x080124c4
 800f5e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f5ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f5f0:	2b20      	cmp	r3, #32
 800f5f2:	dc49      	bgt.n	800f688 <UART_SetConfig+0x9d4>
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	db7c      	blt.n	800f6f2 <UART_SetConfig+0xa3e>
 800f5f8:	2b20      	cmp	r3, #32
 800f5fa:	d87a      	bhi.n	800f6f2 <UART_SetConfig+0xa3e>
 800f5fc:	a201      	add	r2, pc, #4	; (adr r2, 800f604 <UART_SetConfig+0x950>)
 800f5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f602:	bf00      	nop
 800f604:	0800f68f 	.word	0x0800f68f
 800f608:	0800f697 	.word	0x0800f697
 800f60c:	0800f6f3 	.word	0x0800f6f3
 800f610:	0800f6f3 	.word	0x0800f6f3
 800f614:	0800f69f 	.word	0x0800f69f
 800f618:	0800f6f3 	.word	0x0800f6f3
 800f61c:	0800f6f3 	.word	0x0800f6f3
 800f620:	0800f6f3 	.word	0x0800f6f3
 800f624:	0800f6af 	.word	0x0800f6af
 800f628:	0800f6f3 	.word	0x0800f6f3
 800f62c:	0800f6f3 	.word	0x0800f6f3
 800f630:	0800f6f3 	.word	0x0800f6f3
 800f634:	0800f6f3 	.word	0x0800f6f3
 800f638:	0800f6f3 	.word	0x0800f6f3
 800f63c:	0800f6f3 	.word	0x0800f6f3
 800f640:	0800f6f3 	.word	0x0800f6f3
 800f644:	0800f6bf 	.word	0x0800f6bf
 800f648:	0800f6f3 	.word	0x0800f6f3
 800f64c:	0800f6f3 	.word	0x0800f6f3
 800f650:	0800f6f3 	.word	0x0800f6f3
 800f654:	0800f6f3 	.word	0x0800f6f3
 800f658:	0800f6f3 	.word	0x0800f6f3
 800f65c:	0800f6f3 	.word	0x0800f6f3
 800f660:	0800f6f3 	.word	0x0800f6f3
 800f664:	0800f6f3 	.word	0x0800f6f3
 800f668:	0800f6f3 	.word	0x0800f6f3
 800f66c:	0800f6f3 	.word	0x0800f6f3
 800f670:	0800f6f3 	.word	0x0800f6f3
 800f674:	0800f6f3 	.word	0x0800f6f3
 800f678:	0800f6f3 	.word	0x0800f6f3
 800f67c:	0800f6f3 	.word	0x0800f6f3
 800f680:	0800f6f3 	.word	0x0800f6f3
 800f684:	0800f6e5 	.word	0x0800f6e5
 800f688:	2b40      	cmp	r3, #64	; 0x40
 800f68a:	d02e      	beq.n	800f6ea <UART_SetConfig+0xa36>
 800f68c:	e031      	b.n	800f6f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f68e:	f7fb fc2f 	bl	800aef0 <HAL_RCC_GetPCLK1Freq>
 800f692:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f694:	e033      	b.n	800f6fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f696:	f7fb fc41 	bl	800af1c <HAL_RCC_GetPCLK2Freq>
 800f69a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f69c:	e02f      	b.n	800f6fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f69e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fc fbac 	bl	800be00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6ac:	e027      	b.n	800f6fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6ae:	f107 0318 	add.w	r3, r7, #24
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fc fcf8 	bl	800c0a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6bc:	e01f      	b.n	800f6fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6be:	4b2d      	ldr	r3, [pc, #180]	; (800f774 <UART_SetConfig+0xac0>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 0320 	and.w	r3, r3, #32
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d009      	beq.n	800f6de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6ca:	4b2a      	ldr	r3, [pc, #168]	; (800f774 <UART_SetConfig+0xac0>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	08db      	lsrs	r3, r3, #3
 800f6d0:	f003 0303 	and.w	r3, r3, #3
 800f6d4:	4a28      	ldr	r2, [pc, #160]	; (800f778 <UART_SetConfig+0xac4>)
 800f6d6:	fa22 f303 	lsr.w	r3, r2, r3
 800f6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6dc:	e00f      	b.n	800f6fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f6de:	4b26      	ldr	r3, [pc, #152]	; (800f778 <UART_SetConfig+0xac4>)
 800f6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6e2:	e00c      	b.n	800f6fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6e4:	4b25      	ldr	r3, [pc, #148]	; (800f77c <UART_SetConfig+0xac8>)
 800f6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6e8:	e009      	b.n	800f6fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6f0:	e005      	b.n	800f6fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f6fc:	bf00      	nop
    }

    if (pclk != 0U)
 800f6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f700:	2b00      	cmp	r3, #0
 800f702:	d021      	beq.n	800f748 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f708:	4a1d      	ldr	r2, [pc, #116]	; (800f780 <UART_SetConfig+0xacc>)
 800f70a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f70e:	461a      	mov	r2, r3
 800f710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f712:	fbb3 f2f2 	udiv	r2, r3, r2
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	085b      	lsrs	r3, r3, #1
 800f71c:	441a      	add	r2, r3
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	fbb2 f3f3 	udiv	r3, r2, r3
 800f726:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72a:	2b0f      	cmp	r3, #15
 800f72c:	d909      	bls.n	800f742 <UART_SetConfig+0xa8e>
 800f72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f734:	d205      	bcs.n	800f742 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f738:	b29a      	uxth	r2, r3
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	60da      	str	r2, [r3, #12]
 800f740:	e002      	b.n	800f748 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f742:	2301      	movs	r3, #1
 800f744:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	2201      	movs	r2, #1
 800f74c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	2201      	movs	r2, #1
 800f754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	2200      	movs	r2, #0
 800f75c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	2200      	movs	r2, #0
 800f762:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f764:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3748      	adds	r7, #72	; 0x48
 800f76c:	46bd      	mov	sp, r7
 800f76e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f772:	bf00      	nop
 800f774:	58024400 	.word	0x58024400
 800f778:	03d09000 	.word	0x03d09000
 800f77c:	003d0900 	.word	0x003d0900
 800f780:	080124c4 	.word	0x080124c4

0800f784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f790:	f003 0301 	and.w	r3, r3, #1
 800f794:	2b00      	cmp	r3, #0
 800f796:	d00a      	beq.n	800f7ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	430a      	orrs	r2, r1
 800f7ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7b2:	f003 0302 	and.w	r3, r3, #2
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00a      	beq.n	800f7d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	430a      	orrs	r2, r1
 800f7ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d4:	f003 0304 	and.w	r3, r3, #4
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00a      	beq.n	800f7f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	430a      	orrs	r2, r1
 800f7f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7f6:	f003 0308 	and.w	r3, r3, #8
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00a      	beq.n	800f814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	430a      	orrs	r2, r1
 800f812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f818:	f003 0310 	and.w	r3, r3, #16
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00a      	beq.n	800f836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	430a      	orrs	r2, r1
 800f834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f83a:	f003 0320 	and.w	r3, r3, #32
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00a      	beq.n	800f858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	430a      	orrs	r2, r1
 800f856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f860:	2b00      	cmp	r3, #0
 800f862:	d01a      	beq.n	800f89a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	430a      	orrs	r2, r1
 800f878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f87e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f882:	d10a      	bne.n	800f89a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	430a      	orrs	r2, r1
 800f898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00a      	beq.n	800f8bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	430a      	orrs	r2, r1
 800f8ba:	605a      	str	r2, [r3, #4]
  }
}
 800f8bc:	bf00      	nop
 800f8be:	370c      	adds	r7, #12
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr

0800f8c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b086      	sub	sp, #24
 800f8cc:	af02      	add	r7, sp, #8
 800f8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f8d8:	f7f4 fed2 	bl	8004680 <HAL_GetTick>
 800f8dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f003 0308 	and.w	r3, r3, #8
 800f8e8:	2b08      	cmp	r3, #8
 800f8ea:	d10e      	bne.n	800f90a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f8ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f8f0:	9300      	str	r3, [sp, #0]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f000 f82f 	bl	800f95e <UART_WaitOnFlagUntilTimeout>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d001      	beq.n	800f90a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f906:	2303      	movs	r3, #3
 800f908:	e025      	b.n	800f956 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f003 0304 	and.w	r3, r3, #4
 800f914:	2b04      	cmp	r3, #4
 800f916:	d10e      	bne.n	800f936 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f91c:	9300      	str	r3, [sp, #0]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 f819 	bl	800f95e <UART_WaitOnFlagUntilTimeout>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d001      	beq.n	800f936 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f932:	2303      	movs	r3, #3
 800f934:	e00f      	b.n	800f956 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2220      	movs	r2, #32
 800f93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2220      	movs	r2, #32
 800f942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f954:	2300      	movs	r3, #0
}
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b09c      	sub	sp, #112	; 0x70
 800f962:	af00      	add	r7, sp, #0
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	60b9      	str	r1, [r7, #8]
 800f968:	603b      	str	r3, [r7, #0]
 800f96a:	4613      	mov	r3, r2
 800f96c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f96e:	e0a9      	b.n	800fac4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f976:	f000 80a5 	beq.w	800fac4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f97a:	f7f4 fe81 	bl	8004680 <HAL_GetTick>
 800f97e:	4602      	mov	r2, r0
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f986:	429a      	cmp	r2, r3
 800f988:	d302      	bcc.n	800f990 <UART_WaitOnFlagUntilTimeout+0x32>
 800f98a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d140      	bne.n	800fa12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f998:	e853 3f00 	ldrex	r3, [r3]
 800f99c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f9a4:	667b      	str	r3, [r7, #100]	; 0x64
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f9b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f9b6:	e841 2300 	strex	r3, r2, [r1]
 800f9ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f9bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d1e6      	bne.n	800f990 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	3308      	adds	r3, #8
 800f9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9cc:	e853 3f00 	ldrex	r3, [r3]
 800f9d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d4:	f023 0301 	bic.w	r3, r3, #1
 800f9d8:	663b      	str	r3, [r7, #96]	; 0x60
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	3308      	adds	r3, #8
 800f9e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9e2:	64ba      	str	r2, [r7, #72]	; 0x48
 800f9e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9ea:	e841 2300 	strex	r3, r2, [r1]
 800f9ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1e5      	bne.n	800f9c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2220      	movs	r2, #32
 800f9fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2220      	movs	r2, #32
 800fa02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fa0e:	2303      	movs	r3, #3
 800fa10:	e069      	b.n	800fae6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f003 0304 	and.w	r3, r3, #4
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d051      	beq.n	800fac4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	69db      	ldr	r3, [r3, #28]
 800fa26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa2e:	d149      	bne.n	800fac4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	e853 3f00 	ldrex	r3, [r3]
 800fa46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fa4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	461a      	mov	r2, r3
 800fa56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa58:	637b      	str	r3, [r7, #52]	; 0x34
 800fa5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa60:	e841 2300 	strex	r3, r2, [r1]
 800fa64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1e6      	bne.n	800fa3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	3308      	adds	r3, #8
 800fa72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	e853 3f00 	ldrex	r3, [r3]
 800fa7a:	613b      	str	r3, [r7, #16]
   return(result);
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	f023 0301 	bic.w	r3, r3, #1
 800fa82:	66bb      	str	r3, [r7, #104]	; 0x68
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	3308      	adds	r3, #8
 800fa8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fa8c:	623a      	str	r2, [r7, #32]
 800fa8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa90:	69f9      	ldr	r1, [r7, #28]
 800fa92:	6a3a      	ldr	r2, [r7, #32]
 800fa94:	e841 2300 	strex	r3, r2, [r1]
 800fa98:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1e5      	bne.n	800fa6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2220      	movs	r2, #32
 800faa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2220      	movs	r2, #32
 800faac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2220      	movs	r2, #32
 800fab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2200      	movs	r2, #0
 800fabc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fac0:	2303      	movs	r3, #3
 800fac2:	e010      	b.n	800fae6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	69da      	ldr	r2, [r3, #28]
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	4013      	ands	r3, r2
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	bf0c      	ite	eq
 800fad4:	2301      	moveq	r3, #1
 800fad6:	2300      	movne	r3, #0
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	461a      	mov	r2, r3
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	429a      	cmp	r2, r3
 800fae0:	f43f af46 	beq.w	800f970 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3770      	adds	r7, #112	; 0x70
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
	...

0800faf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b096      	sub	sp, #88	; 0x58
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	4613      	mov	r3, r2
 800fafc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	68ba      	ldr	r2, [r7, #8]
 800fb02:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	88fa      	ldrh	r2, [r7, #6]
 800fb08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2222      	movs	r2, #34	; 0x22
 800fb18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d02c      	beq.n	800fb7e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb28:	4a42      	ldr	r2, [pc, #264]	; (800fc34 <UART_Start_Receive_DMA+0x144>)
 800fb2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb30:	4a41      	ldr	r2, [pc, #260]	; (800fc38 <UART_Start_Receive_DMA+0x148>)
 800fb32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb38:	4a40      	ldr	r2, [pc, #256]	; (800fc3c <UART_Start_Receive_DMA+0x14c>)
 800fb3a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb40:	2200      	movs	r2, #0
 800fb42:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	3324      	adds	r3, #36	; 0x24
 800fb4e:	4619      	mov	r1, r3
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb54:	461a      	mov	r2, r3
 800fb56:	88fb      	ldrh	r3, [r7, #6]
 800fb58:	f7f5 fa3a 	bl	8004fd0 <HAL_DMA_Start_IT>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00d      	beq.n	800fb7e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2210      	movs	r2, #16
 800fb66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2220      	movs	r2, #32
 800fb76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e055      	b.n	800fc2a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	691b      	ldr	r3, [r3, #16]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d018      	beq.n	800fbc0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb96:	e853 3f00 	ldrex	r3, [r3]
 800fb9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fba2:	657b      	str	r3, [r7, #84]	; 0x54
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	461a      	mov	r2, r3
 800fbaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbac:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbae:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fbb4:	e841 2300 	strex	r3, r2, [r1]
 800fbb8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fbba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1e6      	bne.n	800fb8e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	3308      	adds	r3, #8
 800fbc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbca:	e853 3f00 	ldrex	r3, [r3]
 800fbce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd2:	f043 0301 	orr.w	r3, r3, #1
 800fbd6:	653b      	str	r3, [r7, #80]	; 0x50
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	3308      	adds	r3, #8
 800fbde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbe0:	637a      	str	r2, [r7, #52]	; 0x34
 800fbe2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbe8:	e841 2300 	strex	r3, r2, [r1]
 800fbec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d1e5      	bne.n	800fbc0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	3308      	adds	r3, #8
 800fbfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	e853 3f00 	ldrex	r3, [r3]
 800fc02:	613b      	str	r3, [r7, #16]
   return(result);
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	3308      	adds	r3, #8
 800fc12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc14:	623a      	str	r2, [r7, #32]
 800fc16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc18:	69f9      	ldr	r1, [r7, #28]
 800fc1a:	6a3a      	ldr	r2, [r7, #32]
 800fc1c:	e841 2300 	strex	r3, r2, [r1]
 800fc20:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1e5      	bne.n	800fbf4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3758      	adds	r7, #88	; 0x58
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	0800fd91 	.word	0x0800fd91
 800fc38:	0800feb3 	.word	0x0800feb3
 800fc3c:	0800feeb 	.word	0x0800feeb

0800fc40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b08f      	sub	sp, #60	; 0x3c
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	e853 3f00 	ldrex	r3, [r3]
 800fc54:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fc5c:	637b      	str	r3, [r7, #52]	; 0x34
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	461a      	mov	r2, r3
 800fc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc68:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc6e:	e841 2300 	strex	r3, r2, [r1]
 800fc72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1e6      	bne.n	800fc48 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3308      	adds	r3, #8
 800fc80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	e853 3f00 	ldrex	r3, [r3]
 800fc88:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fc90:	633b      	str	r3, [r7, #48]	; 0x30
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	3308      	adds	r3, #8
 800fc98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc9a:	61ba      	str	r2, [r7, #24]
 800fc9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9e:	6979      	ldr	r1, [r7, #20]
 800fca0:	69ba      	ldr	r2, [r7, #24]
 800fca2:	e841 2300 	strex	r3, r2, [r1]
 800fca6:	613b      	str	r3, [r7, #16]
   return(result);
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1e5      	bne.n	800fc7a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2220      	movs	r2, #32
 800fcb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800fcb6:	bf00      	nop
 800fcb8:	373c      	adds	r7, #60	; 0x3c
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
	...

0800fcc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b095      	sub	sp, #84	; 0x54
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd4:	e853 3f00 	ldrex	r3, [r3]
 800fcd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fce0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcea:	643b      	str	r3, [r7, #64]	; 0x40
 800fcec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fcf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcf2:	e841 2300 	strex	r3, r2, [r1]
 800fcf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1e6      	bne.n	800fccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	3308      	adds	r3, #8
 800fd04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	e853 3f00 	ldrex	r3, [r3]
 800fd0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd0e:	69fa      	ldr	r2, [r7, #28]
 800fd10:	4b1e      	ldr	r3, [pc, #120]	; (800fd8c <UART_EndRxTransfer+0xc8>)
 800fd12:	4013      	ands	r3, r2
 800fd14:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd26:	e841 2300 	strex	r3, r2, [r1]
 800fd2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1e5      	bne.n	800fcfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d118      	bne.n	800fd6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	e853 3f00 	ldrex	r3, [r3]
 800fd46:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	f023 0310 	bic.w	r3, r3, #16
 800fd4e:	647b      	str	r3, [r7, #68]	; 0x44
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	461a      	mov	r2, r3
 800fd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd58:	61bb      	str	r3, [r7, #24]
 800fd5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd5c:	6979      	ldr	r1, [r7, #20]
 800fd5e:	69ba      	ldr	r2, [r7, #24]
 800fd60:	e841 2300 	strex	r3, r2, [r1]
 800fd64:	613b      	str	r3, [r7, #16]
   return(result);
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d1e6      	bne.n	800fd3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2220      	movs	r2, #32
 800fd70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fd80:	bf00      	nop
 800fd82:	3754      	adds	r7, #84	; 0x54
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr
 800fd8c:	effffffe 	.word	0xeffffffe

0800fd90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b09c      	sub	sp, #112	; 0x70
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd9c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	69db      	ldr	r3, [r3, #28]
 800fda2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fda6:	d071      	beq.n	800fe8c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fda8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fdb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdb8:	e853 3f00 	ldrex	r3, [r3]
 800fdbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fdbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdc4:	66bb      	str	r3, [r7, #104]	; 0x68
 800fdc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	461a      	mov	r2, r3
 800fdcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdce:	65bb      	str	r3, [r7, #88]	; 0x58
 800fdd0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fdd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fdd6:	e841 2300 	strex	r3, r2, [r1]
 800fdda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1e6      	bne.n	800fdb0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fde2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	3308      	adds	r3, #8
 800fde8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdec:	e853 3f00 	ldrex	r3, [r3]
 800fdf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf4:	f023 0301 	bic.w	r3, r3, #1
 800fdf8:	667b      	str	r3, [r7, #100]	; 0x64
 800fdfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	3308      	adds	r3, #8
 800fe00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe02:	647a      	str	r2, [r7, #68]	; 0x44
 800fe04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe0a:	e841 2300 	strex	r3, r2, [r1]
 800fe0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d1e5      	bne.n	800fde2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	3308      	adds	r3, #8
 800fe1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe20:	e853 3f00 	ldrex	r3, [r3]
 800fe24:	623b      	str	r3, [r7, #32]
   return(result);
 800fe26:	6a3b      	ldr	r3, [r7, #32]
 800fe28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe2c:	663b      	str	r3, [r7, #96]	; 0x60
 800fe2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	3308      	adds	r3, #8
 800fe34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe36:	633a      	str	r2, [r7, #48]	; 0x30
 800fe38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe3e:	e841 2300 	strex	r3, r2, [r1]
 800fe42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d1e5      	bne.n	800fe16 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fe4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe4c:	2220      	movs	r2, #32
 800fe4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	d118      	bne.n	800fe8c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	e853 3f00 	ldrex	r3, [r3]
 800fe66:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f023 0310 	bic.w	r3, r3, #16
 800fe6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	461a      	mov	r2, r3
 800fe76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe78:	61fb      	str	r3, [r7, #28]
 800fe7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe7c:	69b9      	ldr	r1, [r7, #24]
 800fe7e:	69fa      	ldr	r2, [r7, #28]
 800fe80:	e841 2300 	strex	r3, r2, [r1]
 800fe84:	617b      	str	r3, [r7, #20]
   return(result);
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1e6      	bne.n	800fe5a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d107      	bne.n	800fea4 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe9e:	f7fe fefd 	bl	800ec9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fea2:	e002      	b.n	800feaa <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800fea4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fea6:	f7f3 f899 	bl	8002fdc <HAL_UART_RxCpltCallback>
}
 800feaa:	bf00      	nop
 800feac:	3770      	adds	r7, #112	; 0x70
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}

0800feb2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800feb2:	b580      	push	{r7, lr}
 800feb4:	b084      	sub	sp, #16
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800febe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d109      	bne.n	800fedc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fece:	085b      	lsrs	r3, r3, #1
 800fed0:	b29b      	uxth	r3, r3
 800fed2:	4619      	mov	r1, r3
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f7fe fee1 	bl	800ec9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800feda:	e002      	b.n	800fee2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fedc:	68f8      	ldr	r0, [r7, #12]
 800fede:	f7fe fec9 	bl	800ec74 <HAL_UART_RxHalfCpltCallback>
}
 800fee2:	bf00      	nop
 800fee4:	3710      	adds	r7, #16
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b086      	sub	sp, #24
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fef6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fefe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff06:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff12:	2b80      	cmp	r3, #128	; 0x80
 800ff14:	d109      	bne.n	800ff2a <UART_DMAError+0x40>
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	2b21      	cmp	r3, #33	; 0x21
 800ff1a:	d106      	bne.n	800ff2a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ff24:	6978      	ldr	r0, [r7, #20]
 800ff26:	f7ff fe8b 	bl	800fc40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	689b      	ldr	r3, [r3, #8]
 800ff30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff34:	2b40      	cmp	r3, #64	; 0x40
 800ff36:	d109      	bne.n	800ff4c <UART_DMAError+0x62>
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2b22      	cmp	r3, #34	; 0x22
 800ff3c:	d106      	bne.n	800ff4c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ff46:	6978      	ldr	r0, [r7, #20]
 800ff48:	f7ff febc 	bl	800fcc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff52:	f043 0210 	orr.w	r2, r3, #16
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff5c:	6978      	ldr	r0, [r7, #20]
 800ff5e:	f7fe fe93 	bl	800ec88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff62:	bf00      	nop
 800ff64:	3718      	adds	r7, #24
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b084      	sub	sp, #16
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2200      	movs	r2, #0
 800ff84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f7fe fe7d 	bl	800ec88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff8e:	bf00      	nop
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ff96:	b480      	push	{r7}
 800ff98:	b08f      	sub	sp, #60	; 0x3c
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffa4:	2b21      	cmp	r3, #33	; 0x21
 800ffa6:	d14c      	bne.n	8010042 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d132      	bne.n	801001a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffba:	6a3b      	ldr	r3, [r7, #32]
 800ffbc:	e853 3f00 	ldrex	r3, [r3]
 800ffc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffc8:	637b      	str	r3, [r7, #52]	; 0x34
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffd4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffda:	e841 2300 	strex	r3, r2, [r1]
 800ffde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d1e6      	bne.n	800ffb4 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	e853 3f00 	ldrex	r3, [r3]
 800fff2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fffa:	633b      	str	r3, [r7, #48]	; 0x30
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	461a      	mov	r2, r3
 8010002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010004:	61bb      	str	r3, [r7, #24]
 8010006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010008:	6979      	ldr	r1, [r7, #20]
 801000a:	69ba      	ldr	r2, [r7, #24]
 801000c:	e841 2300 	strex	r3, r2, [r1]
 8010010:	613b      	str	r3, [r7, #16]
   return(result);
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d1e6      	bne.n	800ffe6 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010018:	e013      	b.n	8010042 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801001e:	781a      	ldrb	r2, [r3, #0]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801002a:	1c5a      	adds	r2, r3, #1
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010036:	b29b      	uxth	r3, r3
 8010038:	3b01      	subs	r3, #1
 801003a:	b29a      	uxth	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010042:	bf00      	nop
 8010044:	373c      	adds	r7, #60	; 0x3c
 8010046:	46bd      	mov	sp, r7
 8010048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004c:	4770      	bx	lr

0801004e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801004e:	b480      	push	{r7}
 8010050:	b091      	sub	sp, #68	; 0x44
 8010052:	af00      	add	r7, sp, #0
 8010054:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801005c:	2b21      	cmp	r3, #33	; 0x21
 801005e:	d151      	bne.n	8010104 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010066:	b29b      	uxth	r3, r3
 8010068:	2b00      	cmp	r3, #0
 801006a:	d132      	bne.n	80100d2 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010074:	e853 3f00 	ldrex	r3, [r3]
 8010078:	623b      	str	r3, [r7, #32]
   return(result);
 801007a:	6a3b      	ldr	r3, [r7, #32]
 801007c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010080:	63bb      	str	r3, [r7, #56]	; 0x38
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	633b      	str	r3, [r7, #48]	; 0x30
 801008c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801008e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010092:	e841 2300 	strex	r3, r2, [r1]
 8010096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1e6      	bne.n	801006c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	e853 3f00 	ldrex	r3, [r3]
 80100aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100b2:	637b      	str	r3, [r7, #52]	; 0x34
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	461a      	mov	r2, r3
 80100ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100bc:	61fb      	str	r3, [r7, #28]
 80100be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c0:	69b9      	ldr	r1, [r7, #24]
 80100c2:	69fa      	ldr	r2, [r7, #28]
 80100c4:	e841 2300 	strex	r3, r2, [r1]
 80100c8:	617b      	str	r3, [r7, #20]
   return(result);
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d1e6      	bne.n	801009e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80100d0:	e018      	b.n	8010104 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80100d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100da:	881b      	ldrh	r3, [r3, #0]
 80100dc:	461a      	mov	r2, r3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80100e6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100ec:	1c9a      	adds	r2, r3, #2
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	3b01      	subs	r3, #1
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010104:	bf00      	nop
 8010106:	3744      	adds	r7, #68	; 0x44
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010110:	b480      	push	{r7}
 8010112:	b091      	sub	sp, #68	; 0x44
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801011e:	2b21      	cmp	r3, #33	; 0x21
 8010120:	d160      	bne.n	80101e4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010128:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801012a:	e057      	b.n	80101dc <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010132:	b29b      	uxth	r3, r3
 8010134:	2b00      	cmp	r3, #0
 8010136:	d133      	bne.n	80101a0 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	3308      	adds	r3, #8
 801013e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	e853 3f00 	ldrex	r3, [r3]
 8010146:	623b      	str	r3, [r7, #32]
   return(result);
 8010148:	6a3b      	ldr	r3, [r7, #32]
 801014a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801014e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	3308      	adds	r3, #8
 8010156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010158:	633a      	str	r2, [r7, #48]	; 0x30
 801015a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801015c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801015e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010160:	e841 2300 	strex	r3, r2, [r1]
 8010164:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010168:	2b00      	cmp	r3, #0
 801016a:	d1e5      	bne.n	8010138 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	e853 3f00 	ldrex	r3, [r3]
 8010178:	60fb      	str	r3, [r7, #12]
   return(result);
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010180:	637b      	str	r3, [r7, #52]	; 0x34
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	461a      	mov	r2, r3
 8010188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018a:	61fb      	str	r3, [r7, #28]
 801018c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801018e:	69b9      	ldr	r1, [r7, #24]
 8010190:	69fa      	ldr	r2, [r7, #28]
 8010192:	e841 2300 	strex	r3, r2, [r1]
 8010196:	617b      	str	r3, [r7, #20]
   return(result);
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1e6      	bne.n	801016c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801019e:	e021      	b.n	80101e4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	69db      	ldr	r3, [r3, #28]
 80101a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d013      	beq.n	80101d6 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101b2:	781a      	ldrb	r2, [r3, #0]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101be:	1c5a      	adds	r2, r3, #1
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	3b01      	subs	r3, #1
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80101d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80101d8:	3b01      	subs	r3, #1
 80101da:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80101dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d1a4      	bne.n	801012c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80101e2:	e7ff      	b.n	80101e4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80101e4:	bf00      	nop
 80101e6:	3744      	adds	r7, #68	; 0x44
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b091      	sub	sp, #68	; 0x44
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101fe:	2b21      	cmp	r3, #33	; 0x21
 8010200:	d165      	bne.n	80102ce <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010208:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801020a:	e05c      	b.n	80102c6 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010212:	b29b      	uxth	r3, r3
 8010214:	2b00      	cmp	r3, #0
 8010216:	d133      	bne.n	8010280 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	3308      	adds	r3, #8
 801021e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010220:	6a3b      	ldr	r3, [r7, #32]
 8010222:	e853 3f00 	ldrex	r3, [r3]
 8010226:	61fb      	str	r3, [r7, #28]
   return(result);
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801022e:	637b      	str	r3, [r7, #52]	; 0x34
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	3308      	adds	r3, #8
 8010236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010238:	62fa      	str	r2, [r7, #44]	; 0x2c
 801023a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801023e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010240:	e841 2300 	strex	r3, r2, [r1]
 8010244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010248:	2b00      	cmp	r3, #0
 801024a:	d1e5      	bne.n	8010218 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	e853 3f00 	ldrex	r3, [r3]
 8010258:	60bb      	str	r3, [r7, #8]
   return(result);
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010260:	633b      	str	r3, [r7, #48]	; 0x30
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	461a      	mov	r2, r3
 8010268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026a:	61bb      	str	r3, [r7, #24]
 801026c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801026e:	6979      	ldr	r1, [r7, #20]
 8010270:	69ba      	ldr	r2, [r7, #24]
 8010272:	e841 2300 	strex	r3, r2, [r1]
 8010276:	613b      	str	r3, [r7, #16]
   return(result);
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1e6      	bne.n	801024c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801027e:	e026      	b.n	80102ce <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	69db      	ldr	r3, [r3, #28]
 8010286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801028a:	2b00      	cmp	r3, #0
 801028c:	d018      	beq.n	80102c0 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010292:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	461a      	mov	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102a2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102a8:	1c9a      	adds	r2, r3, #2
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	3b01      	subs	r3, #1
 80102b8:	b29a      	uxth	r2, r3
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80102c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80102c2:	3b01      	subs	r3, #1
 80102c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80102c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d19f      	bne.n	801020c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80102cc:	e7ff      	b.n	80102ce <UART_TxISR_16BIT_FIFOEN+0xde>
 80102ce:	bf00      	nop
 80102d0:	3744      	adds	r7, #68	; 0x44
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b088      	sub	sp, #32
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	e853 3f00 	ldrex	r3, [r3]
 80102ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102f6:	61fb      	str	r3, [r7, #28]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	461a      	mov	r2, r3
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	61bb      	str	r3, [r7, #24]
 8010302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010304:	6979      	ldr	r1, [r7, #20]
 8010306:	69ba      	ldr	r2, [r7, #24]
 8010308:	e841 2300 	strex	r3, r2, [r1]
 801030c:	613b      	str	r3, [r7, #16]
   return(result);
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d1e6      	bne.n	80102e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2220      	movs	r2, #32
 8010318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7fe fc9c 	bl	800ec60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010328:	bf00      	nop
 801032a:	3720      	adds	r7, #32
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010338:	bf00      	nop
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801036c:	b480      	push	{r7}
 801036e:	b085      	sub	sp, #20
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801037a:	2b01      	cmp	r3, #1
 801037c:	d101      	bne.n	8010382 <HAL_UARTEx_DisableFifoMode+0x16>
 801037e:	2302      	movs	r3, #2
 8010380:	e027      	b.n	80103d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2201      	movs	r2, #1
 8010386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2224      	movs	r2, #36	; 0x24
 801038e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	681a      	ldr	r2, [r3, #0]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f022 0201 	bic.w	r2, r2, #1
 80103a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80103b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2220      	movs	r2, #32
 80103c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80103d0:	2300      	movs	r3, #0
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3714      	adds	r7, #20
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b084      	sub	sp, #16
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d101      	bne.n	80103f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80103f2:	2302      	movs	r3, #2
 80103f4:	e02d      	b.n	8010452 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2201      	movs	r2, #1
 80103fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2224      	movs	r2, #36	; 0x24
 8010402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	681a      	ldr	r2, [r3, #0]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f022 0201 	bic.w	r2, r2, #1
 801041c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	689b      	ldr	r3, [r3, #8]
 8010424:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	683a      	ldr	r2, [r7, #0]
 801042e:	430a      	orrs	r2, r1
 8010430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f850 	bl	80104d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2220      	movs	r2, #32
 8010444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010450:	2300      	movs	r3, #0
}
 8010452:	4618      	mov	r0, r3
 8010454:	3710      	adds	r7, #16
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}

0801045a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801045a:	b580      	push	{r7, lr}
 801045c:	b084      	sub	sp, #16
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
 8010462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801046a:	2b01      	cmp	r3, #1
 801046c:	d101      	bne.n	8010472 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801046e:	2302      	movs	r3, #2
 8010470:	e02d      	b.n	80104ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2201      	movs	r2, #1
 8010476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2224      	movs	r2, #36	; 0x24
 801047e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	681a      	ldr	r2, [r3, #0]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f022 0201 	bic.w	r2, r2, #1
 8010498:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	683a      	ldr	r2, [r7, #0]
 80104aa:	430a      	orrs	r2, r1
 80104ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 f812 	bl	80104d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	68fa      	ldr	r2, [r7, #12]
 80104ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2220      	movs	r2, #32
 80104c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
	...

080104d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80104d8:	b480      	push	{r7}
 80104da:	b085      	sub	sp, #20
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d108      	bne.n	80104fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2201      	movs	r2, #1
 80104f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80104f8:	e031      	b.n	801055e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80104fa:	2310      	movs	r3, #16
 80104fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80104fe:	2310      	movs	r3, #16
 8010500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	689b      	ldr	r3, [r3, #8]
 8010508:	0e5b      	lsrs	r3, r3, #25
 801050a:	b2db      	uxtb	r3, r3
 801050c:	f003 0307 	and.w	r3, r3, #7
 8010510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	0f5b      	lsrs	r3, r3, #29
 801051a:	b2db      	uxtb	r3, r3
 801051c:	f003 0307 	and.w	r3, r3, #7
 8010520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010522:	7bbb      	ldrb	r3, [r7, #14]
 8010524:	7b3a      	ldrb	r2, [r7, #12]
 8010526:	4911      	ldr	r1, [pc, #68]	; (801056c <UARTEx_SetNbDataToProcess+0x94>)
 8010528:	5c8a      	ldrb	r2, [r1, r2]
 801052a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801052e:	7b3a      	ldrb	r2, [r7, #12]
 8010530:	490f      	ldr	r1, [pc, #60]	; (8010570 <UARTEx_SetNbDataToProcess+0x98>)
 8010532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010534:	fb93 f3f2 	sdiv	r3, r3, r2
 8010538:	b29a      	uxth	r2, r3
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010540:	7bfb      	ldrb	r3, [r7, #15]
 8010542:	7b7a      	ldrb	r2, [r7, #13]
 8010544:	4909      	ldr	r1, [pc, #36]	; (801056c <UARTEx_SetNbDataToProcess+0x94>)
 8010546:	5c8a      	ldrb	r2, [r1, r2]
 8010548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801054c:	7b7a      	ldrb	r2, [r7, #13]
 801054e:	4908      	ldr	r1, [pc, #32]	; (8010570 <UARTEx_SetNbDataToProcess+0x98>)
 8010550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010552:	fb93 f3f2 	sdiv	r3, r3, r2
 8010556:	b29a      	uxth	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801055e:	bf00      	nop
 8010560:	3714      	adds	r7, #20
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr
 801056a:	bf00      	nop
 801056c:	080124dc 	.word	0x080124dc
 8010570:	080124e4 	.word	0x080124e4

08010574 <atoi>:
 8010574:	220a      	movs	r2, #10
 8010576:	2100      	movs	r1, #0
 8010578:	f000 b8e2 	b.w	8010740 <strtol>

0801057c <__errno>:
 801057c:	4b01      	ldr	r3, [pc, #4]	; (8010584 <__errno+0x8>)
 801057e:	6818      	ldr	r0, [r3, #0]
 8010580:	4770      	bx	lr
 8010582:	bf00      	nop
 8010584:	2400003c 	.word	0x2400003c

08010588 <__libc_init_array>:
 8010588:	b570      	push	{r4, r5, r6, lr}
 801058a:	4d0d      	ldr	r5, [pc, #52]	; (80105c0 <__libc_init_array+0x38>)
 801058c:	4c0d      	ldr	r4, [pc, #52]	; (80105c4 <__libc_init_array+0x3c>)
 801058e:	1b64      	subs	r4, r4, r5
 8010590:	10a4      	asrs	r4, r4, #2
 8010592:	2600      	movs	r6, #0
 8010594:	42a6      	cmp	r6, r4
 8010596:	d109      	bne.n	80105ac <__libc_init_array+0x24>
 8010598:	4d0b      	ldr	r5, [pc, #44]	; (80105c8 <__libc_init_array+0x40>)
 801059a:	4c0c      	ldr	r4, [pc, #48]	; (80105cc <__libc_init_array+0x44>)
 801059c:	f001 ff72 	bl	8012484 <_init>
 80105a0:	1b64      	subs	r4, r4, r5
 80105a2:	10a4      	asrs	r4, r4, #2
 80105a4:	2600      	movs	r6, #0
 80105a6:	42a6      	cmp	r6, r4
 80105a8:	d105      	bne.n	80105b6 <__libc_init_array+0x2e>
 80105aa:	bd70      	pop	{r4, r5, r6, pc}
 80105ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80105b0:	4798      	blx	r3
 80105b2:	3601      	adds	r6, #1
 80105b4:	e7ee      	b.n	8010594 <__libc_init_array+0xc>
 80105b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80105ba:	4798      	blx	r3
 80105bc:	3601      	adds	r6, #1
 80105be:	e7f2      	b.n	80105a6 <__libc_init_array+0x1e>
 80105c0:	080140b8 	.word	0x080140b8
 80105c4:	080140b8 	.word	0x080140b8
 80105c8:	080140b8 	.word	0x080140b8
 80105cc:	080140bc 	.word	0x080140bc

080105d0 <memcpy>:
 80105d0:	440a      	add	r2, r1
 80105d2:	4291      	cmp	r1, r2
 80105d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80105d8:	d100      	bne.n	80105dc <memcpy+0xc>
 80105da:	4770      	bx	lr
 80105dc:	b510      	push	{r4, lr}
 80105de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105e6:	4291      	cmp	r1, r2
 80105e8:	d1f9      	bne.n	80105de <memcpy+0xe>
 80105ea:	bd10      	pop	{r4, pc}

080105ec <memset>:
 80105ec:	4402      	add	r2, r0
 80105ee:	4603      	mov	r3, r0
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d100      	bne.n	80105f6 <memset+0xa>
 80105f4:	4770      	bx	lr
 80105f6:	f803 1b01 	strb.w	r1, [r3], #1
 80105fa:	e7f9      	b.n	80105f0 <memset+0x4>

080105fc <siprintf>:
 80105fc:	b40e      	push	{r1, r2, r3}
 80105fe:	b500      	push	{lr}
 8010600:	b09c      	sub	sp, #112	; 0x70
 8010602:	ab1d      	add	r3, sp, #116	; 0x74
 8010604:	9002      	str	r0, [sp, #8]
 8010606:	9006      	str	r0, [sp, #24]
 8010608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801060c:	4809      	ldr	r0, [pc, #36]	; (8010634 <siprintf+0x38>)
 801060e:	9107      	str	r1, [sp, #28]
 8010610:	9104      	str	r1, [sp, #16]
 8010612:	4909      	ldr	r1, [pc, #36]	; (8010638 <siprintf+0x3c>)
 8010614:	f853 2b04 	ldr.w	r2, [r3], #4
 8010618:	9105      	str	r1, [sp, #20]
 801061a:	6800      	ldr	r0, [r0, #0]
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	a902      	add	r1, sp, #8
 8010620:	f000 f8f4 	bl	801080c <_svfiprintf_r>
 8010624:	9b02      	ldr	r3, [sp, #8]
 8010626:	2200      	movs	r2, #0
 8010628:	701a      	strb	r2, [r3, #0]
 801062a:	b01c      	add	sp, #112	; 0x70
 801062c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010630:	b003      	add	sp, #12
 8010632:	4770      	bx	lr
 8010634:	2400003c 	.word	0x2400003c
 8010638:	ffff0208 	.word	0xffff0208

0801063c <_strtol_l.constprop.0>:
 801063c:	2b01      	cmp	r3, #1
 801063e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010642:	d001      	beq.n	8010648 <_strtol_l.constprop.0+0xc>
 8010644:	2b24      	cmp	r3, #36	; 0x24
 8010646:	d906      	bls.n	8010656 <_strtol_l.constprop.0+0x1a>
 8010648:	f7ff ff98 	bl	801057c <__errno>
 801064c:	2316      	movs	r3, #22
 801064e:	6003      	str	r3, [r0, #0]
 8010650:	2000      	movs	r0, #0
 8010652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010656:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801073c <_strtol_l.constprop.0+0x100>
 801065a:	460d      	mov	r5, r1
 801065c:	462e      	mov	r6, r5
 801065e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010662:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010666:	f017 0708 	ands.w	r7, r7, #8
 801066a:	d1f7      	bne.n	801065c <_strtol_l.constprop.0+0x20>
 801066c:	2c2d      	cmp	r4, #45	; 0x2d
 801066e:	d132      	bne.n	80106d6 <_strtol_l.constprop.0+0x9a>
 8010670:	782c      	ldrb	r4, [r5, #0]
 8010672:	2701      	movs	r7, #1
 8010674:	1cb5      	adds	r5, r6, #2
 8010676:	2b00      	cmp	r3, #0
 8010678:	d05b      	beq.n	8010732 <_strtol_l.constprop.0+0xf6>
 801067a:	2b10      	cmp	r3, #16
 801067c:	d109      	bne.n	8010692 <_strtol_l.constprop.0+0x56>
 801067e:	2c30      	cmp	r4, #48	; 0x30
 8010680:	d107      	bne.n	8010692 <_strtol_l.constprop.0+0x56>
 8010682:	782c      	ldrb	r4, [r5, #0]
 8010684:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010688:	2c58      	cmp	r4, #88	; 0x58
 801068a:	d14d      	bne.n	8010728 <_strtol_l.constprop.0+0xec>
 801068c:	786c      	ldrb	r4, [r5, #1]
 801068e:	2310      	movs	r3, #16
 8010690:	3502      	adds	r5, #2
 8010692:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010696:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801069a:	f04f 0c00 	mov.w	ip, #0
 801069e:	fbb8 f9f3 	udiv	r9, r8, r3
 80106a2:	4666      	mov	r6, ip
 80106a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80106a8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80106ac:	f1be 0f09 	cmp.w	lr, #9
 80106b0:	d816      	bhi.n	80106e0 <_strtol_l.constprop.0+0xa4>
 80106b2:	4674      	mov	r4, lr
 80106b4:	42a3      	cmp	r3, r4
 80106b6:	dd24      	ble.n	8010702 <_strtol_l.constprop.0+0xc6>
 80106b8:	f1bc 0f00 	cmp.w	ip, #0
 80106bc:	db1e      	blt.n	80106fc <_strtol_l.constprop.0+0xc0>
 80106be:	45b1      	cmp	r9, r6
 80106c0:	d31c      	bcc.n	80106fc <_strtol_l.constprop.0+0xc0>
 80106c2:	d101      	bne.n	80106c8 <_strtol_l.constprop.0+0x8c>
 80106c4:	45a2      	cmp	sl, r4
 80106c6:	db19      	blt.n	80106fc <_strtol_l.constprop.0+0xc0>
 80106c8:	fb06 4603 	mla	r6, r6, r3, r4
 80106cc:	f04f 0c01 	mov.w	ip, #1
 80106d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106d4:	e7e8      	b.n	80106a8 <_strtol_l.constprop.0+0x6c>
 80106d6:	2c2b      	cmp	r4, #43	; 0x2b
 80106d8:	bf04      	itt	eq
 80106da:	782c      	ldrbeq	r4, [r5, #0]
 80106dc:	1cb5      	addeq	r5, r6, #2
 80106de:	e7ca      	b.n	8010676 <_strtol_l.constprop.0+0x3a>
 80106e0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80106e4:	f1be 0f19 	cmp.w	lr, #25
 80106e8:	d801      	bhi.n	80106ee <_strtol_l.constprop.0+0xb2>
 80106ea:	3c37      	subs	r4, #55	; 0x37
 80106ec:	e7e2      	b.n	80106b4 <_strtol_l.constprop.0+0x78>
 80106ee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80106f2:	f1be 0f19 	cmp.w	lr, #25
 80106f6:	d804      	bhi.n	8010702 <_strtol_l.constprop.0+0xc6>
 80106f8:	3c57      	subs	r4, #87	; 0x57
 80106fa:	e7db      	b.n	80106b4 <_strtol_l.constprop.0+0x78>
 80106fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010700:	e7e6      	b.n	80106d0 <_strtol_l.constprop.0+0x94>
 8010702:	f1bc 0f00 	cmp.w	ip, #0
 8010706:	da05      	bge.n	8010714 <_strtol_l.constprop.0+0xd8>
 8010708:	2322      	movs	r3, #34	; 0x22
 801070a:	6003      	str	r3, [r0, #0]
 801070c:	4646      	mov	r6, r8
 801070e:	b942      	cbnz	r2, 8010722 <_strtol_l.constprop.0+0xe6>
 8010710:	4630      	mov	r0, r6
 8010712:	e79e      	b.n	8010652 <_strtol_l.constprop.0+0x16>
 8010714:	b107      	cbz	r7, 8010718 <_strtol_l.constprop.0+0xdc>
 8010716:	4276      	negs	r6, r6
 8010718:	2a00      	cmp	r2, #0
 801071a:	d0f9      	beq.n	8010710 <_strtol_l.constprop.0+0xd4>
 801071c:	f1bc 0f00 	cmp.w	ip, #0
 8010720:	d000      	beq.n	8010724 <_strtol_l.constprop.0+0xe8>
 8010722:	1e69      	subs	r1, r5, #1
 8010724:	6011      	str	r1, [r2, #0]
 8010726:	e7f3      	b.n	8010710 <_strtol_l.constprop.0+0xd4>
 8010728:	2430      	movs	r4, #48	; 0x30
 801072a:	2b00      	cmp	r3, #0
 801072c:	d1b1      	bne.n	8010692 <_strtol_l.constprop.0+0x56>
 801072e:	2308      	movs	r3, #8
 8010730:	e7af      	b.n	8010692 <_strtol_l.constprop.0+0x56>
 8010732:	2c30      	cmp	r4, #48	; 0x30
 8010734:	d0a5      	beq.n	8010682 <_strtol_l.constprop.0+0x46>
 8010736:	230a      	movs	r3, #10
 8010738:	e7ab      	b.n	8010692 <_strtol_l.constprop.0+0x56>
 801073a:	bf00      	nop
 801073c:	080124ed 	.word	0x080124ed

08010740 <strtol>:
 8010740:	4613      	mov	r3, r2
 8010742:	460a      	mov	r2, r1
 8010744:	4601      	mov	r1, r0
 8010746:	4802      	ldr	r0, [pc, #8]	; (8010750 <strtol+0x10>)
 8010748:	6800      	ldr	r0, [r0, #0]
 801074a:	f7ff bf77 	b.w	801063c <_strtol_l.constprop.0>
 801074e:	bf00      	nop
 8010750:	2400003c 	.word	0x2400003c

08010754 <__ssputs_r>:
 8010754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010758:	688e      	ldr	r6, [r1, #8]
 801075a:	429e      	cmp	r6, r3
 801075c:	4682      	mov	sl, r0
 801075e:	460c      	mov	r4, r1
 8010760:	4690      	mov	r8, r2
 8010762:	461f      	mov	r7, r3
 8010764:	d838      	bhi.n	80107d8 <__ssputs_r+0x84>
 8010766:	898a      	ldrh	r2, [r1, #12]
 8010768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801076c:	d032      	beq.n	80107d4 <__ssputs_r+0x80>
 801076e:	6825      	ldr	r5, [r4, #0]
 8010770:	6909      	ldr	r1, [r1, #16]
 8010772:	eba5 0901 	sub.w	r9, r5, r1
 8010776:	6965      	ldr	r5, [r4, #20]
 8010778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801077c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010780:	3301      	adds	r3, #1
 8010782:	444b      	add	r3, r9
 8010784:	106d      	asrs	r5, r5, #1
 8010786:	429d      	cmp	r5, r3
 8010788:	bf38      	it	cc
 801078a:	461d      	movcc	r5, r3
 801078c:	0553      	lsls	r3, r2, #21
 801078e:	d531      	bpl.n	80107f4 <__ssputs_r+0xa0>
 8010790:	4629      	mov	r1, r5
 8010792:	f000 fb55 	bl	8010e40 <_malloc_r>
 8010796:	4606      	mov	r6, r0
 8010798:	b950      	cbnz	r0, 80107b0 <__ssputs_r+0x5c>
 801079a:	230c      	movs	r3, #12
 801079c:	f8ca 3000 	str.w	r3, [sl]
 80107a0:	89a3      	ldrh	r3, [r4, #12]
 80107a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107a6:	81a3      	strh	r3, [r4, #12]
 80107a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b0:	6921      	ldr	r1, [r4, #16]
 80107b2:	464a      	mov	r2, r9
 80107b4:	f7ff ff0c 	bl	80105d0 <memcpy>
 80107b8:	89a3      	ldrh	r3, [r4, #12]
 80107ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80107be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107c2:	81a3      	strh	r3, [r4, #12]
 80107c4:	6126      	str	r6, [r4, #16]
 80107c6:	6165      	str	r5, [r4, #20]
 80107c8:	444e      	add	r6, r9
 80107ca:	eba5 0509 	sub.w	r5, r5, r9
 80107ce:	6026      	str	r6, [r4, #0]
 80107d0:	60a5      	str	r5, [r4, #8]
 80107d2:	463e      	mov	r6, r7
 80107d4:	42be      	cmp	r6, r7
 80107d6:	d900      	bls.n	80107da <__ssputs_r+0x86>
 80107d8:	463e      	mov	r6, r7
 80107da:	6820      	ldr	r0, [r4, #0]
 80107dc:	4632      	mov	r2, r6
 80107de:	4641      	mov	r1, r8
 80107e0:	f000 faa8 	bl	8010d34 <memmove>
 80107e4:	68a3      	ldr	r3, [r4, #8]
 80107e6:	1b9b      	subs	r3, r3, r6
 80107e8:	60a3      	str	r3, [r4, #8]
 80107ea:	6823      	ldr	r3, [r4, #0]
 80107ec:	4433      	add	r3, r6
 80107ee:	6023      	str	r3, [r4, #0]
 80107f0:	2000      	movs	r0, #0
 80107f2:	e7db      	b.n	80107ac <__ssputs_r+0x58>
 80107f4:	462a      	mov	r2, r5
 80107f6:	f000 fb97 	bl	8010f28 <_realloc_r>
 80107fa:	4606      	mov	r6, r0
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d1e1      	bne.n	80107c4 <__ssputs_r+0x70>
 8010800:	6921      	ldr	r1, [r4, #16]
 8010802:	4650      	mov	r0, sl
 8010804:	f000 fab0 	bl	8010d68 <_free_r>
 8010808:	e7c7      	b.n	801079a <__ssputs_r+0x46>
	...

0801080c <_svfiprintf_r>:
 801080c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010810:	4698      	mov	r8, r3
 8010812:	898b      	ldrh	r3, [r1, #12]
 8010814:	061b      	lsls	r3, r3, #24
 8010816:	b09d      	sub	sp, #116	; 0x74
 8010818:	4607      	mov	r7, r0
 801081a:	460d      	mov	r5, r1
 801081c:	4614      	mov	r4, r2
 801081e:	d50e      	bpl.n	801083e <_svfiprintf_r+0x32>
 8010820:	690b      	ldr	r3, [r1, #16]
 8010822:	b963      	cbnz	r3, 801083e <_svfiprintf_r+0x32>
 8010824:	2140      	movs	r1, #64	; 0x40
 8010826:	f000 fb0b 	bl	8010e40 <_malloc_r>
 801082a:	6028      	str	r0, [r5, #0]
 801082c:	6128      	str	r0, [r5, #16]
 801082e:	b920      	cbnz	r0, 801083a <_svfiprintf_r+0x2e>
 8010830:	230c      	movs	r3, #12
 8010832:	603b      	str	r3, [r7, #0]
 8010834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010838:	e0d1      	b.n	80109de <_svfiprintf_r+0x1d2>
 801083a:	2340      	movs	r3, #64	; 0x40
 801083c:	616b      	str	r3, [r5, #20]
 801083e:	2300      	movs	r3, #0
 8010840:	9309      	str	r3, [sp, #36]	; 0x24
 8010842:	2320      	movs	r3, #32
 8010844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010848:	f8cd 800c 	str.w	r8, [sp, #12]
 801084c:	2330      	movs	r3, #48	; 0x30
 801084e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80109f8 <_svfiprintf_r+0x1ec>
 8010852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010856:	f04f 0901 	mov.w	r9, #1
 801085a:	4623      	mov	r3, r4
 801085c:	469a      	mov	sl, r3
 801085e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010862:	b10a      	cbz	r2, 8010868 <_svfiprintf_r+0x5c>
 8010864:	2a25      	cmp	r2, #37	; 0x25
 8010866:	d1f9      	bne.n	801085c <_svfiprintf_r+0x50>
 8010868:	ebba 0b04 	subs.w	fp, sl, r4
 801086c:	d00b      	beq.n	8010886 <_svfiprintf_r+0x7a>
 801086e:	465b      	mov	r3, fp
 8010870:	4622      	mov	r2, r4
 8010872:	4629      	mov	r1, r5
 8010874:	4638      	mov	r0, r7
 8010876:	f7ff ff6d 	bl	8010754 <__ssputs_r>
 801087a:	3001      	adds	r0, #1
 801087c:	f000 80aa 	beq.w	80109d4 <_svfiprintf_r+0x1c8>
 8010880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010882:	445a      	add	r2, fp
 8010884:	9209      	str	r2, [sp, #36]	; 0x24
 8010886:	f89a 3000 	ldrb.w	r3, [sl]
 801088a:	2b00      	cmp	r3, #0
 801088c:	f000 80a2 	beq.w	80109d4 <_svfiprintf_r+0x1c8>
 8010890:	2300      	movs	r3, #0
 8010892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801089a:	f10a 0a01 	add.w	sl, sl, #1
 801089e:	9304      	str	r3, [sp, #16]
 80108a0:	9307      	str	r3, [sp, #28]
 80108a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108a6:	931a      	str	r3, [sp, #104]	; 0x68
 80108a8:	4654      	mov	r4, sl
 80108aa:	2205      	movs	r2, #5
 80108ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108b0:	4851      	ldr	r0, [pc, #324]	; (80109f8 <_svfiprintf_r+0x1ec>)
 80108b2:	f7ef fd1d 	bl	80002f0 <memchr>
 80108b6:	9a04      	ldr	r2, [sp, #16]
 80108b8:	b9d8      	cbnz	r0, 80108f2 <_svfiprintf_r+0xe6>
 80108ba:	06d0      	lsls	r0, r2, #27
 80108bc:	bf44      	itt	mi
 80108be:	2320      	movmi	r3, #32
 80108c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108c4:	0711      	lsls	r1, r2, #28
 80108c6:	bf44      	itt	mi
 80108c8:	232b      	movmi	r3, #43	; 0x2b
 80108ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108ce:	f89a 3000 	ldrb.w	r3, [sl]
 80108d2:	2b2a      	cmp	r3, #42	; 0x2a
 80108d4:	d015      	beq.n	8010902 <_svfiprintf_r+0xf6>
 80108d6:	9a07      	ldr	r2, [sp, #28]
 80108d8:	4654      	mov	r4, sl
 80108da:	2000      	movs	r0, #0
 80108dc:	f04f 0c0a 	mov.w	ip, #10
 80108e0:	4621      	mov	r1, r4
 80108e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108e6:	3b30      	subs	r3, #48	; 0x30
 80108e8:	2b09      	cmp	r3, #9
 80108ea:	d94e      	bls.n	801098a <_svfiprintf_r+0x17e>
 80108ec:	b1b0      	cbz	r0, 801091c <_svfiprintf_r+0x110>
 80108ee:	9207      	str	r2, [sp, #28]
 80108f0:	e014      	b.n	801091c <_svfiprintf_r+0x110>
 80108f2:	eba0 0308 	sub.w	r3, r0, r8
 80108f6:	fa09 f303 	lsl.w	r3, r9, r3
 80108fa:	4313      	orrs	r3, r2
 80108fc:	9304      	str	r3, [sp, #16]
 80108fe:	46a2      	mov	sl, r4
 8010900:	e7d2      	b.n	80108a8 <_svfiprintf_r+0x9c>
 8010902:	9b03      	ldr	r3, [sp, #12]
 8010904:	1d19      	adds	r1, r3, #4
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	9103      	str	r1, [sp, #12]
 801090a:	2b00      	cmp	r3, #0
 801090c:	bfbb      	ittet	lt
 801090e:	425b      	neglt	r3, r3
 8010910:	f042 0202 	orrlt.w	r2, r2, #2
 8010914:	9307      	strge	r3, [sp, #28]
 8010916:	9307      	strlt	r3, [sp, #28]
 8010918:	bfb8      	it	lt
 801091a:	9204      	strlt	r2, [sp, #16]
 801091c:	7823      	ldrb	r3, [r4, #0]
 801091e:	2b2e      	cmp	r3, #46	; 0x2e
 8010920:	d10c      	bne.n	801093c <_svfiprintf_r+0x130>
 8010922:	7863      	ldrb	r3, [r4, #1]
 8010924:	2b2a      	cmp	r3, #42	; 0x2a
 8010926:	d135      	bne.n	8010994 <_svfiprintf_r+0x188>
 8010928:	9b03      	ldr	r3, [sp, #12]
 801092a:	1d1a      	adds	r2, r3, #4
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	9203      	str	r2, [sp, #12]
 8010930:	2b00      	cmp	r3, #0
 8010932:	bfb8      	it	lt
 8010934:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010938:	3402      	adds	r4, #2
 801093a:	9305      	str	r3, [sp, #20]
 801093c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010a08 <_svfiprintf_r+0x1fc>
 8010940:	7821      	ldrb	r1, [r4, #0]
 8010942:	2203      	movs	r2, #3
 8010944:	4650      	mov	r0, sl
 8010946:	f7ef fcd3 	bl	80002f0 <memchr>
 801094a:	b140      	cbz	r0, 801095e <_svfiprintf_r+0x152>
 801094c:	2340      	movs	r3, #64	; 0x40
 801094e:	eba0 000a 	sub.w	r0, r0, sl
 8010952:	fa03 f000 	lsl.w	r0, r3, r0
 8010956:	9b04      	ldr	r3, [sp, #16]
 8010958:	4303      	orrs	r3, r0
 801095a:	3401      	adds	r4, #1
 801095c:	9304      	str	r3, [sp, #16]
 801095e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010962:	4826      	ldr	r0, [pc, #152]	; (80109fc <_svfiprintf_r+0x1f0>)
 8010964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010968:	2206      	movs	r2, #6
 801096a:	f7ef fcc1 	bl	80002f0 <memchr>
 801096e:	2800      	cmp	r0, #0
 8010970:	d038      	beq.n	80109e4 <_svfiprintf_r+0x1d8>
 8010972:	4b23      	ldr	r3, [pc, #140]	; (8010a00 <_svfiprintf_r+0x1f4>)
 8010974:	bb1b      	cbnz	r3, 80109be <_svfiprintf_r+0x1b2>
 8010976:	9b03      	ldr	r3, [sp, #12]
 8010978:	3307      	adds	r3, #7
 801097a:	f023 0307 	bic.w	r3, r3, #7
 801097e:	3308      	adds	r3, #8
 8010980:	9303      	str	r3, [sp, #12]
 8010982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010984:	4433      	add	r3, r6
 8010986:	9309      	str	r3, [sp, #36]	; 0x24
 8010988:	e767      	b.n	801085a <_svfiprintf_r+0x4e>
 801098a:	fb0c 3202 	mla	r2, ip, r2, r3
 801098e:	460c      	mov	r4, r1
 8010990:	2001      	movs	r0, #1
 8010992:	e7a5      	b.n	80108e0 <_svfiprintf_r+0xd4>
 8010994:	2300      	movs	r3, #0
 8010996:	3401      	adds	r4, #1
 8010998:	9305      	str	r3, [sp, #20]
 801099a:	4619      	mov	r1, r3
 801099c:	f04f 0c0a 	mov.w	ip, #10
 80109a0:	4620      	mov	r0, r4
 80109a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109a6:	3a30      	subs	r2, #48	; 0x30
 80109a8:	2a09      	cmp	r2, #9
 80109aa:	d903      	bls.n	80109b4 <_svfiprintf_r+0x1a8>
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d0c5      	beq.n	801093c <_svfiprintf_r+0x130>
 80109b0:	9105      	str	r1, [sp, #20]
 80109b2:	e7c3      	b.n	801093c <_svfiprintf_r+0x130>
 80109b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80109b8:	4604      	mov	r4, r0
 80109ba:	2301      	movs	r3, #1
 80109bc:	e7f0      	b.n	80109a0 <_svfiprintf_r+0x194>
 80109be:	ab03      	add	r3, sp, #12
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	462a      	mov	r2, r5
 80109c4:	4b0f      	ldr	r3, [pc, #60]	; (8010a04 <_svfiprintf_r+0x1f8>)
 80109c6:	a904      	add	r1, sp, #16
 80109c8:	4638      	mov	r0, r7
 80109ca:	f3af 8000 	nop.w
 80109ce:	1c42      	adds	r2, r0, #1
 80109d0:	4606      	mov	r6, r0
 80109d2:	d1d6      	bne.n	8010982 <_svfiprintf_r+0x176>
 80109d4:	89ab      	ldrh	r3, [r5, #12]
 80109d6:	065b      	lsls	r3, r3, #25
 80109d8:	f53f af2c 	bmi.w	8010834 <_svfiprintf_r+0x28>
 80109dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109de:	b01d      	add	sp, #116	; 0x74
 80109e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e4:	ab03      	add	r3, sp, #12
 80109e6:	9300      	str	r3, [sp, #0]
 80109e8:	462a      	mov	r2, r5
 80109ea:	4b06      	ldr	r3, [pc, #24]	; (8010a04 <_svfiprintf_r+0x1f8>)
 80109ec:	a904      	add	r1, sp, #16
 80109ee:	4638      	mov	r0, r7
 80109f0:	f000 f87a 	bl	8010ae8 <_printf_i>
 80109f4:	e7eb      	b.n	80109ce <_svfiprintf_r+0x1c2>
 80109f6:	bf00      	nop
 80109f8:	080125ed 	.word	0x080125ed
 80109fc:	080125f7 	.word	0x080125f7
 8010a00:	00000000 	.word	0x00000000
 8010a04:	08010755 	.word	0x08010755
 8010a08:	080125f3 	.word	0x080125f3

08010a0c <_printf_common>:
 8010a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a10:	4616      	mov	r6, r2
 8010a12:	4699      	mov	r9, r3
 8010a14:	688a      	ldr	r2, [r1, #8]
 8010a16:	690b      	ldr	r3, [r1, #16]
 8010a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	bfb8      	it	lt
 8010a20:	4613      	movlt	r3, r2
 8010a22:	6033      	str	r3, [r6, #0]
 8010a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a28:	4607      	mov	r7, r0
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	b10a      	cbz	r2, 8010a32 <_printf_common+0x26>
 8010a2e:	3301      	adds	r3, #1
 8010a30:	6033      	str	r3, [r6, #0]
 8010a32:	6823      	ldr	r3, [r4, #0]
 8010a34:	0699      	lsls	r1, r3, #26
 8010a36:	bf42      	ittt	mi
 8010a38:	6833      	ldrmi	r3, [r6, #0]
 8010a3a:	3302      	addmi	r3, #2
 8010a3c:	6033      	strmi	r3, [r6, #0]
 8010a3e:	6825      	ldr	r5, [r4, #0]
 8010a40:	f015 0506 	ands.w	r5, r5, #6
 8010a44:	d106      	bne.n	8010a54 <_printf_common+0x48>
 8010a46:	f104 0a19 	add.w	sl, r4, #25
 8010a4a:	68e3      	ldr	r3, [r4, #12]
 8010a4c:	6832      	ldr	r2, [r6, #0]
 8010a4e:	1a9b      	subs	r3, r3, r2
 8010a50:	42ab      	cmp	r3, r5
 8010a52:	dc26      	bgt.n	8010aa2 <_printf_common+0x96>
 8010a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010a58:	1e13      	subs	r3, r2, #0
 8010a5a:	6822      	ldr	r2, [r4, #0]
 8010a5c:	bf18      	it	ne
 8010a5e:	2301      	movne	r3, #1
 8010a60:	0692      	lsls	r2, r2, #26
 8010a62:	d42b      	bmi.n	8010abc <_printf_common+0xb0>
 8010a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a68:	4649      	mov	r1, r9
 8010a6a:	4638      	mov	r0, r7
 8010a6c:	47c0      	blx	r8
 8010a6e:	3001      	adds	r0, #1
 8010a70:	d01e      	beq.n	8010ab0 <_printf_common+0xa4>
 8010a72:	6823      	ldr	r3, [r4, #0]
 8010a74:	68e5      	ldr	r5, [r4, #12]
 8010a76:	6832      	ldr	r2, [r6, #0]
 8010a78:	f003 0306 	and.w	r3, r3, #6
 8010a7c:	2b04      	cmp	r3, #4
 8010a7e:	bf08      	it	eq
 8010a80:	1aad      	subeq	r5, r5, r2
 8010a82:	68a3      	ldr	r3, [r4, #8]
 8010a84:	6922      	ldr	r2, [r4, #16]
 8010a86:	bf0c      	ite	eq
 8010a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a8c:	2500      	movne	r5, #0
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	bfc4      	itt	gt
 8010a92:	1a9b      	subgt	r3, r3, r2
 8010a94:	18ed      	addgt	r5, r5, r3
 8010a96:	2600      	movs	r6, #0
 8010a98:	341a      	adds	r4, #26
 8010a9a:	42b5      	cmp	r5, r6
 8010a9c:	d11a      	bne.n	8010ad4 <_printf_common+0xc8>
 8010a9e:	2000      	movs	r0, #0
 8010aa0:	e008      	b.n	8010ab4 <_printf_common+0xa8>
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	4652      	mov	r2, sl
 8010aa6:	4649      	mov	r1, r9
 8010aa8:	4638      	mov	r0, r7
 8010aaa:	47c0      	blx	r8
 8010aac:	3001      	adds	r0, #1
 8010aae:	d103      	bne.n	8010ab8 <_printf_common+0xac>
 8010ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab8:	3501      	adds	r5, #1
 8010aba:	e7c6      	b.n	8010a4a <_printf_common+0x3e>
 8010abc:	18e1      	adds	r1, r4, r3
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	2030      	movs	r0, #48	; 0x30
 8010ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ac6:	4422      	add	r2, r4
 8010ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ad0:	3302      	adds	r3, #2
 8010ad2:	e7c7      	b.n	8010a64 <_printf_common+0x58>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	4622      	mov	r2, r4
 8010ad8:	4649      	mov	r1, r9
 8010ada:	4638      	mov	r0, r7
 8010adc:	47c0      	blx	r8
 8010ade:	3001      	adds	r0, #1
 8010ae0:	d0e6      	beq.n	8010ab0 <_printf_common+0xa4>
 8010ae2:	3601      	adds	r6, #1
 8010ae4:	e7d9      	b.n	8010a9a <_printf_common+0x8e>
	...

08010ae8 <_printf_i>:
 8010ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010aec:	7e0f      	ldrb	r7, [r1, #24]
 8010aee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010af0:	2f78      	cmp	r7, #120	; 0x78
 8010af2:	4691      	mov	r9, r2
 8010af4:	4680      	mov	r8, r0
 8010af6:	460c      	mov	r4, r1
 8010af8:	469a      	mov	sl, r3
 8010afa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010afe:	d807      	bhi.n	8010b10 <_printf_i+0x28>
 8010b00:	2f62      	cmp	r7, #98	; 0x62
 8010b02:	d80a      	bhi.n	8010b1a <_printf_i+0x32>
 8010b04:	2f00      	cmp	r7, #0
 8010b06:	f000 80d8 	beq.w	8010cba <_printf_i+0x1d2>
 8010b0a:	2f58      	cmp	r7, #88	; 0x58
 8010b0c:	f000 80a3 	beq.w	8010c56 <_printf_i+0x16e>
 8010b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b18:	e03a      	b.n	8010b90 <_printf_i+0xa8>
 8010b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b1e:	2b15      	cmp	r3, #21
 8010b20:	d8f6      	bhi.n	8010b10 <_printf_i+0x28>
 8010b22:	a101      	add	r1, pc, #4	; (adr r1, 8010b28 <_printf_i+0x40>)
 8010b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b28:	08010b81 	.word	0x08010b81
 8010b2c:	08010b95 	.word	0x08010b95
 8010b30:	08010b11 	.word	0x08010b11
 8010b34:	08010b11 	.word	0x08010b11
 8010b38:	08010b11 	.word	0x08010b11
 8010b3c:	08010b11 	.word	0x08010b11
 8010b40:	08010b95 	.word	0x08010b95
 8010b44:	08010b11 	.word	0x08010b11
 8010b48:	08010b11 	.word	0x08010b11
 8010b4c:	08010b11 	.word	0x08010b11
 8010b50:	08010b11 	.word	0x08010b11
 8010b54:	08010ca1 	.word	0x08010ca1
 8010b58:	08010bc5 	.word	0x08010bc5
 8010b5c:	08010c83 	.word	0x08010c83
 8010b60:	08010b11 	.word	0x08010b11
 8010b64:	08010b11 	.word	0x08010b11
 8010b68:	08010cc3 	.word	0x08010cc3
 8010b6c:	08010b11 	.word	0x08010b11
 8010b70:	08010bc5 	.word	0x08010bc5
 8010b74:	08010b11 	.word	0x08010b11
 8010b78:	08010b11 	.word	0x08010b11
 8010b7c:	08010c8b 	.word	0x08010c8b
 8010b80:	682b      	ldr	r3, [r5, #0]
 8010b82:	1d1a      	adds	r2, r3, #4
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	602a      	str	r2, [r5, #0]
 8010b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b90:	2301      	movs	r3, #1
 8010b92:	e0a3      	b.n	8010cdc <_printf_i+0x1f4>
 8010b94:	6820      	ldr	r0, [r4, #0]
 8010b96:	6829      	ldr	r1, [r5, #0]
 8010b98:	0606      	lsls	r6, r0, #24
 8010b9a:	f101 0304 	add.w	r3, r1, #4
 8010b9e:	d50a      	bpl.n	8010bb6 <_printf_i+0xce>
 8010ba0:	680e      	ldr	r6, [r1, #0]
 8010ba2:	602b      	str	r3, [r5, #0]
 8010ba4:	2e00      	cmp	r6, #0
 8010ba6:	da03      	bge.n	8010bb0 <_printf_i+0xc8>
 8010ba8:	232d      	movs	r3, #45	; 0x2d
 8010baa:	4276      	negs	r6, r6
 8010bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bb0:	485e      	ldr	r0, [pc, #376]	; (8010d2c <_printf_i+0x244>)
 8010bb2:	230a      	movs	r3, #10
 8010bb4:	e019      	b.n	8010bea <_printf_i+0x102>
 8010bb6:	680e      	ldr	r6, [r1, #0]
 8010bb8:	602b      	str	r3, [r5, #0]
 8010bba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010bbe:	bf18      	it	ne
 8010bc0:	b236      	sxthne	r6, r6
 8010bc2:	e7ef      	b.n	8010ba4 <_printf_i+0xbc>
 8010bc4:	682b      	ldr	r3, [r5, #0]
 8010bc6:	6820      	ldr	r0, [r4, #0]
 8010bc8:	1d19      	adds	r1, r3, #4
 8010bca:	6029      	str	r1, [r5, #0]
 8010bcc:	0601      	lsls	r1, r0, #24
 8010bce:	d501      	bpl.n	8010bd4 <_printf_i+0xec>
 8010bd0:	681e      	ldr	r6, [r3, #0]
 8010bd2:	e002      	b.n	8010bda <_printf_i+0xf2>
 8010bd4:	0646      	lsls	r6, r0, #25
 8010bd6:	d5fb      	bpl.n	8010bd0 <_printf_i+0xe8>
 8010bd8:	881e      	ldrh	r6, [r3, #0]
 8010bda:	4854      	ldr	r0, [pc, #336]	; (8010d2c <_printf_i+0x244>)
 8010bdc:	2f6f      	cmp	r7, #111	; 0x6f
 8010bde:	bf0c      	ite	eq
 8010be0:	2308      	moveq	r3, #8
 8010be2:	230a      	movne	r3, #10
 8010be4:	2100      	movs	r1, #0
 8010be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010bea:	6865      	ldr	r5, [r4, #4]
 8010bec:	60a5      	str	r5, [r4, #8]
 8010bee:	2d00      	cmp	r5, #0
 8010bf0:	bfa2      	ittt	ge
 8010bf2:	6821      	ldrge	r1, [r4, #0]
 8010bf4:	f021 0104 	bicge.w	r1, r1, #4
 8010bf8:	6021      	strge	r1, [r4, #0]
 8010bfa:	b90e      	cbnz	r6, 8010c00 <_printf_i+0x118>
 8010bfc:	2d00      	cmp	r5, #0
 8010bfe:	d04d      	beq.n	8010c9c <_printf_i+0x1b4>
 8010c00:	4615      	mov	r5, r2
 8010c02:	fbb6 f1f3 	udiv	r1, r6, r3
 8010c06:	fb03 6711 	mls	r7, r3, r1, r6
 8010c0a:	5dc7      	ldrb	r7, [r0, r7]
 8010c0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010c10:	4637      	mov	r7, r6
 8010c12:	42bb      	cmp	r3, r7
 8010c14:	460e      	mov	r6, r1
 8010c16:	d9f4      	bls.n	8010c02 <_printf_i+0x11a>
 8010c18:	2b08      	cmp	r3, #8
 8010c1a:	d10b      	bne.n	8010c34 <_printf_i+0x14c>
 8010c1c:	6823      	ldr	r3, [r4, #0]
 8010c1e:	07de      	lsls	r6, r3, #31
 8010c20:	d508      	bpl.n	8010c34 <_printf_i+0x14c>
 8010c22:	6923      	ldr	r3, [r4, #16]
 8010c24:	6861      	ldr	r1, [r4, #4]
 8010c26:	4299      	cmp	r1, r3
 8010c28:	bfde      	ittt	le
 8010c2a:	2330      	movle	r3, #48	; 0x30
 8010c2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010c34:	1b52      	subs	r2, r2, r5
 8010c36:	6122      	str	r2, [r4, #16]
 8010c38:	f8cd a000 	str.w	sl, [sp]
 8010c3c:	464b      	mov	r3, r9
 8010c3e:	aa03      	add	r2, sp, #12
 8010c40:	4621      	mov	r1, r4
 8010c42:	4640      	mov	r0, r8
 8010c44:	f7ff fee2 	bl	8010a0c <_printf_common>
 8010c48:	3001      	adds	r0, #1
 8010c4a:	d14c      	bne.n	8010ce6 <_printf_i+0x1fe>
 8010c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c50:	b004      	add	sp, #16
 8010c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c56:	4835      	ldr	r0, [pc, #212]	; (8010d2c <_printf_i+0x244>)
 8010c58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010c5c:	6829      	ldr	r1, [r5, #0]
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	f851 6b04 	ldr.w	r6, [r1], #4
 8010c64:	6029      	str	r1, [r5, #0]
 8010c66:	061d      	lsls	r5, r3, #24
 8010c68:	d514      	bpl.n	8010c94 <_printf_i+0x1ac>
 8010c6a:	07df      	lsls	r7, r3, #31
 8010c6c:	bf44      	itt	mi
 8010c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8010c72:	6023      	strmi	r3, [r4, #0]
 8010c74:	b91e      	cbnz	r6, 8010c7e <_printf_i+0x196>
 8010c76:	6823      	ldr	r3, [r4, #0]
 8010c78:	f023 0320 	bic.w	r3, r3, #32
 8010c7c:	6023      	str	r3, [r4, #0]
 8010c7e:	2310      	movs	r3, #16
 8010c80:	e7b0      	b.n	8010be4 <_printf_i+0xfc>
 8010c82:	6823      	ldr	r3, [r4, #0]
 8010c84:	f043 0320 	orr.w	r3, r3, #32
 8010c88:	6023      	str	r3, [r4, #0]
 8010c8a:	2378      	movs	r3, #120	; 0x78
 8010c8c:	4828      	ldr	r0, [pc, #160]	; (8010d30 <_printf_i+0x248>)
 8010c8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c92:	e7e3      	b.n	8010c5c <_printf_i+0x174>
 8010c94:	0659      	lsls	r1, r3, #25
 8010c96:	bf48      	it	mi
 8010c98:	b2b6      	uxthmi	r6, r6
 8010c9a:	e7e6      	b.n	8010c6a <_printf_i+0x182>
 8010c9c:	4615      	mov	r5, r2
 8010c9e:	e7bb      	b.n	8010c18 <_printf_i+0x130>
 8010ca0:	682b      	ldr	r3, [r5, #0]
 8010ca2:	6826      	ldr	r6, [r4, #0]
 8010ca4:	6961      	ldr	r1, [r4, #20]
 8010ca6:	1d18      	adds	r0, r3, #4
 8010ca8:	6028      	str	r0, [r5, #0]
 8010caa:	0635      	lsls	r5, r6, #24
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	d501      	bpl.n	8010cb4 <_printf_i+0x1cc>
 8010cb0:	6019      	str	r1, [r3, #0]
 8010cb2:	e002      	b.n	8010cba <_printf_i+0x1d2>
 8010cb4:	0670      	lsls	r0, r6, #25
 8010cb6:	d5fb      	bpl.n	8010cb0 <_printf_i+0x1c8>
 8010cb8:	8019      	strh	r1, [r3, #0]
 8010cba:	2300      	movs	r3, #0
 8010cbc:	6123      	str	r3, [r4, #16]
 8010cbe:	4615      	mov	r5, r2
 8010cc0:	e7ba      	b.n	8010c38 <_printf_i+0x150>
 8010cc2:	682b      	ldr	r3, [r5, #0]
 8010cc4:	1d1a      	adds	r2, r3, #4
 8010cc6:	602a      	str	r2, [r5, #0]
 8010cc8:	681d      	ldr	r5, [r3, #0]
 8010cca:	6862      	ldr	r2, [r4, #4]
 8010ccc:	2100      	movs	r1, #0
 8010cce:	4628      	mov	r0, r5
 8010cd0:	f7ef fb0e 	bl	80002f0 <memchr>
 8010cd4:	b108      	cbz	r0, 8010cda <_printf_i+0x1f2>
 8010cd6:	1b40      	subs	r0, r0, r5
 8010cd8:	6060      	str	r0, [r4, #4]
 8010cda:	6863      	ldr	r3, [r4, #4]
 8010cdc:	6123      	str	r3, [r4, #16]
 8010cde:	2300      	movs	r3, #0
 8010ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ce4:	e7a8      	b.n	8010c38 <_printf_i+0x150>
 8010ce6:	6923      	ldr	r3, [r4, #16]
 8010ce8:	462a      	mov	r2, r5
 8010cea:	4649      	mov	r1, r9
 8010cec:	4640      	mov	r0, r8
 8010cee:	47d0      	blx	sl
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	d0ab      	beq.n	8010c4c <_printf_i+0x164>
 8010cf4:	6823      	ldr	r3, [r4, #0]
 8010cf6:	079b      	lsls	r3, r3, #30
 8010cf8:	d413      	bmi.n	8010d22 <_printf_i+0x23a>
 8010cfa:	68e0      	ldr	r0, [r4, #12]
 8010cfc:	9b03      	ldr	r3, [sp, #12]
 8010cfe:	4298      	cmp	r0, r3
 8010d00:	bfb8      	it	lt
 8010d02:	4618      	movlt	r0, r3
 8010d04:	e7a4      	b.n	8010c50 <_printf_i+0x168>
 8010d06:	2301      	movs	r3, #1
 8010d08:	4632      	mov	r2, r6
 8010d0a:	4649      	mov	r1, r9
 8010d0c:	4640      	mov	r0, r8
 8010d0e:	47d0      	blx	sl
 8010d10:	3001      	adds	r0, #1
 8010d12:	d09b      	beq.n	8010c4c <_printf_i+0x164>
 8010d14:	3501      	adds	r5, #1
 8010d16:	68e3      	ldr	r3, [r4, #12]
 8010d18:	9903      	ldr	r1, [sp, #12]
 8010d1a:	1a5b      	subs	r3, r3, r1
 8010d1c:	42ab      	cmp	r3, r5
 8010d1e:	dcf2      	bgt.n	8010d06 <_printf_i+0x21e>
 8010d20:	e7eb      	b.n	8010cfa <_printf_i+0x212>
 8010d22:	2500      	movs	r5, #0
 8010d24:	f104 0619 	add.w	r6, r4, #25
 8010d28:	e7f5      	b.n	8010d16 <_printf_i+0x22e>
 8010d2a:	bf00      	nop
 8010d2c:	080125fe 	.word	0x080125fe
 8010d30:	0801260f 	.word	0x0801260f

08010d34 <memmove>:
 8010d34:	4288      	cmp	r0, r1
 8010d36:	b510      	push	{r4, lr}
 8010d38:	eb01 0402 	add.w	r4, r1, r2
 8010d3c:	d902      	bls.n	8010d44 <memmove+0x10>
 8010d3e:	4284      	cmp	r4, r0
 8010d40:	4623      	mov	r3, r4
 8010d42:	d807      	bhi.n	8010d54 <memmove+0x20>
 8010d44:	1e43      	subs	r3, r0, #1
 8010d46:	42a1      	cmp	r1, r4
 8010d48:	d008      	beq.n	8010d5c <memmove+0x28>
 8010d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d52:	e7f8      	b.n	8010d46 <memmove+0x12>
 8010d54:	4402      	add	r2, r0
 8010d56:	4601      	mov	r1, r0
 8010d58:	428a      	cmp	r2, r1
 8010d5a:	d100      	bne.n	8010d5e <memmove+0x2a>
 8010d5c:	bd10      	pop	{r4, pc}
 8010d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d66:	e7f7      	b.n	8010d58 <memmove+0x24>

08010d68 <_free_r>:
 8010d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d6a:	2900      	cmp	r1, #0
 8010d6c:	d044      	beq.n	8010df8 <_free_r+0x90>
 8010d6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d72:	9001      	str	r0, [sp, #4]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f1a1 0404 	sub.w	r4, r1, #4
 8010d7a:	bfb8      	it	lt
 8010d7c:	18e4      	addlt	r4, r4, r3
 8010d7e:	f000 f913 	bl	8010fa8 <__malloc_lock>
 8010d82:	4a1e      	ldr	r2, [pc, #120]	; (8010dfc <_free_r+0x94>)
 8010d84:	9801      	ldr	r0, [sp, #4]
 8010d86:	6813      	ldr	r3, [r2, #0]
 8010d88:	b933      	cbnz	r3, 8010d98 <_free_r+0x30>
 8010d8a:	6063      	str	r3, [r4, #4]
 8010d8c:	6014      	str	r4, [r2, #0]
 8010d8e:	b003      	add	sp, #12
 8010d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d94:	f000 b90e 	b.w	8010fb4 <__malloc_unlock>
 8010d98:	42a3      	cmp	r3, r4
 8010d9a:	d908      	bls.n	8010dae <_free_r+0x46>
 8010d9c:	6825      	ldr	r5, [r4, #0]
 8010d9e:	1961      	adds	r1, r4, r5
 8010da0:	428b      	cmp	r3, r1
 8010da2:	bf01      	itttt	eq
 8010da4:	6819      	ldreq	r1, [r3, #0]
 8010da6:	685b      	ldreq	r3, [r3, #4]
 8010da8:	1949      	addeq	r1, r1, r5
 8010daa:	6021      	streq	r1, [r4, #0]
 8010dac:	e7ed      	b.n	8010d8a <_free_r+0x22>
 8010dae:	461a      	mov	r2, r3
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	b10b      	cbz	r3, 8010db8 <_free_r+0x50>
 8010db4:	42a3      	cmp	r3, r4
 8010db6:	d9fa      	bls.n	8010dae <_free_r+0x46>
 8010db8:	6811      	ldr	r1, [r2, #0]
 8010dba:	1855      	adds	r5, r2, r1
 8010dbc:	42a5      	cmp	r5, r4
 8010dbe:	d10b      	bne.n	8010dd8 <_free_r+0x70>
 8010dc0:	6824      	ldr	r4, [r4, #0]
 8010dc2:	4421      	add	r1, r4
 8010dc4:	1854      	adds	r4, r2, r1
 8010dc6:	42a3      	cmp	r3, r4
 8010dc8:	6011      	str	r1, [r2, #0]
 8010dca:	d1e0      	bne.n	8010d8e <_free_r+0x26>
 8010dcc:	681c      	ldr	r4, [r3, #0]
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	6053      	str	r3, [r2, #4]
 8010dd2:	4421      	add	r1, r4
 8010dd4:	6011      	str	r1, [r2, #0]
 8010dd6:	e7da      	b.n	8010d8e <_free_r+0x26>
 8010dd8:	d902      	bls.n	8010de0 <_free_r+0x78>
 8010dda:	230c      	movs	r3, #12
 8010ddc:	6003      	str	r3, [r0, #0]
 8010dde:	e7d6      	b.n	8010d8e <_free_r+0x26>
 8010de0:	6825      	ldr	r5, [r4, #0]
 8010de2:	1961      	adds	r1, r4, r5
 8010de4:	428b      	cmp	r3, r1
 8010de6:	bf04      	itt	eq
 8010de8:	6819      	ldreq	r1, [r3, #0]
 8010dea:	685b      	ldreq	r3, [r3, #4]
 8010dec:	6063      	str	r3, [r4, #4]
 8010dee:	bf04      	itt	eq
 8010df0:	1949      	addeq	r1, r1, r5
 8010df2:	6021      	streq	r1, [r4, #0]
 8010df4:	6054      	str	r4, [r2, #4]
 8010df6:	e7ca      	b.n	8010d8e <_free_r+0x26>
 8010df8:	b003      	add	sp, #12
 8010dfa:	bd30      	pop	{r4, r5, pc}
 8010dfc:	24001884 	.word	0x24001884

08010e00 <sbrk_aligned>:
 8010e00:	b570      	push	{r4, r5, r6, lr}
 8010e02:	4e0e      	ldr	r6, [pc, #56]	; (8010e3c <sbrk_aligned+0x3c>)
 8010e04:	460c      	mov	r4, r1
 8010e06:	6831      	ldr	r1, [r6, #0]
 8010e08:	4605      	mov	r5, r0
 8010e0a:	b911      	cbnz	r1, 8010e12 <sbrk_aligned+0x12>
 8010e0c:	f000 f8bc 	bl	8010f88 <_sbrk_r>
 8010e10:	6030      	str	r0, [r6, #0]
 8010e12:	4621      	mov	r1, r4
 8010e14:	4628      	mov	r0, r5
 8010e16:	f000 f8b7 	bl	8010f88 <_sbrk_r>
 8010e1a:	1c43      	adds	r3, r0, #1
 8010e1c:	d00a      	beq.n	8010e34 <sbrk_aligned+0x34>
 8010e1e:	1cc4      	adds	r4, r0, #3
 8010e20:	f024 0403 	bic.w	r4, r4, #3
 8010e24:	42a0      	cmp	r0, r4
 8010e26:	d007      	beq.n	8010e38 <sbrk_aligned+0x38>
 8010e28:	1a21      	subs	r1, r4, r0
 8010e2a:	4628      	mov	r0, r5
 8010e2c:	f000 f8ac 	bl	8010f88 <_sbrk_r>
 8010e30:	3001      	adds	r0, #1
 8010e32:	d101      	bne.n	8010e38 <sbrk_aligned+0x38>
 8010e34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010e38:	4620      	mov	r0, r4
 8010e3a:	bd70      	pop	{r4, r5, r6, pc}
 8010e3c:	24001888 	.word	0x24001888

08010e40 <_malloc_r>:
 8010e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e44:	1ccd      	adds	r5, r1, #3
 8010e46:	f025 0503 	bic.w	r5, r5, #3
 8010e4a:	3508      	adds	r5, #8
 8010e4c:	2d0c      	cmp	r5, #12
 8010e4e:	bf38      	it	cc
 8010e50:	250c      	movcc	r5, #12
 8010e52:	2d00      	cmp	r5, #0
 8010e54:	4607      	mov	r7, r0
 8010e56:	db01      	blt.n	8010e5c <_malloc_r+0x1c>
 8010e58:	42a9      	cmp	r1, r5
 8010e5a:	d905      	bls.n	8010e68 <_malloc_r+0x28>
 8010e5c:	230c      	movs	r3, #12
 8010e5e:	603b      	str	r3, [r7, #0]
 8010e60:	2600      	movs	r6, #0
 8010e62:	4630      	mov	r0, r6
 8010e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e68:	4e2e      	ldr	r6, [pc, #184]	; (8010f24 <_malloc_r+0xe4>)
 8010e6a:	f000 f89d 	bl	8010fa8 <__malloc_lock>
 8010e6e:	6833      	ldr	r3, [r6, #0]
 8010e70:	461c      	mov	r4, r3
 8010e72:	bb34      	cbnz	r4, 8010ec2 <_malloc_r+0x82>
 8010e74:	4629      	mov	r1, r5
 8010e76:	4638      	mov	r0, r7
 8010e78:	f7ff ffc2 	bl	8010e00 <sbrk_aligned>
 8010e7c:	1c43      	adds	r3, r0, #1
 8010e7e:	4604      	mov	r4, r0
 8010e80:	d14d      	bne.n	8010f1e <_malloc_r+0xde>
 8010e82:	6834      	ldr	r4, [r6, #0]
 8010e84:	4626      	mov	r6, r4
 8010e86:	2e00      	cmp	r6, #0
 8010e88:	d140      	bne.n	8010f0c <_malloc_r+0xcc>
 8010e8a:	6823      	ldr	r3, [r4, #0]
 8010e8c:	4631      	mov	r1, r6
 8010e8e:	4638      	mov	r0, r7
 8010e90:	eb04 0803 	add.w	r8, r4, r3
 8010e94:	f000 f878 	bl	8010f88 <_sbrk_r>
 8010e98:	4580      	cmp	r8, r0
 8010e9a:	d13a      	bne.n	8010f12 <_malloc_r+0xd2>
 8010e9c:	6821      	ldr	r1, [r4, #0]
 8010e9e:	3503      	adds	r5, #3
 8010ea0:	1a6d      	subs	r5, r5, r1
 8010ea2:	f025 0503 	bic.w	r5, r5, #3
 8010ea6:	3508      	adds	r5, #8
 8010ea8:	2d0c      	cmp	r5, #12
 8010eaa:	bf38      	it	cc
 8010eac:	250c      	movcc	r5, #12
 8010eae:	4629      	mov	r1, r5
 8010eb0:	4638      	mov	r0, r7
 8010eb2:	f7ff ffa5 	bl	8010e00 <sbrk_aligned>
 8010eb6:	3001      	adds	r0, #1
 8010eb8:	d02b      	beq.n	8010f12 <_malloc_r+0xd2>
 8010eba:	6823      	ldr	r3, [r4, #0]
 8010ebc:	442b      	add	r3, r5
 8010ebe:	6023      	str	r3, [r4, #0]
 8010ec0:	e00e      	b.n	8010ee0 <_malloc_r+0xa0>
 8010ec2:	6822      	ldr	r2, [r4, #0]
 8010ec4:	1b52      	subs	r2, r2, r5
 8010ec6:	d41e      	bmi.n	8010f06 <_malloc_r+0xc6>
 8010ec8:	2a0b      	cmp	r2, #11
 8010eca:	d916      	bls.n	8010efa <_malloc_r+0xba>
 8010ecc:	1961      	adds	r1, r4, r5
 8010ece:	42a3      	cmp	r3, r4
 8010ed0:	6025      	str	r5, [r4, #0]
 8010ed2:	bf18      	it	ne
 8010ed4:	6059      	strne	r1, [r3, #4]
 8010ed6:	6863      	ldr	r3, [r4, #4]
 8010ed8:	bf08      	it	eq
 8010eda:	6031      	streq	r1, [r6, #0]
 8010edc:	5162      	str	r2, [r4, r5]
 8010ede:	604b      	str	r3, [r1, #4]
 8010ee0:	4638      	mov	r0, r7
 8010ee2:	f104 060b 	add.w	r6, r4, #11
 8010ee6:	f000 f865 	bl	8010fb4 <__malloc_unlock>
 8010eea:	f026 0607 	bic.w	r6, r6, #7
 8010eee:	1d23      	adds	r3, r4, #4
 8010ef0:	1af2      	subs	r2, r6, r3
 8010ef2:	d0b6      	beq.n	8010e62 <_malloc_r+0x22>
 8010ef4:	1b9b      	subs	r3, r3, r6
 8010ef6:	50a3      	str	r3, [r4, r2]
 8010ef8:	e7b3      	b.n	8010e62 <_malloc_r+0x22>
 8010efa:	6862      	ldr	r2, [r4, #4]
 8010efc:	42a3      	cmp	r3, r4
 8010efe:	bf0c      	ite	eq
 8010f00:	6032      	streq	r2, [r6, #0]
 8010f02:	605a      	strne	r2, [r3, #4]
 8010f04:	e7ec      	b.n	8010ee0 <_malloc_r+0xa0>
 8010f06:	4623      	mov	r3, r4
 8010f08:	6864      	ldr	r4, [r4, #4]
 8010f0a:	e7b2      	b.n	8010e72 <_malloc_r+0x32>
 8010f0c:	4634      	mov	r4, r6
 8010f0e:	6876      	ldr	r6, [r6, #4]
 8010f10:	e7b9      	b.n	8010e86 <_malloc_r+0x46>
 8010f12:	230c      	movs	r3, #12
 8010f14:	603b      	str	r3, [r7, #0]
 8010f16:	4638      	mov	r0, r7
 8010f18:	f000 f84c 	bl	8010fb4 <__malloc_unlock>
 8010f1c:	e7a1      	b.n	8010e62 <_malloc_r+0x22>
 8010f1e:	6025      	str	r5, [r4, #0]
 8010f20:	e7de      	b.n	8010ee0 <_malloc_r+0xa0>
 8010f22:	bf00      	nop
 8010f24:	24001884 	.word	0x24001884

08010f28 <_realloc_r>:
 8010f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f2c:	4680      	mov	r8, r0
 8010f2e:	4614      	mov	r4, r2
 8010f30:	460e      	mov	r6, r1
 8010f32:	b921      	cbnz	r1, 8010f3e <_realloc_r+0x16>
 8010f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f38:	4611      	mov	r1, r2
 8010f3a:	f7ff bf81 	b.w	8010e40 <_malloc_r>
 8010f3e:	b92a      	cbnz	r2, 8010f4c <_realloc_r+0x24>
 8010f40:	f7ff ff12 	bl	8010d68 <_free_r>
 8010f44:	4625      	mov	r5, r4
 8010f46:	4628      	mov	r0, r5
 8010f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f4c:	f000 f838 	bl	8010fc0 <_malloc_usable_size_r>
 8010f50:	4284      	cmp	r4, r0
 8010f52:	4607      	mov	r7, r0
 8010f54:	d802      	bhi.n	8010f5c <_realloc_r+0x34>
 8010f56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f5a:	d812      	bhi.n	8010f82 <_realloc_r+0x5a>
 8010f5c:	4621      	mov	r1, r4
 8010f5e:	4640      	mov	r0, r8
 8010f60:	f7ff ff6e 	bl	8010e40 <_malloc_r>
 8010f64:	4605      	mov	r5, r0
 8010f66:	2800      	cmp	r0, #0
 8010f68:	d0ed      	beq.n	8010f46 <_realloc_r+0x1e>
 8010f6a:	42bc      	cmp	r4, r7
 8010f6c:	4622      	mov	r2, r4
 8010f6e:	4631      	mov	r1, r6
 8010f70:	bf28      	it	cs
 8010f72:	463a      	movcs	r2, r7
 8010f74:	f7ff fb2c 	bl	80105d0 <memcpy>
 8010f78:	4631      	mov	r1, r6
 8010f7a:	4640      	mov	r0, r8
 8010f7c:	f7ff fef4 	bl	8010d68 <_free_r>
 8010f80:	e7e1      	b.n	8010f46 <_realloc_r+0x1e>
 8010f82:	4635      	mov	r5, r6
 8010f84:	e7df      	b.n	8010f46 <_realloc_r+0x1e>
	...

08010f88 <_sbrk_r>:
 8010f88:	b538      	push	{r3, r4, r5, lr}
 8010f8a:	4d06      	ldr	r5, [pc, #24]	; (8010fa4 <_sbrk_r+0x1c>)
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	4604      	mov	r4, r0
 8010f90:	4608      	mov	r0, r1
 8010f92:	602b      	str	r3, [r5, #0]
 8010f94:	f7f3 fa02 	bl	800439c <_sbrk>
 8010f98:	1c43      	adds	r3, r0, #1
 8010f9a:	d102      	bne.n	8010fa2 <_sbrk_r+0x1a>
 8010f9c:	682b      	ldr	r3, [r5, #0]
 8010f9e:	b103      	cbz	r3, 8010fa2 <_sbrk_r+0x1a>
 8010fa0:	6023      	str	r3, [r4, #0]
 8010fa2:	bd38      	pop	{r3, r4, r5, pc}
 8010fa4:	2400188c 	.word	0x2400188c

08010fa8 <__malloc_lock>:
 8010fa8:	4801      	ldr	r0, [pc, #4]	; (8010fb0 <__malloc_lock+0x8>)
 8010faa:	f000 b811 	b.w	8010fd0 <__retarget_lock_acquire_recursive>
 8010fae:	bf00      	nop
 8010fb0:	24001890 	.word	0x24001890

08010fb4 <__malloc_unlock>:
 8010fb4:	4801      	ldr	r0, [pc, #4]	; (8010fbc <__malloc_unlock+0x8>)
 8010fb6:	f000 b80c 	b.w	8010fd2 <__retarget_lock_release_recursive>
 8010fba:	bf00      	nop
 8010fbc:	24001890 	.word	0x24001890

08010fc0 <_malloc_usable_size_r>:
 8010fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fc4:	1f18      	subs	r0, r3, #4
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	bfbc      	itt	lt
 8010fca:	580b      	ldrlt	r3, [r1, r0]
 8010fcc:	18c0      	addlt	r0, r0, r3
 8010fce:	4770      	bx	lr

08010fd0 <__retarget_lock_acquire_recursive>:
 8010fd0:	4770      	bx	lr

08010fd2 <__retarget_lock_release_recursive>:
 8010fd2:	4770      	bx	lr

08010fd4 <checkint>:
 8010fd4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010fd8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	b570      	push	{r4, r5, r6, lr}
 8010fe0:	dd2a      	ble.n	8011038 <checkint+0x64>
 8010fe2:	f240 4333 	movw	r3, #1075	; 0x433
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	dc24      	bgt.n	8011034 <checkint+0x60>
 8010fea:	1a9b      	subs	r3, r3, r2
 8010fec:	f1a3 0620 	sub.w	r6, r3, #32
 8010ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ff4:	fa02 f403 	lsl.w	r4, r2, r3
 8010ff8:	fa02 f606 	lsl.w	r6, r2, r6
 8010ffc:	f1c3 0520 	rsb	r5, r3, #32
 8011000:	fa22 f505 	lsr.w	r5, r2, r5
 8011004:	4334      	orrs	r4, r6
 8011006:	432c      	orrs	r4, r5
 8011008:	409a      	lsls	r2, r3
 801100a:	ea20 0202 	bic.w	r2, r0, r2
 801100e:	ea21 0404 	bic.w	r4, r1, r4
 8011012:	4322      	orrs	r2, r4
 8011014:	f1a3 0420 	sub.w	r4, r3, #32
 8011018:	f1c3 0220 	rsb	r2, r3, #32
 801101c:	d10c      	bne.n	8011038 <checkint+0x64>
 801101e:	40d8      	lsrs	r0, r3
 8011020:	fa01 f302 	lsl.w	r3, r1, r2
 8011024:	4318      	orrs	r0, r3
 8011026:	40e1      	lsrs	r1, r4
 8011028:	4308      	orrs	r0, r1
 801102a:	f000 0001 	and.w	r0, r0, #1
 801102e:	f1d0 0002 	rsbs	r0, r0, #2
 8011032:	bd70      	pop	{r4, r5, r6, pc}
 8011034:	2002      	movs	r0, #2
 8011036:	e7fc      	b.n	8011032 <checkint+0x5e>
 8011038:	2000      	movs	r0, #0
 801103a:	e7fa      	b.n	8011032 <checkint+0x5e>
 801103c:	0000      	movs	r0, r0
	...

08011040 <pow>:
 8011040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011044:	ee10 4a90 	vmov	r4, s1
 8011048:	ed2d 8b0a 	vpush	{d8-d12}
 801104c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011050:	ee11 7a90 	vmov	r7, s3
 8011054:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8011058:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801105c:	429a      	cmp	r2, r3
 801105e:	ee10 6a10 	vmov	r6, s0
 8011062:	ee11 0a10 	vmov	r0, s2
 8011066:	b086      	sub	sp, #24
 8011068:	46d4      	mov	ip, sl
 801106a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801106e:	d806      	bhi.n	801107e <pow+0x3e>
 8011070:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011074:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011078:	2b7f      	cmp	r3, #127	; 0x7f
 801107a:	f240 8156 	bls.w	801132a <pow+0x2ea>
 801107e:	1802      	adds	r2, r0, r0
 8011080:	eb47 0107 	adc.w	r1, r7, r7
 8011084:	f06f 0e01 	mvn.w	lr, #1
 8011088:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 801108c:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 8011090:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011094:	45ce      	cmp	lr, r9
 8011096:	eb73 0808 	sbcs.w	r8, r3, r8
 801109a:	d23f      	bcs.n	801111c <pow+0xdc>
 801109c:	ea52 0301 	orrs.w	r3, r2, r1
 80110a0:	f04f 0300 	mov.w	r3, #0
 80110a4:	d10c      	bne.n	80110c0 <pow+0x80>
 80110a6:	19b6      	adds	r6, r6, r6
 80110a8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80110ac:	4164      	adcs	r4, r4
 80110ae:	42b3      	cmp	r3, r6
 80110b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80110b4:	41a3      	sbcs	r3, r4
 80110b6:	f0c0 808c 	bcc.w	80111d2 <pow+0x192>
 80110ba:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80110be:	e028      	b.n	8011112 <pow+0xd2>
 80110c0:	4da3      	ldr	r5, [pc, #652]	; (8011350 <pow+0x310>)
 80110c2:	42ac      	cmp	r4, r5
 80110c4:	bf08      	it	eq
 80110c6:	429e      	cmpeq	r6, r3
 80110c8:	d107      	bne.n	80110da <pow+0x9a>
 80110ca:	1800      	adds	r0, r0, r0
 80110cc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80110d0:	417f      	adcs	r7, r7
 80110d2:	4283      	cmp	r3, r0
 80110d4:	4b9f      	ldr	r3, [pc, #636]	; (8011354 <pow+0x314>)
 80110d6:	41bb      	sbcs	r3, r7
 80110d8:	e7ed      	b.n	80110b6 <pow+0x76>
 80110da:	19b6      	adds	r6, r6, r6
 80110dc:	489e      	ldr	r0, [pc, #632]	; (8011358 <pow+0x318>)
 80110de:	4164      	adcs	r4, r4
 80110e0:	42b3      	cmp	r3, r6
 80110e2:	eb70 0504 	sbcs.w	r5, r0, r4
 80110e6:	d374      	bcc.n	80111d2 <pow+0x192>
 80110e8:	4281      	cmp	r1, r0
 80110ea:	bf08      	it	eq
 80110ec:	429a      	cmpeq	r2, r3
 80110ee:	d170      	bne.n	80111d2 <pow+0x192>
 80110f0:	4a9a      	ldr	r2, [pc, #616]	; (801135c <pow+0x31c>)
 80110f2:	4294      	cmp	r4, r2
 80110f4:	bf08      	it	eq
 80110f6:	429e      	cmpeq	r6, r3
 80110f8:	d0df      	beq.n	80110ba <pow+0x7a>
 80110fa:	4294      	cmp	r4, r2
 80110fc:	ea6f 0707 	mvn.w	r7, r7
 8011100:	bf34      	ite	cc
 8011102:	2400      	movcc	r4, #0
 8011104:	2401      	movcs	r4, #1
 8011106:	0fff      	lsrs	r7, r7, #31
 8011108:	42bc      	cmp	r4, r7
 801110a:	f040 81d9 	bne.w	80114c0 <pow+0x480>
 801110e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011112:	b006      	add	sp, #24
 8011114:	ecbd 8b0a 	vpop	{d8-d12}
 8011118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801111c:	eb16 0806 	adds.w	r8, r6, r6
 8011120:	eb44 0904 	adc.w	r9, r4, r4
 8011124:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8011128:	f169 0200 	sbc.w	r2, r9, #0
 801112c:	458e      	cmp	lr, r1
 801112e:	4193      	sbcs	r3, r2
 8011130:	d223      	bcs.n	801117a <pow+0x13a>
 8011132:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011136:	2c00      	cmp	r4, #0
 8011138:	da12      	bge.n	8011160 <pow+0x120>
 801113a:	4639      	mov	r1, r7
 801113c:	f7ff ff4a 	bl	8010fd4 <checkint>
 8011140:	2801      	cmp	r0, #1
 8011142:	d10d      	bne.n	8011160 <pow+0x120>
 8011144:	eeb1 0b40 	vneg.f64	d0, d0
 8011148:	ea58 0309 	orrs.w	r3, r8, r9
 801114c:	d10a      	bne.n	8011164 <pow+0x124>
 801114e:	2f00      	cmp	r7, #0
 8011150:	dadf      	bge.n	8011112 <pow+0xd2>
 8011152:	b006      	add	sp, #24
 8011154:	ecbd 8b0a 	vpop	{d8-d12}
 8011158:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801115c:	f001 b83c 	b.w	80121d8 <__math_divzero>
 8011160:	2000      	movs	r0, #0
 8011162:	e7f1      	b.n	8011148 <pow+0x108>
 8011164:	2f00      	cmp	r7, #0
 8011166:	dad4      	bge.n	8011112 <pow+0xd2>
 8011168:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801116c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011170:	ed8d 7b00 	vstr	d7, [sp]
 8011174:	ed9d 0b00 	vldr	d0, [sp]
 8011178:	e7cb      	b.n	8011112 <pow+0xd2>
 801117a:	2c00      	cmp	r4, #0
 801117c:	da2c      	bge.n	80111d8 <pow+0x198>
 801117e:	4639      	mov	r1, r7
 8011180:	f7ff ff28 	bl	8010fd4 <checkint>
 8011184:	b930      	cbnz	r0, 8011194 <pow+0x154>
 8011186:	b006      	add	sp, #24
 8011188:	ecbd 8b0a 	vpop	{d8-d12}
 801118c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011190:	f001 b83a 	b.w	8012208 <__math_invalid>
 8011194:	2801      	cmp	r0, #1
 8011196:	bf14      	ite	ne
 8011198:	2000      	movne	r0, #0
 801119a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801119e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80111a2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 80111a6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 80111aa:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80111ae:	2b7f      	cmp	r3, #127	; 0x7f
 80111b0:	d92d      	bls.n	801120e <pow+0x1ce>
 80111b2:	4b67      	ldr	r3, [pc, #412]	; (8011350 <pow+0x310>)
 80111b4:	2000      	movs	r0, #0
 80111b6:	429c      	cmp	r4, r3
 80111b8:	bf08      	it	eq
 80111ba:	4286      	cmpeq	r6, r0
 80111bc:	f43f af7d 	beq.w	80110ba <pow+0x7a>
 80111c0:	f240 31bd 	movw	r1, #957	; 0x3bd
 80111c4:	428a      	cmp	r2, r1
 80111c6:	d80c      	bhi.n	80111e2 <pow+0x1a2>
 80111c8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80111cc:	42b0      	cmp	r0, r6
 80111ce:	41a3      	sbcs	r3, r4
 80111d0:	d204      	bcs.n	80111dc <pow+0x19c>
 80111d2:	ee31 0b00 	vadd.f64	d0, d1, d0
 80111d6:	e79c      	b.n	8011112 <pow+0xd2>
 80111d8:	2000      	movs	r0, #0
 80111da:	e7e4      	b.n	80111a6 <pow+0x166>
 80111dc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80111e0:	e797      	b.n	8011112 <pow+0xd2>
 80111e2:	2e01      	cmp	r6, #1
 80111e4:	eb74 0303 	sbcs.w	r3, r4, r3
 80111e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80111ec:	bf34      	ite	cc
 80111ee:	2301      	movcc	r3, #1
 80111f0:	2300      	movcs	r3, #0
 80111f2:	4295      	cmp	r5, r2
 80111f4:	bf8c      	ite	hi
 80111f6:	2500      	movhi	r5, #0
 80111f8:	2501      	movls	r5, #1
 80111fa:	42ab      	cmp	r3, r5
 80111fc:	f000 809d 	beq.w	801133a <pow+0x2fa>
 8011200:	b006      	add	sp, #24
 8011202:	ecbd 8b0a 	vpop	{d8-d12}
 8011206:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801120a:	f000 bfdd 	b.w	80121c8 <__math_oflow>
 801120e:	f1bc 0f00 	cmp.w	ip, #0
 8011212:	d10b      	bne.n	801122c <pow+0x1ec>
 8011214:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011348 <pow+0x308>
 8011218:	ee20 7b07 	vmul.f64	d7, d0, d7
 801121c:	ec53 2b17 	vmov	r2, r3, d7
 8011220:	ee17 6a10 	vmov	r6, s14
 8011224:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011228:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801122c:	4b4c      	ldr	r3, [pc, #304]	; (8011360 <pow+0x320>)
 801122e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011232:	4423      	add	r3, r4
 8011234:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011238:	1519      	asrs	r1, r3, #20
 801123a:	0d1b      	lsrs	r3, r3, #20
 801123c:	051b      	lsls	r3, r3, #20
 801123e:	eba4 0903 	sub.w	r9, r4, r3
 8011242:	4b48      	ldr	r3, [pc, #288]	; (8011364 <pow+0x324>)
 8011244:	ee04 1a10 	vmov	s8, r1
 8011248:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801124c:	f1b6 0800 	subs.w	r8, r6, #0
 8011250:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011254:	ec49 8b15 	vmov	d5, r8, r9
 8011258:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801125c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011260:	ed93 7b00 	vldr	d7, [r3]
 8011264:	ed93 5b02 	vldr	d5, [r3, #8]
 8011268:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801126c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011270:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011274:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011278:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801127c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011280:	ed93 5b04 	vldr	d5, [r3, #16]
 8011284:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011288:	ee37 7b02 	vadd.f64	d7, d7, d2
 801128c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011290:	ed93 4b08 	vldr	d4, [r3, #32]
 8011294:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011298:	eeb0 9b40 	vmov.f64	d9, d0
 801129c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80112a0:	ed93 5b06 	vldr	d5, [r3, #24]
 80112a4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80112a8:	ee26 bb00 	vmul.f64	d11, d6, d0
 80112ac:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80112b0:	eea6 5b04 	vfma.f64	d5, d6, d4
 80112b4:	ee3a ab48 	vsub.f64	d10, d10, d8
 80112b8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80112bc:	ee37 9b09 	vadd.f64	d9, d7, d9
 80112c0:	ee3a ab00 	vadd.f64	d10, d10, d0
 80112c4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80112c8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80112cc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80112d0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80112d4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80112d8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80112dc:	eea0 5b04 	vfma.f64	d5, d0, d4
 80112e0:	eeab ab05 	vfma.f64	d10, d11, d5
 80112e4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80112e8:	ee21 7b06 	vmul.f64	d7, d1, d6
 80112ec:	ee17 3a90 	vmov	r3, s15
 80112f0:	eeb0 5b47 	vmov.f64	d5, d7
 80112f4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80112f8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80112fc:	18b2      	adds	r2, r6, r2
 80112fe:	2a3e      	cmp	r2, #62	; 0x3e
 8011300:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011304:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011308:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801130c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011310:	d92b      	bls.n	801136a <pow+0x32a>
 8011312:	2a00      	cmp	r2, #0
 8011314:	da0b      	bge.n	801132e <pow+0x2ee>
 8011316:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801131a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801131e:	2800      	cmp	r0, #0
 8011320:	f43f aef7 	beq.w	8011112 <pow+0xd2>
 8011324:	eeb1 0b40 	vneg.f64	d0, d0
 8011328:	e6f3      	b.n	8011112 <pow+0xd2>
 801132a:	2000      	movs	r0, #0
 801132c:	e77e      	b.n	801122c <pow+0x1ec>
 801132e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011332:	d919      	bls.n	8011368 <pow+0x328>
 8011334:	2b00      	cmp	r3, #0
 8011336:	f6bf af63 	bge.w	8011200 <pow+0x1c0>
 801133a:	b006      	add	sp, #24
 801133c:	ecbd 8b0a 	vpop	{d8-d12}
 8011340:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011344:	f000 bf38 	b.w	80121b8 <__math_uflow>
 8011348:	00000000 	.word	0x00000000
 801134c:	43300000 	.word	0x43300000
 8011350:	3ff00000 	.word	0x3ff00000
 8011354:	fff00000 	.word	0xfff00000
 8011358:	ffe00000 	.word	0xffe00000
 801135c:	7fe00000 	.word	0x7fe00000
 8011360:	c0196aab 	.word	0xc0196aab
 8011364:	08012620 	.word	0x08012620
 8011368:	2600      	movs	r6, #0
 801136a:	495d      	ldr	r1, [pc, #372]	; (80114e0 <pow+0x4a0>)
 801136c:	ed91 4b02 	vldr	d4, [r1, #8]
 8011370:	ed91 3b00 	vldr	d3, [r1]
 8011374:	eeb0 6b44 	vmov.f64	d6, d4
 8011378:	eea7 6b03 	vfma.f64	d6, d7, d3
 801137c:	ee16 5a10 	vmov	r5, s12
 8011380:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011384:	ed91 4b04 	vldr	d4, [r1, #16]
 8011388:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801138c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011390:	eeb0 0b47 	vmov.f64	d0, d7
 8011394:	ed91 7b06 	vldr	d7, [r1, #24]
 8011398:	18dc      	adds	r4, r3, r3
 801139a:	f104 030f 	add.w	r3, r4, #15
 801139e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80113a2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80113a6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80113aa:	ee35 0b00 	vadd.f64	d0, d5, d0
 80113ae:	ee20 6b00 	vmul.f64	d6, d0, d0
 80113b2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80113b6:	ed91 5b08 	vldr	d5, [r1, #32]
 80113ba:	ee30 7b07 	vadd.f64	d7, d0, d7
 80113be:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80113c2:	eea0 5b04 	vfma.f64	d5, d0, d4
 80113c6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80113ca:	eea6 7b05 	vfma.f64	d7, d6, d5
 80113ce:	ee26 6b06 	vmul.f64	d6, d6, d6
 80113d2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80113d6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80113da:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80113de:	eea0 5b04 	vfma.f64	d5, d0, d4
 80113e2:	1940      	adds	r0, r0, r5
 80113e4:	2700      	movs	r7, #0
 80113e6:	eb17 020c 	adds.w	r2, r7, ip
 80113ea:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80113ee:	eea6 7b05 	vfma.f64	d7, d6, d5
 80113f2:	2e00      	cmp	r6, #0
 80113f4:	d15f      	bne.n	80114b6 <pow+0x476>
 80113f6:	42bd      	cmp	r5, r7
 80113f8:	db13      	blt.n	8011422 <pow+0x3e2>
 80113fa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80113fe:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011402:	4610      	mov	r0, r2
 8011404:	ec41 0b10 	vmov	d0, r0, r1
 8011408:	eea7 0b00 	vfma.f64	d0, d7, d0
 801140c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80114c8 <pow+0x488>
 8011410:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011414:	b006      	add	sp, #24
 8011416:	ecbd 8b0a 	vpop	{d8-d12}
 801141a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801141e:	f000 bf0b 	b.w	8012238 <__math_check_oflow>
 8011422:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011426:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801142a:	4610      	mov	r0, r2
 801142c:	ec41 0b15 	vmov	d5, r0, r1
 8011430:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011434:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011438:	ee35 7b06 	vadd.f64	d7, d5, d6
 801143c:	eeb0 3bc7 	vabs.f64	d3, d7
 8011440:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8011444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011448:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80114d0 <pow+0x490>
 801144c:	d52a      	bpl.n	80114a4 <pow+0x464>
 801144e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011452:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801145a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801145e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011462:	bf48      	it	mi
 8011464:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011468:	ee37 3b04 	vadd.f64	d3, d7, d4
 801146c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011470:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011474:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011478:	ee37 7b03 	vadd.f64	d7, d7, d3
 801147c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011480:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011488:	d104      	bne.n	8011494 <pow+0x454>
 801148a:	4632      	mov	r2, r6
 801148c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011490:	ec43 2b17 	vmov	d7, r2, r3
 8011494:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011498:	ed9d 6b02 	vldr	d6, [sp, #8]
 801149c:	ee26 6b00 	vmul.f64	d6, d6, d0
 80114a0:	ed8d 6b04 	vstr	d6, [sp, #16]
 80114a4:	ee27 0b00 	vmul.f64	d0, d7, d0
 80114a8:	b006      	add	sp, #24
 80114aa:	ecbd 8b0a 	vpop	{d8-d12}
 80114ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114b2:	f000 beb8 	b.w	8012226 <__math_check_uflow>
 80114b6:	ec43 2b10 	vmov	d0, r2, r3
 80114ba:	eea7 0b00 	vfma.f64	d0, d7, d0
 80114be:	e628      	b.n	8011112 <pow+0xd2>
 80114c0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80114d8 <pow+0x498>
 80114c4:	e625      	b.n	8011112 <pow+0xd2>
 80114c6:	bf00      	nop
 80114c8:	00000000 	.word	0x00000000
 80114cc:	7f000000 	.word	0x7f000000
 80114d0:	00000000 	.word	0x00000000
 80114d4:	00100000 	.word	0x00100000
	...
 80114e0:	080137f0 	.word	0x080137f0
 80114e4:	00000000 	.word	0x00000000

080114e8 <sin>:
 80114e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114ea:	eeb0 7b40 	vmov.f64	d7, d0
 80114ee:	ee17 3a90 	vmov	r3, s15
 80114f2:	4a21      	ldr	r2, [pc, #132]	; (8011578 <sin+0x90>)
 80114f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80114f8:	4293      	cmp	r3, r2
 80114fa:	dc07      	bgt.n	801150c <sin+0x24>
 80114fc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011570 <sin+0x88>
 8011500:	2000      	movs	r0, #0
 8011502:	b005      	add	sp, #20
 8011504:	f85d eb04 	ldr.w	lr, [sp], #4
 8011508:	f000 bde2 	b.w	80120d0 <__kernel_sin>
 801150c:	4a1b      	ldr	r2, [pc, #108]	; (801157c <sin+0x94>)
 801150e:	4293      	cmp	r3, r2
 8011510:	dd04      	ble.n	801151c <sin+0x34>
 8011512:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011516:	b005      	add	sp, #20
 8011518:	f85d fb04 	ldr.w	pc, [sp], #4
 801151c:	4668      	mov	r0, sp
 801151e:	f000 f98b 	bl	8011838 <__ieee754_rem_pio2>
 8011522:	f000 0003 	and.w	r0, r0, #3
 8011526:	2801      	cmp	r0, #1
 8011528:	d00a      	beq.n	8011540 <sin+0x58>
 801152a:	2802      	cmp	r0, #2
 801152c:	d00f      	beq.n	801154e <sin+0x66>
 801152e:	b9c0      	cbnz	r0, 8011562 <sin+0x7a>
 8011530:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011534:	ed9d 0b00 	vldr	d0, [sp]
 8011538:	2001      	movs	r0, #1
 801153a:	f000 fdc9 	bl	80120d0 <__kernel_sin>
 801153e:	e7ea      	b.n	8011516 <sin+0x2e>
 8011540:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011544:	ed9d 0b00 	vldr	d0, [sp]
 8011548:	f000 fabe 	bl	8011ac8 <__kernel_cos>
 801154c:	e7e3      	b.n	8011516 <sin+0x2e>
 801154e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011552:	ed9d 0b00 	vldr	d0, [sp]
 8011556:	2001      	movs	r0, #1
 8011558:	f000 fdba 	bl	80120d0 <__kernel_sin>
 801155c:	eeb1 0b40 	vneg.f64	d0, d0
 8011560:	e7d9      	b.n	8011516 <sin+0x2e>
 8011562:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011566:	ed9d 0b00 	vldr	d0, [sp]
 801156a:	f000 faad 	bl	8011ac8 <__kernel_cos>
 801156e:	e7f5      	b.n	801155c <sin+0x74>
	...
 8011578:	3fe921fb 	.word	0x3fe921fb
 801157c:	7fefffff 	.word	0x7fefffff

08011580 <asin>:
 8011580:	b508      	push	{r3, lr}
 8011582:	ed2d 8b04 	vpush	{d8-d9}
 8011586:	eeb0 8b40 	vmov.f64	d8, d0
 801158a:	f000 f845 	bl	8011618 <__ieee754_asin>
 801158e:	eeb4 8b48 	vcmp.f64	d8, d8
 8011592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011596:	eeb0 9b40 	vmov.f64	d9, d0
 801159a:	d615      	bvs.n	80115c8 <asin+0x48>
 801159c:	eeb0 0b48 	vmov.f64	d0, d8
 80115a0:	f000 fe5e 	bl	8012260 <fabs>
 80115a4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80115a8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80115ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b0:	dd0a      	ble.n	80115c8 <asin+0x48>
 80115b2:	f7fe ffe3 	bl	801057c <__errno>
 80115b6:	ecbd 8b04 	vpop	{d8-d9}
 80115ba:	2321      	movs	r3, #33	; 0x21
 80115bc:	6003      	str	r3, [r0, #0]
 80115be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80115c2:	4804      	ldr	r0, [pc, #16]	; (80115d4 <asin+0x54>)
 80115c4:	f000 becc 	b.w	8012360 <nan>
 80115c8:	eeb0 0b49 	vmov.f64	d0, d9
 80115cc:	ecbd 8b04 	vpop	{d8-d9}
 80115d0:	bd08      	pop	{r3, pc}
 80115d2:	bf00      	nop
 80115d4:	080125f2 	.word	0x080125f2

080115d8 <sqrt>:
 80115d8:	b508      	push	{r3, lr}
 80115da:	ed2d 8b04 	vpush	{d8-d9}
 80115de:	eeb0 8b40 	vmov.f64	d8, d0
 80115e2:	f000 fa6d 	bl	8011ac0 <__ieee754_sqrt>
 80115e6:	eeb4 8b48 	vcmp.f64	d8, d8
 80115ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ee:	d60c      	bvs.n	801160a <sqrt+0x32>
 80115f0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011610 <sqrt+0x38>
 80115f4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80115f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115fc:	d505      	bpl.n	801160a <sqrt+0x32>
 80115fe:	f7fe ffbd 	bl	801057c <__errno>
 8011602:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011606:	2321      	movs	r3, #33	; 0x21
 8011608:	6003      	str	r3, [r0, #0]
 801160a:	ecbd 8b04 	vpop	{d8-d9}
 801160e:	bd08      	pop	{r3, pc}
	...

08011618 <__ieee754_asin>:
 8011618:	b538      	push	{r3, r4, r5, lr}
 801161a:	ee10 5a90 	vmov	r5, s1
 801161e:	4b82      	ldr	r3, [pc, #520]	; (8011828 <__ieee754_asin+0x210>)
 8011620:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011624:	429c      	cmp	r4, r3
 8011626:	ed2d 8b06 	vpush	{d8-d10}
 801162a:	dd19      	ble.n	8011660 <__ieee754_asin+0x48>
 801162c:	ee10 3a10 	vmov	r3, s0
 8011630:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011634:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011638:	4323      	orrs	r3, r4
 801163a:	d10c      	bne.n	8011656 <__ieee754_asin+0x3e>
 801163c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 80117b0 <__ieee754_asin+0x198>
 8011640:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80117b8 <__ieee754_asin+0x1a0>
 8011644:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011648:	eea0 7b06 	vfma.f64	d7, d0, d6
 801164c:	eeb0 0b47 	vmov.f64	d0, d7
 8011650:	ecbd 8b06 	vpop	{d8-d10}
 8011654:	bd38      	pop	{r3, r4, r5, pc}
 8011656:	ee30 7b40 	vsub.f64	d7, d0, d0
 801165a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801165e:	e7f7      	b.n	8011650 <__ieee754_asin+0x38>
 8011660:	4b72      	ldr	r3, [pc, #456]	; (801182c <__ieee754_asin+0x214>)
 8011662:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011666:	429c      	cmp	r4, r3
 8011668:	dc0b      	bgt.n	8011682 <__ieee754_asin+0x6a>
 801166a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 801166e:	da52      	bge.n	8011716 <__ieee754_asin+0xfe>
 8011670:	ed9f 7b53 	vldr	d7, [pc, #332]	; 80117c0 <__ieee754_asin+0x1a8>
 8011674:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011678:	eeb4 7bc9 	vcmpe.f64	d7, d9
 801167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011680:	dce6      	bgt.n	8011650 <__ieee754_asin+0x38>
 8011682:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011686:	f000 fdeb 	bl	8012260 <fabs>
 801168a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80117c8 <__ieee754_asin+0x1b0>
 801168e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011692:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011696:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80117d0 <__ieee754_asin+0x1b8>
 801169a:	eeb0 0b48 	vmov.f64	d0, d8
 801169e:	eea8 6b07 	vfma.f64	d6, d8, d7
 80116a2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80117d8 <__ieee754_asin+0x1c0>
 80116a6:	eea6 7b08 	vfma.f64	d7, d6, d8
 80116aa:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80117e0 <__ieee754_asin+0x1c8>
 80116ae:	ed9f ab4e 	vldr	d10, [pc, #312]	; 80117e8 <__ieee754_asin+0x1d0>
 80116b2:	eea7 6b08 	vfma.f64	d6, d7, d8
 80116b6:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 80117f0 <__ieee754_asin+0x1d8>
 80116ba:	eea6 7b08 	vfma.f64	d7, d6, d8
 80116be:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80117f8 <__ieee754_asin+0x1e0>
 80116c2:	eea7 ab08 	vfma.f64	d10, d7, d8
 80116c6:	ee2a ab08 	vmul.f64	d10, d10, d8
 80116ca:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011800 <__ieee754_asin+0x1e8>
 80116ce:	eea8 7b06 	vfma.f64	d7, d8, d6
 80116d2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8011808 <__ieee754_asin+0x1f0>
 80116d6:	eea7 6b08 	vfma.f64	d6, d7, d8
 80116da:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011810 <__ieee754_asin+0x1f8>
 80116de:	eea6 7b08 	vfma.f64	d7, d6, d8
 80116e2:	eea7 9b08 	vfma.f64	d9, d7, d8
 80116e6:	f000 f9eb 	bl	8011ac0 <__ieee754_sqrt>
 80116ea:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 80116ee:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80116f2:	4b4f      	ldr	r3, [pc, #316]	; (8011830 <__ieee754_asin+0x218>)
 80116f4:	429c      	cmp	r4, r3
 80116f6:	dd3d      	ble.n	8011774 <__ieee754_asin+0x15c>
 80116f8:	eea0 0b05 	vfma.f64	d0, d0, d5
 80116fc:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011818 <__ieee754_asin+0x200>
 8011700:	eea0 7b04 	vfma.f64	d7, d0, d4
 8011704:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80117b8 <__ieee754_asin+0x1a0>
 8011708:	ee30 0b47 	vsub.f64	d0, d0, d7
 801170c:	2d00      	cmp	r5, #0
 801170e:	bfd8      	it	le
 8011710:	eeb1 0b40 	vnegle.f64	d0, d0
 8011714:	e79c      	b.n	8011650 <__ieee754_asin+0x38>
 8011716:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80117c8 <__ieee754_asin+0x1b0>
 801171a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801171e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80117d0 <__ieee754_asin+0x1b8>
 8011722:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011726:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80117d8 <__ieee754_asin+0x1c0>
 801172a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801172e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80117e0 <__ieee754_asin+0x1c8>
 8011732:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011736:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80117f0 <__ieee754_asin+0x1d8>
 801173a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801173e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80117e8 <__ieee754_asin+0x1d0>
 8011742:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 80117f8 <__ieee754_asin+0x1e0>
 8011746:	eea5 6b07 	vfma.f64	d6, d5, d7
 801174a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801174e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011800 <__ieee754_asin+0x1e8>
 8011752:	eea7 5b04 	vfma.f64	d5, d7, d4
 8011756:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8011808 <__ieee754_asin+0x1f0>
 801175a:	eea5 4b07 	vfma.f64	d4, d5, d7
 801175e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011810 <__ieee754_asin+0x1f8>
 8011762:	eea4 5b07 	vfma.f64	d5, d4, d7
 8011766:	eea5 9b07 	vfma.f64	d9, d5, d7
 801176a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801176e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8011772:	e76d      	b.n	8011650 <__ieee754_asin+0x38>
 8011774:	ec53 2b10 	vmov	r2, r3, d0
 8011778:	2200      	movs	r2, #0
 801177a:	ec43 2b16 	vmov	d6, r2, r3
 801177e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011782:	eea6 8b46 	vfms.f64	d8, d6, d6
 8011786:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801178a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80117b0 <__ieee754_asin+0x198>
 801178e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011792:	eea3 7b44 	vfms.f64	d7, d3, d4
 8011796:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801179a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8011820 <__ieee754_asin+0x208>
 801179e:	eeb0 0b45 	vmov.f64	d0, d5
 80117a2:	eea6 0b44 	vfms.f64	d0, d6, d4
 80117a6:	ee37 0b40 	vsub.f64	d0, d7, d0
 80117aa:	ee35 0b40 	vsub.f64	d0, d5, d0
 80117ae:	e7ad      	b.n	801170c <__ieee754_asin+0xf4>
 80117b0:	33145c07 	.word	0x33145c07
 80117b4:	3c91a626 	.word	0x3c91a626
 80117b8:	54442d18 	.word	0x54442d18
 80117bc:	3ff921fb 	.word	0x3ff921fb
 80117c0:	8800759c 	.word	0x8800759c
 80117c4:	7e37e43c 	.word	0x7e37e43c
 80117c8:	0dfdf709 	.word	0x0dfdf709
 80117cc:	3f023de1 	.word	0x3f023de1
 80117d0:	7501b288 	.word	0x7501b288
 80117d4:	3f49efe0 	.word	0x3f49efe0
 80117d8:	b5688f3b 	.word	0xb5688f3b
 80117dc:	bfa48228 	.word	0xbfa48228
 80117e0:	0e884455 	.word	0x0e884455
 80117e4:	3fc9c155 	.word	0x3fc9c155
 80117e8:	55555555 	.word	0x55555555
 80117ec:	3fc55555 	.word	0x3fc55555
 80117f0:	03eb6f7d 	.word	0x03eb6f7d
 80117f4:	bfd4d612 	.word	0xbfd4d612
 80117f8:	b12e9282 	.word	0xb12e9282
 80117fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8011800:	1b8d0159 	.word	0x1b8d0159
 8011804:	bfe6066c 	.word	0xbfe6066c
 8011808:	9c598ac8 	.word	0x9c598ac8
 801180c:	40002ae5 	.word	0x40002ae5
 8011810:	1c8a2d4b 	.word	0x1c8a2d4b
 8011814:	c0033a27 	.word	0xc0033a27
 8011818:	33145c07 	.word	0x33145c07
 801181c:	bc91a626 	.word	0xbc91a626
 8011820:	54442d18 	.word	0x54442d18
 8011824:	3fe921fb 	.word	0x3fe921fb
 8011828:	3fefffff 	.word	0x3fefffff
 801182c:	3fdfffff 	.word	0x3fdfffff
 8011830:	3fef3332 	.word	0x3fef3332
 8011834:	00000000 	.word	0x00000000

08011838 <__ieee754_rem_pio2>:
 8011838:	b570      	push	{r4, r5, r6, lr}
 801183a:	eeb0 7b40 	vmov.f64	d7, d0
 801183e:	ee17 5a90 	vmov	r5, s15
 8011842:	4b99      	ldr	r3, [pc, #612]	; (8011aa8 <__ieee754_rem_pio2+0x270>)
 8011844:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011848:	429e      	cmp	r6, r3
 801184a:	b088      	sub	sp, #32
 801184c:	4604      	mov	r4, r0
 801184e:	dc07      	bgt.n	8011860 <__ieee754_rem_pio2+0x28>
 8011850:	2200      	movs	r2, #0
 8011852:	2300      	movs	r3, #0
 8011854:	ed84 0b00 	vstr	d0, [r4]
 8011858:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801185c:	2000      	movs	r0, #0
 801185e:	e01b      	b.n	8011898 <__ieee754_rem_pio2+0x60>
 8011860:	4b92      	ldr	r3, [pc, #584]	; (8011aac <__ieee754_rem_pio2+0x274>)
 8011862:	429e      	cmp	r6, r3
 8011864:	dc3b      	bgt.n	80118de <__ieee754_rem_pio2+0xa6>
 8011866:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801186a:	2d00      	cmp	r5, #0
 801186c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011a68 <__ieee754_rem_pio2+0x230>
 8011870:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8011874:	dd19      	ble.n	80118aa <__ieee754_rem_pio2+0x72>
 8011876:	ee30 7b46 	vsub.f64	d7, d0, d6
 801187a:	429e      	cmp	r6, r3
 801187c:	d00e      	beq.n	801189c <__ieee754_rem_pio2+0x64>
 801187e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011a70 <__ieee754_rem_pio2+0x238>
 8011882:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011886:	ee37 7b45 	vsub.f64	d7, d7, d5
 801188a:	ed84 5b00 	vstr	d5, [r4]
 801188e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011892:	ed84 7b02 	vstr	d7, [r4, #8]
 8011896:	2001      	movs	r0, #1
 8011898:	b008      	add	sp, #32
 801189a:	bd70      	pop	{r4, r5, r6, pc}
 801189c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011a78 <__ieee754_rem_pio2+0x240>
 80118a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118a4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011a80 <__ieee754_rem_pio2+0x248>
 80118a8:	e7eb      	b.n	8011882 <__ieee754_rem_pio2+0x4a>
 80118aa:	429e      	cmp	r6, r3
 80118ac:	ee30 7b06 	vadd.f64	d7, d0, d6
 80118b0:	d00e      	beq.n	80118d0 <__ieee754_rem_pio2+0x98>
 80118b2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011a70 <__ieee754_rem_pio2+0x238>
 80118b6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80118ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 80118be:	ed84 5b00 	vstr	d5, [r4]
 80118c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80118ce:	e7e3      	b.n	8011898 <__ieee754_rem_pio2+0x60>
 80118d0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011a78 <__ieee754_rem_pio2+0x240>
 80118d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011a80 <__ieee754_rem_pio2+0x248>
 80118dc:	e7eb      	b.n	80118b6 <__ieee754_rem_pio2+0x7e>
 80118de:	4b74      	ldr	r3, [pc, #464]	; (8011ab0 <__ieee754_rem_pio2+0x278>)
 80118e0:	429e      	cmp	r6, r3
 80118e2:	dc70      	bgt.n	80119c6 <__ieee754_rem_pio2+0x18e>
 80118e4:	f000 fcbc 	bl	8012260 <fabs>
 80118e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80118ec:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011a88 <__ieee754_rem_pio2+0x250>
 80118f0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80118f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80118f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80118fc:	ee17 0a90 	vmov	r0, s15
 8011900:	eeb1 4b45 	vneg.f64	d4, d5
 8011904:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011a68 <__ieee754_rem_pio2+0x230>
 8011908:	eea5 0b47 	vfms.f64	d0, d5, d7
 801190c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011a70 <__ieee754_rem_pio2+0x238>
 8011910:	281f      	cmp	r0, #31
 8011912:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011916:	ee30 6b47 	vsub.f64	d6, d0, d7
 801191a:	dc08      	bgt.n	801192e <__ieee754_rem_pio2+0xf6>
 801191c:	4b65      	ldr	r3, [pc, #404]	; (8011ab4 <__ieee754_rem_pio2+0x27c>)
 801191e:	1e42      	subs	r2, r0, #1
 8011920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011924:	42b3      	cmp	r3, r6
 8011926:	d002      	beq.n	801192e <__ieee754_rem_pio2+0xf6>
 8011928:	ed84 6b00 	vstr	d6, [r4]
 801192c:	e026      	b.n	801197c <__ieee754_rem_pio2+0x144>
 801192e:	ee16 3a90 	vmov	r3, s13
 8011932:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011936:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801193a:	2b10      	cmp	r3, #16
 801193c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011940:	ddf2      	ble.n	8011928 <__ieee754_rem_pio2+0xf0>
 8011942:	eeb0 6b40 	vmov.f64	d6, d0
 8011946:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011a78 <__ieee754_rem_pio2+0x240>
 801194a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011a80 <__ieee754_rem_pio2+0x248>
 801194e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8011952:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011956:	eea4 0b07 	vfma.f64	d0, d4, d7
 801195a:	eeb0 7b40 	vmov.f64	d7, d0
 801195e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8011962:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011966:	ee13 3a90 	vmov	r3, s7
 801196a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801196e:	1ad3      	subs	r3, r2, r3
 8011970:	2b31      	cmp	r3, #49	; 0x31
 8011972:	dc17      	bgt.n	80119a4 <__ieee754_rem_pio2+0x16c>
 8011974:	eeb0 0b46 	vmov.f64	d0, d6
 8011978:	ed84 3b00 	vstr	d3, [r4]
 801197c:	ed94 6b00 	vldr	d6, [r4]
 8011980:	2d00      	cmp	r5, #0
 8011982:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011986:	ee30 0b47 	vsub.f64	d0, d0, d7
 801198a:	ed84 0b02 	vstr	d0, [r4, #8]
 801198e:	da83      	bge.n	8011898 <__ieee754_rem_pio2+0x60>
 8011990:	eeb1 6b46 	vneg.f64	d6, d6
 8011994:	eeb1 0b40 	vneg.f64	d0, d0
 8011998:	ed84 6b00 	vstr	d6, [r4]
 801199c:	ed84 0b02 	vstr	d0, [r4, #8]
 80119a0:	4240      	negs	r0, r0
 80119a2:	e779      	b.n	8011898 <__ieee754_rem_pio2+0x60>
 80119a4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011a90 <__ieee754_rem_pio2+0x258>
 80119a8:	eeb0 0b46 	vmov.f64	d0, d6
 80119ac:	eea4 0b03 	vfma.f64	d0, d4, d3
 80119b0:	ee36 7b40 	vsub.f64	d7, d6, d0
 80119b4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011a98 <__ieee754_rem_pio2+0x260>
 80119b8:	eea4 7b03 	vfma.f64	d7, d4, d3
 80119bc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80119c0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80119c4:	e7b0      	b.n	8011928 <__ieee754_rem_pio2+0xf0>
 80119c6:	4b3c      	ldr	r3, [pc, #240]	; (8011ab8 <__ieee754_rem_pio2+0x280>)
 80119c8:	429e      	cmp	r6, r3
 80119ca:	dd06      	ble.n	80119da <__ieee754_rem_pio2+0x1a2>
 80119cc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80119d0:	ed80 7b02 	vstr	d7, [r0, #8]
 80119d4:	ed80 7b00 	vstr	d7, [r0]
 80119d8:	e740      	b.n	801185c <__ieee754_rem_pio2+0x24>
 80119da:	1532      	asrs	r2, r6, #20
 80119dc:	ee10 0a10 	vmov	r0, s0
 80119e0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80119e4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80119e8:	ec41 0b17 	vmov	d7, r0, r1
 80119ec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80119f0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011aa0 <__ieee754_rem_pio2+0x268>
 80119f4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80119f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80119fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011a00:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011a04:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011a08:	a902      	add	r1, sp, #8
 8011a0a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011a0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011a12:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011a16:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011a1a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011a1e:	2603      	movs	r6, #3
 8011a20:	4608      	mov	r0, r1
 8011a22:	ed91 7b04 	vldr	d7, [r1, #16]
 8011a26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a2e:	4633      	mov	r3, r6
 8011a30:	f1a1 0108 	sub.w	r1, r1, #8
 8011a34:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011a38:	d0f3      	beq.n	8011a22 <__ieee754_rem_pio2+0x1ea>
 8011a3a:	4920      	ldr	r1, [pc, #128]	; (8011abc <__ieee754_rem_pio2+0x284>)
 8011a3c:	9101      	str	r1, [sp, #4]
 8011a3e:	2102      	movs	r1, #2
 8011a40:	9100      	str	r1, [sp, #0]
 8011a42:	4621      	mov	r1, r4
 8011a44:	f000 f8ac 	bl	8011ba0 <__kernel_rem_pio2>
 8011a48:	2d00      	cmp	r5, #0
 8011a4a:	f6bf af25 	bge.w	8011898 <__ieee754_rem_pio2+0x60>
 8011a4e:	ed94 7b00 	vldr	d7, [r4]
 8011a52:	eeb1 7b47 	vneg.f64	d7, d7
 8011a56:	ed84 7b00 	vstr	d7, [r4]
 8011a5a:	ed94 7b02 	vldr	d7, [r4, #8]
 8011a5e:	eeb1 7b47 	vneg.f64	d7, d7
 8011a62:	ed84 7b02 	vstr	d7, [r4, #8]
 8011a66:	e79b      	b.n	80119a0 <__ieee754_rem_pio2+0x168>
 8011a68:	54400000 	.word	0x54400000
 8011a6c:	3ff921fb 	.word	0x3ff921fb
 8011a70:	1a626331 	.word	0x1a626331
 8011a74:	3dd0b461 	.word	0x3dd0b461
 8011a78:	1a600000 	.word	0x1a600000
 8011a7c:	3dd0b461 	.word	0x3dd0b461
 8011a80:	2e037073 	.word	0x2e037073
 8011a84:	3ba3198a 	.word	0x3ba3198a
 8011a88:	6dc9c883 	.word	0x6dc9c883
 8011a8c:	3fe45f30 	.word	0x3fe45f30
 8011a90:	2e000000 	.word	0x2e000000
 8011a94:	3ba3198a 	.word	0x3ba3198a
 8011a98:	252049c1 	.word	0x252049c1
 8011a9c:	397b839a 	.word	0x397b839a
 8011aa0:	00000000 	.word	0x00000000
 8011aa4:	41700000 	.word	0x41700000
 8011aa8:	3fe921fb 	.word	0x3fe921fb
 8011aac:	4002d97b 	.word	0x4002d97b
 8011ab0:	413921fb 	.word	0x413921fb
 8011ab4:	08013668 	.word	0x08013668
 8011ab8:	7fefffff 	.word	0x7fefffff
 8011abc:	080136e8 	.word	0x080136e8

08011ac0 <__ieee754_sqrt>:
 8011ac0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011ac4:	4770      	bx	lr
	...

08011ac8 <__kernel_cos>:
 8011ac8:	ee10 1a90 	vmov	r1, s1
 8011acc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011ad0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011ad4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011ad8:	da05      	bge.n	8011ae6 <__kernel_cos+0x1e>
 8011ada:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011ade:	ee17 3a90 	vmov	r3, s15
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d03d      	beq.n	8011b62 <__kernel_cos+0x9a>
 8011ae6:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011aea:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011b68 <__kernel_cos+0xa0>
 8011aee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011b70 <__kernel_cos+0xa8>
 8011af2:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011af6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011b78 <__kernel_cos+0xb0>
 8011afa:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011afe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011b80 <__kernel_cos+0xb8>
 8011b02:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011b06:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011b88 <__kernel_cos+0xc0>
 8011b0a:	4b23      	ldr	r3, [pc, #140]	; (8011b98 <__kernel_cos+0xd0>)
 8011b0c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011b10:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011b90 <__kernel_cos+0xc8>
 8011b14:	4299      	cmp	r1, r3
 8011b16:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011b1a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011b1e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011b22:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011b26:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011b2a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011b2e:	dc04      	bgt.n	8011b3a <__kernel_cos+0x72>
 8011b30:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011b34:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011b38:	4770      	bx	lr
 8011b3a:	4b18      	ldr	r3, [pc, #96]	; (8011b9c <__kernel_cos+0xd4>)
 8011b3c:	4299      	cmp	r1, r3
 8011b3e:	dc0d      	bgt.n	8011b5c <__kernel_cos+0x94>
 8011b40:	2200      	movs	r2, #0
 8011b42:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011b46:	ec43 2b15 	vmov	d5, r2, r3
 8011b4a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011b4e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011b52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011b56:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011b5a:	4770      	bx	lr
 8011b5c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011b60:	e7f3      	b.n	8011b4a <__kernel_cos+0x82>
 8011b62:	eeb0 0b44 	vmov.f64	d0, d4
 8011b66:	4770      	bx	lr
 8011b68:	be8838d4 	.word	0xbe8838d4
 8011b6c:	bda8fae9 	.word	0xbda8fae9
 8011b70:	bdb4b1c4 	.word	0xbdb4b1c4
 8011b74:	3e21ee9e 	.word	0x3e21ee9e
 8011b78:	809c52ad 	.word	0x809c52ad
 8011b7c:	be927e4f 	.word	0xbe927e4f
 8011b80:	19cb1590 	.word	0x19cb1590
 8011b84:	3efa01a0 	.word	0x3efa01a0
 8011b88:	16c15177 	.word	0x16c15177
 8011b8c:	bf56c16c 	.word	0xbf56c16c
 8011b90:	5555554c 	.word	0x5555554c
 8011b94:	3fa55555 	.word	0x3fa55555
 8011b98:	3fd33332 	.word	0x3fd33332
 8011b9c:	3fe90000 	.word	0x3fe90000

08011ba0 <__kernel_rem_pio2>:
 8011ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ba4:	ed2d 8b06 	vpush	{d8-d10}
 8011ba8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011bac:	460f      	mov	r7, r1
 8011bae:	9002      	str	r0, [sp, #8]
 8011bb0:	49c5      	ldr	r1, [pc, #788]	; (8011ec8 <__kernel_rem_pio2+0x328>)
 8011bb2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011bb4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011bb8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	f112 0f14 	cmn.w	r2, #20
 8011bc2:	bfa8      	it	ge
 8011bc4:	2018      	movge	r0, #24
 8011bc6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8011bca:	bfb8      	it	lt
 8011bcc:	2000      	movlt	r0, #0
 8011bce:	f06f 0417 	mvn.w	r4, #23
 8011bd2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8011eb0 <__kernel_rem_pio2+0x310>
 8011bd6:	bfa4      	itt	ge
 8011bd8:	f1a2 0a03 	subge.w	sl, r2, #3
 8011bdc:	fb9a f0f0 	sdivge	r0, sl, r0
 8011be0:	fb00 4404 	mla	r4, r0, r4, r4
 8011be4:	1a46      	subs	r6, r0, r1
 8011be6:	4414      	add	r4, r2
 8011be8:	eb09 0c01 	add.w	ip, r9, r1
 8011bec:	ad1a      	add	r5, sp, #104	; 0x68
 8011bee:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	4562      	cmp	r2, ip
 8011bf6:	dd10      	ble.n	8011c1a <__kernel_rem_pio2+0x7a>
 8011bf8:	9a01      	ldr	r2, [sp, #4]
 8011bfa:	ab1a      	add	r3, sp, #104	; 0x68
 8011bfc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011c00:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011c04:	f04f 0c00 	mov.w	ip, #0
 8011c08:	45cc      	cmp	ip, r9
 8011c0a:	dc26      	bgt.n	8011c5a <__kernel_rem_pio2+0xba>
 8011c0c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8011eb0 <__kernel_rem_pio2+0x310>
 8011c10:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011c14:	4616      	mov	r6, r2
 8011c16:	2500      	movs	r5, #0
 8011c18:	e015      	b.n	8011c46 <__kernel_rem_pio2+0xa6>
 8011c1a:	42d6      	cmn	r6, r2
 8011c1c:	d409      	bmi.n	8011c32 <__kernel_rem_pio2+0x92>
 8011c1e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011c22:	ee07 3a90 	vmov	s15, r3
 8011c26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011c2a:	eca5 7b02 	vstmia	r5!, {d7}
 8011c2e:	3201      	adds	r2, #1
 8011c30:	e7e0      	b.n	8011bf4 <__kernel_rem_pio2+0x54>
 8011c32:	eeb0 7b46 	vmov.f64	d7, d6
 8011c36:	e7f8      	b.n	8011c2a <__kernel_rem_pio2+0x8a>
 8011c38:	ecb8 5b02 	vldmia	r8!, {d5}
 8011c3c:	ed96 6b00 	vldr	d6, [r6]
 8011c40:	3501      	adds	r5, #1
 8011c42:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011c46:	428d      	cmp	r5, r1
 8011c48:	f1a6 0608 	sub.w	r6, r6, #8
 8011c4c:	ddf4      	ble.n	8011c38 <__kernel_rem_pio2+0x98>
 8011c4e:	ecaa 7b02 	vstmia	sl!, {d7}
 8011c52:	f10c 0c01 	add.w	ip, ip, #1
 8011c56:	3208      	adds	r2, #8
 8011c58:	e7d6      	b.n	8011c08 <__kernel_rem_pio2+0x68>
 8011c5a:	ab06      	add	r3, sp, #24
 8011c5c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011eb8 <__kernel_rem_pio2+0x318>
 8011c60:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011ec0 <__kernel_rem_pio2+0x320>
 8011c64:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011c68:	9303      	str	r3, [sp, #12]
 8011c6a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8011c6e:	464d      	mov	r5, r9
 8011c70:	00eb      	lsls	r3, r5, #3
 8011c72:	9304      	str	r3, [sp, #16]
 8011c74:	ab92      	add	r3, sp, #584	; 0x248
 8011c76:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011c7a:	f10d 0b18 	add.w	fp, sp, #24
 8011c7e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011c80:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8011c84:	465e      	mov	r6, fp
 8011c86:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	f1a2 0208 	sub.w	r2, r2, #8
 8011c92:	dc4c      	bgt.n	8011d2e <__kernel_rem_pio2+0x18e>
 8011c94:	4620      	mov	r0, r4
 8011c96:	9105      	str	r1, [sp, #20]
 8011c98:	f000 fb6a 	bl	8012370 <scalbn>
 8011c9c:	eeb0 8b40 	vmov.f64	d8, d0
 8011ca0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011ca4:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011ca8:	f000 fae6 	bl	8012278 <floor>
 8011cac:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011cb0:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011cb4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011cb8:	2c00      	cmp	r4, #0
 8011cba:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011cbe:	ee17 8a90 	vmov	r8, s15
 8011cc2:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011cc6:	9905      	ldr	r1, [sp, #20]
 8011cc8:	dd43      	ble.n	8011d52 <__kernel_rem_pio2+0x1b2>
 8011cca:	1e68      	subs	r0, r5, #1
 8011ccc:	ab06      	add	r3, sp, #24
 8011cce:	f1c4 0c18 	rsb	ip, r4, #24
 8011cd2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011cd6:	fa46 f20c 	asr.w	r2, r6, ip
 8011cda:	4490      	add	r8, r2
 8011cdc:	fa02 f20c 	lsl.w	r2, r2, ip
 8011ce0:	1ab6      	subs	r6, r6, r2
 8011ce2:	f1c4 0217 	rsb	r2, r4, #23
 8011ce6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011cea:	4116      	asrs	r6, r2
 8011cec:	2e00      	cmp	r6, #0
 8011cee:	dd3f      	ble.n	8011d70 <__kernel_rem_pio2+0x1d0>
 8011cf0:	f04f 0c00 	mov.w	ip, #0
 8011cf4:	f108 0801 	add.w	r8, r8, #1
 8011cf8:	4660      	mov	r0, ip
 8011cfa:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011cfe:	4565      	cmp	r5, ip
 8011d00:	dc6e      	bgt.n	8011de0 <__kernel_rem_pio2+0x240>
 8011d02:	2c00      	cmp	r4, #0
 8011d04:	dd04      	ble.n	8011d10 <__kernel_rem_pio2+0x170>
 8011d06:	2c01      	cmp	r4, #1
 8011d08:	d07f      	beq.n	8011e0a <__kernel_rem_pio2+0x26a>
 8011d0a:	2c02      	cmp	r4, #2
 8011d0c:	f000 8087 	beq.w	8011e1e <__kernel_rem_pio2+0x27e>
 8011d10:	2e02      	cmp	r6, #2
 8011d12:	d12d      	bne.n	8011d70 <__kernel_rem_pio2+0x1d0>
 8011d14:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011d18:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011d1c:	b340      	cbz	r0, 8011d70 <__kernel_rem_pio2+0x1d0>
 8011d1e:	4620      	mov	r0, r4
 8011d20:	9105      	str	r1, [sp, #20]
 8011d22:	f000 fb25 	bl	8012370 <scalbn>
 8011d26:	9905      	ldr	r1, [sp, #20]
 8011d28:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011d2c:	e020      	b.n	8011d70 <__kernel_rem_pio2+0x1d0>
 8011d2e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011d32:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011d36:	3801      	subs	r0, #1
 8011d38:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011d3c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011d40:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011d44:	eca6 0a01 	vstmia	r6!, {s0}
 8011d48:	ed92 0b00 	vldr	d0, [r2]
 8011d4c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011d50:	e79c      	b.n	8011c8c <__kernel_rem_pio2+0xec>
 8011d52:	d105      	bne.n	8011d60 <__kernel_rem_pio2+0x1c0>
 8011d54:	1e6a      	subs	r2, r5, #1
 8011d56:	ab06      	add	r3, sp, #24
 8011d58:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011d5c:	15f6      	asrs	r6, r6, #23
 8011d5e:	e7c5      	b.n	8011cec <__kernel_rem_pio2+0x14c>
 8011d60:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011d64:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d6c:	da36      	bge.n	8011ddc <__kernel_rem_pio2+0x23c>
 8011d6e:	2600      	movs	r6, #0
 8011d70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d78:	f040 80aa 	bne.w	8011ed0 <__kernel_rem_pio2+0x330>
 8011d7c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011d80:	4658      	mov	r0, fp
 8011d82:	2200      	movs	r2, #0
 8011d84:	4548      	cmp	r0, r9
 8011d86:	da52      	bge.n	8011e2e <__kernel_rem_pio2+0x28e>
 8011d88:	2a00      	cmp	r2, #0
 8011d8a:	f000 8081 	beq.w	8011e90 <__kernel_rem_pio2+0x2f0>
 8011d8e:	ab06      	add	r3, sp, #24
 8011d90:	3c18      	subs	r4, #24
 8011d92:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	f000 8087 	beq.w	8011eaa <__kernel_rem_pio2+0x30a>
 8011d9c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011da0:	4620      	mov	r0, r4
 8011da2:	f000 fae5 	bl	8012370 <scalbn>
 8011da6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011daa:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8011eb8 <__kernel_rem_pio2+0x318>
 8011dae:	a96a      	add	r1, sp, #424	; 0x1a8
 8011db0:	f103 0208 	add.w	r2, r3, #8
 8011db4:	1888      	adds	r0, r1, r2
 8011db6:	4659      	mov	r1, fp
 8011db8:	2900      	cmp	r1, #0
 8011dba:	f280 80b7 	bge.w	8011f2c <__kernel_rem_pio2+0x38c>
 8011dbe:	4659      	mov	r1, fp
 8011dc0:	2900      	cmp	r1, #0
 8011dc2:	f2c0 80d5 	blt.w	8011f70 <__kernel_rem_pio2+0x3d0>
 8011dc6:	a86a      	add	r0, sp, #424	; 0x1a8
 8011dc8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8011dcc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8011eb0 <__kernel_rem_pio2+0x310>
 8011dd0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011ecc <__kernel_rem_pio2+0x32c>
 8011dd4:	2400      	movs	r4, #0
 8011dd6:	ebab 0001 	sub.w	r0, fp, r1
 8011dda:	e0be      	b.n	8011f5a <__kernel_rem_pio2+0x3ba>
 8011ddc:	2602      	movs	r6, #2
 8011dde:	e787      	b.n	8011cf0 <__kernel_rem_pio2+0x150>
 8011de0:	f8db 2000 	ldr.w	r2, [fp]
 8011de4:	b958      	cbnz	r0, 8011dfe <__kernel_rem_pio2+0x25e>
 8011de6:	b122      	cbz	r2, 8011df2 <__kernel_rem_pio2+0x252>
 8011de8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011dec:	f8cb 2000 	str.w	r2, [fp]
 8011df0:	2201      	movs	r2, #1
 8011df2:	f10c 0c01 	add.w	ip, ip, #1
 8011df6:	f10b 0b04 	add.w	fp, fp, #4
 8011dfa:	4610      	mov	r0, r2
 8011dfc:	e77f      	b.n	8011cfe <__kernel_rem_pio2+0x15e>
 8011dfe:	ebae 0202 	sub.w	r2, lr, r2
 8011e02:	f8cb 2000 	str.w	r2, [fp]
 8011e06:	4602      	mov	r2, r0
 8011e08:	e7f3      	b.n	8011df2 <__kernel_rem_pio2+0x252>
 8011e0a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011e0e:	ab06      	add	r3, sp, #24
 8011e10:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011e14:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011e18:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011e1c:	e778      	b.n	8011d10 <__kernel_rem_pio2+0x170>
 8011e1e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011e22:	ab06      	add	r3, sp, #24
 8011e24:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011e28:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011e2c:	e7f4      	b.n	8011e18 <__kernel_rem_pio2+0x278>
 8011e2e:	ab06      	add	r3, sp, #24
 8011e30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011e34:	3801      	subs	r0, #1
 8011e36:	431a      	orrs	r2, r3
 8011e38:	e7a4      	b.n	8011d84 <__kernel_rem_pio2+0x1e4>
 8011e3a:	f10c 0c01 	add.w	ip, ip, #1
 8011e3e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011e42:	2800      	cmp	r0, #0
 8011e44:	d0f9      	beq.n	8011e3a <__kernel_rem_pio2+0x29a>
 8011e46:	9b04      	ldr	r3, [sp, #16]
 8011e48:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011e4c:	eb0d 0203 	add.w	r2, sp, r3
 8011e50:	9b01      	ldr	r3, [sp, #4]
 8011e52:	18e8      	adds	r0, r5, r3
 8011e54:	ab1a      	add	r3, sp, #104	; 0x68
 8011e56:	1c6e      	adds	r6, r5, #1
 8011e58:	3a98      	subs	r2, #152	; 0x98
 8011e5a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011e5e:	4465      	add	r5, ip
 8011e60:	42b5      	cmp	r5, r6
 8011e62:	f6ff af05 	blt.w	8011c70 <__kernel_rem_pio2+0xd0>
 8011e66:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8011e6a:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011e6e:	ee07 3a90 	vmov	s15, r3
 8011e72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011e76:	f04f 0c00 	mov.w	ip, #0
 8011e7a:	eca0 7b02 	vstmia	r0!, {d7}
 8011e7e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011eb0 <__kernel_rem_pio2+0x310>
 8011e82:	4680      	mov	r8, r0
 8011e84:	458c      	cmp	ip, r1
 8011e86:	dd07      	ble.n	8011e98 <__kernel_rem_pio2+0x2f8>
 8011e88:	eca2 7b02 	vstmia	r2!, {d7}
 8011e8c:	3601      	adds	r6, #1
 8011e8e:	e7e7      	b.n	8011e60 <__kernel_rem_pio2+0x2c0>
 8011e90:	9a03      	ldr	r2, [sp, #12]
 8011e92:	f04f 0c01 	mov.w	ip, #1
 8011e96:	e7d2      	b.n	8011e3e <__kernel_rem_pio2+0x29e>
 8011e98:	ecbe 5b02 	vldmia	lr!, {d5}
 8011e9c:	ed38 6b02 	vldmdb	r8!, {d6}
 8011ea0:	f10c 0c01 	add.w	ip, ip, #1
 8011ea4:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011ea8:	e7ec      	b.n	8011e84 <__kernel_rem_pio2+0x2e4>
 8011eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011eae:	e76e      	b.n	8011d8e <__kernel_rem_pio2+0x1ee>
	...
 8011ebc:	3e700000 	.word	0x3e700000
 8011ec0:	00000000 	.word	0x00000000
 8011ec4:	41700000 	.word	0x41700000
 8011ec8:	080140a0 	.word	0x080140a0
 8011ecc:	08014060 	.word	0x08014060
 8011ed0:	4260      	negs	r0, r4
 8011ed2:	eeb0 0b48 	vmov.f64	d0, d8
 8011ed6:	f000 fa4b 	bl	8012370 <scalbn>
 8011eda:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80120b8 <__kernel_rem_pio2+0x518>
 8011ede:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee6:	db18      	blt.n	8011f1a <__kernel_rem_pio2+0x37a>
 8011ee8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80120c0 <__kernel_rem_pio2+0x520>
 8011eec:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011ef0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011ef4:	aa06      	add	r2, sp, #24
 8011ef6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011efa:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011efe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011f02:	f105 0b01 	add.w	fp, r5, #1
 8011f06:	ee10 3a10 	vmov	r3, s0
 8011f0a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011f0e:	ee17 3a10 	vmov	r3, s14
 8011f12:	3418      	adds	r4, #24
 8011f14:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011f18:	e740      	b.n	8011d9c <__kernel_rem_pio2+0x1fc>
 8011f1a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011f1e:	aa06      	add	r2, sp, #24
 8011f20:	ee10 3a10 	vmov	r3, s0
 8011f24:	46ab      	mov	fp, r5
 8011f26:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011f2a:	e737      	b.n	8011d9c <__kernel_rem_pio2+0x1fc>
 8011f2c:	ac06      	add	r4, sp, #24
 8011f2e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8011f32:	9401      	str	r4, [sp, #4]
 8011f34:	ee07 4a90 	vmov	s15, r4
 8011f38:	3901      	subs	r1, #1
 8011f3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011f3e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011f42:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011f46:	ed20 7b02 	vstmdb	r0!, {d7}
 8011f4a:	e735      	b.n	8011db8 <__kernel_rem_pio2+0x218>
 8011f4c:	ecbc 5b02 	vldmia	ip!, {d5}
 8011f50:	ecb5 6b02 	vldmia	r5!, {d6}
 8011f54:	3401      	adds	r4, #1
 8011f56:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011f5a:	454c      	cmp	r4, r9
 8011f5c:	dc01      	bgt.n	8011f62 <__kernel_rem_pio2+0x3c2>
 8011f5e:	4284      	cmp	r4, r0
 8011f60:	ddf4      	ble.n	8011f4c <__kernel_rem_pio2+0x3ac>
 8011f62:	ac42      	add	r4, sp, #264	; 0x108
 8011f64:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8011f68:	ed80 7b00 	vstr	d7, [r0]
 8011f6c:	3901      	subs	r1, #1
 8011f6e:	e727      	b.n	8011dc0 <__kernel_rem_pio2+0x220>
 8011f70:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8011f72:	2902      	cmp	r1, #2
 8011f74:	dc0a      	bgt.n	8011f8c <__kernel_rem_pio2+0x3ec>
 8011f76:	2900      	cmp	r1, #0
 8011f78:	dc2c      	bgt.n	8011fd4 <__kernel_rem_pio2+0x434>
 8011f7a:	d045      	beq.n	8012008 <__kernel_rem_pio2+0x468>
 8011f7c:	f008 0007 	and.w	r0, r8, #7
 8011f80:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8011f84:	ecbd 8b06 	vpop	{d8-d10}
 8011f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f8c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011f8e:	2a03      	cmp	r2, #3
 8011f90:	d1f4      	bne.n	8011f7c <__kernel_rem_pio2+0x3dc>
 8011f92:	aa42      	add	r2, sp, #264	; 0x108
 8011f94:	4413      	add	r3, r2
 8011f96:	461a      	mov	r2, r3
 8011f98:	4619      	mov	r1, r3
 8011f9a:	4658      	mov	r0, fp
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	f1a1 0108 	sub.w	r1, r1, #8
 8011fa2:	dc54      	bgt.n	801204e <__kernel_rem_pio2+0x4ae>
 8011fa4:	4659      	mov	r1, fp
 8011fa6:	2901      	cmp	r1, #1
 8011fa8:	f1a2 0208 	sub.w	r2, r2, #8
 8011fac:	dc5f      	bgt.n	801206e <__kernel_rem_pio2+0x4ce>
 8011fae:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80120c8 <__kernel_rem_pio2+0x528>
 8011fb2:	3308      	adds	r3, #8
 8011fb4:	f1bb 0f01 	cmp.w	fp, #1
 8011fb8:	dc69      	bgt.n	801208e <__kernel_rem_pio2+0x4ee>
 8011fba:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011fbe:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011fc2:	2e00      	cmp	r6, #0
 8011fc4:	d16a      	bne.n	801209c <__kernel_rem_pio2+0x4fc>
 8011fc6:	ed87 5b00 	vstr	d5, [r7]
 8011fca:	ed87 6b02 	vstr	d6, [r7, #8]
 8011fce:	ed87 7b04 	vstr	d7, [r7, #16]
 8011fd2:	e7d3      	b.n	8011f7c <__kernel_rem_pio2+0x3dc>
 8011fd4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80120c8 <__kernel_rem_pio2+0x528>
 8011fd8:	ab42      	add	r3, sp, #264	; 0x108
 8011fda:	441a      	add	r2, r3
 8011fdc:	465b      	mov	r3, fp
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	da26      	bge.n	8012030 <__kernel_rem_pio2+0x490>
 8011fe2:	b35e      	cbz	r6, 801203c <__kernel_rem_pio2+0x49c>
 8011fe4:	eeb1 7b46 	vneg.f64	d7, d6
 8011fe8:	ed87 7b00 	vstr	d7, [r7]
 8011fec:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011ff0:	aa44      	add	r2, sp, #272	; 0x110
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011ff8:	459b      	cmp	fp, r3
 8011ffa:	da22      	bge.n	8012042 <__kernel_rem_pio2+0x4a2>
 8011ffc:	b10e      	cbz	r6, 8012002 <__kernel_rem_pio2+0x462>
 8011ffe:	eeb1 7b47 	vneg.f64	d7, d7
 8012002:	ed87 7b02 	vstr	d7, [r7, #8]
 8012006:	e7b9      	b.n	8011f7c <__kernel_rem_pio2+0x3dc>
 8012008:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80120c8 <__kernel_rem_pio2+0x528>
 801200c:	ab42      	add	r3, sp, #264	; 0x108
 801200e:	441a      	add	r2, r3
 8012010:	f1bb 0f00 	cmp.w	fp, #0
 8012014:	da05      	bge.n	8012022 <__kernel_rem_pio2+0x482>
 8012016:	b10e      	cbz	r6, 801201c <__kernel_rem_pio2+0x47c>
 8012018:	eeb1 7b47 	vneg.f64	d7, d7
 801201c:	ed87 7b00 	vstr	d7, [r7]
 8012020:	e7ac      	b.n	8011f7c <__kernel_rem_pio2+0x3dc>
 8012022:	ed32 6b02 	vldmdb	r2!, {d6}
 8012026:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801202a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801202e:	e7ef      	b.n	8012010 <__kernel_rem_pio2+0x470>
 8012030:	ed32 7b02 	vldmdb	r2!, {d7}
 8012034:	3b01      	subs	r3, #1
 8012036:	ee36 6b07 	vadd.f64	d6, d6, d7
 801203a:	e7d0      	b.n	8011fde <__kernel_rem_pio2+0x43e>
 801203c:	eeb0 7b46 	vmov.f64	d7, d6
 8012040:	e7d2      	b.n	8011fe8 <__kernel_rem_pio2+0x448>
 8012042:	ecb2 6b02 	vldmia	r2!, {d6}
 8012046:	3301      	adds	r3, #1
 8012048:	ee37 7b06 	vadd.f64	d7, d7, d6
 801204c:	e7d4      	b.n	8011ff8 <__kernel_rem_pio2+0x458>
 801204e:	ed91 7b00 	vldr	d7, [r1]
 8012052:	ed91 5b02 	vldr	d5, [r1, #8]
 8012056:	3801      	subs	r0, #1
 8012058:	ee37 6b05 	vadd.f64	d6, d7, d5
 801205c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012060:	ed81 6b00 	vstr	d6, [r1]
 8012064:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012068:	ed81 7b02 	vstr	d7, [r1, #8]
 801206c:	e796      	b.n	8011f9c <__kernel_rem_pio2+0x3fc>
 801206e:	ed92 7b00 	vldr	d7, [r2]
 8012072:	ed92 5b02 	vldr	d5, [r2, #8]
 8012076:	3901      	subs	r1, #1
 8012078:	ee37 6b05 	vadd.f64	d6, d7, d5
 801207c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012080:	ed82 6b00 	vstr	d6, [r2]
 8012084:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012088:	ed82 7b02 	vstr	d7, [r2, #8]
 801208c:	e78b      	b.n	8011fa6 <__kernel_rem_pio2+0x406>
 801208e:	ed33 6b02 	vldmdb	r3!, {d6}
 8012092:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012096:	ee37 7b06 	vadd.f64	d7, d7, d6
 801209a:	e78b      	b.n	8011fb4 <__kernel_rem_pio2+0x414>
 801209c:	eeb1 5b45 	vneg.f64	d5, d5
 80120a0:	eeb1 6b46 	vneg.f64	d6, d6
 80120a4:	ed87 5b00 	vstr	d5, [r7]
 80120a8:	eeb1 7b47 	vneg.f64	d7, d7
 80120ac:	ed87 6b02 	vstr	d6, [r7, #8]
 80120b0:	e78d      	b.n	8011fce <__kernel_rem_pio2+0x42e>
 80120b2:	bf00      	nop
 80120b4:	f3af 8000 	nop.w
 80120b8:	00000000 	.word	0x00000000
 80120bc:	41700000 	.word	0x41700000
 80120c0:	00000000 	.word	0x00000000
 80120c4:	3e700000 	.word	0x3e700000
	...

080120d0 <__kernel_sin>:
 80120d0:	ee10 3a90 	vmov	r3, s1
 80120d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80120d8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80120dc:	da04      	bge.n	80120e8 <__kernel_sin+0x18>
 80120de:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80120e2:	ee17 3a90 	vmov	r3, s15
 80120e6:	b35b      	cbz	r3, 8012140 <__kernel_sin+0x70>
 80120e8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80120ec:	ee20 5b06 	vmul.f64	d5, d0, d6
 80120f0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012148 <__kernel_sin+0x78>
 80120f4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012150 <__kernel_sin+0x80>
 80120f8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80120fc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012158 <__kernel_sin+0x88>
 8012100:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012104:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012160 <__kernel_sin+0x90>
 8012108:	eea7 4b06 	vfma.f64	d4, d7, d6
 801210c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012168 <__kernel_sin+0x98>
 8012110:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012114:	b930      	cbnz	r0, 8012124 <__kernel_sin+0x54>
 8012116:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012170 <__kernel_sin+0xa0>
 801211a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801211e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8012122:	4770      	bx	lr
 8012124:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012128:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801212c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012130:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8012134:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012178 <__kernel_sin+0xa8>
 8012138:	eea5 1b07 	vfma.f64	d1, d5, d7
 801213c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	f3af 8000 	nop.w
 8012148:	5acfd57c 	.word	0x5acfd57c
 801214c:	3de5d93a 	.word	0x3de5d93a
 8012150:	8a2b9ceb 	.word	0x8a2b9ceb
 8012154:	be5ae5e6 	.word	0xbe5ae5e6
 8012158:	57b1fe7d 	.word	0x57b1fe7d
 801215c:	3ec71de3 	.word	0x3ec71de3
 8012160:	19c161d5 	.word	0x19c161d5
 8012164:	bf2a01a0 	.word	0xbf2a01a0
 8012168:	1110f8a6 	.word	0x1110f8a6
 801216c:	3f811111 	.word	0x3f811111
 8012170:	55555549 	.word	0x55555549
 8012174:	bfc55555 	.word	0xbfc55555
 8012178:	55555549 	.word	0x55555549
 801217c:	3fc55555 	.word	0x3fc55555

08012180 <with_errno>:
 8012180:	b513      	push	{r0, r1, r4, lr}
 8012182:	4604      	mov	r4, r0
 8012184:	ed8d 0b00 	vstr	d0, [sp]
 8012188:	f7fe f9f8 	bl	801057c <__errno>
 801218c:	ed9d 0b00 	vldr	d0, [sp]
 8012190:	6004      	str	r4, [r0, #0]
 8012192:	b002      	add	sp, #8
 8012194:	bd10      	pop	{r4, pc}

08012196 <xflow>:
 8012196:	b082      	sub	sp, #8
 8012198:	b158      	cbz	r0, 80121b2 <xflow+0x1c>
 801219a:	eeb1 7b40 	vneg.f64	d7, d0
 801219e:	ed8d 7b00 	vstr	d7, [sp]
 80121a2:	ed9d 7b00 	vldr	d7, [sp]
 80121a6:	2022      	movs	r0, #34	; 0x22
 80121a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80121ac:	b002      	add	sp, #8
 80121ae:	f7ff bfe7 	b.w	8012180 <with_errno>
 80121b2:	eeb0 7b40 	vmov.f64	d7, d0
 80121b6:	e7f2      	b.n	801219e <xflow+0x8>

080121b8 <__math_uflow>:
 80121b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80121c0 <__math_uflow+0x8>
 80121bc:	f7ff bfeb 	b.w	8012196 <xflow>
 80121c0:	00000000 	.word	0x00000000
 80121c4:	10000000 	.word	0x10000000

080121c8 <__math_oflow>:
 80121c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80121d0 <__math_oflow+0x8>
 80121cc:	f7ff bfe3 	b.w	8012196 <xflow>
 80121d0:	00000000 	.word	0x00000000
 80121d4:	70000000 	.word	0x70000000

080121d8 <__math_divzero>:
 80121d8:	b082      	sub	sp, #8
 80121da:	2800      	cmp	r0, #0
 80121dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80121e0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80121e4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80121e8:	ed8d 7b00 	vstr	d7, [sp]
 80121ec:	ed9d 0b00 	vldr	d0, [sp]
 80121f0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012200 <__math_divzero+0x28>
 80121f4:	2022      	movs	r0, #34	; 0x22
 80121f6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80121fa:	b002      	add	sp, #8
 80121fc:	f7ff bfc0 	b.w	8012180 <with_errno>
	...

08012208 <__math_invalid>:
 8012208:	eeb0 7b40 	vmov.f64	d7, d0
 801220c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012214:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012218:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801221c:	d602      	bvs.n	8012224 <__math_invalid+0x1c>
 801221e:	2021      	movs	r0, #33	; 0x21
 8012220:	f7ff bfae 	b.w	8012180 <with_errno>
 8012224:	4770      	bx	lr

08012226 <__math_check_uflow>:
 8012226:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801222e:	d102      	bne.n	8012236 <__math_check_uflow+0x10>
 8012230:	2022      	movs	r0, #34	; 0x22
 8012232:	f7ff bfa5 	b.w	8012180 <with_errno>
 8012236:	4770      	bx	lr

08012238 <__math_check_oflow>:
 8012238:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012258 <__math_check_oflow+0x20>
 801223c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012240:	eeb4 7b46 	vcmp.f64	d7, d6
 8012244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012248:	dd02      	ble.n	8012250 <__math_check_oflow+0x18>
 801224a:	2022      	movs	r0, #34	; 0x22
 801224c:	f7ff bf98 	b.w	8012180 <with_errno>
 8012250:	4770      	bx	lr
 8012252:	bf00      	nop
 8012254:	f3af 8000 	nop.w
 8012258:	ffffffff 	.word	0xffffffff
 801225c:	7fefffff 	.word	0x7fefffff

08012260 <fabs>:
 8012260:	ec51 0b10 	vmov	r0, r1, d0
 8012264:	ee10 2a10 	vmov	r2, s0
 8012268:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801226c:	ec43 2b10 	vmov	d0, r2, r3
 8012270:	4770      	bx	lr
 8012272:	0000      	movs	r0, r0
 8012274:	0000      	movs	r0, r0
	...

08012278 <floor>:
 8012278:	ee10 1a90 	vmov	r1, s1
 801227c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012280:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8012284:	2b13      	cmp	r3, #19
 8012286:	b530      	push	{r4, r5, lr}
 8012288:	ee10 0a10 	vmov	r0, s0
 801228c:	ee10 5a10 	vmov	r5, s0
 8012290:	dc31      	bgt.n	80122f6 <floor+0x7e>
 8012292:	2b00      	cmp	r3, #0
 8012294:	da15      	bge.n	80122c2 <floor+0x4a>
 8012296:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012350 <floor+0xd8>
 801229a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801229e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80122a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a6:	dd07      	ble.n	80122b8 <floor+0x40>
 80122a8:	2900      	cmp	r1, #0
 80122aa:	da4e      	bge.n	801234a <floor+0xd2>
 80122ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80122b0:	4318      	orrs	r0, r3
 80122b2:	d001      	beq.n	80122b8 <floor+0x40>
 80122b4:	4928      	ldr	r1, [pc, #160]	; (8012358 <floor+0xe0>)
 80122b6:	2000      	movs	r0, #0
 80122b8:	460b      	mov	r3, r1
 80122ba:	4602      	mov	r2, r0
 80122bc:	ec43 2b10 	vmov	d0, r2, r3
 80122c0:	e020      	b.n	8012304 <floor+0x8c>
 80122c2:	4a26      	ldr	r2, [pc, #152]	; (801235c <floor+0xe4>)
 80122c4:	411a      	asrs	r2, r3
 80122c6:	ea01 0402 	and.w	r4, r1, r2
 80122ca:	4304      	orrs	r4, r0
 80122cc:	d01a      	beq.n	8012304 <floor+0x8c>
 80122ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012350 <floor+0xd8>
 80122d2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80122d6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80122da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122de:	ddeb      	ble.n	80122b8 <floor+0x40>
 80122e0:	2900      	cmp	r1, #0
 80122e2:	bfbe      	ittt	lt
 80122e4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80122e8:	fa40 f303 	asrlt.w	r3, r0, r3
 80122ec:	18c9      	addlt	r1, r1, r3
 80122ee:	ea21 0102 	bic.w	r1, r1, r2
 80122f2:	2000      	movs	r0, #0
 80122f4:	e7e0      	b.n	80122b8 <floor+0x40>
 80122f6:	2b33      	cmp	r3, #51	; 0x33
 80122f8:	dd05      	ble.n	8012306 <floor+0x8e>
 80122fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80122fe:	d101      	bne.n	8012304 <floor+0x8c>
 8012300:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012304:	bd30      	pop	{r4, r5, pc}
 8012306:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801230a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801230e:	40e2      	lsrs	r2, r4
 8012310:	4202      	tst	r2, r0
 8012312:	d0f7      	beq.n	8012304 <floor+0x8c>
 8012314:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012350 <floor+0xd8>
 8012318:	ee30 0b07 	vadd.f64	d0, d0, d7
 801231c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012324:	ddc8      	ble.n	80122b8 <floor+0x40>
 8012326:	2900      	cmp	r1, #0
 8012328:	da02      	bge.n	8012330 <floor+0xb8>
 801232a:	2b14      	cmp	r3, #20
 801232c:	d103      	bne.n	8012336 <floor+0xbe>
 801232e:	3101      	adds	r1, #1
 8012330:	ea20 0002 	bic.w	r0, r0, r2
 8012334:	e7c0      	b.n	80122b8 <floor+0x40>
 8012336:	2401      	movs	r4, #1
 8012338:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801233c:	fa04 f303 	lsl.w	r3, r4, r3
 8012340:	4418      	add	r0, r3
 8012342:	42a8      	cmp	r0, r5
 8012344:	bf38      	it	cc
 8012346:	1909      	addcc	r1, r1, r4
 8012348:	e7f2      	b.n	8012330 <floor+0xb8>
 801234a:	2000      	movs	r0, #0
 801234c:	4601      	mov	r1, r0
 801234e:	e7b3      	b.n	80122b8 <floor+0x40>
 8012350:	8800759c 	.word	0x8800759c
 8012354:	7e37e43c 	.word	0x7e37e43c
 8012358:	bff00000 	.word	0xbff00000
 801235c:	000fffff 	.word	0x000fffff

08012360 <nan>:
 8012360:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012368 <nan+0x8>
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	00000000 	.word	0x00000000
 801236c:	7ff80000 	.word	0x7ff80000

08012370 <scalbn>:
 8012370:	ee10 1a90 	vmov	r1, s1
 8012374:	b510      	push	{r4, lr}
 8012376:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801237a:	b98c      	cbnz	r4, 80123a0 <scalbn+0x30>
 801237c:	ee10 3a10 	vmov	r3, s0
 8012380:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012384:	430b      	orrs	r3, r1
 8012386:	d011      	beq.n	80123ac <scalbn+0x3c>
 8012388:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012450 <scalbn+0xe0>
 801238c:	4b3c      	ldr	r3, [pc, #240]	; (8012480 <scalbn+0x110>)
 801238e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012392:	4298      	cmp	r0, r3
 8012394:	da0b      	bge.n	80123ae <scalbn+0x3e>
 8012396:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012458 <scalbn+0xe8>
 801239a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801239e:	e005      	b.n	80123ac <scalbn+0x3c>
 80123a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80123a4:	429c      	cmp	r4, r3
 80123a6:	d107      	bne.n	80123b8 <scalbn+0x48>
 80123a8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80123ac:	bd10      	pop	{r4, pc}
 80123ae:	ee10 1a90 	vmov	r1, s1
 80123b2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80123b6:	3c36      	subs	r4, #54	; 0x36
 80123b8:	4404      	add	r4, r0
 80123ba:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80123be:	429c      	cmp	r4, r3
 80123c0:	dd0d      	ble.n	80123de <scalbn+0x6e>
 80123c2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012460 <scalbn+0xf0>
 80123c6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012468 <scalbn+0xf8>
 80123ca:	eeb0 6b47 	vmov.f64	d6, d7
 80123ce:	ee10 3a90 	vmov	r3, s1
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	fe27 7b05 	vselge.f64	d7, d7, d5
 80123d8:	ee27 0b06 	vmul.f64	d0, d7, d6
 80123dc:	e7e6      	b.n	80123ac <scalbn+0x3c>
 80123de:	2c00      	cmp	r4, #0
 80123e0:	dd0a      	ble.n	80123f8 <scalbn+0x88>
 80123e2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80123e6:	ec53 2b10 	vmov	r2, r3, d0
 80123ea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80123ee:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80123f2:	ec43 2b10 	vmov	d0, r2, r3
 80123f6:	e7d9      	b.n	80123ac <scalbn+0x3c>
 80123f8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80123fc:	da19      	bge.n	8012432 <scalbn+0xc2>
 80123fe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012402:	4298      	cmp	r0, r3
 8012404:	ee10 3a90 	vmov	r3, s1
 8012408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801240c:	dd09      	ble.n	8012422 <scalbn+0xb2>
 801240e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8012460 <scalbn+0xf0>
 8012412:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012468 <scalbn+0xf8>
 8012416:	eeb0 7b40 	vmov.f64	d7, d0
 801241a:	2b00      	cmp	r3, #0
 801241c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8012420:	e7bb      	b.n	801239a <scalbn+0x2a>
 8012422:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8012458 <scalbn+0xe8>
 8012426:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8012470 <scalbn+0x100>
 801242a:	eeb0 7b40 	vmov.f64	d7, d0
 801242e:	2b00      	cmp	r3, #0
 8012430:	e7f4      	b.n	801241c <scalbn+0xac>
 8012432:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012436:	ec53 2b10 	vmov	r2, r3, d0
 801243a:	3436      	adds	r4, #54	; 0x36
 801243c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012440:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012444:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012478 <scalbn+0x108>
 8012448:	ec43 2b10 	vmov	d0, r2, r3
 801244c:	e7a5      	b.n	801239a <scalbn+0x2a>
 801244e:	bf00      	nop
 8012450:	00000000 	.word	0x00000000
 8012454:	43500000 	.word	0x43500000
 8012458:	c2f8f359 	.word	0xc2f8f359
 801245c:	01a56e1f 	.word	0x01a56e1f
 8012460:	8800759c 	.word	0x8800759c
 8012464:	7e37e43c 	.word	0x7e37e43c
 8012468:	8800759c 	.word	0x8800759c
 801246c:	fe37e43c 	.word	0xfe37e43c
 8012470:	c2f8f359 	.word	0xc2f8f359
 8012474:	81a56e1f 	.word	0x81a56e1f
 8012478:	00000000 	.word	0x00000000
 801247c:	3c900000 	.word	0x3c900000
 8012480:	ffff3cb0 	.word	0xffff3cb0

08012484 <_init>:
 8012484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012486:	bf00      	nop
 8012488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801248a:	bc08      	pop	{r3}
 801248c:	469e      	mov	lr, r3
 801248e:	4770      	bx	lr

08012490 <_fini>:
 8012490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012492:	bf00      	nop
 8012494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012496:	bc08      	pop	{r3}
 8012498:	469e      	mov	lr, r3
 801249a:	4770      	bx	lr
