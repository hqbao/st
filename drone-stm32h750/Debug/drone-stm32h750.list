
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e204  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b20  0800e4a8  0800e4a8  0001e4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ffc8  0800ffc8  0001ffc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ffd0  0800ffd0  0001ffd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ffd4  0800ffd4  0001ffd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800ffd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000018c0  240000a0  08010074  000200a0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001960  08010074  00021960  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f185  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003377  00000000  00000000  0003f24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001660  00000000  00000000  000425c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001540  00000000  00000000  00043c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039525  00000000  00000000  00045168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f8e2  00000000  00000000  0007e68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b81b  00000000  00000000  0009df6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020978a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006908  00000000  00000000  002097dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e48c 	.word	0x0800e48c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	0800e48c 	.word	0x0800e48c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	ed87 0a02 	vstr	s0, [r7, #8]
 80006a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80006a4:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	609a      	str	r2, [r3, #8]
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <average_filter_init>:
  filter->_last_estimate=filter->_current_estimate;

  return filter->_current_estimate;
}

void average_filter_init(average_filter_t* filter, int width) {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
  filter->width = width;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f04f 0200 	mov.w	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f103 0008 	add.w	r0, r3, #8
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	461a      	mov	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f00b fffd 	bl	800c6f4 <memset>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000714:	3301      	adds	r3, #1
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	6812      	ldr	r2, [r2, #0]
 800071a:	fb93 f1f2 	sdiv	r1, r3, r2
 800071e:	fb01 f202 	mul.w	r2, r1, r2
 8000722:	1a9a      	subs	r2, r3, r2
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	3302      	adds	r3, #2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000752:	edd7 7a00 	vldr	s15, [r7]
 8000756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	3302      	adds	r3, #2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	ed93 7a01 	vldr	s14, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000784:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000788:	eef0 7a66 	vmov.f32	s15, s13
}
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t count) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e010      	b.n	80007ce <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80007ac:	2102      	movs	r1, #2
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <flash+0x48>)
 80007b0:	f004 f897 	bl	80048e2 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80007b4:	2032      	movs	r0, #50	; 0x32
 80007b6:	f003 f80f 	bl	80037d8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80007ba:	2102      	movs	r1, #2
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <flash+0x48>)
 80007be:	f004 f890 	bl	80048e2 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f003 f808 	bl	80037d8 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3301      	adds	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbea      	blt.n	80007ac <flash+0x10>
  }

  HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f002 fffe 	bl	80037d8 <HAL_Delay>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	58020000 	.word	0x58020000

080007e8 <console>:

// Monitor console
void console(const char *str) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fd75 	bl	80002e0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <console+0x24>)
 8000800:	f009 fa8c 	bl	8009d1c <HAL_UART_Transmit_IT>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	24000358 	.word	0x24000358

08000810 <send_data>:

void send_data(
  float x1, float x2, float x3,
  float x4, float x5, float x6,
  float x7, float x8, float x9) {
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000812:	b093      	sub	sp, #76	; 0x4c
 8000814:	af08      	add	r7, sp, #32
 8000816:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800081a:	edc7 0a08 	vstr	s1, [r7, #32]
 800081e:	ed87 1a07 	vstr	s2, [r7, #28]
 8000822:	edc7 1a06 	vstr	s3, [r7, #24]
 8000826:	ed87 2a05 	vstr	s4, [r7, #20]
 800082a:	edc7 2a04 	vstr	s5, [r7, #16]
 800082e:	ed87 3a03 	vstr	s6, [r7, #12]
 8000832:	edc7 3a02 	vstr	s7, [r7, #8]
 8000836:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 800083a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083e:	2100      	movs	r1, #0
 8000840:	4837      	ldr	r0, [pc, #220]	; (8000920 <send_data+0x110>)
 8000842:	f00b ff57 	bl	800c6f4 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8000846:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800084a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000924 <send_data+0x114>
 800084e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000852:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8000856:	edd7 7a08 	vldr	s15, [r7, #32]
 800085a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000924 <send_data+0x114>
 800085e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000862:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8000866:	edd7 7a07 	vldr	s15, [r7, #28]
 800086a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000924 <send_data+0x114>
 800086e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000876:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 800087a:	edd7 7a06 	vldr	s15, [r7, #24]
 800087e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000924 <send_data+0x114>
 8000882:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800088a:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 800088e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000892:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000924 <send_data+0x114>
 8000896:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800089a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089e:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 80008a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80008a6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000924 <send_data+0x114>
 80008aa:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80008ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b2:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 80008b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80008ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000924 <send_data+0x114>
 80008be:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80008c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c6:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 80008ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80008ce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000924 <send_data+0x114>
 80008d2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80008d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008da:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 80008de:	edd7 7a01 	vldr	s15, [r7, #4]
 80008e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000924 <send_data+0x114>
 80008e6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80008ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ee:	ee17 6a90 	vmov	r6, s15
 80008f2:	9606      	str	r6, [sp, #24]
 80008f4:	9505      	str	r5, [sp, #20]
 80008f6:	9404      	str	r4, [sp, #16]
 80008f8:	9003      	str	r0, [sp, #12]
 80008fa:	9102      	str	r1, [sp, #8]
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	ee16 3a10 	vmov	r3, s12
 8000904:	ee16 2a90 	vmov	r2, s13
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <send_data+0x118>)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <send_data+0x110>)
 800090c:	f00b fefa 	bl	800c704 <siprintf>
  console(g_console_msg);
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <send_data+0x110>)
 8000912:	f7ff ff69 	bl	80007e8 <console>
}
 8000916:	bf00      	nop
 8000918:	372c      	adds	r7, #44	; 0x2c
 800091a:	46bd      	mov	sp, r7
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	bf00      	nop
 8000920:	24001730 	.word	0x24001730
 8000924:	47c35000 	.word	0x47c35000
 8000928:	0800e4a8 	.word	0x0800e4a8

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000932:	f002 febf 	bl	80036b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000936:	f000 f8bf 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f000 fcd1 	bl	80012e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800093e:	f000 f935 	bl	8000bac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000942:	f000 fc81 	bl	8001248 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000946:	f000 fc13 	bl	8001170 <MX_TIM6_Init>
  MX_TIM2_Init();
 800094a:	f000 f9c5 	bl	8000cd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800094e:	f000 fa5b 	bl	8000e08 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000952:	f000 faf1 	bl	8000f38 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000956:	f000 fb83 	bl	8001060 <MX_TIM5_Init>
  MX_TIM7_Init();
 800095a:	f000 fc3f 	bl	80011dc <MX_TIM7_Init>
  MX_SPI2_Init();
 800095e:	f000 f965 	bl	8000c2c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2102      	movs	r1, #2
 8000966:	4840      	ldr	r0, [pc, #256]	; (8000a68 <main+0x13c>)
 8000968:	f003 ffa2 	bl	80048b0 <HAL_GPIO_WritePin>

  flash(5);
 800096c:	2005      	movs	r0, #5
 800096e:	f7ff ff15 	bl	800079c <flash>

  // Initialise filters for remote control
  average_filter_init(&g_af[0], 5); // Thrust
 8000972:	2105      	movs	r1, #5
 8000974:	483d      	ldr	r0, [pc, #244]	; (8000a6c <main+0x140>)
 8000976:	f7ff fea6 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[1], 5); // Yaw
 800097a:	2105      	movs	r1, #5
 800097c:	483c      	ldr	r0, [pc, #240]	; (8000a70 <main+0x144>)
 800097e:	f7ff fea2 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[2], 5); // Pitch
 8000982:	2105      	movs	r1, #5
 8000984:	483b      	ldr	r0, [pc, #236]	; (8000a74 <main+0x148>)
 8000986:	f7ff fe9e 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[3], 5); // Roll
 800098a:	2105      	movs	r1, #5
 800098c:	483a      	ldr	r0, [pc, #232]	; (8000a78 <main+0x14c>)
 800098e:	f7ff fe9a 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[4], 5); // Tune 1
 8000992:	2105      	movs	r1, #5
 8000994:	4839      	ldr	r0, [pc, #228]	; (8000a7c <main+0x150>)
 8000996:	f7ff fe96 	bl	80006c6 <average_filter_init>
  average_filter_init(&g_af[5], 5); // Tune 2
 800099a:	2105      	movs	r1, #5
 800099c:	4838      	ldr	r0, [pc, #224]	; (8000a80 <main+0x154>)
 800099e:	f7ff fe92 	bl	80006c6 <average_filter_init>

  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 80009a2:	2303      	movs	r3, #3
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2303      	movs	r3, #3
 80009a8:	2200      	movs	r2, #0
 80009aa:	4936      	ldr	r1, [pc, #216]	; (8000a84 <main+0x158>)
 80009ac:	4836      	ldr	r0, [pc, #216]	; (8000a88 <main+0x15c>)
 80009ae:	f000 fec5 	bl	800173c <MPU6050_init>
 80009b2:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <main+0x9a>
    flash(error);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff feec 	bl	800079c <flash>
  while (1) {
 80009c4:	e7ed      	b.n	80009a2 <main+0x76>
    if (error == 0) break;
 80009c6:	bf00      	nop
  }

  MPU6050_set_offset(&g_mpu6050, 0.75, -0.55, 0, 280, 125, 10);
 80009c8:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 80009cc:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 8000a8c <main+0x160>
 80009d0:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8000a90 <main+0x164>
 80009d4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8000a94 <main+0x168>
 80009d8:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8000a98 <main+0x16c>
 80009dc:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80009e0:	4829      	ldr	r0, [pc, #164]	; (8000a88 <main+0x15c>)
 80009e2:	f001 f8bd 	bl	8001b60 <MPU6050_set_offset>
//    if (error == 0) break;
//    flash(error);
//  }

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80009e6:	2100      	movs	r1, #0
 80009e8:	482c      	ldr	r0, [pc, #176]	; (8000a9c <main+0x170>)
 80009ea:	f007 fdb9 	bl	8008560 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80009ee:	2104      	movs	r1, #4
 80009f0:	482a      	ldr	r0, [pc, #168]	; (8000a9c <main+0x170>)
 80009f2:	f007 fdb5 	bl	8008560 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 80009f6:	2108      	movs	r1, #8
 80009f8:	4828      	ldr	r0, [pc, #160]	; (8000a9c <main+0x170>)
 80009fa:	f007 fdb1 	bl	8008560 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 80009fe:	210c      	movs	r1, #12
 8000a00:	4826      	ldr	r0, [pc, #152]	; (8000a9c <main+0x170>)
 8000a02:	f007 fdad 	bl	8008560 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3);
 8000a06:	2108      	movs	r1, #8
 8000a08:	4825      	ldr	r0, [pc, #148]	; (8000aa0 <main+0x174>)
 8000a0a:	f007 fda9 	bl	8008560 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 8000a0e:	210c      	movs	r1, #12
 8000a10:	4823      	ldr	r0, [pc, #140]	; (8000aa0 <main+0x174>)
 8000a12:	f007 fda5 	bl	8008560 <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a16:	2100      	movs	r1, #0
 8000a18:	4822      	ldr	r0, [pc, #136]	; (8000aa4 <main+0x178>)
 8000a1a:	f007 fc31 	bl	8008280 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a1e:	2104      	movs	r1, #4
 8000a20:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <main+0x178>)
 8000a22:	f007 fc2d 	bl	8008280 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a26:	2108      	movs	r1, #8
 8000a28:	481e      	ldr	r0, [pc, #120]	; (8000aa4 <main+0x178>)
 8000a2a:	f007 fc29 	bl	8008280 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a2e:	210c      	movs	r1, #12
 8000a30:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <main+0x178>)
 8000a32:	f007 fc25 	bl	8008280 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a36:	2100      	movs	r1, #0
 8000a38:	481b      	ldr	r0, [pc, #108]	; (8000aa8 <main+0x17c>)
 8000a3a:	f007 fc21 	bl	8008280 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <main+0x17c>)
 8000a42:	f007 fc1d 	bl	8008280 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a46:	2108      	movs	r1, #8
 8000a48:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <main+0x17c>)
 8000a4a:	f007 fc19 	bl	8008280 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000a4e:	210c      	movs	r1, #12
 8000a50:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <main+0x17c>)
 8000a52:	f007 fc15 	bl	8008280 <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim7);
 8000a56:	4815      	ldr	r0, [pc, #84]	; (8000aac <main+0x180>)
 8000a58:	f007 fb38 	bl	80080cc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart1, g_uart_rx_buffer, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4914      	ldr	r1, [pc, #80]	; (8000ab0 <main+0x184>)
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <main+0x188>)
 8000a62:	f009 fa03 	bl	8009e6c <HAL_UART_Receive_IT>
 8000a66:	e7f9      	b.n	8000a5c <main+0x130>
 8000a68:	58020000 	.word	0x58020000
 8000a6c:	240003e8 	.word	0x240003e8
 8000a70:	24000584 	.word	0x24000584
 8000a74:	24000720 	.word	0x24000720
 8000a78:	240008bc 	.word	0x240008bc
 8000a7c:	24000a58 	.word	0x24000a58
 8000a80:	24000bf4 	.word	0x24000bf4
 8000a84:	240000bc 	.word	0x240000bc
 8000a88:	24001400 	.word	0x24001400
 8000a8c:	42fa0000 	.word	0x42fa0000
 8000a90:	438c0000 	.word	0x438c0000
 8000a94:	00000000 	.word	0x00000000
 8000a98:	bf0ccccd 	.word	0xbf0ccccd
 8000a9c:	24000228 	.word	0x24000228
 8000aa0:	24000274 	.word	0x24000274
 8000aa4:	24000190 	.word	0x24000190
 8000aa8:	240001dc 	.word	0x240001dc
 8000aac:	2400030c 	.word	0x2400030c
 8000ab0:	24001830 	.word	0x24001830
 8000ab4:	24000358 	.word	0x24000358

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b09c      	sub	sp, #112	; 0x70
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	224c      	movs	r2, #76	; 0x4c
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f00b fe14 	bl	800c6f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2220      	movs	r2, #32
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f00b fe0e 	bl	800c6f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f004 fe23 	bl	8005724 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <SystemClock_Config+0xec>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae6:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <SystemClock_Config+0xec>)
 8000ae8:	f023 0301 	bic.w	r3, r3, #1
 8000aec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <SystemClock_Config+0xec>)
 8000af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <SystemClock_Config+0xf0>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a2a      	ldr	r2, [pc, #168]	; (8000ba8 <SystemClock_Config+0xf0>)
 8000afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <SystemClock_Config+0xf0>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b10:	bf00      	nop
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <SystemClock_Config+0xf0>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b1e:	d1f8      	bne.n	8000b12 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b32:	2305      	movs	r3, #5
 8000b34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b36:	23a0      	movs	r3, #160	; 0xa0
 8000b38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b46:	2308      	movs	r3, #8
 8000b48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 fe1e 	bl	8005798 <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b62:	f000 fc2f 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	233f      	movs	r3, #63	; 0x3f
 8000b68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b72:	2308      	movs	r3, #8
 8000b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b76:	2340      	movs	r3, #64	; 0x40
 8000b78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b84:	2340      	movs	r3, #64	; 0x40
 8000b86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 fa31 	bl	8005ff4 <HAL_RCC_ClockConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b98:	f000 fc14 	bl	80013c4 <Error_Handler>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3770      	adds	r7, #112	; 0x70
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	58000400 	.word	0x58000400
 8000ba8:	58024800 	.word	0x58024800

08000bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_I2C1_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <MX_I2C1_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000be8:	f003 fe96 	bl	8004918 <HAL_I2C_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 fbe7 	bl	80013c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bfa:	f004 fcfb 	bl	80055f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 fbde 	bl	80013c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000c0c:	f004 fd3d 	bl	800568a <HAL_I2CEx_ConfigDigitalFilter>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 fbd5 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	240000bc 	.word	0x240000bc
 8000c24:	40005400 	.word	0x40005400
 8000c28:	10c0ecff 	.word	0x10c0ecff

08000c2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c32:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <MX_SPI2_Init+0xa8>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c60:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c84:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <MX_SPI2_Init+0xa4>)
 8000cbe:	f007 f88d 	bl	8007ddc <HAL_SPI_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000cc8:	f000 fb7c 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000108 	.word	0x24000108
 8000cd4:	40003800 	.word	0x40003800

08000cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0a:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d14:	220a      	movs	r2, #10
 8000d16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000;
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d20:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000d24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d32:	4834      	ldr	r0, [pc, #208]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d34:	f007 f973 	bl	800801e <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d3e:	f000 fb41 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	482d      	ldr	r0, [pc, #180]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d50:	f008 f826 	bl	8008da0 <HAL_TIM_ConfigClockSource>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d5a:	f000 fb33 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d5e:	4829      	ldr	r0, [pc, #164]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d60:	f007 fa2c 	bl	80081bc <HAL_TIM_PWM_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d6a:	f000 fb2b 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4821      	ldr	r0, [pc, #132]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000d7e:	f008 fed1 	bl	8009b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d88:	f000 fb1c 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8c:	2360      	movs	r3, #96	; 0x60
 8000d8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	4818      	ldr	r0, [pc, #96]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000da4:	f007 fee8 	bl	8008b78 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000dae:	f000 fb09 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	2204      	movs	r2, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4812      	ldr	r0, [pc, #72]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000dba:	f007 fedd 	bl	8008b78 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000dc4:	f000 fafe 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2208      	movs	r2, #8
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000dd0:	f007 fed2 	bl	8008b78 <HAL_TIM_PWM_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000dda:	f000 faf3 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	220c      	movs	r2, #12
 8000de2:	4619      	mov	r1, r3
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000de6:	f007 fec7 	bl	8008b78 <HAL_TIM_PWM_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000df0:	f000 fae8 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <MX_TIM2_Init+0x12c>)
 8000df6:	f001 fa23 	bl	8002240 <HAL_TIM_MspPostInit>

}
 8000dfa:	bf00      	nop
 8000dfc:	3738      	adds	r7, #56	; 0x38
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	24000190 	.word	0x24000190

08000e08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	615a      	str	r2, [r3, #20]
 8000e38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000e3c:	4a3d      	ldr	r2, [pc, #244]	; (8000f34 <MX_TIM3_Init+0x12c>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8000e40:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000e42:	220a      	movs	r2, #10
 8000e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24000;
 8000e4c:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000e4e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000e52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e60:	4833      	ldr	r0, [pc, #204]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000e62:	f007 f8dc 	bl	800801e <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e6c:	f000 faaa 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	482c      	ldr	r0, [pc, #176]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000e7e:	f007 ff8f 	bl	8008da0 <HAL_TIM_ConfigClockSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e88:	f000 fa9c 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e8c:	4828      	ldr	r0, [pc, #160]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000e8e:	f007 f995 	bl	80081bc <HAL_TIM_PWM_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e98:	f000 fa94 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4821      	ldr	r0, [pc, #132]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000eac:	f008 fe3a 	bl	8009b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000eb6:	f000 fa85 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eba:	2360      	movs	r3, #96	; 0x60
 8000ebc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4817      	ldr	r0, [pc, #92]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000ed2:	f007 fe51 	bl	8008b78 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000edc:	f000 fa72 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4812      	ldr	r0, [pc, #72]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000ee8:	f007 fe46 	bl	8008b78 <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000ef2:	f000 fa67 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2208      	movs	r2, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000efe:	f007 fe3b 	bl	8008b78 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f08:	f000 fa5c 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	220c      	movs	r2, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000f14:	f007 fe30 	bl	8008b78 <HAL_TIM_PWM_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000f1e:	f000 fa51 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <MX_TIM3_Init+0x128>)
 8000f24:	f001 f98c 	bl	8002240 <HAL_TIM_MspPostInit>

}
 8000f28:	bf00      	nop
 8000f2a:	3738      	adds	r7, #56	; 0x38
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	240001dc 	.word	0x240001dc
 8000f34:	40000400 	.word	0x40000400

08000f38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f64:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <MX_TIM4_Init+0x120>)
 8000f66:	4a3d      	ldr	r2, [pc, #244]	; (800105c <MX_TIM4_Init+0x124>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <MX_TIM4_Init+0x120>)
 8000f6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <MX_TIM4_Init+0x120>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000f78:	4b37      	ldr	r3, [pc, #220]	; (8001058 <MX_TIM4_Init+0x120>)
 8000f7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <MX_TIM4_Init+0x120>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <MX_TIM4_Init+0x120>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f8c:	4832      	ldr	r0, [pc, #200]	; (8001058 <MX_TIM4_Init+0x120>)
 8000f8e:	f007 f846 	bl	800801e <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000f98:	f000 fa14 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482b      	ldr	r0, [pc, #172]	; (8001058 <MX_TIM4_Init+0x120>)
 8000faa:	f007 fef9 	bl	8008da0 <HAL_TIM_ConfigClockSource>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000fb4:	f000 fa06 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000fb8:	4827      	ldr	r0, [pc, #156]	; (8001058 <MX_TIM4_Init+0x120>)
 8000fba:	f007 fa6f 	bl	800849c <HAL_TIM_IC_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000fc4:	f000 f9fe 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <MX_TIM4_Init+0x120>)
 8000fd8:	f008 fda4 	bl	8009b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000fe2:	f000 f9ef 	bl	80013c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fea:	2301      	movs	r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <MX_TIM4_Init+0x120>)
 8000ffe:	f007 fd1e 	bl	8008a3e <HAL_TIM_IC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001008:	f000 f9dc 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2204      	movs	r2, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4811      	ldr	r0, [pc, #68]	; (8001058 <MX_TIM4_Init+0x120>)
 8001014:	f007 fd13 	bl	8008a3e <HAL_TIM_IC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800101e:	f000 f9d1 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2208      	movs	r2, #8
 8001026:	4619      	mov	r1, r3
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <MX_TIM4_Init+0x120>)
 800102a:	f007 fd08 	bl	8008a3e <HAL_TIM_IC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8001034:	f000 f9c6 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	220c      	movs	r2, #12
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_TIM4_Init+0x120>)
 8001040:	f007 fcfd 	bl	8008a3e <HAL_TIM_IC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 800104a:	f000 f9bb 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3730      	adds	r7, #48	; 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	24000228 	.word	0x24000228
 800105c:	40000800 	.word	0x40000800

08001060 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <MX_TIM5_Init+0x108>)
 800108e:	4a37      	ldr	r2, [pc, #220]	; (800116c <MX_TIM5_Init+0x10c>)
 8001090:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 500;
 8001092:	4b35      	ldr	r3, [pc, #212]	; (8001168 <MX_TIM5_Init+0x108>)
 8001094:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001098:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b33      	ldr	r3, [pc, #204]	; (8001168 <MX_TIM5_Init+0x108>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_TIM5_Init+0x108>)
 80010a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <MX_TIM5_Init+0x108>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <MX_TIM5_Init+0x108>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010b4:	482c      	ldr	r0, [pc, #176]	; (8001168 <MX_TIM5_Init+0x108>)
 80010b6:	f006 ffb2 	bl	800801e <HAL_TIM_Base_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80010c0:	f000 f980 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	4619      	mov	r1, r3
 80010d0:	4825      	ldr	r0, [pc, #148]	; (8001168 <MX_TIM5_Init+0x108>)
 80010d2:	f007 fe65 	bl	8008da0 <HAL_TIM_ConfigClockSource>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80010dc:	f000 f972 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80010e0:	4821      	ldr	r0, [pc, #132]	; (8001168 <MX_TIM5_Init+0x108>)
 80010e2:	f007 f9db 	bl	800849c <HAL_TIM_IC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80010ec:	f000 f96a 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	481a      	ldr	r0, [pc, #104]	; (8001168 <MX_TIM5_Init+0x108>)
 8001100:	f008 fd10 	bl	8009b24 <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800110a:	f000 f95b 	bl	80013c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800110e:	230a      	movs	r3, #10
 8001110:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001112:	2301      	movs	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <MX_TIM5_Init+0x108>)
 8001126:	f007 fc8a 	bl	8008a3e <HAL_TIM_IC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001130:	f000 f948 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2208      	movs	r2, #8
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_TIM5_Init+0x108>)
 800113c:	f007 fc7f 	bl	8008a3e <HAL_TIM_IC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001146:	f000 f93d 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	220c      	movs	r2, #12
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_TIM5_Init+0x108>)
 8001152:	f007 fc74 	bl	8008a3e <HAL_TIM_IC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM5_Init+0x100>
  {
    Error_Handler();
 800115c:	f000 f932 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	; 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	24000274 	.word	0x24000274
 800116c:	40000c00 	.word	0x40000c00

08001170 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_TIM6_Init+0x64>)
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <MX_TIM6_Init+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_TIM6_Init+0x64>)
 8001188:	2264      	movs	r2, #100	; 0x64
 800118a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_TIM6_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_TIM6_Init+0x64>)
 8001194:	f242 7210 	movw	r2, #10000	; 0x2710
 8001198:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_TIM6_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <MX_TIM6_Init+0x64>)
 80011a2:	f006 ff3c 	bl	800801e <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011ac:	f000 f90a 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_TIM6_Init+0x64>)
 80011be:	f008 fcb1 	bl	8009b24 <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011c8:	f000 f8fc 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	240002c0 	.word	0x240002c0
 80011d8:	40001000 	.word	0x40001000

080011dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_TIM7_Init+0x64>)
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <MX_TIM7_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_TIM7_Init+0x64>)
 80011f4:	2264      	movs	r2, #100	; 0x64
 80011f6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_TIM7_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2500;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_TIM7_Init+0x64>)
 8001200:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001204:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_TIM7_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_TIM7_Init+0x64>)
 800120e:	f006 ff06 	bl	800801e <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001218:	f000 f8d4 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_TIM7_Init+0x64>)
 800122a:	f008 fc7b 	bl	8009b24 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001234:	f000 f8c6 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2400030c 	.word	0x2400030c
 8001244:	40001400 	.word	0x40001400

08001248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <MX_USART1_UART_Init+0x94>)
 8001250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001254:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001290:	4811      	ldr	r0, [pc, #68]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001292:	f008 fcf3 	bl	8009c7c <HAL_UART_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800129c:	f000 f892 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 80012a4:	f00b f931 	bl	800c50a <HAL_UARTEx_SetTxFifoThreshold>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012ae:	f000 f889 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 80012b6:	f00b f966 	bl	800c586 <HAL_UARTEx_SetRxFifoThreshold>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012c0:	f000 f880 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 80012c6:	f00b f8e7 	bl	800c498 <HAL_UARTEx_DisableFifoMode>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012d0:	f000 f878 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	24000358 	.word	0x24000358
 80012dc:	40011000 	.word	0x40011000

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	4b31      	ldr	r3, [pc, #196]	; (80013bc <MX_GPIO_Init+0xdc>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <MX_GPIO_Init+0xdc>)
 80012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	4a28      	ldr	r2, [pc, #160]	; (80013bc <MX_GPIO_Init+0xdc>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <MX_GPIO_Init+0xdc>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_GPIO_Init+0xdc>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2102      	movs	r1, #2
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <MX_GPIO_Init+0xe0>)
 8001392:	f003 fa8d 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001396:	2302      	movs	r3, #2
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_GPIO_Init+0xe0>)
 80013ae:	f003 f8b7 	bl	8004520 <HAL_GPIO_Init>

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58020000 	.word	0x58020000

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <calc_angles>:
#define YAW 0
#define PITCH 1
#define ROLL 2

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	ed2d 8b04 	vpush	{d8-d9}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gyro_x / FREQ;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80013e8:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 8001738 <calc_angles+0x368>
 80013ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  mpu6050->gyro_angle[Y] += -mpu6050->gyro_y / FREQ; // Change sign to match the accelerometer's one
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001406:	eef1 6a67 	vneg.f32	s13, s15
 800140a:	ed9f 6acb 	vldr	s12, [pc, #812]	; 8001738 <calc_angles+0x368>
 800140e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001422:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800142c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edd3 7a08 	vldr	s15, [r3, #32]
 8001436:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800143a:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001710 <calc_angles+0x340>
 800143e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001442:	eeb0 0b47 	vmov.f64	d0, d7
 8001446:	f00c f853 	bl	800d4f0 <sin>
 800144a:	eeb0 7b40 	vmov.f64	d7, d0
 800144e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001452:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001456:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001466:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001470:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a08 	vldr	s15, [r3, #32]
 800147a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001710 <calc_angles+0x340>
 8001482:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001486:	eeb0 0b47 	vmov.f64	d0, d7
 800148a:	f00c f831 	bl	800d4f0 <sin>
 800148e:	eeb0 7b40 	vmov.f64	d7, d0
 8001492:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001496:	ee38 7b47 	vsub.f64	d7, d8, d7
 800149a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ae:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014b2:	eeb0 0b47 	vmov.f64	d0, d7
 80014b6:	f00b fdc7 	bl	800d048 <pow>
 80014ba:	eeb0 8b40 	vmov.f64	d8, d0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80014c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014cc:	eeb0 0b47 	vmov.f64	d0, d7
 80014d0:	f00b fdba 	bl	800d048 <pow>
 80014d4:	eeb0 7b40 	vmov.f64	d7, d0
 80014d8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edd3 7a04 	vldr	s15, [r3, #16]
 80014e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014ea:	eeb0 0b47 	vmov.f64	d0, d7
 80014ee:	f00b fdab 	bl	800d048 <pow>
 80014f2:	eeb0 7b40 	vmov.f64	d7, d0
 80014f6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80014fa:	eeb0 0b47 	vmov.f64	d0, d7
 80014fe:	f00c f86f 	bl	800d5e0 <sqrt>
 8001502:	eeb0 7b40 	vmov.f64	d7, d0
 8001506:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800150a:	ee17 2a90 	vmov	r2, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	679a      	str	r2, [r3, #120]	; 0x78

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	edd3 7a02 	vldr	s15, [r3, #8]
 8001518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151c:	ee17 3a90 	vmov	r3, s15
 8001520:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001524:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800152c:	429a      	cmp	r2, r3
 800152e:	da1b      	bge.n	8001568 <calc_angles+0x198>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 6a03 	vldr	s13, [r3, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001546:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800154a:	eeb0 0b47 	vmov.f64	d0, d7
 800154e:	f00c f81b 	bl	800d588 <asin>
 8001552:	eeb0 7b40 	vmov.f64	d7, d0
 8001556:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8001718 <calc_angles+0x348>
 800155a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800155e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	edd3 7a03 	vldr	s15, [r3, #12]
 800156e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001572:	ee17 3a90 	vmov	r3, s15
 8001576:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800157a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001582:	429a      	cmp	r2, r3
 8001584:	da1b      	bge.n	80015be <calc_angles+0x1ee>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	edd3 6a02 	vldr	s13, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a0:	eeb0 0b47 	vmov.f64	d0, d7
 80015a4:	f00b fff0 	bl	800d588 <asin>
 80015a8:	eeb0 7b40 	vmov.f64	d7, d0
 80015ac:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001718 <calc_angles+0x348>
 80015b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  }

  if (mpu6050->initialized == 1) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d132      	bne.n	800162e <calc_angles+0x25e>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80015ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80015d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80015e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80015e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001604:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001608:	ee27 6b06 	vmul.f64	d6, d7, d6
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001612:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001616:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800161a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800161e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001622:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800162c:	e00b      	b.n	8001646 <calc_angles+0x276>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	; 0x58

    mpu6050->initialized = 1;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800164c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001650:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001720 <calc_angles+0x350>
 8001654:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800165e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001662:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001728 <calc_angles+0x358>
 8001666:	ee27 7b05 	vmul.f64	d7, d7, d5
 800166a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800166e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800167e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001682:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001720 <calc_angles+0x350>
 8001686:	ee27 6b06 	vmul.f64	d6, d7, d6
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001690:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001694:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001728 <calc_angles+0x358>
 8001698:	ee27 7b05 	vmul.f64	d7, d7, d5
 800169c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  mpu6050->measures[YAW] = -mpu6050->gyro_z; // Store the angular motion for this axis
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80016b0:	eef1 7a67 	vneg.f32	s15, s15
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80016c0:	eef1 7a67 	vneg.f32	s15, s15
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80016d0:	eef1 7a67 	vneg.f32	s15, s15
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80016ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016ee:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001730 <calc_angles+0x360>
 80016f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	ecbd 8b04 	vpop	{d8-d9}
 800170e:	bd80      	pop	{r7, pc}
 8001710:	695f8190 	.word	0x695f8190
 8001714:	3f06e05a 	.word	0x3f06e05a
 8001718:	1a63c1f8 	.word	0x1a63c1f8
 800171c:	404ca5dc 	.word	0x404ca5dc
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	3feccccc 	.word	0x3feccccc
 8001728:	9999999a 	.word	0x9999999a
 800172c:	3fb99999 	.word	0x3fb99999
 8001730:	d2f1a9fc 	.word	0xd2f1a9fc
 8001734:	3f50624d 	.word	0x3f50624d
 8001738:	43c80000 	.word	0x43c80000

0800173c <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	4611      	mov	r1, r2
 8001748:	461a      	mov	r2, r3
 800174a:	460b      	mov	r3, r1
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	4613      	mov	r3, r2
 8001750:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	22d0      	movs	r2, #208	; 0xd0
 800175c:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e00a      	b.n	800177a <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f003 fc69 	bl	8005040 <HAL_I2C_GetState>
 800176e:	4603      	mov	r3, r0
 8001770:	2b20      	cmp	r3, #32
 8001772:	d006      	beq.n	8001782 <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3301      	adds	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b04      	cmp	r3, #4
 800177e:	ddf1      	ble.n	8001764 <MPU6050_init+0x28>
 8001780:	e000      	b.n	8001784 <MPU6050_init+0x48>
      break;
 8001782:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b04      	cmp	r3, #4
 8001788:	dd01      	ble.n	800178e <MPU6050_init+0x52>
 800178a:	2301      	movs	r3, #1
 800178c:	e1e1      	b.n	8001b52 <MPU6050_init+0x416>

  // Check MPU id
  uint8_t whoiam = 0x75;
 800178e:	2375      	movs	r3, #117	; 0x75
 8001790:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e011      	b.n	80017bc <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	b299      	uxth	r1, r3
 80017a2:	f107 021b 	add.w	r2, r7, #27
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	f003 f944 	bl	8004a38 <HAL_I2C_Master_Transmit>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	ddea      	ble.n	8001798 <MPU6050_init+0x5c>
 80017c2:	e000      	b.n	80017c6 <MPU6050_init+0x8a>
      break;
 80017c4:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	dd01      	ble.n	80017d0 <MPU6050_init+0x94>
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1c0      	b.n	8001b52 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	e011      	b.n	80017fa <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	791b      	ldrb	r3, [r3, #4]
 80017de:	b299      	uxth	r1, r3
 80017e0:	f107 021a 	add.w	r2, r7, #26
 80017e4:	2364      	movs	r3, #100	; 0x64
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	f003 fa19 	bl	8004c20 <HAL_I2C_Master_Receive>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	3301      	adds	r3, #1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	ddea      	ble.n	80017d6 <MPU6050_init+0x9a>
 8001800:	e000      	b.n	8001804 <MPU6050_init+0xc8>
      break;
 8001802:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b04      	cmp	r3, #4
 8001808:	dd01      	ble.n	800180e <MPU6050_init+0xd2>
 800180a:	2304      	movs	r3, #4
 800180c:	e1a1      	b.n	8001b52 <MPU6050_init+0x416>

  if (whoiam_res != 0x68) return 5;
 800180e:	7ebb      	ldrb	r3, [r7, #26]
 8001810:	2b68      	cmp	r3, #104	; 0x68
 8001812:	d001      	beq.n	8001818 <MPU6050_init+0xdc>
 8001814:	2305      	movs	r3, #5
 8001816:	e19c      	b.n	8001b52 <MPU6050_init+0x416>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001818:	236b      	movs	r3, #107	; 0x6b
 800181a:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	e011      	b.n	8001846 <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	791b      	ldrb	r3, [r3, #4]
 800182a:	b299      	uxth	r1, r3
 800182c:	f107 0218 	add.w	r2, r7, #24
 8001830:	2364      	movs	r3, #100	; 0x64
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2302      	movs	r3, #2
 8001836:	f003 f8ff 	bl	8004a38 <HAL_I2C_Master_Transmit>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2b04      	cmp	r3, #4
 800184a:	ddea      	ble.n	8001822 <MPU6050_init+0xe6>
 800184c:	e000      	b.n	8001850 <MPU6050_init+0x114>
      break;
 800184e:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b04      	cmp	r3, #4
 8001854:	dd01      	ble.n	800185a <MPU6050_init+0x11e>
 8001856:	2306      	movs	r3, #6
 8001858:	e17b      	b.n	8001b52 <MPU6050_init+0x416>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 800185a:	2319      	movs	r3, #25
 800185c:	753b      	strb	r3, [r7, #20]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e011      	b.n	800188c <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	b299      	uxth	r1, r3
 8001872:	f107 0214 	add.w	r2, r7, #20
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	f003 f8dc 	bl	8004a38 <HAL_I2C_Master_Transmit>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b04      	cmp	r3, #4
 8001890:	ddea      	ble.n	8001868 <MPU6050_init+0x12c>
 8001892:	e000      	b.n	8001896 <MPU6050_init+0x15a>
      break;
 8001894:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	2b04      	cmp	r3, #4
 800189a:	dd01      	ble.n	80018a0 <MPU6050_init+0x164>
 800189c:	2307      	movs	r3, #7
 800189e:	e158      	b.n	8001b52 <MPU6050_init+0x416>

  // Set accel config
  uint8_t accel_config = 0x1C;
 80018a0:	231c      	movs	r3, #28
 80018a2:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e011      	b.n	80018ce <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	791b      	ldrb	r3, [r3, #4]
 80018b2:	b299      	uxth	r1, r3
 80018b4:	f107 0213 	add.w	r2, r7, #19
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2301      	movs	r3, #1
 80018be:	f003 f8bb 	bl	8004a38 <HAL_I2C_Master_Transmit>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	3301      	adds	r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	ddea      	ble.n	80018aa <MPU6050_init+0x16e>
 80018d4:	e000      	b.n	80018d8 <MPU6050_init+0x19c>
      break;
 80018d6:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b04      	cmp	r3, #4
 80018dc:	dd01      	ble.n	80018e2 <MPU6050_init+0x1a6>
 80018de:	2308      	movs	r3, #8
 80018e0:	e137      	b.n	8001b52 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e011      	b.n	800190c <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	b299      	uxth	r1, r3
 80018f2:	f107 0213 	add.w	r2, r7, #19
 80018f6:	2364      	movs	r3, #100	; 0x64
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	f003 f990 	bl	8004c20 <HAL_I2C_Master_Receive>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b04      	cmp	r3, #4
 8001910:	ddea      	ble.n	80018e8 <MPU6050_init+0x1ac>
 8001912:	e000      	b.n	8001916 <MPU6050_init+0x1da>
      break;
 8001914:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	2b04      	cmp	r3, #4
 800191a:	dd01      	ble.n	8001920 <MPU6050_init+0x1e4>
 800191c:	2309      	movs	r3, #9
 800191e:	e118      	b.n	8001b52 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001920:	7cfb      	ldrb	r3, [r7, #19]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	f023 0318 	bic.w	r3, r3, #24
 8001928:	b25a      	sxtb	r2, r3
 800192a:	79bb      	ldrb	r3, [r7, #6]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	b25b      	sxtb	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b25b      	sxtb	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	e011      	b.n	8001962 <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	b299      	uxth	r1, r3
 8001948:	f107 0213 	add.w	r2, r7, #19
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	f003 f871 	bl	8004a38 <HAL_I2C_Master_Transmit>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3301      	adds	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	2b04      	cmp	r3, #4
 8001966:	ddea      	ble.n	800193e <MPU6050_init+0x202>
 8001968:	e000      	b.n	800196c <MPU6050_init+0x230>
      break;
 800196a:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b04      	cmp	r3, #4
 8001970:	dd01      	ble.n	8001976 <MPU6050_init+0x23a>
 8001972:	230a      	movs	r3, #10
 8001974:	e0ed      	b.n	8001b52 <MPU6050_init+0x416>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8001976:	231b      	movs	r3, #27
 8001978:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e011      	b.n	80019a4 <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	791b      	ldrb	r3, [r3, #4]
 8001988:	b299      	uxth	r1, r3
 800198a:	f107 0212 	add.w	r2, r7, #18
 800198e:	2364      	movs	r3, #100	; 0x64
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	f003 f850 	bl	8004a38 <HAL_I2C_Master_Transmit>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	ddea      	ble.n	8001980 <MPU6050_init+0x244>
 80019aa:	e000      	b.n	80019ae <MPU6050_init+0x272>
      break;
 80019ac:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	dd01      	ble.n	80019b8 <MPU6050_init+0x27c>
 80019b4:	230b      	movs	r3, #11
 80019b6:	e0cc      	b.n	8001b52 <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	e011      	b.n	80019e2 <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	791b      	ldrb	r3, [r3, #4]
 80019c6:	b299      	uxth	r1, r3
 80019c8:	f107 0212 	add.w	r2, r7, #18
 80019cc:	2364      	movs	r3, #100	; 0x64
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	f003 f925 	bl	8004c20 <HAL_I2C_Master_Receive>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	3301      	adds	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	ddea      	ble.n	80019be <MPU6050_init+0x282>
 80019e8:	e000      	b.n	80019ec <MPU6050_init+0x2b0>
      break;
 80019ea:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	dd01      	ble.n	80019f6 <MPU6050_init+0x2ba>
 80019f2:	230c      	movs	r3, #12
 80019f4:	e0ad      	b.n	8001b52 <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f023 0318 	bic.w	r3, r3, #24
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	e011      	b.n	8001a3a <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	791b      	ldrb	r3, [r3, #4]
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	f107 0212 	add.w	r2, r7, #18
 8001a24:	2364      	movs	r3, #100	; 0x64
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f003 f805 	bl	8004a38 <HAL_I2C_Master_Transmit>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	3301      	adds	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	ddea      	ble.n	8001a16 <MPU6050_init+0x2da>
 8001a40:	e000      	b.n	8001a44 <MPU6050_init+0x308>
      break;
 8001a42:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	dd01      	ble.n	8001a4e <MPU6050_init+0x312>
 8001a4a:	230d      	movs	r3, #13
 8001a4c:	e081      	b.n	8001b52 <MPU6050_init+0x416>
  #define MPU6050_DLPF_BW_94          0x02
  #define MPU6050_DLPF_BW_44          0x03
  #define MPU6050_DLPF_BW_21          0x04
  #define MPU6050_DLPF_BW_10          0x05
  #define MPU6050_DLPF_BW_5           0x06
  uint8_t lpf[2] = {0x1A, MPU6050_DLPF_BW_184};
 8001a4e:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8001a52:	823b      	strh	r3, [r7, #16]
  for (counter = 0; counter < 5; counter += 1) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	e011      	b.n	8001a7e <MPU6050_init+0x342>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, lpf, 2, 100) == HAL_OK) {
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	b299      	uxth	r1, r3
 8001a64:	f107 0210 	add.w	r2, r7, #16
 8001a68:	2364      	movs	r3, #100	; 0x64
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f002 ffe3 	bl	8004a38 <HAL_I2C_Master_Transmit>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <MPU6050_init+0x34a>
  for (counter = 0; counter < 5; counter += 1) {
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	ddea      	ble.n	8001a5a <MPU6050_init+0x31e>
 8001a84:	e000      	b.n	8001a88 <MPU6050_init+0x34c>
      break;
 8001a86:	bf00      	nop
    }
  }
  if (counter >= 5) return 14;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	dd01      	ble.n	8001a92 <MPU6050_init+0x356>
 8001a8e:	230e      	movs	r3, #14
 8001a90:	e05f      	b.n	8001b52 <MPU6050_init+0x416>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3380      	adds	r3, #128	; 0x80
 8001a96:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001b5c <MPU6050_init+0x420>
 8001a9a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a9e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fdf6 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3398      	adds	r3, #152	; 0x98
 8001aac:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001b5c <MPU6050_init+0x420>
 8001ab0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001ab4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fdeb 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	33b0      	adds	r3, #176	; 0xb0
 8001ac2:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001b5c <MPU6050_init+0x420>
 8001ac6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001aca:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fde0 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 1.0); // Gyro x
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	33c8      	adds	r3, #200	; 0xc8
 8001ad8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001adc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001ae0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fdd5 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 1.0); // Gyro y
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	33e0      	adds	r3, #224	; 0xe0
 8001aee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001af2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001af6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fdca 	bl	8000694 <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 1.0); // Gyro z
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	33f8      	adds	r3, #248	; 0xf8
 8001b04:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001b08:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b0c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fdbf 	bl	8000694 <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3354      	adds	r3, #84	; 0x54
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00a fde8 	bl	800c6f4 <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3360      	adds	r3, #96	; 0x60
 8001b28:	220c      	movs	r2, #12
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00a fde1 	bl	800c6f4 <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	336c      	adds	r3, #108	; 0x6c
 8001b36:	220c      	movs	r2, #12
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00a fdda 	bl	800c6f4 <memset>
  mpu6050->initialized = 0;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  mpu6050->angle_z = 0;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	3dcccccd 	.word	0x3dcccccd

08001b60 <MPU6050_set_offset>:

void MPU6050_set_offset(mpu6050_t *mpu6050,
    float angle_x_offset, float angle_y_offset, float angle_z_offset,
    float gx_offset, float gy_offset, float gz_offset) {
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	61f8      	str	r0, [r7, #28]
 8001b68:	ed87 0a06 	vstr	s0, [r7, #24]
 8001b6c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001b70:	ed87 1a04 	vstr	s2, [r7, #16]
 8001b74:	edc7 1a03 	vstr	s3, [r7, #12]
 8001b78:	ed87 2a02 	vstr	s4, [r7, #8]
 8001b7c:	edc7 2a01 	vstr	s5, [r7, #4]
  mpu6050->angle_x_offset = angle_x_offset;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
  mpu6050->angle_y_offset = angle_y_offset;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
  mpu6050->angle_z_offset = angle_z_offset;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
  mpu6050->gx_offset = gx_offset;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  mpu6050->gy_offset = gy_offset;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
  mpu6050->gz_offset = gz_offset;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ba4:	bf00      	nop
 8001ba6:	3724      	adds	r7, #36	; 0x24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af04      	add	r7, sp, #16
 8001bb6:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14, 10);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	791b      	ldrb	r3, [r3, #4]
 8001bc0:	b299      	uxth	r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001bc8:	220a      	movs	r2, #10
 8001bca:	9202      	str	r2, [sp, #8]
 8001bcc:	220e      	movs	r2, #14
 8001bce:	9201      	str	r2, [sp, #4]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	223b      	movs	r2, #59	; 0x3b
 8001bd6:	f003 f919 	bl	8004e0c <HAL_I2C_Mem_Read>
  MPU6050_parse_6axis(mpu6050);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f804 	bl	8001be8 <MPU6050_parse_6axis>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(mpu6050->rx_buffer[0] << 8 | mpu6050->rx_buffer[1]);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(mpu6050->rx_buffer[2] << 8 | mpu6050->rx_buffer[3]);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(mpu6050->rx_buffer[4] << 8 | mpu6050->rx_buffer[5]);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	edc3 7a04 	vstr	s15, [r3, #16]

//  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax);
//  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay);
//  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az);

  int16_t temp = (mpu6050->rx_buffer[6] << 8 | mpu6050->rx_buffer[7]);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c7e:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001dd4 <MPU6050_parse_6axis+0x1ec>
 8001c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c86:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001dd8 <MPU6050_parse_6axis+0x1f0>
 8001c8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(mpu6050->rx_buffer[8] << 8 | mpu6050->rx_buffer[9]);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	425b      	negs	r3, r3
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(mpu6050->rx_buffer[10] << 8 | mpu6050->rx_buffer[11]);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(mpu6050->rx_buffer[12] << 8 | mpu6050->rx_buffer[13]);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	425b      	negs	r3, r3
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	edc3 7a08 	vstr	s15, [r3, #32]

//  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx);
//  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy);
//  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz);

  mpu6050->gx = mpu6050->gx + mpu6050->gx_offset;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy + mpu6050->gy_offset;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz + mpu6050->gz_offset;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gyro_x = mpu6050->gx / SSF_GYRO;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d4c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001ddc <MPU6050_parse_6axis+0x1f4>
 8001d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_y = mpu6050->gy / SSF_GYRO;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d60:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001ddc <MPU6050_parse_6axis+0x1f4>
 8001d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  mpu6050->gyro_z = mpu6050->gz / SSF_GYRO;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d74:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001ddc <MPU6050_parse_6axis+0x1f4>
 8001d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  calc_angles(mpu6050);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fb24 	bl	80013d0 <calc_angles>

  mpu6050->angle_x = mpu6050->angle_x + mpu6050->angle_x_offset;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = mpu6050->angle_y + mpu6050->angle_y_offset;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z = mpu6050->angle_z + mpu6050->angle_z_offset;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	43aa0000 	.word	0x43aa0000
 8001dd8:	42121eb8 	.word	0x42121eb8
 8001ddc:	42830000 	.word	0x42830000

08001de0 <limit>:
#define TEMP_OSR_512 0x52
#define TEMP_OSR_1024 0x54
#define TEMP_OSR_2048 0x56
#define TEMP_OSR_4096 0x58

float limit(float number, float min, float max) {
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001dea:	edc7 0a02 	vstr	s1, [r7, #8]
 8001dee:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8001df2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001df6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	d501      	bpl.n	8001e08 <limit+0x28>
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	e00b      	b.n	8001e20 <limit+0x40>
 8001e08:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	dd01      	ble.n	8001e1e <limit+0x3e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	e000      	b.n	8001e20 <limit+0x40>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	ee07 3a90 	vmov	s15, r3
}
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_MspInit+0x30>)
 8001e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e40:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_MspInit+0x30>)
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_MspInit+0x30>)
 8001e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	58024400 	.word	0x58024400

08001e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0b8      	sub	sp, #224	; 0xe0
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	22bc      	movs	r2, #188	; 0xbc
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00a fc33 	bl	800c6f4 <memset>
  if(hi2c->Instance==I2C1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <HAL_I2C_MspInit+0xbc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d141      	bne.n	8001f1c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f004 fc30 	bl	800670c <HAL_RCCEx_PeriphCLKConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001eb2:	f7ff fa87 	bl	80013c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_I2C_MspInit+0xc0>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebc:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_I2C_MspInit+0xc0>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_I2C_MspInit+0xc0>)
 8001ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eda:	2312      	movs	r3, #18
 8001edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eec:	2304      	movs	r3, #4
 8001eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <HAL_I2C_MspInit+0xc4>)
 8001efa:	f002 fb11 	bl	8004520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_I2C_MspInit+0xc0>)
 8001f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f04:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_I2C_MspInit+0xc0>)
 8001f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_I2C_MspInit+0xc0>)
 8001f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	37e0      	adds	r7, #224	; 0xe0
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40005400 	.word	0x40005400
 8001f28:	58024400 	.word	0x58024400
 8001f2c:	58020400 	.word	0x58020400

08001f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b0ba      	sub	sp, #232	; 0xe8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f48:	f107 0318 	add.w	r3, r7, #24
 8001f4c:	22bc      	movs	r2, #188	; 0xbc
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00a fbcf 	bl	800c6f4 <memset>
  if(hspi->Instance==SPI2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a37      	ldr	r2, [pc, #220]	; (8002038 <HAL_SPI_MspInit+0x108>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d166      	bne.n	800202e <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f64:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6a:	f107 0318 	add.w	r3, r7, #24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 fbcc 	bl	800670c <HAL_RCCEx_PeriphCLKConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001f7a:	f7ff fa23 	bl	80013c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <HAL_SPI_MspInit+0x10c>)
 8001f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f84:	4a2d      	ldr	r2, [pc, #180]	; (800203c <HAL_SPI_MspInit+0x10c>)
 8001f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_SPI_MspInit+0x10c>)
 8001f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_SPI_MspInit+0x10c>)
 8001f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa2:	4a26      	ldr	r2, [pc, #152]	; (800203c <HAL_SPI_MspInit+0x10c>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_SPI_MspInit+0x10c>)
 8001fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_SPI_MspInit+0x10c>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_SPI_MspInit+0x10c>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_SPI_MspInit+0x10c>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001fd8:	2306      	movs	r3, #6
 8001fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4810      	ldr	r0, [pc, #64]	; (8002040 <HAL_SPI_MspInit+0x110>)
 8001ffe:	f002 fa8f 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800201c:	2305      	movs	r3, #5
 800201e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002026:	4619      	mov	r1, r3
 8002028:	4806      	ldr	r0, [pc, #24]	; (8002044 <HAL_SPI_MspInit+0x114>)
 800202a:	f002 fa79 	bl	8004520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	37e8      	adds	r7, #232	; 0xe8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40003800 	.word	0x40003800
 800203c:	58024400 	.word	0x58024400
 8002040:	58020800 	.word	0x58020800
 8002044:	58020400 	.word	0x58020400

08002048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b090      	sub	sp, #64	; 0x40
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002068:	d10f      	bne.n	800208a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800206a:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 800206c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002070:	4a6b      	ldr	r2, [pc, #428]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800207a:	4b69      	ldr	r3, [pc, #420]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 800207c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
 8002086:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002088:	e0c6      	b.n	8002218 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a65      	ldr	r2, [pc, #404]	; (8002224 <HAL_TIM_Base_MspInit+0x1dc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d10f      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002094:	4b62      	ldr	r3, [pc, #392]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 8002096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800209a:	4a61      	ldr	r2, [pc, #388]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020a4:	4b5e      	ldr	r3, [pc, #376]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80020a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020b2:	e0b1      	b.n	8002218 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM4)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a5b      	ldr	r2, [pc, #364]	; (8002228 <HAL_TIM_Base_MspInit+0x1e0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d137      	bne.n	800212e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020be:	4b58      	ldr	r3, [pc, #352]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80020c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c4:	4a56      	ldr	r2, [pc, #344]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020ce:	4b54      	ldr	r3, [pc, #336]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80020d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e2:	4a4f      	ldr	r2, [pc, #316]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ec:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800210c:	2302      	movs	r3, #2
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002114:	4619      	mov	r1, r3
 8002116:	4845      	ldr	r0, [pc, #276]	; (800222c <HAL_TIM_Base_MspInit+0x1e4>)
 8002118:	f002 fa02 	bl	8004520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	201e      	movs	r0, #30
 8002122:	f001 fc64 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002126:	201e      	movs	r0, #30
 8002128:	f001 fc7b 	bl	8003a22 <HAL_NVIC_EnableIRQ>
}
 800212c:	e074      	b.n	8002218 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM5)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a3f      	ldr	r2, [pc, #252]	; (8002230 <HAL_TIM_Base_MspInit+0x1e8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d136      	bne.n	80021a6 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002138:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 800213a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213e:	4a38      	ldr	r2, [pc, #224]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 8002140:	f043 0308 	orr.w	r3, r3, #8
 8002144:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002148:	4b35      	ldr	r3, [pc, #212]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 800214a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215c:	4a30      	ldr	r2, [pc, #192]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002174:	230d      	movs	r3, #13
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002184:	2302      	movs	r3, #2
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800218c:	4619      	mov	r1, r3
 800218e:	4829      	ldr	r0, [pc, #164]	; (8002234 <HAL_TIM_Base_MspInit+0x1ec>)
 8002190:	f002 f9c6 	bl	8004520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2032      	movs	r0, #50	; 0x32
 800219a:	f001 fc28 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800219e:	2032      	movs	r0, #50	; 0x32
 80021a0:	f001 fc3f 	bl	8003a22 <HAL_NVIC_EnableIRQ>
}
 80021a4:	e038      	b.n	8002218 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM6)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a23      	ldr	r2, [pc, #140]	; (8002238 <HAL_TIM_Base_MspInit+0x1f0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d117      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80021b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b6:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80021c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2036      	movs	r0, #54	; 0x36
 80021d4:	f001 fc0b 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021d8:	2036      	movs	r0, #54	; 0x36
 80021da:	f001 fc22 	bl	8003a22 <HAL_NVIC_EnableIRQ>
}
 80021de:	e01b      	b.n	8002218 <HAL_TIM_Base_MspInit+0x1d0>
  else if(htim_base->Instance==TIM7)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a15      	ldr	r2, [pc, #84]	; (800223c <HAL_TIM_Base_MspInit+0x1f4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d116      	bne.n	8002218 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80021ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021f0:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80021f2:	f043 0320 	orr.w	r3, r3, #32
 80021f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_TIM_Base_MspInit+0x1d8>)
 80021fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2037      	movs	r0, #55	; 0x37
 800220e:	f001 fbee 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002212:	2037      	movs	r0, #55	; 0x37
 8002214:	f001 fc05 	bl	8003a22 <HAL_NVIC_EnableIRQ>
}
 8002218:	bf00      	nop
 800221a:	3740      	adds	r7, #64	; 0x40
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	58024400 	.word	0x58024400
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	58020c00 	.word	0x58020c00
 8002230:	40000c00 	.word	0x40000c00
 8002234:	58020000 	.word	0x58020000
 8002238:	40001000 	.word	0x40001000
 800223c:	40001400 	.word	0x40001400

08002240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	; 0x30
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d13f      	bne.n	80022e2 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002268:	4a41      	ldr	r2, [pc, #260]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002272:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 8002282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002286:	4a3a      	ldr	r2, [pc, #232]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002290:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 8002292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800229e:	2320      	movs	r3, #32
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ae:	2301      	movs	r3, #1
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	482e      	ldr	r0, [pc, #184]	; (8002374 <HAL_TIM_MspPostInit+0x134>)
 80022ba:	f002 f931 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80022be:	f640 4308 	movw	r3, #3080	; 0xc08
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	4827      	ldr	r0, [pc, #156]	; (8002378 <HAL_TIM_MspPostInit+0x138>)
 80022dc:	f002 f920 	bl	8004520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022e0:	e042      	b.n	8002368 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a25      	ldr	r2, [pc, #148]	; (800237c <HAL_TIM_MspPostInit+0x13c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d13d      	bne.n	8002368 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f2:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022fc:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 80022fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_TIM_MspPostInit+0x130>)
 800231c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002328:	23c0      	movs	r3, #192	; 0xc0
 800232a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002338:	2302      	movs	r3, #2
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	4619      	mov	r1, r3
 8002342:	480c      	ldr	r0, [pc, #48]	; (8002374 <HAL_TIM_MspPostInit+0x134>)
 8002344:	f002 f8ec 	bl	8004520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002348:	2303      	movs	r3, #3
 800234a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002358:	2302      	movs	r3, #2
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <HAL_TIM_MspPostInit+0x138>)
 8002364:	f002 f8dc 	bl	8004520 <HAL_GPIO_Init>
}
 8002368:	bf00      	nop
 800236a:	3730      	adds	r7, #48	; 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	58024400 	.word	0x58024400
 8002374:	58020000 	.word	0x58020000
 8002378:	58020400 	.word	0x58020400
 800237c:	40000400 	.word	0x40000400

08002380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0ba      	sub	sp, #232	; 0xe8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002398:	f107 0318 	add.w	r3, r7, #24
 800239c:	22bc      	movs	r2, #188	; 0xbc
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f00a f9a7 	bl	800c6f4 <memset>
  if(huart->Instance==USART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_UART_MspInit+0x118>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d16f      	bne.n	8002490 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ba:	f107 0318 	add.w	r3, r7, #24
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 f9a4 	bl	800670c <HAL_RCCEx_PeriphCLKConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023ca:	f7fe fffb 	bl	80013c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ce:	4b33      	ldr	r3, [pc, #204]	; (800249c <HAL_UART_MspInit+0x11c>)
 80023d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023d4:	4a31      	ldr	r2, [pc, #196]	; (800249c <HAL_UART_MspInit+0x11c>)
 80023d6:	f043 0310 	orr.w	r3, r3, #16
 80023da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <HAL_UART_MspInit+0x11c>)
 80023e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_UART_MspInit+0x11c>)
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f2:	4a2a      	ldr	r2, [pc, #168]	; (800249c <HAL_UART_MspInit+0x11c>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <HAL_UART_MspInit+0x11c>)
 80023fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_UART_MspInit+0x11c>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002410:	4a22      	ldr	r2, [pc, #136]	; (800249c <HAL_UART_MspInit+0x11c>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <HAL_UART_MspInit+0x11c>)
 800241c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800242c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002442:	2304      	movs	r3, #4
 8002444:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800244c:	4619      	mov	r1, r3
 800244e:	4814      	ldr	r0, [pc, #80]	; (80024a0 <HAL_UART_MspInit+0x120>)
 8002450:	f002 f866 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002458:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800246e:	2307      	movs	r3, #7
 8002470:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002478:	4619      	mov	r1, r3
 800247a:	480a      	ldr	r0, [pc, #40]	; (80024a4 <HAL_UART_MspInit+0x124>)
 800247c:	f002 f850 	bl	8004520 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2025      	movs	r0, #37	; 0x25
 8002486:	f001 fab2 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800248a:	2025      	movs	r0, #37	; 0x25
 800248c:	f001 fac9 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002490:	bf00      	nop
 8002492:	37e8      	adds	r7, #232	; 0xe8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40011000 	.word	0x40011000
 800249c:	58024400 	.word	0x58024400
 80024a0:	58020400 	.word	0x58020400
 80024a4:	58020000 	.word	0x58020000

080024a8 <set_speed>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void set_speed(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4,
    uint32_t m5, uint32_t m6, uint32_t m7, uint32_t m8) {
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  TIM2->CCR1 = m1;
 80024b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = m3;
 80024be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6393      	str	r3, [r2, #56]	; 0x38
  TIM2->CCR3 = m5;
 80024c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = m7;
 80024ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
//  TIM3->CCR1 = m2;
//  TIM3->CCR2 = m4;
//  TIM3->CCR3 = m6;
//  TIM3->CCR4 = m8;
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <NMI_Handler+0x4>

080024e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <HardFault_Handler+0x4>

080024ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <MemManage_Handler+0x4>

080024f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <BusFault_Handler+0x4>

080024fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fe:	e7fe      	b.n	80024fe <UsageFault_Handler+0x4>

08002500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252e:	f001 f933 	bl	8003798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <TIM4_IRQHandler+0x10>)
 800253e:	f006 f95f 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	24000228 	.word	0x24000228

0800254c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <USART1_IRQHandler+0x10>)
 8002552:	f007 fce1 	bl	8009f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	24000358 	.word	0x24000358

08002560 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <TIM5_IRQHandler+0x10>)
 8002566:	f006 f94b 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000274 	.word	0x24000274

08002574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <TIM6_DAC_IRQHandler+0x10>)
 800257a:	f006 f941 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	240002c0 	.word	0x240002c0

08002588 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  fly();
 800258c:	f000 fa5c 	bl	8002a48 <fly>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TIM7_IRQHandler+0x14>)
 8002592:	f006 f935 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2400030c 	.word	0x2400030c

080025a0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80025a8:	2102      	movs	r1, #2
 80025aa:	4803      	ldr	r0, [pc, #12]	; (80025b8 <HAL_UART_TxCpltCallback+0x18>)
 80025ac:	f002 f999 	bl	80048e2 <HAL_GPIO_TogglePin>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	58020000 	.word	0x58020000

080025bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80025c4:	2102      	movs	r1, #2
 80025c6:	4819      	ldr	r0, [pc, #100]	; (800262c <HAL_UART_RxCpltCallback+0x70>)
 80025c8:	f002 f98b 	bl	80048e2 <HAL_GPIO_TogglePin>

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_UART_RxCpltCallback+0x74>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_UART_RxCpltCallback+0x74>)
 80025d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_UART_RxCpltCallback+0x74>)
 80025da:	edd3 6a02 	vldr	s13, [r3, #8]
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_UART_RxCpltCallback+0x74>)
 80025e0:	ed93 6a03 	vldr	s12, [r3, #12]
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_UART_RxCpltCallback+0x74>)
 80025e6:	edd3 5a04 	vldr	s11, [r3, #16]
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_UART_RxCpltCallback+0x74>)
 80025ec:	ed93 5a05 	vldr	s10, [r3, #20]
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_UART_RxCpltCallback+0x74>)
 80025f2:	edd3 4a06 	vldr	s9, [r3, #24]
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_UART_RxCpltCallback+0x74>)
 80025f8:	edd3 3a07 	vldr	s7, [r3, #28]
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <HAL_UART_RxCpltCallback+0x74>)
 80025fe:	ed93 4a08 	vldr	s8, [r3, #32]
 8002602:	eeb0 3a64 	vmov.f32	s6, s9
 8002606:	eef0 2a45 	vmov.f32	s5, s10
 800260a:	eeb0 2a65 	vmov.f32	s4, s11
 800260e:	eef0 1a46 	vmov.f32	s3, s12
 8002612:	eeb0 1a66 	vmov.f32	s2, s13
 8002616:	eef0 0a47 	vmov.f32	s1, s14
 800261a:	eeb0 0a67 	vmov.f32	s0, s15
 800261e:	f7fe f8f7 	bl	8000810 <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58020000 	.word	0x58020000
 8002630:	24001924 	.word	0x24001924

08002634 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4aa5      	ldr	r2, [pc, #660]	; (80028d8 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f040 813b 	bne.w	80028be <HAL_TIM_IC_CaptureCallback+0x28a>
    switch (htim->Channel) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7f1b      	ldrb	r3, [r3, #28]
 800264c:	3b01      	subs	r3, #1
 800264e:	2b07      	cmp	r3, #7
 8002650:	f200 80e4 	bhi.w	800281c <HAL_TIM_IC_CaptureCallback+0x1e8>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_TIM_IC_CaptureCallback+0x28>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	0800267d 	.word	0x0800267d
 8002660:	080026e9 	.word	0x080026e9
 8002664:	0800281d 	.word	0x0800281d
 8002668:	08002751 	.word	0x08002751
 800266c:	0800281d 	.word	0x0800281d
 8002670:	0800281d 	.word	0x0800281d
 8002674:	0800281d 	.word	0x0800281d
 8002678:	080027b7 	.word	0x080027b7
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 800267c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002680:	4896      	ldr	r0, [pc, #600]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002682:	f002 f8fd 	bl	8004880 <HAL_GPIO_ReadPin>
 8002686:	4603      	mov	r3, r0
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800268c:	2100      	movs	r1, #0
 800268e:	4894      	ldr	r0, [pc, #592]	; (80028e0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002690:	f006 fc7e 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	4b92      	ldr	r3, [pc, #584]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800269a:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 800269c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026a0:	488e      	ldr	r0, [pc, #568]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80026a2:	f002 f8ed 	bl	8004880 <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 80b9 	bne.w	8002820 <HAL_TIM_IC_CaptureCallback+0x1ec>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80026ae:	2100      	movs	r1, #0
 80026b0:	488b      	ldr	r0, [pc, #556]	; (80028e0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80026b2:	f006 fc6d 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b8a      	ldr	r3, [pc, #552]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80026bc:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 80026be:	4b89      	ldr	r3, [pc, #548]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	613b      	str	r3, [r7, #16]
          if (value >= 350 && value <= 850) { // [400, 798]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80026d0:	f2c0 80a6 	blt.w	8002820 <HAL_TIM_IC_CaptureCallback+0x1ec>
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f240 3252 	movw	r2, #850	; 0x352
 80026da:	4293      	cmp	r3, r2
 80026dc:	f300 80a0 	bgt.w	8002820 <HAL_TIM_IC_CaptureCallback+0x1ec>
            pwm_in[2] = value;
 80026e0:	4a80      	ldr	r2, [pc, #512]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 80026e6:	e09b      	b.n	8002820 <HAL_TIM_IC_CaptureCallback+0x1ec>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 80026e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026ec:	487b      	ldr	r0, [pc, #492]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80026ee:	f002 f8c7 	bl	8004880 <HAL_GPIO_ReadPin>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d107      	bne.n	8002708 <HAL_TIM_IC_CaptureCallback+0xd4>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80026f8:	2104      	movs	r1, #4
 80026fa:	4879      	ldr	r0, [pc, #484]	; (80028e0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80026fc:	f006 fc48 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	4b77      	ldr	r3, [pc, #476]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002706:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8002708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800270c:	4873      	ldr	r0, [pc, #460]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800270e:	f002 f8b7 	bl	8004880 <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 8085 	bne.w	8002824 <HAL_TIM_IC_CaptureCallback+0x1f0>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 800271a:	2104      	movs	r1, #4
 800271c:	4870      	ldr	r0, [pc, #448]	; (80028e0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 800271e:	f006 fc37 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002728:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 800272a:	4b6e      	ldr	r3, [pc, #440]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	4b6d      	ldr	r3, [pc, #436]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
          if (value >= 350 && value <= 850) {
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800273c:	db72      	blt.n	8002824 <HAL_TIM_IC_CaptureCallback+0x1f0>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f240 3252 	movw	r2, #850	; 0x352
 8002744:	4293      	cmp	r3, r2
 8002746:	dc6d      	bgt.n	8002824 <HAL_TIM_IC_CaptureCallback+0x1f0>
            pwm_in[5] = value;
 8002748:	4a66      	ldr	r2, [pc, #408]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 800274e:	e069      	b.n	8002824 <HAL_TIM_IC_CaptureCallback+0x1f0>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8002750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002754:	4861      	ldr	r0, [pc, #388]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002756:	f002 f893 	bl	8004880 <HAL_GPIO_ReadPin>
 800275a:	4603      	mov	r3, r0
 800275c:	2b01      	cmp	r3, #1
 800275e:	d107      	bne.n	8002770 <HAL_TIM_IC_CaptureCallback+0x13c>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8002760:	2108      	movs	r1, #8
 8002762:	485f      	ldr	r0, [pc, #380]	; (80028e0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002764:	f006 fc14 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	4b5d      	ldr	r3, [pc, #372]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800276e:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8002770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002774:	4859      	ldr	r0, [pc, #356]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002776:	f002 f883 	bl	8004880 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d153      	bne.n	8002828 <HAL_TIM_IC_CaptureCallback+0x1f4>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8002780:	2108      	movs	r1, #8
 8002782:	4857      	ldr	r0, [pc, #348]	; (80028e0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002784:	f006 fc04 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	4b55      	ldr	r3, [pc, #340]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800278e:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 8002790:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	61bb      	str	r3, [r7, #24]
          if (value >= 350 && value <= 850) {
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80027a2:	db41      	blt.n	8002828 <HAL_TIM_IC_CaptureCallback+0x1f4>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f240 3252 	movw	r2, #850	; 0x352
 80027aa:	4293      	cmp	r3, r2
 80027ac:	dc3c      	bgt.n	8002828 <HAL_TIM_IC_CaptureCallback+0x1f4>
            pwm_in[8] = value;
 80027ae:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 80027b4:	e038      	b.n	8002828 <HAL_TIM_IC_CaptureCallback+0x1f4>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 80027b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ba:	4848      	ldr	r0, [pc, #288]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80027bc:	f002 f860 	bl	8004880 <HAL_GPIO_ReadPin>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_TIM_IC_CaptureCallback+0x1a2>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 80027c6:	210c      	movs	r1, #12
 80027c8:	4845      	ldr	r0, [pc, #276]	; (80028e0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80027ca:	f006 fbe1 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 80027ce:	4603      	mov	r3, r0
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b44      	ldr	r3, [pc, #272]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 80027d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027da:	4840      	ldr	r0, [pc, #256]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80027dc:	f002 f850 	bl	8004880 <HAL_GPIO_ReadPin>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d122      	bne.n	800282c <HAL_TIM_IC_CaptureCallback+0x1f8>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 80027e6:	210c      	movs	r1, #12
 80027e8:	483d      	ldr	r0, [pc, #244]	; (80028e0 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80027ea:	f006 fbd1 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 80027f6:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80027f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fa:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	61fb      	str	r3, [r7, #28]
          if (value >= 350 && value <= 850) {
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002808:	db10      	blt.n	800282c <HAL_TIM_IC_CaptureCallback+0x1f8>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f240 3252 	movw	r2, #850	; 0x352
 8002810:	4293      	cmp	r3, r2
 8002812:	dc0b      	bgt.n	800282c <HAL_TIM_IC_CaptureCallback+0x1f8>
            pwm_in[11] = value;
 8002814:	4a33      	ldr	r2, [pc, #204]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 800281a:	e007      	b.n	800282c <HAL_TIM_IC_CaptureCallback+0x1f8>
      default:
        break;
 800281c:	bf00      	nop
 800281e:	e006      	b.n	800282e <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 8002820:	bf00      	nop
 8002822:	e004      	b.n	800282e <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 8002824:	bf00      	nop
 8002826:	e002      	b.n	800282e <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <HAL_TIM_IC_CaptureCallback+0x1fa>
        break;
 800282c:	bf00      	nop
    }

    g_throttle = average_filter_update(&g_af[0], pwm_in[2] - 400);
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283e:	eeb0 0a67 	vmov.f32	s0, s15
 8002842:	4829      	ldr	r0, [pc, #164]	; (80028e8 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8002844:	f7fd ff5d 	bl	8000702 <average_filter_update>
 8002848:	eef0 7a40 	vmov.f32	s15, s0
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800284e:	edc3 7a00 	vstr	s15, [r3]
    g_yaw = average_filter_update(&g_af[1], pwm_in[11] - 600);
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002862:	eeb0 0a67 	vmov.f32	s0, s15
 8002866:	4822      	ldr	r0, [pc, #136]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002868:	f7fd ff4b 	bl	8000702 <average_filter_update>
 800286c:	eef0 7a40 	vmov.f32	s15, s0
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002872:	edc3 7a00 	vstr	s15, [r3]
    g_pitch = average_filter_update(&g_af[2], pwm_in[8] - 600);
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002886:	eeb0 0a67 	vmov.f32	s0, s15
 800288a:	481b      	ldr	r0, [pc, #108]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800288c:	f7fd ff39 	bl	8000702 <average_filter_update>
 8002890:	eef0 7a40 	vmov.f32	s15, s0
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8002896:	edc3 7a00 	vstr	s15, [r3]
    g_roll = average_filter_update(&g_af[3], pwm_in[5] - 600);
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028aa:	eeb0 0a67 	vmov.f32	s0, s15
 80028ae:	4814      	ldr	r0, [pc, #80]	; (8002900 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 80028b0:	f7fd ff27 	bl	8000702 <average_filter_update>
 80028b4:	eef0 7a40 	vmov.f32	s15, s0
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80028ba:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM5) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a11      	ldr	r2, [pc, #68]	; (8002908 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	f040 80aa 	bne.w	8002a1e <HAL_TIM_IC_CaptureCallback+0x3ea>
    switch (htim->Channel) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7f1b      	ldrb	r3, [r3, #28]
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d01c      	beq.n	800290c <HAL_TIM_IC_CaptureCallback+0x2d8>
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d04b      	beq.n	800296e <HAL_TIM_IC_CaptureCallback+0x33a>
            pwm_in[17] = value;
          }
        }
        break;
      default:
        break;
 80028d6:	e07e      	b.n	80029d6 <HAL_TIM_IC_CaptureCallback+0x3a2>
 80028d8:	40000800 	.word	0x40000800
 80028dc:	58020c00 	.word	0x58020c00
 80028e0:	24000228 	.word	0x24000228
 80028e4:	2400188c 	.word	0x2400188c
 80028e8:	240003e8 	.word	0x240003e8
 80028ec:	24001904 	.word	0x24001904
 80028f0:	24000584 	.word	0x24000584
 80028f4:	24001910 	.word	0x24001910
 80028f8:	24000720 	.word	0x24000720
 80028fc:	24001908 	.word	0x24001908
 8002900:	240008bc 	.word	0x240008bc
 8002904:	2400190c 	.word	0x2400190c
 8002908:	40000c00 	.word	0x40000c00
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 800290c:	2104      	movs	r1, #4
 800290e:	4846      	ldr	r0, [pc, #280]	; (8002a28 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8002910:	f001 ffb6 	bl	8004880 <HAL_GPIO_ReadPin>
 8002914:	4603      	mov	r3, r0
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_TIM_IC_CaptureCallback+0x2f6>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 800291a:	2108      	movs	r1, #8
 800291c:	4843      	ldr	r0, [pc, #268]	; (8002a2c <HAL_TIM_IC_CaptureCallback+0x3f8>)
 800291e:	f006 fb37 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 800292a:	2104      	movs	r1, #4
 800292c:	483e      	ldr	r0, [pc, #248]	; (8002a28 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 800292e:	f001 ffa7 	bl	8004880 <HAL_GPIO_ReadPin>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d14b      	bne.n	80029d0 <HAL_TIM_IC_CaptureCallback+0x39c>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 8002938:	2108      	movs	r1, #8
 800293a:	483c      	ldr	r0, [pc, #240]	; (8002a2c <HAL_TIM_IC_CaptureCallback+0x3f8>)
 800293c:	f006 fb28 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002946:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 8002948:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 800294a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294c:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	60bb      	str	r3, [r7, #8]
          if (value >= 350 && value <= 850) { // [399, 799]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800295a:	db39      	blt.n	80029d0 <HAL_TIM_IC_CaptureCallback+0x39c>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f240 3252 	movw	r2, #850	; 0x352
 8002962:	4293      	cmp	r3, r2
 8002964:	dc34      	bgt.n	80029d0 <HAL_TIM_IC_CaptureCallback+0x39c>
            pwm_in[14] = value;
 8002966:	4a32      	ldr	r2, [pc, #200]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	6393      	str	r3, [r2, #56]	; 0x38
        break;
 800296c:	e030      	b.n	80029d0 <HAL_TIM_IC_CaptureCallback+0x39c>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
 800296e:	2108      	movs	r1, #8
 8002970:	482d      	ldr	r0, [pc, #180]	; (8002a28 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8002972:	f001 ff85 	bl	8004880 <HAL_GPIO_ReadPin>
 8002976:	4603      	mov	r3, r0
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <HAL_TIM_IC_CaptureCallback+0x358>
          pwm_in[15] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 800297c:	210c      	movs	r1, #12
 800297e:	482b      	ldr	r0, [pc, #172]	; (8002a2c <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8002980:	f006 fb06 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) {
 800298c:	2108      	movs	r1, #8
 800298e:	4826      	ldr	r0, [pc, #152]	; (8002a28 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8002990:	f001 ff76 	bl	8004880 <HAL_GPIO_ReadPin>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11c      	bne.n	80029d4 <HAL_TIM_IC_CaptureCallback+0x3a0>
          pwm_in[16] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 800299a:	210c      	movs	r1, #12
 800299c:	4823      	ldr	r0, [pc, #140]	; (8002a2c <HAL_TIM_IC_CaptureCallback+0x3f8>)
 800299e:	f006 faf7 	bl	8008f90 <HAL_TIM_ReadCapturedValue>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
          int value = pwm_in[16] - pwm_in[15];
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80029ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	60fb      	str	r3, [r7, #12]
          if (value >= 350 && value <= 850) {
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80029bc:	db0a      	blt.n	80029d4 <HAL_TIM_IC_CaptureCallback+0x3a0>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f240 3252 	movw	r2, #850	; 0x352
 80029c4:	4293      	cmp	r3, r2
 80029c6:	dc05      	bgt.n	80029d4 <HAL_TIM_IC_CaptureCallback+0x3a0>
            pwm_in[17] = value;
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
        break;
 80029ce:	e001      	b.n	80029d4 <HAL_TIM_IC_CaptureCallback+0x3a0>
        break;
 80029d0:	bf00      	nop
 80029d2:	e000      	b.n	80029d6 <HAL_TIM_IC_CaptureCallback+0x3a2>
        break;
 80029d4:	bf00      	nop
    }

    g_tune1 = average_filter_update(&g_af[4], pwm_in[14] - 400);
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ea:	4812      	ldr	r0, [pc, #72]	; (8002a34 <HAL_TIM_IC_CaptureCallback+0x400>)
 80029ec:	f7fd fe89 	bl	8000702 <average_filter_update>
 80029f0:	eef0 7a40 	vmov.f32	s15, s0
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_TIM_IC_CaptureCallback+0x404>)
 80029f6:	edc3 7a00 	vstr	s15, [r3]
    g_tune2 = average_filter_update(&g_af[5], pwm_in[17] - 400);
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	480b      	ldr	r0, [pc, #44]	; (8002a3c <HAL_TIM_IC_CaptureCallback+0x408>)
 8002a10:	f7fd fe77 	bl	8000702 <average_filter_update>
 8002a14:	eef0 7a40 	vmov.f32	s15, s0
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
  monitor[5] = g_I_yaw_period;
  monitor[6] = g_D_pitch_gain;
  monitor[7] = g_D_roll_gain;
  monitor[8] = g_D_yaw_gain;
#endif
}
 8002a1e:	bf00      	nop
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	58020000 	.word	0x58020000
 8002a2c:	24000274 	.word	0x24000274
 8002a30:	2400188c 	.word	0x2400188c
 8002a34:	24000a58 	.word	0x24000a58
 8002a38:	24001914 	.word	0x24001914
 8002a3c:	24000bf4 	.word	0x24000bf4
 8002a40:	24001918 	.word	0x24001918
 8002a44:	00000000 	.word	0x00000000

08002a48 <fly>:

void fly() {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08e      	sub	sp, #56	; 0x38
 8002a4c:	af04      	add	r7, sp, #16
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 8002a4e:	488c      	ldr	r0, [pc, #560]	; (8002c80 <fly+0x238>)
 8002a50:	f7ff f8ae 	bl	8001bb0 <MPU6050_update>
//  MS5611_update(&g_ms5611);

  float angle_x = g_mpu6050.angle_x;
 8002a54:	4b8a      	ldr	r3, [pc, #552]	; (8002c80 <fly+0x238>)
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	623b      	str	r3, [r7, #32]
  float angle_y = g_mpu6050.angle_y;
 8002a5a:	4b89      	ldr	r3, [pc, #548]	; (8002c80 <fly+0x238>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	61fb      	str	r3, [r7, #28]
  float angle_z = g_mpu6050.angle_z;
 8002a60:	4b87      	ldr	r3, [pc, #540]	; (8002c80 <fly+0x238>)
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	61bb      	str	r3, [r7, #24]
  float gyro_x = g_mpu6050.gyro_x;
 8002a66:	4b86      	ldr	r3, [pc, #536]	; (8002c80 <fly+0x238>)
 8002a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6a:	617b      	str	r3, [r7, #20]
  float gyro_y = g_mpu6050.gyro_y;
 8002a6c:	4b84      	ldr	r3, [pc, #528]	; (8002c80 <fly+0x238>)
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a70:	613b      	str	r3, [r7, #16]
  float gyro_z = g_mpu6050.gyro_z;
 8002a72:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <fly+0x238>)
 8002a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a76:	60fb      	str	r3, [r7, #12]

  // Add remote control bias
  float angle_error_y = angle_y - 0.125*g_pitch; // Max 25 degree
 8002a78:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a80:	4b80      	ldr	r3, [pc, #512]	; (8002c84 <fly+0x23c>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a8a:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8002a8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002a92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a9a:	edc7 7a02 	vstr	s15, [r7, #8]
  float angle_error_x = angle_x - 0.125*g_roll; // Max 25 degree
 8002a9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002aa2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002aa6:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <fly+0x240>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ab0:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8002ab4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002ab8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ac0:	edc7 7a01 	vstr	s15, [r7, #4]
  float angle_error_z = angle_z;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
  if (g_yaw < -5 || g_yaw > 5) {
 8002ac8:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <fly+0x244>)
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8002ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ada:	d409      	bmi.n	8002af0 <fly+0xa8>
 8002adc:	4b6b      	ldr	r3, [pc, #428]	; (8002c8c <fly+0x244>)
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aee:	dd10      	ble.n	8002b12 <fly+0xca>
    angle_error_z = g_yaw > 0 ? -0.2*g_yaw : -0.2*g_yaw;
 8002af0:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <fly+0x244>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002afa:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8002c78 <fly+0x230>
 8002afe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_mpu6050.angle_z = 0;
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <fly+0x238>)
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
  // Keep alive for the fly
//  if (g_tune1 < 100) {
//    fly_mode = init;
//  }

  switch (fly_mode) {
 8002b12:	4b5f      	ldr	r3, [pc, #380]	; (8002c90 <fly+0x248>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	f200 846f 	bhi.w	80033fa <fly+0x9b2>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <fly+0xdc>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b3d 	.word	0x08002b3d
 8002b28:	08002c1b 	.word	0x08002c1b
 8002b2c:	080033fb 	.word	0x080033fb
 8002b30:	08002cf1 	.word	0x08002cf1
 8002b34:	080033fb 	.word	0x080033fb
 8002b38:	080032bd 	.word	0x080032bd
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 8002b3c:	4b55      	ldr	r3, [pc, #340]	; (8002c94 <fly+0x24c>)
 8002b3e:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <fly+0x250>)
 8002b40:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 8002b42:	4b56      	ldr	r3, [pc, #344]	; (8002c9c <fly+0x254>)
 8002b44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b48:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 8002b4a:	4b55      	ldr	r3, [pc, #340]	; (8002ca0 <fly+0x258>)
 8002b4c:	4a55      	ldr	r2, [pc, #340]	; (8002ca4 <fly+0x25c>)
 8002b4e:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 8002b50:	4b55      	ldr	r3, [pc, #340]	; (8002ca8 <fly+0x260>)
 8002b52:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002b56:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 8002b58:	4b54      	ldr	r3, [pc, #336]	; (8002cac <fly+0x264>)
 8002b5a:	4a4f      	ldr	r2, [pc, #316]	; (8002c98 <fly+0x250>)
 8002b5c:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 8002b5e:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <fly+0x268>)
 8002b60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b64:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 8002b66:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <fly+0x26c>)
 8002b68:	4a4e      	ldr	r2, [pc, #312]	; (8002ca4 <fly+0x25c>)
 8002b6a:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 8002b6c:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <fly+0x270>)
 8002b6e:	4a53      	ldr	r2, [pc, #332]	; (8002cbc <fly+0x274>)
 8002b70:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 8002b72:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <fly+0x278>)
 8002b74:	4a53      	ldr	r2, [pc, #332]	; (8002cc4 <fly+0x27c>)
 8002b76:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <fly+0x280>)
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 8002b80:	4b52      	ldr	r3, [pc, #328]	; (8002ccc <fly+0x284>)
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 8002b88:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <fly+0x288>)
 8002b8a:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <fly+0x28c>)
 8002b8c:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED,
 8002b8e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b92:	9303      	str	r3, [sp, #12]
 8002b94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b98:	9302      	str	r3, [sp, #8]
 8002b9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002baa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002bae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002bb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bb6:	f7ff fc77 	bl	80024a8 <set_speed>
                INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);

      // Move sticks to make it ready to take off
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <fly+0x290>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	d901      	bls.n	8002bce <fly+0x186>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
        fly_mode = ready;
      }

      break;
 8002bca:	f000 bc16 	b.w	80033fa <fly+0x9b2>
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8002bce:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <fly+0x244>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002cdc <fly+0x294>
 8002bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	d901      	bls.n	8002be6 <fly+0x19e>
      break;
 8002be2:	f000 bc0a 	b.w	80033fa <fly+0x9b2>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8002be6:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <fly+0x23c>)
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002cdc <fly+0x294>
 8002bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	d900      	bls.n	8002bfc <fly+0x1b4>
      break;
 8002bfa:	e3fe      	b.n	80033fa <fly+0x9b2>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <fly+0x240>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002ce0 <fly+0x298>
 8002c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	da00      	bge.n	8002c12 <fly+0x1ca>
      break;
 8002c10:	e3f3      	b.n	80033fa <fly+0x9b2>
        fly_mode = ready;
 8002c12:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <fly+0x248>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
      break;
 8002c18:	e3ef      	b.n	80033fa <fly+0x9b2>
    case ready:
      // Reset accumulated integral
      g_I_pitch_accumulated = 0;
 8002c1a:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <fly+0x29c>)
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <fly+0x2a0>)
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8002c2a:	4b30      	ldr	r3, [pc, #192]	; (8002cec <fly+0x2a4>)
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED,
 8002c32:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002c36:	9303      	str	r3, [sp, #12]
 8002c38:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002c4e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002c52:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8002c56:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8002c5a:	f7ff fc25 	bl	80024a8 <set_speed>
          MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);

      // Switch to fly mode
      if (g_throttle > 0) {
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <fly+0x290>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	dc00      	bgt.n	8002c70 <fly+0x228>
        fly_mode = moving;
      }

      break;
 8002c6e:	e3c4      	b.n	80033fa <fly+0x9b2>
        fly_mode = moving;
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <fly+0x248>)
 8002c72:	2203      	movs	r2, #3
 8002c74:	701a      	strb	r2, [r3, #0]
      break;
 8002c76:	e3c0      	b.n	80033fa <fly+0x9b2>
 8002c78:	9999999a 	.word	0x9999999a
 8002c7c:	bfc99999 	.word	0xbfc99999
 8002c80:	24001400 	.word	0x24001400
 8002c84:	24001908 	.word	0x24001908
 8002c88:	2400190c 	.word	0x2400190c
 8002c8c:	24001910 	.word	0x24001910
 8002c90:	2400183a 	.word	0x2400183a
 8002c94:	24000000 	.word	0x24000000
 8002c98:	41200000 	.word	0x41200000
 8002c9c:	24000004 	.word	0x24000004
 8002ca0:	24000008 	.word	0x24000008
 8002ca4:	3b23d70a 	.word	0x3b23d70a
 8002ca8:	2400000c 	.word	0x2400000c
 8002cac:	24000010 	.word	0x24000010
 8002cb0:	24000014 	.word	0x24000014
 8002cb4:	24000018 	.word	0x24000018
 8002cb8:	2400001c 	.word	0x2400001c
 8002cbc:	41100000 	.word	0x41100000
 8002cc0:	24000020 	.word	0x24000020
 8002cc4:	40e00000 	.word	0x40e00000
 8002cc8:	2400191c 	.word	0x2400191c
 8002ccc:	24001920 	.word	0x24001920
 8002cd0:	24000024 	.word	0x24000024
 8002cd4:	40a00000 	.word	0x40a00000
 8002cd8:	24001904 	.word	0x24001904
 8002cdc:	c3470000 	.word	0xc3470000
 8002ce0:	43470000 	.word	0x43470000
 8002ce4:	24001844 	.word	0x24001844
 8002ce8:	24001854 	.word	0x24001854
 8002cec:	24001864 	.word	0x24001864
    case holding:

      break;
    case moving:
      g_P_pitch = limit(angle_error_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8002cf0:	4bdd      	ldr	r3, [pc, #884]	; (8003068 <fly+0x620>)
 8002cf2:	ed93 7a00 	vldr	s14, [r3]
 8002cf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfe:	ed9f 1adb 	vldr	s2, [pc, #876]	; 800306c <fly+0x624>
 8002d02:	eddf 0adb 	vldr	s1, [pc, #876]	; 8003070 <fly+0x628>
 8002d06:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0a:	f7ff f869 	bl	8001de0 <limit>
 8002d0e:	eef0 7a40 	vmov.f32	s15, s0
 8002d12:	4bd8      	ldr	r3, [pc, #864]	; (8003074 <fly+0x62c>)
 8002d14:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_error_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 8002d18:	4bd7      	ldr	r3, [pc, #860]	; (8003078 <fly+0x630>)
 8002d1a:	edd3 7a00 	vldr	s15, [r3]
 8002d1e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d2a:	ed9f 5bc9 	vldr	d5, [pc, #804]	; 8003050 <fly+0x608>
 8002d2e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002d32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d3a:	4bcf      	ldr	r3, [pc, #828]	; (8003078 <fly+0x630>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated = limit(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 8002d40:	4bcd      	ldr	r3, [pc, #820]	; (8003078 <fly+0x630>)
 8002d42:	ed93 7a00 	vldr	s14, [r3]
 8002d46:	4bcd      	ldr	r3, [pc, #820]	; (800307c <fly+0x634>)
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	ed9f 6acc 	vldr	s12, [pc, #816]	; 8003080 <fly+0x638>
 8002d50:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002d54:	4bc9      	ldr	r3, [pc, #804]	; (800307c <fly+0x634>)
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	eddf 5aca 	vldr	s11, [pc, #808]	; 8003084 <fly+0x63c>
 8002d5e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002d62:	eeb0 1a46 	vmov.f32	s2, s12
 8002d66:	eef0 0a66 	vmov.f32	s1, s13
 8002d6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d6e:	f7ff f837 	bl	8001de0 <limit>
 8002d72:	eef0 7a40 	vmov.f32	s15, s0
 8002d76:	4bc0      	ldr	r3, [pc, #768]	; (8003078 <fly+0x630>)
 8002d78:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 8002d7c:	4bbe      	ldr	r3, [pc, #760]	; (8003078 <fly+0x630>)
 8002d7e:	ed93 7a00 	vldr	s14, [r3]
 8002d82:	4bbe      	ldr	r3, [pc, #760]	; (800307c <fly+0x634>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8c:	4bbe      	ldr	r3, [pc, #760]	; (8003088 <fly+0x640>)
 8002d8e:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = limit(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 8002d92:	4bbe      	ldr	r3, [pc, #760]	; (800308c <fly+0x644>)
 8002d94:	ed93 7a00 	vldr	s14, [r3]
 8002d98:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da0:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 800306c <fly+0x624>
 8002da4:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8003070 <fly+0x628>
 8002da8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dac:	f7ff f818 	bl	8001de0 <limit>
 8002db0:	eef0 7a40 	vmov.f32	s15, s0
 8002db4:	4bb6      	ldr	r3, [pc, #728]	; (8003090 <fly+0x648>)
 8002db6:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = limit(angle_error_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 8002dba:	4bb6      	ldr	r3, [pc, #728]	; (8003094 <fly+0x64c>)
 8002dbc:	ed93 7a00 	vldr	s14, [r3]
 8002dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc8:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800306c <fly+0x624>
 8002dcc:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8003070 <fly+0x628>
 8002dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd4:	f7ff f804 	bl	8001de0 <limit>
 8002dd8:	eef0 7a40 	vmov.f32	s15, s0
 8002ddc:	4bae      	ldr	r3, [pc, #696]	; (8003098 <fly+0x650>)
 8002dde:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_error_x*I_ROLL_PERIOD;
 8002de2:	4bae      	ldr	r3, [pc, #696]	; (800309c <fly+0x654>)
 8002de4:	edd3 7a00 	vldr	s15, [r3]
 8002de8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002df4:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8003050 <fly+0x608>
 8002df8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002dfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e04:	4ba5      	ldr	r3, [pc, #660]	; (800309c <fly+0x654>)
 8002e06:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated = limit(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 8002e0a:	4ba4      	ldr	r3, [pc, #656]	; (800309c <fly+0x654>)
 8002e0c:	ed93 7a00 	vldr	s14, [r3]
 8002e10:	4ba3      	ldr	r3, [pc, #652]	; (80030a0 <fly+0x658>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	ed9f 6aa3 	vldr	s12, [pc, #652]	; 80030a4 <fly+0x65c>
 8002e1a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002e1e:	4ba0      	ldr	r3, [pc, #640]	; (80030a0 <fly+0x658>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	eddf 5aa0 	vldr	s11, [pc, #640]	; 80030a8 <fly+0x660>
 8002e28:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002e2c:	eeb0 1a46 	vmov.f32	s2, s12
 8002e30:	eef0 0a66 	vmov.f32	s1, s13
 8002e34:	eeb0 0a47 	vmov.f32	s0, s14
 8002e38:	f7fe ffd2 	bl	8001de0 <limit>
 8002e3c:	eef0 7a40 	vmov.f32	s15, s0
 8002e40:	4b96      	ldr	r3, [pc, #600]	; (800309c <fly+0x654>)
 8002e42:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 8002e46:	4b95      	ldr	r3, [pc, #596]	; (800309c <fly+0x654>)
 8002e48:	ed93 7a00 	vldr	s14, [r3]
 8002e4c:	4b94      	ldr	r3, [pc, #592]	; (80030a0 <fly+0x658>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e56:	4b95      	ldr	r3, [pc, #596]	; (80030ac <fly+0x664>)
 8002e58:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = limit(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 8002e5c:	4b94      	ldr	r3, [pc, #592]	; (80030b0 <fly+0x668>)
 8002e5e:	ed93 7a00 	vldr	s14, [r3]
 8002e62:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6a:	ed9f 1a80 	vldr	s2, [pc, #512]	; 800306c <fly+0x624>
 8002e6e:	eddf 0a80 	vldr	s1, [pc, #512]	; 8003070 <fly+0x628>
 8002e72:	eeb0 0a67 	vmov.f32	s0, s15
 8002e76:	f7fe ffb3 	bl	8001de0 <limit>
 8002e7a:	eef0 7a40 	vmov.f32	s15, s0
 8002e7e:	4b8d      	ldr	r3, [pc, #564]	; (80030b4 <fly+0x66c>)
 8002e80:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = limit(angle_error_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 8002e84:	4b8c      	ldr	r3, [pc, #560]	; (80030b8 <fly+0x670>)
 8002e86:	ed93 7a00 	vldr	s14, [r3]
 8002e8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e92:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 80030bc <fly+0x674>
 8002e96:	eddf 0a8a 	vldr	s1, [pc, #552]	; 80030c0 <fly+0x678>
 8002e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9e:	f7fe ff9f 	bl	8001de0 <limit>
 8002ea2:	eef0 7a40 	vmov.f32	s15, s0
 8002ea6:	4b87      	ldr	r3, [pc, #540]	; (80030c4 <fly+0x67c>)
 8002ea8:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_error_z*I_YAW_PERIOD;
 8002eac:	4b86      	ldr	r3, [pc, #536]	; (80030c8 <fly+0x680>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002eb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002eba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ebe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8003058 <fly+0x610>
 8002ec2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002ec6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002eca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ece:	4b7e      	ldr	r3, [pc, #504]	; (80030c8 <fly+0x680>)
 8002ed0:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated = limit(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 8002ed4:	4b7c      	ldr	r3, [pc, #496]	; (80030c8 <fly+0x680>)
 8002ed6:	ed93 7a00 	vldr	s14, [r3]
 8002eda:	4b7c      	ldr	r3, [pc, #496]	; (80030cc <fly+0x684>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8003080 <fly+0x638>
 8002ee4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002ee8:	4b78      	ldr	r3, [pc, #480]	; (80030cc <fly+0x684>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	eddf 5a65 	vldr	s11, [pc, #404]	; 8003084 <fly+0x63c>
 8002ef2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002ef6:	eeb0 1a46 	vmov.f32	s2, s12
 8002efa:	eef0 0a66 	vmov.f32	s1, s13
 8002efe:	eeb0 0a47 	vmov.f32	s0, s14
 8002f02:	f7fe ff6d 	bl	8001de0 <limit>
 8002f06:	eef0 7a40 	vmov.f32	s15, s0
 8002f0a:	4b6f      	ldr	r3, [pc, #444]	; (80030c8 <fly+0x680>)
 8002f0c:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 8002f10:	4b6d      	ldr	r3, [pc, #436]	; (80030c8 <fly+0x680>)
 8002f12:	ed93 7a00 	vldr	s14, [r3]
 8002f16:	4b6d      	ldr	r3, [pc, #436]	; (80030cc <fly+0x684>)
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f20:	4b6b      	ldr	r3, [pc, #428]	; (80030d0 <fly+0x688>)
 8002f22:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = limit(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 8002f26:	4b6b      	ldr	r3, [pc, #428]	; (80030d4 <fly+0x68c>)
 8002f28:	ed93 7a00 	vldr	s14, [r3]
 8002f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f34:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80030bc <fly+0x674>
 8002f38:	eddf 0a61 	vldr	s1, [pc, #388]	; 80030c0 <fly+0x678>
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	f7fe ff4e 	bl	8001de0 <limit>
 8002f44:	eef0 7a40 	vmov.f32	s15, s0
 8002f48:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <fly+0x690>)
 8002f4a:	edc3 7a00 	vstr	s15, [r3]

      int throttle = MIN_SPEED + (int)(70.0f*sqrt(g_throttle));
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <fly+0x694>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f58:	eeb0 0b47 	vmov.f64	d0, d7
 8002f5c:	f00a fb40 	bl	800d5e0 <sqrt>
 8002f60:	eeb0 7b40 	vmov.f64	d7, d0
 8002f64:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8003060 <fly+0x618>
 8002f68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002f70:	ee17 3a90 	vmov	r3, s15
 8002f74:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8002f78:	603b      	str	r3, [r7, #0]

      g_sig1 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f84:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <fly+0x62c>)
 8002f86:	edd3 6a00 	vldr	s13, [r3]
 8002f8a:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <fly+0x640>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f94:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <fly+0x648>)
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <fly+0x650>)
 8002fa4:	edd3 6a00 	vldr	s13, [r3]
 8002fa8:	4b40      	ldr	r3, [pc, #256]	; (80030ac <fly+0x664>)
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002fb2:	4b40      	ldr	r3, [pc, #256]	; (80030b4 <fly+0x66c>)
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc0:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <fly+0x698>)
 8002fc2:	edc3 7a00 	vstr	s15, [r3]
//      g_sig2 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
      g_sig3 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd0:	4b28      	ldr	r3, [pc, #160]	; (8003074 <fly+0x62c>)
 8002fd2:	edd3 6a00 	vldr	s13, [r3]
 8002fd6:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <fly+0x640>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <fly+0x648>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <fly+0x650>)
 8002ff0:	edd3 6a00 	vldr	s13, [r3]
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <fly+0x664>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <fly+0x66c>)
 8003000:	edd3 7a00 	vldr	s15, [r3]
 8003004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300c:	4b35      	ldr	r3, [pc, #212]	; (80030e4 <fly+0x69c>)
 800300e:	edc3 7a00 	vstr	s15, [r3]
//      g_sig4 = throttle + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
      g_sig5 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <fly+0x62c>)
 800301e:	edd3 6a00 	vldr	s13, [r3]
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <fly+0x640>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <fly+0x648>)
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003036:	ee37 7a67 	vsub.f32	s14, s14, s15
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <fly+0x67c>)
 800303c:	edd3 6a00 	vldr	s13, [r3]
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <fly+0x688>)
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800304a:	e04d      	b.n	80030e8 <fly+0x6a0>
 800304c:	f3af 8000 	nop.w
 8003050:	47ae147b 	.word	0x47ae147b
 8003054:	3f647ae1 	.word	0x3f647ae1
	...
 8003064:	40518000 	.word	0x40518000
 8003068:	24000000 	.word	0x24000000
 800306c:	44340000 	.word	0x44340000
 8003070:	c4340000 	.word	0xc4340000
 8003074:	2400183c 	.word	0x2400183c
 8003078:	24001844 	.word	0x24001844
 800307c:	24000004 	.word	0x24000004
 8003080:	c3700000 	.word	0xc3700000
 8003084:	43700000 	.word	0x43700000
 8003088:	24001840 	.word	0x24001840
 800308c:	2400000c 	.word	0x2400000c
 8003090:	24001848 	.word	0x24001848
 8003094:	24000010 	.word	0x24000010
 8003098:	2400184c 	.word	0x2400184c
 800309c:	24001854 	.word	0x24001854
 80030a0:	24000014 	.word	0x24000014
 80030a4:	c2f00000 	.word	0xc2f00000
 80030a8:	42f00000 	.word	0x42f00000
 80030ac:	24001850 	.word	0x24001850
 80030b0:	2400001c 	.word	0x2400001c
 80030b4:	24001858 	.word	0x24001858
 80030b8:	24000020 	.word	0x24000020
 80030bc:	43f00000 	.word	0x43f00000
 80030c0:	c3f00000 	.word	0xc3f00000
 80030c4:	2400185c 	.word	0x2400185c
 80030c8:	24001864 	.word	0x24001864
 80030cc:	2400191c 	.word	0x2400191c
 80030d0:	24001860 	.word	0x24001860
 80030d4:	24000024 	.word	0x24000024
 80030d8:	24001868 	.word	0x24001868
 80030dc:	24001904 	.word	0x24001904
 80030e0:	2400186c 	.word	0x2400186c
 80030e4:	24001874 	.word	0x24001874
 80030e8:	4b64      	ldr	r3, [pc, #400]	; (800327c <fly+0x834>)
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f6:	4b62      	ldr	r3, [pc, #392]	; (8003280 <fly+0x838>)
 80030f8:	edc3 7a00 	vstr	s15, [r3]
//      g_sig6 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
      g_sig7 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_yaw + g_I_yaw + g_D_yaw);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003106:	4b5f      	ldr	r3, [pc, #380]	; (8003284 <fly+0x83c>)
 8003108:	edd3 6a00 	vldr	s13, [r3]
 800310c:	4b5e      	ldr	r3, [pc, #376]	; (8003288 <fly+0x840>)
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003116:	4b5d      	ldr	r3, [pc, #372]	; (800328c <fly+0x844>)
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003120:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003124:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <fly+0x848>)
 8003126:	edd3 6a00 	vldr	s13, [r3]
 800312a:	4b5a      	ldr	r3, [pc, #360]	; (8003294 <fly+0x84c>)
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003134:	4b51      	ldr	r3, [pc, #324]	; (800327c <fly+0x834>)
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003142:	4b55      	ldr	r3, [pc, #340]	; (8003298 <fly+0x850>)
 8003144:	edc3 7a00 	vstr	s15, [r3]
//      g_sig8 = throttle - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 8003148:	4b54      	ldr	r3, [pc, #336]	; (800329c <fly+0x854>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ed9f 1a54 	vldr	s2, [pc, #336]	; 80032a0 <fly+0x858>
 8003152:	eddf 0a54 	vldr	s1, [pc, #336]	; 80032a4 <fly+0x85c>
 8003156:	eeb0 0a67 	vmov.f32	s0, s15
 800315a:	f7fe fe41 	bl	8001de0 <limit>
 800315e:	eef0 7a40 	vmov.f32	s15, s0
 8003162:	4b4e      	ldr	r3, [pc, #312]	; (800329c <fly+0x854>)
 8003164:	edc3 7a00 	vstr	s15, [r3]
//      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 8003168:	4b4f      	ldr	r3, [pc, #316]	; (80032a8 <fly+0x860>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80032a0 <fly+0x858>
 8003172:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80032a4 <fly+0x85c>
 8003176:	eeb0 0a67 	vmov.f32	s0, s15
 800317a:	f7fe fe31 	bl	8001de0 <limit>
 800317e:	eef0 7a40 	vmov.f32	s15, s0
 8003182:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <fly+0x860>)
 8003184:	edc3 7a00 	vstr	s15, [r3]
//      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
      g_sig5 = limit(g_sig5, MIN_SPEED, MAX_SPEED);
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <fly+0x838>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80032a0 <fly+0x858>
 8003192:	eddf 0a44 	vldr	s1, [pc, #272]	; 80032a4 <fly+0x85c>
 8003196:	eeb0 0a67 	vmov.f32	s0, s15
 800319a:	f7fe fe21 	bl	8001de0 <limit>
 800319e:	eef0 7a40 	vmov.f32	s15, s0
 80031a2:	4b37      	ldr	r3, [pc, #220]	; (8003280 <fly+0x838>)
 80031a4:	edc3 7a00 	vstr	s15, [r3]
//      g_sig6 = limit(g_sig6, MIN_SPEED, MAX_SPEED);
      g_sig7 = limit(g_sig7, MIN_SPEED, MAX_SPEED);
 80031a8:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <fly+0x850>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 80032a0 <fly+0x858>
 80031b2:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80032a4 <fly+0x85c>
 80031b6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ba:	f7fe fe11 	bl	8001de0 <limit>
 80031be:	eef0 7a40 	vmov.f32	s15, s0
 80031c2:	4b35      	ldr	r3, [pc, #212]	; (8003298 <fly+0x850>)
 80031c4:	edc3 7a00 	vstr	s15, [r3]
//      g_sig8 = limit(g_sig8, MIN_SPEED, MAX_SPEED);

      set_speed(g_sig1, 0, g_sig3, 0, g_sig5, 0, g_sig7, 0);
 80031c8:	4b34      	ldr	r3, [pc, #208]	; (800329c <fly+0x854>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80031d2:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <fly+0x860>)
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <fly+0x838>)
 80031de:	edd3 7a00 	vldr	s15, [r3]
 80031e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e6:	ee17 2a90 	vmov	r2, s15
 80031ea:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <fly+0x850>)
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f4:	ee17 1a90 	vmov	r1, s15
 80031f8:	2300      	movs	r3, #0
 80031fa:	9303      	str	r3, [sp, #12]
 80031fc:	9102      	str	r1, [sp, #8]
 80031fe:	2300      	movs	r3, #0
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	9200      	str	r2, [sp, #0]
 8003204:	2300      	movs	r3, #0
 8003206:	ee16 2a90 	vmov	r2, s13
 800320a:	2100      	movs	r1, #0
 800320c:	ee17 0a10 	vmov	r0, s14
 8003210:	f7ff f94a 	bl	80024a8 <set_speed>

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <fly+0x864>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	d802      	bhi.n	800322a <fly+0x7e2>
        fly_mode = init;
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <fly+0x868>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
      }

      // Stop if angle too large (crashed), can disable if test with the rig
      if (angle_error_x < -90 || angle_error_x > 90 || angle_error_y < -90 || angle_error_y > 90) {
 800322a:	edd7 7a01 	vldr	s15, [r7, #4]
 800322e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80032b4 <fly+0x86c>
 8003232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	d41b      	bmi.n	8003274 <fly+0x82c>
 800323c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003240:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80032b8 <fly+0x870>
 8003244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324c:	dc12      	bgt.n	8003274 <fly+0x82c>
 800324e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003252:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80032b4 <fly+0x86c>
 8003256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	d409      	bmi.n	8003274 <fly+0x82c>
 8003260:	edd7 7a02 	vldr	s15, [r7, #8]
 8003264:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80032b8 <fly+0x870>
 8003268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	dc00      	bgt.n	8003274 <fly+0x82c>
        fly_mode = init;
      }

      break;
 8003272:	e0c2      	b.n	80033fa <fly+0x9b2>
        fly_mode = init;
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <fly+0x868>)
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
      break;
 800327a:	e0be      	b.n	80033fa <fly+0x9b2>
 800327c:	24001868 	.word	0x24001868
 8003280:	2400187c 	.word	0x2400187c
 8003284:	2400183c 	.word	0x2400183c
 8003288:	24001840 	.word	0x24001840
 800328c:	24001848 	.word	0x24001848
 8003290:	2400185c 	.word	0x2400185c
 8003294:	24001860 	.word	0x24001860
 8003298:	24001884 	.word	0x24001884
 800329c:	2400186c 	.word	0x2400186c
 80032a0:	45960000 	.word	0x45960000
 80032a4:	45160000 	.word	0x45160000
 80032a8:	24001874 	.word	0x24001874
 80032ac:	24001904 	.word	0x24001904
 80032b0:	2400183a 	.word	0x2400183a
 80032b4:	c2b40000 	.word	0xc2b40000
 80032b8:	42b40000 	.word	0x42b40000
//      g_sig4 = MIN_SPEED - 100 + limit(5*g_yaw, 0, 4800);
//      g_sig5 = MIN_SPEED - 100 + limit(5*g_pitch, 0, 4800);
//      g_sig6 = MIN_SPEED - 100 + limit(5*g_pitch, 0, 4800);
//      g_sig7 = MIN_SPEED - 100 + limit(5*g_roll, 0, 4800);
//      g_sig8 = MIN_SPEED - 100 + limit(5*g_roll, 0, 4800);
      g_sig1 = limit(0 + 12*g_throttle, 2000, 4800);
 80032bc:	4b75      	ldr	r3, [pc, #468]	; (8003494 <fly+0xa4c>)
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80032c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ca:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003498 <fly+0xa50>
 80032ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032d2:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800349c <fly+0xa54>
 80032d6:	eddf 0a72 	vldr	s1, [pc, #456]	; 80034a0 <fly+0xa58>
 80032da:	eeb0 0a67 	vmov.f32	s0, s15
 80032de:	f7fe fd7f 	bl	8001de0 <limit>
 80032e2:	eef0 7a40 	vmov.f32	s15, s0
 80032e6:	4b6f      	ldr	r3, [pc, #444]	; (80034a4 <fly+0xa5c>)
 80032e8:	edc3 7a00 	vstr	s15, [r3]
//      g_sig2 = limit(0 + 62*g_throttle, 0, 25000);
      g_sig3 = limit(0 + 12*g_throttle, 2000, 4800);
 80032ec:	4b69      	ldr	r3, [pc, #420]	; (8003494 <fly+0xa4c>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80032f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032fa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003498 <fly+0xa50>
 80032fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003302:	ed9f 1a66 	vldr	s2, [pc, #408]	; 800349c <fly+0xa54>
 8003306:	eddf 0a66 	vldr	s1, [pc, #408]	; 80034a0 <fly+0xa58>
 800330a:	eeb0 0a67 	vmov.f32	s0, s15
 800330e:	f7fe fd67 	bl	8001de0 <limit>
 8003312:	eef0 7a40 	vmov.f32	s15, s0
 8003316:	4b64      	ldr	r3, [pc, #400]	; (80034a8 <fly+0xa60>)
 8003318:	edc3 7a00 	vstr	s15, [r3]
//      g_sig4 = limit(0 + 62*g_throttle, 0, 25000);
      g_sig5 = limit(0 + 12*g_throttle, 2000, 4800);
 800331c:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <fly+0xa4c>)
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800332a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003498 <fly+0xa50>
 800332e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003332:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800349c <fly+0xa54>
 8003336:	eddf 0a5a 	vldr	s1, [pc, #360]	; 80034a0 <fly+0xa58>
 800333a:	eeb0 0a67 	vmov.f32	s0, s15
 800333e:	f7fe fd4f 	bl	8001de0 <limit>
 8003342:	eef0 7a40 	vmov.f32	s15, s0
 8003346:	4b59      	ldr	r3, [pc, #356]	; (80034ac <fly+0xa64>)
 8003348:	edc3 7a00 	vstr	s15, [r3]
//      g_sig6 = limit(0 + 62*g_throttle, 0, 25000);
      g_sig7 = limit(0 + 12*g_throttle, 2000, 4800);
 800334c:	4b51      	ldr	r3, [pc, #324]	; (8003494 <fly+0xa4c>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800335a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003498 <fly+0xa50>
 800335e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003362:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 800349c <fly+0xa54>
 8003366:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80034a0 <fly+0xa58>
 800336a:	eeb0 0a67 	vmov.f32	s0, s15
 800336e:	f7fe fd37 	bl	8001de0 <limit>
 8003372:	eef0 7a40 	vmov.f32	s15, s0
 8003376:	4b4e      	ldr	r3, [pc, #312]	; (80034b0 <fly+0xa68>)
 8003378:	edc3 7a00 	vstr	s15, [r3]
      // Pull down the stick to stop
//      if (g_throttle <= MIN_THROTTLE) {
//        fly_mode = init;
//      }

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4, g_sig5, g_sig6, g_sig7, g_sig8);
 800337c:	4b49      	ldr	r3, [pc, #292]	; (80034a4 <fly+0xa5c>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003386:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <fly+0xa6c>)
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003390:	4b45      	ldr	r3, [pc, #276]	; (80034a8 <fly+0xa60>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <fly+0xa70>)
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	eefc 5ae7 	vcvt.u32.f32	s11, s15
 80033a4:	4b41      	ldr	r3, [pc, #260]	; (80034ac <fly+0xa64>)
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ae:	ee17 2a90 	vmov	r2, s15
 80033b2:	4b42      	ldr	r3, [pc, #264]	; (80034bc <fly+0xa74>)
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033bc:	ee17 1a90 	vmov	r1, s15
 80033c0:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <fly+0xa68>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ca:	ee17 0a90 	vmov	r0, s15
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <fly+0xa78>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033d8:	ee17 3a90 	vmov	r3, s15
 80033dc:	9303      	str	r3, [sp, #12]
 80033de:	9002      	str	r0, [sp, #8]
 80033e0:	9101      	str	r1, [sp, #4]
 80033e2:	9200      	str	r2, [sp, #0]
 80033e4:	ee15 3a90 	vmov	r3, s11
 80033e8:	ee16 2a10 	vmov	r2, s12
 80033ec:	ee16 1a90 	vmov	r1, s13
 80033f0:	ee17 0a10 	vmov	r0, s14
 80033f4:	f7ff f858 	bl	80024a8 <set_speed>
      break;
 80033f8:	bf00      	nop
  monitor[7] = g_sig8;
  monitor[8] = g_sig8;
#endif

#if MONITOR == 6
  monitor[0] = g_mpu6050.angle_x;
 80033fa:	4b32      	ldr	r3, [pc, #200]	; (80034c4 <fly+0xa7c>)
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	4a32      	ldr	r2, [pc, #200]	; (80034c8 <fly+0xa80>)
 8003400:	6013      	str	r3, [r2, #0]
  monitor[1] = g_mpu6050.angle_y;
 8003402:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <fly+0xa7c>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a30      	ldr	r2, [pc, #192]	; (80034c8 <fly+0xa80>)
 8003408:	6053      	str	r3, [r2, #4]
  monitor[2] = g_mpu6050.angle_z;
 800340a:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <fly+0xa7c>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	4a2e      	ldr	r2, [pc, #184]	; (80034c8 <fly+0xa80>)
 8003410:	6093      	str	r3, [r2, #8]
  monitor[3] = g_mpu6050.gx;
 8003412:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <fly+0xa7c>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <fly+0xa80>)
 8003418:	60d3      	str	r3, [r2, #12]
  monitor[4] = g_mpu6050.gy;
 800341a:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <fly+0xa7c>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <fly+0xa80>)
 8003420:	6113      	str	r3, [r2, #16]
  monitor[5] = g_mpu6050.gz;
 8003422:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <fly+0xa7c>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a28      	ldr	r2, [pc, #160]	; (80034c8 <fly+0xa80>)
 8003428:	6153      	str	r3, [r2, #20]
  monitor[6] = ((float)g_ms5611.P/100.0f - 984)*1000;
 800342a:	4b28      	ldr	r3, [pc, #160]	; (80034cc <fly+0xa84>)
 800342c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003436:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034d0 <fly+0xa88>
 800343a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800343e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80034d4 <fly+0xa8c>
 8003442:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003446:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80034d8 <fly+0xa90>
 800344a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <fly+0xa80>)
 8003450:	edc3 7a06 	vstr	s15, [r3, #24]
  monitor[7] = (g_ms5611.fast_pressure - 984)*1000;
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <fly+0xa84>)
 8003456:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 800345a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80034d4 <fly+0xa8c>
 800345e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003462:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80034d8 <fly+0xa90>
 8003466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800346a:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <fly+0xa80>)
 800346c:	edc3 7a07 	vstr	s15, [r3, #28]
  monitor[8] = (g_ms5611.slow_pressure - 984)*1000;
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <fly+0xa84>)
 8003472:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8003476:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80034d4 <fly+0xa8c>
 800347a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800347e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80034d8 <fly+0xa90>
 8003482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <fly+0xa80>)
 8003488:	edc3 7a08 	vstr	s15, [r3, #32]
#endif
}
 800348c:	bf00      	nop
 800348e:	3728      	adds	r7, #40	; 0x28
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	24001904 	.word	0x24001904
 8003498:	00000000 	.word	0x00000000
 800349c:	45960000 	.word	0x45960000
 80034a0:	44fa0000 	.word	0x44fa0000
 80034a4:	2400186c 	.word	0x2400186c
 80034a8:	24001874 	.word	0x24001874
 80034ac:	2400187c 	.word	0x2400187c
 80034b0:	24001884 	.word	0x24001884
 80034b4:	24001870 	.word	0x24001870
 80034b8:	24001878 	.word	0x24001878
 80034bc:	24001880 	.word	0x24001880
 80034c0:	24001888 	.word	0x24001888
 80034c4:	24001400 	.word	0x24001400
 80034c8:	24001924 	.word	0x24001924
 80034cc:	24001530 	.word	0x24001530
 80034d0:	42c80000 	.word	0x42c80000
 80034d4:	44760000 	.word	0x44760000
 80034d8:	447a0000 	.word	0x447a0000

080034dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <_sbrk+0x5c>)
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <_sbrk+0x60>)
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f0:	4b13      	ldr	r3, [pc, #76]	; (8003540 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <_sbrk+0x64>)
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <_sbrk+0x68>)
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <_sbrk+0x64>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	429a      	cmp	r2, r3
 800350a:	d207      	bcs.n	800351c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800350c:	f009 f8c8 	bl	800c6a0 <__errno>
 8003510:	4603      	mov	r3, r0
 8003512:	220c      	movs	r2, #12
 8003514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800351a:	e009      	b.n	8003530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <_sbrk+0x64>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <_sbrk+0x64>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <_sbrk+0x64>)
 800352c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	24080000 	.word	0x24080000
 800353c:	00000400 	.word	0x00000400
 8003540:	24001948 	.word	0x24001948
 8003544:	24001960 	.word	0x24001960

08003548 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <SystemInit+0xec>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	4a38      	ldr	r2, [pc, #224]	; (8003634 <SystemInit+0xec>)
 8003554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800355c:	4b36      	ldr	r3, [pc, #216]	; (8003638 <SystemInit+0xf0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2b06      	cmp	r3, #6
 8003566:	d807      	bhi.n	8003578 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003568:	4b33      	ldr	r3, [pc, #204]	; (8003638 <SystemInit+0xf0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 030f 	bic.w	r3, r3, #15
 8003570:	4a31      	ldr	r2, [pc, #196]	; (8003638 <SystemInit+0xf0>)
 8003572:	f043 0307 	orr.w	r3, r3, #7
 8003576:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <SystemInit+0xf4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a2f      	ldr	r2, [pc, #188]	; (800363c <SystemInit+0xf4>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003584:	4b2d      	ldr	r3, [pc, #180]	; (800363c <SystemInit+0xf4>)
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <SystemInit+0xf4>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	492b      	ldr	r1, [pc, #172]	; (800363c <SystemInit+0xf4>)
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <SystemInit+0xf8>)
 8003592:	4013      	ands	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003596:	4b28      	ldr	r3, [pc, #160]	; (8003638 <SystemInit+0xf0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035a2:	4b25      	ldr	r3, [pc, #148]	; (8003638 <SystemInit+0xf0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 030f 	bic.w	r3, r3, #15
 80035aa:	4a23      	ldr	r2, [pc, #140]	; (8003638 <SystemInit+0xf0>)
 80035ac:	f043 0307 	orr.w	r3, r3, #7
 80035b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <SystemInit+0xf4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <SystemInit+0xf4>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80035be:	4b1f      	ldr	r3, [pc, #124]	; (800363c <SystemInit+0xf4>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <SystemInit+0xf4>)
 80035c6:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <SystemInit+0xfc>)
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <SystemInit+0xf4>)
 80035cc:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <SystemInit+0x100>)
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <SystemInit+0xf4>)
 80035d2:	4a1e      	ldr	r2, [pc, #120]	; (800364c <SystemInit+0x104>)
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80035d6:	4b19      	ldr	r3, [pc, #100]	; (800363c <SystemInit+0xf4>)
 80035d8:	2200      	movs	r2, #0
 80035da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <SystemInit+0xf4>)
 80035de:	4a1b      	ldr	r2, [pc, #108]	; (800364c <SystemInit+0x104>)
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80035e2:	4b16      	ldr	r3, [pc, #88]	; (800363c <SystemInit+0xf4>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <SystemInit+0xf4>)
 80035ea:	4a18      	ldr	r2, [pc, #96]	; (800364c <SystemInit+0x104>)
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <SystemInit+0xf4>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <SystemInit+0xf4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a10      	ldr	r2, [pc, #64]	; (800363c <SystemInit+0xf4>)
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <SystemInit+0xf4>)
 8003602:	2200      	movs	r2, #0
 8003604:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <SystemInit+0x108>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <SystemInit+0x10c>)
 800360c:	4013      	ands	r3, r2
 800360e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003612:	d202      	bcs.n	800361a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003614:	4b10      	ldr	r3, [pc, #64]	; (8003658 <SystemInit+0x110>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <SystemInit+0x114>)
 800361c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003620:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <SystemInit+0xec>)
 8003624:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003628:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00
 8003638:	52002000 	.word	0x52002000
 800363c:	58024400 	.word	0x58024400
 8003640:	eaf6ed7f 	.word	0xeaf6ed7f
 8003644:	02020200 	.word	0x02020200
 8003648:	01ff0000 	.word	0x01ff0000
 800364c:	01010280 	.word	0x01010280
 8003650:	5c001000 	.word	0x5c001000
 8003654:	ffff0000 	.word	0xffff0000
 8003658:	51008108 	.word	0x51008108
 800365c:	52004000 	.word	0x52004000

08003660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003698 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003664:	f7ff ff70 	bl	8003548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003668:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800366a:	e003      	b.n	8003674 <LoopCopyDataInit>

0800366c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800366e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003670:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003672:	3104      	adds	r1, #4

08003674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003674:	480a      	ldr	r0, [pc, #40]	; (80036a0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003678:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800367a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800367c:	d3f6      	bcc.n	800366c <CopyDataInit>
  ldr  r2, =_sbss
 800367e:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003680:	e002      	b.n	8003688 <LoopFillZerobss>

08003682 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003682:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003684:	f842 3b04 	str.w	r3, [r2], #4

08003688 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800368a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800368c:	d3f9      	bcc.n	8003682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800368e:	f009 f80d 	bl	800c6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003692:	f7fd f94b 	bl	800092c <main>
  bx  lr    
 8003696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003698:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800369c:	0800ffd8 	.word	0x0800ffd8
  ldr  r0, =_sdata
 80036a0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80036a4:	2400009c 	.word	0x2400009c
  ldr  r2, =_sbss
 80036a8:	240000a0 	.word	0x240000a0
  ldr  r3, = _ebss
 80036ac:	24001960 	.word	0x24001960

080036b0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b0:	e7fe      	b.n	80036b0 <ADC3_IRQHandler>
	...

080036b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ba:	2003      	movs	r0, #3
 80036bc:	f000 f98c 	bl	80039d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036c0:	f002 fe4e 	bl	8006360 <HAL_RCC_GetSysClockFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_Init+0x68>)
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	4913      	ldr	r1, [pc, #76]	; (8003720 <HAL_Init+0x6c>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
 80036dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_Init+0x68>)
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	4a0e      	ldr	r2, [pc, #56]	; (8003720 <HAL_Init+0x6c>)
 80036e8:	5cd3      	ldrb	r3, [r2, r3]
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
 80036f4:	4a0b      	ldr	r2, [pc, #44]	; (8003724 <HAL_Init+0x70>)
 80036f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_Init+0x74>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036fe:	2000      	movs	r0, #0
 8003700:	f000 f814 	bl	800372c <HAL_InitTick>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e002      	b.n	8003714 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800370e:	f7fe fb91 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	58024400 	.word	0x58024400
 8003720:	0800e4c8 	.word	0x0800e4c8
 8003724:	2400002c 	.word	0x2400002c
 8003728:	24000028 	.word	0x24000028

0800372c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003734:	4b15      	ldr	r3, [pc, #84]	; (800378c <HAL_InitTick+0x60>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e021      	b.n	8003784 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_InitTick+0x64>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_InitTick+0x60>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4619      	mov	r1, r3
 800374a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800374e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f971 	bl	8003a3e <HAL_SYSTICK_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e00e      	b.n	8003784 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d80a      	bhi.n	8003782 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800376c:	2200      	movs	r2, #0
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003774:	f000 f93b 	bl	80039ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003778:	4a06      	ldr	r2, [pc, #24]	; (8003794 <HAL_InitTick+0x68>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	24000034 	.word	0x24000034
 8003790:	24000028 	.word	0x24000028
 8003794:	24000030 	.word	0x24000030

08003798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_IncTick+0x20>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_IncTick+0x24>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4413      	add	r3, r2
 80037a8:	4a04      	ldr	r2, [pc, #16]	; (80037bc <HAL_IncTick+0x24>)
 80037aa:	6013      	str	r3, [r2, #0]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	24000034 	.word	0x24000034
 80037bc:	2400194c 	.word	0x2400194c

080037c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return uwTick;
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <HAL_GetTick+0x14>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	2400194c 	.word	0x2400194c

080037d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037e0:	f7ff ffee 	bl	80037c0 <HAL_GetTick>
 80037e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f0:	d005      	beq.n	80037fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <HAL_Delay+0x44>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037fe:	bf00      	nop
 8003800:	f7ff ffde 	bl	80037c0 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	429a      	cmp	r2, r3
 800380e:	d8f7      	bhi.n	8003800 <HAL_Delay+0x28>
  {
  }
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	24000034 	.word	0x24000034

08003820 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_GetREVID+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0c1b      	lsrs	r3, r3, #16
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	5c001000 	.word	0x5c001000

08003838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <__NVIC_SetPriorityGrouping+0x40>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003854:	4013      	ands	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <__NVIC_SetPriorityGrouping+0x44>)
 8003862:	4313      	orrs	r3, r2
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <__NVIC_SetPriorityGrouping+0x40>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00
 800387c:	05fa0000 	.word	0x05fa0000

08003880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <__NVIC_GetPriorityGrouping+0x18>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	f003 0307 	and.w	r3, r3, #7
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	db0b      	blt.n	80038c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	f003 021f 	and.w	r2, r3, #31
 80038b4:	4907      	ldr	r1, [pc, #28]	; (80038d4 <__NVIC_EnableIRQ+0x38>)
 80038b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2001      	movs	r0, #1
 80038be:	fa00 f202 	lsl.w	r2, r0, r2
 80038c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	e000e100 	.word	0xe000e100

080038d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	6039      	str	r1, [r7, #0]
 80038e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	db0a      	blt.n	8003902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	490c      	ldr	r1, [pc, #48]	; (8003924 <__NVIC_SetPriority+0x4c>)
 80038f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038f6:	0112      	lsls	r2, r2, #4
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	440b      	add	r3, r1
 80038fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003900:	e00a      	b.n	8003918 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4908      	ldr	r1, [pc, #32]	; (8003928 <__NVIC_SetPriority+0x50>)
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	3b04      	subs	r3, #4
 8003910:	0112      	lsls	r2, r2, #4
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	440b      	add	r3, r1
 8003916:	761a      	strb	r2, [r3, #24]
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000e100 	.word	0xe000e100
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800392c:	b480      	push	{r7}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f1c3 0307 	rsb	r3, r3, #7
 8003946:	2b04      	cmp	r3, #4
 8003948:	bf28      	it	cs
 800394a:	2304      	movcs	r3, #4
 800394c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3304      	adds	r3, #4
 8003952:	2b06      	cmp	r3, #6
 8003954:	d902      	bls.n	800395c <NVIC_EncodePriority+0x30>
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3b03      	subs	r3, #3
 800395a:	e000      	b.n	800395e <NVIC_EncodePriority+0x32>
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43da      	mvns	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	401a      	ands	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	fa01 f303 	lsl.w	r3, r1, r3
 800397e:	43d9      	mvns	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003984:	4313      	orrs	r3, r2
         );
}
 8003986:	4618      	mov	r0, r3
 8003988:	3724      	adds	r7, #36	; 0x24
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a4:	d301      	bcc.n	80039aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a6:	2301      	movs	r3, #1
 80039a8:	e00f      	b.n	80039ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <SysTick_Config+0x40>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b2:	210f      	movs	r1, #15
 80039b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b8:	f7ff ff8e 	bl	80038d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <SysTick_Config+0x40>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <SysTick_Config+0x40>)
 80039c4:	2207      	movs	r2, #7
 80039c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	e000e010 	.word	0xe000e010

080039d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff29 	bl	8003838 <__NVIC_SetPriorityGrouping>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039fc:	f7ff ff40 	bl	8003880 <__NVIC_GetPriorityGrouping>
 8003a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	6978      	ldr	r0, [r7, #20]
 8003a08:	f7ff ff90 	bl	800392c <NVIC_EncodePriority>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff5f 	bl	80038d8 <__NVIC_SetPriority>
}
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff33 	bl	800389c <__NVIC_EnableIRQ>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ffa4 	bl	8003994 <SysTick_Config>
 8003a4c:	4603      	mov	r3, r0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003a60:	f7ff feae 	bl	80037c0 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e2dc      	b.n	800402a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d008      	beq.n	8003a8e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2280      	movs	r2, #128	; 0x80
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e2cd      	b.n	800402a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a76      	ldr	r2, [pc, #472]	; (8003c6c <HAL_DMA_Abort+0x214>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d04a      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a74      	ldr	r2, [pc, #464]	; (8003c70 <HAL_DMA_Abort+0x218>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d045      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a73      	ldr	r2, [pc, #460]	; (8003c74 <HAL_DMA_Abort+0x21c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d040      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a71      	ldr	r2, [pc, #452]	; (8003c78 <HAL_DMA_Abort+0x220>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d03b      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a70      	ldr	r2, [pc, #448]	; (8003c7c <HAL_DMA_Abort+0x224>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d036      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6e      	ldr	r2, [pc, #440]	; (8003c80 <HAL_DMA_Abort+0x228>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d031      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6d      	ldr	r2, [pc, #436]	; (8003c84 <HAL_DMA_Abort+0x22c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d02c      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6b      	ldr	r2, [pc, #428]	; (8003c88 <HAL_DMA_Abort+0x230>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d027      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6a      	ldr	r2, [pc, #424]	; (8003c8c <HAL_DMA_Abort+0x234>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d022      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <HAL_DMA_Abort+0x238>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01d      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <HAL_DMA_Abort+0x23c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <HAL_DMA_Abort+0x240>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <HAL_DMA_Abort+0x244>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a62      	ldr	r2, [pc, #392]	; (8003ca0 <HAL_DMA_Abort+0x248>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a61      	ldr	r2, [pc, #388]	; (8003ca4 <HAL_DMA_Abort+0x24c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_DMA_Abort+0xd6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5f      	ldr	r2, [pc, #380]	; (8003ca8 <HAL_DMA_Abort+0x250>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_DMA_Abort+0xda>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_DMA_Abort+0xdc>
 8003b32:	2300      	movs	r3, #0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d013      	beq.n	8003b60 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 021e 	bic.w	r2, r2, #30
 8003b46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b56:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e00a      	b.n	8003b76 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 020e 	bic.w	r2, r2, #14
 8003b6e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a3c      	ldr	r2, [pc, #240]	; (8003c6c <HAL_DMA_Abort+0x214>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d072      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <HAL_DMA_Abort+0x218>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d06d      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a39      	ldr	r2, [pc, #228]	; (8003c74 <HAL_DMA_Abort+0x21c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d068      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a37      	ldr	r2, [pc, #220]	; (8003c78 <HAL_DMA_Abort+0x220>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d063      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a36      	ldr	r2, [pc, #216]	; (8003c7c <HAL_DMA_Abort+0x224>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d05e      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <HAL_DMA_Abort+0x228>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d059      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <HAL_DMA_Abort+0x22c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d054      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <HAL_DMA_Abort+0x230>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04f      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a30      	ldr	r2, [pc, #192]	; (8003c8c <HAL_DMA_Abort+0x234>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d04a      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2e      	ldr	r2, [pc, #184]	; (8003c90 <HAL_DMA_Abort+0x238>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d045      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <HAL_DMA_Abort+0x23c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d040      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2b      	ldr	r2, [pc, #172]	; (8003c98 <HAL_DMA_Abort+0x240>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2a      	ldr	r2, [pc, #168]	; (8003c9c <HAL_DMA_Abort+0x244>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d036      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a28      	ldr	r2, [pc, #160]	; (8003ca0 <HAL_DMA_Abort+0x248>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <HAL_DMA_Abort+0x24c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d02c      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <HAL_DMA_Abort+0x250>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d027      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a24      	ldr	r2, [pc, #144]	; (8003cac <HAL_DMA_Abort+0x254>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <HAL_DMA_Abort+0x258>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <HAL_DMA_Abort+0x25c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <HAL_DMA_Abort+0x260>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <HAL_DMA_Abort+0x264>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <HAL_DMA_Abort+0x268>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1b      	ldr	r2, [pc, #108]	; (8003cc4 <HAL_DMA_Abort+0x26c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_DMA_Abort+0x20e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_DMA_Abort+0x270>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d132      	bne.n	8003ccc <HAL_DMA_Abort+0x274>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e031      	b.n	8003cce <HAL_DMA_Abort+0x276>
 8003c6a:	bf00      	nop
 8003c6c:	40020010 	.word	0x40020010
 8003c70:	40020028 	.word	0x40020028
 8003c74:	40020040 	.word	0x40020040
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	40020070 	.word	0x40020070
 8003c80:	40020088 	.word	0x40020088
 8003c84:	400200a0 	.word	0x400200a0
 8003c88:	400200b8 	.word	0x400200b8
 8003c8c:	40020410 	.word	0x40020410
 8003c90:	40020428 	.word	0x40020428
 8003c94:	40020440 	.word	0x40020440
 8003c98:	40020458 	.word	0x40020458
 8003c9c:	40020470 	.word	0x40020470
 8003ca0:	40020488 	.word	0x40020488
 8003ca4:	400204a0 	.word	0x400204a0
 8003ca8:	400204b8 	.word	0x400204b8
 8003cac:	58025408 	.word	0x58025408
 8003cb0:	5802541c 	.word	0x5802541c
 8003cb4:	58025430 	.word	0x58025430
 8003cb8:	58025444 	.word	0x58025444
 8003cbc:	58025458 	.word	0x58025458
 8003cc0:	5802546c 	.word	0x5802546c
 8003cc4:	58025480 	.word	0x58025480
 8003cc8:	58025494 	.word	0x58025494
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ce0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a6d      	ldr	r2, [pc, #436]	; (8003e9c <HAL_DMA_Abort+0x444>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d04a      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6b      	ldr	r2, [pc, #428]	; (8003ea0 <HAL_DMA_Abort+0x448>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d045      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6a      	ldr	r2, [pc, #424]	; (8003ea4 <HAL_DMA_Abort+0x44c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d040      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a68      	ldr	r2, [pc, #416]	; (8003ea8 <HAL_DMA_Abort+0x450>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d03b      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a67      	ldr	r2, [pc, #412]	; (8003eac <HAL_DMA_Abort+0x454>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d036      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a65      	ldr	r2, [pc, #404]	; (8003eb0 <HAL_DMA_Abort+0x458>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d031      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a64      	ldr	r2, [pc, #400]	; (8003eb4 <HAL_DMA_Abort+0x45c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d02c      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a62      	ldr	r2, [pc, #392]	; (8003eb8 <HAL_DMA_Abort+0x460>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d027      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a61      	ldr	r2, [pc, #388]	; (8003ebc <HAL_DMA_Abort+0x464>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d022      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a5f      	ldr	r2, [pc, #380]	; (8003ec0 <HAL_DMA_Abort+0x468>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01d      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a5e      	ldr	r2, [pc, #376]	; (8003ec4 <HAL_DMA_Abort+0x46c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d018      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5c      	ldr	r2, [pc, #368]	; (8003ec8 <HAL_DMA_Abort+0x470>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a5b      	ldr	r2, [pc, #364]	; (8003ecc <HAL_DMA_Abort+0x474>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a59      	ldr	r2, [pc, #356]	; (8003ed0 <HAL_DMA_Abort+0x478>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a58      	ldr	r2, [pc, #352]	; (8003ed4 <HAL_DMA_Abort+0x47c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_DMA_Abort+0x32a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a56      	ldr	r2, [pc, #344]	; (8003ed8 <HAL_DMA_Abort+0x480>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d108      	bne.n	8003d94 <HAL_DMA_Abort+0x33c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e007      	b.n	8003da4 <HAL_DMA_Abort+0x34c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003da4:	e013      	b.n	8003dce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003da6:	f7ff fd0b 	bl	80037c0 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b05      	cmp	r3, #5
 8003db2:	d90c      	bls.n	8003dce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e12d      	b.n	800402a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e5      	bne.n	8003da6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <HAL_DMA_Abort+0x444>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d04a      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <HAL_DMA_Abort+0x448>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d045      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2c      	ldr	r2, [pc, #176]	; (8003ea4 <HAL_DMA_Abort+0x44c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d040      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <HAL_DMA_Abort+0x450>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d03b      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a29      	ldr	r2, [pc, #164]	; (8003eac <HAL_DMA_Abort+0x454>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d036      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <HAL_DMA_Abort+0x458>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d031      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <HAL_DMA_Abort+0x45c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d02c      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <HAL_DMA_Abort+0x460>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d027      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <HAL_DMA_Abort+0x464>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <HAL_DMA_Abort+0x468>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a20      	ldr	r2, [pc, #128]	; (8003ec4 <HAL_DMA_Abort+0x46c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_DMA_Abort+0x470>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <HAL_DMA_Abort+0x474>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <HAL_DMA_Abort+0x478>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <HAL_DMA_Abort+0x47c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_DMA_Abort+0x422>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_DMA_Abort+0x480>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_DMA_Abort+0x426>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_DMA_Abort+0x428>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d02b      	beq.n	8003edc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	223f      	movs	r2, #63	; 0x3f
 8003e94:	409a      	lsls	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	e02a      	b.n	8003ef2 <HAL_DMA_Abort+0x49a>
 8003e9c:	40020010 	.word	0x40020010
 8003ea0:	40020028 	.word	0x40020028
 8003ea4:	40020040 	.word	0x40020040
 8003ea8:	40020058 	.word	0x40020058
 8003eac:	40020070 	.word	0x40020070
 8003eb0:	40020088 	.word	0x40020088
 8003eb4:	400200a0 	.word	0x400200a0
 8003eb8:	400200b8 	.word	0x400200b8
 8003ebc:	40020410 	.word	0x40020410
 8003ec0:	40020428 	.word	0x40020428
 8003ec4:	40020440 	.word	0x40020440
 8003ec8:	40020458 	.word	0x40020458
 8003ecc:	40020470 	.word	0x40020470
 8003ed0:	40020488 	.word	0x40020488
 8003ed4:	400204a0 	.word	0x400204a0
 8003ed8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	2201      	movs	r2, #1
 8003eec:	409a      	lsls	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a4f      	ldr	r2, [pc, #316]	; (8004034 <HAL_DMA_Abort+0x5dc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d072      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a4d      	ldr	r2, [pc, #308]	; (8004038 <HAL_DMA_Abort+0x5e0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d06d      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4c      	ldr	r2, [pc, #304]	; (800403c <HAL_DMA_Abort+0x5e4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d068      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a4a      	ldr	r2, [pc, #296]	; (8004040 <HAL_DMA_Abort+0x5e8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d063      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a49      	ldr	r2, [pc, #292]	; (8004044 <HAL_DMA_Abort+0x5ec>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d05e      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a47      	ldr	r2, [pc, #284]	; (8004048 <HAL_DMA_Abort+0x5f0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d059      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a46      	ldr	r2, [pc, #280]	; (800404c <HAL_DMA_Abort+0x5f4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d054      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a44      	ldr	r2, [pc, #272]	; (8004050 <HAL_DMA_Abort+0x5f8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d04f      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a43      	ldr	r2, [pc, #268]	; (8004054 <HAL_DMA_Abort+0x5fc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d04a      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a41      	ldr	r2, [pc, #260]	; (8004058 <HAL_DMA_Abort+0x600>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d045      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a40      	ldr	r2, [pc, #256]	; (800405c <HAL_DMA_Abort+0x604>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d040      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3e      	ldr	r2, [pc, #248]	; (8004060 <HAL_DMA_Abort+0x608>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d03b      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3d      	ldr	r2, [pc, #244]	; (8004064 <HAL_DMA_Abort+0x60c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d036      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3b      	ldr	r2, [pc, #236]	; (8004068 <HAL_DMA_Abort+0x610>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3a      	ldr	r2, [pc, #232]	; (800406c <HAL_DMA_Abort+0x614>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d02c      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a38      	ldr	r2, [pc, #224]	; (8004070 <HAL_DMA_Abort+0x618>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d027      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a37      	ldr	r2, [pc, #220]	; (8004074 <HAL_DMA_Abort+0x61c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d022      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a35      	ldr	r2, [pc, #212]	; (8004078 <HAL_DMA_Abort+0x620>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01d      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a34      	ldr	r2, [pc, #208]	; (800407c <HAL_DMA_Abort+0x624>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d018      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a32      	ldr	r2, [pc, #200]	; (8004080 <HAL_DMA_Abort+0x628>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a31      	ldr	r2, [pc, #196]	; (8004084 <HAL_DMA_Abort+0x62c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2f      	ldr	r2, [pc, #188]	; (8004088 <HAL_DMA_Abort+0x630>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2e      	ldr	r2, [pc, #184]	; (800408c <HAL_DMA_Abort+0x634>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_DMA_Abort+0x58a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <HAL_DMA_Abort+0x638>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_DMA_Abort+0x58e>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_DMA_Abort+0x590>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ff4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00c      	beq.n	8004018 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800400c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004016:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40020010 	.word	0x40020010
 8004038:	40020028 	.word	0x40020028
 800403c:	40020040 	.word	0x40020040
 8004040:	40020058 	.word	0x40020058
 8004044:	40020070 	.word	0x40020070
 8004048:	40020088 	.word	0x40020088
 800404c:	400200a0 	.word	0x400200a0
 8004050:	400200b8 	.word	0x400200b8
 8004054:	40020410 	.word	0x40020410
 8004058:	40020428 	.word	0x40020428
 800405c:	40020440 	.word	0x40020440
 8004060:	40020458 	.word	0x40020458
 8004064:	40020470 	.word	0x40020470
 8004068:	40020488 	.word	0x40020488
 800406c:	400204a0 	.word	0x400204a0
 8004070:	400204b8 	.word	0x400204b8
 8004074:	58025408 	.word	0x58025408
 8004078:	5802541c 	.word	0x5802541c
 800407c:	58025430 	.word	0x58025430
 8004080:	58025444 	.word	0x58025444
 8004084:	58025458 	.word	0x58025458
 8004088:	5802546c 	.word	0x5802546c
 800408c:	58025480 	.word	0x58025480
 8004090:	58025494 	.word	0x58025494

08004094 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e237      	b.n	8004516 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d004      	beq.n	80040bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2280      	movs	r2, #128	; 0x80
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e22c      	b.n	8004516 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a5c      	ldr	r2, [pc, #368]	; (8004234 <HAL_DMA_Abort_IT+0x1a0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a5b      	ldr	r2, [pc, #364]	; (8004238 <HAL_DMA_Abort_IT+0x1a4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d045      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a59      	ldr	r2, [pc, #356]	; (800423c <HAL_DMA_Abort_IT+0x1a8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d040      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a58      	ldr	r2, [pc, #352]	; (8004240 <HAL_DMA_Abort_IT+0x1ac>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03b      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a56      	ldr	r2, [pc, #344]	; (8004244 <HAL_DMA_Abort_IT+0x1b0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d036      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a55      	ldr	r2, [pc, #340]	; (8004248 <HAL_DMA_Abort_IT+0x1b4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d031      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a53      	ldr	r2, [pc, #332]	; (800424c <HAL_DMA_Abort_IT+0x1b8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02c      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a52      	ldr	r2, [pc, #328]	; (8004250 <HAL_DMA_Abort_IT+0x1bc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d027      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a50      	ldr	r2, [pc, #320]	; (8004254 <HAL_DMA_Abort_IT+0x1c0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a4f      	ldr	r2, [pc, #316]	; (8004258 <HAL_DMA_Abort_IT+0x1c4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a4d      	ldr	r2, [pc, #308]	; (800425c <HAL_DMA_Abort_IT+0x1c8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4c      	ldr	r2, [pc, #304]	; (8004260 <HAL_DMA_Abort_IT+0x1cc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_DMA_Abort_IT+0x1d0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a49      	ldr	r2, [pc, #292]	; (8004268 <HAL_DMA_Abort_IT+0x1d4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a47      	ldr	r2, [pc, #284]	; (800426c <HAL_DMA_Abort_IT+0x1d8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_DMA_Abort_IT+0xc8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a46      	ldr	r2, [pc, #280]	; (8004270 <HAL_DMA_Abort_IT+0x1dc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_DMA_Abort_IT+0xcc>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_DMA_Abort_IT+0xce>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8086 	beq.w	8004274 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2204      	movs	r2, #4
 800416c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2f      	ldr	r2, [pc, #188]	; (8004234 <HAL_DMA_Abort_IT+0x1a0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d04a      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2e      	ldr	r2, [pc, #184]	; (8004238 <HAL_DMA_Abort_IT+0x1a4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d045      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2c      	ldr	r2, [pc, #176]	; (800423c <HAL_DMA_Abort_IT+0x1a8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d040      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <HAL_DMA_Abort_IT+0x1ac>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d03b      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a29      	ldr	r2, [pc, #164]	; (8004244 <HAL_DMA_Abort_IT+0x1b0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d036      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a28      	ldr	r2, [pc, #160]	; (8004248 <HAL_DMA_Abort_IT+0x1b4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d031      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a26      	ldr	r2, [pc, #152]	; (800424c <HAL_DMA_Abort_IT+0x1b8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d02c      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a25      	ldr	r2, [pc, #148]	; (8004250 <HAL_DMA_Abort_IT+0x1bc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d027      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a23      	ldr	r2, [pc, #140]	; (8004254 <HAL_DMA_Abort_IT+0x1c0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d022      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_DMA_Abort_IT+0x1c4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d01d      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a20      	ldr	r2, [pc, #128]	; (800425c <HAL_DMA_Abort_IT+0x1c8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d018      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <HAL_DMA_Abort_IT+0x1cc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d013      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_DMA_Abort_IT+0x1d0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00e      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <HAL_DMA_Abort_IT+0x1d4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1a      	ldr	r2, [pc, #104]	; (800426c <HAL_DMA_Abort_IT+0x1d8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d004      	beq.n	8004210 <HAL_DMA_Abort_IT+0x17c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a19      	ldr	r2, [pc, #100]	; (8004270 <HAL_DMA_Abort_IT+0x1dc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d108      	bne.n	8004222 <HAL_DMA_Abort_IT+0x18e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e178      	b.n	8004514 <HAL_DMA_Abort_IT+0x480>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e16f      	b.n	8004514 <HAL_DMA_Abort_IT+0x480>
 8004234:	40020010 	.word	0x40020010
 8004238:	40020028 	.word	0x40020028
 800423c:	40020040 	.word	0x40020040
 8004240:	40020058 	.word	0x40020058
 8004244:	40020070 	.word	0x40020070
 8004248:	40020088 	.word	0x40020088
 800424c:	400200a0 	.word	0x400200a0
 8004250:	400200b8 	.word	0x400200b8
 8004254:	40020410 	.word	0x40020410
 8004258:	40020428 	.word	0x40020428
 800425c:	40020440 	.word	0x40020440
 8004260:	40020458 	.word	0x40020458
 8004264:	40020470 	.word	0x40020470
 8004268:	40020488 	.word	0x40020488
 800426c:	400204a0 	.word	0x400204a0
 8004270:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 020e 	bic.w	r2, r2, #14
 8004282:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a6c      	ldr	r2, [pc, #432]	; (800443c <HAL_DMA_Abort_IT+0x3a8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d04a      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a6b      	ldr	r2, [pc, #428]	; (8004440 <HAL_DMA_Abort_IT+0x3ac>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d045      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a69      	ldr	r2, [pc, #420]	; (8004444 <HAL_DMA_Abort_IT+0x3b0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d040      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a68      	ldr	r2, [pc, #416]	; (8004448 <HAL_DMA_Abort_IT+0x3b4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d03b      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a66      	ldr	r2, [pc, #408]	; (800444c <HAL_DMA_Abort_IT+0x3b8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d036      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a65      	ldr	r2, [pc, #404]	; (8004450 <HAL_DMA_Abort_IT+0x3bc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d031      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a63      	ldr	r2, [pc, #396]	; (8004454 <HAL_DMA_Abort_IT+0x3c0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d02c      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a62      	ldr	r2, [pc, #392]	; (8004458 <HAL_DMA_Abort_IT+0x3c4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d027      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a60      	ldr	r2, [pc, #384]	; (800445c <HAL_DMA_Abort_IT+0x3c8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d022      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a5f      	ldr	r2, [pc, #380]	; (8004460 <HAL_DMA_Abort_IT+0x3cc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d01d      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a5d      	ldr	r2, [pc, #372]	; (8004464 <HAL_DMA_Abort_IT+0x3d0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a5c      	ldr	r2, [pc, #368]	; (8004468 <HAL_DMA_Abort_IT+0x3d4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a5a      	ldr	r2, [pc, #360]	; (800446c <HAL_DMA_Abort_IT+0x3d8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a59      	ldr	r2, [pc, #356]	; (8004470 <HAL_DMA_Abort_IT+0x3dc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a57      	ldr	r2, [pc, #348]	; (8004474 <HAL_DMA_Abort_IT+0x3e0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_DMA_Abort_IT+0x290>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a56      	ldr	r2, [pc, #344]	; (8004478 <HAL_DMA_Abort_IT+0x3e4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d108      	bne.n	8004336 <HAL_DMA_Abort_IT+0x2a2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e007      	b.n	8004346 <HAL_DMA_Abort_IT+0x2b2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a3c      	ldr	r2, [pc, #240]	; (800443c <HAL_DMA_Abort_IT+0x3a8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d072      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a3a      	ldr	r2, [pc, #232]	; (8004440 <HAL_DMA_Abort_IT+0x3ac>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d06d      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a39      	ldr	r2, [pc, #228]	; (8004444 <HAL_DMA_Abort_IT+0x3b0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d068      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a37      	ldr	r2, [pc, #220]	; (8004448 <HAL_DMA_Abort_IT+0x3b4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d063      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a36      	ldr	r2, [pc, #216]	; (800444c <HAL_DMA_Abort_IT+0x3b8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d05e      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a34      	ldr	r2, [pc, #208]	; (8004450 <HAL_DMA_Abort_IT+0x3bc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d059      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a33      	ldr	r2, [pc, #204]	; (8004454 <HAL_DMA_Abort_IT+0x3c0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d054      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a31      	ldr	r2, [pc, #196]	; (8004458 <HAL_DMA_Abort_IT+0x3c4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d04f      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a30      	ldr	r2, [pc, #192]	; (800445c <HAL_DMA_Abort_IT+0x3c8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d04a      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a2e      	ldr	r2, [pc, #184]	; (8004460 <HAL_DMA_Abort_IT+0x3cc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d045      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2d      	ldr	r2, [pc, #180]	; (8004464 <HAL_DMA_Abort_IT+0x3d0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d040      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <HAL_DMA_Abort_IT+0x3d4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d03b      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2a      	ldr	r2, [pc, #168]	; (800446c <HAL_DMA_Abort_IT+0x3d8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d036      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a28      	ldr	r2, [pc, #160]	; (8004470 <HAL_DMA_Abort_IT+0x3dc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d031      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a27      	ldr	r2, [pc, #156]	; (8004474 <HAL_DMA_Abort_IT+0x3e0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d02c      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a25      	ldr	r2, [pc, #148]	; (8004478 <HAL_DMA_Abort_IT+0x3e4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d027      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a24      	ldr	r2, [pc, #144]	; (800447c <HAL_DMA_Abort_IT+0x3e8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d022      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a22      	ldr	r2, [pc, #136]	; (8004480 <HAL_DMA_Abort_IT+0x3ec>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01d      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a21      	ldr	r2, [pc, #132]	; (8004484 <HAL_DMA_Abort_IT+0x3f0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d018      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <HAL_DMA_Abort_IT+0x3f4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a1e      	ldr	r2, [pc, #120]	; (800448c <HAL_DMA_Abort_IT+0x3f8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00e      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <HAL_DMA_Abort_IT+0x3fc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d009      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <HAL_DMA_Abort_IT+0x400>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d004      	beq.n	8004436 <HAL_DMA_Abort_IT+0x3a2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a19      	ldr	r2, [pc, #100]	; (8004498 <HAL_DMA_Abort_IT+0x404>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d132      	bne.n	800449c <HAL_DMA_Abort_IT+0x408>
 8004436:	2301      	movs	r3, #1
 8004438:	e031      	b.n	800449e <HAL_DMA_Abort_IT+0x40a>
 800443a:	bf00      	nop
 800443c:	40020010 	.word	0x40020010
 8004440:	40020028 	.word	0x40020028
 8004444:	40020040 	.word	0x40020040
 8004448:	40020058 	.word	0x40020058
 800444c:	40020070 	.word	0x40020070
 8004450:	40020088 	.word	0x40020088
 8004454:	400200a0 	.word	0x400200a0
 8004458:	400200b8 	.word	0x400200b8
 800445c:	40020410 	.word	0x40020410
 8004460:	40020428 	.word	0x40020428
 8004464:	40020440 	.word	0x40020440
 8004468:	40020458 	.word	0x40020458
 800446c:	40020470 	.word	0x40020470
 8004470:	40020488 	.word	0x40020488
 8004474:	400204a0 	.word	0x400204a0
 8004478:	400204b8 	.word	0x400204b8
 800447c:	58025408 	.word	0x58025408
 8004480:	5802541c 	.word	0x5802541c
 8004484:	58025430 	.word	0x58025430
 8004488:	58025444 	.word	0x58025444
 800448c:	58025458 	.word	0x58025458
 8004490:	5802546c 	.word	0x5802546c
 8004494:	58025480 	.word	0x58025480
 8004498:	58025494 	.word	0x58025494
 800449c:	2300      	movs	r3, #0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d028      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2201      	movs	r2, #1
 80044c2:	409a      	lsls	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop

08004520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	; 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800452e:	4b89      	ldr	r3, [pc, #548]	; (8004754 <HAL_GPIO_Init+0x234>)
 8004530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004532:	e194      	b.n	800485e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8186 	beq.w	8004858 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d005      	beq.n	8004564 <HAL_GPIO_Init+0x44>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d130      	bne.n	80045c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800459a:	2201      	movs	r2, #1
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 0201 	and.w	r2, r3, #1
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d017      	beq.n	8004602 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d123      	bne.n	8004656 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	08da      	lsrs	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3208      	adds	r2, #8
 8004616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	220f      	movs	r2, #15
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4013      	ands	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	08da      	lsrs	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3208      	adds	r2, #8
 8004650:	69b9      	ldr	r1, [r7, #24]
 8004652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0203 	and.w	r2, r3, #3
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80e0 	beq.w	8004858 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004698:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <HAL_GPIO_Init+0x238>)
 800469a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800469e:	4a2e      	ldr	r2, [pc, #184]	; (8004758 <HAL_GPIO_Init+0x238>)
 80046a0:	f043 0302 	orr.w	r3, r3, #2
 80046a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046a8:	4b2b      	ldr	r3, [pc, #172]	; (8004758 <HAL_GPIO_Init+0x238>)
 80046aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b6:	4a29      	ldr	r2, [pc, #164]	; (800475c <HAL_GPIO_Init+0x23c>)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	3302      	adds	r3, #2
 80046be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	220f      	movs	r2, #15
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <HAL_GPIO_Init+0x240>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d052      	beq.n	8004788 <HAL_GPIO_Init+0x268>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <HAL_GPIO_Init+0x244>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d031      	beq.n	800474e <HAL_GPIO_Init+0x22e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <HAL_GPIO_Init+0x248>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d02b      	beq.n	800474a <HAL_GPIO_Init+0x22a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	; (800476c <HAL_GPIO_Init+0x24c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d025      	beq.n	8004746 <HAL_GPIO_Init+0x226>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <HAL_GPIO_Init+0x250>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01f      	beq.n	8004742 <HAL_GPIO_Init+0x222>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <HAL_GPIO_Init+0x254>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d019      	beq.n	800473e <HAL_GPIO_Init+0x21e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_GPIO_Init+0x258>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_GPIO_Init+0x21a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a19      	ldr	r2, [pc, #100]	; (800477c <HAL_GPIO_Init+0x25c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00d      	beq.n	8004736 <HAL_GPIO_Init+0x216>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_GPIO_Init+0x260>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <HAL_GPIO_Init+0x212>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a17      	ldr	r2, [pc, #92]	; (8004784 <HAL_GPIO_Init+0x264>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d101      	bne.n	800472e <HAL_GPIO_Init+0x20e>
 800472a:	2309      	movs	r3, #9
 800472c:	e02d      	b.n	800478a <HAL_GPIO_Init+0x26a>
 800472e:	230a      	movs	r3, #10
 8004730:	e02b      	b.n	800478a <HAL_GPIO_Init+0x26a>
 8004732:	2308      	movs	r3, #8
 8004734:	e029      	b.n	800478a <HAL_GPIO_Init+0x26a>
 8004736:	2307      	movs	r3, #7
 8004738:	e027      	b.n	800478a <HAL_GPIO_Init+0x26a>
 800473a:	2306      	movs	r3, #6
 800473c:	e025      	b.n	800478a <HAL_GPIO_Init+0x26a>
 800473e:	2305      	movs	r3, #5
 8004740:	e023      	b.n	800478a <HAL_GPIO_Init+0x26a>
 8004742:	2304      	movs	r3, #4
 8004744:	e021      	b.n	800478a <HAL_GPIO_Init+0x26a>
 8004746:	2303      	movs	r3, #3
 8004748:	e01f      	b.n	800478a <HAL_GPIO_Init+0x26a>
 800474a:	2302      	movs	r3, #2
 800474c:	e01d      	b.n	800478a <HAL_GPIO_Init+0x26a>
 800474e:	2301      	movs	r3, #1
 8004750:	e01b      	b.n	800478a <HAL_GPIO_Init+0x26a>
 8004752:	bf00      	nop
 8004754:	58000080 	.word	0x58000080
 8004758:	58024400 	.word	0x58024400
 800475c:	58000400 	.word	0x58000400
 8004760:	58020000 	.word	0x58020000
 8004764:	58020400 	.word	0x58020400
 8004768:	58020800 	.word	0x58020800
 800476c:	58020c00 	.word	0x58020c00
 8004770:	58021000 	.word	0x58021000
 8004774:	58021400 	.word	0x58021400
 8004778:	58021800 	.word	0x58021800
 800477c:	58021c00 	.word	0x58021c00
 8004780:	58022000 	.word	0x58022000
 8004784:	58022400 	.word	0x58022400
 8004788:	2300      	movs	r3, #0
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	f002 0203 	and.w	r2, r2, #3
 8004790:	0092      	lsls	r2, r2, #2
 8004792:	4093      	lsls	r3, r2
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800479a:	4938      	ldr	r1, [pc, #224]	; (800487c <HAL_GPIO_Init+0x35c>)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	3302      	adds	r3, #2
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80047fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	f47f ae63 	bne.w	8004534 <HAL_GPIO_Init+0x14>
  }
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	3724      	adds	r7, #36	; 0x24
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	58000400 	.word	0x58000400

08004880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	887b      	ldrh	r3, [r7, #2]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e001      	b.n	80048a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048c0:	787b      	ldrb	r3, [r7, #1]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80048cc:	e003      	b.n	80048d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	619a      	str	r2, [r3, #24]
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048f4:	887a      	ldrh	r2, [r7, #2]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4013      	ands	r3, r2
 80048fa:	041a      	lsls	r2, r3, #16
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43d9      	mvns	r1, r3
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	400b      	ands	r3, r1
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	619a      	str	r2, [r3, #24]
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e07f      	b.n	8004a2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd fa92 	bl	8001e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2224      	movs	r2, #36	; 0x24
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004968:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004978:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	e006      	b.n	80049a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800499e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d104      	bne.n	80049b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <HAL_I2C_Init+0x11c>)
 80049be:	430b      	orrs	r3, r1
 80049c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69d9      	ldr	r1, [r3, #28]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1a      	ldr	r2, [r3, #32]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	02008000 	.word	0x02008000

08004a38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	461a      	mov	r2, r3
 8004a44:	460b      	mov	r3, r1
 8004a46:	817b      	strh	r3, [r7, #10]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	f040 80da 	bne.w	8004c0e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_I2C_Master_Transmit+0x30>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e0d3      	b.n	8004c10 <HAL_I2C_Master_Transmit+0x1d8>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a70:	f7fe fea6 	bl	80037c0 <HAL_GetTick>
 8004a74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2319      	movs	r3, #25
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fb62 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e0be      	b.n	8004c10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2221      	movs	r2, #33	; 0x21
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	893a      	ldrh	r2, [r7, #8]
 8004ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2bff      	cmp	r3, #255	; 0xff
 8004ac2:	d90e      	bls.n	8004ae2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	22ff      	movs	r2, #255	; 0xff
 8004ac8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	8979      	ldrh	r1, [r7, #10]
 8004ad2:	4b51      	ldr	r3, [pc, #324]	; (8004c18 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fd58 	bl	8005590 <I2C_TransferConfig>
 8004ae0:	e06c      	b.n	8004bbc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	8979      	ldrh	r1, [r7, #10]
 8004af4:	4b48      	ldr	r3, [pc, #288]	; (8004c18 <HAL_I2C_Master_Transmit+0x1e0>)
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fd47 	bl	8005590 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004b02:	e05b      	b.n	8004bbc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	6a39      	ldr	r1, [r7, #32]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fb5f 	bl	80051cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e07b      	b.n	8004c10 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d034      	beq.n	8004bbc <HAL_I2C_Master_Transmit+0x184>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d130      	bne.n	8004bbc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	2200      	movs	r2, #0
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 faf1 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e04d      	b.n	8004c10 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2bff      	cmp	r3, #255	; 0xff
 8004b7c:	d90e      	bls.n	8004b9c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	22ff      	movs	r2, #255	; 0xff
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	8979      	ldrh	r1, [r7, #10]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fcfb 	bl	8005590 <I2C_TransferConfig>
 8004b9a:	e00f      	b.n	8004bbc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	8979      	ldrh	r1, [r7, #10]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fcea 	bl	8005590 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d19e      	bne.n	8004b04 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	6a39      	ldr	r1, [r7, #32]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fb3e 	bl	800524c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e01a      	b.n	8004c10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2220      	movs	r2, #32
 8004be0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_I2C_Master_Transmit+0x1e4>)
 8004bee:	400b      	ands	r3, r1
 8004bf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e000      	b.n	8004c10 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
  }
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	80002000 	.word	0x80002000
 8004c1c:	fe00e800 	.word	0xfe00e800

08004c20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	817b      	strh	r3, [r7, #10]
 8004c30:	4613      	mov	r3, r2
 8004c32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	f040 80db 	bne.w	8004df8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_I2C_Master_Receive+0x30>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0d4      	b.n	8004dfa <HAL_I2C_Master_Receive+0x1da>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c58:	f7fe fdb2 	bl	80037c0 <HAL_GetTick>
 8004c5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2319      	movs	r3, #25
 8004c64:	2201      	movs	r2, #1
 8004c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fa6e 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e0bf      	b.n	8004dfa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2222      	movs	r2, #34	; 0x22
 8004c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2210      	movs	r2, #16
 8004c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	893a      	ldrh	r2, [r7, #8]
 8004c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2bff      	cmp	r3, #255	; 0xff
 8004caa:	d90e      	bls.n	8004cca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	22ff      	movs	r2, #255	; 0xff
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	8979      	ldrh	r1, [r7, #10]
 8004cba:	4b52      	ldr	r3, [pc, #328]	; (8004e04 <HAL_I2C_Master_Receive+0x1e4>)
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fc64 	bl	8005590 <I2C_TransferConfig>
 8004cc8:	e06d      	b.n	8004da6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	8979      	ldrh	r1, [r7, #10]
 8004cdc:	4b49      	ldr	r3, [pc, #292]	; (8004e04 <HAL_I2C_Master_Receive+0x1e4>)
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fc53 	bl	8005590 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004cea:	e05c      	b.n	8004da6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	6a39      	ldr	r1, [r7, #32]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fae7 	bl	80052c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e07c      	b.n	8004dfa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d034      	beq.n	8004da6 <HAL_I2C_Master_Receive+0x186>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d130      	bne.n	8004da6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2180      	movs	r1, #128	; 0x80
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f9fc 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e04d      	b.n	8004dfa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2bff      	cmp	r3, #255	; 0xff
 8004d66:	d90e      	bls.n	8004d86 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	8979      	ldrh	r1, [r7, #10]
 8004d76:	2300      	movs	r3, #0
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fc06 	bl	8005590 <I2C_TransferConfig>
 8004d84:	e00f      	b.n	8004da6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	8979      	ldrh	r1, [r7, #10]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fbf5 	bl	8005590 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d19d      	bne.n	8004cec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	6a39      	ldr	r1, [r7, #32]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fa49 	bl	800524c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e01a      	b.n	8004dfa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <HAL_I2C_Master_Receive+0x1e8>)
 8004dd8:	400b      	ands	r3, r1
 8004dda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	e000      	b.n	8004dfa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
  }
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	80002400 	.word	0x80002400
 8004e08:	fe00e800 	.word	0xfe00e800

08004e0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	4608      	mov	r0, r1
 8004e16:	4611      	mov	r1, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	817b      	strh	r3, [r7, #10]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	813b      	strh	r3, [r7, #8]
 8004e22:	4613      	mov	r3, r2
 8004e24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	f040 80fd 	bne.w	800502e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_I2C_Mem_Read+0x34>
 8004e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d105      	bne.n	8004e4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0f1      	b.n	8005030 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_I2C_Mem_Read+0x4e>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e0ea      	b.n	8005030 <HAL_I2C_Mem_Read+0x224>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e62:	f7fe fcad 	bl	80037c0 <HAL_GetTick>
 8004e66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2319      	movs	r3, #25
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f969 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0d5      	b.n	8005030 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2222      	movs	r2, #34	; 0x22
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a3a      	ldr	r2, [r7, #32]
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eac:	88f8      	ldrh	r0, [r7, #6]
 8004eae:	893a      	ldrh	r2, [r7, #8]
 8004eb0:	8979      	ldrh	r1, [r7, #10]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	4603      	mov	r3, r0
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f8cd 	bl	800505c <I2C_RequestMemoryRead>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0ad      	b.n	8005030 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2bff      	cmp	r3, #255	; 0xff
 8004edc:	d90e      	bls.n	8004efc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	22ff      	movs	r2, #255	; 0xff
 8004ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	8979      	ldrh	r1, [r7, #10]
 8004eec:	4b52      	ldr	r3, [pc, #328]	; (8005038 <HAL_I2C_Mem_Read+0x22c>)
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fb4b 	bl	8005590 <I2C_TransferConfig>
 8004efa:	e00f      	b.n	8004f1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	8979      	ldrh	r1, [r7, #10]
 8004f0e:	4b4a      	ldr	r3, [pc, #296]	; (8005038 <HAL_I2C_Mem_Read+0x22c>)
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fb3a 	bl	8005590 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	2200      	movs	r2, #0
 8004f24:	2104      	movs	r1, #4
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f910 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e07c      	b.n	8005030 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d034      	beq.n	8004fdc <HAL_I2C_Mem_Read+0x1d0>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d130      	bne.n	8004fdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	2200      	movs	r2, #0
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f8e1 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e04d      	b.n	8005030 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2bff      	cmp	r3, #255	; 0xff
 8004f9c:	d90e      	bls.n	8004fbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	22ff      	movs	r2, #255	; 0xff
 8004fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	8979      	ldrh	r1, [r7, #10]
 8004fac:	2300      	movs	r3, #0
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 faeb 	bl	8005590 <I2C_TransferConfig>
 8004fba:	e00f      	b.n	8004fdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	8979      	ldrh	r1, [r7, #10]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fada 	bl	8005590 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d19a      	bne.n	8004f1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f92e 	bl	800524c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e01a      	b.n	8005030 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2220      	movs	r2, #32
 8005000:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6859      	ldr	r1, [r3, #4]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_I2C_Mem_Read+0x230>)
 800500e:	400b      	ands	r3, r1
 8005010:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800502e:	2302      	movs	r3, #2
  }
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	80002400 	.word	0x80002400
 800503c:	fe00e800 	.word	0xfe00e800

08005040 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504e:	b2db      	uxtb	r3, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	4608      	mov	r0, r1
 8005066:	4611      	mov	r1, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4603      	mov	r3, r0
 800506c:	817b      	strh	r3, [r7, #10]
 800506e:	460b      	mov	r3, r1
 8005070:	813b      	strh	r3, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	8979      	ldrh	r1, [r7, #10]
 800507c:	4b20      	ldr	r3, [pc, #128]	; (8005100 <I2C_RequestMemoryRead+0xa4>)
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2300      	movs	r3, #0
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fa84 	bl	8005590 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	69b9      	ldr	r1, [r7, #24]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f89d 	bl	80051cc <I2C_WaitOnTXISFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e02c      	b.n	80050f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800509c:	88fb      	ldrh	r3, [r7, #6]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050a2:	893b      	ldrh	r3, [r7, #8]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	629a      	str	r2, [r3, #40]	; 0x28
 80050ac:	e015      	b.n	80050da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050ae:	893b      	ldrh	r3, [r7, #8]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	69b9      	ldr	r1, [r7, #24]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f883 	bl	80051cc <I2C_WaitOnTXISFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e012      	b.n	80050f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050d0:	893b      	ldrh	r3, [r7, #8]
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2200      	movs	r2, #0
 80050e2:	2140      	movs	r1, #64	; 0x40
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f831 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	80002000 	.word	0x80002000

08005104 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b02      	cmp	r3, #2
 8005118:	d103      	bne.n	8005122 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d007      	beq.n	8005140 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	619a      	str	r2, [r3, #24]
  }
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	4613      	mov	r3, r2
 800515a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800515c:	e022      	b.n	80051a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005164:	d01e      	beq.n	80051a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005166:	f7fe fb2b 	bl	80037c0 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d302      	bcc.n	800517c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d113      	bne.n	80051a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e00f      	b.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4013      	ands	r3, r2
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	bf0c      	ite	eq
 80051b4:	2301      	moveq	r3, #1
 80051b6:	2300      	movne	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	461a      	mov	r2, r3
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d0cd      	beq.n	800515e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051d8:	e02c      	b.n	8005234 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f8ea 	bl	80053b8 <I2C_IsErrorOccurred>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e02a      	b.n	8005244 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f4:	d01e      	beq.n	8005234 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f6:	f7fe fae3 	bl	80037c0 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	d302      	bcc.n	800520c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d113      	bne.n	8005234 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e007      	b.n	8005244 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b02      	cmp	r3, #2
 8005240:	d1cb      	bne.n	80051da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005258:	e028      	b.n	80052ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f8aa 	bl	80053b8 <I2C_IsErrorOccurred>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e026      	b.n	80052bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526e:	f7fe faa7 	bl	80037c0 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d113      	bne.n	80052ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	f043 0220 	orr.w	r2, r3, #32
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e007      	b.n	80052bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d1cf      	bne.n	800525a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052d0:	e064      	b.n	800539c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f86e 	bl	80053b8 <I2C_IsErrorOccurred>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e062      	b.n	80053ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d138      	bne.n	8005366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d105      	bne.n	800530e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e04e      	b.n	80053ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b10      	cmp	r3, #16
 800531a:	d107      	bne.n	800532c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2210      	movs	r2, #16
 8005322:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2204      	movs	r2, #4
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
 800532a:	e002      	b.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2220      	movs	r2, #32
 8005338:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005346:	400b      	ands	r3, r1
 8005348:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e022      	b.n	80053ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fe fa2b 	bl	80037c0 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10f      	bne.n	800539c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005380:	f043 0220 	orr.w	r2, r3, #32
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e007      	b.n	80053ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d193      	bne.n	80052d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	fe00e800 	.word	0xfe00e800

080053b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d075      	beq.n	80054d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2210      	movs	r2, #16
 80053ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053ec:	e056      	b.n	800549c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f4:	d052      	beq.n	800549c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fe f9e3 	bl	80037c0 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <I2C_IsErrorOccurred+0x54>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d147      	bne.n	800549c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005416:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800541e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800542a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542e:	d12e      	bne.n	800548e <I2C_IsErrorOccurred+0xd6>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005436:	d02a      	beq.n	800548e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	2b20      	cmp	r3, #32
 800543c:	d027      	beq.n	800548e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800544e:	f7fe f9b7 	bl	80037c0 <HAL_GetTick>
 8005452:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005454:	e01b      	b.n	800548e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005456:	f7fe f9b3 	bl	80037c0 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b19      	cmp	r3, #25
 8005462:	d914      	bls.n	800548e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	f043 0220 	orr.w	r2, r3, #32
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b20      	cmp	r3, #32
 800549a:	d1dc      	bne.n	8005456 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d003      	beq.n	80054b2 <I2C_IsErrorOccurred+0xfa>
 80054aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d09d      	beq.n	80053ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d103      	bne.n	80054c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2220      	movs	r2, #32
 80054c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	f043 0304 	orr.w	r3, r3, #4
 80054c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00b      	beq.n	800551c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f043 0308 	orr.w	r3, r3, #8
 800550a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005514:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005536:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800553e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01c      	beq.n	8005580 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff fddc 	bl	8005104 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b0d      	ldr	r3, [pc, #52]	; (800558c <I2C_IsErrorOccurred+0x1d4>)
 8005558:	400b      	ands	r3, r1
 800555a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	431a      	orrs	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005584:	4618      	mov	r0, r3
 8005586:	3728      	adds	r7, #40	; 0x28
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	fe00e800 	.word	0xfe00e800

08005590 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	607b      	str	r3, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	817b      	strh	r3, [r7, #10]
 800559e:	4613      	mov	r3, r2
 80055a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055a2:	897b      	ldrh	r3, [r7, #10]
 80055a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055a8:	7a7b      	ldrb	r3, [r7, #9]
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055b0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055be:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	0d5b      	lsrs	r3, r3, #21
 80055ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055ce:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <I2C_TransferConfig+0x60>)
 80055d0:	430b      	orrs	r3, r1
 80055d2:	43db      	mvns	r3, r3
 80055d4:	ea02 0103 	and.w	r1, r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	03ff63ff 	.word	0x03ff63ff

080055f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b20      	cmp	r3, #32
 8005608:	d138      	bne.n	800567c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005614:	2302      	movs	r3, #2
 8005616:	e032      	b.n	800567e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2224      	movs	r2, #36	; 0x24
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005646:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6819      	ldr	r1, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
  }
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b20      	cmp	r3, #32
 800569e:	d139      	bne.n	8005714 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e033      	b.n	8005716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2224      	movs	r2, #36	; 0x24
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800572c:	4b19      	ldr	r3, [pc, #100]	; (8005794 <HAL_PWREx_ConfigSupply+0x70>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b04      	cmp	r3, #4
 8005736:	d00a      	beq.n	800574e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005738:	4b16      	ldr	r3, [pc, #88]	; (8005794 <HAL_PWREx_ConfigSupply+0x70>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e01f      	b.n	800578a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e01d      	b.n	800578a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <HAL_PWREx_ConfigSupply+0x70>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f023 0207 	bic.w	r2, r3, #7
 8005756:	490f      	ldr	r1, [pc, #60]	; (8005794 <HAL_PWREx_ConfigSupply+0x70>)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4313      	orrs	r3, r2
 800575c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800575e:	f7fe f82f 	bl	80037c0 <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005764:	e009      	b.n	800577a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005766:	f7fe f82b 	bl	80037c0 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005774:	d901      	bls.n	800577a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e007      	b.n	800578a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800577a:	4b06      	ldr	r3, [pc, #24]	; (8005794 <HAL_PWREx_ConfigSupply+0x70>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005786:	d1ee      	bne.n	8005766 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	58024800 	.word	0x58024800

08005798 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08c      	sub	sp, #48	; 0x30
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f000 bc1d 	b.w	8005fe6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 8087 	beq.w	80058c8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ba:	4b99      	ldr	r3, [pc, #612]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057c4:	4b96      	ldr	r3, [pc, #600]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d007      	beq.n	80057e0 <HAL_RCC_OscConfig+0x48>
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	2b18      	cmp	r3, #24
 80057d4:	d110      	bne.n	80057f8 <HAL_RCC_OscConfig+0x60>
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d10b      	bne.n	80057f8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e0:	4b8f      	ldr	r3, [pc, #572]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d06c      	beq.n	80058c6 <HAL_RCC_OscConfig+0x12e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d168      	bne.n	80058c6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e3f6      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005800:	d106      	bne.n	8005810 <HAL_RCC_OscConfig+0x78>
 8005802:	4b87      	ldr	r3, [pc, #540]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a86      	ldr	r2, [pc, #536]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e02e      	b.n	800586e <HAL_RCC_OscConfig+0xd6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10c      	bne.n	8005832 <HAL_RCC_OscConfig+0x9a>
 8005818:	4b81      	ldr	r3, [pc, #516]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a80      	ldr	r2, [pc, #512]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b7e      	ldr	r3, [pc, #504]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a7d      	ldr	r2, [pc, #500]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800582a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e01d      	b.n	800586e <HAL_RCC_OscConfig+0xd6>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800583a:	d10c      	bne.n	8005856 <HAL_RCC_OscConfig+0xbe>
 800583c:	4b78      	ldr	r3, [pc, #480]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a77      	ldr	r2, [pc, #476]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	4b75      	ldr	r3, [pc, #468]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a74      	ldr	r2, [pc, #464]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800584e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	e00b      	b.n	800586e <HAL_RCC_OscConfig+0xd6>
 8005856:	4b72      	ldr	r3, [pc, #456]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a71      	ldr	r2, [pc, #452]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800585c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	4b6f      	ldr	r3, [pc, #444]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6e      	ldr	r2, [pc, #440]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d013      	beq.n	800589e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005876:	f7fd ffa3 	bl	80037c0 <HAL_GetTick>
 800587a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800587e:	f7fd ff9f 	bl	80037c0 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b64      	cmp	r3, #100	; 0x64
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e3aa      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005890:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0xe6>
 800589c:	e014      	b.n	80058c8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fd ff8f 	bl	80037c0 <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058a6:	f7fd ff8b 	bl	80037c0 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b64      	cmp	r3, #100	; 0x64
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e396      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058b8:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f0      	bne.n	80058a6 <HAL_RCC_OscConfig+0x10e>
 80058c4:	e000      	b.n	80058c8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80cb 	beq.w	8005a6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058d6:	4b52      	ldr	r3, [pc, #328]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058e0:	4b4f      	ldr	r3, [pc, #316]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_RCC_OscConfig+0x164>
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	2b18      	cmp	r3, #24
 80058f0:	d156      	bne.n	80059a0 <HAL_RCC_OscConfig+0x208>
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d151      	bne.n	80059a0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058fc:	4b48      	ldr	r3, [pc, #288]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_RCC_OscConfig+0x17c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e368      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005914:	4b42      	ldr	r3, [pc, #264]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 0219 	bic.w	r2, r3, #25
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	493f      	ldr	r1, [pc, #252]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005922:	4313      	orrs	r3, r2
 8005924:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005926:	f7fd ff4b 	bl	80037c0 <HAL_GetTick>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800592e:	f7fd ff47 	bl	80037c0 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e352      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005940:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800594c:	f7fd ff68 	bl	8003820 <HAL_GetREVID>
 8005950:	4603      	mov	r3, r0
 8005952:	f241 0203 	movw	r2, #4099	; 0x1003
 8005956:	4293      	cmp	r3, r2
 8005958:	d817      	bhi.n	800598a <HAL_RCC_OscConfig+0x1f2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d108      	bne.n	8005974 <HAL_RCC_OscConfig+0x1dc>
 8005962:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800596a:	4a2d      	ldr	r2, [pc, #180]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800596c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005970:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005972:	e07b      	b.n	8005a6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005974:	4b2a      	ldr	r3, [pc, #168]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	031b      	lsls	r3, r3, #12
 8005982:	4927      	ldr	r1, [pc, #156]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005984:	4313      	orrs	r3, r2
 8005986:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005988:	e070      	b.n	8005a6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598a:	4b25      	ldr	r3, [pc, #148]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	061b      	lsls	r3, r3, #24
 8005998:	4921      	ldr	r1, [pc, #132]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 800599a:	4313      	orrs	r3, r2
 800599c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800599e:	e065      	b.n	8005a6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d048      	beq.n	8005a3a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059a8:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f023 0219 	bic.w	r2, r3, #25
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	491a      	ldr	r1, [pc, #104]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ba:	f7fd ff01 	bl	80037c0 <HAL_GetTick>
 80059be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059c2:	f7fd fefd 	bl	80037c0 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e308      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059d4:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0f0      	beq.n	80059c2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e0:	f7fd ff1e 	bl	8003820 <HAL_GetREVID>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d81a      	bhi.n	8005a24 <HAL_RCC_OscConfig+0x28c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d108      	bne.n	8005a08 <HAL_RCC_OscConfig+0x270>
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80059fe:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a04:	6053      	str	r3, [r2, #4]
 8005a06:	e031      	b.n	8005a6c <HAL_RCC_OscConfig+0x2d4>
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	031b      	lsls	r3, r3, #12
 8005a16:	4902      	ldr	r1, [pc, #8]	; (8005a20 <HAL_RCC_OscConfig+0x288>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]
 8005a1c:	e026      	b.n	8005a6c <HAL_RCC_OscConfig+0x2d4>
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
 8005a24:	4b9a      	ldr	r3, [pc, #616]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	4997      	ldr	r1, [pc, #604]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	604b      	str	r3, [r1, #4]
 8005a38:	e018      	b.n	8005a6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a3a:	4b95      	ldr	r3, [pc, #596]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a94      	ldr	r2, [pc, #592]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fd febb 	bl	80037c0 <HAL_GetTick>
 8005a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a4e:	f7fd feb7 	bl	80037c0 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e2c2      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a60:	4b8b      	ldr	r3, [pc, #556]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80a9 	beq.w	8005bcc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a7a:	4b85      	ldr	r3, [pc, #532]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a84:	4b82      	ldr	r3, [pc, #520]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d007      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x308>
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b18      	cmp	r3, #24
 8005a94:	d13a      	bne.n	8005b0c <HAL_RCC_OscConfig+0x374>
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d135      	bne.n	8005b0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aa0:	4b7b      	ldr	r3, [pc, #492]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x320>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	2b80      	cmp	r3, #128	; 0x80
 8005ab2:	d001      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e296      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ab8:	f7fd feb2 	bl	8003820 <HAL_GetREVID>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d817      	bhi.n	8005af6 <HAL_RCC_OscConfig+0x35e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d108      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x348>
 8005ace:	4b70      	ldr	r3, [pc, #448]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ad6:	4a6e      	ldr	r2, [pc, #440]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005adc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ade:	e075      	b.n	8005bcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ae0:	4b6b      	ldr	r3, [pc, #428]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	069b      	lsls	r3, r3, #26
 8005aee:	4968      	ldr	r1, [pc, #416]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005af4:	e06a      	b.n	8005bcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005af6:	4b66      	ldr	r3, [pc, #408]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	061b      	lsls	r3, r3, #24
 8005b04:	4962      	ldr	r1, [pc, #392]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b0a:	e05f      	b.n	8005bcc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d042      	beq.n	8005b9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b14:	4b5e      	ldr	r3, [pc, #376]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a5d      	ldr	r2, [pc, #372]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fd fe4e 	bl	80037c0 <HAL_GetTick>
 8005b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b28:	f7fd fe4a 	bl	80037c0 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e255      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b3a:	4b55      	ldr	r3, [pc, #340]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b46:	f7fd fe6b 	bl	8003820 <HAL_GetREVID>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d817      	bhi.n	8005b84 <HAL_RCC_OscConfig+0x3ec>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d108      	bne.n	8005b6e <HAL_RCC_OscConfig+0x3d6>
 8005b5c:	4b4c      	ldr	r3, [pc, #304]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b64:	4a4a      	ldr	r2, [pc, #296]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b6a:	6053      	str	r3, [r2, #4]
 8005b6c:	e02e      	b.n	8005bcc <HAL_RCC_OscConfig+0x434>
 8005b6e:	4b48      	ldr	r3, [pc, #288]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	069b      	lsls	r3, r3, #26
 8005b7c:	4944      	ldr	r1, [pc, #272]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	604b      	str	r3, [r1, #4]
 8005b82:	e023      	b.n	8005bcc <HAL_RCC_OscConfig+0x434>
 8005b84:	4b42      	ldr	r3, [pc, #264]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	061b      	lsls	r3, r3, #24
 8005b92:	493f      	ldr	r1, [pc, #252]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60cb      	str	r3, [r1, #12]
 8005b98:	e018      	b.n	8005bcc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b9a:	4b3d      	ldr	r3, [pc, #244]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a3c      	ldr	r2, [pc, #240]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba6:	f7fd fe0b 	bl	80037c0 <HAL_GetTick>
 8005baa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005bae:	f7fd fe07 	bl	80037c0 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e212      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bc0:	4b33      	ldr	r3, [pc, #204]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d036      	beq.n	8005c46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d019      	beq.n	8005c14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005be0:	4b2b      	ldr	r3, [pc, #172]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be4:	4a2a      	ldr	r2, [pc, #168]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bec:	f7fd fde8 	bl	80037c0 <HAL_GetTick>
 8005bf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bf4:	f7fd fde4 	bl	80037c0 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e1ef      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c06:	4b22      	ldr	r3, [pc, #136]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x45c>
 8005c12:	e018      	b.n	8005c46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c14:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c18:	4a1d      	ldr	r2, [pc, #116]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fd fdce 	bl	80037c0 <HAL_GetTick>
 8005c24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c28:	f7fd fdca 	bl	80037c0 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e1d5      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c3a:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d039      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01c      	beq.n	8005c94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a0c      	ldr	r2, [pc, #48]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c66:	f7fd fdab 	bl	80037c0 <HAL_GetTick>
 8005c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c6e:	f7fd fda7 	bl	80037c0 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e1b2      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c80:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <HAL_RCC_OscConfig+0x4f8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCC_OscConfig+0x4d6>
 8005c8c:	e01b      	b.n	8005cc6 <HAL_RCC_OscConfig+0x52e>
 8005c8e:	bf00      	nop
 8005c90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c94:	4b9b      	ldr	r3, [pc, #620]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a9a      	ldr	r2, [pc, #616]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ca0:	f7fd fd8e 	bl	80037c0 <HAL_GetTick>
 8005ca4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ca8:	f7fd fd8a 	bl	80037c0 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e195      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cba:	4b92      	ldr	r3, [pc, #584]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 8081 	beq.w	8005dd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cd4:	4b8c      	ldr	r3, [pc, #560]	; (8005f08 <HAL_RCC_OscConfig+0x770>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a8b      	ldr	r2, [pc, #556]	; (8005f08 <HAL_RCC_OscConfig+0x770>)
 8005cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ce0:	f7fd fd6e 	bl	80037c0 <HAL_GetTick>
 8005ce4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ce8:	f7fd fd6a 	bl	80037c0 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b64      	cmp	r3, #100	; 0x64
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e175      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cfa:	4b83      	ldr	r3, [pc, #524]	; (8005f08 <HAL_RCC_OscConfig+0x770>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d106      	bne.n	8005d1c <HAL_RCC_OscConfig+0x584>
 8005d0e:	4b7d      	ldr	r3, [pc, #500]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a7c      	ldr	r2, [pc, #496]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1a:	e02d      	b.n	8005d78 <HAL_RCC_OscConfig+0x5e0>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10c      	bne.n	8005d3e <HAL_RCC_OscConfig+0x5a6>
 8005d24:	4b77      	ldr	r3, [pc, #476]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d28:	4a76      	ldr	r2, [pc, #472]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d30:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d34:	4a73      	ldr	r2, [pc, #460]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d36:	f023 0304 	bic.w	r3, r3, #4
 8005d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3c:	e01c      	b.n	8005d78 <HAL_RCC_OscConfig+0x5e0>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x5c8>
 8005d46:	4b6f      	ldr	r3, [pc, #444]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	4a6e      	ldr	r2, [pc, #440]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d4c:	f043 0304 	orr.w	r3, r3, #4
 8005d50:	6713      	str	r3, [r2, #112]	; 0x70
 8005d52:	4b6c      	ldr	r3, [pc, #432]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	4a6b      	ldr	r2, [pc, #428]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5e:	e00b      	b.n	8005d78 <HAL_RCC_OscConfig+0x5e0>
 8005d60:	4b68      	ldr	r3, [pc, #416]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	4a67      	ldr	r2, [pc, #412]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d6c:	4b65      	ldr	r3, [pc, #404]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d70:	4a64      	ldr	r2, [pc, #400]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005d72:	f023 0304 	bic.w	r3, r3, #4
 8005d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d015      	beq.n	8005dac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d80:	f7fd fd1e 	bl	80037c0 <HAL_GetTick>
 8005d84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fd fd1a 	bl	80037c0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e123      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d9e:	4b59      	ldr	r3, [pc, #356]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0ee      	beq.n	8005d88 <HAL_RCC_OscConfig+0x5f0>
 8005daa:	e014      	b.n	8005dd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dac:	f7fd fd08 	bl	80037c0 <HAL_GetTick>
 8005db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db4:	f7fd fd04 	bl	80037c0 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e10d      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005dca:	4b4e      	ldr	r3, [pc, #312]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1ee      	bne.n	8005db4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8102 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005de0:	4b48      	ldr	r3, [pc, #288]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005de8:	2b18      	cmp	r3, #24
 8005dea:	f000 80bd 	beq.w	8005f68 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	f040 809e 	bne.w	8005f34 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df8:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a41      	ldr	r2, [pc, #260]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fd fcdc 	bl	80037c0 <HAL_GetTick>
 8005e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e0c:	f7fd fcd8 	bl	80037c0 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e0e3      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e1e:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e2a:	4b36      	ldr	r3, [pc, #216]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e2e:	4b37      	ldr	r3, [pc, #220]	; (8005f0c <HAL_RCC_OscConfig+0x774>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e3a:	0112      	lsls	r2, r2, #4
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	4931      	ldr	r1, [pc, #196]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	628b      	str	r3, [r1, #40]	; 0x28
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e52:	3b01      	subs	r3, #1
 8005e54:	025b      	lsls	r3, r3, #9
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e74:	4923      	ldr	r1, [pc, #140]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005e7a:	4b22      	ldr	r3, [pc, #136]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	4a21      	ldr	r2, [pc, #132]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e86:	4b1f      	ldr	r3, [pc, #124]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8a:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <HAL_RCC_OscConfig+0x778>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e92:	00d2      	lsls	r2, r2, #3
 8005e94:	491b      	ldr	r1, [pc, #108]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e9a:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	f023 020c 	bic.w	r2, r3, #12
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	4917      	ldr	r1, [pc, #92]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005eac:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	f023 0202 	bic.w	r2, r3, #2
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb8:	4912      	ldr	r1, [pc, #72]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ebe:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	4a10      	ldr	r2, [pc, #64]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	4a0a      	ldr	r2, [pc, #40]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	4a07      	ldr	r2, [pc, #28]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ee8:	f043 0301 	orr.w	r3, r3, #1
 8005eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eee:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a04      	ldr	r2, [pc, #16]	; (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efa:	f7fd fc61 	bl	80037c0 <HAL_GetTick>
 8005efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f00:	e011      	b.n	8005f26 <HAL_RCC_OscConfig+0x78e>
 8005f02:	bf00      	nop
 8005f04:	58024400 	.word	0x58024400
 8005f08:	58024800 	.word	0x58024800
 8005f0c:	fffffc0c 	.word	0xfffffc0c
 8005f10:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f14:	f7fd fc54 	bl	80037c0 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e05f      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f26:	4b32      	ldr	r3, [pc, #200]	; (8005ff0 <HAL_RCC_OscConfig+0x858>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0f0      	beq.n	8005f14 <HAL_RCC_OscConfig+0x77c>
 8005f32:	e057      	b.n	8005fe4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f34:	4b2e      	ldr	r3, [pc, #184]	; (8005ff0 <HAL_RCC_OscConfig+0x858>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a2d      	ldr	r2, [pc, #180]	; (8005ff0 <HAL_RCC_OscConfig+0x858>)
 8005f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f40:	f7fd fc3e 	bl	80037c0 <HAL_GetTick>
 8005f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f48:	f7fd fc3a 	bl	80037c0 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e045      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f5a:	4b25      	ldr	r3, [pc, #148]	; (8005ff0 <HAL_RCC_OscConfig+0x858>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1f0      	bne.n	8005f48 <HAL_RCC_OscConfig+0x7b0>
 8005f66:	e03d      	b.n	8005fe4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f68:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <HAL_RCC_OscConfig+0x858>)
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f6e:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <HAL_RCC_OscConfig+0x858>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d031      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f003 0203 	and.w	r2, r3, #3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d12a      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d122      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d11a      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	0a5b      	lsrs	r3, r3, #9
 8005fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d111      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	0c1b      	lsrs	r3, r3, #16
 8005fc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d108      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	0e1b      	lsrs	r3, r3, #24
 8005fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d001      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3730      	adds	r7, #48	; 0x30
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	58024400 	.word	0x58024400

08005ff4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e19c      	b.n	8006342 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006008:	4b8a      	ldr	r3, [pc, #552]	; (8006234 <HAL_RCC_ClockConfig+0x240>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d910      	bls.n	8006038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006016:	4b87      	ldr	r3, [pc, #540]	; (8006234 <HAL_RCC_ClockConfig+0x240>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 020f 	bic.w	r2, r3, #15
 800601e:	4985      	ldr	r1, [pc, #532]	; (8006234 <HAL_RCC_ClockConfig+0x240>)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	4313      	orrs	r3, r2
 8006024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006026:	4b83      	ldr	r3, [pc, #524]	; (8006234 <HAL_RCC_ClockConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d001      	beq.n	8006038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e184      	b.n	8006342 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d010      	beq.n	8006066 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	4b7b      	ldr	r3, [pc, #492]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006050:	429a      	cmp	r2, r3
 8006052:	d908      	bls.n	8006066 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006054:	4b78      	ldr	r3, [pc, #480]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	4975      	ldr	r1, [pc, #468]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006062:	4313      	orrs	r3, r2
 8006064:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d010      	beq.n	8006094 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	4b70      	ldr	r3, [pc, #448]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800607e:	429a      	cmp	r2, r3
 8006080:	d908      	bls.n	8006094 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006082:	4b6d      	ldr	r3, [pc, #436]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	496a      	ldr	r1, [pc, #424]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006090:	4313      	orrs	r3, r2
 8006092:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0310 	and.w	r3, r3, #16
 800609c:	2b00      	cmp	r3, #0
 800609e:	d010      	beq.n	80060c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	4b64      	ldr	r3, [pc, #400]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d908      	bls.n	80060c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060b0:	4b61      	ldr	r3, [pc, #388]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	495e      	ldr	r1, [pc, #376]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d010      	beq.n	80060f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	4b59      	ldr	r3, [pc, #356]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060da:	429a      	cmp	r2, r3
 80060dc:	d908      	bls.n	80060f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80060de:	4b56      	ldr	r3, [pc, #344]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	4953      	ldr	r1, [pc, #332]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d010      	beq.n	800611e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	4b4d      	ldr	r3, [pc, #308]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	429a      	cmp	r2, r3
 800610a:	d908      	bls.n	800611e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800610c:	4b4a      	ldr	r3, [pc, #296]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f023 020f 	bic.w	r2, r3, #15
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4947      	ldr	r1, [pc, #284]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 800611a:	4313      	orrs	r3, r2
 800611c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d055      	beq.n	80061d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800612a:	4b43      	ldr	r3, [pc, #268]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4940      	ldr	r1, [pc, #256]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006138:	4313      	orrs	r3, r2
 800613a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d107      	bne.n	8006154 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006144:	4b3c      	ldr	r3, [pc, #240]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d121      	bne.n	8006194 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0f6      	b.n	8006342 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b03      	cmp	r3, #3
 800615a:	d107      	bne.n	800616c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d115      	bne.n	8006194 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0ea      	b.n	8006342 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d107      	bne.n	8006184 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006174:	4b30      	ldr	r3, [pc, #192]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d109      	bne.n	8006194 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e0de      	b.n	8006342 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006184:	4b2c      	ldr	r3, [pc, #176]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0d6      	b.n	8006342 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006194:	4b28      	ldr	r3, [pc, #160]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f023 0207 	bic.w	r2, r3, #7
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4925      	ldr	r1, [pc, #148]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a6:	f7fd fb0b 	bl	80037c0 <HAL_GetTick>
 80061aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ac:	e00a      	b.n	80061c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ae:	f7fd fb07 	bl	80037c0 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e0be      	b.n	8006342 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c4:	4b1c      	ldr	r3, [pc, #112]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d1eb      	bne.n	80061ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d010      	beq.n	8006204 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	4b14      	ldr	r3, [pc, #80]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d208      	bcs.n	8006204 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f2:	4b11      	ldr	r3, [pc, #68]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f023 020f 	bic.w	r2, r3, #15
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	490e      	ldr	r1, [pc, #56]	; (8006238 <HAL_RCC_ClockConfig+0x244>)
 8006200:	4313      	orrs	r3, r2
 8006202:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006204:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <HAL_RCC_ClockConfig+0x240>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d214      	bcs.n	800623c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006212:	4b08      	ldr	r3, [pc, #32]	; (8006234 <HAL_RCC_ClockConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f023 020f 	bic.w	r2, r3, #15
 800621a:	4906      	ldr	r1, [pc, #24]	; (8006234 <HAL_RCC_ClockConfig+0x240>)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	4313      	orrs	r3, r2
 8006220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006222:	4b04      	ldr	r3, [pc, #16]	; (8006234 <HAL_RCC_ClockConfig+0x240>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d005      	beq.n	800623c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e086      	b.n	8006342 <HAL_RCC_ClockConfig+0x34e>
 8006234:	52002000 	.word	0x52002000
 8006238:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d010      	beq.n	800626a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	4b3f      	ldr	r3, [pc, #252]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006254:	429a      	cmp	r2, r3
 8006256:	d208      	bcs.n	800626a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006258:	4b3c      	ldr	r3, [pc, #240]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	4939      	ldr	r1, [pc, #228]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 8006266:	4313      	orrs	r3, r2
 8006268:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d010      	beq.n	8006298 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	4b34      	ldr	r3, [pc, #208]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006282:	429a      	cmp	r2, r3
 8006284:	d208      	bcs.n	8006298 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006286:	4b31      	ldr	r3, [pc, #196]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	492e      	ldr	r1, [pc, #184]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 8006294:	4313      	orrs	r3, r2
 8006296:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d010      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	4b28      	ldr	r3, [pc, #160]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d208      	bcs.n	80062c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062b4:	4b25      	ldr	r3, [pc, #148]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	4922      	ldr	r1, [pc, #136]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d010      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69da      	ldr	r2, [r3, #28]
 80062d6:	4b1d      	ldr	r3, [pc, #116]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062de:	429a      	cmp	r2, r3
 80062e0:	d208      	bcs.n	80062f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062e2:	4b1a      	ldr	r3, [pc, #104]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	4917      	ldr	r1, [pc, #92]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062f4:	f000 f834 	bl	8006360 <HAL_RCC_GetSysClockFreq>
 80062f8:	4602      	mov	r2, r0
 80062fa:	4b14      	ldr	r3, [pc, #80]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	0a1b      	lsrs	r3, r3, #8
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	4912      	ldr	r1, [pc, #72]	; (8006350 <HAL_RCC_ClockConfig+0x35c>)
 8006306:	5ccb      	ldrb	r3, [r1, r3]
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <HAL_RCC_ClockConfig+0x358>)
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	4a0d      	ldr	r2, [pc, #52]	; (8006350 <HAL_RCC_ClockConfig+0x35c>)
 800631c:	5cd3      	ldrb	r3, [r2, r3]
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
 8006328:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <HAL_RCC_ClockConfig+0x360>)
 800632a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800632c:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <HAL_RCC_ClockConfig+0x364>)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006332:	4b0a      	ldr	r3, [pc, #40]	; (800635c <HAL_RCC_ClockConfig+0x368>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fd f9f8 	bl	800372c <HAL_InitTick>
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	58024400 	.word	0x58024400
 8006350:	0800e4c8 	.word	0x0800e4c8
 8006354:	2400002c 	.word	0x2400002c
 8006358:	24000028 	.word	0x24000028
 800635c:	24000030 	.word	0x24000030

08006360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006360:	b480      	push	{r7}
 8006362:	b089      	sub	sp, #36	; 0x24
 8006364:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006366:	4bb3      	ldr	r3, [pc, #716]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800636e:	2b18      	cmp	r3, #24
 8006370:	f200 8155 	bhi.w	800661e <HAL_RCC_GetSysClockFreq+0x2be>
 8006374:	a201      	add	r2, pc, #4	; (adr r2, 800637c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	080063e1 	.word	0x080063e1
 8006380:	0800661f 	.word	0x0800661f
 8006384:	0800661f 	.word	0x0800661f
 8006388:	0800661f 	.word	0x0800661f
 800638c:	0800661f 	.word	0x0800661f
 8006390:	0800661f 	.word	0x0800661f
 8006394:	0800661f 	.word	0x0800661f
 8006398:	0800661f 	.word	0x0800661f
 800639c:	08006407 	.word	0x08006407
 80063a0:	0800661f 	.word	0x0800661f
 80063a4:	0800661f 	.word	0x0800661f
 80063a8:	0800661f 	.word	0x0800661f
 80063ac:	0800661f 	.word	0x0800661f
 80063b0:	0800661f 	.word	0x0800661f
 80063b4:	0800661f 	.word	0x0800661f
 80063b8:	0800661f 	.word	0x0800661f
 80063bc:	0800640d 	.word	0x0800640d
 80063c0:	0800661f 	.word	0x0800661f
 80063c4:	0800661f 	.word	0x0800661f
 80063c8:	0800661f 	.word	0x0800661f
 80063cc:	0800661f 	.word	0x0800661f
 80063d0:	0800661f 	.word	0x0800661f
 80063d4:	0800661f 	.word	0x0800661f
 80063d8:	0800661f 	.word	0x0800661f
 80063dc:	08006413 	.word	0x08006413
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063e0:	4b94      	ldr	r3, [pc, #592]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063ec:	4b91      	ldr	r3, [pc, #580]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	08db      	lsrs	r3, r3, #3
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	4a90      	ldr	r2, [pc, #576]	; (8006638 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
 80063fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80063fe:	e111      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006400:	4b8d      	ldr	r3, [pc, #564]	; (8006638 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006402:	61bb      	str	r3, [r7, #24]
    break;
 8006404:	e10e      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006406:	4b8d      	ldr	r3, [pc, #564]	; (800663c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006408:	61bb      	str	r3, [r7, #24]
    break;
 800640a:	e10b      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800640c:	4b8c      	ldr	r3, [pc, #560]	; (8006640 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800640e:	61bb      	str	r3, [r7, #24]
    break;
 8006410:	e108      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006412:	4b88      	ldr	r3, [pc, #544]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800641c:	4b85      	ldr	r3, [pc, #532]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	091b      	lsrs	r3, r3, #4
 8006422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006426:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006428:	4b82      	ldr	r3, [pc, #520]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006432:	4b80      	ldr	r3, [pc, #512]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	08db      	lsrs	r3, r3, #3
 8006438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	fb02 f303 	mul.w	r3, r2, r3
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80e1 	beq.w	8006618 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b02      	cmp	r3, #2
 800645a:	f000 8083 	beq.w	8006564 <HAL_RCC_GetSysClockFreq+0x204>
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b02      	cmp	r3, #2
 8006462:	f200 80a1 	bhi.w	80065a8 <HAL_RCC_GetSysClockFreq+0x248>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0x114>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d056      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006472:	e099      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006474:	4b6f      	ldr	r3, [pc, #444]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d02d      	beq.n	80064dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006480:	4b6c      	ldr	r3, [pc, #432]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	08db      	lsrs	r3, r3, #3
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	4a6b      	ldr	r2, [pc, #428]	; (8006638 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	ee07 3a90 	vmov	s15, r3
 8006498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064aa:	4b62      	ldr	r3, [pc, #392]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80064be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006644 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80064da:	e087      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006648 <HAL_RCC_GetSysClockFreq+0x2e8>
 80064ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ee:	4b51      	ldr	r3, [pc, #324]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006502:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006644 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800651e:	e065      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800664c <HAL_RCC_GetSysClockFreq+0x2ec>
 800652e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006532:	4b40      	ldr	r3, [pc, #256]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006542:	ed97 6a02 	vldr	s12, [r7, #8]
 8006546:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006644 <HAL_RCC_GetSysClockFreq+0x2e4>
 800654a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006562:	e043      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006650 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006576:	4b2f      	ldr	r3, [pc, #188]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006586:	ed97 6a02 	vldr	s12, [r7, #8]
 800658a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006644 <HAL_RCC_GetSysClockFreq+0x2e4>
 800658e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800659a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065a6:	e021      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800664c <HAL_RCC_GetSysClockFreq+0x2ec>
 80065b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ba:	4b1e      	ldr	r3, [pc, #120]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006644 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80065ec:	4b11      	ldr	r3, [pc, #68]	; (8006634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	0a5b      	lsrs	r3, r3, #9
 80065f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f6:	3301      	adds	r3, #1
 80065f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	ee07 3a90 	vmov	s15, r3
 8006600:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006604:	edd7 6a07 	vldr	s13, [r7, #28]
 8006608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006610:	ee17 3a90 	vmov	r3, s15
 8006614:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006616:	e005      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	61bb      	str	r3, [r7, #24]
    break;
 800661c:	e002      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006620:	61bb      	str	r3, [r7, #24]
    break;
 8006622:	bf00      	nop
  }

  return sysclockfreq;
 8006624:	69bb      	ldr	r3, [r7, #24]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3724      	adds	r7, #36	; 0x24
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	58024400 	.word	0x58024400
 8006638:	03d09000 	.word	0x03d09000
 800663c:	003d0900 	.word	0x003d0900
 8006640:	017d7840 	.word	0x017d7840
 8006644:	46000000 	.word	0x46000000
 8006648:	4c742400 	.word	0x4c742400
 800664c:	4a742400 	.word	0x4a742400
 8006650:	4bbebc20 	.word	0x4bbebc20

08006654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800665a:	f7ff fe81 	bl	8006360 <HAL_RCC_GetSysClockFreq>
 800665e:	4602      	mov	r2, r0
 8006660:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	490f      	ldr	r1, [pc, #60]	; (80066a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800666c:	5ccb      	ldrb	r3, [r1, r3]
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006682:	5cd3      	ldrb	r3, [r2, r3]
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	4a07      	ldr	r2, [pc, #28]	; (80066ac <HAL_RCC_GetHCLKFreq+0x58>)
 8006690:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006692:	4a07      	ldr	r2, [pc, #28]	; (80066b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006698:	4b04      	ldr	r3, [pc, #16]	; (80066ac <HAL_RCC_GetHCLKFreq+0x58>)
 800669a:	681b      	ldr	r3, [r3, #0]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	58024400 	.word	0x58024400
 80066a8:	0800e4c8 	.word	0x0800e4c8
 80066ac:	2400002c 	.word	0x2400002c
 80066b0:	24000028 	.word	0x24000028

080066b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066b8:	f7ff ffcc 	bl	8006654 <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	091b      	lsrs	r3, r3, #4
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4904      	ldr	r1, [pc, #16]	; (80066dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	58024400 	.word	0x58024400
 80066dc:	0800e4c8 	.word	0x0800e4c8

080066e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80066e4:	f7ff ffb6 	bl	8006654 <HAL_RCC_GetHCLKFreq>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	4904      	ldr	r1, [pc, #16]	; (8006708 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066f6:	5ccb      	ldrb	r3, [r1, r3]
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	58024400 	.word	0x58024400
 8006708:	0800e4c8 	.word	0x0800e4c8

0800670c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006714:	2300      	movs	r3, #0
 8006716:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006718:	2300      	movs	r3, #0
 800671a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d03f      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800672c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006730:	d02a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006732:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006736:	d824      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800673c:	d018      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800673e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006742:	d81e      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800674c:	d007      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800674e:	e018      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006750:	4ba3      	ldr	r3, [pc, #652]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4aa2      	ldr	r2, [pc, #648]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800675c:	e015      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3304      	adds	r3, #4
 8006762:	2102      	movs	r1, #2
 8006764:	4618      	mov	r0, r3
 8006766:	f001 f9d5 	bl	8007b14 <RCCEx_PLL2_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800676e:	e00c      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	2102      	movs	r1, #2
 8006776:	4618      	mov	r0, r3
 8006778:	f001 fa7e 	bl	8007c78 <RCCEx_PLL3_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006780:	e003      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
      break;
 8006786:	e000      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d109      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006790:	4b93      	ldr	r3, [pc, #588]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679c:	4990      	ldr	r1, [pc, #576]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	650b      	str	r3, [r1, #80]	; 0x50
 80067a2:	e001      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
 80067a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d03d      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d826      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80067bc:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080067d9 	.word	0x080067d9
 80067c8:	080067e7 	.word	0x080067e7
 80067cc:	080067f9 	.word	0x080067f9
 80067d0:	08006811 	.word	0x08006811
 80067d4:	08006811 	.word	0x08006811
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d8:	4b81      	ldr	r3, [pc, #516]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	4a80      	ldr	r2, [pc, #512]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067e4:	e015      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3304      	adds	r3, #4
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 f991 	bl	8007b14 <RCCEx_PLL2_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067f6:	e00c      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3324      	adds	r3, #36	; 0x24
 80067fc:	2100      	movs	r1, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 fa3a 	bl	8007c78 <RCCEx_PLL3_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006808:	e003      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	75fb      	strb	r3, [r7, #23]
      break;
 800680e:	e000      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d109      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006818:	4b71      	ldr	r3, [pc, #452]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800681a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681c:	f023 0207 	bic.w	r2, r3, #7
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006824:	496e      	ldr	r1, [pc, #440]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006826:	4313      	orrs	r3, r2
 8006828:	650b      	str	r3, [r1, #80]	; 0x50
 800682a:	e001      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006838:	2b00      	cmp	r3, #0
 800683a:	d042      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006844:	d02b      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800684a:	d825      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800684c:	2bc0      	cmp	r3, #192	; 0xc0
 800684e:	d028      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006850:	2bc0      	cmp	r3, #192	; 0xc0
 8006852:	d821      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006854:	2b80      	cmp	r3, #128	; 0x80
 8006856:	d016      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006858:	2b80      	cmp	r3, #128	; 0x80
 800685a:	d81d      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d007      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006864:	e018      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006866:	4b5e      	ldr	r3, [pc, #376]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	4a5d      	ldr	r2, [pc, #372]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800686c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006870:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006872:	e017      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	2100      	movs	r1, #0
 800687a:	4618      	mov	r0, r3
 800687c:	f001 f94a 	bl	8007b14 <RCCEx_PLL2_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006884:	e00e      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3324      	adds	r3, #36	; 0x24
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f001 f9f3 	bl	8007c78 <RCCEx_PLL3_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006896:	e005      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
      break;
 800689c:	e002      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800689e:	bf00      	nop
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80068a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80068aa:	4b4d      	ldr	r3, [pc, #308]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b6:	494a      	ldr	r1, [pc, #296]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	650b      	str	r3, [r1, #80]	; 0x50
 80068bc:	e001      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d049      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068d8:	d030      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80068da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068de:	d82a      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80068e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068e4:	d02c      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80068e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068ea:	d824      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80068ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068f0:	d018      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80068f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068f6:	d81e      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80068fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006900:	d007      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006902:	e018      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006904:	4b36      	ldr	r3, [pc, #216]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	4a35      	ldr	r2, [pc, #212]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800690a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006910:	e017      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f8fb 	bl	8007b14 <RCCEx_PLL2_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006922:	e00e      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3324      	adds	r3, #36	; 0x24
 8006928:	2100      	movs	r1, #0
 800692a:	4618      	mov	r0, r3
 800692c:	f001 f9a4 	bl	8007c78 <RCCEx_PLL3_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006934:	e005      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
      break;
 800693a:	e002      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800694a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006956:	4922      	ldr	r1, [pc, #136]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006958:	4313      	orrs	r3, r2
 800695a:	658b      	str	r3, [r1, #88]	; 0x58
 800695c:	e001      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696a:	2b00      	cmp	r3, #0
 800696c:	d04b      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006978:	d030      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800697a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800697e:	d82a      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006980:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006984:	d02e      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006986:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800698a:	d824      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800698c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006990:	d018      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006996:	d81e      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800699c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069a0:	d007      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80069a2:	e018      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a4:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069b0:	e019      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3304      	adds	r3, #4
 80069b6:	2100      	movs	r1, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 f8ab 	bl	8007b14 <RCCEx_PLL2_Config>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80069c2:	e010      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3324      	adds	r3, #36	; 0x24
 80069c8:	2100      	movs	r1, #0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 f954 	bl	8007c78 <RCCEx_PLL3_Config>
 80069d0:	4603      	mov	r3, r0
 80069d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069d4:	e007      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	75fb      	strb	r3, [r7, #23]
      break;
 80069da:	e004      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80069dc:	bf00      	nop
 80069de:	e002      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80069e0:	58024400 	.word	0x58024400
      break;
 80069e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80069ec:	4b99      	ldr	r3, [pc, #612]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069fa:	4996      	ldr	r1, [pc, #600]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	658b      	str	r3, [r1, #88]	; 0x58
 8006a00:	e001      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d032      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a16:	2b30      	cmp	r3, #48	; 0x30
 8006a18:	d01c      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006a1a:	2b30      	cmp	r3, #48	; 0x30
 8006a1c:	d817      	bhi.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d00c      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006a22:	2b20      	cmp	r3, #32
 8006a24:	d813      	bhi.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d016      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d10f      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2e:	4b89      	ldr	r3, [pc, #548]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	4a88      	ldr	r2, [pc, #544]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006a3a:	e00e      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	2102      	movs	r1, #2
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 f866 	bl	8007b14 <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006a4c:	e005      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	75fb      	strb	r3, [r7, #23]
      break;
 8006a52:	e002      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006a54:	bf00      	nop
 8006a56:	e000      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a60:	4b7c      	ldr	r3, [pc, #496]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6c:	4979      	ldr	r1, [pc, #484]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a72:	e001      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d047      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a8c:	d030      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a92:	d82a      	bhi.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006a94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a98:	d02c      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006a9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a9e:	d824      	bhi.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa4:	d018      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aaa:	d81e      	bhi.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab4:	d007      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006ab6:	e018      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab8:	4b66      	ldr	r3, [pc, #408]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	4a65      	ldr	r2, [pc, #404]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ac4:	e017      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f821 	bl	8007b14 <RCCEx_PLL2_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ad6:	e00e      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3324      	adds	r3, #36	; 0x24
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f8ca 	bl	8007c78 <RCCEx_PLL3_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ae8:	e005      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	75fb      	strb	r3, [r7, #23]
      break;
 8006aee:	e002      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006af0:	bf00      	nop
 8006af2:	e000      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006afc:	4b55      	ldr	r3, [pc, #340]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b08:	4952      	ldr	r1, [pc, #328]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b0e:	e001      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d049      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b28:	d02e      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b2e:	d828      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006b30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b34:	d02a      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006b36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b3a:	d822      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006b3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b40:	d026      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006b42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b46:	d81c      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4c:	d010      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b52:	d816      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01d      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5c:	d111      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	2101      	movs	r1, #1
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 ffd5 	bl	8007b14 <RCCEx_PLL2_Config>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b6e:	e012      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3324      	adds	r3, #36	; 0x24
 8006b74:	2101      	movs	r1, #1
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f87e 	bl	8007c78 <RCCEx_PLL3_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b80:	e009      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]
      break;
 8006b86:	e006      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b88:	bf00      	nop
 8006b8a:	e004      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d109      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b9c:	4b2d      	ldr	r3, [pc, #180]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba8:	492a      	ldr	r1, [pc, #168]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	650b      	str	r3, [r1, #80]	; 0x50
 8006bae:	e001      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d04d      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bca:	d02e      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bd0:	d828      	bhi.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd6:	d02a      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bdc:	d822      	bhi.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006bde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006be2:	d026      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006be4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006be8:	d81c      	bhi.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bee:	d010      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf4:	d816      	bhi.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01d      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bfe:	d111      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	2101      	movs	r1, #1
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 ff84 	bl	8007b14 <RCCEx_PLL2_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006c10:	e012      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3324      	adds	r3, #36	; 0x24
 8006c16:	2101      	movs	r1, #1
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 f82d 	bl	8007c78 <RCCEx_PLL3_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006c22:	e009      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	75fb      	strb	r3, [r7, #23]
      break;
 8006c28:	e006      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e004      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006c2e:	bf00      	nop
 8006c30:	e002      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006c32:	bf00      	nop
 8006c34:	e000      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10c      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c4c:	4901      	ldr	r1, [pc, #4]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	658b      	str	r3, [r1, #88]	; 0x58
 8006c52:	e003      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d02f      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c70:	d00e      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c76:	d814      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d015      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c80:	d10f      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c82:	4baf      	ldr	r3, [pc, #700]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	4aae      	ldr	r2, [pc, #696]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c8e:	e00c      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	2101      	movs	r1, #1
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 ff3c 	bl	8007b14 <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ca0:	e003      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca6:	e000      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d109      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cb0:	4ba3      	ldr	r3, [pc, #652]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cbc:	49a0      	ldr	r1, [pc, #640]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	650b      	str	r3, [r1, #80]	; 0x50
 8006cc2:	e001      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
 8006cc6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d032      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d81b      	bhi.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006cdc:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce2:	bf00      	nop
 8006ce4:	08006d1b 	.word	0x08006d1b
 8006ce8:	08006cf5 	.word	0x08006cf5
 8006cec:	08006d03 	.word	0x08006d03
 8006cf0:	08006d1b 	.word	0x08006d1b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf4:	4b92      	ldr	r3, [pc, #584]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	4a91      	ldr	r2, [pc, #580]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006d00:	e00c      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
 8006d06:	2102      	movs	r1, #2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 ff03 	bl	8007b14 <RCCEx_PLL2_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006d12:	e003      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
      break;
 8006d18:	e000      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006d22:	4b87      	ldr	r3, [pc, #540]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d26:	f023 0203 	bic.w	r2, r3, #3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	4984      	ldr	r1, [pc, #528]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d34:	e001      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 8086 	beq.w	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d48:	4b7e      	ldr	r3, [pc, #504]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a7d      	ldr	r2, [pc, #500]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d54:	f7fc fd34 	bl	80037c0 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d5a:	e009      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5c:	f7fc fd30 	bl	80037c0 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b64      	cmp	r3, #100	; 0x64
 8006d68:	d902      	bls.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	75fb      	strb	r3, [r7, #23]
        break;
 8006d6e:	e005      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d70:	4b74      	ldr	r3, [pc, #464]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0ef      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d166      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d82:	4b6f      	ldr	r3, [pc, #444]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d8c:	4053      	eors	r3, r2
 8006d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d013      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d96:	4b6a      	ldr	r3, [pc, #424]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006da0:	4b67      	ldr	r3, [pc, #412]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da4:	4a66      	ldr	r2, [pc, #408]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006daa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dac:	4b64      	ldr	r3, [pc, #400]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	4a63      	ldr	r2, [pc, #396]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006db8:	4a61      	ldr	r2, [pc, #388]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dc8:	d115      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dca:	f7fc fcf9 	bl	80037c0 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dd0:	e00b      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd2:	f7fc fcf5 	bl	80037c0 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d902      	bls.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	75fb      	strb	r3, [r7, #23]
            break;
 8006de8:	e005      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dea:	4b55      	ldr	r3, [pc, #340]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0ed      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d126      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e0a:	d10d      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006e0c:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e1a:	0919      	lsrs	r1, r3, #4
 8006e1c:	4b4a      	ldr	r3, [pc, #296]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006e1e:	400b      	ands	r3, r1
 8006e20:	4947      	ldr	r1, [pc, #284]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	610b      	str	r3, [r1, #16]
 8006e26:	e005      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006e28:	4b45      	ldr	r3, [pc, #276]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	4a44      	ldr	r2, [pc, #272]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e32:	6113      	str	r3, [r2, #16]
 8006e34:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e42:	493f      	ldr	r1, [pc, #252]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	670b      	str	r3, [r1, #112]	; 0x70
 8006e48:	e004      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	75bb      	strb	r3, [r7, #22]
 8006e4e:	e001      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8085 	beq.w	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e66:	2b28      	cmp	r3, #40	; 0x28
 8006e68:	d866      	bhi.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006f4d 	.word	0x08006f4d
 8006e74:	08006f39 	.word	0x08006f39
 8006e78:	08006f39 	.word	0x08006f39
 8006e7c:	08006f39 	.word	0x08006f39
 8006e80:	08006f39 	.word	0x08006f39
 8006e84:	08006f39 	.word	0x08006f39
 8006e88:	08006f39 	.word	0x08006f39
 8006e8c:	08006f39 	.word	0x08006f39
 8006e90:	08006f15 	.word	0x08006f15
 8006e94:	08006f39 	.word	0x08006f39
 8006e98:	08006f39 	.word	0x08006f39
 8006e9c:	08006f39 	.word	0x08006f39
 8006ea0:	08006f39 	.word	0x08006f39
 8006ea4:	08006f39 	.word	0x08006f39
 8006ea8:	08006f39 	.word	0x08006f39
 8006eac:	08006f39 	.word	0x08006f39
 8006eb0:	08006f27 	.word	0x08006f27
 8006eb4:	08006f39 	.word	0x08006f39
 8006eb8:	08006f39 	.word	0x08006f39
 8006ebc:	08006f39 	.word	0x08006f39
 8006ec0:	08006f39 	.word	0x08006f39
 8006ec4:	08006f39 	.word	0x08006f39
 8006ec8:	08006f39 	.word	0x08006f39
 8006ecc:	08006f39 	.word	0x08006f39
 8006ed0:	08006f4d 	.word	0x08006f4d
 8006ed4:	08006f39 	.word	0x08006f39
 8006ed8:	08006f39 	.word	0x08006f39
 8006edc:	08006f39 	.word	0x08006f39
 8006ee0:	08006f39 	.word	0x08006f39
 8006ee4:	08006f39 	.word	0x08006f39
 8006ee8:	08006f39 	.word	0x08006f39
 8006eec:	08006f39 	.word	0x08006f39
 8006ef0:	08006f4d 	.word	0x08006f4d
 8006ef4:	08006f39 	.word	0x08006f39
 8006ef8:	08006f39 	.word	0x08006f39
 8006efc:	08006f39 	.word	0x08006f39
 8006f00:	08006f39 	.word	0x08006f39
 8006f04:	08006f39 	.word	0x08006f39
 8006f08:	08006f39 	.word	0x08006f39
 8006f0c:	08006f39 	.word	0x08006f39
 8006f10:	08006f4d 	.word	0x08006f4d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	2101      	movs	r1, #1
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fdfa 	bl	8007b14 <RCCEx_PLL2_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006f24:	e013      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	3324      	adds	r3, #36	; 0x24
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fea3 	bl	8007c78 <RCCEx_PLL3_Config>
 8006f32:	4603      	mov	r3, r0
 8006f34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006f36:	e00a      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3c:	e007      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
 8006f44:	58024800 	.word	0x58024800
 8006f48:	00ffffcf 	.word	0x00ffffcf
      break;
 8006f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d109      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f54:	4b96      	ldr	r3, [pc, #600]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f58:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f60:	4993      	ldr	r1, [pc, #588]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	654b      	str	r3, [r1, #84]	; 0x54
 8006f66:	e001      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
 8006f6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d038      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7c:	2b05      	cmp	r3, #5
 8006f7e:	d821      	bhi.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006f80:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08006fcb 	.word	0x08006fcb
 8006f8c:	08006fa1 	.word	0x08006fa1
 8006f90:	08006fb3 	.word	0x08006fb3
 8006f94:	08006fcb 	.word	0x08006fcb
 8006f98:	08006fcb 	.word	0x08006fcb
 8006f9c:	08006fcb 	.word	0x08006fcb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fdb4 	bl	8007b14 <RCCEx_PLL2_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006fb0:	e00c      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3324      	adds	r3, #36	; 0x24
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fe5d 	bl	8007c78 <RCCEx_PLL3_Config>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006fc2:	e003      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc8:	e000      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006fd2:	4b77      	ldr	r3, [pc, #476]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd6:	f023 0207 	bic.w	r2, r3, #7
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fde:	4974      	ldr	r1, [pc, #464]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	654b      	str	r3, [r1, #84]	; 0x54
 8006fe4:	e001      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d03a      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d821      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007000:	a201      	add	r2, pc, #4	; (adr r2, 8007008 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007006:	bf00      	nop
 8007008:	0800704b 	.word	0x0800704b
 800700c:	08007021 	.word	0x08007021
 8007010:	08007033 	.word	0x08007033
 8007014:	0800704b 	.word	0x0800704b
 8007018:	0800704b 	.word	0x0800704b
 800701c:	0800704b 	.word	0x0800704b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3304      	adds	r3, #4
 8007024:	2101      	movs	r1, #1
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fd74 	bl	8007b14 <RCCEx_PLL2_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007030:	e00c      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3324      	adds	r3, #36	; 0x24
 8007036:	2101      	movs	r1, #1
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fe1d 	bl	8007c78 <RCCEx_PLL3_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007042:	e003      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	75fb      	strb	r3, [r7, #23]
      break;
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800704a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007052:	4b57      	ldr	r3, [pc, #348]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007056:	f023 0207 	bic.w	r2, r3, #7
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	4953      	ldr	r1, [pc, #332]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007062:	4313      	orrs	r3, r2
 8007064:	658b      	str	r3, [r1, #88]	; 0x58
 8007066:	e001      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	d04b      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800707e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007082:	d02e      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007088:	d828      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800708a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708e:	d02a      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007094:	d822      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007096:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800709a:	d026      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800709c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070a0:	d81c      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80070a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a6:	d010      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80070a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ac:	d816      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01d      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80070b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070b6:	d111      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3304      	adds	r3, #4
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fd28 	bl	8007b14 <RCCEx_PLL2_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80070c8:	e012      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3324      	adds	r3, #36	; 0x24
 80070ce:	2102      	movs	r1, #2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fdd1 	bl	8007c78 <RCCEx_PLL3_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80070da:	e009      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	75fb      	strb	r3, [r7, #23]
      break;
 80070e0:	e006      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80070e2:	bf00      	nop
 80070e4:	e004      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80070e6:	bf00      	nop
 80070e8:	e002      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80070ea:	bf00      	nop
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80070ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070f6:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007104:	492a      	ldr	r1, [pc, #168]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007106:	4313      	orrs	r3, r2
 8007108:	654b      	str	r3, [r1, #84]	; 0x54
 800710a:	e001      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007118:	2b00      	cmp	r3, #0
 800711a:	d04d      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007122:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007126:	d02e      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007128:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800712c:	d828      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007132:	d02a      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007138:	d822      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800713a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800713e:	d026      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007144:	d81c      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714a:	d010      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800714c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007150:	d816      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01d      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800715a:	d111      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	2100      	movs	r1, #0
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fcd6 	bl	8007b14 <RCCEx_PLL2_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800716c:	e012      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3324      	adds	r3, #36	; 0x24
 8007172:	2102      	movs	r1, #2
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fd7f 	bl	8007c78 <RCCEx_PLL3_Config>
 800717a:	4603      	mov	r3, r0
 800717c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800717e:	e009      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	75fb      	strb	r3, [r7, #23]
      break;
 8007184:	e006      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007186:	bf00      	nop
 8007188:	e004      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800718a:	bf00      	nop
 800718c:	e002      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800718e:	bf00      	nop
 8007190:	e000      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10c      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800719c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071a8:	4901      	ldr	r1, [pc, #4]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	658b      	str	r3, [r1, #88]	; 0x58
 80071ae:	e003      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80071b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d04b      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80071ce:	d02e      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80071d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80071d4:	d828      	bhi.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80071d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071da:	d02a      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80071dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e0:	d822      	bhi.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80071e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80071e6:	d026      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80071e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80071ec:	d81c      	bhi.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80071ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071f2:	d010      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80071f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071f8:	d816      	bhi.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01d      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80071fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007202:	d111      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3304      	adds	r3, #4
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fc82 	bl	8007b14 <RCCEx_PLL2_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007214:	e012      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3324      	adds	r3, #36	; 0x24
 800721a:	2102      	movs	r1, #2
 800721c:	4618      	mov	r0, r3
 800721e:	f000 fd2b 	bl	8007c78 <RCCEx_PLL3_Config>
 8007222:	4603      	mov	r3, r0
 8007224:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007226:	e009      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
      break;
 800722c:	e006      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800722e:	bf00      	nop
 8007230:	e004      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007232:	bf00      	nop
 8007234:	e002      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007236:	bf00      	nop
 8007238:	e000      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800723a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007242:	4b9d      	ldr	r3, [pc, #628]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007250:	4999      	ldr	r1, [pc, #612]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007252:	4313      	orrs	r3, r2
 8007254:	658b      	str	r3, [r1, #88]	; 0x58
 8007256:	e001      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007272:	d10a      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3324      	adds	r3, #36	; 0x24
 8007278:	2102      	movs	r1, #2
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fcfc 	bl	8007c78 <RCCEx_PLL3_Config>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800728a:	4b8b      	ldr	r3, [pc, #556]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800728c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007298:	4987      	ldr	r1, [pc, #540]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800729a:	4313      	orrs	r3, r2
 800729c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0310 	and.w	r3, r3, #16
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d01a      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b4:	d10a      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3324      	adds	r3, #36	; 0x24
 80072ba:	2102      	movs	r1, #2
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 fcdb 	bl	8007c78 <RCCEx_PLL3_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072cc:	4b7a      	ldr	r3, [pc, #488]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072da:	4977      	ldr	r1, [pc, #476]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d034      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072f6:	d01d      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80072f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072fc:	d817      	bhi.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007306:	d009      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007308:	e011      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3304      	adds	r3, #4
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fbff 	bl	8007b14 <RCCEx_PLL2_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800731a:	e00c      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	2102      	movs	r1, #2
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fca8 	bl	8007c78 <RCCEx_PLL3_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800732c:	e003      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
      break;
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007336:	7dfb      	ldrb	r3, [r7, #23]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800733c:	4b5e      	ldr	r3, [pc, #376]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800733e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800734a:	495b      	ldr	r1, [pc, #364]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800734c:	4313      	orrs	r3, r2
 800734e:	658b      	str	r3, [r1, #88]	; 0x58
 8007350:	e001      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d033      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007368:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800736c:	d01c      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800736e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007372:	d816      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007378:	d003      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800737a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800737e:	d007      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007380:	e00f      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007382:	4b4d      	ldr	r3, [pc, #308]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	4a4c      	ldr	r2, [pc, #304]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800738c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800738e:	e00c      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3324      	adds	r3, #36	; 0x24
 8007394:	2101      	movs	r1, #1
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fc6e 	bl	8007c78 <RCCEx_PLL3_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80073a0:	e003      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	75fb      	strb	r3, [r7, #23]
      break;
 80073a6:	e000      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80073a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10a      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073b0:	4b41      	ldr	r3, [pc, #260]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073be:	493e      	ldr	r1, [pc, #248]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	654b      	str	r3, [r1, #84]	; 0x54
 80073c4:	e001      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d029      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80073de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e2:	d007      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80073e4:	e00f      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e6:	4b34      	ldr	r3, [pc, #208]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	4a33      	ldr	r2, [pc, #204]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80073f2:	e00b      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3304      	adds	r3, #4
 80073f8:	2102      	movs	r1, #2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fb8a 	bl	8007b14 <RCCEx_PLL2_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007404:	e002      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	75fb      	strb	r3, [r7, #23]
      break;
 800740a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007412:	4b29      	ldr	r3, [pc, #164]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741e:	4926      	ldr	r1, [pc, #152]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007420:	4313      	orrs	r3, r2
 8007422:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007424:	e001      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3324      	adds	r3, #36	; 0x24
 800743a:	2102      	movs	r1, #2
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fc1b 	bl	8007c78 <RCCEx_PLL3_Config>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d033      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007460:	d017      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007466:	d811      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	d013      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800746e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007472:	d80b      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d010      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747c:	d106      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800747e:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	4a0d      	ldr	r2, [pc, #52]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007488:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800748a:	e007      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	75fb      	strb	r3, [r7, #23]
      break;
 8007490:	e004      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007492:	bf00      	nop
 8007494:	e002      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007496:	bf00      	nop
 8007498:	e000      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800749a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800749c:	7dfb      	ldrb	r3, [r7, #23]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10c      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ae:	4902      	ldr	r1, [pc, #8]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	654b      	str	r3, [r1, #84]	; 0x54
 80074b4:	e004      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80074b6:	bf00      	nop
 80074b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d008      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074cc:	4b31      	ldr	r3, [pc, #196]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d8:	492e      	ldr	r1, [pc, #184]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80074ea:	4b2a      	ldr	r3, [pc, #168]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074f8:	4926      	ldr	r1, [pc, #152]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800750a:	4b22      	ldr	r3, [pc, #136]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800750c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007516:	491f      	ldr	r1, [pc, #124]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007518:	4313      	orrs	r3, r2
 800751a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00d      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007528:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4a19      	ldr	r2, [pc, #100]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800752e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007532:	6113      	str	r3, [r2, #16]
 8007534:	4b17      	ldr	r3, [pc, #92]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800753e:	4915      	ldr	r1, [pc, #84]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007540:	4313      	orrs	r3, r2
 8007542:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	da08      	bge.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800754c:	4b11      	ldr	r3, [pc, #68]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007550:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007558:	490e      	ldr	r1, [pc, #56]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800755a:	4313      	orrs	r3, r2
 800755c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d009      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800756a:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800756c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007578:	4906      	ldr	r1, [pc, #24]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800757a:	4313      	orrs	r3, r2
 800757c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800757e:	7dbb      	ldrb	r3, [r7, #22]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	e000      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	58024400 	.word	0x58024400

08007598 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800759c:	f7ff f85a 	bl	8006654 <HAL_RCC_GetHCLKFreq>
 80075a0:	4602      	mov	r2, r0
 80075a2:	4b06      	ldr	r3, [pc, #24]	; (80075bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	091b      	lsrs	r3, r3, #4
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	4904      	ldr	r1, [pc, #16]	; (80075c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075ae:	5ccb      	ldrb	r3, [r1, r3]
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	58024400 	.word	0x58024400
 80075c0:	0800e4c8 	.word	0x0800e4c8

080075c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b089      	sub	sp, #36	; 0x24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075cc:	4ba1      	ldr	r3, [pc, #644]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80075d6:	4b9f      	ldr	r3, [pc, #636]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075da:	0b1b      	lsrs	r3, r3, #12
 80075dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075e2:	4b9c      	ldr	r3, [pc, #624]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80075ee:	4b99      	ldr	r3, [pc, #612]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f2:	08db      	lsrs	r3, r3, #3
 80075f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	fb02 f303 	mul.w	r3, r2, r3
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8111 	beq.w	8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	2b02      	cmp	r3, #2
 8007616:	f000 8083 	beq.w	8007720 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b02      	cmp	r3, #2
 800761e:	f200 80a1 	bhi.w	8007764 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d056      	beq.n	80076dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800762e:	e099      	b.n	8007764 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007630:	4b88      	ldr	r3, [pc, #544]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d02d      	beq.n	8007698 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800763c:	4b85      	ldr	r3, [pc, #532]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	08db      	lsrs	r3, r3, #3
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	4a84      	ldr	r2, [pc, #528]	; (8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
 800764c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007666:	4b7b      	ldr	r3, [pc, #492]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007676:	ed97 6a03 	vldr	s12, [r7, #12]
 800767a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800785c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800767e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007692:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007696:	e087      	b.n	80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80076a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076aa:	4b6a      	ldr	r3, [pc, #424]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80076be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800785c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076da:	e065      	b.n	80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ee:	4b59      	ldr	r3, [pc, #356]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007702:	eddf 5a56 	vldr	s11, [pc, #344]	; 800785c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800771e:	e043      	b.n	80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007868 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800772e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007732:	4b48      	ldr	r3, [pc, #288]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007742:	ed97 6a03 	vldr	s12, [r7, #12]
 8007746:	eddf 5a45 	vldr	s11, [pc, #276]	; 800785c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800774a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007762:	e021      	b.n	80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007776:	4b37      	ldr	r3, [pc, #220]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777e:	ee07 3a90 	vmov	s15, r3
 8007782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007786:	ed97 6a03 	vldr	s12, [r7, #12]
 800778a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800785c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800778e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800779a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80077a8:	4b2a      	ldr	r3, [pc, #168]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	0a5b      	lsrs	r3, r3, #9
 80077ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ce:	ee17 2a90 	vmov	r2, s15
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80077d6:	4b1f      	ldr	r3, [pc, #124]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	0c1b      	lsrs	r3, r3, #16
 80077dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e0:	ee07 3a90 	vmov	s15, r3
 80077e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fc:	ee17 2a90 	vmov	r2, s15
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007804:	4b13      	ldr	r3, [pc, #76]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	0e1b      	lsrs	r3, r3, #24
 800780a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800781a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800781e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800782a:	ee17 2a90 	vmov	r2, s15
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007832:	e008      	b.n	8007846 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	609a      	str	r2, [r3, #8]
}
 8007846:	bf00      	nop
 8007848:	3724      	adds	r7, #36	; 0x24
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	58024400 	.word	0x58024400
 8007858:	03d09000 	.word	0x03d09000
 800785c:	46000000 	.word	0x46000000
 8007860:	4c742400 	.word	0x4c742400
 8007864:	4a742400 	.word	0x4a742400
 8007868:	4bbebc20 	.word	0x4bbebc20

0800786c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800786c:	b480      	push	{r7}
 800786e:	b089      	sub	sp, #36	; 0x24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007874:	4ba1      	ldr	r3, [pc, #644]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	f003 0303 	and.w	r3, r3, #3
 800787c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800787e:	4b9f      	ldr	r3, [pc, #636]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	0d1b      	lsrs	r3, r3, #20
 8007884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007888:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800788a:	4b9c      	ldr	r3, [pc, #624]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007896:	4b99      	ldr	r3, [pc, #612]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789a:	08db      	lsrs	r3, r3, #3
 800789c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	fb02 f303 	mul.w	r3, r2, r3
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8111 	beq.w	8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	f000 8083 	beq.w	80079c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	f200 80a1 	bhi.w	8007a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d056      	beq.n	8007984 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80078d6:	e099      	b.n	8007a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078d8:	4b88      	ldr	r3, [pc, #544]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d02d      	beq.n	8007940 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078e4:	4b85      	ldr	r3, [pc, #532]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	08db      	lsrs	r3, r3, #3
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	4a84      	ldr	r2, [pc, #528]	; (8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078f0:	fa22 f303 	lsr.w	r3, r2, r3
 80078f4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790e:	4b7b      	ldr	r3, [pc, #492]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007922:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800793e:	e087      	b.n	8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800794e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007952:	4b6a      	ldr	r3, [pc, #424]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007962:	ed97 6a03 	vldr	s12, [r7, #12]
 8007966:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800796a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007982:	e065      	b.n	8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	ee07 3a90 	vmov	s15, r3
 800798a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007996:	4b59      	ldr	r3, [pc, #356]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079c6:	e043      	b.n	8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	ee07 3a90 	vmov	s15, r3
 80079ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80079d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079da:	4b48      	ldr	r3, [pc, #288]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a0a:	e021      	b.n	8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1e:	4b37      	ldr	r3, [pc, #220]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a50:	4b2a      	ldr	r3, [pc, #168]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a54:	0a5b      	lsrs	r3, r3, #9
 8007a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a76:	ee17 2a90 	vmov	r2, s15
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a7e:	4b1f      	ldr	r3, [pc, #124]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	0c1b      	lsrs	r3, r3, #16
 8007a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a88:	ee07 3a90 	vmov	s15, r3
 8007a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aa4:	ee17 2a90 	vmov	r2, s15
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007aac:	4b13      	ldr	r3, [pc, #76]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	0e1b      	lsrs	r3, r3, #24
 8007ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad2:	ee17 2a90 	vmov	r2, s15
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ada:	e008      	b.n	8007aee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	609a      	str	r2, [r3, #8]
}
 8007aee:	bf00      	nop
 8007af0:	3724      	adds	r7, #36	; 0x24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	58024400 	.word	0x58024400
 8007b00:	03d09000 	.word	0x03d09000
 8007b04:	46000000 	.word	0x46000000
 8007b08:	4c742400 	.word	0x4c742400
 8007b0c:	4a742400 	.word	0x4a742400
 8007b10:	4bbebc20 	.word	0x4bbebc20

08007b14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b22:	4b53      	ldr	r3, [pc, #332]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d101      	bne.n	8007b32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e099      	b.n	8007c66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b32:	4b4f      	ldr	r3, [pc, #316]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a4e      	ldr	r2, [pc, #312]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b3e:	f7fb fe3f 	bl	80037c0 <HAL_GetTick>
 8007b42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b44:	e008      	b.n	8007b58 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b46:	f7fb fe3b 	bl	80037c0 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e086      	b.n	8007c66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b58:	4b45      	ldr	r3, [pc, #276]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1f0      	bne.n	8007b46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b64:	4b42      	ldr	r3, [pc, #264]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	031b      	lsls	r3, r3, #12
 8007b72:	493f      	ldr	r1, [pc, #252]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	628b      	str	r3, [r1, #40]	; 0x28
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	025b      	lsls	r3, r3, #9
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	041b      	lsls	r3, r3, #16
 8007b96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	061b      	lsls	r3, r3, #24
 8007ba4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ba8:	4931      	ldr	r1, [pc, #196]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bae:	4b30      	ldr	r3, [pc, #192]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	492d      	ldr	r1, [pc, #180]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bc0:	4b2b      	ldr	r3, [pc, #172]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	f023 0220 	bic.w	r2, r3, #32
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	4928      	ldr	r1, [pc, #160]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bd2:	4b27      	ldr	r3, [pc, #156]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	4a26      	ldr	r2, [pc, #152]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	f023 0310 	bic.w	r3, r3, #16
 8007bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bde:	4b24      	ldr	r3, [pc, #144]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007be2:	4b24      	ldr	r3, [pc, #144]	; (8007c74 <RCCEx_PLL2_Config+0x160>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	69d2      	ldr	r2, [r2, #28]
 8007bea:	00d2      	lsls	r2, r2, #3
 8007bec:	4920      	ldr	r1, [pc, #128]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bf2:	4b1f      	ldr	r3, [pc, #124]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf6:	4a1e      	ldr	r2, [pc, #120]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	f043 0310 	orr.w	r3, r3, #16
 8007bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d106      	bne.n	8007c12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c04:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	4a19      	ldr	r2, [pc, #100]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c10:	e00f      	b.n	8007c32 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d106      	bne.n	8007c26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	4a14      	ldr	r2, [pc, #80]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c24:	e005      	b.n	8007c32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c26:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	4a11      	ldr	r2, [pc, #68]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c32:	4b0f      	ldr	r3, [pc, #60]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a0e      	ldr	r2, [pc, #56]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3e:	f7fb fdbf 	bl	80037c0 <HAL_GetTick>
 8007c42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c44:	e008      	b.n	8007c58 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c46:	f7fb fdbb 	bl	80037c0 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d901      	bls.n	8007c58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e006      	b.n	8007c66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c58:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0f0      	beq.n	8007c46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	58024400 	.word	0x58024400
 8007c74:	ffff0007 	.word	0xffff0007

08007c78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c86:	4b53      	ldr	r3, [pc, #332]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d101      	bne.n	8007c96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e099      	b.n	8007dca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c96:	4b4f      	ldr	r3, [pc, #316]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a4e      	ldr	r2, [pc, #312]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca2:	f7fb fd8d 	bl	80037c0 <HAL_GetTick>
 8007ca6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ca8:	e008      	b.n	8007cbc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007caa:	f7fb fd89 	bl	80037c0 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e086      	b.n	8007dca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cbc:	4b45      	ldr	r3, [pc, #276]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1f0      	bne.n	8007caa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cc8:	4b42      	ldr	r3, [pc, #264]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	051b      	lsls	r3, r3, #20
 8007cd6:	493f      	ldr	r1, [pc, #252]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	628b      	str	r3, [r1, #40]	; 0x28
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	025b      	lsls	r3, r3, #9
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	041b      	lsls	r3, r3, #16
 8007cfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	061b      	lsls	r3, r3, #24
 8007d08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d0c:	4931      	ldr	r1, [pc, #196]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d12:	4b30      	ldr	r3, [pc, #192]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	492d      	ldr	r1, [pc, #180]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d24:	4b2b      	ldr	r3, [pc, #172]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	4928      	ldr	r1, [pc, #160]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d36:	4b27      	ldr	r3, [pc, #156]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	4a26      	ldr	r2, [pc, #152]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d42:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d46:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <RCCEx_PLL3_Config+0x160>)
 8007d48:	4013      	ands	r3, r2
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	69d2      	ldr	r2, [r2, #28]
 8007d4e:	00d2      	lsls	r2, r2, #3
 8007d50:	4920      	ldr	r1, [pc, #128]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d56:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	4a1e      	ldr	r2, [pc, #120]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d106      	bne.n	8007d76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d68:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	4a19      	ldr	r2, [pc, #100]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d74:	e00f      	b.n	8007d96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d106      	bne.n	8007d8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d7c:	4b15      	ldr	r3, [pc, #84]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	4a14      	ldr	r2, [pc, #80]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d88:	e005      	b.n	8007d96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	4a11      	ldr	r2, [pc, #68]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d96:	4b0f      	ldr	r3, [pc, #60]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a0e      	ldr	r2, [pc, #56]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da2:	f7fb fd0d 	bl	80037c0 <HAL_GetTick>
 8007da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007da8:	e008      	b.n	8007dbc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007daa:	f7fb fd09 	bl	80037c0 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e006      	b.n	8007dca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dbc:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f0      	beq.n	8007daa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	ffff0007 	.word	0xffff0007

08007ddc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e0f1      	b.n	8007fd2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a78      	ldr	r2, [pc, #480]	; (8007fdc <HAL_SPI_Init+0x200>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00f      	beq.n	8007e1e <HAL_SPI_Init+0x42>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a77      	ldr	r2, [pc, #476]	; (8007fe0 <HAL_SPI_Init+0x204>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00a      	beq.n	8007e1e <HAL_SPI_Init+0x42>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a75      	ldr	r2, [pc, #468]	; (8007fe4 <HAL_SPI_Init+0x208>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d005      	beq.n	8007e1e <HAL_SPI_Init+0x42>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	2b0f      	cmp	r3, #15
 8007e18:	d901      	bls.n	8007e1e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e0d9      	b.n	8007fd2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f8e2 	bl	8007fe8 <SPI_GetPacketSize>
 8007e24:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a6c      	ldr	r2, [pc, #432]	; (8007fdc <HAL_SPI_Init+0x200>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00c      	beq.n	8007e4a <HAL_SPI_Init+0x6e>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a6a      	ldr	r2, [pc, #424]	; (8007fe0 <HAL_SPI_Init+0x204>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d007      	beq.n	8007e4a <HAL_SPI_Init+0x6e>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a69      	ldr	r2, [pc, #420]	; (8007fe4 <HAL_SPI_Init+0x208>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d002      	beq.n	8007e4a <HAL_SPI_Init+0x6e>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b08      	cmp	r3, #8
 8007e48:	d811      	bhi.n	8007e6e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e4e:	4a63      	ldr	r2, [pc, #396]	; (8007fdc <HAL_SPI_Init+0x200>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d009      	beq.n	8007e68 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a61      	ldr	r2, [pc, #388]	; (8007fe0 <HAL_SPI_Init+0x204>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d004      	beq.n	8007e68 <HAL_SPI_Init+0x8c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a60      	ldr	r2, [pc, #384]	; (8007fe4 <HAL_SPI_Init+0x208>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d104      	bne.n	8007e72 <HAL_SPI_Init+0x96>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b10      	cmp	r3, #16
 8007e6c:	d901      	bls.n	8007e72 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e0af      	b.n	8007fd2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d106      	bne.n	8007e8c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fa f852 	bl	8001f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0201 	bic.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007eae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eb8:	d119      	bne.n	8007eee <HAL_SPI_Init+0x112>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ec2:	d103      	bne.n	8007ecc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d008      	beq.n	8007ede <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10c      	bne.n	8007eee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007edc:	d107      	bne.n	8007eee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007eec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	69da      	ldr	r2, [r3, #28]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f00:	ea42 0103 	orr.w	r1, r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	431a      	orrs	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	431a      	orrs	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f42:	431a      	orrs	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f4e:	ea42 0103 	orr.w	r1, r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d113      	bne.n	8007f8e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	40013000 	.word	0x40013000
 8007fe0:	40003800 	.word	0x40003800
 8007fe4:	40003c00 	.word	0x40003c00

08007fe8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff4:	095b      	lsrs	r3, r3, #5
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	3301      	adds	r3, #1
 8008000:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	3307      	adds	r3, #7
 8008006:	08db      	lsrs	r3, r3, #3
 8008008:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e049      	b.n	80080c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d106      	bne.n	800804a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7f9 ffff 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3304      	adds	r3, #4
 800805a:	4619      	mov	r1, r3
 800805c:	4610      	mov	r0, r2
 800805e:	f001 f803 	bl	8009068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d001      	beq.n	80080e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e054      	b.n	800818e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0201 	orr.w	r2, r2, #1
 80080fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a26      	ldr	r2, [pc, #152]	; (800819c <HAL_TIM_Base_Start_IT+0xd0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d022      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800810e:	d01d      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a22      	ldr	r2, [pc, #136]	; (80081a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d018      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d013      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a1f      	ldr	r2, [pc, #124]	; (80081a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00e      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a1e      	ldr	r2, [pc, #120]	; (80081ac <HAL_TIM_Base_Start_IT+0xe0>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d009      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1c      	ldr	r2, [pc, #112]	; (80081b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d004      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x80>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a1b      	ldr	r2, [pc, #108]	; (80081b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d115      	bne.n	8008178 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	4b19      	ldr	r3, [pc, #100]	; (80081b8 <HAL_TIM_Base_Start_IT+0xec>)
 8008154:	4013      	ands	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b06      	cmp	r3, #6
 800815c:	d015      	beq.n	800818a <HAL_TIM_Base_Start_IT+0xbe>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d011      	beq.n	800818a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f042 0201 	orr.w	r2, r2, #1
 8008174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008176:	e008      	b.n	800818a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	e000      	b.n	800818c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800
 80081a8:	40000c00 	.word	0x40000c00
 80081ac:	40010400 	.word	0x40010400
 80081b0:	40001800 	.word	0x40001800
 80081b4:	40014000 	.word	0x40014000
 80081b8:	00010007 	.word	0x00010007

080081bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e049      	b.n	8008262 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f841 	bl	800826a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f000 ff34 	bl	8009068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
	...

08008280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <HAL_TIM_PWM_Start+0x24>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	bf14      	ite	ne
 800829c:	2301      	movne	r3, #1
 800829e:	2300      	moveq	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	e03c      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d109      	bne.n	80082be <HAL_TIM_PWM_Start+0x3e>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	bf14      	ite	ne
 80082b6:	2301      	movne	r3, #1
 80082b8:	2300      	moveq	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	e02f      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d109      	bne.n	80082d8 <HAL_TIM_PWM_Start+0x58>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e022      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b0c      	cmp	r3, #12
 80082dc:	d109      	bne.n	80082f2 <HAL_TIM_PWM_Start+0x72>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	bf14      	ite	ne
 80082ea:	2301      	movne	r3, #1
 80082ec:	2300      	moveq	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	e015      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b10      	cmp	r3, #16
 80082f6:	d109      	bne.n	800830c <HAL_TIM_PWM_Start+0x8c>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	bf14      	ite	ne
 8008304:	2301      	movne	r3, #1
 8008306:	2300      	moveq	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	e008      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	bf14      	ite	ne
 8008318:	2301      	movne	r3, #1
 800831a:	2300      	moveq	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e0a1      	b.n	800846a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <HAL_TIM_PWM_Start+0xb6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008334:	e023      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b04      	cmp	r3, #4
 800833a:	d104      	bne.n	8008346 <HAL_TIM_PWM_Start+0xc6>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008344:	e01b      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b08      	cmp	r3, #8
 800834a:	d104      	bne.n	8008356 <HAL_TIM_PWM_Start+0xd6>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008354:	e013      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b0c      	cmp	r3, #12
 800835a:	d104      	bne.n	8008366 <HAL_TIM_PWM_Start+0xe6>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008364:	e00b      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b10      	cmp	r3, #16
 800836a:	d104      	bne.n	8008376 <HAL_TIM_PWM_Start+0xf6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008374:	e003      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2201      	movs	r2, #1
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fba6 	bl	8009ad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a38      	ldr	r2, [pc, #224]	; (8008474 <HAL_TIM_PWM_Start+0x1f4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a37      	ldr	r2, [pc, #220]	; (8008478 <HAL_TIM_PWM_Start+0x1f8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00e      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a35      	ldr	r2, [pc, #212]	; (800847c <HAL_TIM_PWM_Start+0x1fc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d009      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a34      	ldr	r2, [pc, #208]	; (8008480 <HAL_TIM_PWM_Start+0x200>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d004      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a32      	ldr	r2, [pc, #200]	; (8008484 <HAL_TIM_PWM_Start+0x204>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d101      	bne.n	80083c2 <HAL_TIM_PWM_Start+0x142>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <HAL_TIM_PWM_Start+0x144>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d007      	beq.n	80083d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a25      	ldr	r2, [pc, #148]	; (8008474 <HAL_TIM_PWM_Start+0x1f4>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d022      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ea:	d01d      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a25      	ldr	r2, [pc, #148]	; (8008488 <HAL_TIM_PWM_Start+0x208>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d018      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a24      	ldr	r2, [pc, #144]	; (800848c <HAL_TIM_PWM_Start+0x20c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a22      	ldr	r2, [pc, #136]	; (8008490 <HAL_TIM_PWM_Start+0x210>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00e      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1a      	ldr	r2, [pc, #104]	; (8008478 <HAL_TIM_PWM_Start+0x1f8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d009      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1e      	ldr	r2, [pc, #120]	; (8008494 <HAL_TIM_PWM_Start+0x214>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d004      	beq.n	8008428 <HAL_TIM_PWM_Start+0x1a8>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a16      	ldr	r2, [pc, #88]	; (800847c <HAL_TIM_PWM_Start+0x1fc>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d115      	bne.n	8008454 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <HAL_TIM_PWM_Start+0x218>)
 8008430:	4013      	ands	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b06      	cmp	r3, #6
 8008438:	d015      	beq.n	8008466 <HAL_TIM_PWM_Start+0x1e6>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008440:	d011      	beq.n	8008466 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	e008      	b.n	8008466 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e000      	b.n	8008468 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008466:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	40010000 	.word	0x40010000
 8008478:	40010400 	.word	0x40010400
 800847c:	40014000 	.word	0x40014000
 8008480:	40014400 	.word	0x40014400
 8008484:	40014800 	.word	0x40014800
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800
 8008490:	40000c00 	.word	0x40000c00
 8008494:	40001800 	.word	0x40001800
 8008498:	00010007 	.word	0x00010007

0800849c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e049      	b.n	8008542 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f841 	bl	800854a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f000 fdc4 	bl	8009068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008552:	bf00      	nop
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d104      	bne.n	800857e <HAL_TIM_IC_Start_IT+0x1e>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800857a:	b2db      	uxtb	r3, r3
 800857c:	e023      	b.n	80085c6 <HAL_TIM_IC_Start_IT+0x66>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b04      	cmp	r3, #4
 8008582:	d104      	bne.n	800858e <HAL_TIM_IC_Start_IT+0x2e>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800858a:	b2db      	uxtb	r3, r3
 800858c:	e01b      	b.n	80085c6 <HAL_TIM_IC_Start_IT+0x66>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b08      	cmp	r3, #8
 8008592:	d104      	bne.n	800859e <HAL_TIM_IC_Start_IT+0x3e>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800859a:	b2db      	uxtb	r3, r3
 800859c:	e013      	b.n	80085c6 <HAL_TIM_IC_Start_IT+0x66>
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b0c      	cmp	r3, #12
 80085a2:	d104      	bne.n	80085ae <HAL_TIM_IC_Start_IT+0x4e>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	e00b      	b.n	80085c6 <HAL_TIM_IC_Start_IT+0x66>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b10      	cmp	r3, #16
 80085b2:	d104      	bne.n	80085be <HAL_TIM_IC_Start_IT+0x5e>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	e003      	b.n	80085c6 <HAL_TIM_IC_Start_IT+0x66>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <HAL_TIM_IC_Start_IT+0x78>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	e013      	b.n	8008600 <HAL_TIM_IC_Start_IT+0xa0>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d104      	bne.n	80085e8 <HAL_TIM_IC_Start_IT+0x88>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	e00b      	b.n	8008600 <HAL_TIM_IC_Start_IT+0xa0>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d104      	bne.n	80085f8 <HAL_TIM_IC_Start_IT+0x98>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	e003      	b.n	8008600 <HAL_TIM_IC_Start_IT+0xa0>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d102      	bne.n	800860e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008608:	7b7b      	ldrb	r3, [r7, #13]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d001      	beq.n	8008612 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e0e2      	b.n	80087d8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <HAL_TIM_IC_Start_IT+0xc2>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008620:	e023      	b.n	800866a <HAL_TIM_IC_Start_IT+0x10a>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b04      	cmp	r3, #4
 8008626:	d104      	bne.n	8008632 <HAL_TIM_IC_Start_IT+0xd2>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008630:	e01b      	b.n	800866a <HAL_TIM_IC_Start_IT+0x10a>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b08      	cmp	r3, #8
 8008636:	d104      	bne.n	8008642 <HAL_TIM_IC_Start_IT+0xe2>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008640:	e013      	b.n	800866a <HAL_TIM_IC_Start_IT+0x10a>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b0c      	cmp	r3, #12
 8008646:	d104      	bne.n	8008652 <HAL_TIM_IC_Start_IT+0xf2>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008650:	e00b      	b.n	800866a <HAL_TIM_IC_Start_IT+0x10a>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b10      	cmp	r3, #16
 8008656:	d104      	bne.n	8008662 <HAL_TIM_IC_Start_IT+0x102>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008660:	e003      	b.n	800866a <HAL_TIM_IC_Start_IT+0x10a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2202      	movs	r2, #2
 8008666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d104      	bne.n	800867a <HAL_TIM_IC_Start_IT+0x11a>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008678:	e013      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x142>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b04      	cmp	r3, #4
 800867e:	d104      	bne.n	800868a <HAL_TIM_IC_Start_IT+0x12a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008688:	e00b      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x142>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b08      	cmp	r3, #8
 800868e:	d104      	bne.n	800869a <HAL_TIM_IC_Start_IT+0x13a>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008698:	e003      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x142>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2202      	movs	r2, #2
 800869e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b0c      	cmp	r3, #12
 80086a6:	d841      	bhi.n	800872c <HAL_TIM_IC_Start_IT+0x1cc>
 80086a8:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <HAL_TIM_IC_Start_IT+0x150>)
 80086aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ae:	bf00      	nop
 80086b0:	080086e5 	.word	0x080086e5
 80086b4:	0800872d 	.word	0x0800872d
 80086b8:	0800872d 	.word	0x0800872d
 80086bc:	0800872d 	.word	0x0800872d
 80086c0:	080086f7 	.word	0x080086f7
 80086c4:	0800872d 	.word	0x0800872d
 80086c8:	0800872d 	.word	0x0800872d
 80086cc:	0800872d 	.word	0x0800872d
 80086d0:	08008709 	.word	0x08008709
 80086d4:	0800872d 	.word	0x0800872d
 80086d8:	0800872d 	.word	0x0800872d
 80086dc:	0800872d 	.word	0x0800872d
 80086e0:	0800871b 	.word	0x0800871b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0202 	orr.w	r2, r2, #2
 80086f2:	60da      	str	r2, [r3, #12]
      break;
 80086f4:	e01d      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0204 	orr.w	r2, r2, #4
 8008704:	60da      	str	r2, [r3, #12]
      break;
 8008706:	e014      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0208 	orr.w	r2, r2, #8
 8008716:	60da      	str	r2, [r3, #12]
      break;
 8008718:	e00b      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0210 	orr.w	r2, r2, #16
 8008728:	60da      	str	r2, [r3, #12]
      break;
 800872a:	e002      	b.n	8008732 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	73fb      	strb	r3, [r7, #15]
      break;
 8008730:	bf00      	nop
  }

  if (status == HAL_OK)
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d14e      	bne.n	80087d6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2201      	movs	r2, #1
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	f001 f9c9 	bl	8009ad8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a25      	ldr	r2, [pc, #148]	; (80087e0 <HAL_TIM_IC_Start_IT+0x280>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d022      	beq.n	8008796 <HAL_TIM_IC_Start_IT+0x236>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008758:	d01d      	beq.n	8008796 <HAL_TIM_IC_Start_IT+0x236>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a21      	ldr	r2, [pc, #132]	; (80087e4 <HAL_TIM_IC_Start_IT+0x284>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d018      	beq.n	8008796 <HAL_TIM_IC_Start_IT+0x236>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a1f      	ldr	r2, [pc, #124]	; (80087e8 <HAL_TIM_IC_Start_IT+0x288>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d013      	beq.n	8008796 <HAL_TIM_IC_Start_IT+0x236>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a1e      	ldr	r2, [pc, #120]	; (80087ec <HAL_TIM_IC_Start_IT+0x28c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d00e      	beq.n	8008796 <HAL_TIM_IC_Start_IT+0x236>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1c      	ldr	r2, [pc, #112]	; (80087f0 <HAL_TIM_IC_Start_IT+0x290>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d009      	beq.n	8008796 <HAL_TIM_IC_Start_IT+0x236>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a1b      	ldr	r2, [pc, #108]	; (80087f4 <HAL_TIM_IC_Start_IT+0x294>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d004      	beq.n	8008796 <HAL_TIM_IC_Start_IT+0x236>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a19      	ldr	r2, [pc, #100]	; (80087f8 <HAL_TIM_IC_Start_IT+0x298>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d115      	bne.n	80087c2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	4b17      	ldr	r3, [pc, #92]	; (80087fc <HAL_TIM_IC_Start_IT+0x29c>)
 800879e:	4013      	ands	r3, r2
 80087a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b06      	cmp	r3, #6
 80087a6:	d015      	beq.n	80087d4 <HAL_TIM_IC_Start_IT+0x274>
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ae:	d011      	beq.n	80087d4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c0:	e008      	b.n	80087d4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0201 	orr.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	e000      	b.n	80087d6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	40010000 	.word	0x40010000
 80087e4:	40000400 	.word	0x40000400
 80087e8:	40000800 	.word	0x40000800
 80087ec:	40000c00 	.word	0x40000c00
 80087f0:	40010400 	.word	0x40010400
 80087f4:	40001800 	.word	0x40001800
 80087f8:	40014000 	.word	0x40014000
 80087fc:	00010007 	.word	0x00010007

08008800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b02      	cmp	r3, #2
 8008814:	d122      	bne.n	800885c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b02      	cmp	r3, #2
 8008822:	d11b      	bne.n	800885c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f06f 0202 	mvn.w	r2, #2
 800882c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7f9 fef6 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 8008848:	e005      	b.n	8008856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fbee 	bl	800902c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fbf5 	bl	8009040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	f003 0304 	and.w	r3, r3, #4
 8008866:	2b04      	cmp	r3, #4
 8008868:	d122      	bne.n	80088b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b04      	cmp	r3, #4
 8008876:	d11b      	bne.n	80088b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f06f 0204 	mvn.w	r2, #4
 8008880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2202      	movs	r2, #2
 8008886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7f9 fecc 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 800889c:	e005      	b.n	80088aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fbc4 	bl	800902c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fbcb 	bl	8009040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f003 0308 	and.w	r3, r3, #8
 80088ba:	2b08      	cmp	r3, #8
 80088bc:	d122      	bne.n	8008904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d11b      	bne.n	8008904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f06f 0208 	mvn.w	r2, #8
 80088d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2204      	movs	r2, #4
 80088da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	f003 0303 	and.w	r3, r3, #3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7f9 fea2 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 80088f0:	e005      	b.n	80088fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fb9a 	bl	800902c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fba1 	bl	8009040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	f003 0310 	and.w	r3, r3, #16
 800890e:	2b10      	cmp	r3, #16
 8008910:	d122      	bne.n	8008958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f003 0310 	and.w	r3, r3, #16
 800891c:	2b10      	cmp	r3, #16
 800891e:	d11b      	bne.n	8008958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f06f 0210 	mvn.w	r2, #16
 8008928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2208      	movs	r2, #8
 800892e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7f9 fe78 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 8008944:	e005      	b.n	8008952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fb70 	bl	800902c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fb77 	bl	8009040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b01      	cmp	r3, #1
 8008964:	d10e      	bne.n	8008984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b01      	cmp	r3, #1
 8008972:	d107      	bne.n	8008984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f06f 0201 	mvn.w	r2, #1
 800897c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fb4a 	bl	8009018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d10e      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899c:	2b80      	cmp	r3, #128	; 0x80
 800899e:	d107      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f952 	bl	8009c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089be:	d10e      	bne.n	80089de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ca:	2b80      	cmp	r3, #128	; 0x80
 80089cc:	d107      	bne.n	80089de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80089d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f945 	bl	8009c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b40      	cmp	r3, #64	; 0x40
 80089ea:	d10e      	bne.n	8008a0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f6:	2b40      	cmp	r3, #64	; 0x40
 80089f8:	d107      	bne.n	8008a0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fb25 	bl	8009054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	f003 0320 	and.w	r3, r3, #32
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d10e      	bne.n	8008a36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	d107      	bne.n	8008a36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f06f 0220 	mvn.w	r2, #32
 8008a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 f905 	bl	8009c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b086      	sub	sp, #24
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_TIM_IC_ConfigChannel+0x1e>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e088      	b.n	8008b6e <HAL_TIM_IC_ConfigChannel+0x130>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d11b      	bne.n	8008aa2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6818      	ldr	r0, [r3, #0]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6819      	ldr	r1, [r3, #0]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f000 fe65 	bl	8009748 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	699a      	ldr	r2, [r3, #24]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 020c 	bic.w	r2, r2, #12
 8008a8c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6999      	ldr	r1, [r3, #24]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	619a      	str	r2, [r3, #24]
 8008aa0:	e060      	b.n	8008b64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d11c      	bne.n	8008ae2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	6819      	ldr	r1, [r3, #0]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f000 fee9 	bl	800988e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699a      	ldr	r2, [r3, #24]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008aca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6999      	ldr	r1, [r3, #24]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	021a      	lsls	r2, r3, #8
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	619a      	str	r2, [r3, #24]
 8008ae0:	e040      	b.n	8008b64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d11b      	bne.n	8008b20 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6818      	ldr	r0, [r3, #0]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	6819      	ldr	r1, [r3, #0]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f000 ff36 	bl	8009968 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	69da      	ldr	r2, [r3, #28]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 020c 	bic.w	r2, r2, #12
 8008b0a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	69d9      	ldr	r1, [r3, #28]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	61da      	str	r2, [r3, #28]
 8008b1e:	e021      	b.n	8008b64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b0c      	cmp	r3, #12
 8008b24:	d11c      	bne.n	8008b60 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6819      	ldr	r1, [r3, #0]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f000 ff53 	bl	80099e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69da      	ldr	r2, [r3, #28]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008b48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	69d9      	ldr	r1, [r3, #28]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	021a      	lsls	r2, r3, #8
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	61da      	str	r2, [r3, #28]
 8008b5e:	e001      	b.n	8008b64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d101      	bne.n	8008b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b92:	2302      	movs	r3, #2
 8008b94:	e0ff      	b.n	8008d96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b14      	cmp	r3, #20
 8008ba2:	f200 80f0 	bhi.w	8008d86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008ba6:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bac:	08008c01 	.word	0x08008c01
 8008bb0:	08008d87 	.word	0x08008d87
 8008bb4:	08008d87 	.word	0x08008d87
 8008bb8:	08008d87 	.word	0x08008d87
 8008bbc:	08008c41 	.word	0x08008c41
 8008bc0:	08008d87 	.word	0x08008d87
 8008bc4:	08008d87 	.word	0x08008d87
 8008bc8:	08008d87 	.word	0x08008d87
 8008bcc:	08008c83 	.word	0x08008c83
 8008bd0:	08008d87 	.word	0x08008d87
 8008bd4:	08008d87 	.word	0x08008d87
 8008bd8:	08008d87 	.word	0x08008d87
 8008bdc:	08008cc3 	.word	0x08008cc3
 8008be0:	08008d87 	.word	0x08008d87
 8008be4:	08008d87 	.word	0x08008d87
 8008be8:	08008d87 	.word	0x08008d87
 8008bec:	08008d05 	.word	0x08008d05
 8008bf0:	08008d87 	.word	0x08008d87
 8008bf4:	08008d87 	.word	0x08008d87
 8008bf8:	08008d87 	.word	0x08008d87
 8008bfc:	08008d45 	.word	0x08008d45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68b9      	ldr	r1, [r7, #8]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fac8 	bl	800919c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0208 	orr.w	r2, r2, #8
 8008c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0204 	bic.w	r2, r2, #4
 8008c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6999      	ldr	r1, [r3, #24]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	619a      	str	r2, [r3, #24]
      break;
 8008c3e:	e0a5      	b.n	8008d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fb38 	bl	80092bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699a      	ldr	r2, [r3, #24]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6999      	ldr	r1, [r3, #24]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	021a      	lsls	r2, r3, #8
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	619a      	str	r2, [r3, #24]
      break;
 8008c80:	e084      	b.n	8008d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68b9      	ldr	r1, [r7, #8]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fba1 	bl	80093d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 0208 	orr.w	r2, r2, #8
 8008c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69da      	ldr	r2, [r3, #28]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 0204 	bic.w	r2, r2, #4
 8008cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69d9      	ldr	r1, [r3, #28]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	691a      	ldr	r2, [r3, #16]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	61da      	str	r2, [r3, #28]
      break;
 8008cc0:	e064      	b.n	8008d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68b9      	ldr	r1, [r7, #8]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fc09 	bl	80094e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69da      	ldr	r2, [r3, #28]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69da      	ldr	r2, [r3, #28]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69d9      	ldr	r1, [r3, #28]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	021a      	lsls	r2, r3, #8
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	61da      	str	r2, [r3, #28]
      break;
 8008d02:	e043      	b.n	8008d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fc52 	bl	80095b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0208 	orr.w	r2, r2, #8
 8008d1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0204 	bic.w	r2, r2, #4
 8008d2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	691a      	ldr	r2, [r3, #16]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d42:	e023      	b.n	8008d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fc96 	bl	800967c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	021a      	lsls	r2, r3, #8
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d84:	e002      	b.n	8008d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	75fb      	strb	r3, [r7, #23]
      break;
 8008d8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop

08008da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d101      	bne.n	8008dbc <HAL_TIM_ConfigClockSource+0x1c>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e0dc      	b.n	8008f76 <HAL_TIM_ConfigClockSource+0x1d6>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	4b6a      	ldr	r3, [pc, #424]	; (8008f80 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008dd8:	4013      	ands	r3, r2
 8008dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a64      	ldr	r2, [pc, #400]	; (8008f84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	f000 80a9 	beq.w	8008f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008df8:	4a62      	ldr	r2, [pc, #392]	; (8008f84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	f200 80ae 	bhi.w	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e00:	4a61      	ldr	r2, [pc, #388]	; (8008f88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	f000 80a1 	beq.w	8008f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008e08:	4a5f      	ldr	r2, [pc, #380]	; (8008f88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	f200 80a6 	bhi.w	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e10:	4a5e      	ldr	r2, [pc, #376]	; (8008f8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	f000 8099 	beq.w	8008f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008e18:	4a5c      	ldr	r2, [pc, #368]	; (8008f8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	f200 809e 	bhi.w	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008e24:	f000 8091 	beq.w	8008f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008e28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008e2c:	f200 8096 	bhi.w	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e34:	f000 8089 	beq.w	8008f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e3c:	f200 808e 	bhi.w	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e44:	d03e      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0x124>
 8008e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e4a:	f200 8087 	bhi.w	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e52:	f000 8086 	beq.w	8008f62 <HAL_TIM_ConfigClockSource+0x1c2>
 8008e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5a:	d87f      	bhi.n	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e5c:	2b70      	cmp	r3, #112	; 0x70
 8008e5e:	d01a      	beq.n	8008e96 <HAL_TIM_ConfigClockSource+0xf6>
 8008e60:	2b70      	cmp	r3, #112	; 0x70
 8008e62:	d87b      	bhi.n	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e64:	2b60      	cmp	r3, #96	; 0x60
 8008e66:	d050      	beq.n	8008f0a <HAL_TIM_ConfigClockSource+0x16a>
 8008e68:	2b60      	cmp	r3, #96	; 0x60
 8008e6a:	d877      	bhi.n	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e6c:	2b50      	cmp	r3, #80	; 0x50
 8008e6e:	d03c      	beq.n	8008eea <HAL_TIM_ConfigClockSource+0x14a>
 8008e70:	2b50      	cmp	r3, #80	; 0x50
 8008e72:	d873      	bhi.n	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e74:	2b40      	cmp	r3, #64	; 0x40
 8008e76:	d058      	beq.n	8008f2a <HAL_TIM_ConfigClockSource+0x18a>
 8008e78:	2b40      	cmp	r3, #64	; 0x40
 8008e7a:	d86f      	bhi.n	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e7c:	2b30      	cmp	r3, #48	; 0x30
 8008e7e:	d064      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008e80:	2b30      	cmp	r3, #48	; 0x30
 8008e82:	d86b      	bhi.n	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e84:	2b20      	cmp	r3, #32
 8008e86:	d060      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d867      	bhi.n	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d05c      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008e90:	2b10      	cmp	r3, #16
 8008e92:	d05a      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008e94:	e062      	b.n	8008f5c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6818      	ldr	r0, [r3, #0]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	6899      	ldr	r1, [r3, #8]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	f000 fdf7 	bl	8009a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	609a      	str	r2, [r3, #8]
      break;
 8008ec2:	e04f      	b.n	8008f64 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	6899      	ldr	r1, [r3, #8]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f000 fde0 	bl	8009a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ee6:	609a      	str	r2, [r3, #8]
      break;
 8008ee8:	e03c      	b.n	8008f64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	6859      	ldr	r1, [r3, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f000 fc9a 	bl	8009830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2150      	movs	r1, #80	; 0x50
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fdaa 	bl	8009a5c <TIM_ITRx_SetConfig>
      break;
 8008f08:	e02c      	b.n	8008f64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	6859      	ldr	r1, [r3, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	461a      	mov	r2, r3
 8008f18:	f000 fcf6 	bl	8009908 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2160      	movs	r1, #96	; 0x60
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fd9a 	bl	8009a5c <TIM_ITRx_SetConfig>
      break;
 8008f28:	e01c      	b.n	8008f64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	6859      	ldr	r1, [r3, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	461a      	mov	r2, r3
 8008f38:	f000 fc7a 	bl	8009830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2140      	movs	r1, #64	; 0x40
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fd8a 	bl	8009a5c <TIM_ITRx_SetConfig>
      break;
 8008f48:	e00c      	b.n	8008f64 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4619      	mov	r1, r3
 8008f54:	4610      	mov	r0, r2
 8008f56:	f000 fd81 	bl	8009a5c <TIM_ITRx_SetConfig>
      break;
 8008f5a:	e003      	b.n	8008f64 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f60:	e000      	b.n	8008f64 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	ffceff88 	.word	0xffceff88
 8008f84:	00100040 	.word	0x00100040
 8008f88:	00100030 	.word	0x00100030
 8008f8c:	00100020 	.word	0x00100020

08008f90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b0c      	cmp	r3, #12
 8008fa2:	d831      	bhi.n	8009008 <HAL_TIM_ReadCapturedValue+0x78>
 8008fa4:	a201      	add	r2, pc, #4	; (adr r2, 8008fac <HAL_TIM_ReadCapturedValue+0x1c>)
 8008fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008faa:	bf00      	nop
 8008fac:	08008fe1 	.word	0x08008fe1
 8008fb0:	08009009 	.word	0x08009009
 8008fb4:	08009009 	.word	0x08009009
 8008fb8:	08009009 	.word	0x08009009
 8008fbc:	08008feb 	.word	0x08008feb
 8008fc0:	08009009 	.word	0x08009009
 8008fc4:	08009009 	.word	0x08009009
 8008fc8:	08009009 	.word	0x08009009
 8008fcc:	08008ff5 	.word	0x08008ff5
 8008fd0:	08009009 	.word	0x08009009
 8008fd4:	08009009 	.word	0x08009009
 8008fd8:	08009009 	.word	0x08009009
 8008fdc:	08008fff 	.word	0x08008fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe6:	60fb      	str	r3, [r7, #12]

      break;
 8008fe8:	e00f      	b.n	800900a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff0:	60fb      	str	r3, [r7, #12]

      break;
 8008ff2:	e00a      	b.n	800900a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffa:	60fb      	str	r3, [r7, #12]

      break;
 8008ffc:	e005      	b.n	800900a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	60fb      	str	r3, [r7, #12]

      break;
 8009006:	e000      	b.n	800900a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009008:	bf00      	nop
  }

  return tmpreg;
 800900a:	68fb      	ldr	r3, [r7, #12]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a40      	ldr	r2, [pc, #256]	; (800917c <TIM_Base_SetConfig+0x114>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d013      	beq.n	80090a8 <TIM_Base_SetConfig+0x40>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009086:	d00f      	beq.n	80090a8 <TIM_Base_SetConfig+0x40>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a3d      	ldr	r2, [pc, #244]	; (8009180 <TIM_Base_SetConfig+0x118>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00b      	beq.n	80090a8 <TIM_Base_SetConfig+0x40>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a3c      	ldr	r2, [pc, #240]	; (8009184 <TIM_Base_SetConfig+0x11c>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d007      	beq.n	80090a8 <TIM_Base_SetConfig+0x40>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a3b      	ldr	r2, [pc, #236]	; (8009188 <TIM_Base_SetConfig+0x120>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d003      	beq.n	80090a8 <TIM_Base_SetConfig+0x40>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a3a      	ldr	r2, [pc, #232]	; (800918c <TIM_Base_SetConfig+0x124>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d108      	bne.n	80090ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a2f      	ldr	r2, [pc, #188]	; (800917c <TIM_Base_SetConfig+0x114>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d01f      	beq.n	8009102 <TIM_Base_SetConfig+0x9a>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c8:	d01b      	beq.n	8009102 <TIM_Base_SetConfig+0x9a>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a2c      	ldr	r2, [pc, #176]	; (8009180 <TIM_Base_SetConfig+0x118>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d017      	beq.n	8009102 <TIM_Base_SetConfig+0x9a>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a2b      	ldr	r2, [pc, #172]	; (8009184 <TIM_Base_SetConfig+0x11c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d013      	beq.n	8009102 <TIM_Base_SetConfig+0x9a>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a2a      	ldr	r2, [pc, #168]	; (8009188 <TIM_Base_SetConfig+0x120>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d00f      	beq.n	8009102 <TIM_Base_SetConfig+0x9a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a29      	ldr	r2, [pc, #164]	; (800918c <TIM_Base_SetConfig+0x124>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00b      	beq.n	8009102 <TIM_Base_SetConfig+0x9a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a28      	ldr	r2, [pc, #160]	; (8009190 <TIM_Base_SetConfig+0x128>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d007      	beq.n	8009102 <TIM_Base_SetConfig+0x9a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a27      	ldr	r2, [pc, #156]	; (8009194 <TIM_Base_SetConfig+0x12c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d003      	beq.n	8009102 <TIM_Base_SetConfig+0x9a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a26      	ldr	r2, [pc, #152]	; (8009198 <TIM_Base_SetConfig+0x130>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d108      	bne.n	8009114 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a10      	ldr	r2, [pc, #64]	; (800917c <TIM_Base_SetConfig+0x114>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d00f      	beq.n	8009160 <TIM_Base_SetConfig+0xf8>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a12      	ldr	r2, [pc, #72]	; (800918c <TIM_Base_SetConfig+0x124>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00b      	beq.n	8009160 <TIM_Base_SetConfig+0xf8>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a11      	ldr	r2, [pc, #68]	; (8009190 <TIM_Base_SetConfig+0x128>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d007      	beq.n	8009160 <TIM_Base_SetConfig+0xf8>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a10      	ldr	r2, [pc, #64]	; (8009194 <TIM_Base_SetConfig+0x12c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d003      	beq.n	8009160 <TIM_Base_SetConfig+0xf8>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a0f      	ldr	r2, [pc, #60]	; (8009198 <TIM_Base_SetConfig+0x130>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d103      	bne.n	8009168 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	615a      	str	r2, [r3, #20]
}
 800916e:	bf00      	nop
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40010000 	.word	0x40010000
 8009180:	40000400 	.word	0x40000400
 8009184:	40000800 	.word	0x40000800
 8009188:	40000c00 	.word	0x40000c00
 800918c:	40010400 	.word	0x40010400
 8009190:	40014000 	.word	0x40014000
 8009194:	40014400 	.word	0x40014400
 8009198:	40014800 	.word	0x40014800

0800919c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	f023 0201 	bic.w	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	4b37      	ldr	r3, [pc, #220]	; (80092a4 <TIM_OC1_SetConfig+0x108>)
 80091c8:	4013      	ands	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f023 0302 	bic.w	r3, r3, #2
 80091e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a2d      	ldr	r2, [pc, #180]	; (80092a8 <TIM_OC1_SetConfig+0x10c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00f      	beq.n	8009218 <TIM_OC1_SetConfig+0x7c>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a2c      	ldr	r2, [pc, #176]	; (80092ac <TIM_OC1_SetConfig+0x110>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00b      	beq.n	8009218 <TIM_OC1_SetConfig+0x7c>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a2b      	ldr	r2, [pc, #172]	; (80092b0 <TIM_OC1_SetConfig+0x114>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d007      	beq.n	8009218 <TIM_OC1_SetConfig+0x7c>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a2a      	ldr	r2, [pc, #168]	; (80092b4 <TIM_OC1_SetConfig+0x118>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d003      	beq.n	8009218 <TIM_OC1_SetConfig+0x7c>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a29      	ldr	r2, [pc, #164]	; (80092b8 <TIM_OC1_SetConfig+0x11c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d10c      	bne.n	8009232 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f023 0308 	bic.w	r3, r3, #8
 800921e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	4313      	orrs	r3, r2
 8009228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f023 0304 	bic.w	r3, r3, #4
 8009230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a1c      	ldr	r2, [pc, #112]	; (80092a8 <TIM_OC1_SetConfig+0x10c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d00f      	beq.n	800925a <TIM_OC1_SetConfig+0xbe>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a1b      	ldr	r2, [pc, #108]	; (80092ac <TIM_OC1_SetConfig+0x110>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00b      	beq.n	800925a <TIM_OC1_SetConfig+0xbe>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a1a      	ldr	r2, [pc, #104]	; (80092b0 <TIM_OC1_SetConfig+0x114>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d007      	beq.n	800925a <TIM_OC1_SetConfig+0xbe>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a19      	ldr	r2, [pc, #100]	; (80092b4 <TIM_OC1_SetConfig+0x118>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d003      	beq.n	800925a <TIM_OC1_SetConfig+0xbe>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a18      	ldr	r2, [pc, #96]	; (80092b8 <TIM_OC1_SetConfig+0x11c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d111      	bne.n	800927e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	4313      	orrs	r3, r2
 8009272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	4313      	orrs	r3, r2
 800927c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	621a      	str	r2, [r3, #32]
}
 8009298:	bf00      	nop
 800929a:	371c      	adds	r7, #28
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	fffeff8f 	.word	0xfffeff8f
 80092a8:	40010000 	.word	0x40010000
 80092ac:	40010400 	.word	0x40010400
 80092b0:	40014000 	.word	0x40014000
 80092b4:	40014400 	.word	0x40014400
 80092b8:	40014800 	.word	0x40014800

080092bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	f023 0210 	bic.w	r2, r3, #16
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4b34      	ldr	r3, [pc, #208]	; (80093b8 <TIM_OC2_SetConfig+0xfc>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f023 0320 	bic.w	r3, r3, #32
 8009306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	011b      	lsls	r3, r3, #4
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	4313      	orrs	r3, r2
 8009312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a29      	ldr	r2, [pc, #164]	; (80093bc <TIM_OC2_SetConfig+0x100>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d003      	beq.n	8009324 <TIM_OC2_SetConfig+0x68>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a28      	ldr	r2, [pc, #160]	; (80093c0 <TIM_OC2_SetConfig+0x104>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d10d      	bne.n	8009340 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800932a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	4313      	orrs	r3, r2
 8009336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800933e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a1e      	ldr	r2, [pc, #120]	; (80093bc <TIM_OC2_SetConfig+0x100>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00f      	beq.n	8009368 <TIM_OC2_SetConfig+0xac>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a1d      	ldr	r2, [pc, #116]	; (80093c0 <TIM_OC2_SetConfig+0x104>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00b      	beq.n	8009368 <TIM_OC2_SetConfig+0xac>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a1c      	ldr	r2, [pc, #112]	; (80093c4 <TIM_OC2_SetConfig+0x108>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d007      	beq.n	8009368 <TIM_OC2_SetConfig+0xac>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a1b      	ldr	r2, [pc, #108]	; (80093c8 <TIM_OC2_SetConfig+0x10c>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d003      	beq.n	8009368 <TIM_OC2_SetConfig+0xac>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a1a      	ldr	r2, [pc, #104]	; (80093cc <TIM_OC2_SetConfig+0x110>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d113      	bne.n	8009390 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800936e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	4313      	orrs	r3, r2
 8009382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	4313      	orrs	r3, r2
 800938e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	621a      	str	r2, [r3, #32]
}
 80093aa:	bf00      	nop
 80093ac:	371c      	adds	r7, #28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	feff8fff 	.word	0xfeff8fff
 80093bc:	40010000 	.word	0x40010000
 80093c0:	40010400 	.word	0x40010400
 80093c4:	40014000 	.word	0x40014000
 80093c8:	40014400 	.word	0x40014400
 80093cc:	40014800 	.word	0x40014800

080093d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4b33      	ldr	r3, [pc, #204]	; (80094c8 <TIM_OC3_SetConfig+0xf8>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0303 	bic.w	r3, r3, #3
 8009406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	4313      	orrs	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	021b      	lsls	r3, r3, #8
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a28      	ldr	r2, [pc, #160]	; (80094cc <TIM_OC3_SetConfig+0xfc>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d003      	beq.n	8009436 <TIM_OC3_SetConfig+0x66>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a27      	ldr	r2, [pc, #156]	; (80094d0 <TIM_OC3_SetConfig+0x100>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d10d      	bne.n	8009452 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800943c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	021b      	lsls	r3, r3, #8
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	4313      	orrs	r3, r2
 8009448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a1d      	ldr	r2, [pc, #116]	; (80094cc <TIM_OC3_SetConfig+0xfc>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d00f      	beq.n	800947a <TIM_OC3_SetConfig+0xaa>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a1c      	ldr	r2, [pc, #112]	; (80094d0 <TIM_OC3_SetConfig+0x100>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00b      	beq.n	800947a <TIM_OC3_SetConfig+0xaa>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a1b      	ldr	r2, [pc, #108]	; (80094d4 <TIM_OC3_SetConfig+0x104>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d007      	beq.n	800947a <TIM_OC3_SetConfig+0xaa>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a1a      	ldr	r2, [pc, #104]	; (80094d8 <TIM_OC3_SetConfig+0x108>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d003      	beq.n	800947a <TIM_OC3_SetConfig+0xaa>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a19      	ldr	r2, [pc, #100]	; (80094dc <TIM_OC3_SetConfig+0x10c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d113      	bne.n	80094a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	011b      	lsls	r3, r3, #4
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	4313      	orrs	r3, r2
 8009494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	4313      	orrs	r3, r2
 80094a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	621a      	str	r2, [r3, #32]
}
 80094bc:	bf00      	nop
 80094be:	371c      	adds	r7, #28
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	fffeff8f 	.word	0xfffeff8f
 80094cc:	40010000 	.word	0x40010000
 80094d0:	40010400 	.word	0x40010400
 80094d4:	40014000 	.word	0x40014000
 80094d8:	40014400 	.word	0x40014400
 80094dc:	40014800 	.word	0x40014800

080094e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4b24      	ldr	r3, [pc, #144]	; (800959c <TIM_OC4_SetConfig+0xbc>)
 800950c:	4013      	ands	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800952a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	031b      	lsls	r3, r3, #12
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	4313      	orrs	r3, r2
 8009536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a19      	ldr	r2, [pc, #100]	; (80095a0 <TIM_OC4_SetConfig+0xc0>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00f      	beq.n	8009560 <TIM_OC4_SetConfig+0x80>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a18      	ldr	r2, [pc, #96]	; (80095a4 <TIM_OC4_SetConfig+0xc4>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d00b      	beq.n	8009560 <TIM_OC4_SetConfig+0x80>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a17      	ldr	r2, [pc, #92]	; (80095a8 <TIM_OC4_SetConfig+0xc8>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d007      	beq.n	8009560 <TIM_OC4_SetConfig+0x80>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a16      	ldr	r2, [pc, #88]	; (80095ac <TIM_OC4_SetConfig+0xcc>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d003      	beq.n	8009560 <TIM_OC4_SetConfig+0x80>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a15      	ldr	r2, [pc, #84]	; (80095b0 <TIM_OC4_SetConfig+0xd0>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d109      	bne.n	8009574 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	019b      	lsls	r3, r3, #6
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4313      	orrs	r3, r2
 8009572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	621a      	str	r2, [r3, #32]
}
 800958e:	bf00      	nop
 8009590:	371c      	adds	r7, #28
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	feff8fff 	.word	0xfeff8fff
 80095a0:	40010000 	.word	0x40010000
 80095a4:	40010400 	.word	0x40010400
 80095a8:	40014000 	.word	0x40014000
 80095ac:	40014400 	.word	0x40014400
 80095b0:	40014800 	.word	0x40014800

080095b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b087      	sub	sp, #28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	4b21      	ldr	r3, [pc, #132]	; (8009664 <TIM_OC5_SetConfig+0xb0>)
 80095e0:	4013      	ands	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	4313      	orrs	r3, r2
 8009600:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a18      	ldr	r2, [pc, #96]	; (8009668 <TIM_OC5_SetConfig+0xb4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d00f      	beq.n	800962a <TIM_OC5_SetConfig+0x76>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a17      	ldr	r2, [pc, #92]	; (800966c <TIM_OC5_SetConfig+0xb8>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d00b      	beq.n	800962a <TIM_OC5_SetConfig+0x76>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a16      	ldr	r2, [pc, #88]	; (8009670 <TIM_OC5_SetConfig+0xbc>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d007      	beq.n	800962a <TIM_OC5_SetConfig+0x76>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a15      	ldr	r2, [pc, #84]	; (8009674 <TIM_OC5_SetConfig+0xc0>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d003      	beq.n	800962a <TIM_OC5_SetConfig+0x76>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a14      	ldr	r2, [pc, #80]	; (8009678 <TIM_OC5_SetConfig+0xc4>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d109      	bne.n	800963e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009630:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	021b      	lsls	r3, r3, #8
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	4313      	orrs	r3, r2
 800963c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	621a      	str	r2, [r3, #32]
}
 8009658:	bf00      	nop
 800965a:	371c      	adds	r7, #28
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	fffeff8f 	.word	0xfffeff8f
 8009668:	40010000 	.word	0x40010000
 800966c:	40010400 	.word	0x40010400
 8009670:	40014000 	.word	0x40014000
 8009674:	40014400 	.word	0x40014400
 8009678:	40014800 	.word	0x40014800

0800967c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4b22      	ldr	r3, [pc, #136]	; (8009730 <TIM_OC6_SetConfig+0xb4>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	051b      	lsls	r3, r3, #20
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a19      	ldr	r2, [pc, #100]	; (8009734 <TIM_OC6_SetConfig+0xb8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00f      	beq.n	80096f4 <TIM_OC6_SetConfig+0x78>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a18      	ldr	r2, [pc, #96]	; (8009738 <TIM_OC6_SetConfig+0xbc>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d00b      	beq.n	80096f4 <TIM_OC6_SetConfig+0x78>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a17      	ldr	r2, [pc, #92]	; (800973c <TIM_OC6_SetConfig+0xc0>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d007      	beq.n	80096f4 <TIM_OC6_SetConfig+0x78>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a16      	ldr	r2, [pc, #88]	; (8009740 <TIM_OC6_SetConfig+0xc4>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d003      	beq.n	80096f4 <TIM_OC6_SetConfig+0x78>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a15      	ldr	r2, [pc, #84]	; (8009744 <TIM_OC6_SetConfig+0xc8>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d109      	bne.n	8009708 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	029b      	lsls	r3, r3, #10
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	4313      	orrs	r3, r2
 8009706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	621a      	str	r2, [r3, #32]
}
 8009722:	bf00      	nop
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	feff8fff 	.word	0xfeff8fff
 8009734:	40010000 	.word	0x40010000
 8009738:	40010400 	.word	0x40010400
 800973c:	40014000 	.word	0x40014000
 8009740:	40014400 	.word	0x40014400
 8009744:	40014800 	.word	0x40014800

08009748 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	f023 0201 	bic.w	r2, r3, #1
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	4a28      	ldr	r2, [pc, #160]	; (8009814 <TIM_TI1_SetConfig+0xcc>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d01b      	beq.n	80097ae <TIM_TI1_SetConfig+0x66>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800977c:	d017      	beq.n	80097ae <TIM_TI1_SetConfig+0x66>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4a25      	ldr	r2, [pc, #148]	; (8009818 <TIM_TI1_SetConfig+0xd0>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d013      	beq.n	80097ae <TIM_TI1_SetConfig+0x66>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	4a24      	ldr	r2, [pc, #144]	; (800981c <TIM_TI1_SetConfig+0xd4>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00f      	beq.n	80097ae <TIM_TI1_SetConfig+0x66>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4a23      	ldr	r2, [pc, #140]	; (8009820 <TIM_TI1_SetConfig+0xd8>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00b      	beq.n	80097ae <TIM_TI1_SetConfig+0x66>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4a22      	ldr	r2, [pc, #136]	; (8009824 <TIM_TI1_SetConfig+0xdc>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d007      	beq.n	80097ae <TIM_TI1_SetConfig+0x66>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4a21      	ldr	r2, [pc, #132]	; (8009828 <TIM_TI1_SetConfig+0xe0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d003      	beq.n	80097ae <TIM_TI1_SetConfig+0x66>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4a20      	ldr	r2, [pc, #128]	; (800982c <TIM_TI1_SetConfig+0xe4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d101      	bne.n	80097b2 <TIM_TI1_SetConfig+0x6a>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e000      	b.n	80097b4 <TIM_TI1_SetConfig+0x6c>
 80097b2:	2300      	movs	r3, #0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d008      	beq.n	80097ca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f023 0303 	bic.w	r3, r3, #3
 80097be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
 80097c8:	e003      	b.n	80097d2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f043 0301 	orr.w	r3, r3, #1
 80097d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	011b      	lsls	r3, r3, #4
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f023 030a 	bic.w	r3, r3, #10
 80097ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f003 030a 	and.w	r3, r3, #10
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	621a      	str	r2, [r3, #32]
}
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	40010000 	.word	0x40010000
 8009818:	40000400 	.word	0x40000400
 800981c:	40000800 	.word	0x40000800
 8009820:	40000c00 	.word	0x40000c00
 8009824:	40010400 	.word	0x40010400
 8009828:	40001800 	.word	0x40001800
 800982c:	40014000 	.word	0x40014000

08009830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	f023 0201 	bic.w	r2, r3, #1
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800985a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	011b      	lsls	r3, r3, #4
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4313      	orrs	r3, r2
 8009864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f023 030a 	bic.w	r3, r3, #10
 800986c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4313      	orrs	r3, r2
 8009874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800988e:	b480      	push	{r7}
 8009890:	b087      	sub	sp, #28
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	607a      	str	r2, [r7, #4]
 800989a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	f023 0210 	bic.w	r2, r3, #16
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	021b      	lsls	r3, r3, #8
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	031b      	lsls	r3, r3, #12
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	011b      	lsls	r3, r3, #4
 80098e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	621a      	str	r2, [r3, #32]
}
 80098fc:	bf00      	nop
 80098fe:	371c      	adds	r7, #28
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009908:	b480      	push	{r7}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	f023 0210 	bic.w	r2, r3, #16
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009932:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	031b      	lsls	r3, r3, #12
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009944:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	4313      	orrs	r3, r2
 800994e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	621a      	str	r2, [r3, #32]
}
 800995c:	bf00      	nop
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f023 0303 	bic.w	r3, r3, #3
 8009994:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	011b      	lsls	r3, r3, #4
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80099b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	021b      	lsls	r3, r3, #8
 80099be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	621a      	str	r2, [r3, #32]
}
 80099d4:	bf00      	nop
 80099d6:	371c      	adds	r7, #28
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	021b      	lsls	r3, r3, #8
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	031b      	lsls	r3, r3, #12
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009a32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	031b      	lsls	r3, r3, #12
 8009a38:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	621a      	str	r2, [r3, #32]
}
 8009a4e:	bf00      	nop
 8009a50:	371c      	adds	r7, #28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
	...

08009a5c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4b09      	ldr	r3, [pc, #36]	; (8009a94 <TIM_ITRx_SetConfig+0x38>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	f043 0307 	orr.w	r3, r3, #7
 8009a7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	609a      	str	r2, [r3, #8]
}
 8009a86:	bf00      	nop
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	ffcfff8f 	.word	0xffcfff8f

08009a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	021a      	lsls	r2, r3, #8
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	431a      	orrs	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	609a      	str	r2, [r3, #8]
}
 8009acc:	bf00      	nop
 8009ace:	371c      	adds	r7, #28
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f003 031f 	and.w	r3, r3, #31
 8009aea:	2201      	movs	r2, #1
 8009aec:	fa02 f303 	lsl.w	r3, r2, r3
 8009af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a1a      	ldr	r2, [r3, #32]
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	43db      	mvns	r3, r3
 8009afa:	401a      	ands	r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6a1a      	ldr	r2, [r3, #32]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f003 031f 	and.w	r3, r3, #31
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b10:	431a      	orrs	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	621a      	str	r2, [r3, #32]
}
 8009b16:	bf00      	nop
 8009b18:	371c      	adds	r7, #28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
	...

08009b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d101      	bne.n	8009b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b38:	2302      	movs	r3, #2
 8009b3a:	e06d      	b.n	8009c18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2202      	movs	r2, #2
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a30      	ldr	r2, [pc, #192]	; (8009c24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d004      	beq.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a2f      	ldr	r2, [pc, #188]	; (8009c28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d108      	bne.n	8009b82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a20      	ldr	r2, [pc, #128]	; (8009c24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d022      	beq.n	8009bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bae:	d01d      	beq.n	8009bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a1d      	ldr	r2, [pc, #116]	; (8009c2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d018      	beq.n	8009bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a1c      	ldr	r2, [pc, #112]	; (8009c30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d013      	beq.n	8009bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a1a      	ldr	r2, [pc, #104]	; (8009c34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d00e      	beq.n	8009bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d009      	beq.n	8009bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a16      	ldr	r2, [pc, #88]	; (8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d004      	beq.n	8009bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a15      	ldr	r2, [pc, #84]	; (8009c3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d10c      	bne.n	8009c06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	40010000 	.word	0x40010000
 8009c28:	40010400 	.word	0x40010400
 8009c2c:	40000400 	.word	0x40000400
 8009c30:	40000800 	.word	0x40000800
 8009c34:	40000c00 	.word	0x40000c00
 8009c38:	40001800 	.word	0x40001800
 8009c3c:	40014000 	.word	0x40014000

08009c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e042      	b.n	8009d14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d106      	bne.n	8009ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7f8 fb6d 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2224      	movs	r2, #36	; 0x24
 8009caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f022 0201 	bic.w	r2, r2, #1
 8009cbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fcde 	bl	800a680 <UART_SetConfig>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e022      	b.n	8009d14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f001 fa3a 	bl	800b150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f042 0201 	orr.w	r2, r2, #1
 8009d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f001 fac1 	bl	800b294 <UART_CheckIdleState>
 8009d12:	4603      	mov	r3, r0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b091      	sub	sp, #68	; 0x44
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	4613      	mov	r3, r2
 8009d28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	f040 808c 	bne.w	8009e4e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <HAL_UART_Transmit_IT+0x26>
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e084      	b.n	8009e50 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d101      	bne.n	8009d54 <HAL_UART_Transmit_IT+0x38>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e07d      	b.n	8009e50 <HAL_UART_Transmit_IT+0x134>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	88fa      	ldrh	r2, [r7, #6]
 8009d66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	88fa      	ldrh	r2, [r7, #6]
 8009d6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2221      	movs	r2, #33	; 0x21
 8009d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d90:	d12e      	bne.n	8009df0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d9a:	d107      	bne.n	8009dac <HAL_UART_Transmit_IT+0x90>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d103      	bne.n	8009dac <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4a2d      	ldr	r2, [pc, #180]	; (8009e5c <HAL_UART_Transmit_IT+0x140>)
 8009da8:	675a      	str	r2, [r3, #116]	; 0x74
 8009daa:	e002      	b.n	8009db2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4a2c      	ldr	r2, [pc, #176]	; (8009e60 <HAL_UART_Transmit_IT+0x144>)
 8009db0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dda:	637a      	str	r2, [r7, #52]	; 0x34
 8009ddc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e5      	bne.n	8009dba <HAL_UART_Transmit_IT+0x9e>
 8009dee:	e02c      	b.n	8009e4a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df8:	d107      	bne.n	8009e0a <HAL_UART_Transmit_IT+0xee>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d103      	bne.n	8009e0a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4a17      	ldr	r2, [pc, #92]	; (8009e64 <HAL_UART_Transmit_IT+0x148>)
 8009e06:	675a      	str	r2, [r3, #116]	; 0x74
 8009e08:	e002      	b.n	8009e10 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4a16      	ldr	r2, [pc, #88]	; (8009e68 <HAL_UART_Transmit_IT+0x14c>)
 8009e0e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	613b      	str	r3, [r7, #16]
   return(result);
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e36:	623b      	str	r3, [r7, #32]
 8009e38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	69f9      	ldr	r1, [r7, #28]
 8009e3c:	6a3a      	ldr	r2, [r7, #32]
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e6      	bne.n	8009e18 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e000      	b.n	8009e50 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009e4e:	2302      	movs	r3, #2
  }
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3744      	adds	r7, #68	; 0x44
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	0800ba63 	.word	0x0800ba63
 8009e60:	0800b983 	.word	0x0800b983
 8009e64:	0800b8c1 	.word	0x0800b8c1
 8009e68:	0800b809 	.word	0x0800b809

08009e6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08a      	sub	sp, #40	; 0x28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	4613      	mov	r3, r2
 8009e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e80:	2b20      	cmp	r3, #32
 8009e82:	d142      	bne.n	8009f0a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <HAL_UART_Receive_IT+0x24>
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e03b      	b.n	8009f0c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d101      	bne.n	8009ea2 <HAL_UART_Receive_IT+0x36>
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	e034      	b.n	8009f0c <HAL_UART_Receive_IT+0xa0>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a17      	ldr	r2, [pc, #92]	; (8009f14 <HAL_UART_Receive_IT+0xa8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d01f      	beq.n	8009efa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d018      	beq.n	8009efa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	623b      	str	r3, [r7, #32]
 8009ee8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	69f9      	ldr	r1, [r7, #28]
 8009eec:	6a3a      	ldr	r2, [r7, #32]
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e6      	bne.n	8009ec8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009efa:	88fb      	ldrh	r3, [r7, #6]
 8009efc:	461a      	mov	r2, r3
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f001 fadb 	bl	800b4bc <UART_Start_Receive_IT>
 8009f06:	4603      	mov	r3, r0
 8009f08:	e000      	b.n	8009f0c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009f0a:	2302      	movs	r3, #2
  }
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3728      	adds	r7, #40	; 0x28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	58000c00 	.word	0x58000c00

08009f18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b0ba      	sub	sp, #232	; 0xe8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009f42:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f46:	4013      	ands	r3, r2
 8009f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d11b      	bne.n	8009f8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d015      	beq.n	8009f8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d105      	bne.n	8009f78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d009      	beq.n	8009f8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 835a 	beq.w	800a636 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	4798      	blx	r3
      }
      return;
 8009f8a:	e354      	b.n	800a636 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 811f 	beq.w	800a1d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009f9a:	4b8b      	ldr	r3, [pc, #556]	; (800a1c8 <HAL_UART_IRQHandler+0x2b0>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d106      	bne.n	8009fb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009fa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009fa6:	4b89      	ldr	r3, [pc, #548]	; (800a1cc <HAL_UART_IRQHandler+0x2b4>)
 8009fa8:	4013      	ands	r3, r2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 8112 	beq.w	800a1d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d011      	beq.n	8009fe0 <HAL_UART_IRQHandler+0xc8>
 8009fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00b      	beq.n	8009fe0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fd6:	f043 0201 	orr.w	r2, r3, #1
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d011      	beq.n	800a010 <HAL_UART_IRQHandler+0xf8>
 8009fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a006:	f043 0204 	orr.w	r2, r3, #4
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d011      	beq.n	800a040 <HAL_UART_IRQHandler+0x128>
 800a01c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00b      	beq.n	800a040 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2204      	movs	r2, #4
 800a02e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a036:	f043 0202 	orr.w	r2, r3, #2
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a044:	f003 0308 	and.w	r3, r3, #8
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d017      	beq.n	800a07c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a050:	f003 0320 	and.w	r3, r3, #32
 800a054:	2b00      	cmp	r3, #0
 800a056:	d105      	bne.n	800a064 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a058:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a05c:	4b5a      	ldr	r3, [pc, #360]	; (800a1c8 <HAL_UART_IRQHandler+0x2b0>)
 800a05e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00b      	beq.n	800a07c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2208      	movs	r2, #8
 800a06a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a072:	f043 0208 	orr.w	r2, r3, #8
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a084:	2b00      	cmp	r3, #0
 800a086:	d012      	beq.n	800a0ae <HAL_UART_IRQHandler+0x196>
 800a088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a08c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00c      	beq.n	800a0ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a09c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0a4:	f043 0220 	orr.w	r2, r3, #32
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f000 82c0 	beq.w	800a63a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0be:	f003 0320 	and.w	r3, r3, #32
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d013      	beq.n	800a0ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ca:	f003 0320 	and.w	r3, r3, #32
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d105      	bne.n	800a0de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d007      	beq.n	800a0ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a102:	2b40      	cmp	r3, #64	; 0x40
 800a104:	d005      	beq.n	800a112 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a10a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d04f      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 fafc 	bl	800b710 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a122:	2b40      	cmp	r3, #64	; 0x40
 800a124:	d141      	bne.n	800a1aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3308      	adds	r3, #8
 800a12c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a13c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3308      	adds	r3, #8
 800a14e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a152:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a15e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a162:	e841 2300 	strex	r3, r2, [r1]
 800a166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1d9      	bne.n	800a126 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a176:	2b00      	cmp	r3, #0
 800a178:	d013      	beq.n	800a1a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a17e:	4a14      	ldr	r2, [pc, #80]	; (800a1d0 <HAL_UART_IRQHandler+0x2b8>)
 800a180:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a186:	4618      	mov	r0, r3
 800a188:	f7f9 ff84 	bl	8004094 <HAL_DMA_Abort_IT>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d017      	beq.n	800a1c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a19c:	4610      	mov	r0, r2
 800a19e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a0:	e00f      	b.n	800a1c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fa56 	bl	800a654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a8:	e00b      	b.n	800a1c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa52 	bl	800a654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1b0:	e007      	b.n	800a1c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fa4e 	bl	800a654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a1c0:	e23b      	b.n	800a63a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c2:	bf00      	nop
    return;
 800a1c4:	e239      	b.n	800a63a <HAL_UART_IRQHandler+0x722>
 800a1c6:	bf00      	nop
 800a1c8:	10000001 	.word	0x10000001
 800a1cc:	04000120 	.word	0x04000120
 800a1d0:	0800b7dd 	.word	0x0800b7dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	f040 81ce 	bne.w	800a57a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e2:	f003 0310 	and.w	r3, r3, #16
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 81c7 	beq.w	800a57a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1f0:	f003 0310 	and.w	r3, r3, #16
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 81c0 	beq.w	800a57a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2210      	movs	r2, #16
 800a200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20c:	2b40      	cmp	r3, #64	; 0x40
 800a20e:	f040 813b 	bne.w	800a488 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a8b      	ldr	r2, [pc, #556]	; (800a448 <HAL_UART_IRQHandler+0x530>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d059      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a89      	ldr	r2, [pc, #548]	; (800a44c <HAL_UART_IRQHandler+0x534>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d053      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a87      	ldr	r2, [pc, #540]	; (800a450 <HAL_UART_IRQHandler+0x538>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d04d      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a85      	ldr	r2, [pc, #532]	; (800a454 <HAL_UART_IRQHandler+0x53c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d047      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a83      	ldr	r2, [pc, #524]	; (800a458 <HAL_UART_IRQHandler+0x540>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d041      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a81      	ldr	r2, [pc, #516]	; (800a45c <HAL_UART_IRQHandler+0x544>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d03b      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a7f      	ldr	r2, [pc, #508]	; (800a460 <HAL_UART_IRQHandler+0x548>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d035      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a7d      	ldr	r2, [pc, #500]	; (800a464 <HAL_UART_IRQHandler+0x54c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d02f      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a7b      	ldr	r2, [pc, #492]	; (800a468 <HAL_UART_IRQHandler+0x550>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d029      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a79      	ldr	r2, [pc, #484]	; (800a46c <HAL_UART_IRQHandler+0x554>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d023      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a77      	ldr	r2, [pc, #476]	; (800a470 <HAL_UART_IRQHandler+0x558>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d01d      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a75      	ldr	r2, [pc, #468]	; (800a474 <HAL_UART_IRQHandler+0x55c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d017      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a73      	ldr	r2, [pc, #460]	; (800a478 <HAL_UART_IRQHandler+0x560>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d011      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a71      	ldr	r2, [pc, #452]	; (800a47c <HAL_UART_IRQHandler+0x564>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d00b      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a6f      	ldr	r2, [pc, #444]	; (800a480 <HAL_UART_IRQHandler+0x568>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d005      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x3ba>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a6d      	ldr	r2, [pc, #436]	; (800a484 <HAL_UART_IRQHandler+0x56c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d105      	bne.n	800a2de <HAL_UART_IRQHandler+0x3c6>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	e004      	b.n	800a2e8 <HAL_UART_IRQHandler+0x3d0>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 81a4 	beq.w	800a63e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a300:	429a      	cmp	r2, r3
 800a302:	f080 819c 	bcs.w	800a63e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a30c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a31a:	f000 8086 	beq.w	800a42a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a326:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a33a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a34c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a350:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a354:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a358:	e841 2300 	strex	r3, r2, [r1]
 800a35c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1da      	bne.n	800a31e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3308      	adds	r3, #8
 800a36e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a372:	e853 3f00 	ldrex	r3, [r3]
 800a376:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a378:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a37a:	f023 0301 	bic.w	r3, r3, #1
 800a37e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3308      	adds	r3, #8
 800a388:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a38c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a390:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a394:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a398:	e841 2300 	strex	r3, r2, [r1]
 800a39c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a39e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e1      	bne.n	800a368 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3308      	adds	r3, #8
 800a3c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3d0:	e841 2300 	strex	r3, r2, [r1]
 800a3d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e3      	bne.n	800a3a4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2220      	movs	r2, #32
 800a3e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3f2:	e853 3f00 	ldrex	r3, [r3]
 800a3f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3fa:	f023 0310 	bic.w	r3, r3, #16
 800a3fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a40c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a40e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a414:	e841 2300 	strex	r3, r2, [r1]
 800a418:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e4      	bne.n	800a3ea <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a424:	4618      	mov	r0, r3
 800a426:	f7f9 fb17 	bl	8003a58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a436:	b29b      	uxth	r3, r3
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f912 	bl	800a668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a444:	e0fb      	b.n	800a63e <HAL_UART_IRQHandler+0x726>
 800a446:	bf00      	nop
 800a448:	40020010 	.word	0x40020010
 800a44c:	40020028 	.word	0x40020028
 800a450:	40020040 	.word	0x40020040
 800a454:	40020058 	.word	0x40020058
 800a458:	40020070 	.word	0x40020070
 800a45c:	40020088 	.word	0x40020088
 800a460:	400200a0 	.word	0x400200a0
 800a464:	400200b8 	.word	0x400200b8
 800a468:	40020410 	.word	0x40020410
 800a46c:	40020428 	.word	0x40020428
 800a470:	40020440 	.word	0x40020440
 800a474:	40020458 	.word	0x40020458
 800a478:	40020470 	.word	0x40020470
 800a47c:	40020488 	.word	0x40020488
 800a480:	400204a0 	.word	0x400204a0
 800a484:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a494:	b29b      	uxth	r3, r3
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 80cc 	beq.w	800a642 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a4aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f000 80c7 	beq.w	800a642 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4bc:	e853 3f00 	ldrex	r3, [r3]
 800a4c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a4d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e4      	bne.n	800a4b4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	e853 3f00 	ldrex	r3, [r3]
 800a4f8:	623b      	str	r3, [r7, #32]
   return(result);
 800a4fa:	6a3a      	ldr	r2, [r7, #32]
 800a4fc:	4b54      	ldr	r3, [pc, #336]	; (800a650 <HAL_UART_IRQHandler+0x738>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3308      	adds	r3, #8
 800a50a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a50e:	633a      	str	r2, [r7, #48]	; 0x30
 800a510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e3      	bne.n	800a4ea <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	e853 3f00 	ldrex	r3, [r3]
 800a542:	60fb      	str	r3, [r7, #12]
   return(result);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0310 	bic.w	r3, r3, #16
 800a54a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a558:	61fb      	str	r3, [r7, #28]
 800a55a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55c:	69b9      	ldr	r1, [r7, #24]
 800a55e:	69fa      	ldr	r2, [r7, #28]
 800a560:	e841 2300 	strex	r3, r2, [r1]
 800a564:	617b      	str	r3, [r7, #20]
   return(result);
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e4      	bne.n	800a536 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a56c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f878 	bl	800a668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a578:	e063      	b.n	800a642 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a57e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00e      	beq.n	800a5a4 <HAL_UART_IRQHandler+0x68c>
 800a586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a58a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d008      	beq.n	800a5a4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a59a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f001 ff5d 	bl	800c45c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5a2:	e051      	b.n	800a648 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d014      	beq.n	800a5da <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d105      	bne.n	800a5c8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d03a      	beq.n	800a646 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	4798      	blx	r3
    }
    return;
 800a5d8:	e035      	b.n	800a646 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <HAL_UART_IRQHandler+0x6e2>
 800a5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 faaa 	bl	800bb4c <UART_EndTransmit_IT>
    return;
 800a5f8:	e026      	b.n	800a648 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <HAL_UART_IRQHandler+0x702>
 800a606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a60a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f001 ff36 	bl	800c484 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a618:	e016      	b.n	800a648 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a61e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d010      	beq.n	800a648 <HAL_UART_IRQHandler+0x730>
 800a626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	da0c      	bge.n	800a648 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f001 ff1e 	bl	800c470 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a634:	e008      	b.n	800a648 <HAL_UART_IRQHandler+0x730>
      return;
 800a636:	bf00      	nop
 800a638:	e006      	b.n	800a648 <HAL_UART_IRQHandler+0x730>
    return;
 800a63a:	bf00      	nop
 800a63c:	e004      	b.n	800a648 <HAL_UART_IRQHandler+0x730>
      return;
 800a63e:	bf00      	nop
 800a640:	e002      	b.n	800a648 <HAL_UART_IRQHandler+0x730>
      return;
 800a642:	bf00      	nop
 800a644:	e000      	b.n	800a648 <HAL_UART_IRQHandler+0x730>
    return;
 800a646:	bf00      	nop
  }
}
 800a648:	37e8      	adds	r7, #232	; 0xe8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	effffffe 	.word	0xeffffffe

0800a654 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a684:	b092      	sub	sp, #72	; 0x48
 800a686:	af00      	add	r7, sp, #0
 800a688:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	689a      	ldr	r2, [r3, #8]
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	431a      	orrs	r2, r3
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	4bbe      	ldr	r3, [pc, #760]	; (800a9a8 <UART_SetConfig+0x328>)
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	6812      	ldr	r2, [r2, #0]
 800a6b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6b8:	430b      	orrs	r3, r1
 800a6ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	68da      	ldr	r2, [r3, #12]
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4ab3      	ldr	r2, [pc, #716]	; (800a9ac <UART_SetConfig+0x32c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d004      	beq.n	800a6ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	4baf      	ldr	r3, [pc, #700]	; (800a9b0 <UART_SetConfig+0x330>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	6812      	ldr	r2, [r2, #0]
 800a6fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a706:	f023 010f 	bic.w	r1, r3, #15
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4aa6      	ldr	r2, [pc, #664]	; (800a9b4 <UART_SetConfig+0x334>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d177      	bne.n	800a810 <UART_SetConfig+0x190>
 800a720:	4ba5      	ldr	r3, [pc, #660]	; (800a9b8 <UART_SetConfig+0x338>)
 800a722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a728:	2b28      	cmp	r3, #40	; 0x28
 800a72a:	d86d      	bhi.n	800a808 <UART_SetConfig+0x188>
 800a72c:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <UART_SetConfig+0xb4>)
 800a72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a732:	bf00      	nop
 800a734:	0800a7d9 	.word	0x0800a7d9
 800a738:	0800a809 	.word	0x0800a809
 800a73c:	0800a809 	.word	0x0800a809
 800a740:	0800a809 	.word	0x0800a809
 800a744:	0800a809 	.word	0x0800a809
 800a748:	0800a809 	.word	0x0800a809
 800a74c:	0800a809 	.word	0x0800a809
 800a750:	0800a809 	.word	0x0800a809
 800a754:	0800a7e1 	.word	0x0800a7e1
 800a758:	0800a809 	.word	0x0800a809
 800a75c:	0800a809 	.word	0x0800a809
 800a760:	0800a809 	.word	0x0800a809
 800a764:	0800a809 	.word	0x0800a809
 800a768:	0800a809 	.word	0x0800a809
 800a76c:	0800a809 	.word	0x0800a809
 800a770:	0800a809 	.word	0x0800a809
 800a774:	0800a7e9 	.word	0x0800a7e9
 800a778:	0800a809 	.word	0x0800a809
 800a77c:	0800a809 	.word	0x0800a809
 800a780:	0800a809 	.word	0x0800a809
 800a784:	0800a809 	.word	0x0800a809
 800a788:	0800a809 	.word	0x0800a809
 800a78c:	0800a809 	.word	0x0800a809
 800a790:	0800a809 	.word	0x0800a809
 800a794:	0800a7f1 	.word	0x0800a7f1
 800a798:	0800a809 	.word	0x0800a809
 800a79c:	0800a809 	.word	0x0800a809
 800a7a0:	0800a809 	.word	0x0800a809
 800a7a4:	0800a809 	.word	0x0800a809
 800a7a8:	0800a809 	.word	0x0800a809
 800a7ac:	0800a809 	.word	0x0800a809
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a7f9 	.word	0x0800a7f9
 800a7b8:	0800a809 	.word	0x0800a809
 800a7bc:	0800a809 	.word	0x0800a809
 800a7c0:	0800a809 	.word	0x0800a809
 800a7c4:	0800a809 	.word	0x0800a809
 800a7c8:	0800a809 	.word	0x0800a809
 800a7cc:	0800a809 	.word	0x0800a809
 800a7d0:	0800a809 	.word	0x0800a809
 800a7d4:	0800a801 	.word	0x0800a801
 800a7d8:	2301      	movs	r3, #1
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7de:	e222      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a7e0:	2304      	movs	r3, #4
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e6:	e21e      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a7e8:	2308      	movs	r3, #8
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ee:	e21a      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a7f0:	2310      	movs	r3, #16
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f6:	e216      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a7f8:	2320      	movs	r3, #32
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fe:	e212      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a800:	2340      	movs	r3, #64	; 0x40
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a806:	e20e      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a808:	2380      	movs	r3, #128	; 0x80
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80e:	e20a      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a69      	ldr	r2, [pc, #420]	; (800a9bc <UART_SetConfig+0x33c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d130      	bne.n	800a87c <UART_SetConfig+0x1fc>
 800a81a:	4b67      	ldr	r3, [pc, #412]	; (800a9b8 <UART_SetConfig+0x338>)
 800a81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	2b05      	cmp	r3, #5
 800a824:	d826      	bhi.n	800a874 <UART_SetConfig+0x1f4>
 800a826:	a201      	add	r2, pc, #4	; (adr r2, 800a82c <UART_SetConfig+0x1ac>)
 800a828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82c:	0800a845 	.word	0x0800a845
 800a830:	0800a84d 	.word	0x0800a84d
 800a834:	0800a855 	.word	0x0800a855
 800a838:	0800a85d 	.word	0x0800a85d
 800a83c:	0800a865 	.word	0x0800a865
 800a840:	0800a86d 	.word	0x0800a86d
 800a844:	2300      	movs	r3, #0
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a84a:	e1ec      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a84c:	2304      	movs	r3, #4
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a852:	e1e8      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a854:	2308      	movs	r3, #8
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a85a:	e1e4      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a85c:	2310      	movs	r3, #16
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a862:	e1e0      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a864:	2320      	movs	r3, #32
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86a:	e1dc      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a86c:	2340      	movs	r3, #64	; 0x40
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a872:	e1d8      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a874:	2380      	movs	r3, #128	; 0x80
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87a:	e1d4      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a4f      	ldr	r2, [pc, #316]	; (800a9c0 <UART_SetConfig+0x340>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d130      	bne.n	800a8e8 <UART_SetConfig+0x268>
 800a886:	4b4c      	ldr	r3, [pc, #304]	; (800a9b8 <UART_SetConfig+0x338>)
 800a888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88a:	f003 0307 	and.w	r3, r3, #7
 800a88e:	2b05      	cmp	r3, #5
 800a890:	d826      	bhi.n	800a8e0 <UART_SetConfig+0x260>
 800a892:	a201      	add	r2, pc, #4	; (adr r2, 800a898 <UART_SetConfig+0x218>)
 800a894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a898:	0800a8b1 	.word	0x0800a8b1
 800a89c:	0800a8b9 	.word	0x0800a8b9
 800a8a0:	0800a8c1 	.word	0x0800a8c1
 800a8a4:	0800a8c9 	.word	0x0800a8c9
 800a8a8:	0800a8d1 	.word	0x0800a8d1
 800a8ac:	0800a8d9 	.word	0x0800a8d9
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b6:	e1b6      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a8b8:	2304      	movs	r3, #4
 800a8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8be:	e1b2      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a8c0:	2308      	movs	r3, #8
 800a8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c6:	e1ae      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a8c8:	2310      	movs	r3, #16
 800a8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ce:	e1aa      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a8d0:	2320      	movs	r3, #32
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d6:	e1a6      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a8d8:	2340      	movs	r3, #64	; 0x40
 800a8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8de:	e1a2      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a8e0:	2380      	movs	r3, #128	; 0x80
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e6:	e19e      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a35      	ldr	r2, [pc, #212]	; (800a9c4 <UART_SetConfig+0x344>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d130      	bne.n	800a954 <UART_SetConfig+0x2d4>
 800a8f2:	4b31      	ldr	r3, [pc, #196]	; (800a9b8 <UART_SetConfig+0x338>)
 800a8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	2b05      	cmp	r3, #5
 800a8fc:	d826      	bhi.n	800a94c <UART_SetConfig+0x2cc>
 800a8fe:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <UART_SetConfig+0x284>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a91d 	.word	0x0800a91d
 800a908:	0800a925 	.word	0x0800a925
 800a90c:	0800a92d 	.word	0x0800a92d
 800a910:	0800a935 	.word	0x0800a935
 800a914:	0800a93d 	.word	0x0800a93d
 800a918:	0800a945 	.word	0x0800a945
 800a91c:	2300      	movs	r3, #0
 800a91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a922:	e180      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a924:	2304      	movs	r3, #4
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a92a:	e17c      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a92c:	2308      	movs	r3, #8
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a932:	e178      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a934:	2310      	movs	r3, #16
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93a:	e174      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a93c:	2320      	movs	r3, #32
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a942:	e170      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a944:	2340      	movs	r3, #64	; 0x40
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94a:	e16c      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a94c:	2380      	movs	r3, #128	; 0x80
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a952:	e168      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a1b      	ldr	r2, [pc, #108]	; (800a9c8 <UART_SetConfig+0x348>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d142      	bne.n	800a9e4 <UART_SetConfig+0x364>
 800a95e:	4b16      	ldr	r3, [pc, #88]	; (800a9b8 <UART_SetConfig+0x338>)
 800a960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a962:	f003 0307 	and.w	r3, r3, #7
 800a966:	2b05      	cmp	r3, #5
 800a968:	d838      	bhi.n	800a9dc <UART_SetConfig+0x35c>
 800a96a:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <UART_SetConfig+0x2f0>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a989 	.word	0x0800a989
 800a974:	0800a991 	.word	0x0800a991
 800a978:	0800a999 	.word	0x0800a999
 800a97c:	0800a9a1 	.word	0x0800a9a1
 800a980:	0800a9cd 	.word	0x0800a9cd
 800a984:	0800a9d5 	.word	0x0800a9d5
 800a988:	2300      	movs	r3, #0
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98e:	e14a      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a990:	2304      	movs	r3, #4
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a996:	e146      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a998:	2308      	movs	r3, #8
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99e:	e142      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a9a0:	2310      	movs	r3, #16
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a6:	e13e      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a9a8:	cfff69f3 	.word	0xcfff69f3
 800a9ac:	58000c00 	.word	0x58000c00
 800a9b0:	11fff4ff 	.word	0x11fff4ff
 800a9b4:	40011000 	.word	0x40011000
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	40004400 	.word	0x40004400
 800a9c0:	40004800 	.word	0x40004800
 800a9c4:	40004c00 	.word	0x40004c00
 800a9c8:	40005000 	.word	0x40005000
 800a9cc:	2320      	movs	r3, #32
 800a9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d2:	e128      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a9d4:	2340      	movs	r3, #64	; 0x40
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9da:	e124      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a9dc:	2380      	movs	r3, #128	; 0x80
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9e2:	e120      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4acb      	ldr	r2, [pc, #812]	; (800ad18 <UART_SetConfig+0x698>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d176      	bne.n	800aadc <UART_SetConfig+0x45c>
 800a9ee:	4bcb      	ldr	r3, [pc, #812]	; (800ad1c <UART_SetConfig+0x69c>)
 800a9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9f6:	2b28      	cmp	r3, #40	; 0x28
 800a9f8:	d86c      	bhi.n	800aad4 <UART_SetConfig+0x454>
 800a9fa:	a201      	add	r2, pc, #4	; (adr r2, 800aa00 <UART_SetConfig+0x380>)
 800a9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa00:	0800aaa5 	.word	0x0800aaa5
 800aa04:	0800aad5 	.word	0x0800aad5
 800aa08:	0800aad5 	.word	0x0800aad5
 800aa0c:	0800aad5 	.word	0x0800aad5
 800aa10:	0800aad5 	.word	0x0800aad5
 800aa14:	0800aad5 	.word	0x0800aad5
 800aa18:	0800aad5 	.word	0x0800aad5
 800aa1c:	0800aad5 	.word	0x0800aad5
 800aa20:	0800aaad 	.word	0x0800aaad
 800aa24:	0800aad5 	.word	0x0800aad5
 800aa28:	0800aad5 	.word	0x0800aad5
 800aa2c:	0800aad5 	.word	0x0800aad5
 800aa30:	0800aad5 	.word	0x0800aad5
 800aa34:	0800aad5 	.word	0x0800aad5
 800aa38:	0800aad5 	.word	0x0800aad5
 800aa3c:	0800aad5 	.word	0x0800aad5
 800aa40:	0800aab5 	.word	0x0800aab5
 800aa44:	0800aad5 	.word	0x0800aad5
 800aa48:	0800aad5 	.word	0x0800aad5
 800aa4c:	0800aad5 	.word	0x0800aad5
 800aa50:	0800aad5 	.word	0x0800aad5
 800aa54:	0800aad5 	.word	0x0800aad5
 800aa58:	0800aad5 	.word	0x0800aad5
 800aa5c:	0800aad5 	.word	0x0800aad5
 800aa60:	0800aabd 	.word	0x0800aabd
 800aa64:	0800aad5 	.word	0x0800aad5
 800aa68:	0800aad5 	.word	0x0800aad5
 800aa6c:	0800aad5 	.word	0x0800aad5
 800aa70:	0800aad5 	.word	0x0800aad5
 800aa74:	0800aad5 	.word	0x0800aad5
 800aa78:	0800aad5 	.word	0x0800aad5
 800aa7c:	0800aad5 	.word	0x0800aad5
 800aa80:	0800aac5 	.word	0x0800aac5
 800aa84:	0800aad5 	.word	0x0800aad5
 800aa88:	0800aad5 	.word	0x0800aad5
 800aa8c:	0800aad5 	.word	0x0800aad5
 800aa90:	0800aad5 	.word	0x0800aad5
 800aa94:	0800aad5 	.word	0x0800aad5
 800aa98:	0800aad5 	.word	0x0800aad5
 800aa9c:	0800aad5 	.word	0x0800aad5
 800aaa0:	0800aacd 	.word	0x0800aacd
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaaa:	e0bc      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800aaac:	2304      	movs	r3, #4
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aab2:	e0b8      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800aab4:	2308      	movs	r3, #8
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaba:	e0b4      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800aabc:	2310      	movs	r3, #16
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aac2:	e0b0      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800aac4:	2320      	movs	r3, #32
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaca:	e0ac      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800aacc:	2340      	movs	r3, #64	; 0x40
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad2:	e0a8      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800aad4:	2380      	movs	r3, #128	; 0x80
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aada:	e0a4      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a8f      	ldr	r2, [pc, #572]	; (800ad20 <UART_SetConfig+0x6a0>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d130      	bne.n	800ab48 <UART_SetConfig+0x4c8>
 800aae6:	4b8d      	ldr	r3, [pc, #564]	; (800ad1c <UART_SetConfig+0x69c>)
 800aae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaea:	f003 0307 	and.w	r3, r3, #7
 800aaee:	2b05      	cmp	r3, #5
 800aaf0:	d826      	bhi.n	800ab40 <UART_SetConfig+0x4c0>
 800aaf2:	a201      	add	r2, pc, #4	; (adr r2, 800aaf8 <UART_SetConfig+0x478>)
 800aaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf8:	0800ab11 	.word	0x0800ab11
 800aafc:	0800ab19 	.word	0x0800ab19
 800ab00:	0800ab21 	.word	0x0800ab21
 800ab04:	0800ab29 	.word	0x0800ab29
 800ab08:	0800ab31 	.word	0x0800ab31
 800ab0c:	0800ab39 	.word	0x0800ab39
 800ab10:	2300      	movs	r3, #0
 800ab12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab16:	e086      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab18:	2304      	movs	r3, #4
 800ab1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab1e:	e082      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab20:	2308      	movs	r3, #8
 800ab22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab26:	e07e      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab28:	2310      	movs	r3, #16
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab2e:	e07a      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab30:	2320      	movs	r3, #32
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab36:	e076      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab38:	2340      	movs	r3, #64	; 0x40
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3e:	e072      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab40:	2380      	movs	r3, #128	; 0x80
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab46:	e06e      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a75      	ldr	r2, [pc, #468]	; (800ad24 <UART_SetConfig+0x6a4>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d130      	bne.n	800abb4 <UART_SetConfig+0x534>
 800ab52:	4b72      	ldr	r3, [pc, #456]	; (800ad1c <UART_SetConfig+0x69c>)
 800ab54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b05      	cmp	r3, #5
 800ab5c:	d826      	bhi.n	800abac <UART_SetConfig+0x52c>
 800ab5e:	a201      	add	r2, pc, #4	; (adr r2, 800ab64 <UART_SetConfig+0x4e4>)
 800ab60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab64:	0800ab7d 	.word	0x0800ab7d
 800ab68:	0800ab85 	.word	0x0800ab85
 800ab6c:	0800ab8d 	.word	0x0800ab8d
 800ab70:	0800ab95 	.word	0x0800ab95
 800ab74:	0800ab9d 	.word	0x0800ab9d
 800ab78:	0800aba5 	.word	0x0800aba5
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab82:	e050      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab84:	2304      	movs	r3, #4
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab8a:	e04c      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab8c:	2308      	movs	r3, #8
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab92:	e048      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab94:	2310      	movs	r3, #16
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab9a:	e044      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ab9c:	2320      	movs	r3, #32
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba2:	e040      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800aba4:	2340      	movs	r3, #64	; 0x40
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abaa:	e03c      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800abac:	2380      	movs	r3, #128	; 0x80
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abb2:	e038      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a5b      	ldr	r2, [pc, #364]	; (800ad28 <UART_SetConfig+0x6a8>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d130      	bne.n	800ac20 <UART_SetConfig+0x5a0>
 800abbe:	4b57      	ldr	r3, [pc, #348]	; (800ad1c <UART_SetConfig+0x69c>)
 800abc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	d826      	bhi.n	800ac18 <UART_SetConfig+0x598>
 800abca:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <UART_SetConfig+0x550>)
 800abcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd0:	0800abe9 	.word	0x0800abe9
 800abd4:	0800abf1 	.word	0x0800abf1
 800abd8:	0800abf9 	.word	0x0800abf9
 800abdc:	0800ac01 	.word	0x0800ac01
 800abe0:	0800ac09 	.word	0x0800ac09
 800abe4:	0800ac11 	.word	0x0800ac11
 800abe8:	2302      	movs	r3, #2
 800abea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abee:	e01a      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800abf0:	2304      	movs	r3, #4
 800abf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abf6:	e016      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800abf8:	2308      	movs	r3, #8
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abfe:	e012      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ac00:	2310      	movs	r3, #16
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac06:	e00e      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ac08:	2320      	movs	r3, #32
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac0e:	e00a      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ac10:	2340      	movs	r3, #64	; 0x40
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac16:	e006      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ac18:	2380      	movs	r3, #128	; 0x80
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac1e:	e002      	b.n	800ac26 <UART_SetConfig+0x5a6>
 800ac20:	2380      	movs	r3, #128	; 0x80
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a3f      	ldr	r2, [pc, #252]	; (800ad28 <UART_SetConfig+0x6a8>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	f040 80f8 	bne.w	800ae22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ac36:	2b20      	cmp	r3, #32
 800ac38:	dc46      	bgt.n	800acc8 <UART_SetConfig+0x648>
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	f2c0 8082 	blt.w	800ad44 <UART_SetConfig+0x6c4>
 800ac40:	3b02      	subs	r3, #2
 800ac42:	2b1e      	cmp	r3, #30
 800ac44:	d87e      	bhi.n	800ad44 <UART_SetConfig+0x6c4>
 800ac46:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <UART_SetConfig+0x5cc>)
 800ac48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4c:	0800accf 	.word	0x0800accf
 800ac50:	0800ad45 	.word	0x0800ad45
 800ac54:	0800acd7 	.word	0x0800acd7
 800ac58:	0800ad45 	.word	0x0800ad45
 800ac5c:	0800ad45 	.word	0x0800ad45
 800ac60:	0800ad45 	.word	0x0800ad45
 800ac64:	0800ace7 	.word	0x0800ace7
 800ac68:	0800ad45 	.word	0x0800ad45
 800ac6c:	0800ad45 	.word	0x0800ad45
 800ac70:	0800ad45 	.word	0x0800ad45
 800ac74:	0800ad45 	.word	0x0800ad45
 800ac78:	0800ad45 	.word	0x0800ad45
 800ac7c:	0800ad45 	.word	0x0800ad45
 800ac80:	0800ad45 	.word	0x0800ad45
 800ac84:	0800acf7 	.word	0x0800acf7
 800ac88:	0800ad45 	.word	0x0800ad45
 800ac8c:	0800ad45 	.word	0x0800ad45
 800ac90:	0800ad45 	.word	0x0800ad45
 800ac94:	0800ad45 	.word	0x0800ad45
 800ac98:	0800ad45 	.word	0x0800ad45
 800ac9c:	0800ad45 	.word	0x0800ad45
 800aca0:	0800ad45 	.word	0x0800ad45
 800aca4:	0800ad45 	.word	0x0800ad45
 800aca8:	0800ad45 	.word	0x0800ad45
 800acac:	0800ad45 	.word	0x0800ad45
 800acb0:	0800ad45 	.word	0x0800ad45
 800acb4:	0800ad45 	.word	0x0800ad45
 800acb8:	0800ad45 	.word	0x0800ad45
 800acbc:	0800ad45 	.word	0x0800ad45
 800acc0:	0800ad45 	.word	0x0800ad45
 800acc4:	0800ad37 	.word	0x0800ad37
 800acc8:	2b40      	cmp	r3, #64	; 0x40
 800acca:	d037      	beq.n	800ad3c <UART_SetConfig+0x6bc>
 800accc:	e03a      	b.n	800ad44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800acce:	f7fc fc63 	bl	8007598 <HAL_RCCEx_GetD3PCLK1Freq>
 800acd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800acd4:	e03c      	b.n	800ad50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fc fc72 	bl	80075c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace4:	e034      	b.n	800ad50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace6:	f107 0318 	add.w	r3, r7, #24
 800acea:	4618      	mov	r0, r3
 800acec:	f7fc fdbe 	bl	800786c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf4:	e02c      	b.n	800ad50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acf6:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <UART_SetConfig+0x69c>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0320 	and.w	r3, r3, #32
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d016      	beq.n	800ad30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad02:	4b06      	ldr	r3, [pc, #24]	; (800ad1c <UART_SetConfig+0x69c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	08db      	lsrs	r3, r3, #3
 800ad08:	f003 0303 	and.w	r3, r3, #3
 800ad0c:	4a07      	ldr	r2, [pc, #28]	; (800ad2c <UART_SetConfig+0x6ac>)
 800ad0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad14:	e01c      	b.n	800ad50 <UART_SetConfig+0x6d0>
 800ad16:	bf00      	nop
 800ad18:	40011400 	.word	0x40011400
 800ad1c:	58024400 	.word	0x58024400
 800ad20:	40007800 	.word	0x40007800
 800ad24:	40007c00 	.word	0x40007c00
 800ad28:	58000c00 	.word	0x58000c00
 800ad2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ad30:	4b9d      	ldr	r3, [pc, #628]	; (800afa8 <UART_SetConfig+0x928>)
 800ad32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad34:	e00c      	b.n	800ad50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad36:	4b9d      	ldr	r3, [pc, #628]	; (800afac <UART_SetConfig+0x92c>)
 800ad38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad3a:	e009      	b.n	800ad50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad42:	e005      	b.n	800ad50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ad4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f000 81de 	beq.w	800b114 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5c:	4a94      	ldr	r2, [pc, #592]	; (800afb0 <UART_SetConfig+0x930>)
 800ad5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad62:	461a      	mov	r2, r3
 800ad64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad66:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad6a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	4613      	mov	r3, r2
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	4413      	add	r3, r2
 800ad76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d305      	bcc.n	800ad88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d903      	bls.n	800ad90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad8e:	e1c1      	b.n	800b114 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad92:	2200      	movs	r2, #0
 800ad94:	60bb      	str	r3, [r7, #8]
 800ad96:	60fa      	str	r2, [r7, #12]
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	4a84      	ldr	r2, [pc, #528]	; (800afb0 <UART_SetConfig+0x930>)
 800ad9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	2200      	movs	r2, #0
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	607a      	str	r2, [r7, #4]
 800adaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800adb2:	f7f5 faed 	bl	8000390 <__aeabi_uldivmod>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4610      	mov	r0, r2
 800adbc:	4619      	mov	r1, r3
 800adbe:	f04f 0200 	mov.w	r2, #0
 800adc2:	f04f 0300 	mov.w	r3, #0
 800adc6:	020b      	lsls	r3, r1, #8
 800adc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800adcc:	0202      	lsls	r2, r0, #8
 800adce:	6979      	ldr	r1, [r7, #20]
 800add0:	6849      	ldr	r1, [r1, #4]
 800add2:	0849      	lsrs	r1, r1, #1
 800add4:	2000      	movs	r0, #0
 800add6:	460c      	mov	r4, r1
 800add8:	4605      	mov	r5, r0
 800adda:	eb12 0804 	adds.w	r8, r2, r4
 800adde:	eb43 0905 	adc.w	r9, r3, r5
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	469a      	mov	sl, r3
 800adea:	4693      	mov	fp, r2
 800adec:	4652      	mov	r2, sl
 800adee:	465b      	mov	r3, fp
 800adf0:	4640      	mov	r0, r8
 800adf2:	4649      	mov	r1, r9
 800adf4:	f7f5 facc 	bl	8000390 <__aeabi_uldivmod>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4613      	mov	r3, r2
 800adfe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae06:	d308      	bcc.n	800ae1a <UART_SetConfig+0x79a>
 800ae08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae0e:	d204      	bcs.n	800ae1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae16:	60da      	str	r2, [r3, #12]
 800ae18:	e17c      	b.n	800b114 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ae20:	e178      	b.n	800b114 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae2a:	f040 80c5 	bne.w	800afb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ae2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	dc48      	bgt.n	800aec8 <UART_SetConfig+0x848>
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	db7b      	blt.n	800af32 <UART_SetConfig+0x8b2>
 800ae3a:	2b20      	cmp	r3, #32
 800ae3c:	d879      	bhi.n	800af32 <UART_SetConfig+0x8b2>
 800ae3e:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <UART_SetConfig+0x7c4>)
 800ae40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae44:	0800aecf 	.word	0x0800aecf
 800ae48:	0800aed7 	.word	0x0800aed7
 800ae4c:	0800af33 	.word	0x0800af33
 800ae50:	0800af33 	.word	0x0800af33
 800ae54:	0800aedf 	.word	0x0800aedf
 800ae58:	0800af33 	.word	0x0800af33
 800ae5c:	0800af33 	.word	0x0800af33
 800ae60:	0800af33 	.word	0x0800af33
 800ae64:	0800aeef 	.word	0x0800aeef
 800ae68:	0800af33 	.word	0x0800af33
 800ae6c:	0800af33 	.word	0x0800af33
 800ae70:	0800af33 	.word	0x0800af33
 800ae74:	0800af33 	.word	0x0800af33
 800ae78:	0800af33 	.word	0x0800af33
 800ae7c:	0800af33 	.word	0x0800af33
 800ae80:	0800af33 	.word	0x0800af33
 800ae84:	0800aeff 	.word	0x0800aeff
 800ae88:	0800af33 	.word	0x0800af33
 800ae8c:	0800af33 	.word	0x0800af33
 800ae90:	0800af33 	.word	0x0800af33
 800ae94:	0800af33 	.word	0x0800af33
 800ae98:	0800af33 	.word	0x0800af33
 800ae9c:	0800af33 	.word	0x0800af33
 800aea0:	0800af33 	.word	0x0800af33
 800aea4:	0800af33 	.word	0x0800af33
 800aea8:	0800af33 	.word	0x0800af33
 800aeac:	0800af33 	.word	0x0800af33
 800aeb0:	0800af33 	.word	0x0800af33
 800aeb4:	0800af33 	.word	0x0800af33
 800aeb8:	0800af33 	.word	0x0800af33
 800aebc:	0800af33 	.word	0x0800af33
 800aec0:	0800af33 	.word	0x0800af33
 800aec4:	0800af25 	.word	0x0800af25
 800aec8:	2b40      	cmp	r3, #64	; 0x40
 800aeca:	d02e      	beq.n	800af2a <UART_SetConfig+0x8aa>
 800aecc:	e031      	b.n	800af32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aece:	f7fb fbf1 	bl	80066b4 <HAL_RCC_GetPCLK1Freq>
 800aed2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aed4:	e033      	b.n	800af3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aed6:	f7fb fc03 	bl	80066e0 <HAL_RCC_GetPCLK2Freq>
 800aeda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aedc:	e02f      	b.n	800af3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fc fb6e 	bl	80075c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeec:	e027      	b.n	800af3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeee:	f107 0318 	add.w	r3, r7, #24
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fc fcba 	bl	800786c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aefc:	e01f      	b.n	800af3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aefe:	4b2d      	ldr	r3, [pc, #180]	; (800afb4 <UART_SetConfig+0x934>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0320 	and.w	r3, r3, #32
 800af06:	2b00      	cmp	r3, #0
 800af08:	d009      	beq.n	800af1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af0a:	4b2a      	ldr	r3, [pc, #168]	; (800afb4 <UART_SetConfig+0x934>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	08db      	lsrs	r3, r3, #3
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	4a24      	ldr	r2, [pc, #144]	; (800afa8 <UART_SetConfig+0x928>)
 800af16:	fa22 f303 	lsr.w	r3, r2, r3
 800af1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af1c:	e00f      	b.n	800af3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800af1e:	4b22      	ldr	r3, [pc, #136]	; (800afa8 <UART_SetConfig+0x928>)
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af22:	e00c      	b.n	800af3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af24:	4b21      	ldr	r3, [pc, #132]	; (800afac <UART_SetConfig+0x92c>)
 800af26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af28:	e009      	b.n	800af3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af30:	e005      	b.n	800af3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800af32:	2300      	movs	r3, #0
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800af3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 80e7 	beq.w	800b114 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4a:	4a19      	ldr	r2, [pc, #100]	; (800afb0 <UART_SetConfig+0x930>)
 800af4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af50:	461a      	mov	r2, r3
 800af52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af54:	fbb3 f3f2 	udiv	r3, r3, r2
 800af58:	005a      	lsls	r2, r3, #1
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	085b      	lsrs	r3, r3, #1
 800af60:	441a      	add	r2, r3
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	fbb2 f3f3 	udiv	r3, r2, r3
 800af6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6e:	2b0f      	cmp	r3, #15
 800af70:	d916      	bls.n	800afa0 <UART_SetConfig+0x920>
 800af72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af78:	d212      	bcs.n	800afa0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	f023 030f 	bic.w	r3, r3, #15
 800af82:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	085b      	lsrs	r3, r3, #1
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f003 0307 	and.w	r3, r3, #7
 800af8e:	b29a      	uxth	r2, r3
 800af90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af92:	4313      	orrs	r3, r2
 800af94:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800af9c:	60da      	str	r2, [r3, #12]
 800af9e:	e0b9      	b.n	800b114 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800afa6:	e0b5      	b.n	800b114 <UART_SetConfig+0xa94>
 800afa8:	03d09000 	.word	0x03d09000
 800afac:	003d0900 	.word	0x003d0900
 800afb0:	0800e4d8 	.word	0x0800e4d8
 800afb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800afb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800afbc:	2b20      	cmp	r3, #32
 800afbe:	dc49      	bgt.n	800b054 <UART_SetConfig+0x9d4>
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	db7c      	blt.n	800b0be <UART_SetConfig+0xa3e>
 800afc4:	2b20      	cmp	r3, #32
 800afc6:	d87a      	bhi.n	800b0be <UART_SetConfig+0xa3e>
 800afc8:	a201      	add	r2, pc, #4	; (adr r2, 800afd0 <UART_SetConfig+0x950>)
 800afca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afce:	bf00      	nop
 800afd0:	0800b05b 	.word	0x0800b05b
 800afd4:	0800b063 	.word	0x0800b063
 800afd8:	0800b0bf 	.word	0x0800b0bf
 800afdc:	0800b0bf 	.word	0x0800b0bf
 800afe0:	0800b06b 	.word	0x0800b06b
 800afe4:	0800b0bf 	.word	0x0800b0bf
 800afe8:	0800b0bf 	.word	0x0800b0bf
 800afec:	0800b0bf 	.word	0x0800b0bf
 800aff0:	0800b07b 	.word	0x0800b07b
 800aff4:	0800b0bf 	.word	0x0800b0bf
 800aff8:	0800b0bf 	.word	0x0800b0bf
 800affc:	0800b0bf 	.word	0x0800b0bf
 800b000:	0800b0bf 	.word	0x0800b0bf
 800b004:	0800b0bf 	.word	0x0800b0bf
 800b008:	0800b0bf 	.word	0x0800b0bf
 800b00c:	0800b0bf 	.word	0x0800b0bf
 800b010:	0800b08b 	.word	0x0800b08b
 800b014:	0800b0bf 	.word	0x0800b0bf
 800b018:	0800b0bf 	.word	0x0800b0bf
 800b01c:	0800b0bf 	.word	0x0800b0bf
 800b020:	0800b0bf 	.word	0x0800b0bf
 800b024:	0800b0bf 	.word	0x0800b0bf
 800b028:	0800b0bf 	.word	0x0800b0bf
 800b02c:	0800b0bf 	.word	0x0800b0bf
 800b030:	0800b0bf 	.word	0x0800b0bf
 800b034:	0800b0bf 	.word	0x0800b0bf
 800b038:	0800b0bf 	.word	0x0800b0bf
 800b03c:	0800b0bf 	.word	0x0800b0bf
 800b040:	0800b0bf 	.word	0x0800b0bf
 800b044:	0800b0bf 	.word	0x0800b0bf
 800b048:	0800b0bf 	.word	0x0800b0bf
 800b04c:	0800b0bf 	.word	0x0800b0bf
 800b050:	0800b0b1 	.word	0x0800b0b1
 800b054:	2b40      	cmp	r3, #64	; 0x40
 800b056:	d02e      	beq.n	800b0b6 <UART_SetConfig+0xa36>
 800b058:	e031      	b.n	800b0be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b05a:	f7fb fb2b 	bl	80066b4 <HAL_RCC_GetPCLK1Freq>
 800b05e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b060:	e033      	b.n	800b0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b062:	f7fb fb3d 	bl	80066e0 <HAL_RCC_GetPCLK2Freq>
 800b066:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b068:	e02f      	b.n	800b0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b06a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fc faa8 	bl	80075c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b078:	e027      	b.n	800b0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b07a:	f107 0318 	add.w	r3, r7, #24
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fc fbf4 	bl	800786c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b088:	e01f      	b.n	800b0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b08a:	4b2d      	ldr	r3, [pc, #180]	; (800b140 <UART_SetConfig+0xac0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0320 	and.w	r3, r3, #32
 800b092:	2b00      	cmp	r3, #0
 800b094:	d009      	beq.n	800b0aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b096:	4b2a      	ldr	r3, [pc, #168]	; (800b140 <UART_SetConfig+0xac0>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	08db      	lsrs	r3, r3, #3
 800b09c:	f003 0303 	and.w	r3, r3, #3
 800b0a0:	4a28      	ldr	r2, [pc, #160]	; (800b144 <UART_SetConfig+0xac4>)
 800b0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0a8:	e00f      	b.n	800b0ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b0aa:	4b26      	ldr	r3, [pc, #152]	; (800b144 <UART_SetConfig+0xac4>)
 800b0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0ae:	e00c      	b.n	800b0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0b0:	4b25      	ldr	r3, [pc, #148]	; (800b148 <UART_SetConfig+0xac8>)
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b4:	e009      	b.n	800b0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0bc:	e005      	b.n	800b0ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b0c8:	bf00      	nop
    }

    if (pclk != 0U)
 800b0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d021      	beq.n	800b114 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d4:	4a1d      	ldr	r2, [pc, #116]	; (800b14c <UART_SetConfig+0xacc>)
 800b0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0de:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	085b      	lsrs	r3, r3, #1
 800b0e8:	441a      	add	r2, r3
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	2b0f      	cmp	r3, #15
 800b0f8:	d909      	bls.n	800b10e <UART_SetConfig+0xa8e>
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b100:	d205      	bcs.n	800b10e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	b29a      	uxth	r2, r3
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	60da      	str	r2, [r3, #12]
 800b10c:	e002      	b.n	800b114 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	2201      	movs	r2, #1
 800b118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	2201      	movs	r2, #1
 800b120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	2200      	movs	r2, #0
 800b128:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2200      	movs	r2, #0
 800b12e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b130:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b134:	4618      	mov	r0, r3
 800b136:	3748      	adds	r7, #72	; 0x48
 800b138:	46bd      	mov	sp, r7
 800b13a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b13e:	bf00      	nop
 800b140:	58024400 	.word	0x58024400
 800b144:	03d09000 	.word	0x03d09000
 800b148:	003d0900 	.word	0x003d0900
 800b14c:	0800e4d8 	.word	0x0800e4d8

0800b150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00a      	beq.n	800b17a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17e:	f003 0302 	and.w	r3, r3, #2
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00a      	beq.n	800b19c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00a      	beq.n	800b1be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	f003 0308 	and.w	r3, r3, #8
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e4:	f003 0310 	and.w	r3, r3, #16
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00a      	beq.n	800b202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b206:	f003 0320 	and.w	r3, r3, #32
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00a      	beq.n	800b224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	430a      	orrs	r2, r1
 800b222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d01a      	beq.n	800b266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b24e:	d10a      	bne.n	800b266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00a      	beq.n	800b288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	605a      	str	r2, [r3, #4]
  }
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af02      	add	r7, sp, #8
 800b29a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2a4:	f7f8 fa8c 	bl	80037c0 <HAL_GetTick>
 800b2a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	2b08      	cmp	r3, #8
 800b2b6:	d10e      	bne.n	800b2d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f82f 	bl	800b32a <UART_WaitOnFlagUntilTimeout>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	e025      	b.n	800b322 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 0304 	and.w	r3, r3, #4
 800b2e0:	2b04      	cmp	r3, #4
 800b2e2:	d10e      	bne.n	800b302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f819 	bl	800b32a <UART_WaitOnFlagUntilTimeout>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e00f      	b.n	800b322 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b09c      	sub	sp, #112	; 0x70
 800b32e:	af00      	add	r7, sp, #0
 800b330:	60f8      	str	r0, [r7, #12]
 800b332:	60b9      	str	r1, [r7, #8]
 800b334:	603b      	str	r3, [r7, #0]
 800b336:	4613      	mov	r3, r2
 800b338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b33a:	e0a9      	b.n	800b490 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b33c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b33e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b342:	f000 80a5 	beq.w	800b490 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b346:	f7f8 fa3b 	bl	80037c0 <HAL_GetTick>
 800b34a:	4602      	mov	r2, r0
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b352:	429a      	cmp	r2, r3
 800b354:	d302      	bcc.n	800b35c <UART_WaitOnFlagUntilTimeout+0x32>
 800b356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d140      	bne.n	800b3de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b36c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b370:	667b      	str	r3, [r7, #100]	; 0x64
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	461a      	mov	r2, r3
 800b378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b37a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b37c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b382:	e841 2300 	strex	r3, r2, [r1]
 800b386:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1e6      	bne.n	800b35c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3308      	adds	r3, #8
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b398:	e853 3f00 	ldrex	r3, [r3]
 800b39c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a0:	f023 0301 	bic.w	r3, r3, #1
 800b3a4:	663b      	str	r3, [r7, #96]	; 0x60
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3308      	adds	r3, #8
 800b3ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3ae:	64ba      	str	r2, [r7, #72]	; 0x48
 800b3b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3b6:	e841 2300 	strex	r3, r2, [r1]
 800b3ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b3bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1e5      	bne.n	800b38e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	e069      	b.n	800b4b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0304 	and.w	r3, r3, #4
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d051      	beq.n	800b490 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	69db      	ldr	r3, [r3, #28]
 800b3f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3fa:	d149      	bne.n	800b490 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b404:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40e:	e853 3f00 	ldrex	r3, [r3]
 800b412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b41a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	461a      	mov	r2, r3
 800b422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b424:	637b      	str	r3, [r7, #52]	; 0x34
 800b426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b42a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b42c:	e841 2300 	strex	r3, r2, [r1]
 800b430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1e6      	bne.n	800b406 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3308      	adds	r3, #8
 800b43e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	e853 3f00 	ldrex	r3, [r3]
 800b446:	613b      	str	r3, [r7, #16]
   return(result);
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	f023 0301 	bic.w	r3, r3, #1
 800b44e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	3308      	adds	r3, #8
 800b456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b458:	623a      	str	r2, [r7, #32]
 800b45a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45c:	69f9      	ldr	r1, [r7, #28]
 800b45e:	6a3a      	ldr	r2, [r7, #32]
 800b460:	e841 2300 	strex	r3, r2, [r1]
 800b464:	61bb      	str	r3, [r7, #24]
   return(result);
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1e5      	bne.n	800b438 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2220      	movs	r2, #32
 800b470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2220      	movs	r2, #32
 800b478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2220      	movs	r2, #32
 800b480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e010      	b.n	800b4b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	69da      	ldr	r2, [r3, #28]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	4013      	ands	r3, r2
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	bf0c      	ite	eq
 800b4a0:	2301      	moveq	r3, #1
 800b4a2:	2300      	movne	r3, #0
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	79fb      	ldrb	r3, [r7, #7]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	f43f af46 	beq.w	800b33c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3770      	adds	r7, #112	; 0x70
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b0a3      	sub	sp, #140	; 0x8c
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	88fa      	ldrh	r2, [r7, #6]
 800b4d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	88fa      	ldrh	r2, [r7, #6]
 800b4dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ee:	d10e      	bne.n	800b50e <UART_Start_Receive_IT+0x52>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d105      	bne.n	800b504 <UART_Start_Receive_IT+0x48>
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b4fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b502:	e02d      	b.n	800b560 <UART_Start_Receive_IT+0xa4>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	22ff      	movs	r2, #255	; 0xff
 800b508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b50c:	e028      	b.n	800b560 <UART_Start_Receive_IT+0xa4>
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10d      	bne.n	800b532 <UART_Start_Receive_IT+0x76>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <UART_Start_Receive_IT+0x6c>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	22ff      	movs	r2, #255	; 0xff
 800b522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b526:	e01b      	b.n	800b560 <UART_Start_Receive_IT+0xa4>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	227f      	movs	r2, #127	; 0x7f
 800b52c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b530:	e016      	b.n	800b560 <UART_Start_Receive_IT+0xa4>
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b53a:	d10d      	bne.n	800b558 <UART_Start_Receive_IT+0x9c>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d104      	bne.n	800b54e <UART_Start_Receive_IT+0x92>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	227f      	movs	r2, #127	; 0x7f
 800b548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b54c:	e008      	b.n	800b560 <UART_Start_Receive_IT+0xa4>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	223f      	movs	r2, #63	; 0x3f
 800b552:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b556:	e003      	b.n	800b560 <UART_Start_Receive_IT+0xa4>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2222      	movs	r2, #34	; 0x22
 800b56c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3308      	adds	r3, #8
 800b576:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b57a:	e853 3f00 	ldrex	r3, [r3]
 800b57e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b582:	f043 0301 	orr.w	r3, r3, #1
 800b586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3308      	adds	r3, #8
 800b590:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b594:	673a      	str	r2, [r7, #112]	; 0x70
 800b596:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b598:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b59a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b59c:	e841 2300 	strex	r3, r2, [r1]
 800b5a0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b5a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1e3      	bne.n	800b570 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b0:	d153      	bne.n	800b65a <UART_Start_Receive_IT+0x19e>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5b8:	88fa      	ldrh	r2, [r7, #6]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d34d      	bcc.n	800b65a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c6:	d107      	bne.n	800b5d8 <UART_Start_Receive_IT+0x11c>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d103      	bne.n	800b5d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	4a4b      	ldr	r2, [pc, #300]	; (800b700 <UART_Start_Receive_IT+0x244>)
 800b5d4:	671a      	str	r2, [r3, #112]	; 0x70
 800b5d6:	e002      	b.n	800b5de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4a4a      	ldr	r2, [pc, #296]	; (800b704 <UART_Start_Receive_IT+0x248>)
 800b5dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d01a      	beq.n	800b624 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f6:	e853 3f00 	ldrex	r3, [r3]
 800b5fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b610:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b612:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b614:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b616:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b618:	e841 2300 	strex	r3, r2, [r1]
 800b61c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b61e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1e4      	bne.n	800b5ee <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3308      	adds	r3, #8
 800b62a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b63a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3308      	adds	r3, #8
 800b642:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b644:	64ba      	str	r2, [r7, #72]	; 0x48
 800b646:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b648:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b64a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b64c:	e841 2300 	strex	r3, r2, [r1]
 800b650:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1e5      	bne.n	800b624 <UART_Start_Receive_IT+0x168>
 800b658:	e04a      	b.n	800b6f0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b662:	d107      	bne.n	800b674 <UART_Start_Receive_IT+0x1b8>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d103      	bne.n	800b674 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4a26      	ldr	r2, [pc, #152]	; (800b708 <UART_Start_Receive_IT+0x24c>)
 800b670:	671a      	str	r2, [r3, #112]	; 0x70
 800b672:	e002      	b.n	800b67a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	4a25      	ldr	r2, [pc, #148]	; (800b70c <UART_Start_Receive_IT+0x250>)
 800b678:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d019      	beq.n	800b6be <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	e853 3f00 	ldrex	r3, [r3]
 800b696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b69e:	677b      	str	r3, [r7, #116]	; 0x74
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e6      	bne.n	800b68a <UART_Start_Receive_IT+0x1ce>
 800b6bc:	e018      	b.n	800b6f0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	e853 3f00 	ldrex	r3, [r3]
 800b6ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f043 0320 	orr.w	r3, r3, #32
 800b6d2:	67bb      	str	r3, [r7, #120]	; 0x78
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6dc:	623b      	str	r3, [r7, #32]
 800b6de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e0:	69f9      	ldr	r1, [r7, #28]
 800b6e2:	6a3a      	ldr	r2, [r7, #32]
 800b6e4:	e841 2300 	strex	r3, r2, [r1]
 800b6e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1e6      	bne.n	800b6be <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	378c      	adds	r7, #140	; 0x8c
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	0800c15d 	.word	0x0800c15d
 800b704:	0800be65 	.word	0x0800be65
 800b708:	0800bd03 	.word	0x0800bd03
 800b70c:	0800bba3 	.word	0x0800bba3

0800b710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b710:	b480      	push	{r7}
 800b712:	b095      	sub	sp, #84	; 0x54
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	e853 3f00 	ldrex	r3, [r3]
 800b724:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b72c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b736:	643b      	str	r3, [r7, #64]	; 0x40
 800b738:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b73c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b73e:	e841 2300 	strex	r3, r2, [r1]
 800b742:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1e6      	bne.n	800b718 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	61fb      	str	r3, [r7, #28]
   return(result);
 800b75a:	69fa      	ldr	r2, [r7, #28]
 800b75c:	4b1e      	ldr	r3, [pc, #120]	; (800b7d8 <UART_EndRxTransfer+0xc8>)
 800b75e:	4013      	ands	r3, r2
 800b760:	64bb      	str	r3, [r7, #72]	; 0x48
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3308      	adds	r3, #8
 800b768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b76a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b76c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e5      	bne.n	800b74a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b782:	2b01      	cmp	r3, #1
 800b784:	d118      	bne.n	800b7b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	60bb      	str	r3, [r7, #8]
   return(result);
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	f023 0310 	bic.w	r3, r3, #16
 800b79a:	647b      	str	r3, [r7, #68]	; 0x44
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7a4:	61bb      	str	r3, [r7, #24]
 800b7a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	6979      	ldr	r1, [r7, #20]
 800b7aa:	69ba      	ldr	r2, [r7, #24]
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e6      	bne.n	800b786 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b7cc:	bf00      	nop
 800b7ce:	3754      	adds	r7, #84	; 0x54
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	effffffe 	.word	0xeffffffe

0800b7dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f7fe ff2a 	bl	800a654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b800:	bf00      	nop
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b808:	b480      	push	{r7}
 800b80a:	b08f      	sub	sp, #60	; 0x3c
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b816:	2b21      	cmp	r3, #33	; 0x21
 800b818:	d14c      	bne.n	800b8b4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b820:	b29b      	uxth	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	d132      	bne.n	800b88c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	61fb      	str	r3, [r7, #28]
   return(result);
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b83a:	637b      	str	r3, [r7, #52]	; 0x34
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	461a      	mov	r2, r3
 800b842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b844:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b846:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b84c:	e841 2300 	strex	r3, r2, [r1]
 800b850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1e6      	bne.n	800b826 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	e853 3f00 	ldrex	r3, [r3]
 800b864:	60bb      	str	r3, [r7, #8]
   return(result);
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b86c:	633b      	str	r3, [r7, #48]	; 0x30
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b876:	61bb      	str	r3, [r7, #24]
 800b878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6979      	ldr	r1, [r7, #20]
 800b87c:	69ba      	ldr	r2, [r7, #24]
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	613b      	str	r3, [r7, #16]
   return(result);
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e6      	bne.n	800b858 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b88a:	e013      	b.n	800b8b4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b890:	781a      	ldrb	r2, [r3, #0]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89c:	1c5a      	adds	r2, r3, #1
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b8b4:	bf00      	nop
 800b8b6:	373c      	adds	r7, #60	; 0x3c
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b091      	sub	sp, #68	; 0x44
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8ce:	2b21      	cmp	r3, #33	; 0x21
 800b8d0:	d151      	bne.n	800b976 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d132      	bne.n	800b944 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	e853 3f00 	ldrex	r3, [r3]
 800b8ea:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fc:	633b      	str	r3, [r7, #48]	; 0x30
 800b8fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b904:	e841 2300 	strex	r3, r2, [r1]
 800b908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e6      	bne.n	800b8de <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	e853 3f00 	ldrex	r3, [r3]
 800b91c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b924:	637b      	str	r3, [r7, #52]	; 0x34
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	461a      	mov	r2, r3
 800b92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b932:	69b9      	ldr	r1, [r7, #24]
 800b934:	69fa      	ldr	r2, [r7, #28]
 800b936:	e841 2300 	strex	r3, r2, [r1]
 800b93a:	617b      	str	r3, [r7, #20]
   return(result);
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1e6      	bne.n	800b910 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b942:	e018      	b.n	800b976 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b948:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b958:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b95e:	1c9a      	adds	r2, r3, #2
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	3b01      	subs	r3, #1
 800b96e:	b29a      	uxth	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b976:	bf00      	nop
 800b978:	3744      	adds	r7, #68	; 0x44
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b982:	b480      	push	{r7}
 800b984:	b091      	sub	sp, #68	; 0x44
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b990:	2b21      	cmp	r3, #33	; 0x21
 800b992:	d160      	bne.n	800ba56 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b99a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b99c:	e057      	b.n	800ba4e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d133      	bne.n	800ba12 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	e853 3f00 	ldrex	r3, [r3]
 800b9b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b9ba:	6a3b      	ldr	r3, [r7, #32]
 800b9bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b9c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9ca:	633a      	str	r2, [r7, #48]	; 0x30
 800b9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9d2:	e841 2300 	strex	r3, r2, [r1]
 800b9d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1e5      	bne.n	800b9aa <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fc:	61fb      	str	r3, [r7, #28]
 800b9fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba00:	69b9      	ldr	r1, [r7, #24]
 800ba02:	69fa      	ldr	r2, [r7, #28]
 800ba04:	e841 2300 	strex	r3, r2, [r1]
 800ba08:	617b      	str	r3, [r7, #20]
   return(result);
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1e6      	bne.n	800b9de <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ba10:	e021      	b.n	800ba56 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d013      	beq.n	800ba48 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba24:	781a      	ldrb	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ba4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1a4      	bne.n	800b99e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ba54:	e7ff      	b.n	800ba56 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800ba56:	bf00      	nop
 800ba58:	3744      	adds	r7, #68	; 0x44
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b091      	sub	sp, #68	; 0x44
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba70:	2b21      	cmp	r3, #33	; 0x21
 800ba72:	d165      	bne.n	800bb40 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ba7c:	e05c      	b.n	800bb38 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d133      	bne.n	800baf2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3308      	adds	r3, #8
 800ba90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	e853 3f00 	ldrex	r3, [r3]
 800ba98:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800baa0:	637b      	str	r3, [r7, #52]	; 0x34
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3308      	adds	r3, #8
 800baa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800baac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bab2:	e841 2300 	strex	r3, r2, [r1]
 800bab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1e5      	bne.n	800ba8a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	e853 3f00 	ldrex	r3, [r3]
 800baca:	60bb      	str	r3, [r7, #8]
   return(result);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bad2:	633b      	str	r3, [r7, #48]	; 0x30
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	461a      	mov	r2, r3
 800bada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800badc:	61bb      	str	r3, [r7, #24]
 800bade:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae0:	6979      	ldr	r1, [r7, #20]
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	e841 2300 	strex	r3, r2, [r1]
 800bae8:	613b      	str	r3, [r7, #16]
   return(result);
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1e6      	bne.n	800babe <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800baf0:	e026      	b.n	800bb40 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	69db      	ldr	r3, [r3, #28]
 800baf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d018      	beq.n	800bb32 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb04:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb14:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb1a:	1c9a      	adds	r2, r3, #2
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bb32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb34:	3b01      	subs	r3, #1
 800bb36:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bb38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d19f      	bne.n	800ba7e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bb3e:	e7ff      	b.n	800bb40 <UART_TxISR_16BIT_FIFOEN+0xde>
 800bb40:	bf00      	nop
 800bb42:	3744      	adds	r7, #68	; 0x44
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	e853 3f00 	ldrex	r3, [r3]
 800bb60:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb68:	61fb      	str	r3, [r7, #28]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	61bb      	str	r3, [r7, #24]
 800bb74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb76:	6979      	ldr	r1, [r7, #20]
 800bb78:	69ba      	ldr	r2, [r7, #24]
 800bb7a:	e841 2300 	strex	r3, r2, [r1]
 800bb7e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e6      	bne.n	800bb54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2220      	movs	r2, #32
 800bb8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7f6 fd03 	bl	80025a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb9a:	bf00      	nop
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b096      	sub	sp, #88	; 0x58
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbba:	2b22      	cmp	r3, #34	; 0x22
 800bbbc:	f040 8095 	bne.w	800bcea <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bbca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bbce:	b2d9      	uxtb	r1, r3
 800bbd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbda:	400a      	ands	r2, r1
 800bbdc:	b2d2      	uxtb	r2, r2
 800bbde:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe4:	1c5a      	adds	r2, r3, #1
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d178      	bne.n	800bcfa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc10:	e853 3f00 	ldrex	r3, [r3]
 800bc14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc1c:	653b      	str	r3, [r7, #80]	; 0x50
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc26:	647b      	str	r3, [r7, #68]	; 0x44
 800bc28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc2e:	e841 2300 	strex	r3, r2, [r1]
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1e6      	bne.n	800bc08 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	623b      	str	r3, [r7, #32]
   return(result);
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	f023 0301 	bic.w	r3, r3, #1
 800bc50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3308      	adds	r3, #8
 800bc58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc5a:	633a      	str	r2, [r7, #48]	; 0x30
 800bc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc62:	e841 2300 	strex	r3, r2, [r1]
 800bc66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1e5      	bne.n	800bc3a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d12e      	bne.n	800bce2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	e853 3f00 	ldrex	r3, [r3]
 800bc96:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f023 0310 	bic.w	r3, r3, #16
 800bc9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	461a      	mov	r2, r3
 800bca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bca8:	61fb      	str	r3, [r7, #28]
 800bcaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcac:	69b9      	ldr	r1, [r7, #24]
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	e841 2300 	strex	r3, r2, [r1]
 800bcb4:	617b      	str	r3, [r7, #20]
   return(result);
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1e6      	bne.n	800bc8a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	69db      	ldr	r3, [r3, #28]
 800bcc2:	f003 0310 	and.w	r3, r3, #16
 800bcc6:	2b10      	cmp	r3, #16
 800bcc8:	d103      	bne.n	800bcd2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2210      	movs	r2, #16
 800bcd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7fe fcc4 	bl	800a668 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bce0:	e00b      	b.n	800bcfa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7f6 fc6a 	bl	80025bc <HAL_UART_RxCpltCallback>
}
 800bce8:	e007      	b.n	800bcfa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	699a      	ldr	r2, [r3, #24]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f042 0208 	orr.w	r2, r2, #8
 800bcf8:	619a      	str	r2, [r3, #24]
}
 800bcfa:	bf00      	nop
 800bcfc:	3758      	adds	r7, #88	; 0x58
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b096      	sub	sp, #88	; 0x58
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd1a:	2b22      	cmp	r3, #34	; 0x22
 800bd1c:	f040 8095 	bne.w	800be4a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd26:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd2e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800bd30:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bd34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bd38:	4013      	ands	r3, r2
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd3e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd44:	1c9a      	adds	r2, r3, #2
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	3b01      	subs	r3, #1
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d178      	bne.n	800be5a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd70:	e853 3f00 	ldrex	r3, [r3]
 800bd74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd86:	643b      	str	r3, [r7, #64]	; 0x40
 800bd88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1e6      	bne.n	800bd68 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3308      	adds	r3, #8
 800bda0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	e853 3f00 	ldrex	r3, [r3]
 800bda8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	f023 0301 	bic.w	r3, r3, #1
 800bdb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc2:	e841 2300 	strex	r3, r2, [r1]
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1e5      	bne.n	800bd9a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d12e      	bne.n	800be42 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	e853 3f00 	ldrex	r3, [r3]
 800bdf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f023 0310 	bic.w	r3, r3, #16
 800bdfe:	647b      	str	r3, [r7, #68]	; 0x44
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	461a      	mov	r2, r3
 800be06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be08:	61bb      	str	r3, [r7, #24]
 800be0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0c:	6979      	ldr	r1, [r7, #20]
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	e841 2300 	strex	r3, r2, [r1]
 800be14:	613b      	str	r3, [r7, #16]
   return(result);
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e6      	bne.n	800bdea <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	f003 0310 	and.w	r3, r3, #16
 800be26:	2b10      	cmp	r3, #16
 800be28:	d103      	bne.n	800be32 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2210      	movs	r2, #16
 800be30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7fe fc14 	bl	800a668 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be40:	e00b      	b.n	800be5a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7f6 fbba 	bl	80025bc <HAL_UART_RxCpltCallback>
}
 800be48:	e007      	b.n	800be5a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	699a      	ldr	r2, [r3, #24]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f042 0208 	orr.w	r2, r2, #8
 800be58:	619a      	str	r2, [r3, #24]
}
 800be5a:	bf00      	nop
 800be5c:	3758      	adds	r7, #88	; 0x58
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b0a6      	sub	sp, #152	; 0x98
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be72:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69db      	ldr	r3, [r3, #28]
 800be7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be9a:	2b22      	cmp	r3, #34	; 0x22
 800be9c:	f040 814d 	bne.w	800c13a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bea6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800beaa:	e0f4      	b.n	800c096 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800beb6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800beba:	b2d9      	uxtb	r1, r3
 800bebc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bec6:	400a      	ands	r2, r1
 800bec8:	b2d2      	uxtb	r2, r2
 800beca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bedc:	b29b      	uxth	r3, r3
 800bede:	3b01      	subs	r3, #1
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	69db      	ldr	r3, [r3, #28]
 800beee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bef6:	f003 0307 	and.w	r3, r3, #7
 800befa:	2b00      	cmp	r3, #0
 800befc:	d053      	beq.n	800bfa6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800befe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d011      	beq.n	800bf2e <UART_RxISR_8BIT_FIFOEN+0xca>
 800bf0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00b      	beq.n	800bf2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf24:	f043 0201 	orr.w	r2, r3, #1
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d011      	beq.n	800bf5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bf3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00b      	beq.n	800bf5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf54:	f043 0204 	orr.w	r2, r3, #4
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf62:	f003 0304 	and.w	r3, r3, #4
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d011      	beq.n	800bf8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bf6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf6e:	f003 0301 	and.w	r3, r3, #1
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00b      	beq.n	800bf8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2204      	movs	r2, #4
 800bf7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf84:	f043 0202 	orr.w	r2, r3, #2
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d006      	beq.n	800bfa6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7fe fb5b 	bl	800a654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d171      	bne.n	800c096 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfba:	e853 3f00 	ldrex	r3, [r3]
 800bfbe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bfc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bfd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfd6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bfda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bfe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e4      	bne.n	800bfb2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3308      	adds	r3, #8
 800bfee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bff2:	e853 3f00 	ldrex	r3, [r3]
 800bff6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bffa:	4b56      	ldr	r3, [pc, #344]	; (800c154 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800bffc:	4013      	ands	r3, r2
 800bffe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3308      	adds	r3, #8
 800c006:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c008:	657a      	str	r2, [r7, #84]	; 0x54
 800c00a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c00e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c010:	e841 2300 	strex	r3, r2, [r1]
 800c014:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1e5      	bne.n	800bfe8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2220      	movs	r2, #32
 800c020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d12e      	bne.n	800c090 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c040:	e853 3f00 	ldrex	r3, [r3]
 800c044:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c048:	f023 0310 	bic.w	r3, r3, #16
 800c04c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	461a      	mov	r2, r3
 800c054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c056:	643b      	str	r3, [r7, #64]	; 0x40
 800c058:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c05c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c05e:	e841 2300 	strex	r3, r2, [r1]
 800c062:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1e6      	bne.n	800c038 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	69db      	ldr	r3, [r3, #28]
 800c070:	f003 0310 	and.w	r3, r3, #16
 800c074:	2b10      	cmp	r3, #16
 800c076:	d103      	bne.n	800c080 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2210      	movs	r2, #16
 800c07e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7fe faed 	bl	800a668 <HAL_UARTEx_RxEventCallback>
 800c08e:	e002      	b.n	800c096 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7f6 fa93 	bl	80025bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c096:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d006      	beq.n	800c0ac <UART_RxISR_8BIT_FIFOEN+0x248>
 800c09e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c0a2:	f003 0320 	and.w	r3, r3, #32
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f47f af00 	bne.w	800beac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c0b6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d045      	beq.n	800c14a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d23e      	bcs.n	800c14a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	e853 3f00 	ldrex	r3, [r3]
 800c0da:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0e2:	673b      	str	r3, [r7, #112]	; 0x70
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c0ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0f4:	e841 2300 	strex	r3, r2, [r1]
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1e5      	bne.n	800c0cc <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a15      	ldr	r2, [pc, #84]	; (800c158 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c104:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	e853 3f00 	ldrex	r3, [r3]
 800c112:	60bb      	str	r3, [r7, #8]
   return(result);
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f043 0320 	orr.w	r3, r3, #32
 800c11a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	461a      	mov	r2, r3
 800c122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c124:	61bb      	str	r3, [r7, #24]
 800c126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c128:	6979      	ldr	r1, [r7, #20]
 800c12a:	69ba      	ldr	r2, [r7, #24]
 800c12c:	e841 2300 	strex	r3, r2, [r1]
 800c130:	613b      	str	r3, [r7, #16]
   return(result);
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e6      	bne.n	800c106 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c138:	e007      	b.n	800c14a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	699a      	ldr	r2, [r3, #24]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0208 	orr.w	r2, r2, #8
 800c148:	619a      	str	r2, [r3, #24]
}
 800c14a:	bf00      	nop
 800c14c:	3798      	adds	r7, #152	; 0x98
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	effffffe 	.word	0xeffffffe
 800c158:	0800bba3 	.word	0x0800bba3

0800c15c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b0a8      	sub	sp, #160	; 0xa0
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c16a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	69db      	ldr	r3, [r3, #28]
 800c174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c192:	2b22      	cmp	r3, #34	; 0x22
 800c194:	f040 8151 	bne.w	800c43a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c19e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1a2:	e0f8      	b.n	800c396 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c1b6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c1ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c1be:	4013      	ands	r3, r2
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c1c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1cc:	1c9a      	adds	r2, r3, #2
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	69db      	ldr	r3, [r3, #28]
 800c1ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c1ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1f2:	f003 0307 	and.w	r3, r3, #7
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d053      	beq.n	800c2a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1fe:	f003 0301 	and.w	r3, r3, #1
 800c202:	2b00      	cmp	r3, #0
 800c204:	d011      	beq.n	800c22a <UART_RxISR_16BIT_FIFOEN+0xce>
 800c206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00b      	beq.n	800c22a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2201      	movs	r2, #1
 800c218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c220:	f043 0201 	orr.w	r2, r3, #1
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c22a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c22e:	f003 0302 	and.w	r3, r3, #2
 800c232:	2b00      	cmp	r3, #0
 800c234:	d011      	beq.n	800c25a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00b      	beq.n	800c25a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2202      	movs	r2, #2
 800c248:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c250:	f043 0204 	orr.w	r2, r3, #4
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c25a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c25e:	f003 0304 	and.w	r3, r3, #4
 800c262:	2b00      	cmp	r3, #0
 800c264:	d011      	beq.n	800c28a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c266:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c26a:	f003 0301 	and.w	r3, r3, #1
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00b      	beq.n	800c28a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2204      	movs	r2, #4
 800c278:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c280:	f043 0202 	orr.w	r2, r3, #2
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c290:	2b00      	cmp	r3, #0
 800c292:	d006      	beq.n	800c2a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7fe f9dd 	bl	800a654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d173      	bne.n	800c396 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2b6:	e853 3f00 	ldrex	r3, [r3]
 800c2ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c2bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2d2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c2d8:	e841 2300 	strex	r3, r2, [r1]
 800c2dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c2de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1e4      	bne.n	800c2ae <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ee:	e853 3f00 	ldrex	r3, [r3]
 800c2f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2f6:	4b57      	ldr	r3, [pc, #348]	; (800c454 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3308      	adds	r3, #8
 800c304:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c308:	65ba      	str	r2, [r7, #88]	; 0x58
 800c30a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c30e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c310:	e841 2300 	strex	r3, r2, [r1]
 800c314:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1e3      	bne.n	800c2e4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2220      	movs	r2, #32
 800c320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d12e      	bne.n	800c390 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c340:	e853 3f00 	ldrex	r3, [r3]
 800c344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c348:	f023 0310 	bic.w	r3, r3, #16
 800c34c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c356:	647b      	str	r3, [r7, #68]	; 0x44
 800c358:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c35c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c35e:	e841 2300 	strex	r3, r2, [r1]
 800c362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1e6      	bne.n	800c338 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	69db      	ldr	r3, [r3, #28]
 800c370:	f003 0310 	and.w	r3, r3, #16
 800c374:	2b10      	cmp	r3, #16
 800c376:	d103      	bne.n	800c380 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2210      	movs	r2, #16
 800c37e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7fe f96d 	bl	800a668 <HAL_UARTEx_RxEventCallback>
 800c38e:	e002      	b.n	800c396 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7f6 f913 	bl	80025bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c396:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d006      	beq.n	800c3ac <UART_RxISR_16BIT_FIFOEN+0x250>
 800c39e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f47f aefc 	bne.w	800c1a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c3b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d045      	beq.n	800c44a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c3c4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d23e      	bcs.n	800c44a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	3308      	adds	r3, #8
 800c3d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	e853 3f00 	ldrex	r3, [r3]
 800c3da:	623b      	str	r3, [r7, #32]
   return(result);
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3e2:	677b      	str	r3, [r7, #116]	; 0x74
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c3ec:	633a      	str	r2, [r7, #48]	; 0x30
 800c3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f4:	e841 2300 	strex	r3, r2, [r1]
 800c3f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1e5      	bne.n	800c3cc <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a15      	ldr	r2, [pc, #84]	; (800c458 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c404:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	e853 3f00 	ldrex	r3, [r3]
 800c412:	60fb      	str	r3, [r7, #12]
   return(result);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f043 0320 	orr.w	r3, r3, #32
 800c41a:	673b      	str	r3, [r7, #112]	; 0x70
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	461a      	mov	r2, r3
 800c422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c424:	61fb      	str	r3, [r7, #28]
 800c426:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c428:	69b9      	ldr	r1, [r7, #24]
 800c42a:	69fa      	ldr	r2, [r7, #28]
 800c42c:	e841 2300 	strex	r3, r2, [r1]
 800c430:	617b      	str	r3, [r7, #20]
   return(result);
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1e6      	bne.n	800c406 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c438:	e007      	b.n	800c44a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	699a      	ldr	r2, [r3, #24]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f042 0208 	orr.w	r2, r2, #8
 800c448:	619a      	str	r2, [r3, #24]
}
 800c44a:	bf00      	nop
 800c44c:	37a0      	adds	r7, #160	; 0xa0
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	effffffe 	.word	0xeffffffe
 800c458:	0800bd03 	.word	0x0800bd03

0800c45c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c48c:	bf00      	nop
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d101      	bne.n	800c4ae <HAL_UARTEx_DisableFifoMode+0x16>
 800c4aa:	2302      	movs	r3, #2
 800c4ac:	e027      	b.n	800c4fe <HAL_UARTEx_DisableFifoMode+0x66>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2224      	movs	r2, #36	; 0x24
 800c4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f022 0201 	bic.w	r2, r2, #1
 800c4d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c4dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2220      	movs	r2, #32
 800c4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b084      	sub	sp, #16
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d101      	bne.n	800c522 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c51e:	2302      	movs	r3, #2
 800c520:	e02d      	b.n	800c57e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2224      	movs	r2, #36	; 0x24
 800c52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0201 	bic.w	r2, r2, #1
 800c548:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	683a      	ldr	r2, [r7, #0]
 800c55a:	430a      	orrs	r2, r1
 800c55c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f850 	bl	800c604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2220      	movs	r2, #32
 800c570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c596:	2b01      	cmp	r3, #1
 800c598:	d101      	bne.n	800c59e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c59a:	2302      	movs	r3, #2
 800c59c:	e02d      	b.n	800c5fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2224      	movs	r2, #36	; 0x24
 800c5aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f022 0201 	bic.w	r2, r2, #1
 800c5c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	430a      	orrs	r2, r1
 800c5d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f812 	bl	800c604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2220      	movs	r2, #32
 800c5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
	...

0800c604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c610:	2b00      	cmp	r3, #0
 800c612:	d108      	bne.n	800c626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c624:	e031      	b.n	800c68a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c626:	2310      	movs	r3, #16
 800c628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c62a:	2310      	movs	r3, #16
 800c62c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	0e5b      	lsrs	r3, r3, #25
 800c636:	b2db      	uxtb	r3, r3
 800c638:	f003 0307 	and.w	r3, r3, #7
 800c63c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	0f5b      	lsrs	r3, r3, #29
 800c646:	b2db      	uxtb	r3, r3
 800c648:	f003 0307 	and.w	r3, r3, #7
 800c64c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c64e:	7bbb      	ldrb	r3, [r7, #14]
 800c650:	7b3a      	ldrb	r2, [r7, #12]
 800c652:	4911      	ldr	r1, [pc, #68]	; (800c698 <UARTEx_SetNbDataToProcess+0x94>)
 800c654:	5c8a      	ldrb	r2, [r1, r2]
 800c656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c65a:	7b3a      	ldrb	r2, [r7, #12]
 800c65c:	490f      	ldr	r1, [pc, #60]	; (800c69c <UARTEx_SetNbDataToProcess+0x98>)
 800c65e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c660:	fb93 f3f2 	sdiv	r3, r3, r2
 800c664:	b29a      	uxth	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	7b7a      	ldrb	r2, [r7, #13]
 800c670:	4909      	ldr	r1, [pc, #36]	; (800c698 <UARTEx_SetNbDataToProcess+0x94>)
 800c672:	5c8a      	ldrb	r2, [r1, r2]
 800c674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c678:	7b7a      	ldrb	r2, [r7, #13]
 800c67a:	4908      	ldr	r1, [pc, #32]	; (800c69c <UARTEx_SetNbDataToProcess+0x98>)
 800c67c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c67e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c682:	b29a      	uxth	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c68a:	bf00      	nop
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	0800e4f0 	.word	0x0800e4f0
 800c69c:	0800e4f8 	.word	0x0800e4f8

0800c6a0 <__errno>:
 800c6a0:	4b01      	ldr	r3, [pc, #4]	; (800c6a8 <__errno+0x8>)
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	24000038 	.word	0x24000038

0800c6ac <__libc_init_array>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	4d0d      	ldr	r5, [pc, #52]	; (800c6e4 <__libc_init_array+0x38>)
 800c6b0:	4c0d      	ldr	r4, [pc, #52]	; (800c6e8 <__libc_init_array+0x3c>)
 800c6b2:	1b64      	subs	r4, r4, r5
 800c6b4:	10a4      	asrs	r4, r4, #2
 800c6b6:	2600      	movs	r6, #0
 800c6b8:	42a6      	cmp	r6, r4
 800c6ba:	d109      	bne.n	800c6d0 <__libc_init_array+0x24>
 800c6bc:	4d0b      	ldr	r5, [pc, #44]	; (800c6ec <__libc_init_array+0x40>)
 800c6be:	4c0c      	ldr	r4, [pc, #48]	; (800c6f0 <__libc_init_array+0x44>)
 800c6c0:	f001 fee4 	bl	800e48c <_init>
 800c6c4:	1b64      	subs	r4, r4, r5
 800c6c6:	10a4      	asrs	r4, r4, #2
 800c6c8:	2600      	movs	r6, #0
 800c6ca:	42a6      	cmp	r6, r4
 800c6cc:	d105      	bne.n	800c6da <__libc_init_array+0x2e>
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6d4:	4798      	blx	r3
 800c6d6:	3601      	adds	r6, #1
 800c6d8:	e7ee      	b.n	800c6b8 <__libc_init_array+0xc>
 800c6da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6de:	4798      	blx	r3
 800c6e0:	3601      	adds	r6, #1
 800c6e2:	e7f2      	b.n	800c6ca <__libc_init_array+0x1e>
 800c6e4:	0800ffd0 	.word	0x0800ffd0
 800c6e8:	0800ffd0 	.word	0x0800ffd0
 800c6ec:	0800ffd0 	.word	0x0800ffd0
 800c6f0:	0800ffd4 	.word	0x0800ffd4

0800c6f4 <memset>:
 800c6f4:	4402      	add	r2, r0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d100      	bne.n	800c6fe <memset+0xa>
 800c6fc:	4770      	bx	lr
 800c6fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c702:	e7f9      	b.n	800c6f8 <memset+0x4>

0800c704 <siprintf>:
 800c704:	b40e      	push	{r1, r2, r3}
 800c706:	b500      	push	{lr}
 800c708:	b09c      	sub	sp, #112	; 0x70
 800c70a:	ab1d      	add	r3, sp, #116	; 0x74
 800c70c:	9002      	str	r0, [sp, #8]
 800c70e:	9006      	str	r0, [sp, #24]
 800c710:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c714:	4809      	ldr	r0, [pc, #36]	; (800c73c <siprintf+0x38>)
 800c716:	9107      	str	r1, [sp, #28]
 800c718:	9104      	str	r1, [sp, #16]
 800c71a:	4909      	ldr	r1, [pc, #36]	; (800c740 <siprintf+0x3c>)
 800c71c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c720:	9105      	str	r1, [sp, #20]
 800c722:	6800      	ldr	r0, [r0, #0]
 800c724:	9301      	str	r3, [sp, #4]
 800c726:	a902      	add	r1, sp, #8
 800c728:	f000 f868 	bl	800c7fc <_svfiprintf_r>
 800c72c:	9b02      	ldr	r3, [sp, #8]
 800c72e:	2200      	movs	r2, #0
 800c730:	701a      	strb	r2, [r3, #0]
 800c732:	b01c      	add	sp, #112	; 0x70
 800c734:	f85d eb04 	ldr.w	lr, [sp], #4
 800c738:	b003      	add	sp, #12
 800c73a:	4770      	bx	lr
 800c73c:	24000038 	.word	0x24000038
 800c740:	ffff0208 	.word	0xffff0208

0800c744 <__ssputs_r>:
 800c744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c748:	688e      	ldr	r6, [r1, #8]
 800c74a:	429e      	cmp	r6, r3
 800c74c:	4682      	mov	sl, r0
 800c74e:	460c      	mov	r4, r1
 800c750:	4690      	mov	r8, r2
 800c752:	461f      	mov	r7, r3
 800c754:	d838      	bhi.n	800c7c8 <__ssputs_r+0x84>
 800c756:	898a      	ldrh	r2, [r1, #12]
 800c758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c75c:	d032      	beq.n	800c7c4 <__ssputs_r+0x80>
 800c75e:	6825      	ldr	r5, [r4, #0]
 800c760:	6909      	ldr	r1, [r1, #16]
 800c762:	eba5 0901 	sub.w	r9, r5, r1
 800c766:	6965      	ldr	r5, [r4, #20]
 800c768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c76c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c770:	3301      	adds	r3, #1
 800c772:	444b      	add	r3, r9
 800c774:	106d      	asrs	r5, r5, #1
 800c776:	429d      	cmp	r5, r3
 800c778:	bf38      	it	cc
 800c77a:	461d      	movcc	r5, r3
 800c77c:	0553      	lsls	r3, r2, #21
 800c77e:	d531      	bpl.n	800c7e4 <__ssputs_r+0xa0>
 800c780:	4629      	mov	r1, r5
 800c782:	f000 fb63 	bl	800ce4c <_malloc_r>
 800c786:	4606      	mov	r6, r0
 800c788:	b950      	cbnz	r0, 800c7a0 <__ssputs_r+0x5c>
 800c78a:	230c      	movs	r3, #12
 800c78c:	f8ca 3000 	str.w	r3, [sl]
 800c790:	89a3      	ldrh	r3, [r4, #12]
 800c792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c796:	81a3      	strh	r3, [r4, #12]
 800c798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a0:	6921      	ldr	r1, [r4, #16]
 800c7a2:	464a      	mov	r2, r9
 800c7a4:	f000 fabe 	bl	800cd24 <memcpy>
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7b2:	81a3      	strh	r3, [r4, #12]
 800c7b4:	6126      	str	r6, [r4, #16]
 800c7b6:	6165      	str	r5, [r4, #20]
 800c7b8:	444e      	add	r6, r9
 800c7ba:	eba5 0509 	sub.w	r5, r5, r9
 800c7be:	6026      	str	r6, [r4, #0]
 800c7c0:	60a5      	str	r5, [r4, #8]
 800c7c2:	463e      	mov	r6, r7
 800c7c4:	42be      	cmp	r6, r7
 800c7c6:	d900      	bls.n	800c7ca <__ssputs_r+0x86>
 800c7c8:	463e      	mov	r6, r7
 800c7ca:	6820      	ldr	r0, [r4, #0]
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	4641      	mov	r1, r8
 800c7d0:	f000 fab6 	bl	800cd40 <memmove>
 800c7d4:	68a3      	ldr	r3, [r4, #8]
 800c7d6:	1b9b      	subs	r3, r3, r6
 800c7d8:	60a3      	str	r3, [r4, #8]
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	4433      	add	r3, r6
 800c7de:	6023      	str	r3, [r4, #0]
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	e7db      	b.n	800c79c <__ssputs_r+0x58>
 800c7e4:	462a      	mov	r2, r5
 800c7e6:	f000 fba5 	bl	800cf34 <_realloc_r>
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d1e1      	bne.n	800c7b4 <__ssputs_r+0x70>
 800c7f0:	6921      	ldr	r1, [r4, #16]
 800c7f2:	4650      	mov	r0, sl
 800c7f4:	f000 fabe 	bl	800cd74 <_free_r>
 800c7f8:	e7c7      	b.n	800c78a <__ssputs_r+0x46>
	...

0800c7fc <_svfiprintf_r>:
 800c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c800:	4698      	mov	r8, r3
 800c802:	898b      	ldrh	r3, [r1, #12]
 800c804:	061b      	lsls	r3, r3, #24
 800c806:	b09d      	sub	sp, #116	; 0x74
 800c808:	4607      	mov	r7, r0
 800c80a:	460d      	mov	r5, r1
 800c80c:	4614      	mov	r4, r2
 800c80e:	d50e      	bpl.n	800c82e <_svfiprintf_r+0x32>
 800c810:	690b      	ldr	r3, [r1, #16]
 800c812:	b963      	cbnz	r3, 800c82e <_svfiprintf_r+0x32>
 800c814:	2140      	movs	r1, #64	; 0x40
 800c816:	f000 fb19 	bl	800ce4c <_malloc_r>
 800c81a:	6028      	str	r0, [r5, #0]
 800c81c:	6128      	str	r0, [r5, #16]
 800c81e:	b920      	cbnz	r0, 800c82a <_svfiprintf_r+0x2e>
 800c820:	230c      	movs	r3, #12
 800c822:	603b      	str	r3, [r7, #0]
 800c824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c828:	e0d1      	b.n	800c9ce <_svfiprintf_r+0x1d2>
 800c82a:	2340      	movs	r3, #64	; 0x40
 800c82c:	616b      	str	r3, [r5, #20]
 800c82e:	2300      	movs	r3, #0
 800c830:	9309      	str	r3, [sp, #36]	; 0x24
 800c832:	2320      	movs	r3, #32
 800c834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c838:	f8cd 800c 	str.w	r8, [sp, #12]
 800c83c:	2330      	movs	r3, #48	; 0x30
 800c83e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9e8 <_svfiprintf_r+0x1ec>
 800c842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c846:	f04f 0901 	mov.w	r9, #1
 800c84a:	4623      	mov	r3, r4
 800c84c:	469a      	mov	sl, r3
 800c84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c852:	b10a      	cbz	r2, 800c858 <_svfiprintf_r+0x5c>
 800c854:	2a25      	cmp	r2, #37	; 0x25
 800c856:	d1f9      	bne.n	800c84c <_svfiprintf_r+0x50>
 800c858:	ebba 0b04 	subs.w	fp, sl, r4
 800c85c:	d00b      	beq.n	800c876 <_svfiprintf_r+0x7a>
 800c85e:	465b      	mov	r3, fp
 800c860:	4622      	mov	r2, r4
 800c862:	4629      	mov	r1, r5
 800c864:	4638      	mov	r0, r7
 800c866:	f7ff ff6d 	bl	800c744 <__ssputs_r>
 800c86a:	3001      	adds	r0, #1
 800c86c:	f000 80aa 	beq.w	800c9c4 <_svfiprintf_r+0x1c8>
 800c870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c872:	445a      	add	r2, fp
 800c874:	9209      	str	r2, [sp, #36]	; 0x24
 800c876:	f89a 3000 	ldrb.w	r3, [sl]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f000 80a2 	beq.w	800c9c4 <_svfiprintf_r+0x1c8>
 800c880:	2300      	movs	r3, #0
 800c882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c88a:	f10a 0a01 	add.w	sl, sl, #1
 800c88e:	9304      	str	r3, [sp, #16]
 800c890:	9307      	str	r3, [sp, #28]
 800c892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c896:	931a      	str	r3, [sp, #104]	; 0x68
 800c898:	4654      	mov	r4, sl
 800c89a:	2205      	movs	r2, #5
 800c89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a0:	4851      	ldr	r0, [pc, #324]	; (800c9e8 <_svfiprintf_r+0x1ec>)
 800c8a2:	f7f3 fd25 	bl	80002f0 <memchr>
 800c8a6:	9a04      	ldr	r2, [sp, #16]
 800c8a8:	b9d8      	cbnz	r0, 800c8e2 <_svfiprintf_r+0xe6>
 800c8aa:	06d0      	lsls	r0, r2, #27
 800c8ac:	bf44      	itt	mi
 800c8ae:	2320      	movmi	r3, #32
 800c8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b4:	0711      	lsls	r1, r2, #28
 800c8b6:	bf44      	itt	mi
 800c8b8:	232b      	movmi	r3, #43	; 0x2b
 800c8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8be:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c4:	d015      	beq.n	800c8f2 <_svfiprintf_r+0xf6>
 800c8c6:	9a07      	ldr	r2, [sp, #28]
 800c8c8:	4654      	mov	r4, sl
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	f04f 0c0a 	mov.w	ip, #10
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d6:	3b30      	subs	r3, #48	; 0x30
 800c8d8:	2b09      	cmp	r3, #9
 800c8da:	d94e      	bls.n	800c97a <_svfiprintf_r+0x17e>
 800c8dc:	b1b0      	cbz	r0, 800c90c <_svfiprintf_r+0x110>
 800c8de:	9207      	str	r2, [sp, #28]
 800c8e0:	e014      	b.n	800c90c <_svfiprintf_r+0x110>
 800c8e2:	eba0 0308 	sub.w	r3, r0, r8
 800c8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	9304      	str	r3, [sp, #16]
 800c8ee:	46a2      	mov	sl, r4
 800c8f0:	e7d2      	b.n	800c898 <_svfiprintf_r+0x9c>
 800c8f2:	9b03      	ldr	r3, [sp, #12]
 800c8f4:	1d19      	adds	r1, r3, #4
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	9103      	str	r1, [sp, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	bfbb      	ittet	lt
 800c8fe:	425b      	neglt	r3, r3
 800c900:	f042 0202 	orrlt.w	r2, r2, #2
 800c904:	9307      	strge	r3, [sp, #28]
 800c906:	9307      	strlt	r3, [sp, #28]
 800c908:	bfb8      	it	lt
 800c90a:	9204      	strlt	r2, [sp, #16]
 800c90c:	7823      	ldrb	r3, [r4, #0]
 800c90e:	2b2e      	cmp	r3, #46	; 0x2e
 800c910:	d10c      	bne.n	800c92c <_svfiprintf_r+0x130>
 800c912:	7863      	ldrb	r3, [r4, #1]
 800c914:	2b2a      	cmp	r3, #42	; 0x2a
 800c916:	d135      	bne.n	800c984 <_svfiprintf_r+0x188>
 800c918:	9b03      	ldr	r3, [sp, #12]
 800c91a:	1d1a      	adds	r2, r3, #4
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	9203      	str	r2, [sp, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	bfb8      	it	lt
 800c924:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c928:	3402      	adds	r4, #2
 800c92a:	9305      	str	r3, [sp, #20]
 800c92c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9f8 <_svfiprintf_r+0x1fc>
 800c930:	7821      	ldrb	r1, [r4, #0]
 800c932:	2203      	movs	r2, #3
 800c934:	4650      	mov	r0, sl
 800c936:	f7f3 fcdb 	bl	80002f0 <memchr>
 800c93a:	b140      	cbz	r0, 800c94e <_svfiprintf_r+0x152>
 800c93c:	2340      	movs	r3, #64	; 0x40
 800c93e:	eba0 000a 	sub.w	r0, r0, sl
 800c942:	fa03 f000 	lsl.w	r0, r3, r0
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	4303      	orrs	r3, r0
 800c94a:	3401      	adds	r4, #1
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c952:	4826      	ldr	r0, [pc, #152]	; (800c9ec <_svfiprintf_r+0x1f0>)
 800c954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c958:	2206      	movs	r2, #6
 800c95a:	f7f3 fcc9 	bl	80002f0 <memchr>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d038      	beq.n	800c9d4 <_svfiprintf_r+0x1d8>
 800c962:	4b23      	ldr	r3, [pc, #140]	; (800c9f0 <_svfiprintf_r+0x1f4>)
 800c964:	bb1b      	cbnz	r3, 800c9ae <_svfiprintf_r+0x1b2>
 800c966:	9b03      	ldr	r3, [sp, #12]
 800c968:	3307      	adds	r3, #7
 800c96a:	f023 0307 	bic.w	r3, r3, #7
 800c96e:	3308      	adds	r3, #8
 800c970:	9303      	str	r3, [sp, #12]
 800c972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c974:	4433      	add	r3, r6
 800c976:	9309      	str	r3, [sp, #36]	; 0x24
 800c978:	e767      	b.n	800c84a <_svfiprintf_r+0x4e>
 800c97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c97e:	460c      	mov	r4, r1
 800c980:	2001      	movs	r0, #1
 800c982:	e7a5      	b.n	800c8d0 <_svfiprintf_r+0xd4>
 800c984:	2300      	movs	r3, #0
 800c986:	3401      	adds	r4, #1
 800c988:	9305      	str	r3, [sp, #20]
 800c98a:	4619      	mov	r1, r3
 800c98c:	f04f 0c0a 	mov.w	ip, #10
 800c990:	4620      	mov	r0, r4
 800c992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c996:	3a30      	subs	r2, #48	; 0x30
 800c998:	2a09      	cmp	r2, #9
 800c99a:	d903      	bls.n	800c9a4 <_svfiprintf_r+0x1a8>
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d0c5      	beq.n	800c92c <_svfiprintf_r+0x130>
 800c9a0:	9105      	str	r1, [sp, #20]
 800c9a2:	e7c3      	b.n	800c92c <_svfiprintf_r+0x130>
 800c9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e7f0      	b.n	800c990 <_svfiprintf_r+0x194>
 800c9ae:	ab03      	add	r3, sp, #12
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	462a      	mov	r2, r5
 800c9b4:	4b0f      	ldr	r3, [pc, #60]	; (800c9f4 <_svfiprintf_r+0x1f8>)
 800c9b6:	a904      	add	r1, sp, #16
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	f3af 8000 	nop.w
 800c9be:	1c42      	adds	r2, r0, #1
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	d1d6      	bne.n	800c972 <_svfiprintf_r+0x176>
 800c9c4:	89ab      	ldrh	r3, [r5, #12]
 800c9c6:	065b      	lsls	r3, r3, #25
 800c9c8:	f53f af2c 	bmi.w	800c824 <_svfiprintf_r+0x28>
 800c9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9ce:	b01d      	add	sp, #116	; 0x74
 800c9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d4:	ab03      	add	r3, sp, #12
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	462a      	mov	r2, r5
 800c9da:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <_svfiprintf_r+0x1f8>)
 800c9dc:	a904      	add	r1, sp, #16
 800c9de:	4638      	mov	r0, r7
 800c9e0:	f000 f87a 	bl	800cad8 <_printf_i>
 800c9e4:	e7eb      	b.n	800c9be <_svfiprintf_r+0x1c2>
 800c9e6:	bf00      	nop
 800c9e8:	0800e500 	.word	0x0800e500
 800c9ec:	0800e50a 	.word	0x0800e50a
 800c9f0:	00000000 	.word	0x00000000
 800c9f4:	0800c745 	.word	0x0800c745
 800c9f8:	0800e506 	.word	0x0800e506

0800c9fc <_printf_common>:
 800c9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca00:	4616      	mov	r6, r2
 800ca02:	4699      	mov	r9, r3
 800ca04:	688a      	ldr	r2, [r1, #8]
 800ca06:	690b      	ldr	r3, [r1, #16]
 800ca08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	bfb8      	it	lt
 800ca10:	4613      	movlt	r3, r2
 800ca12:	6033      	str	r3, [r6, #0]
 800ca14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca18:	4607      	mov	r7, r0
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	b10a      	cbz	r2, 800ca22 <_printf_common+0x26>
 800ca1e:	3301      	adds	r3, #1
 800ca20:	6033      	str	r3, [r6, #0]
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	0699      	lsls	r1, r3, #26
 800ca26:	bf42      	ittt	mi
 800ca28:	6833      	ldrmi	r3, [r6, #0]
 800ca2a:	3302      	addmi	r3, #2
 800ca2c:	6033      	strmi	r3, [r6, #0]
 800ca2e:	6825      	ldr	r5, [r4, #0]
 800ca30:	f015 0506 	ands.w	r5, r5, #6
 800ca34:	d106      	bne.n	800ca44 <_printf_common+0x48>
 800ca36:	f104 0a19 	add.w	sl, r4, #25
 800ca3a:	68e3      	ldr	r3, [r4, #12]
 800ca3c:	6832      	ldr	r2, [r6, #0]
 800ca3e:	1a9b      	subs	r3, r3, r2
 800ca40:	42ab      	cmp	r3, r5
 800ca42:	dc26      	bgt.n	800ca92 <_printf_common+0x96>
 800ca44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca48:	1e13      	subs	r3, r2, #0
 800ca4a:	6822      	ldr	r2, [r4, #0]
 800ca4c:	bf18      	it	ne
 800ca4e:	2301      	movne	r3, #1
 800ca50:	0692      	lsls	r2, r2, #26
 800ca52:	d42b      	bmi.n	800caac <_printf_common+0xb0>
 800ca54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca58:	4649      	mov	r1, r9
 800ca5a:	4638      	mov	r0, r7
 800ca5c:	47c0      	blx	r8
 800ca5e:	3001      	adds	r0, #1
 800ca60:	d01e      	beq.n	800caa0 <_printf_common+0xa4>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	68e5      	ldr	r5, [r4, #12]
 800ca66:	6832      	ldr	r2, [r6, #0]
 800ca68:	f003 0306 	and.w	r3, r3, #6
 800ca6c:	2b04      	cmp	r3, #4
 800ca6e:	bf08      	it	eq
 800ca70:	1aad      	subeq	r5, r5, r2
 800ca72:	68a3      	ldr	r3, [r4, #8]
 800ca74:	6922      	ldr	r2, [r4, #16]
 800ca76:	bf0c      	ite	eq
 800ca78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca7c:	2500      	movne	r5, #0
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	bfc4      	itt	gt
 800ca82:	1a9b      	subgt	r3, r3, r2
 800ca84:	18ed      	addgt	r5, r5, r3
 800ca86:	2600      	movs	r6, #0
 800ca88:	341a      	adds	r4, #26
 800ca8a:	42b5      	cmp	r5, r6
 800ca8c:	d11a      	bne.n	800cac4 <_printf_common+0xc8>
 800ca8e:	2000      	movs	r0, #0
 800ca90:	e008      	b.n	800caa4 <_printf_common+0xa8>
 800ca92:	2301      	movs	r3, #1
 800ca94:	4652      	mov	r2, sl
 800ca96:	4649      	mov	r1, r9
 800ca98:	4638      	mov	r0, r7
 800ca9a:	47c0      	blx	r8
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	d103      	bne.n	800caa8 <_printf_common+0xac>
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa8:	3501      	adds	r5, #1
 800caaa:	e7c6      	b.n	800ca3a <_printf_common+0x3e>
 800caac:	18e1      	adds	r1, r4, r3
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	2030      	movs	r0, #48	; 0x30
 800cab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cab6:	4422      	add	r2, r4
 800cab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cabc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cac0:	3302      	adds	r3, #2
 800cac2:	e7c7      	b.n	800ca54 <_printf_common+0x58>
 800cac4:	2301      	movs	r3, #1
 800cac6:	4622      	mov	r2, r4
 800cac8:	4649      	mov	r1, r9
 800caca:	4638      	mov	r0, r7
 800cacc:	47c0      	blx	r8
 800cace:	3001      	adds	r0, #1
 800cad0:	d0e6      	beq.n	800caa0 <_printf_common+0xa4>
 800cad2:	3601      	adds	r6, #1
 800cad4:	e7d9      	b.n	800ca8a <_printf_common+0x8e>
	...

0800cad8 <_printf_i>:
 800cad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cadc:	7e0f      	ldrb	r7, [r1, #24]
 800cade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cae0:	2f78      	cmp	r7, #120	; 0x78
 800cae2:	4691      	mov	r9, r2
 800cae4:	4680      	mov	r8, r0
 800cae6:	460c      	mov	r4, r1
 800cae8:	469a      	mov	sl, r3
 800caea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caee:	d807      	bhi.n	800cb00 <_printf_i+0x28>
 800caf0:	2f62      	cmp	r7, #98	; 0x62
 800caf2:	d80a      	bhi.n	800cb0a <_printf_i+0x32>
 800caf4:	2f00      	cmp	r7, #0
 800caf6:	f000 80d8 	beq.w	800ccaa <_printf_i+0x1d2>
 800cafa:	2f58      	cmp	r7, #88	; 0x58
 800cafc:	f000 80a3 	beq.w	800cc46 <_printf_i+0x16e>
 800cb00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb08:	e03a      	b.n	800cb80 <_printf_i+0xa8>
 800cb0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb0e:	2b15      	cmp	r3, #21
 800cb10:	d8f6      	bhi.n	800cb00 <_printf_i+0x28>
 800cb12:	a101      	add	r1, pc, #4	; (adr r1, 800cb18 <_printf_i+0x40>)
 800cb14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb18:	0800cb71 	.word	0x0800cb71
 800cb1c:	0800cb85 	.word	0x0800cb85
 800cb20:	0800cb01 	.word	0x0800cb01
 800cb24:	0800cb01 	.word	0x0800cb01
 800cb28:	0800cb01 	.word	0x0800cb01
 800cb2c:	0800cb01 	.word	0x0800cb01
 800cb30:	0800cb85 	.word	0x0800cb85
 800cb34:	0800cb01 	.word	0x0800cb01
 800cb38:	0800cb01 	.word	0x0800cb01
 800cb3c:	0800cb01 	.word	0x0800cb01
 800cb40:	0800cb01 	.word	0x0800cb01
 800cb44:	0800cc91 	.word	0x0800cc91
 800cb48:	0800cbb5 	.word	0x0800cbb5
 800cb4c:	0800cc73 	.word	0x0800cc73
 800cb50:	0800cb01 	.word	0x0800cb01
 800cb54:	0800cb01 	.word	0x0800cb01
 800cb58:	0800ccb3 	.word	0x0800ccb3
 800cb5c:	0800cb01 	.word	0x0800cb01
 800cb60:	0800cbb5 	.word	0x0800cbb5
 800cb64:	0800cb01 	.word	0x0800cb01
 800cb68:	0800cb01 	.word	0x0800cb01
 800cb6c:	0800cc7b 	.word	0x0800cc7b
 800cb70:	682b      	ldr	r3, [r5, #0]
 800cb72:	1d1a      	adds	r2, r3, #4
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	602a      	str	r2, [r5, #0]
 800cb78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb80:	2301      	movs	r3, #1
 800cb82:	e0a3      	b.n	800cccc <_printf_i+0x1f4>
 800cb84:	6820      	ldr	r0, [r4, #0]
 800cb86:	6829      	ldr	r1, [r5, #0]
 800cb88:	0606      	lsls	r6, r0, #24
 800cb8a:	f101 0304 	add.w	r3, r1, #4
 800cb8e:	d50a      	bpl.n	800cba6 <_printf_i+0xce>
 800cb90:	680e      	ldr	r6, [r1, #0]
 800cb92:	602b      	str	r3, [r5, #0]
 800cb94:	2e00      	cmp	r6, #0
 800cb96:	da03      	bge.n	800cba0 <_printf_i+0xc8>
 800cb98:	232d      	movs	r3, #45	; 0x2d
 800cb9a:	4276      	negs	r6, r6
 800cb9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cba0:	485e      	ldr	r0, [pc, #376]	; (800cd1c <_printf_i+0x244>)
 800cba2:	230a      	movs	r3, #10
 800cba4:	e019      	b.n	800cbda <_printf_i+0x102>
 800cba6:	680e      	ldr	r6, [r1, #0]
 800cba8:	602b      	str	r3, [r5, #0]
 800cbaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cbae:	bf18      	it	ne
 800cbb0:	b236      	sxthne	r6, r6
 800cbb2:	e7ef      	b.n	800cb94 <_printf_i+0xbc>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	6820      	ldr	r0, [r4, #0]
 800cbb8:	1d19      	adds	r1, r3, #4
 800cbba:	6029      	str	r1, [r5, #0]
 800cbbc:	0601      	lsls	r1, r0, #24
 800cbbe:	d501      	bpl.n	800cbc4 <_printf_i+0xec>
 800cbc0:	681e      	ldr	r6, [r3, #0]
 800cbc2:	e002      	b.n	800cbca <_printf_i+0xf2>
 800cbc4:	0646      	lsls	r6, r0, #25
 800cbc6:	d5fb      	bpl.n	800cbc0 <_printf_i+0xe8>
 800cbc8:	881e      	ldrh	r6, [r3, #0]
 800cbca:	4854      	ldr	r0, [pc, #336]	; (800cd1c <_printf_i+0x244>)
 800cbcc:	2f6f      	cmp	r7, #111	; 0x6f
 800cbce:	bf0c      	ite	eq
 800cbd0:	2308      	moveq	r3, #8
 800cbd2:	230a      	movne	r3, #10
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbda:	6865      	ldr	r5, [r4, #4]
 800cbdc:	60a5      	str	r5, [r4, #8]
 800cbde:	2d00      	cmp	r5, #0
 800cbe0:	bfa2      	ittt	ge
 800cbe2:	6821      	ldrge	r1, [r4, #0]
 800cbe4:	f021 0104 	bicge.w	r1, r1, #4
 800cbe8:	6021      	strge	r1, [r4, #0]
 800cbea:	b90e      	cbnz	r6, 800cbf0 <_printf_i+0x118>
 800cbec:	2d00      	cmp	r5, #0
 800cbee:	d04d      	beq.n	800cc8c <_printf_i+0x1b4>
 800cbf0:	4615      	mov	r5, r2
 800cbf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbf6:	fb03 6711 	mls	r7, r3, r1, r6
 800cbfa:	5dc7      	ldrb	r7, [r0, r7]
 800cbfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc00:	4637      	mov	r7, r6
 800cc02:	42bb      	cmp	r3, r7
 800cc04:	460e      	mov	r6, r1
 800cc06:	d9f4      	bls.n	800cbf2 <_printf_i+0x11a>
 800cc08:	2b08      	cmp	r3, #8
 800cc0a:	d10b      	bne.n	800cc24 <_printf_i+0x14c>
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	07de      	lsls	r6, r3, #31
 800cc10:	d508      	bpl.n	800cc24 <_printf_i+0x14c>
 800cc12:	6923      	ldr	r3, [r4, #16]
 800cc14:	6861      	ldr	r1, [r4, #4]
 800cc16:	4299      	cmp	r1, r3
 800cc18:	bfde      	ittt	le
 800cc1a:	2330      	movle	r3, #48	; 0x30
 800cc1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc24:	1b52      	subs	r2, r2, r5
 800cc26:	6122      	str	r2, [r4, #16]
 800cc28:	f8cd a000 	str.w	sl, [sp]
 800cc2c:	464b      	mov	r3, r9
 800cc2e:	aa03      	add	r2, sp, #12
 800cc30:	4621      	mov	r1, r4
 800cc32:	4640      	mov	r0, r8
 800cc34:	f7ff fee2 	bl	800c9fc <_printf_common>
 800cc38:	3001      	adds	r0, #1
 800cc3a:	d14c      	bne.n	800ccd6 <_printf_i+0x1fe>
 800cc3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc40:	b004      	add	sp, #16
 800cc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc46:	4835      	ldr	r0, [pc, #212]	; (800cd1c <_printf_i+0x244>)
 800cc48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc4c:	6829      	ldr	r1, [r5, #0]
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc54:	6029      	str	r1, [r5, #0]
 800cc56:	061d      	lsls	r5, r3, #24
 800cc58:	d514      	bpl.n	800cc84 <_printf_i+0x1ac>
 800cc5a:	07df      	lsls	r7, r3, #31
 800cc5c:	bf44      	itt	mi
 800cc5e:	f043 0320 	orrmi.w	r3, r3, #32
 800cc62:	6023      	strmi	r3, [r4, #0]
 800cc64:	b91e      	cbnz	r6, 800cc6e <_printf_i+0x196>
 800cc66:	6823      	ldr	r3, [r4, #0]
 800cc68:	f023 0320 	bic.w	r3, r3, #32
 800cc6c:	6023      	str	r3, [r4, #0]
 800cc6e:	2310      	movs	r3, #16
 800cc70:	e7b0      	b.n	800cbd4 <_printf_i+0xfc>
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	f043 0320 	orr.w	r3, r3, #32
 800cc78:	6023      	str	r3, [r4, #0]
 800cc7a:	2378      	movs	r3, #120	; 0x78
 800cc7c:	4828      	ldr	r0, [pc, #160]	; (800cd20 <_printf_i+0x248>)
 800cc7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc82:	e7e3      	b.n	800cc4c <_printf_i+0x174>
 800cc84:	0659      	lsls	r1, r3, #25
 800cc86:	bf48      	it	mi
 800cc88:	b2b6      	uxthmi	r6, r6
 800cc8a:	e7e6      	b.n	800cc5a <_printf_i+0x182>
 800cc8c:	4615      	mov	r5, r2
 800cc8e:	e7bb      	b.n	800cc08 <_printf_i+0x130>
 800cc90:	682b      	ldr	r3, [r5, #0]
 800cc92:	6826      	ldr	r6, [r4, #0]
 800cc94:	6961      	ldr	r1, [r4, #20]
 800cc96:	1d18      	adds	r0, r3, #4
 800cc98:	6028      	str	r0, [r5, #0]
 800cc9a:	0635      	lsls	r5, r6, #24
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	d501      	bpl.n	800cca4 <_printf_i+0x1cc>
 800cca0:	6019      	str	r1, [r3, #0]
 800cca2:	e002      	b.n	800ccaa <_printf_i+0x1d2>
 800cca4:	0670      	lsls	r0, r6, #25
 800cca6:	d5fb      	bpl.n	800cca0 <_printf_i+0x1c8>
 800cca8:	8019      	strh	r1, [r3, #0]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	6123      	str	r3, [r4, #16]
 800ccae:	4615      	mov	r5, r2
 800ccb0:	e7ba      	b.n	800cc28 <_printf_i+0x150>
 800ccb2:	682b      	ldr	r3, [r5, #0]
 800ccb4:	1d1a      	adds	r2, r3, #4
 800ccb6:	602a      	str	r2, [r5, #0]
 800ccb8:	681d      	ldr	r5, [r3, #0]
 800ccba:	6862      	ldr	r2, [r4, #4]
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f7f3 fb16 	bl	80002f0 <memchr>
 800ccc4:	b108      	cbz	r0, 800ccca <_printf_i+0x1f2>
 800ccc6:	1b40      	subs	r0, r0, r5
 800ccc8:	6060      	str	r0, [r4, #4]
 800ccca:	6863      	ldr	r3, [r4, #4]
 800cccc:	6123      	str	r3, [r4, #16]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccd4:	e7a8      	b.n	800cc28 <_printf_i+0x150>
 800ccd6:	6923      	ldr	r3, [r4, #16]
 800ccd8:	462a      	mov	r2, r5
 800ccda:	4649      	mov	r1, r9
 800ccdc:	4640      	mov	r0, r8
 800ccde:	47d0      	blx	sl
 800cce0:	3001      	adds	r0, #1
 800cce2:	d0ab      	beq.n	800cc3c <_printf_i+0x164>
 800cce4:	6823      	ldr	r3, [r4, #0]
 800cce6:	079b      	lsls	r3, r3, #30
 800cce8:	d413      	bmi.n	800cd12 <_printf_i+0x23a>
 800ccea:	68e0      	ldr	r0, [r4, #12]
 800ccec:	9b03      	ldr	r3, [sp, #12]
 800ccee:	4298      	cmp	r0, r3
 800ccf0:	bfb8      	it	lt
 800ccf2:	4618      	movlt	r0, r3
 800ccf4:	e7a4      	b.n	800cc40 <_printf_i+0x168>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	4632      	mov	r2, r6
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	47d0      	blx	sl
 800cd00:	3001      	adds	r0, #1
 800cd02:	d09b      	beq.n	800cc3c <_printf_i+0x164>
 800cd04:	3501      	adds	r5, #1
 800cd06:	68e3      	ldr	r3, [r4, #12]
 800cd08:	9903      	ldr	r1, [sp, #12]
 800cd0a:	1a5b      	subs	r3, r3, r1
 800cd0c:	42ab      	cmp	r3, r5
 800cd0e:	dcf2      	bgt.n	800ccf6 <_printf_i+0x21e>
 800cd10:	e7eb      	b.n	800ccea <_printf_i+0x212>
 800cd12:	2500      	movs	r5, #0
 800cd14:	f104 0619 	add.w	r6, r4, #25
 800cd18:	e7f5      	b.n	800cd06 <_printf_i+0x22e>
 800cd1a:	bf00      	nop
 800cd1c:	0800e511 	.word	0x0800e511
 800cd20:	0800e522 	.word	0x0800e522

0800cd24 <memcpy>:
 800cd24:	440a      	add	r2, r1
 800cd26:	4291      	cmp	r1, r2
 800cd28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cd2c:	d100      	bne.n	800cd30 <memcpy+0xc>
 800cd2e:	4770      	bx	lr
 800cd30:	b510      	push	{r4, lr}
 800cd32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd3a:	4291      	cmp	r1, r2
 800cd3c:	d1f9      	bne.n	800cd32 <memcpy+0xe>
 800cd3e:	bd10      	pop	{r4, pc}

0800cd40 <memmove>:
 800cd40:	4288      	cmp	r0, r1
 800cd42:	b510      	push	{r4, lr}
 800cd44:	eb01 0402 	add.w	r4, r1, r2
 800cd48:	d902      	bls.n	800cd50 <memmove+0x10>
 800cd4a:	4284      	cmp	r4, r0
 800cd4c:	4623      	mov	r3, r4
 800cd4e:	d807      	bhi.n	800cd60 <memmove+0x20>
 800cd50:	1e43      	subs	r3, r0, #1
 800cd52:	42a1      	cmp	r1, r4
 800cd54:	d008      	beq.n	800cd68 <memmove+0x28>
 800cd56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd5e:	e7f8      	b.n	800cd52 <memmove+0x12>
 800cd60:	4402      	add	r2, r0
 800cd62:	4601      	mov	r1, r0
 800cd64:	428a      	cmp	r2, r1
 800cd66:	d100      	bne.n	800cd6a <memmove+0x2a>
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd72:	e7f7      	b.n	800cd64 <memmove+0x24>

0800cd74 <_free_r>:
 800cd74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd76:	2900      	cmp	r1, #0
 800cd78:	d044      	beq.n	800ce04 <_free_r+0x90>
 800cd7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd7e:	9001      	str	r0, [sp, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f1a1 0404 	sub.w	r4, r1, #4
 800cd86:	bfb8      	it	lt
 800cd88:	18e4      	addlt	r4, r4, r3
 800cd8a:	f000 f913 	bl	800cfb4 <__malloc_lock>
 800cd8e:	4a1e      	ldr	r2, [pc, #120]	; (800ce08 <_free_r+0x94>)
 800cd90:	9801      	ldr	r0, [sp, #4]
 800cd92:	6813      	ldr	r3, [r2, #0]
 800cd94:	b933      	cbnz	r3, 800cda4 <_free_r+0x30>
 800cd96:	6063      	str	r3, [r4, #4]
 800cd98:	6014      	str	r4, [r2, #0]
 800cd9a:	b003      	add	sp, #12
 800cd9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cda0:	f000 b90e 	b.w	800cfc0 <__malloc_unlock>
 800cda4:	42a3      	cmp	r3, r4
 800cda6:	d908      	bls.n	800cdba <_free_r+0x46>
 800cda8:	6825      	ldr	r5, [r4, #0]
 800cdaa:	1961      	adds	r1, r4, r5
 800cdac:	428b      	cmp	r3, r1
 800cdae:	bf01      	itttt	eq
 800cdb0:	6819      	ldreq	r1, [r3, #0]
 800cdb2:	685b      	ldreq	r3, [r3, #4]
 800cdb4:	1949      	addeq	r1, r1, r5
 800cdb6:	6021      	streq	r1, [r4, #0]
 800cdb8:	e7ed      	b.n	800cd96 <_free_r+0x22>
 800cdba:	461a      	mov	r2, r3
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	b10b      	cbz	r3, 800cdc4 <_free_r+0x50>
 800cdc0:	42a3      	cmp	r3, r4
 800cdc2:	d9fa      	bls.n	800cdba <_free_r+0x46>
 800cdc4:	6811      	ldr	r1, [r2, #0]
 800cdc6:	1855      	adds	r5, r2, r1
 800cdc8:	42a5      	cmp	r5, r4
 800cdca:	d10b      	bne.n	800cde4 <_free_r+0x70>
 800cdcc:	6824      	ldr	r4, [r4, #0]
 800cdce:	4421      	add	r1, r4
 800cdd0:	1854      	adds	r4, r2, r1
 800cdd2:	42a3      	cmp	r3, r4
 800cdd4:	6011      	str	r1, [r2, #0]
 800cdd6:	d1e0      	bne.n	800cd9a <_free_r+0x26>
 800cdd8:	681c      	ldr	r4, [r3, #0]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	6053      	str	r3, [r2, #4]
 800cdde:	4421      	add	r1, r4
 800cde0:	6011      	str	r1, [r2, #0]
 800cde2:	e7da      	b.n	800cd9a <_free_r+0x26>
 800cde4:	d902      	bls.n	800cdec <_free_r+0x78>
 800cde6:	230c      	movs	r3, #12
 800cde8:	6003      	str	r3, [r0, #0]
 800cdea:	e7d6      	b.n	800cd9a <_free_r+0x26>
 800cdec:	6825      	ldr	r5, [r4, #0]
 800cdee:	1961      	adds	r1, r4, r5
 800cdf0:	428b      	cmp	r3, r1
 800cdf2:	bf04      	itt	eq
 800cdf4:	6819      	ldreq	r1, [r3, #0]
 800cdf6:	685b      	ldreq	r3, [r3, #4]
 800cdf8:	6063      	str	r3, [r4, #4]
 800cdfa:	bf04      	itt	eq
 800cdfc:	1949      	addeq	r1, r1, r5
 800cdfe:	6021      	streq	r1, [r4, #0]
 800ce00:	6054      	str	r4, [r2, #4]
 800ce02:	e7ca      	b.n	800cd9a <_free_r+0x26>
 800ce04:	b003      	add	sp, #12
 800ce06:	bd30      	pop	{r4, r5, pc}
 800ce08:	24001950 	.word	0x24001950

0800ce0c <sbrk_aligned>:
 800ce0c:	b570      	push	{r4, r5, r6, lr}
 800ce0e:	4e0e      	ldr	r6, [pc, #56]	; (800ce48 <sbrk_aligned+0x3c>)
 800ce10:	460c      	mov	r4, r1
 800ce12:	6831      	ldr	r1, [r6, #0]
 800ce14:	4605      	mov	r5, r0
 800ce16:	b911      	cbnz	r1, 800ce1e <sbrk_aligned+0x12>
 800ce18:	f000 f8bc 	bl	800cf94 <_sbrk_r>
 800ce1c:	6030      	str	r0, [r6, #0]
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	f000 f8b7 	bl	800cf94 <_sbrk_r>
 800ce26:	1c43      	adds	r3, r0, #1
 800ce28:	d00a      	beq.n	800ce40 <sbrk_aligned+0x34>
 800ce2a:	1cc4      	adds	r4, r0, #3
 800ce2c:	f024 0403 	bic.w	r4, r4, #3
 800ce30:	42a0      	cmp	r0, r4
 800ce32:	d007      	beq.n	800ce44 <sbrk_aligned+0x38>
 800ce34:	1a21      	subs	r1, r4, r0
 800ce36:	4628      	mov	r0, r5
 800ce38:	f000 f8ac 	bl	800cf94 <_sbrk_r>
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d101      	bne.n	800ce44 <sbrk_aligned+0x38>
 800ce40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ce44:	4620      	mov	r0, r4
 800ce46:	bd70      	pop	{r4, r5, r6, pc}
 800ce48:	24001954 	.word	0x24001954

0800ce4c <_malloc_r>:
 800ce4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce50:	1ccd      	adds	r5, r1, #3
 800ce52:	f025 0503 	bic.w	r5, r5, #3
 800ce56:	3508      	adds	r5, #8
 800ce58:	2d0c      	cmp	r5, #12
 800ce5a:	bf38      	it	cc
 800ce5c:	250c      	movcc	r5, #12
 800ce5e:	2d00      	cmp	r5, #0
 800ce60:	4607      	mov	r7, r0
 800ce62:	db01      	blt.n	800ce68 <_malloc_r+0x1c>
 800ce64:	42a9      	cmp	r1, r5
 800ce66:	d905      	bls.n	800ce74 <_malloc_r+0x28>
 800ce68:	230c      	movs	r3, #12
 800ce6a:	603b      	str	r3, [r7, #0]
 800ce6c:	2600      	movs	r6, #0
 800ce6e:	4630      	mov	r0, r6
 800ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce74:	4e2e      	ldr	r6, [pc, #184]	; (800cf30 <_malloc_r+0xe4>)
 800ce76:	f000 f89d 	bl	800cfb4 <__malloc_lock>
 800ce7a:	6833      	ldr	r3, [r6, #0]
 800ce7c:	461c      	mov	r4, r3
 800ce7e:	bb34      	cbnz	r4, 800cece <_malloc_r+0x82>
 800ce80:	4629      	mov	r1, r5
 800ce82:	4638      	mov	r0, r7
 800ce84:	f7ff ffc2 	bl	800ce0c <sbrk_aligned>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	d14d      	bne.n	800cf2a <_malloc_r+0xde>
 800ce8e:	6834      	ldr	r4, [r6, #0]
 800ce90:	4626      	mov	r6, r4
 800ce92:	2e00      	cmp	r6, #0
 800ce94:	d140      	bne.n	800cf18 <_malloc_r+0xcc>
 800ce96:	6823      	ldr	r3, [r4, #0]
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4638      	mov	r0, r7
 800ce9c:	eb04 0803 	add.w	r8, r4, r3
 800cea0:	f000 f878 	bl	800cf94 <_sbrk_r>
 800cea4:	4580      	cmp	r8, r0
 800cea6:	d13a      	bne.n	800cf1e <_malloc_r+0xd2>
 800cea8:	6821      	ldr	r1, [r4, #0]
 800ceaa:	3503      	adds	r5, #3
 800ceac:	1a6d      	subs	r5, r5, r1
 800ceae:	f025 0503 	bic.w	r5, r5, #3
 800ceb2:	3508      	adds	r5, #8
 800ceb4:	2d0c      	cmp	r5, #12
 800ceb6:	bf38      	it	cc
 800ceb8:	250c      	movcc	r5, #12
 800ceba:	4629      	mov	r1, r5
 800cebc:	4638      	mov	r0, r7
 800cebe:	f7ff ffa5 	bl	800ce0c <sbrk_aligned>
 800cec2:	3001      	adds	r0, #1
 800cec4:	d02b      	beq.n	800cf1e <_malloc_r+0xd2>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	442b      	add	r3, r5
 800ceca:	6023      	str	r3, [r4, #0]
 800cecc:	e00e      	b.n	800ceec <_malloc_r+0xa0>
 800cece:	6822      	ldr	r2, [r4, #0]
 800ced0:	1b52      	subs	r2, r2, r5
 800ced2:	d41e      	bmi.n	800cf12 <_malloc_r+0xc6>
 800ced4:	2a0b      	cmp	r2, #11
 800ced6:	d916      	bls.n	800cf06 <_malloc_r+0xba>
 800ced8:	1961      	adds	r1, r4, r5
 800ceda:	42a3      	cmp	r3, r4
 800cedc:	6025      	str	r5, [r4, #0]
 800cede:	bf18      	it	ne
 800cee0:	6059      	strne	r1, [r3, #4]
 800cee2:	6863      	ldr	r3, [r4, #4]
 800cee4:	bf08      	it	eq
 800cee6:	6031      	streq	r1, [r6, #0]
 800cee8:	5162      	str	r2, [r4, r5]
 800ceea:	604b      	str	r3, [r1, #4]
 800ceec:	4638      	mov	r0, r7
 800ceee:	f104 060b 	add.w	r6, r4, #11
 800cef2:	f000 f865 	bl	800cfc0 <__malloc_unlock>
 800cef6:	f026 0607 	bic.w	r6, r6, #7
 800cefa:	1d23      	adds	r3, r4, #4
 800cefc:	1af2      	subs	r2, r6, r3
 800cefe:	d0b6      	beq.n	800ce6e <_malloc_r+0x22>
 800cf00:	1b9b      	subs	r3, r3, r6
 800cf02:	50a3      	str	r3, [r4, r2]
 800cf04:	e7b3      	b.n	800ce6e <_malloc_r+0x22>
 800cf06:	6862      	ldr	r2, [r4, #4]
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	bf0c      	ite	eq
 800cf0c:	6032      	streq	r2, [r6, #0]
 800cf0e:	605a      	strne	r2, [r3, #4]
 800cf10:	e7ec      	b.n	800ceec <_malloc_r+0xa0>
 800cf12:	4623      	mov	r3, r4
 800cf14:	6864      	ldr	r4, [r4, #4]
 800cf16:	e7b2      	b.n	800ce7e <_malloc_r+0x32>
 800cf18:	4634      	mov	r4, r6
 800cf1a:	6876      	ldr	r6, [r6, #4]
 800cf1c:	e7b9      	b.n	800ce92 <_malloc_r+0x46>
 800cf1e:	230c      	movs	r3, #12
 800cf20:	603b      	str	r3, [r7, #0]
 800cf22:	4638      	mov	r0, r7
 800cf24:	f000 f84c 	bl	800cfc0 <__malloc_unlock>
 800cf28:	e7a1      	b.n	800ce6e <_malloc_r+0x22>
 800cf2a:	6025      	str	r5, [r4, #0]
 800cf2c:	e7de      	b.n	800ceec <_malloc_r+0xa0>
 800cf2e:	bf00      	nop
 800cf30:	24001950 	.word	0x24001950

0800cf34 <_realloc_r>:
 800cf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf38:	4680      	mov	r8, r0
 800cf3a:	4614      	mov	r4, r2
 800cf3c:	460e      	mov	r6, r1
 800cf3e:	b921      	cbnz	r1, 800cf4a <_realloc_r+0x16>
 800cf40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf44:	4611      	mov	r1, r2
 800cf46:	f7ff bf81 	b.w	800ce4c <_malloc_r>
 800cf4a:	b92a      	cbnz	r2, 800cf58 <_realloc_r+0x24>
 800cf4c:	f7ff ff12 	bl	800cd74 <_free_r>
 800cf50:	4625      	mov	r5, r4
 800cf52:	4628      	mov	r0, r5
 800cf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf58:	f000 f838 	bl	800cfcc <_malloc_usable_size_r>
 800cf5c:	4284      	cmp	r4, r0
 800cf5e:	4607      	mov	r7, r0
 800cf60:	d802      	bhi.n	800cf68 <_realloc_r+0x34>
 800cf62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf66:	d812      	bhi.n	800cf8e <_realloc_r+0x5a>
 800cf68:	4621      	mov	r1, r4
 800cf6a:	4640      	mov	r0, r8
 800cf6c:	f7ff ff6e 	bl	800ce4c <_malloc_r>
 800cf70:	4605      	mov	r5, r0
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d0ed      	beq.n	800cf52 <_realloc_r+0x1e>
 800cf76:	42bc      	cmp	r4, r7
 800cf78:	4622      	mov	r2, r4
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	bf28      	it	cs
 800cf7e:	463a      	movcs	r2, r7
 800cf80:	f7ff fed0 	bl	800cd24 <memcpy>
 800cf84:	4631      	mov	r1, r6
 800cf86:	4640      	mov	r0, r8
 800cf88:	f7ff fef4 	bl	800cd74 <_free_r>
 800cf8c:	e7e1      	b.n	800cf52 <_realloc_r+0x1e>
 800cf8e:	4635      	mov	r5, r6
 800cf90:	e7df      	b.n	800cf52 <_realloc_r+0x1e>
	...

0800cf94 <_sbrk_r>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	4d06      	ldr	r5, [pc, #24]	; (800cfb0 <_sbrk_r+0x1c>)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	602b      	str	r3, [r5, #0]
 800cfa0:	f7f6 fa9c 	bl	80034dc <_sbrk>
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d102      	bne.n	800cfae <_sbrk_r+0x1a>
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	b103      	cbz	r3, 800cfae <_sbrk_r+0x1a>
 800cfac:	6023      	str	r3, [r4, #0]
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	24001958 	.word	0x24001958

0800cfb4 <__malloc_lock>:
 800cfb4:	4801      	ldr	r0, [pc, #4]	; (800cfbc <__malloc_lock+0x8>)
 800cfb6:	f000 b811 	b.w	800cfdc <__retarget_lock_acquire_recursive>
 800cfba:	bf00      	nop
 800cfbc:	2400195c 	.word	0x2400195c

0800cfc0 <__malloc_unlock>:
 800cfc0:	4801      	ldr	r0, [pc, #4]	; (800cfc8 <__malloc_unlock+0x8>)
 800cfc2:	f000 b80c 	b.w	800cfde <__retarget_lock_release_recursive>
 800cfc6:	bf00      	nop
 800cfc8:	2400195c 	.word	0x2400195c

0800cfcc <_malloc_usable_size_r>:
 800cfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd0:	1f18      	subs	r0, r3, #4
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bfbc      	itt	lt
 800cfd6:	580b      	ldrlt	r3, [r1, r0]
 800cfd8:	18c0      	addlt	r0, r0, r3
 800cfda:	4770      	bx	lr

0800cfdc <__retarget_lock_acquire_recursive>:
 800cfdc:	4770      	bx	lr

0800cfde <__retarget_lock_release_recursive>:
 800cfde:	4770      	bx	lr

0800cfe0 <checkint>:
 800cfe0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cfe4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	b570      	push	{r4, r5, r6, lr}
 800cfec:	dd2a      	ble.n	800d044 <checkint+0x64>
 800cfee:	f240 4333 	movw	r3, #1075	; 0x433
 800cff2:	429a      	cmp	r2, r3
 800cff4:	dc24      	bgt.n	800d040 <checkint+0x60>
 800cff6:	1a9b      	subs	r3, r3, r2
 800cff8:	f1a3 0620 	sub.w	r6, r3, #32
 800cffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d000:	fa02 f403 	lsl.w	r4, r2, r3
 800d004:	fa02 f606 	lsl.w	r6, r2, r6
 800d008:	f1c3 0520 	rsb	r5, r3, #32
 800d00c:	fa22 f505 	lsr.w	r5, r2, r5
 800d010:	4334      	orrs	r4, r6
 800d012:	432c      	orrs	r4, r5
 800d014:	409a      	lsls	r2, r3
 800d016:	ea20 0202 	bic.w	r2, r0, r2
 800d01a:	ea21 0404 	bic.w	r4, r1, r4
 800d01e:	4322      	orrs	r2, r4
 800d020:	f1a3 0420 	sub.w	r4, r3, #32
 800d024:	f1c3 0220 	rsb	r2, r3, #32
 800d028:	d10c      	bne.n	800d044 <checkint+0x64>
 800d02a:	40d8      	lsrs	r0, r3
 800d02c:	fa01 f302 	lsl.w	r3, r1, r2
 800d030:	4318      	orrs	r0, r3
 800d032:	40e1      	lsrs	r1, r4
 800d034:	4308      	orrs	r0, r1
 800d036:	f000 0001 	and.w	r0, r0, #1
 800d03a:	f1d0 0002 	rsbs	r0, r0, #2
 800d03e:	bd70      	pop	{r4, r5, r6, pc}
 800d040:	2002      	movs	r0, #2
 800d042:	e7fc      	b.n	800d03e <checkint+0x5e>
 800d044:	2000      	movs	r0, #0
 800d046:	e7fa      	b.n	800d03e <checkint+0x5e>

0800d048 <pow>:
 800d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d04c:	ee10 4a90 	vmov	r4, s1
 800d050:	ed2d 8b0a 	vpush	{d8-d12}
 800d054:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800d058:	ee11 7a90 	vmov	r7, s3
 800d05c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800d060:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800d064:	429a      	cmp	r2, r3
 800d066:	ee10 6a10 	vmov	r6, s0
 800d06a:	ee11 0a10 	vmov	r0, s2
 800d06e:	b086      	sub	sp, #24
 800d070:	46d4      	mov	ip, sl
 800d072:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800d076:	d806      	bhi.n	800d086 <pow+0x3e>
 800d078:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800d07c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800d080:	2b7f      	cmp	r3, #127	; 0x7f
 800d082:	f240 8156 	bls.w	800d332 <pow+0x2ea>
 800d086:	1802      	adds	r2, r0, r0
 800d088:	eb47 0107 	adc.w	r1, r7, r7
 800d08c:	f06f 0e01 	mvn.w	lr, #1
 800d090:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 800d094:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 800d098:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800d09c:	45ce      	cmp	lr, r9
 800d09e:	eb73 0808 	sbcs.w	r8, r3, r8
 800d0a2:	d23f      	bcs.n	800d124 <pow+0xdc>
 800d0a4:	ea52 0301 	orrs.w	r3, r2, r1
 800d0a8:	f04f 0300 	mov.w	r3, #0
 800d0ac:	d10c      	bne.n	800d0c8 <pow+0x80>
 800d0ae:	19b6      	adds	r6, r6, r6
 800d0b0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800d0b4:	4164      	adcs	r4, r4
 800d0b6:	42b3      	cmp	r3, r6
 800d0b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d0bc:	41a3      	sbcs	r3, r4
 800d0be:	f0c0 808c 	bcc.w	800d1da <pow+0x192>
 800d0c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d0c6:	e028      	b.n	800d11a <pow+0xd2>
 800d0c8:	4da3      	ldr	r5, [pc, #652]	; (800d358 <pow+0x310>)
 800d0ca:	42ac      	cmp	r4, r5
 800d0cc:	bf08      	it	eq
 800d0ce:	429e      	cmpeq	r6, r3
 800d0d0:	d107      	bne.n	800d0e2 <pow+0x9a>
 800d0d2:	1800      	adds	r0, r0, r0
 800d0d4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800d0d8:	417f      	adcs	r7, r7
 800d0da:	4283      	cmp	r3, r0
 800d0dc:	4b9f      	ldr	r3, [pc, #636]	; (800d35c <pow+0x314>)
 800d0de:	41bb      	sbcs	r3, r7
 800d0e0:	e7ed      	b.n	800d0be <pow+0x76>
 800d0e2:	19b6      	adds	r6, r6, r6
 800d0e4:	489e      	ldr	r0, [pc, #632]	; (800d360 <pow+0x318>)
 800d0e6:	4164      	adcs	r4, r4
 800d0e8:	42b3      	cmp	r3, r6
 800d0ea:	eb70 0504 	sbcs.w	r5, r0, r4
 800d0ee:	d374      	bcc.n	800d1da <pow+0x192>
 800d0f0:	4281      	cmp	r1, r0
 800d0f2:	bf08      	it	eq
 800d0f4:	429a      	cmpeq	r2, r3
 800d0f6:	d170      	bne.n	800d1da <pow+0x192>
 800d0f8:	4a9a      	ldr	r2, [pc, #616]	; (800d364 <pow+0x31c>)
 800d0fa:	4294      	cmp	r4, r2
 800d0fc:	bf08      	it	eq
 800d0fe:	429e      	cmpeq	r6, r3
 800d100:	d0df      	beq.n	800d0c2 <pow+0x7a>
 800d102:	4294      	cmp	r4, r2
 800d104:	ea6f 0707 	mvn.w	r7, r7
 800d108:	bf34      	ite	cc
 800d10a:	2400      	movcc	r4, #0
 800d10c:	2401      	movcs	r4, #1
 800d10e:	0fff      	lsrs	r7, r7, #31
 800d110:	42bc      	cmp	r4, r7
 800d112:	f040 81d9 	bne.w	800d4c8 <pow+0x480>
 800d116:	ee21 0b01 	vmul.f64	d0, d1, d1
 800d11a:	b006      	add	sp, #24
 800d11c:	ecbd 8b0a 	vpop	{d8-d12}
 800d120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d124:	eb16 0806 	adds.w	r8, r6, r6
 800d128:	eb44 0904 	adc.w	r9, r4, r4
 800d12c:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 800d130:	f169 0200 	sbc.w	r2, r9, #0
 800d134:	458e      	cmp	lr, r1
 800d136:	4193      	sbcs	r3, r2
 800d138:	d223      	bcs.n	800d182 <pow+0x13a>
 800d13a:	ee20 0b00 	vmul.f64	d0, d0, d0
 800d13e:	2c00      	cmp	r4, #0
 800d140:	da12      	bge.n	800d168 <pow+0x120>
 800d142:	4639      	mov	r1, r7
 800d144:	f7ff ff4c 	bl	800cfe0 <checkint>
 800d148:	2801      	cmp	r0, #1
 800d14a:	d10d      	bne.n	800d168 <pow+0x120>
 800d14c:	eeb1 0b40 	vneg.f64	d0, d0
 800d150:	ea58 0309 	orrs.w	r3, r8, r9
 800d154:	d10a      	bne.n	800d16c <pow+0x124>
 800d156:	2f00      	cmp	r7, #0
 800d158:	dadf      	bge.n	800d11a <pow+0xd2>
 800d15a:	b006      	add	sp, #24
 800d15c:	ecbd 8b0a 	vpop	{d8-d12}
 800d160:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d164:	f001 b83c 	b.w	800e1e0 <__math_divzero>
 800d168:	2000      	movs	r0, #0
 800d16a:	e7f1      	b.n	800d150 <pow+0x108>
 800d16c:	2f00      	cmp	r7, #0
 800d16e:	dad4      	bge.n	800d11a <pow+0xd2>
 800d170:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d174:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d178:	ed8d 7b00 	vstr	d7, [sp]
 800d17c:	ed9d 0b00 	vldr	d0, [sp]
 800d180:	e7cb      	b.n	800d11a <pow+0xd2>
 800d182:	2c00      	cmp	r4, #0
 800d184:	da2c      	bge.n	800d1e0 <pow+0x198>
 800d186:	4639      	mov	r1, r7
 800d188:	f7ff ff2a 	bl	800cfe0 <checkint>
 800d18c:	b930      	cbnz	r0, 800d19c <pow+0x154>
 800d18e:	b006      	add	sp, #24
 800d190:	ecbd 8b0a 	vpop	{d8-d12}
 800d194:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d198:	f001 b83a 	b.w	800e210 <__math_invalid>
 800d19c:	2801      	cmp	r0, #1
 800d19e:	bf14      	ite	ne
 800d1a0:	2000      	movne	r0, #0
 800d1a2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800d1a6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d1aa:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800d1ae:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800d1b2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800d1b6:	2b7f      	cmp	r3, #127	; 0x7f
 800d1b8:	d92d      	bls.n	800d216 <pow+0x1ce>
 800d1ba:	4b67      	ldr	r3, [pc, #412]	; (800d358 <pow+0x310>)
 800d1bc:	2000      	movs	r0, #0
 800d1be:	429c      	cmp	r4, r3
 800d1c0:	bf08      	it	eq
 800d1c2:	4286      	cmpeq	r6, r0
 800d1c4:	f43f af7d 	beq.w	800d0c2 <pow+0x7a>
 800d1c8:	f240 31bd 	movw	r1, #957	; 0x3bd
 800d1cc:	428a      	cmp	r2, r1
 800d1ce:	d80c      	bhi.n	800d1ea <pow+0x1a2>
 800d1d0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d1d4:	42b0      	cmp	r0, r6
 800d1d6:	41a3      	sbcs	r3, r4
 800d1d8:	d204      	bcs.n	800d1e4 <pow+0x19c>
 800d1da:	ee31 0b00 	vadd.f64	d0, d1, d0
 800d1de:	e79c      	b.n	800d11a <pow+0xd2>
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	e7e4      	b.n	800d1ae <pow+0x166>
 800d1e4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d1e8:	e797      	b.n	800d11a <pow+0xd2>
 800d1ea:	2e01      	cmp	r6, #1
 800d1ec:	eb74 0303 	sbcs.w	r3, r4, r3
 800d1f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d1f4:	bf34      	ite	cc
 800d1f6:	2301      	movcc	r3, #1
 800d1f8:	2300      	movcs	r3, #0
 800d1fa:	4295      	cmp	r5, r2
 800d1fc:	bf8c      	ite	hi
 800d1fe:	2500      	movhi	r5, #0
 800d200:	2501      	movls	r5, #1
 800d202:	42ab      	cmp	r3, r5
 800d204:	f000 809d 	beq.w	800d342 <pow+0x2fa>
 800d208:	b006      	add	sp, #24
 800d20a:	ecbd 8b0a 	vpop	{d8-d12}
 800d20e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d212:	f000 bfdd 	b.w	800e1d0 <__math_oflow>
 800d216:	f1bc 0f00 	cmp.w	ip, #0
 800d21a:	d10b      	bne.n	800d234 <pow+0x1ec>
 800d21c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800d350 <pow+0x308>
 800d220:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d224:	ec53 2b17 	vmov	r2, r3, d7
 800d228:	ee17 6a10 	vmov	r6, s14
 800d22c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d230:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800d234:	4b4c      	ldr	r3, [pc, #304]	; (800d368 <pow+0x320>)
 800d236:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d23a:	4423      	add	r3, r4
 800d23c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800d240:	1519      	asrs	r1, r3, #20
 800d242:	0d1b      	lsrs	r3, r3, #20
 800d244:	051b      	lsls	r3, r3, #20
 800d246:	eba4 0903 	sub.w	r9, r4, r3
 800d24a:	4b48      	ldr	r3, [pc, #288]	; (800d36c <pow+0x324>)
 800d24c:	ee04 1a10 	vmov	s8, r1
 800d250:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800d254:	f1b6 0800 	subs.w	r8, r6, #0
 800d258:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800d25c:	ec49 8b15 	vmov	d5, r8, r9
 800d260:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800d264:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d268:	ed93 7b00 	vldr	d7, [r3]
 800d26c:	ed93 5b02 	vldr	d5, [r3, #8]
 800d270:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800d274:	eea4 2b07 	vfma.f64	d2, d4, d7
 800d278:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800d27c:	ee36 ab02 	vadd.f64	d10, d6, d2
 800d280:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800d284:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d288:	ed93 5b04 	vldr	d5, [r3, #16]
 800d28c:	ee32 2b06 	vadd.f64	d2, d2, d6
 800d290:	ee37 7b02 	vadd.f64	d7, d7, d2
 800d294:	ee26 5b05 	vmul.f64	d5, d6, d5
 800d298:	ed93 4b08 	vldr	d4, [r3, #32]
 800d29c:	ee26 0b05 	vmul.f64	d0, d6, d5
 800d2a0:	eeb0 9b40 	vmov.f64	d9, d0
 800d2a4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800d2a8:	ed93 5b06 	vldr	d5, [r3, #24]
 800d2ac:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800d2b0:	ee26 bb00 	vmul.f64	d11, d6, d0
 800d2b4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800d2b8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d2bc:	ee3a ab48 	vsub.f64	d10, d10, d8
 800d2c0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800d2c4:	ee37 9b09 	vadd.f64	d9, d7, d9
 800d2c8:	ee3a ab00 	vadd.f64	d10, d10, d0
 800d2cc:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d2d0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800d2d4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800d2d8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800d2dc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800d2e0:	eea0 4b03 	vfma.f64	d4, d0, d3
 800d2e4:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d2e8:	eeab ab05 	vfma.f64	d10, d11, d5
 800d2ec:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800d2f0:	ee21 7b06 	vmul.f64	d7, d1, d6
 800d2f4:	ee17 3a90 	vmov	r3, s15
 800d2f8:	eeb0 5b47 	vmov.f64	d5, d7
 800d2fc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800d300:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800d304:	18b2      	adds	r2, r6, r2
 800d306:	2a3e      	cmp	r2, #62	; 0x3e
 800d308:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800d30c:	ee38 8b46 	vsub.f64	d8, d8, d6
 800d310:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800d314:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800d318:	d92b      	bls.n	800d372 <pow+0x32a>
 800d31a:	2a00      	cmp	r2, #0
 800d31c:	da0b      	bge.n	800d336 <pow+0x2ee>
 800d31e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d322:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d326:	2800      	cmp	r0, #0
 800d328:	f43f aef7 	beq.w	800d11a <pow+0xd2>
 800d32c:	eeb1 0b40 	vneg.f64	d0, d0
 800d330:	e6f3      	b.n	800d11a <pow+0xd2>
 800d332:	2000      	movs	r0, #0
 800d334:	e77e      	b.n	800d234 <pow+0x1ec>
 800d336:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800d33a:	d919      	bls.n	800d370 <pow+0x328>
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f6bf af63 	bge.w	800d208 <pow+0x1c0>
 800d342:	b006      	add	sp, #24
 800d344:	ecbd 8b0a 	vpop	{d8-d12}
 800d348:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d34c:	f000 bf38 	b.w	800e1c0 <__math_uflow>
 800d350:	00000000 	.word	0x00000000
 800d354:	43300000 	.word	0x43300000
 800d358:	3ff00000 	.word	0x3ff00000
 800d35c:	fff00000 	.word	0xfff00000
 800d360:	ffe00000 	.word	0xffe00000
 800d364:	7fe00000 	.word	0x7fe00000
 800d368:	c0196aab 	.word	0xc0196aab
 800d36c:	0800e538 	.word	0x0800e538
 800d370:	2600      	movs	r6, #0
 800d372:	495d      	ldr	r1, [pc, #372]	; (800d4e8 <pow+0x4a0>)
 800d374:	ed91 4b02 	vldr	d4, [r1, #8]
 800d378:	ed91 3b00 	vldr	d3, [r1]
 800d37c:	eeb0 6b44 	vmov.f64	d6, d4
 800d380:	eea7 6b03 	vfma.f64	d6, d7, d3
 800d384:	ee16 5a10 	vmov	r5, s12
 800d388:	ee36 6b44 	vsub.f64	d6, d6, d4
 800d38c:	ed91 4b04 	vldr	d4, [r1, #16]
 800d390:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800d394:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d398:	eeb0 0b47 	vmov.f64	d0, d7
 800d39c:	ed91 7b06 	vldr	d7, [r1, #24]
 800d3a0:	18dc      	adds	r4, r3, r3
 800d3a2:	f104 030f 	add.w	r3, r4, #15
 800d3a6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d3aa:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d3ae:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800d3b2:	ee35 0b00 	vadd.f64	d0, d5, d0
 800d3b6:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d3ba:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800d3be:	ed91 5b08 	vldr	d5, [r1, #32]
 800d3c2:	ee30 7b07 	vadd.f64	d7, d0, d7
 800d3c6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d3ca:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d3ce:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800d3d2:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d3d6:	ee26 6b06 	vmul.f64	d6, d6, d6
 800d3da:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800d3de:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800d3e2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d3e6:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d3ea:	1940      	adds	r0, r0, r5
 800d3ec:	2700      	movs	r7, #0
 800d3ee:	eb17 020c 	adds.w	r2, r7, ip
 800d3f2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800d3f6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d3fa:	2e00      	cmp	r6, #0
 800d3fc:	d15f      	bne.n	800d4be <pow+0x476>
 800d3fe:	42bd      	cmp	r5, r7
 800d400:	db13      	blt.n	800d42a <pow+0x3e2>
 800d402:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800d406:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800d40a:	4610      	mov	r0, r2
 800d40c:	ec41 0b10 	vmov	d0, r0, r1
 800d410:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d414:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d4d0 <pow+0x488>
 800d418:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d41c:	b006      	add	sp, #24
 800d41e:	ecbd 8b0a 	vpop	{d8-d12}
 800d422:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d426:	f000 bf0b 	b.w	800e240 <__math_check_oflow>
 800d42a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d42e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800d432:	4610      	mov	r0, r2
 800d434:	ec41 0b15 	vmov	d5, r0, r1
 800d438:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d43c:	ee27 6b05 	vmul.f64	d6, d7, d5
 800d440:	ee35 7b06 	vadd.f64	d7, d5, d6
 800d444:	eeb0 3bc7 	vabs.f64	d3, d7
 800d448:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800d44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d450:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d4d8 <pow+0x490>
 800d454:	d52a      	bpl.n	800d4ac <pow+0x464>
 800d456:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d45a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d462:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800d466:	ee35 6b06 	vadd.f64	d6, d5, d6
 800d46a:	bf48      	it	mi
 800d46c:	eeb0 4b43 	vmovmi.f64	d4, d3
 800d470:	ee37 3b04 	vadd.f64	d3, d7, d4
 800d474:	ee34 5b43 	vsub.f64	d5, d4, d3
 800d478:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d47c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d480:	ee37 7b03 	vadd.f64	d7, d7, d3
 800d484:	ee37 7b44 	vsub.f64	d7, d7, d4
 800d488:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d490:	d104      	bne.n	800d49c <pow+0x454>
 800d492:	4632      	mov	r2, r6
 800d494:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d498:	ec43 2b17 	vmov	d7, r2, r3
 800d49c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d4a0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d4a4:	ee26 6b00 	vmul.f64	d6, d6, d0
 800d4a8:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d4ac:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d4b0:	b006      	add	sp, #24
 800d4b2:	ecbd 8b0a 	vpop	{d8-d12}
 800d4b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ba:	f000 beb8 	b.w	800e22e <__math_check_uflow>
 800d4be:	ec43 2b10 	vmov	d0, r2, r3
 800d4c2:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d4c6:	e628      	b.n	800d11a <pow+0xd2>
 800d4c8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d4e0 <pow+0x498>
 800d4cc:	e625      	b.n	800d11a <pow+0xd2>
 800d4ce:	bf00      	nop
 800d4d0:	00000000 	.word	0x00000000
 800d4d4:	7f000000 	.word	0x7f000000
 800d4d8:	00000000 	.word	0x00000000
 800d4dc:	00100000 	.word	0x00100000
	...
 800d4e8:	0800f708 	.word	0x0800f708
 800d4ec:	00000000 	.word	0x00000000

0800d4f0 <sin>:
 800d4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4f2:	eeb0 7b40 	vmov.f64	d7, d0
 800d4f6:	ee17 3a90 	vmov	r3, s15
 800d4fa:	4a21      	ldr	r2, [pc, #132]	; (800d580 <sin+0x90>)
 800d4fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d500:	4293      	cmp	r3, r2
 800d502:	dc07      	bgt.n	800d514 <sin+0x24>
 800d504:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800d578 <sin+0x88>
 800d508:	2000      	movs	r0, #0
 800d50a:	b005      	add	sp, #20
 800d50c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d510:	f000 bde2 	b.w	800e0d8 <__kernel_sin>
 800d514:	4a1b      	ldr	r2, [pc, #108]	; (800d584 <sin+0x94>)
 800d516:	4293      	cmp	r3, r2
 800d518:	dd04      	ble.n	800d524 <sin+0x34>
 800d51a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d51e:	b005      	add	sp, #20
 800d520:	f85d fb04 	ldr.w	pc, [sp], #4
 800d524:	4668      	mov	r0, sp
 800d526:	f000 f98b 	bl	800d840 <__ieee754_rem_pio2>
 800d52a:	f000 0003 	and.w	r0, r0, #3
 800d52e:	2801      	cmp	r0, #1
 800d530:	d00a      	beq.n	800d548 <sin+0x58>
 800d532:	2802      	cmp	r0, #2
 800d534:	d00f      	beq.n	800d556 <sin+0x66>
 800d536:	b9c0      	cbnz	r0, 800d56a <sin+0x7a>
 800d538:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d53c:	ed9d 0b00 	vldr	d0, [sp]
 800d540:	2001      	movs	r0, #1
 800d542:	f000 fdc9 	bl	800e0d8 <__kernel_sin>
 800d546:	e7ea      	b.n	800d51e <sin+0x2e>
 800d548:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d54c:	ed9d 0b00 	vldr	d0, [sp]
 800d550:	f000 fabe 	bl	800dad0 <__kernel_cos>
 800d554:	e7e3      	b.n	800d51e <sin+0x2e>
 800d556:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d55a:	ed9d 0b00 	vldr	d0, [sp]
 800d55e:	2001      	movs	r0, #1
 800d560:	f000 fdba 	bl	800e0d8 <__kernel_sin>
 800d564:	eeb1 0b40 	vneg.f64	d0, d0
 800d568:	e7d9      	b.n	800d51e <sin+0x2e>
 800d56a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d56e:	ed9d 0b00 	vldr	d0, [sp]
 800d572:	f000 faad 	bl	800dad0 <__kernel_cos>
 800d576:	e7f5      	b.n	800d564 <sin+0x74>
	...
 800d580:	3fe921fb 	.word	0x3fe921fb
 800d584:	7fefffff 	.word	0x7fefffff

0800d588 <asin>:
 800d588:	b508      	push	{r3, lr}
 800d58a:	ed2d 8b04 	vpush	{d8-d9}
 800d58e:	eeb0 8b40 	vmov.f64	d8, d0
 800d592:	f000 f845 	bl	800d620 <__ieee754_asin>
 800d596:	eeb4 8b48 	vcmp.f64	d8, d8
 800d59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d59e:	eeb0 9b40 	vmov.f64	d9, d0
 800d5a2:	d615      	bvs.n	800d5d0 <asin+0x48>
 800d5a4:	eeb0 0b48 	vmov.f64	d0, d8
 800d5a8:	f000 fe5e 	bl	800e268 <fabs>
 800d5ac:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d5b0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b8:	dd0a      	ble.n	800d5d0 <asin+0x48>
 800d5ba:	f7ff f871 	bl	800c6a0 <__errno>
 800d5be:	ecbd 8b04 	vpop	{d8-d9}
 800d5c2:	2321      	movs	r3, #33	; 0x21
 800d5c4:	6003      	str	r3, [r0, #0]
 800d5c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d5ca:	4804      	ldr	r0, [pc, #16]	; (800d5dc <asin+0x54>)
 800d5cc:	f000 becc 	b.w	800e368 <nan>
 800d5d0:	eeb0 0b49 	vmov.f64	d0, d9
 800d5d4:	ecbd 8b04 	vpop	{d8-d9}
 800d5d8:	bd08      	pop	{r3, pc}
 800d5da:	bf00      	nop
 800d5dc:	0800e505 	.word	0x0800e505

0800d5e0 <sqrt>:
 800d5e0:	b508      	push	{r3, lr}
 800d5e2:	ed2d 8b04 	vpush	{d8-d9}
 800d5e6:	eeb0 8b40 	vmov.f64	d8, d0
 800d5ea:	f000 fa6d 	bl	800dac8 <__ieee754_sqrt>
 800d5ee:	eeb4 8b48 	vcmp.f64	d8, d8
 800d5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f6:	d60c      	bvs.n	800d612 <sqrt+0x32>
 800d5f8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800d618 <sqrt+0x38>
 800d5fc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d604:	d505      	bpl.n	800d612 <sqrt+0x32>
 800d606:	f7ff f84b 	bl	800c6a0 <__errno>
 800d60a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d60e:	2321      	movs	r3, #33	; 0x21
 800d610:	6003      	str	r3, [r0, #0]
 800d612:	ecbd 8b04 	vpop	{d8-d9}
 800d616:	bd08      	pop	{r3, pc}
	...

0800d620 <__ieee754_asin>:
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	ee10 5a90 	vmov	r5, s1
 800d626:	4b82      	ldr	r3, [pc, #520]	; (800d830 <__ieee754_asin+0x210>)
 800d628:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d62c:	429c      	cmp	r4, r3
 800d62e:	ed2d 8b06 	vpush	{d8-d10}
 800d632:	dd19      	ble.n	800d668 <__ieee754_asin+0x48>
 800d634:	ee10 3a10 	vmov	r3, s0
 800d638:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d63c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d640:	4323      	orrs	r3, r4
 800d642:	d10c      	bne.n	800d65e <__ieee754_asin+0x3e>
 800d644:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 800d7b8 <__ieee754_asin+0x198>
 800d648:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 800d7c0 <__ieee754_asin+0x1a0>
 800d64c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d650:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d654:	eeb0 0b47 	vmov.f64	d0, d7
 800d658:	ecbd 8b06 	vpop	{d8-d10}
 800d65c:	bd38      	pop	{r3, r4, r5, pc}
 800d65e:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d662:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800d666:	e7f7      	b.n	800d658 <__ieee754_asin+0x38>
 800d668:	4b72      	ldr	r3, [pc, #456]	; (800d834 <__ieee754_asin+0x214>)
 800d66a:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800d66e:	429c      	cmp	r4, r3
 800d670:	dc0b      	bgt.n	800d68a <__ieee754_asin+0x6a>
 800d672:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800d676:	da52      	bge.n	800d71e <__ieee754_asin+0xfe>
 800d678:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800d7c8 <__ieee754_asin+0x1a8>
 800d67c:	ee30 7b07 	vadd.f64	d7, d0, d7
 800d680:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800d684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d688:	dce6      	bgt.n	800d658 <__ieee754_asin+0x38>
 800d68a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800d68e:	f000 fdeb 	bl	800e268 <fabs>
 800d692:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800d7d0 <__ieee754_asin+0x1b0>
 800d696:	ee39 0b40 	vsub.f64	d0, d9, d0
 800d69a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d69e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800d7d8 <__ieee754_asin+0x1b8>
 800d6a2:	eeb0 0b48 	vmov.f64	d0, d8
 800d6a6:	eea8 6b07 	vfma.f64	d6, d8, d7
 800d6aa:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800d7e0 <__ieee754_asin+0x1c0>
 800d6ae:	eea6 7b08 	vfma.f64	d7, d6, d8
 800d6b2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800d7e8 <__ieee754_asin+0x1c8>
 800d6b6:	ed9f ab4e 	vldr	d10, [pc, #312]	; 800d7f0 <__ieee754_asin+0x1d0>
 800d6ba:	eea7 6b08 	vfma.f64	d6, d7, d8
 800d6be:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800d7f8 <__ieee754_asin+0x1d8>
 800d6c2:	eea6 7b08 	vfma.f64	d7, d6, d8
 800d6c6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800d800 <__ieee754_asin+0x1e0>
 800d6ca:	eea7 ab08 	vfma.f64	d10, d7, d8
 800d6ce:	ee2a ab08 	vmul.f64	d10, d10, d8
 800d6d2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800d808 <__ieee754_asin+0x1e8>
 800d6d6:	eea8 7b06 	vfma.f64	d7, d8, d6
 800d6da:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800d810 <__ieee754_asin+0x1f0>
 800d6de:	eea7 6b08 	vfma.f64	d6, d7, d8
 800d6e2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800d818 <__ieee754_asin+0x1f8>
 800d6e6:	eea6 7b08 	vfma.f64	d7, d6, d8
 800d6ea:	eea7 9b08 	vfma.f64	d9, d7, d8
 800d6ee:	f000 f9eb 	bl	800dac8 <__ieee754_sqrt>
 800d6f2:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 800d6f6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800d6fa:	4b4f      	ldr	r3, [pc, #316]	; (800d838 <__ieee754_asin+0x218>)
 800d6fc:	429c      	cmp	r4, r3
 800d6fe:	dd3d      	ble.n	800d77c <__ieee754_asin+0x15c>
 800d700:	eea0 0b05 	vfma.f64	d0, d0, d5
 800d704:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800d820 <__ieee754_asin+0x200>
 800d708:	eea0 7b04 	vfma.f64	d7, d0, d4
 800d70c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 800d7c0 <__ieee754_asin+0x1a0>
 800d710:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d714:	2d00      	cmp	r5, #0
 800d716:	bfd8      	it	le
 800d718:	eeb1 0b40 	vnegle.f64	d0, d0
 800d71c:	e79c      	b.n	800d658 <__ieee754_asin+0x38>
 800d71e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d7d0 <__ieee754_asin+0x1b0>
 800d722:	ee20 7b00 	vmul.f64	d7, d0, d0
 800d726:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800d7d8 <__ieee754_asin+0x1b8>
 800d72a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d72e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d7e0 <__ieee754_asin+0x1c0>
 800d732:	eea6 5b07 	vfma.f64	d5, d6, d7
 800d736:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800d7e8 <__ieee754_asin+0x1c8>
 800d73a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d73e:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 800d7f8 <__ieee754_asin+0x1d8>
 800d742:	eea6 5b07 	vfma.f64	d5, d6, d7
 800d746:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800d7f0 <__ieee754_asin+0x1d0>
 800d74a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 800d800 <__ieee754_asin+0x1e0>
 800d74e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d752:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d756:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d808 <__ieee754_asin+0x1e8>
 800d75a:	eea7 5b04 	vfma.f64	d5, d7, d4
 800d75e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 800d810 <__ieee754_asin+0x1f0>
 800d762:	eea5 4b07 	vfma.f64	d4, d5, d7
 800d766:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d818 <__ieee754_asin+0x1f8>
 800d76a:	eea4 5b07 	vfma.f64	d5, d4, d7
 800d76e:	eea5 9b07 	vfma.f64	d9, d5, d7
 800d772:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800d776:	eea0 0b07 	vfma.f64	d0, d0, d7
 800d77a:	e76d      	b.n	800d658 <__ieee754_asin+0x38>
 800d77c:	ec53 2b10 	vmov	r2, r3, d0
 800d780:	2200      	movs	r2, #0
 800d782:	ec43 2b16 	vmov	d6, r2, r3
 800d786:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d78a:	eea6 8b46 	vfms.f64	d8, d6, d6
 800d78e:	ee88 3b07 	vdiv.f64	d3, d8, d7
 800d792:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800d7b8 <__ieee754_asin+0x198>
 800d796:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d79a:	eea3 7b44 	vfms.f64	d7, d3, d4
 800d79e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 800d7a2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800d828 <__ieee754_asin+0x208>
 800d7a6:	eeb0 0b45 	vmov.f64	d0, d5
 800d7aa:	eea6 0b44 	vfms.f64	d0, d6, d4
 800d7ae:	ee37 0b40 	vsub.f64	d0, d7, d0
 800d7b2:	ee35 0b40 	vsub.f64	d0, d5, d0
 800d7b6:	e7ad      	b.n	800d714 <__ieee754_asin+0xf4>
 800d7b8:	33145c07 	.word	0x33145c07
 800d7bc:	3c91a626 	.word	0x3c91a626
 800d7c0:	54442d18 	.word	0x54442d18
 800d7c4:	3ff921fb 	.word	0x3ff921fb
 800d7c8:	8800759c 	.word	0x8800759c
 800d7cc:	7e37e43c 	.word	0x7e37e43c
 800d7d0:	0dfdf709 	.word	0x0dfdf709
 800d7d4:	3f023de1 	.word	0x3f023de1
 800d7d8:	7501b288 	.word	0x7501b288
 800d7dc:	3f49efe0 	.word	0x3f49efe0
 800d7e0:	b5688f3b 	.word	0xb5688f3b
 800d7e4:	bfa48228 	.word	0xbfa48228
 800d7e8:	0e884455 	.word	0x0e884455
 800d7ec:	3fc9c155 	.word	0x3fc9c155
 800d7f0:	55555555 	.word	0x55555555
 800d7f4:	3fc55555 	.word	0x3fc55555
 800d7f8:	03eb6f7d 	.word	0x03eb6f7d
 800d7fc:	bfd4d612 	.word	0xbfd4d612
 800d800:	b12e9282 	.word	0xb12e9282
 800d804:	3fb3b8c5 	.word	0x3fb3b8c5
 800d808:	1b8d0159 	.word	0x1b8d0159
 800d80c:	bfe6066c 	.word	0xbfe6066c
 800d810:	9c598ac8 	.word	0x9c598ac8
 800d814:	40002ae5 	.word	0x40002ae5
 800d818:	1c8a2d4b 	.word	0x1c8a2d4b
 800d81c:	c0033a27 	.word	0xc0033a27
 800d820:	33145c07 	.word	0x33145c07
 800d824:	bc91a626 	.word	0xbc91a626
 800d828:	54442d18 	.word	0x54442d18
 800d82c:	3fe921fb 	.word	0x3fe921fb
 800d830:	3fefffff 	.word	0x3fefffff
 800d834:	3fdfffff 	.word	0x3fdfffff
 800d838:	3fef3332 	.word	0x3fef3332
 800d83c:	00000000 	.word	0x00000000

0800d840 <__ieee754_rem_pio2>:
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	eeb0 7b40 	vmov.f64	d7, d0
 800d846:	ee17 5a90 	vmov	r5, s15
 800d84a:	4b99      	ldr	r3, [pc, #612]	; (800dab0 <__ieee754_rem_pio2+0x270>)
 800d84c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d850:	429e      	cmp	r6, r3
 800d852:	b088      	sub	sp, #32
 800d854:	4604      	mov	r4, r0
 800d856:	dc07      	bgt.n	800d868 <__ieee754_rem_pio2+0x28>
 800d858:	2200      	movs	r2, #0
 800d85a:	2300      	movs	r3, #0
 800d85c:	ed84 0b00 	vstr	d0, [r4]
 800d860:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d864:	2000      	movs	r0, #0
 800d866:	e01b      	b.n	800d8a0 <__ieee754_rem_pio2+0x60>
 800d868:	4b92      	ldr	r3, [pc, #584]	; (800dab4 <__ieee754_rem_pio2+0x274>)
 800d86a:	429e      	cmp	r6, r3
 800d86c:	dc3b      	bgt.n	800d8e6 <__ieee754_rem_pio2+0xa6>
 800d86e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d872:	2d00      	cmp	r5, #0
 800d874:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800da70 <__ieee754_rem_pio2+0x230>
 800d878:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d87c:	dd19      	ble.n	800d8b2 <__ieee754_rem_pio2+0x72>
 800d87e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d882:	429e      	cmp	r6, r3
 800d884:	d00e      	beq.n	800d8a4 <__ieee754_rem_pio2+0x64>
 800d886:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800da78 <__ieee754_rem_pio2+0x238>
 800d88a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d88e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d892:	ed84 5b00 	vstr	d5, [r4]
 800d896:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d89a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d89e:	2001      	movs	r0, #1
 800d8a0:	b008      	add	sp, #32
 800d8a2:	bd70      	pop	{r4, r5, r6, pc}
 800d8a4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800da80 <__ieee754_rem_pio2+0x240>
 800d8a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d8ac:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800da88 <__ieee754_rem_pio2+0x248>
 800d8b0:	e7eb      	b.n	800d88a <__ieee754_rem_pio2+0x4a>
 800d8b2:	429e      	cmp	r6, r3
 800d8b4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d8b8:	d00e      	beq.n	800d8d8 <__ieee754_rem_pio2+0x98>
 800d8ba:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800da78 <__ieee754_rem_pio2+0x238>
 800d8be:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d8c2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d8c6:	ed84 5b00 	vstr	d5, [r4]
 800d8ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d8ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8d2:	ed84 7b02 	vstr	d7, [r4, #8]
 800d8d6:	e7e3      	b.n	800d8a0 <__ieee754_rem_pio2+0x60>
 800d8d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800da80 <__ieee754_rem_pio2+0x240>
 800d8dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d8e0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800da88 <__ieee754_rem_pio2+0x248>
 800d8e4:	e7eb      	b.n	800d8be <__ieee754_rem_pio2+0x7e>
 800d8e6:	4b74      	ldr	r3, [pc, #464]	; (800dab8 <__ieee754_rem_pio2+0x278>)
 800d8e8:	429e      	cmp	r6, r3
 800d8ea:	dc70      	bgt.n	800d9ce <__ieee754_rem_pio2+0x18e>
 800d8ec:	f000 fcbc 	bl	800e268 <fabs>
 800d8f0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d8f4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800da90 <__ieee754_rem_pio2+0x250>
 800d8f8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d8fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d900:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d904:	ee17 0a90 	vmov	r0, s15
 800d908:	eeb1 4b45 	vneg.f64	d4, d5
 800d90c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800da70 <__ieee754_rem_pio2+0x230>
 800d910:	eea5 0b47 	vfms.f64	d0, d5, d7
 800d914:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800da78 <__ieee754_rem_pio2+0x238>
 800d918:	281f      	cmp	r0, #31
 800d91a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d91e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d922:	dc08      	bgt.n	800d936 <__ieee754_rem_pio2+0xf6>
 800d924:	4b65      	ldr	r3, [pc, #404]	; (800dabc <__ieee754_rem_pio2+0x27c>)
 800d926:	1e42      	subs	r2, r0, #1
 800d928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d92c:	42b3      	cmp	r3, r6
 800d92e:	d002      	beq.n	800d936 <__ieee754_rem_pio2+0xf6>
 800d930:	ed84 6b00 	vstr	d6, [r4]
 800d934:	e026      	b.n	800d984 <__ieee754_rem_pio2+0x144>
 800d936:	ee16 3a90 	vmov	r3, s13
 800d93a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d93e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800d942:	2b10      	cmp	r3, #16
 800d944:	ea4f 5226 	mov.w	r2, r6, asr #20
 800d948:	ddf2      	ble.n	800d930 <__ieee754_rem_pio2+0xf0>
 800d94a:	eeb0 6b40 	vmov.f64	d6, d0
 800d94e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800da80 <__ieee754_rem_pio2+0x240>
 800d952:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800da88 <__ieee754_rem_pio2+0x248>
 800d956:	eea4 6b07 	vfma.f64	d6, d4, d7
 800d95a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d95e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800d962:	eeb0 7b40 	vmov.f64	d7, d0
 800d966:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800d96a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d96e:	ee13 3a90 	vmov	r3, s7
 800d972:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	2b31      	cmp	r3, #49	; 0x31
 800d97a:	dc17      	bgt.n	800d9ac <__ieee754_rem_pio2+0x16c>
 800d97c:	eeb0 0b46 	vmov.f64	d0, d6
 800d980:	ed84 3b00 	vstr	d3, [r4]
 800d984:	ed94 6b00 	vldr	d6, [r4]
 800d988:	2d00      	cmp	r5, #0
 800d98a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d98e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d992:	ed84 0b02 	vstr	d0, [r4, #8]
 800d996:	da83      	bge.n	800d8a0 <__ieee754_rem_pio2+0x60>
 800d998:	eeb1 6b46 	vneg.f64	d6, d6
 800d99c:	eeb1 0b40 	vneg.f64	d0, d0
 800d9a0:	ed84 6b00 	vstr	d6, [r4]
 800d9a4:	ed84 0b02 	vstr	d0, [r4, #8]
 800d9a8:	4240      	negs	r0, r0
 800d9aa:	e779      	b.n	800d8a0 <__ieee754_rem_pio2+0x60>
 800d9ac:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800da98 <__ieee754_rem_pio2+0x258>
 800d9b0:	eeb0 0b46 	vmov.f64	d0, d6
 800d9b4:	eea4 0b03 	vfma.f64	d0, d4, d3
 800d9b8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d9bc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800daa0 <__ieee754_rem_pio2+0x260>
 800d9c0:	eea4 7b03 	vfma.f64	d7, d4, d3
 800d9c4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800d9c8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d9cc:	e7b0      	b.n	800d930 <__ieee754_rem_pio2+0xf0>
 800d9ce:	4b3c      	ldr	r3, [pc, #240]	; (800dac0 <__ieee754_rem_pio2+0x280>)
 800d9d0:	429e      	cmp	r6, r3
 800d9d2:	dd06      	ble.n	800d9e2 <__ieee754_rem_pio2+0x1a2>
 800d9d4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d9d8:	ed80 7b02 	vstr	d7, [r0, #8]
 800d9dc:	ed80 7b00 	vstr	d7, [r0]
 800d9e0:	e740      	b.n	800d864 <__ieee754_rem_pio2+0x24>
 800d9e2:	1532      	asrs	r2, r6, #20
 800d9e4:	ee10 0a10 	vmov	r0, s0
 800d9e8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d9ec:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d9f0:	ec41 0b17 	vmov	d7, r0, r1
 800d9f4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d9f8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800daa8 <__ieee754_rem_pio2+0x268>
 800d9fc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800da00:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da04:	ed8d 6b02 	vstr	d6, [sp, #8]
 800da08:	ee27 7b05 	vmul.f64	d7, d7, d5
 800da0c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800da10:	a902      	add	r1, sp, #8
 800da12:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800da16:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da1a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800da1e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800da22:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da26:	2603      	movs	r6, #3
 800da28:	4608      	mov	r0, r1
 800da2a:	ed91 7b04 	vldr	d7, [r1, #16]
 800da2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da36:	4633      	mov	r3, r6
 800da38:	f1a1 0108 	sub.w	r1, r1, #8
 800da3c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800da40:	d0f3      	beq.n	800da2a <__ieee754_rem_pio2+0x1ea>
 800da42:	4920      	ldr	r1, [pc, #128]	; (800dac4 <__ieee754_rem_pio2+0x284>)
 800da44:	9101      	str	r1, [sp, #4]
 800da46:	2102      	movs	r1, #2
 800da48:	9100      	str	r1, [sp, #0]
 800da4a:	4621      	mov	r1, r4
 800da4c:	f000 f8ac 	bl	800dba8 <__kernel_rem_pio2>
 800da50:	2d00      	cmp	r5, #0
 800da52:	f6bf af25 	bge.w	800d8a0 <__ieee754_rem_pio2+0x60>
 800da56:	ed94 7b00 	vldr	d7, [r4]
 800da5a:	eeb1 7b47 	vneg.f64	d7, d7
 800da5e:	ed84 7b00 	vstr	d7, [r4]
 800da62:	ed94 7b02 	vldr	d7, [r4, #8]
 800da66:	eeb1 7b47 	vneg.f64	d7, d7
 800da6a:	ed84 7b02 	vstr	d7, [r4, #8]
 800da6e:	e79b      	b.n	800d9a8 <__ieee754_rem_pio2+0x168>
 800da70:	54400000 	.word	0x54400000
 800da74:	3ff921fb 	.word	0x3ff921fb
 800da78:	1a626331 	.word	0x1a626331
 800da7c:	3dd0b461 	.word	0x3dd0b461
 800da80:	1a600000 	.word	0x1a600000
 800da84:	3dd0b461 	.word	0x3dd0b461
 800da88:	2e037073 	.word	0x2e037073
 800da8c:	3ba3198a 	.word	0x3ba3198a
 800da90:	6dc9c883 	.word	0x6dc9c883
 800da94:	3fe45f30 	.word	0x3fe45f30
 800da98:	2e000000 	.word	0x2e000000
 800da9c:	3ba3198a 	.word	0x3ba3198a
 800daa0:	252049c1 	.word	0x252049c1
 800daa4:	397b839a 	.word	0x397b839a
 800daa8:	00000000 	.word	0x00000000
 800daac:	41700000 	.word	0x41700000
 800dab0:	3fe921fb 	.word	0x3fe921fb
 800dab4:	4002d97b 	.word	0x4002d97b
 800dab8:	413921fb 	.word	0x413921fb
 800dabc:	0800f580 	.word	0x0800f580
 800dac0:	7fefffff 	.word	0x7fefffff
 800dac4:	0800f600 	.word	0x0800f600

0800dac8 <__ieee754_sqrt>:
 800dac8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800dacc:	4770      	bx	lr
	...

0800dad0 <__kernel_cos>:
 800dad0:	ee10 1a90 	vmov	r1, s1
 800dad4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800dad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dadc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800dae0:	da05      	bge.n	800daee <__kernel_cos+0x1e>
 800dae2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800dae6:	ee17 3a90 	vmov	r3, s15
 800daea:	2b00      	cmp	r3, #0
 800daec:	d03d      	beq.n	800db6a <__kernel_cos+0x9a>
 800daee:	ee20 3b00 	vmul.f64	d3, d0, d0
 800daf2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800db70 <__kernel_cos+0xa0>
 800daf6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800db78 <__kernel_cos+0xa8>
 800dafa:	eea3 6b07 	vfma.f64	d6, d3, d7
 800dafe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800db80 <__kernel_cos+0xb0>
 800db02:	eea6 7b03 	vfma.f64	d7, d6, d3
 800db06:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800db88 <__kernel_cos+0xb8>
 800db0a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800db0e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800db90 <__kernel_cos+0xc0>
 800db12:	4b23      	ldr	r3, [pc, #140]	; (800dba0 <__kernel_cos+0xd0>)
 800db14:	eea6 7b03 	vfma.f64	d7, d6, d3
 800db18:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800db98 <__kernel_cos+0xc8>
 800db1c:	4299      	cmp	r1, r3
 800db1e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800db22:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800db26:	ee26 5b03 	vmul.f64	d5, d6, d3
 800db2a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800db2e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800db32:	eea3 6b05 	vfma.f64	d6, d3, d5
 800db36:	dc04      	bgt.n	800db42 <__kernel_cos+0x72>
 800db38:	ee37 6b46 	vsub.f64	d6, d7, d6
 800db3c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800db40:	4770      	bx	lr
 800db42:	4b18      	ldr	r3, [pc, #96]	; (800dba4 <__kernel_cos+0xd4>)
 800db44:	4299      	cmp	r1, r3
 800db46:	dc0d      	bgt.n	800db64 <__kernel_cos+0x94>
 800db48:	2200      	movs	r2, #0
 800db4a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800db4e:	ec43 2b15 	vmov	d5, r2, r3
 800db52:	ee34 0b45 	vsub.f64	d0, d4, d5
 800db56:	ee37 7b45 	vsub.f64	d7, d7, d5
 800db5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800db5e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800db62:	4770      	bx	lr
 800db64:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800db68:	e7f3      	b.n	800db52 <__kernel_cos+0x82>
 800db6a:	eeb0 0b44 	vmov.f64	d0, d4
 800db6e:	4770      	bx	lr
 800db70:	be8838d4 	.word	0xbe8838d4
 800db74:	bda8fae9 	.word	0xbda8fae9
 800db78:	bdb4b1c4 	.word	0xbdb4b1c4
 800db7c:	3e21ee9e 	.word	0x3e21ee9e
 800db80:	809c52ad 	.word	0x809c52ad
 800db84:	be927e4f 	.word	0xbe927e4f
 800db88:	19cb1590 	.word	0x19cb1590
 800db8c:	3efa01a0 	.word	0x3efa01a0
 800db90:	16c15177 	.word	0x16c15177
 800db94:	bf56c16c 	.word	0xbf56c16c
 800db98:	5555554c 	.word	0x5555554c
 800db9c:	3fa55555 	.word	0x3fa55555
 800dba0:	3fd33332 	.word	0x3fd33332
 800dba4:	3fe90000 	.word	0x3fe90000

0800dba8 <__kernel_rem_pio2>:
 800dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbac:	ed2d 8b06 	vpush	{d8-d10}
 800dbb0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800dbb4:	460f      	mov	r7, r1
 800dbb6:	9002      	str	r0, [sp, #8]
 800dbb8:	49c5      	ldr	r1, [pc, #788]	; (800ded0 <__kernel_rem_pio2+0x328>)
 800dbba:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800dbbc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800dbc0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800dbc4:	9301      	str	r3, [sp, #4]
 800dbc6:	f112 0f14 	cmn.w	r2, #20
 800dbca:	bfa8      	it	ge
 800dbcc:	2018      	movge	r0, #24
 800dbce:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800dbd2:	bfb8      	it	lt
 800dbd4:	2000      	movlt	r0, #0
 800dbd6:	f06f 0417 	mvn.w	r4, #23
 800dbda:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800deb8 <__kernel_rem_pio2+0x310>
 800dbde:	bfa4      	itt	ge
 800dbe0:	f1a2 0a03 	subge.w	sl, r2, #3
 800dbe4:	fb9a f0f0 	sdivge	r0, sl, r0
 800dbe8:	fb00 4404 	mla	r4, r0, r4, r4
 800dbec:	1a46      	subs	r6, r0, r1
 800dbee:	4414      	add	r4, r2
 800dbf0:	eb09 0c01 	add.w	ip, r9, r1
 800dbf4:	ad1a      	add	r5, sp, #104	; 0x68
 800dbf6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	4562      	cmp	r2, ip
 800dbfe:	dd10      	ble.n	800dc22 <__kernel_rem_pio2+0x7a>
 800dc00:	9a01      	ldr	r2, [sp, #4]
 800dc02:	ab1a      	add	r3, sp, #104	; 0x68
 800dc04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800dc08:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800dc0c:	f04f 0c00 	mov.w	ip, #0
 800dc10:	45cc      	cmp	ip, r9
 800dc12:	dc26      	bgt.n	800dc62 <__kernel_rem_pio2+0xba>
 800dc14:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800deb8 <__kernel_rem_pio2+0x310>
 800dc18:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dc1c:	4616      	mov	r6, r2
 800dc1e:	2500      	movs	r5, #0
 800dc20:	e015      	b.n	800dc4e <__kernel_rem_pio2+0xa6>
 800dc22:	42d6      	cmn	r6, r2
 800dc24:	d409      	bmi.n	800dc3a <__kernel_rem_pio2+0x92>
 800dc26:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800dc2a:	ee07 3a90 	vmov	s15, r3
 800dc2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dc32:	eca5 7b02 	vstmia	r5!, {d7}
 800dc36:	3201      	adds	r2, #1
 800dc38:	e7e0      	b.n	800dbfc <__kernel_rem_pio2+0x54>
 800dc3a:	eeb0 7b46 	vmov.f64	d7, d6
 800dc3e:	e7f8      	b.n	800dc32 <__kernel_rem_pio2+0x8a>
 800dc40:	ecb8 5b02 	vldmia	r8!, {d5}
 800dc44:	ed96 6b00 	vldr	d6, [r6]
 800dc48:	3501      	adds	r5, #1
 800dc4a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dc4e:	428d      	cmp	r5, r1
 800dc50:	f1a6 0608 	sub.w	r6, r6, #8
 800dc54:	ddf4      	ble.n	800dc40 <__kernel_rem_pio2+0x98>
 800dc56:	ecaa 7b02 	vstmia	sl!, {d7}
 800dc5a:	f10c 0c01 	add.w	ip, ip, #1
 800dc5e:	3208      	adds	r2, #8
 800dc60:	e7d6      	b.n	800dc10 <__kernel_rem_pio2+0x68>
 800dc62:	ab06      	add	r3, sp, #24
 800dc64:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800dec0 <__kernel_rem_pio2+0x318>
 800dc68:	ed9f ab97 	vldr	d10, [pc, #604]	; 800dec8 <__kernel_rem_pio2+0x320>
 800dc6c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800dc70:	9303      	str	r3, [sp, #12]
 800dc72:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800dc76:	464d      	mov	r5, r9
 800dc78:	00eb      	lsls	r3, r5, #3
 800dc7a:	9304      	str	r3, [sp, #16]
 800dc7c:	ab92      	add	r3, sp, #584	; 0x248
 800dc7e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800dc82:	f10d 0b18 	add.w	fp, sp, #24
 800dc86:	ab6a      	add	r3, sp, #424	; 0x1a8
 800dc88:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800dc8c:	465e      	mov	r6, fp
 800dc8e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800dc92:	4628      	mov	r0, r5
 800dc94:	2800      	cmp	r0, #0
 800dc96:	f1a2 0208 	sub.w	r2, r2, #8
 800dc9a:	dc4c      	bgt.n	800dd36 <__kernel_rem_pio2+0x18e>
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	9105      	str	r1, [sp, #20]
 800dca0:	f000 fb6a 	bl	800e378 <scalbn>
 800dca4:	eeb0 8b40 	vmov.f64	d8, d0
 800dca8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800dcac:	ee28 0b00 	vmul.f64	d0, d8, d0
 800dcb0:	f000 fae6 	bl	800e280 <floor>
 800dcb4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800dcb8:	eea0 8b47 	vfms.f64	d8, d0, d7
 800dcbc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800dcc0:	2c00      	cmp	r4, #0
 800dcc2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800dcc6:	ee17 8a90 	vmov	r8, s15
 800dcca:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dcce:	9905      	ldr	r1, [sp, #20]
 800dcd0:	dd43      	ble.n	800dd5a <__kernel_rem_pio2+0x1b2>
 800dcd2:	1e68      	subs	r0, r5, #1
 800dcd4:	ab06      	add	r3, sp, #24
 800dcd6:	f1c4 0c18 	rsb	ip, r4, #24
 800dcda:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800dcde:	fa46 f20c 	asr.w	r2, r6, ip
 800dce2:	4490      	add	r8, r2
 800dce4:	fa02 f20c 	lsl.w	r2, r2, ip
 800dce8:	1ab6      	subs	r6, r6, r2
 800dcea:	f1c4 0217 	rsb	r2, r4, #23
 800dcee:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800dcf2:	4116      	asrs	r6, r2
 800dcf4:	2e00      	cmp	r6, #0
 800dcf6:	dd3f      	ble.n	800dd78 <__kernel_rem_pio2+0x1d0>
 800dcf8:	f04f 0c00 	mov.w	ip, #0
 800dcfc:	f108 0801 	add.w	r8, r8, #1
 800dd00:	4660      	mov	r0, ip
 800dd02:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800dd06:	4565      	cmp	r5, ip
 800dd08:	dc6e      	bgt.n	800dde8 <__kernel_rem_pio2+0x240>
 800dd0a:	2c00      	cmp	r4, #0
 800dd0c:	dd04      	ble.n	800dd18 <__kernel_rem_pio2+0x170>
 800dd0e:	2c01      	cmp	r4, #1
 800dd10:	d07f      	beq.n	800de12 <__kernel_rem_pio2+0x26a>
 800dd12:	2c02      	cmp	r4, #2
 800dd14:	f000 8087 	beq.w	800de26 <__kernel_rem_pio2+0x27e>
 800dd18:	2e02      	cmp	r6, #2
 800dd1a:	d12d      	bne.n	800dd78 <__kernel_rem_pio2+0x1d0>
 800dd1c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dd20:	ee30 8b48 	vsub.f64	d8, d0, d8
 800dd24:	b340      	cbz	r0, 800dd78 <__kernel_rem_pio2+0x1d0>
 800dd26:	4620      	mov	r0, r4
 800dd28:	9105      	str	r1, [sp, #20]
 800dd2a:	f000 fb25 	bl	800e378 <scalbn>
 800dd2e:	9905      	ldr	r1, [sp, #20]
 800dd30:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dd34:	e020      	b.n	800dd78 <__kernel_rem_pio2+0x1d0>
 800dd36:	ee20 7b09 	vmul.f64	d7, d0, d9
 800dd3a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800dd3e:	3801      	subs	r0, #1
 800dd40:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800dd44:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800dd48:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800dd4c:	eca6 0a01 	vstmia	r6!, {s0}
 800dd50:	ed92 0b00 	vldr	d0, [r2]
 800dd54:	ee37 0b00 	vadd.f64	d0, d7, d0
 800dd58:	e79c      	b.n	800dc94 <__kernel_rem_pio2+0xec>
 800dd5a:	d105      	bne.n	800dd68 <__kernel_rem_pio2+0x1c0>
 800dd5c:	1e6a      	subs	r2, r5, #1
 800dd5e:	ab06      	add	r3, sp, #24
 800dd60:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800dd64:	15f6      	asrs	r6, r6, #23
 800dd66:	e7c5      	b.n	800dcf4 <__kernel_rem_pio2+0x14c>
 800dd68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dd6c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd74:	da36      	bge.n	800dde4 <__kernel_rem_pio2+0x23c>
 800dd76:	2600      	movs	r6, #0
 800dd78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd80:	f040 80aa 	bne.w	800ded8 <__kernel_rem_pio2+0x330>
 800dd84:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800dd88:	4658      	mov	r0, fp
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	4548      	cmp	r0, r9
 800dd8e:	da52      	bge.n	800de36 <__kernel_rem_pio2+0x28e>
 800dd90:	2a00      	cmp	r2, #0
 800dd92:	f000 8081 	beq.w	800de98 <__kernel_rem_pio2+0x2f0>
 800dd96:	ab06      	add	r3, sp, #24
 800dd98:	3c18      	subs	r4, #24
 800dd9a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f000 8087 	beq.w	800deb2 <__kernel_rem_pio2+0x30a>
 800dda4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f000 fae5 	bl	800e378 <scalbn>
 800ddae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ddb2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800dec0 <__kernel_rem_pio2+0x318>
 800ddb6:	a96a      	add	r1, sp, #424	; 0x1a8
 800ddb8:	f103 0208 	add.w	r2, r3, #8
 800ddbc:	1888      	adds	r0, r1, r2
 800ddbe:	4659      	mov	r1, fp
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	f280 80b7 	bge.w	800df34 <__kernel_rem_pio2+0x38c>
 800ddc6:	4659      	mov	r1, fp
 800ddc8:	2900      	cmp	r1, #0
 800ddca:	f2c0 80d5 	blt.w	800df78 <__kernel_rem_pio2+0x3d0>
 800ddce:	a86a      	add	r0, sp, #424	; 0x1a8
 800ddd0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800ddd4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800deb8 <__kernel_rem_pio2+0x310>
 800ddd8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800ded4 <__kernel_rem_pio2+0x32c>
 800dddc:	2400      	movs	r4, #0
 800ddde:	ebab 0001 	sub.w	r0, fp, r1
 800dde2:	e0be      	b.n	800df62 <__kernel_rem_pio2+0x3ba>
 800dde4:	2602      	movs	r6, #2
 800dde6:	e787      	b.n	800dcf8 <__kernel_rem_pio2+0x150>
 800dde8:	f8db 2000 	ldr.w	r2, [fp]
 800ddec:	b958      	cbnz	r0, 800de06 <__kernel_rem_pio2+0x25e>
 800ddee:	b122      	cbz	r2, 800ddfa <__kernel_rem_pio2+0x252>
 800ddf0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ddf4:	f8cb 2000 	str.w	r2, [fp]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	f10c 0c01 	add.w	ip, ip, #1
 800ddfe:	f10b 0b04 	add.w	fp, fp, #4
 800de02:	4610      	mov	r0, r2
 800de04:	e77f      	b.n	800dd06 <__kernel_rem_pio2+0x15e>
 800de06:	ebae 0202 	sub.w	r2, lr, r2
 800de0a:	f8cb 2000 	str.w	r2, [fp]
 800de0e:	4602      	mov	r2, r0
 800de10:	e7f3      	b.n	800ddfa <__kernel_rem_pio2+0x252>
 800de12:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800de16:	ab06      	add	r3, sp, #24
 800de18:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800de1c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800de20:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800de24:	e778      	b.n	800dd18 <__kernel_rem_pio2+0x170>
 800de26:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800de2a:	ab06      	add	r3, sp, #24
 800de2c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800de30:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800de34:	e7f4      	b.n	800de20 <__kernel_rem_pio2+0x278>
 800de36:	ab06      	add	r3, sp, #24
 800de38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800de3c:	3801      	subs	r0, #1
 800de3e:	431a      	orrs	r2, r3
 800de40:	e7a4      	b.n	800dd8c <__kernel_rem_pio2+0x1e4>
 800de42:	f10c 0c01 	add.w	ip, ip, #1
 800de46:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d0f9      	beq.n	800de42 <__kernel_rem_pio2+0x29a>
 800de4e:	9b04      	ldr	r3, [sp, #16]
 800de50:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800de54:	eb0d 0203 	add.w	r2, sp, r3
 800de58:	9b01      	ldr	r3, [sp, #4]
 800de5a:	18e8      	adds	r0, r5, r3
 800de5c:	ab1a      	add	r3, sp, #104	; 0x68
 800de5e:	1c6e      	adds	r6, r5, #1
 800de60:	3a98      	subs	r2, #152	; 0x98
 800de62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800de66:	4465      	add	r5, ip
 800de68:	42b5      	cmp	r5, r6
 800de6a:	f6ff af05 	blt.w	800dc78 <__kernel_rem_pio2+0xd0>
 800de6e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800de72:	f8dd e008 	ldr.w	lr, [sp, #8]
 800de76:	ee07 3a90 	vmov	s15, r3
 800de7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800de7e:	f04f 0c00 	mov.w	ip, #0
 800de82:	eca0 7b02 	vstmia	r0!, {d7}
 800de86:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800deb8 <__kernel_rem_pio2+0x310>
 800de8a:	4680      	mov	r8, r0
 800de8c:	458c      	cmp	ip, r1
 800de8e:	dd07      	ble.n	800dea0 <__kernel_rem_pio2+0x2f8>
 800de90:	eca2 7b02 	vstmia	r2!, {d7}
 800de94:	3601      	adds	r6, #1
 800de96:	e7e7      	b.n	800de68 <__kernel_rem_pio2+0x2c0>
 800de98:	9a03      	ldr	r2, [sp, #12]
 800de9a:	f04f 0c01 	mov.w	ip, #1
 800de9e:	e7d2      	b.n	800de46 <__kernel_rem_pio2+0x29e>
 800dea0:	ecbe 5b02 	vldmia	lr!, {d5}
 800dea4:	ed38 6b02 	vldmdb	r8!, {d6}
 800dea8:	f10c 0c01 	add.w	ip, ip, #1
 800deac:	eea5 7b06 	vfma.f64	d7, d5, d6
 800deb0:	e7ec      	b.n	800de8c <__kernel_rem_pio2+0x2e4>
 800deb2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800deb6:	e76e      	b.n	800dd96 <__kernel_rem_pio2+0x1ee>
	...
 800dec4:	3e700000 	.word	0x3e700000
 800dec8:	00000000 	.word	0x00000000
 800decc:	41700000 	.word	0x41700000
 800ded0:	0800ffb8 	.word	0x0800ffb8
 800ded4:	0800ff78 	.word	0x0800ff78
 800ded8:	4260      	negs	r0, r4
 800deda:	eeb0 0b48 	vmov.f64	d0, d8
 800dede:	f000 fa4b 	bl	800e378 <scalbn>
 800dee2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e0c0 <__kernel_rem_pio2+0x518>
 800dee6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800deea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deee:	db18      	blt.n	800df22 <__kernel_rem_pio2+0x37a>
 800def0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e0c8 <__kernel_rem_pio2+0x520>
 800def4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800def8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800defc:	aa06      	add	r2, sp, #24
 800defe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800df02:	eea5 0b46 	vfms.f64	d0, d5, d6
 800df06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800df0a:	f105 0b01 	add.w	fp, r5, #1
 800df0e:	ee10 3a10 	vmov	r3, s0
 800df12:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800df16:	ee17 3a10 	vmov	r3, s14
 800df1a:	3418      	adds	r4, #24
 800df1c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800df20:	e740      	b.n	800dda4 <__kernel_rem_pio2+0x1fc>
 800df22:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800df26:	aa06      	add	r2, sp, #24
 800df28:	ee10 3a10 	vmov	r3, s0
 800df2c:	46ab      	mov	fp, r5
 800df2e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800df32:	e737      	b.n	800dda4 <__kernel_rem_pio2+0x1fc>
 800df34:	ac06      	add	r4, sp, #24
 800df36:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800df3a:	9401      	str	r4, [sp, #4]
 800df3c:	ee07 4a90 	vmov	s15, r4
 800df40:	3901      	subs	r1, #1
 800df42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800df46:	ee27 7b00 	vmul.f64	d7, d7, d0
 800df4a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800df4e:	ed20 7b02 	vstmdb	r0!, {d7}
 800df52:	e735      	b.n	800ddc0 <__kernel_rem_pio2+0x218>
 800df54:	ecbc 5b02 	vldmia	ip!, {d5}
 800df58:	ecb5 6b02 	vldmia	r5!, {d6}
 800df5c:	3401      	adds	r4, #1
 800df5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800df62:	454c      	cmp	r4, r9
 800df64:	dc01      	bgt.n	800df6a <__kernel_rem_pio2+0x3c2>
 800df66:	4284      	cmp	r4, r0
 800df68:	ddf4      	ble.n	800df54 <__kernel_rem_pio2+0x3ac>
 800df6a:	ac42      	add	r4, sp, #264	; 0x108
 800df6c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800df70:	ed80 7b00 	vstr	d7, [r0]
 800df74:	3901      	subs	r1, #1
 800df76:	e727      	b.n	800ddc8 <__kernel_rem_pio2+0x220>
 800df78:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800df7a:	2902      	cmp	r1, #2
 800df7c:	dc0a      	bgt.n	800df94 <__kernel_rem_pio2+0x3ec>
 800df7e:	2900      	cmp	r1, #0
 800df80:	dc2c      	bgt.n	800dfdc <__kernel_rem_pio2+0x434>
 800df82:	d045      	beq.n	800e010 <__kernel_rem_pio2+0x468>
 800df84:	f008 0007 	and.w	r0, r8, #7
 800df88:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800df8c:	ecbd 8b06 	vpop	{d8-d10}
 800df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df94:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800df96:	2a03      	cmp	r2, #3
 800df98:	d1f4      	bne.n	800df84 <__kernel_rem_pio2+0x3dc>
 800df9a:	aa42      	add	r2, sp, #264	; 0x108
 800df9c:	4413      	add	r3, r2
 800df9e:	461a      	mov	r2, r3
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	4658      	mov	r0, fp
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	f1a1 0108 	sub.w	r1, r1, #8
 800dfaa:	dc54      	bgt.n	800e056 <__kernel_rem_pio2+0x4ae>
 800dfac:	4659      	mov	r1, fp
 800dfae:	2901      	cmp	r1, #1
 800dfb0:	f1a2 0208 	sub.w	r2, r2, #8
 800dfb4:	dc5f      	bgt.n	800e076 <__kernel_rem_pio2+0x4ce>
 800dfb6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e0d0 <__kernel_rem_pio2+0x528>
 800dfba:	3308      	adds	r3, #8
 800dfbc:	f1bb 0f01 	cmp.w	fp, #1
 800dfc0:	dc69      	bgt.n	800e096 <__kernel_rem_pio2+0x4ee>
 800dfc2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800dfc6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800dfca:	2e00      	cmp	r6, #0
 800dfcc:	d16a      	bne.n	800e0a4 <__kernel_rem_pio2+0x4fc>
 800dfce:	ed87 5b00 	vstr	d5, [r7]
 800dfd2:	ed87 6b02 	vstr	d6, [r7, #8]
 800dfd6:	ed87 7b04 	vstr	d7, [r7, #16]
 800dfda:	e7d3      	b.n	800df84 <__kernel_rem_pio2+0x3dc>
 800dfdc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e0d0 <__kernel_rem_pio2+0x528>
 800dfe0:	ab42      	add	r3, sp, #264	; 0x108
 800dfe2:	441a      	add	r2, r3
 800dfe4:	465b      	mov	r3, fp
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	da26      	bge.n	800e038 <__kernel_rem_pio2+0x490>
 800dfea:	b35e      	cbz	r6, 800e044 <__kernel_rem_pio2+0x49c>
 800dfec:	eeb1 7b46 	vneg.f64	d7, d6
 800dff0:	ed87 7b00 	vstr	d7, [r7]
 800dff4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800dff8:	aa44      	add	r2, sp, #272	; 0x110
 800dffa:	2301      	movs	r3, #1
 800dffc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e000:	459b      	cmp	fp, r3
 800e002:	da22      	bge.n	800e04a <__kernel_rem_pio2+0x4a2>
 800e004:	b10e      	cbz	r6, 800e00a <__kernel_rem_pio2+0x462>
 800e006:	eeb1 7b47 	vneg.f64	d7, d7
 800e00a:	ed87 7b02 	vstr	d7, [r7, #8]
 800e00e:	e7b9      	b.n	800df84 <__kernel_rem_pio2+0x3dc>
 800e010:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e0d0 <__kernel_rem_pio2+0x528>
 800e014:	ab42      	add	r3, sp, #264	; 0x108
 800e016:	441a      	add	r2, r3
 800e018:	f1bb 0f00 	cmp.w	fp, #0
 800e01c:	da05      	bge.n	800e02a <__kernel_rem_pio2+0x482>
 800e01e:	b10e      	cbz	r6, 800e024 <__kernel_rem_pio2+0x47c>
 800e020:	eeb1 7b47 	vneg.f64	d7, d7
 800e024:	ed87 7b00 	vstr	d7, [r7]
 800e028:	e7ac      	b.n	800df84 <__kernel_rem_pio2+0x3dc>
 800e02a:	ed32 6b02 	vldmdb	r2!, {d6}
 800e02e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e032:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e036:	e7ef      	b.n	800e018 <__kernel_rem_pio2+0x470>
 800e038:	ed32 7b02 	vldmdb	r2!, {d7}
 800e03c:	3b01      	subs	r3, #1
 800e03e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e042:	e7d0      	b.n	800dfe6 <__kernel_rem_pio2+0x43e>
 800e044:	eeb0 7b46 	vmov.f64	d7, d6
 800e048:	e7d2      	b.n	800dff0 <__kernel_rem_pio2+0x448>
 800e04a:	ecb2 6b02 	vldmia	r2!, {d6}
 800e04e:	3301      	adds	r3, #1
 800e050:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e054:	e7d4      	b.n	800e000 <__kernel_rem_pio2+0x458>
 800e056:	ed91 7b00 	vldr	d7, [r1]
 800e05a:	ed91 5b02 	vldr	d5, [r1, #8]
 800e05e:	3801      	subs	r0, #1
 800e060:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e064:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e068:	ed81 6b00 	vstr	d6, [r1]
 800e06c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e070:	ed81 7b02 	vstr	d7, [r1, #8]
 800e074:	e796      	b.n	800dfa4 <__kernel_rem_pio2+0x3fc>
 800e076:	ed92 7b00 	vldr	d7, [r2]
 800e07a:	ed92 5b02 	vldr	d5, [r2, #8]
 800e07e:	3901      	subs	r1, #1
 800e080:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e084:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e088:	ed82 6b00 	vstr	d6, [r2]
 800e08c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e090:	ed82 7b02 	vstr	d7, [r2, #8]
 800e094:	e78b      	b.n	800dfae <__kernel_rem_pio2+0x406>
 800e096:	ed33 6b02 	vldmdb	r3!, {d6}
 800e09a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e09e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e0a2:	e78b      	b.n	800dfbc <__kernel_rem_pio2+0x414>
 800e0a4:	eeb1 5b45 	vneg.f64	d5, d5
 800e0a8:	eeb1 6b46 	vneg.f64	d6, d6
 800e0ac:	ed87 5b00 	vstr	d5, [r7]
 800e0b0:	eeb1 7b47 	vneg.f64	d7, d7
 800e0b4:	ed87 6b02 	vstr	d6, [r7, #8]
 800e0b8:	e78d      	b.n	800dfd6 <__kernel_rem_pio2+0x42e>
 800e0ba:	bf00      	nop
 800e0bc:	f3af 8000 	nop.w
 800e0c0:	00000000 	.word	0x00000000
 800e0c4:	41700000 	.word	0x41700000
 800e0c8:	00000000 	.word	0x00000000
 800e0cc:	3e700000 	.word	0x3e700000
	...

0800e0d8 <__kernel_sin>:
 800e0d8:	ee10 3a90 	vmov	r3, s1
 800e0dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0e0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e0e4:	da04      	bge.n	800e0f0 <__kernel_sin+0x18>
 800e0e6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e0ea:	ee17 3a90 	vmov	r3, s15
 800e0ee:	b35b      	cbz	r3, 800e148 <__kernel_sin+0x70>
 800e0f0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e0f4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e0f8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e150 <__kernel_sin+0x78>
 800e0fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e158 <__kernel_sin+0x80>
 800e100:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e104:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e160 <__kernel_sin+0x88>
 800e108:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e10c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e168 <__kernel_sin+0x90>
 800e110:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e114:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e170 <__kernel_sin+0x98>
 800e118:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e11c:	b930      	cbnz	r0, 800e12c <__kernel_sin+0x54>
 800e11e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e178 <__kernel_sin+0xa0>
 800e122:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e126:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e12a:	4770      	bx	lr
 800e12c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e130:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e134:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e138:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e13c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e180 <__kernel_sin+0xa8>
 800e140:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e144:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	f3af 8000 	nop.w
 800e150:	5acfd57c 	.word	0x5acfd57c
 800e154:	3de5d93a 	.word	0x3de5d93a
 800e158:	8a2b9ceb 	.word	0x8a2b9ceb
 800e15c:	be5ae5e6 	.word	0xbe5ae5e6
 800e160:	57b1fe7d 	.word	0x57b1fe7d
 800e164:	3ec71de3 	.word	0x3ec71de3
 800e168:	19c161d5 	.word	0x19c161d5
 800e16c:	bf2a01a0 	.word	0xbf2a01a0
 800e170:	1110f8a6 	.word	0x1110f8a6
 800e174:	3f811111 	.word	0x3f811111
 800e178:	55555549 	.word	0x55555549
 800e17c:	bfc55555 	.word	0xbfc55555
 800e180:	55555549 	.word	0x55555549
 800e184:	3fc55555 	.word	0x3fc55555

0800e188 <with_errno>:
 800e188:	b513      	push	{r0, r1, r4, lr}
 800e18a:	4604      	mov	r4, r0
 800e18c:	ed8d 0b00 	vstr	d0, [sp]
 800e190:	f7fe fa86 	bl	800c6a0 <__errno>
 800e194:	ed9d 0b00 	vldr	d0, [sp]
 800e198:	6004      	str	r4, [r0, #0]
 800e19a:	b002      	add	sp, #8
 800e19c:	bd10      	pop	{r4, pc}

0800e19e <xflow>:
 800e19e:	b082      	sub	sp, #8
 800e1a0:	b158      	cbz	r0, 800e1ba <xflow+0x1c>
 800e1a2:	eeb1 7b40 	vneg.f64	d7, d0
 800e1a6:	ed8d 7b00 	vstr	d7, [sp]
 800e1aa:	ed9d 7b00 	vldr	d7, [sp]
 800e1ae:	2022      	movs	r0, #34	; 0x22
 800e1b0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e1b4:	b002      	add	sp, #8
 800e1b6:	f7ff bfe7 	b.w	800e188 <with_errno>
 800e1ba:	eeb0 7b40 	vmov.f64	d7, d0
 800e1be:	e7f2      	b.n	800e1a6 <xflow+0x8>

0800e1c0 <__math_uflow>:
 800e1c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1c8 <__math_uflow+0x8>
 800e1c4:	f7ff bfeb 	b.w	800e19e <xflow>
 800e1c8:	00000000 	.word	0x00000000
 800e1cc:	10000000 	.word	0x10000000

0800e1d0 <__math_oflow>:
 800e1d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1d8 <__math_oflow+0x8>
 800e1d4:	f7ff bfe3 	b.w	800e19e <xflow>
 800e1d8:	00000000 	.word	0x00000000
 800e1dc:	70000000 	.word	0x70000000

0800e1e0 <__math_divzero>:
 800e1e0:	b082      	sub	sp, #8
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e1e8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e1ec:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e1f0:	ed8d 7b00 	vstr	d7, [sp]
 800e1f4:	ed9d 0b00 	vldr	d0, [sp]
 800e1f8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e208 <__math_divzero+0x28>
 800e1fc:	2022      	movs	r0, #34	; 0x22
 800e1fe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e202:	b002      	add	sp, #8
 800e204:	f7ff bfc0 	b.w	800e188 <with_errno>
	...

0800e210 <__math_invalid>:
 800e210:	eeb0 7b40 	vmov.f64	d7, d0
 800e214:	eeb4 7b47 	vcmp.f64	d7, d7
 800e218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e21c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e220:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e224:	d602      	bvs.n	800e22c <__math_invalid+0x1c>
 800e226:	2021      	movs	r0, #33	; 0x21
 800e228:	f7ff bfae 	b.w	800e188 <with_errno>
 800e22c:	4770      	bx	lr

0800e22e <__math_check_uflow>:
 800e22e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e236:	d102      	bne.n	800e23e <__math_check_uflow+0x10>
 800e238:	2022      	movs	r0, #34	; 0x22
 800e23a:	f7ff bfa5 	b.w	800e188 <with_errno>
 800e23e:	4770      	bx	lr

0800e240 <__math_check_oflow>:
 800e240:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e260 <__math_check_oflow+0x20>
 800e244:	eeb0 7bc0 	vabs.f64	d7, d0
 800e248:	eeb4 7b46 	vcmp.f64	d7, d6
 800e24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e250:	dd02      	ble.n	800e258 <__math_check_oflow+0x18>
 800e252:	2022      	movs	r0, #34	; 0x22
 800e254:	f7ff bf98 	b.w	800e188 <with_errno>
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	f3af 8000 	nop.w
 800e260:	ffffffff 	.word	0xffffffff
 800e264:	7fefffff 	.word	0x7fefffff

0800e268 <fabs>:
 800e268:	ec51 0b10 	vmov	r0, r1, d0
 800e26c:	ee10 2a10 	vmov	r2, s0
 800e270:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e274:	ec43 2b10 	vmov	d0, r2, r3
 800e278:	4770      	bx	lr
 800e27a:	0000      	movs	r0, r0
 800e27c:	0000      	movs	r0, r0
	...

0800e280 <floor>:
 800e280:	ee10 1a90 	vmov	r1, s1
 800e284:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e288:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e28c:	2b13      	cmp	r3, #19
 800e28e:	b530      	push	{r4, r5, lr}
 800e290:	ee10 0a10 	vmov	r0, s0
 800e294:	ee10 5a10 	vmov	r5, s0
 800e298:	dc31      	bgt.n	800e2fe <floor+0x7e>
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	da15      	bge.n	800e2ca <floor+0x4a>
 800e29e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e358 <floor+0xd8>
 800e2a2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e2a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ae:	dd07      	ble.n	800e2c0 <floor+0x40>
 800e2b0:	2900      	cmp	r1, #0
 800e2b2:	da4e      	bge.n	800e352 <floor+0xd2>
 800e2b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e2b8:	4318      	orrs	r0, r3
 800e2ba:	d001      	beq.n	800e2c0 <floor+0x40>
 800e2bc:	4928      	ldr	r1, [pc, #160]	; (800e360 <floor+0xe0>)
 800e2be:	2000      	movs	r0, #0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	ec43 2b10 	vmov	d0, r2, r3
 800e2c8:	e020      	b.n	800e30c <floor+0x8c>
 800e2ca:	4a26      	ldr	r2, [pc, #152]	; (800e364 <floor+0xe4>)
 800e2cc:	411a      	asrs	r2, r3
 800e2ce:	ea01 0402 	and.w	r4, r1, r2
 800e2d2:	4304      	orrs	r4, r0
 800e2d4:	d01a      	beq.n	800e30c <floor+0x8c>
 800e2d6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e358 <floor+0xd8>
 800e2da:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e2de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e6:	ddeb      	ble.n	800e2c0 <floor+0x40>
 800e2e8:	2900      	cmp	r1, #0
 800e2ea:	bfbe      	ittt	lt
 800e2ec:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e2f0:	fa40 f303 	asrlt.w	r3, r0, r3
 800e2f4:	18c9      	addlt	r1, r1, r3
 800e2f6:	ea21 0102 	bic.w	r1, r1, r2
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	e7e0      	b.n	800e2c0 <floor+0x40>
 800e2fe:	2b33      	cmp	r3, #51	; 0x33
 800e300:	dd05      	ble.n	800e30e <floor+0x8e>
 800e302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e306:	d101      	bne.n	800e30c <floor+0x8c>
 800e308:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e30c:	bd30      	pop	{r4, r5, pc}
 800e30e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e316:	40e2      	lsrs	r2, r4
 800e318:	4202      	tst	r2, r0
 800e31a:	d0f7      	beq.n	800e30c <floor+0x8c>
 800e31c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e358 <floor+0xd8>
 800e320:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e324:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e32c:	ddc8      	ble.n	800e2c0 <floor+0x40>
 800e32e:	2900      	cmp	r1, #0
 800e330:	da02      	bge.n	800e338 <floor+0xb8>
 800e332:	2b14      	cmp	r3, #20
 800e334:	d103      	bne.n	800e33e <floor+0xbe>
 800e336:	3101      	adds	r1, #1
 800e338:	ea20 0002 	bic.w	r0, r0, r2
 800e33c:	e7c0      	b.n	800e2c0 <floor+0x40>
 800e33e:	2401      	movs	r4, #1
 800e340:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e344:	fa04 f303 	lsl.w	r3, r4, r3
 800e348:	4418      	add	r0, r3
 800e34a:	42a8      	cmp	r0, r5
 800e34c:	bf38      	it	cc
 800e34e:	1909      	addcc	r1, r1, r4
 800e350:	e7f2      	b.n	800e338 <floor+0xb8>
 800e352:	2000      	movs	r0, #0
 800e354:	4601      	mov	r1, r0
 800e356:	e7b3      	b.n	800e2c0 <floor+0x40>
 800e358:	8800759c 	.word	0x8800759c
 800e35c:	7e37e43c 	.word	0x7e37e43c
 800e360:	bff00000 	.word	0xbff00000
 800e364:	000fffff 	.word	0x000fffff

0800e368 <nan>:
 800e368:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e370 <nan+0x8>
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	00000000 	.word	0x00000000
 800e374:	7ff80000 	.word	0x7ff80000

0800e378 <scalbn>:
 800e378:	ee10 1a90 	vmov	r1, s1
 800e37c:	b510      	push	{r4, lr}
 800e37e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e382:	b98c      	cbnz	r4, 800e3a8 <scalbn+0x30>
 800e384:	ee10 3a10 	vmov	r3, s0
 800e388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e38c:	430b      	orrs	r3, r1
 800e38e:	d011      	beq.n	800e3b4 <scalbn+0x3c>
 800e390:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800e458 <scalbn+0xe0>
 800e394:	4b3c      	ldr	r3, [pc, #240]	; (800e488 <scalbn+0x110>)
 800e396:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e39a:	4298      	cmp	r0, r3
 800e39c:	da0b      	bge.n	800e3b6 <scalbn+0x3e>
 800e39e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e460 <scalbn+0xe8>
 800e3a2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e3a6:	e005      	b.n	800e3b4 <scalbn+0x3c>
 800e3a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e3ac:	429c      	cmp	r4, r3
 800e3ae:	d107      	bne.n	800e3c0 <scalbn+0x48>
 800e3b0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e3b4:	bd10      	pop	{r4, pc}
 800e3b6:	ee10 1a90 	vmov	r1, s1
 800e3ba:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e3be:	3c36      	subs	r4, #54	; 0x36
 800e3c0:	4404      	add	r4, r0
 800e3c2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800e3c6:	429c      	cmp	r4, r3
 800e3c8:	dd0d      	ble.n	800e3e6 <scalbn+0x6e>
 800e3ca:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800e468 <scalbn+0xf0>
 800e3ce:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800e470 <scalbn+0xf8>
 800e3d2:	eeb0 6b47 	vmov.f64	d6, d7
 800e3d6:	ee10 3a90 	vmov	r3, s1
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e3e0:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e3e4:	e7e6      	b.n	800e3b4 <scalbn+0x3c>
 800e3e6:	2c00      	cmp	r4, #0
 800e3e8:	dd0a      	ble.n	800e400 <scalbn+0x88>
 800e3ea:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e3ee:	ec53 2b10 	vmov	r2, r3, d0
 800e3f2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e3f6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e3fa:	ec43 2b10 	vmov	d0, r2, r3
 800e3fe:	e7d9      	b.n	800e3b4 <scalbn+0x3c>
 800e400:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800e404:	da19      	bge.n	800e43a <scalbn+0xc2>
 800e406:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e40a:	4298      	cmp	r0, r3
 800e40c:	ee10 3a90 	vmov	r3, s1
 800e410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e414:	dd09      	ble.n	800e42a <scalbn+0xb2>
 800e416:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800e468 <scalbn+0xf0>
 800e41a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800e470 <scalbn+0xf8>
 800e41e:	eeb0 7b40 	vmov.f64	d7, d0
 800e422:	2b00      	cmp	r3, #0
 800e424:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800e428:	e7bb      	b.n	800e3a2 <scalbn+0x2a>
 800e42a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800e460 <scalbn+0xe8>
 800e42e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800e478 <scalbn+0x100>
 800e432:	eeb0 7b40 	vmov.f64	d7, d0
 800e436:	2b00      	cmp	r3, #0
 800e438:	e7f4      	b.n	800e424 <scalbn+0xac>
 800e43a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e43e:	ec53 2b10 	vmov	r2, r3, d0
 800e442:	3436      	adds	r4, #54	; 0x36
 800e444:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e448:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e44c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e480 <scalbn+0x108>
 800e450:	ec43 2b10 	vmov	d0, r2, r3
 800e454:	e7a5      	b.n	800e3a2 <scalbn+0x2a>
 800e456:	bf00      	nop
 800e458:	00000000 	.word	0x00000000
 800e45c:	43500000 	.word	0x43500000
 800e460:	c2f8f359 	.word	0xc2f8f359
 800e464:	01a56e1f 	.word	0x01a56e1f
 800e468:	8800759c 	.word	0x8800759c
 800e46c:	7e37e43c 	.word	0x7e37e43c
 800e470:	8800759c 	.word	0x8800759c
 800e474:	fe37e43c 	.word	0xfe37e43c
 800e478:	c2f8f359 	.word	0xc2f8f359
 800e47c:	81a56e1f 	.word	0x81a56e1f
 800e480:	00000000 	.word	0x00000000
 800e484:	3c900000 	.word	0x3c900000
 800e488:	ffff3cb0 	.word	0xffff3cb0

0800e48c <_init>:
 800e48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e48e:	bf00      	nop
 800e490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e492:	bc08      	pop	{r3}
 800e494:	469e      	mov	lr, r3
 800e496:	4770      	bx	lr

0800e498 <_fini>:
 800e498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49a:	bf00      	nop
 800e49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e49e:	bc08      	pop	{r3}
 800e4a0:	469e      	mov	lr, r3
 800e4a2:	4770      	bx	lr
