
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001141c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e80  080116c0  080116c0  000216c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013540  08013540  00023540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013548  08013548  00023548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801354c  0801354c  0002354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  08013550  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017f8  240000a0  080135f0  000300a0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001898  080135f0  00031898  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d760  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003183  00000000  00000000  0004d82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001538  00000000  00000000  000509b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001440  00000000  00000000  00051ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038a0d  00000000  00000000  00053330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dd27  00000000  00000000  0008bd3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167537  00000000  00000000  000a9a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00210f9b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006568  00000000  00000000  00210fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080116a4 	.word	0x080116a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	080116a4 	.word	0x080116a4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a18:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a1c:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	609a      	str	r2, [r3, #8]
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <average_filter_init>:
  filter->_last_estimate=filter->_current_estimate;

  return filter->_current_estimate;
}

void average_filter_init(average_filter_t* filter, int width) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  filter->width = width;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f103 0008 	add.w	r0, r3, #8
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f00e fd13 	bl	800f498 <memset>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a96:	fb01 f202 	mul.w	r2, r1, r2
 8000a9a:	1a9a      	subs	r2, r3, r2
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000aca:	edd7 7a00 	vldr	s15, [r7]
 8000ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	ed93 7a01 	vldr	s14, [r3, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	ee07 3a90 	vmov	s15, r3
 8000af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000afc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000b00:	eef0 7a66 	vmov.f32	s15, s13
}
 8000b04:	eeb0 0a67 	vmov.f32	s0, s15
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void flash(uint8_t count) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e010      	b.n	8000b46 <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000b24:	2102      	movs	r1, #2
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <flash+0x48>)
 8000b28:	f007 fa35 	bl	8007f96 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000b2c:	2032      	movs	r0, #50	; 0x32
 8000b2e:	f004 f8d5 	bl	8004cdc <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000b32:	2102      	movs	r1, #2
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <flash+0x48>)
 8000b36:	f007 fa2e 	bl	8007f96 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f004 f8ce 	bl	8004cdc <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3301      	adds	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbea      	blt.n	8000b24 <flash+0x10>
  }

  HAL_Delay(100);
 8000b4e:	2064      	movs	r0, #100	; 0x64
 8000b50:	f004 f8c4 	bl	8004cdc <HAL_Delay>
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	58020000 	.word	0x58020000

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f004 f828 	bl	8004bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b68:	f000 f888 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6c:	f000 fd0a 	bl	8001584 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 8000b70:	f000 fc7c 	bl	800146c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000b74:	f000 fadc 	bl	8001130 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000b78:	f000 f93e 	bl	8000df8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b7c:	f000 f9d4 	bl	8000f28 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b80:	f000 fa64 	bl	800104c <MX_TIM5_Init>
  MX_TIM7_Init();
 8000b84:	f000 fb0a 	bl	800119c <MX_TIM7_Init>
  MX_DMA_Init();
 8000b88:	f000 fcbc 	bl	8001504 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b8c:	f000 f8f4 	bl	8000d78 <MX_I2C1_Init>
  MX_UART4_Init();
 8000b90:	f000 fb3c 	bl	800120c <MX_UART4_Init>
  MX_UART5_Init();
 8000b94:	f000 fb86 	bl	80012a4 <MX_UART5_Init>
  MX_UART7_Init();
 8000b98:	f000 fbd0 	bl	800133c <MX_UART7_Init>
  MX_UART8_Init();
 8000b9c:	f000 fc1a 	bl	80013d4 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4827      	ldr	r0, [pc, #156]	; (8000c44 <main+0xe4>)
 8000ba6:	f007 f9dd 	bl	8007f64 <HAL_GPIO_WritePin>

  flash(5);
 8000baa:	2005      	movs	r0, #5
 8000bac:	f7ff ffb2 	bl	8000b14 <flash>

  // Initialise filters for remote control
  init_filters();
 8000bb0:	f003 fec2 	bl	8004938 <init_filters>

  // Init sensors
  init_sensors();
 8000bb4:	f003 fee2 	bl	800497c <init_sensors>

  flash(5);
 8000bb8:	2005      	movs	r0, #5
 8000bba:	f7ff ffab 	bl	8000b14 <flash>

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4821      	ldr	r0, [pc, #132]	; (8000c48 <main+0xe8>)
 8000bc2:	f00a ff21 	bl	800ba08 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	481f      	ldr	r0, [pc, #124]	; (8000c48 <main+0xe8>)
 8000bca:	f00a ff1d 	bl	800ba08 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000bce:	2108      	movs	r1, #8
 8000bd0:	481d      	ldr	r0, [pc, #116]	; (8000c48 <main+0xe8>)
 8000bd2:	f00a ff19 	bl	800ba08 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000bd6:	210c      	movs	r1, #12
 8000bd8:	481b      	ldr	r0, [pc, #108]	; (8000c48 <main+0xe8>)
 8000bda:	f00a ff15 	bl	800ba08 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000bde:	2100      	movs	r1, #0
 8000be0:	481a      	ldr	r0, [pc, #104]	; (8000c4c <main+0xec>)
 8000be2:	f00a ff11 	bl	800ba08 <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000be6:	2100      	movs	r1, #0
 8000be8:	4819      	ldr	r0, [pc, #100]	; (8000c50 <main+0xf0>)
 8000bea:	f00a fd9d 	bl	800b728 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bee:	2104      	movs	r1, #4
 8000bf0:	4817      	ldr	r0, [pc, #92]	; (8000c50 <main+0xf0>)
 8000bf2:	f00a fd99 	bl	800b728 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	4815      	ldr	r0, [pc, #84]	; (8000c50 <main+0xf0>)
 8000bfa:	f00a fd95 	bl	800b728 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000bfe:	210c      	movs	r1, #12
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <main+0xf0>)
 8000c02:	f00a fd91 	bl	800b728 <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim6);
 8000c06:	4813      	ldr	r0, [pc, #76]	; (8000c54 <main+0xf4>)
 8000c08:	f00a fcb4 	bl	800b574 <HAL_TIM_Base_Start_IT>

  // Monitor timer
  HAL_TIM_Base_Start_IT(&htim7);
 8000c0c:	4812      	ldr	r0, [pc, #72]	; (8000c58 <main+0xf8>)
 8000c0e:	f00a fcb1 	bl	800b574 <HAL_TIM_Base_Start_IT>

  // Call receive in circlar mode, don't have to repeat the call to activate callback
  HAL_UART_Receive_DMA(&huart4, g_uart_rx_buffer1, UART_BUF_SIZE);
 8000c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c16:	4911      	ldr	r1, [pc, #68]	; (8000c5c <main+0xfc>)
 8000c18:	4811      	ldr	r0, [pc, #68]	; (8000c60 <main+0x100>)
 8000c1a:	f00c fb83 	bl	800d324 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, g_uart_rx_buffer2, UART_BUF_SIZE);
 8000c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c22:	4910      	ldr	r1, [pc, #64]	; (8000c64 <main+0x104>)
 8000c24:	4810      	ldr	r0, [pc, #64]	; (8000c68 <main+0x108>)
 8000c26:	f00c fb7d 	bl	800d324 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart7, g_uart_rx_buffer3, UART_BUF_SIZE);
 8000c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2e:	490f      	ldr	r1, [pc, #60]	; (8000c6c <main+0x10c>)
 8000c30:	480f      	ldr	r0, [pc, #60]	; (8000c70 <main+0x110>)
 8000c32:	f00c fb77 	bl	800d324 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart8, g_uart_rx_buffer4, UART_BUF_SIZE);
 8000c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <main+0x114>)
 8000c3c:	480e      	ldr	r0, [pc, #56]	; (8000c78 <main+0x118>)
 8000c3e:	f00c fb71 	bl	800d324 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0xe2>
 8000c44:	58020000 	.word	0x58020000
 8000c48:	240001cc 	.word	0x240001cc
 8000c4c:	24000218 	.word	0x24000218
 8000c50:	24000180 	.word	0x24000180
 8000c54:	24000264 	.word	0x24000264
 8000c58:	240002b0 	.word	0x240002b0
 8000c5c:	24001138 	.word	0x24001138
 8000c60:	240002fc 	.word	0x240002fc
 8000c64:	24001238 	.word	0x24001238
 8000c68:	2400038c 	.word	0x2400038c
 8000c6c:	24001338 	.word	0x24001338
 8000c70:	2400041c 	.word	0x2400041c
 8000c74:	24001438 	.word	0x24001438
 8000c78:	240004ac 	.word	0x240004ac

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09c      	sub	sp, #112	; 0x70
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	224c      	movs	r2, #76	; 0x4c
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00e fc04 	bl	800f498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2220      	movs	r2, #32
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00e fbfe 	bl	800f498 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f008 f8b5 	bl	8008e0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <SystemClock_Config+0xf4>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	4a31      	ldr	r2, [pc, #196]	; (8000d70 <SystemClock_Config+0xf4>)
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <SystemClock_Config+0xf4>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <SystemClock_Config+0xf8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a2c      	ldr	r2, [pc, #176]	; (8000d74 <SystemClock_Config+0xf8>)
 8000cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <SystemClock_Config+0xf8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cd4:	bf00      	nop
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <SystemClock_Config+0xf8>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce2:	d1f8      	bne.n	8000cd6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000cfe:	230a      	movs	r3, #10
 8000d00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000d06:	2304      	movs	r3, #4
 8000d08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d12:	2308      	movs	r3, #8
 8000d14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d16:	2302      	movs	r3, #2
 8000d18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 f8ac 	bl	8008e80 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d2e:	f000 fc9b 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	233f      	movs	r3, #63	; 0x3f
 8000d34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2303      	movs	r3, #3
 8000d38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2101      	movs	r1, #1
 8000d56:	4618      	mov	r0, r3
 8000d58:	f008 fcc0 	bl	80096dc <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d62:	f000 fc81 	bl	8001668 <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3770      	adds	r7, #112	; 0x70
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	58000400 	.word	0x58000400
 8000d74:	58024800 	.word	0x58024800

08000d78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_I2C1_Init+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <MX_I2C1_Init+0x7c>)
 8000d86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_I2C1_Init+0x74>)
 8000db4:	f007 f90a 	bl	8007fcc <HAL_I2C_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dbe:	f000 fc53 	bl	8001668 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <MX_I2C1_Init+0x74>)
 8000dc6:	f007 ff89 	bl	8008cdc <HAL_I2CEx_ConfigAnalogFilter>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd0:	f000 fc4a 	bl	8001668 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_I2C1_Init+0x74>)
 8000dd8:	f007 ffcb 	bl	8008d72 <HAL_I2CEx_ConfigDigitalFilter>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 fc41 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	240000bc 	.word	0x240000bc
 8000df0:	40005400 	.word	0x40005400
 8000df4:	10c0ecff 	.word	0x10c0ecff

08000df8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25;
 8000e32:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e34:	2219      	movs	r2, #25
 8000e36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8000e3e:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e40:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e52:	4834      	ldr	r0, [pc, #208]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e54:	f00a fb36 	bl	800b4c4 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e5e:	f000 fc03 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	482d      	ldr	r0, [pc, #180]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e70:	f00b f9ea 	bl	800c248 <HAL_TIM_ConfigClockSource>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e7a:	f000 fbf5 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e7e:	4829      	ldr	r0, [pc, #164]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e80:	f00a fbf0 	bl	800b664 <HAL_TIM_PWM_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e8a:	f000 fbed 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4821      	ldr	r0, [pc, #132]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e9e:	f00c f895 	bl	800cfcc <HAL_TIMEx_MasterConfigSynchronization>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ea8:	f000 fbde 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eac:	2360      	movs	r3, #96	; 0x60
 8000eae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4818      	ldr	r0, [pc, #96]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000ec4:	f00b f8ac 	bl	800c020 <HAL_TIM_PWM_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ece:	f000 fbcb 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000eda:	f00b f8a1 	bl	800c020 <HAL_TIM_PWM_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ee4:	f000 fbc0 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2208      	movs	r2, #8
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000ef0:	f00b f896 	bl	800c020 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000efa:	f000 fbb5 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	220c      	movs	r2, #12
 8000f02:	4619      	mov	r1, r3
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000f06:	f00b f88b 	bl	800c020 <HAL_TIM_PWM_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000f10:	f000 fbaa 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000f16:	f001 ff25 	bl	8002d64 <HAL_TIM_MspPostInit>

}
 8000f1a:	bf00      	nop
 8000f1c:	3738      	adds	r7, #56	; 0x38
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000180 	.word	0x24000180

08000f28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f56:	4a3c      	ldr	r2, [pc, #240]	; (8001048 <MX_TIM4_Init+0x120>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 250;
 8000f5a:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f5c:	22fa      	movs	r2, #250	; 0xfa
 8000f5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000f66:	4b37      	ldr	r3, [pc, #220]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f68:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b35      	ldr	r3, [pc, #212]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f7a:	4832      	ldr	r0, [pc, #200]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f7c:	f00a faa2 	bl	800b4c4 <HAL_TIM_Base_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000f86:	f000 fb6f 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	4619      	mov	r1, r3
 8000f96:	482b      	ldr	r0, [pc, #172]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f98:	f00b f956 	bl	800c248 <HAL_TIM_ConfigClockSource>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000fa2:	f000 fb61 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000fa6:	4827      	ldr	r0, [pc, #156]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000fa8:	f00a fccc 	bl	800b944 <HAL_TIM_IC_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f000 fb59 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481f      	ldr	r0, [pc, #124]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000fc6:	f00c f801 	bl	800cfcc <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000fd0:	f000 fb4a 	bl	8001668 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4816      	ldr	r0, [pc, #88]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000fec:	f00a ff7b 	bl	800bee6 <HAL_TIM_IC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000ff6:	f000 fb37 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <MX_TIM4_Init+0x11c>)
 8001002:	f00a ff70 	bl	800bee6 <HAL_TIM_IC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 800100c:	f000 fb2c 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2208      	movs	r2, #8
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <MX_TIM4_Init+0x11c>)
 8001018:	f00a ff65 	bl	800bee6 <HAL_TIM_IC_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8001022:	f000 fb21 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	220c      	movs	r2, #12
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_TIM4_Init+0x11c>)
 800102e:	f00a ff5a 	bl	800bee6 <HAL_TIM_IC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8001038:	f000 fb16 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3730      	adds	r7, #48	; 0x30
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	240001cc 	.word	0x240001cc
 8001048:	40000800 	.word	0x40000800

0800104c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_TIM5_Init+0xdc>)
 800107a:	4a2c      	ldr	r2, [pc, #176]	; (800112c <MX_TIM5_Init+0xe0>)
 800107c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 250;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <MX_TIM5_Init+0xdc>)
 8001080:	22fa      	movs	r2, #250	; 0xfa
 8001082:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_TIM5_Init+0xdc>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <MX_TIM5_Init+0xdc>)
 800108c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001090:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_TIM5_Init+0xdc>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_TIM5_Init+0xdc>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800109e:	4822      	ldr	r0, [pc, #136]	; (8001128 <MX_TIM5_Init+0xdc>)
 80010a0:	f00a fa10 	bl	800b4c4 <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 80010aa:	f000 fadd 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4619      	mov	r1, r3
 80010ba:	481b      	ldr	r0, [pc, #108]	; (8001128 <MX_TIM5_Init+0xdc>)
 80010bc:	f00b f8c4 	bl	800c248 <HAL_TIM_ConfigClockSource>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80010c6:	f000 facf 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80010ca:	4817      	ldr	r0, [pc, #92]	; (8001128 <MX_TIM5_Init+0xdc>)
 80010cc:	f00a fc3a 	bl	800b944 <HAL_TIM_IC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80010d6:	f000 fac7 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <MX_TIM5_Init+0xdc>)
 80010ea:	f00b ff6f 	bl	800cfcc <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80010f4:	f000 fab8 	bl	8001668 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010f8:	230a      	movs	r3, #10
 80010fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_TIM5_Init+0xdc>)
 8001110:	f00a fee9 	bl	800bee6 <HAL_TIM_IC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 800111a:	f000 faa5 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3730      	adds	r7, #48	; 0x30
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	24000218 	.word	0x24000218
 800112c:	40000c00 	.word	0x40000c00

08001130 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_TIM6_Init+0x64>)
 8001142:	4a15      	ldr	r2, [pc, #84]	; (8001198 <MX_TIM6_Init+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 250;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_TIM6_Init+0x64>)
 8001148:	22fa      	movs	r2, #250	; 0xfa
 800114a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_TIM6_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_TIM6_Init+0x64>)
 8001154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001158:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_TIM6_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_TIM6_Init+0x64>)
 8001162:	f00a f9af 	bl	800b4c4 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800116c:	f000 fa7c 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_TIM6_Init+0x64>)
 800117e:	f00b ff25 	bl	800cfcc <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001188:	f000 fa6e 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24000264 	.word	0x24000264
 8001198:	40001000 	.word	0x40001000

0800119c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_TIM7_Init+0x68>)
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <MX_TIM7_Init+0x6c>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_TIM7_Init+0x68>)
 80011b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_TIM7_Init+0x68>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_TIM7_Init+0x68>)
 80011c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_TIM7_Init+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_TIM7_Init+0x68>)
 80011d0:	f00a f978 	bl	800b4c4 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80011da:	f000 fa45 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_TIM7_Init+0x68>)
 80011ec:	f00b feee 	bl	800cfcc <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80011f6:	f000 fa37 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	240002b0 	.word	0x240002b0
 8001208:	40001400 	.word	0x40001400

0800120c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_UART4_Init+0x90>)
 8001212:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <MX_UART4_Init+0x94>)
 8001214:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_UART4_Init+0x90>)
 8001218:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800121c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_UART4_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_UART4_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_UART4_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_UART4_Init+0x90>)
 8001232:	2204      	movs	r2, #4
 8001234:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_UART4_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_UART4_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_UART4_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_UART4_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_UART4_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_UART4_Init+0x90>)
 8001256:	f00b ff65 	bl	800d124 <HAL_HalfDuplex_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001260:	f000 fa02 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_UART4_Init+0x90>)
 8001268:	f00e f80f 	bl	800f28a <HAL_UARTEx_SetTxFifoThreshold>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001272:	f000 f9f9 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <MX_UART4_Init+0x90>)
 800127a:	f00e f844 	bl	800f306 <HAL_UARTEx_SetRxFifoThreshold>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001284:	f000 f9f0 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_UART4_Init+0x90>)
 800128a:	f00d ffc5 	bl	800f218 <HAL_UARTEx_DisableFifoMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001294:	f000 f9e8 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	240002fc 	.word	0x240002fc
 80012a0:	40004c00 	.word	0x40004c00

080012a4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <MX_UART5_Init+0x90>)
 80012aa:	4a23      	ldr	r2, [pc, #140]	; (8001338 <MX_UART5_Init+0x94>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_UART5_Init+0x90>)
 80012b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_UART5_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_UART5_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_UART5_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_UART5_Init+0x90>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_UART5_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_UART5_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_UART5_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_UART5_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_UART5_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 80012ec:	4811      	ldr	r0, [pc, #68]	; (8001334 <MX_UART5_Init+0x90>)
 80012ee:	f00b ff19 	bl	800d124 <HAL_HalfDuplex_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80012f8:	f000 f9b6 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_UART5_Init+0x90>)
 8001300:	f00d ffc3 	bl	800f28a <HAL_UARTEx_SetTxFifoThreshold>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800130a:	f000 f9ad 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <MX_UART5_Init+0x90>)
 8001312:	f00d fff8 	bl	800f306 <HAL_UARTEx_SetRxFifoThreshold>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800131c:	f000 f9a4 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_UART5_Init+0x90>)
 8001322:	f00d ff79 	bl	800f218 <HAL_UARTEx_DisableFifoMode>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800132c:	f000 f99c 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2400038c 	.word	0x2400038c
 8001338:	40005000 	.word	0x40005000

0800133c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_UART7_Init+0x90>)
 8001342:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <MX_UART7_Init+0x94>)
 8001344:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_UART7_Init+0x90>)
 8001348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800134c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_UART7_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_UART7_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_UART7_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_RX;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_UART7_Init+0x90>)
 8001362:	2204      	movs	r2, #4
 8001364:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_UART7_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_UART7_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_UART7_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_UART7_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_UART7_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_UART7_Init+0x90>)
 8001386:	f00b fecd 	bl	800d124 <HAL_HalfDuplex_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 f96a 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_UART7_Init+0x90>)
 8001398:	f00d ff77 	bl	800f28a <HAL_UARTEx_SetTxFifoThreshold>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80013a2:	f000 f961 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_UART7_Init+0x90>)
 80013aa:	f00d ffac 	bl	800f306 <HAL_UARTEx_SetRxFifoThreshold>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 f958 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_UART7_Init+0x90>)
 80013ba:	f00d ff2d 	bl	800f218 <HAL_UARTEx_DisableFifoMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 f950 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2400041c 	.word	0x2400041c
 80013d0:	40007800 	.word	0x40007800

080013d4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_UART8_Init+0x90>)
 80013da:	4a23      	ldr	r2, [pc, #140]	; (8001468 <MX_UART8_Init+0x94>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_UART8_Init+0x90>)
 80013e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013e4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_UART8_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_UART8_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_UART8_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_RX;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_UART8_Init+0x90>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_UART8_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_UART8_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_UART8_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_UART8_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_UART8_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 800141c:	4811      	ldr	r0, [pc, #68]	; (8001464 <MX_UART8_Init+0x90>)
 800141e:	f00b fe81 	bl	800d124 <HAL_HalfDuplex_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001428:	f000 f91e 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_UART8_Init+0x90>)
 8001430:	f00d ff2b 	bl	800f28a <HAL_UARTEx_SetTxFifoThreshold>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800143a:	f000 f915 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <MX_UART8_Init+0x90>)
 8001442:	f00d ff60 	bl	800f306 <HAL_UARTEx_SetRxFifoThreshold>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800144c:	f000 f90c 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_UART8_Init+0x90>)
 8001452:	f00d fee1 	bl	800f218 <HAL_UARTEx_DisableFifoMode>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800145c:	f000 f904 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	240004ac 	.word	0x240004ac
 8001468:	40007c00 	.word	0x40007c00

0800146c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <MX_USART1_UART_Init+0x94>)
 8001474:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001478:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800147c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_USART1_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001492:	2208      	movs	r2, #8
 8001494:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_USART1_UART_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80014b4:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014b6:	f00b fe35 	bl	800d124 <HAL_HalfDuplex_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014c0:	f000 f8d2 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014c8:	f00d fedf 	bl	800f28a <HAL_UARTEx_SetTxFifoThreshold>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014d2:	f000 f8c9 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014da:	f00d ff14 	bl	800f306 <HAL_UARTEx_SetRxFifoThreshold>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f000 f8c0 	bl	8001668 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014ea:	f00d fe95 	bl	800f218 <HAL_UARTEx_DisableFifoMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f000 f8b8 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2400053c 	.word	0x2400053c
 8001500:	40011000 	.word	0x40011000

08001504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <MX_DMA_Init+0x7c>)
 800150c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <MX_DMA_Init+0x7c>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_DMA_Init+0x7c>)
 800151c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	200b      	movs	r0, #11
 800152e:	f003 fce0 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001532:	200b      	movs	r0, #11
 8001534:	f003 fcf7 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	200c      	movs	r0, #12
 800153e:	f003 fcd8 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001542:	200c      	movs	r0, #12
 8001544:	f003 fcef 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	200d      	movs	r0, #13
 800154e:	f003 fcd0 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001552:	200d      	movs	r0, #13
 8001554:	f003 fce7 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	200e      	movs	r0, #14
 800155e:	f003 fcc8 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001562:	200e      	movs	r0, #14
 8001564:	f003 fcdf 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	200f      	movs	r0, #15
 800156e:	f003 fcc0 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001572:	200f      	movs	r0, #15
 8001574:	f003 fcd7 	bl	8004f26 <HAL_NVIC_EnableIRQ>

}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	58024400 	.word	0x58024400

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <MX_GPIO_Init+0xdc>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	4a28      	ldr	r2, [pc, #160]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	4a20      	ldr	r2, [pc, #128]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	4a19      	ldr	r2, [pc, #100]	; (8001660 <MX_GPIO_Init+0xdc>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_GPIO_Init+0xdc>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_GPIO_Init+0xdc>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	4a11      	ldr	r2, [pc, #68]	; (8001660 <MX_GPIO_Init+0xdc>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_GPIO_Init+0xdc>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2102      	movs	r1, #2
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <MX_GPIO_Init+0xe0>)
 8001636:	f006 fc95 	bl	8007f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800163a:	2302      	movs	r3, #2
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_GPIO_Init+0xe0>)
 8001652:	f006 fabf 	bl	8007bd4 <HAL_GPIO_Init>

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	58024400 	.word	0x58024400
 8001664:	58020000 	.word	0x58020000

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
 8001672:	0000      	movs	r0, r0
 8001674:	0000      	movs	r0, r0
	...

08001678 <calc_angles>:
#define YAW 0
#define PITCH 1
#define ROLL 2

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 8001678:	b580      	push	{r7, lr}
 800167a:	ed2d 8b04 	vpush	{d8-d9}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gyro_x / FREQ;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001690:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 80019e0 <calc_angles+0x368>
 8001694:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  mpu6050->gyro_angle[Y] += -mpu6050->gyro_y / FREQ; // Change sign to match the accelerometer's one
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80016ae:	eef1 6a67 	vneg.f32	s13, s15
 80016b2:	ed9f 6acb 	vldr	s12, [pc, #812]	; 80019e0 <calc_angles+0x368>
 80016b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80016ca:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016d4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edd3 7a08 	vldr	s15, [r3, #32]
 80016de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e2:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80019b8 <calc_angles+0x340>
 80016e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016ea:	eeb0 0b47 	vmov.f64	d0, d7
 80016ee:	f00e fe4f 	bl	8010390 <sin>
 80016f2:	eeb0 7b40 	vmov.f64	d7, d0
 80016f6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80016fa:	ee38 7b07 	vadd.f64	d7, d8, d7
 80016fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800170e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001718:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001722:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001726:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80019b8 <calc_angles+0x340>
 800172a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800172e:	eeb0 0b47 	vmov.f64	d0, d7
 8001732:	f00e fe2d 	bl	8010390 <sin>
 8001736:	eeb0 7b40 	vmov.f64	d7, d0
 800173a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800173e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001742:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001752:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001756:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800175a:	eeb0 0b47 	vmov.f64	d0, d7
 800175e:	f00e fbc3 	bl	800fee8 <pow>
 8001762:	eeb0 8b40 	vmov.f64	d8, d0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edd3 7a03 	vldr	s15, [r3, #12]
 800176c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001770:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001774:	eeb0 0b47 	vmov.f64	d0, d7
 8001778:	f00e fbb6 	bl	800fee8 <pow>
 800177c:	eeb0 7b40 	vmov.f64	d7, d0
 8001780:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edd3 7a04 	vldr	s15, [r3, #16]
 800178a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800178e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001792:	eeb0 0b47 	vmov.f64	d0, d7
 8001796:	f00e fba7 	bl	800fee8 <pow>
 800179a:	eeb0 7b40 	vmov.f64	d7, d0
 800179e:	ee38 7b07 	vadd.f64	d7, d8, d7
 80017a2:	eeb0 0b47 	vmov.f64	d0, d7
 80017a6:	f00e ffe3 	bl	8010770 <sqrt>
 80017aa:	eeb0 7b40 	vmov.f64	d7, d0
 80017ae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80017b2:	ee17 2a90 	vmov	r2, s15
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	679a      	str	r2, [r3, #120]	; 0x78

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c4:	ee17 3a90 	vmov	r3, s15
 80017c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017d4:	429a      	cmp	r2, r3
 80017d6:	da1b      	bge.n	8001810 <calc_angles+0x198>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	edd3 6a03 	vldr	s13, [r3, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017f2:	eeb0 0b47 	vmov.f64	d0, d7
 80017f6:	f00e ff8f 	bl	8010718 <asin>
 80017fa:	eeb0 7b40 	vmov.f64	d7, d0
 80017fe:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80019c0 <calc_angles+0x348>
 8001802:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001806:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	edd3 7a03 	vldr	s15, [r3, #12]
 8001816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181a:	ee17 3a90 	vmov	r3, s15
 800181e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001822:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800182a:	429a      	cmp	r2, r3
 800182c:	da1b      	bge.n	8001866 <calc_angles+0x1ee>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edd3 6a02 	vldr	s13, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001844:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001848:	eeb0 0b47 	vmov.f64	d0, d7
 800184c:	f00e ff64 	bl	8010718 <asin>
 8001850:	eeb0 7b40 	vmov.f64	d7, d0
 8001854:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80019c0 <calc_angles+0x348>
 8001858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800185c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  }

  if (mpu6050->initialized == 1) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800186c:	2b01      	cmp	r3, #1
 800186e:	d132      	bne.n	80018d6 <calc_angles+0x25e>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001876:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800187a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800187e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001888:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800188c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8001890:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001894:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001898:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80018a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ac:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80018b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80018ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80018c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80018c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 80018d4:	e00b      	b.n	80018ee <calc_angles+0x276>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	659a      	str	r2, [r3, #88]	; 0x58

    mpu6050->initialized = 1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80018f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018f8:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80019c8 <calc_angles+0x350>
 80018fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001906:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800190a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80019d0 <calc_angles+0x358>
 800190e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001912:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001916:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001926:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800192a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80019c8 <calc_angles+0x350>
 800192e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001938:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800193c:	ed9f 5b24 	vldr	d5, [pc, #144]	; 80019d0 <calc_angles+0x358>
 8001940:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001944:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001948:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  mpu6050->measures[YAW] = -mpu6050->gyro_z; // Store the angular motion for this axis
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001958:	eef1 7a67 	vneg.f32	s15, s15
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001968:	eef1 7a67 	vneg.f32	s15, s15
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001978:	eef1 7a67 	vneg.f32	s15, s15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001988:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001992:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001996:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80019d8 <calc_angles+0x360>
 800199a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800199e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80019a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	ecbd 8b04 	vpop	{d8-d9}
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	695f8190 	.word	0x695f8190
 80019bc:	3f06e05a 	.word	0x3f06e05a
 80019c0:	1a63c1f8 	.word	0x1a63c1f8
 80019c4:	404ca5dc 	.word	0x404ca5dc
 80019c8:	cccccccd 	.word	0xcccccccd
 80019cc:	3feccccc 	.word	0x3feccccc
 80019d0:	9999999a 	.word	0x9999999a
 80019d4:	3fb99999 	.word	0x3fb99999
 80019d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019dc:	3f50624d 	.word	0x3f50624d
 80019e0:	43c80000 	.word	0x43c80000

080019e4 <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	460b      	mov	r3, r1
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	4613      	mov	r3, r2
 80019f8:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	22d0      	movs	r2, #208	; 0xd0
 8001a04:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e00a      	b.n	8001a22 <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f006 fe89 	bl	8008728 <HAL_I2C_GetState>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d006      	beq.n	8001a2a <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	ddf1      	ble.n	8001a0c <MPU6050_init+0x28>
 8001a28:	e000      	b.n	8001a2c <MPU6050_init+0x48>
      break;
 8001a2a:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	dd01      	ble.n	8001a36 <MPU6050_init+0x52>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1e1      	b.n	8001dfa <MPU6050_init+0x416>

  // Check MPU id
  uint8_t whoiam = 0x75;
 8001a36:	2375      	movs	r3, #117	; 0x75
 8001a38:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e011      	b.n	8001a64 <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	791b      	ldrb	r3, [r3, #4]
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	f107 021b 	add.w	r2, r7, #27
 8001a4e:	2364      	movs	r3, #100	; 0x64
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	f006 fb4a 	bl	80080ec <HAL_I2C_Master_Transmit>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3301      	adds	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	ddea      	ble.n	8001a40 <MPU6050_init+0x5c>
 8001a6a:	e000      	b.n	8001a6e <MPU6050_init+0x8a>
      break;
 8001a6c:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	dd01      	ble.n	8001a78 <MPU6050_init+0x94>
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1c0      	b.n	8001dfa <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	e011      	b.n	8001aa2 <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	791b      	ldrb	r3, [r3, #4]
 8001a86:	b299      	uxth	r1, r3
 8001a88:	f107 021a 	add.w	r2, r7, #26
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2301      	movs	r3, #1
 8001a92:	f006 fc1f 	bl	80082d4 <HAL_I2C_Master_Receive>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	ddea      	ble.n	8001a7e <MPU6050_init+0x9a>
 8001aa8:	e000      	b.n	8001aac <MPU6050_init+0xc8>
      break;
 8001aaa:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	dd01      	ble.n	8001ab6 <MPU6050_init+0xd2>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	e1a1      	b.n	8001dfa <MPU6050_init+0x416>

  if (whoiam_res != 0x68) return 5;
 8001ab6:	7ebb      	ldrb	r3, [r7, #26]
 8001ab8:	2b68      	cmp	r3, #104	; 0x68
 8001aba:	d001      	beq.n	8001ac0 <MPU6050_init+0xdc>
 8001abc:	2305      	movs	r3, #5
 8001abe:	e19c      	b.n	8001dfa <MPU6050_init+0x416>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001ac0:	236b      	movs	r3, #107	; 0x6b
 8001ac2:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	e011      	b.n	8001aee <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	791b      	ldrb	r3, [r3, #4]
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	f107 0218 	add.w	r2, r7, #24
 8001ad8:	2364      	movs	r3, #100	; 0x64
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2302      	movs	r3, #2
 8001ade:	f006 fb05 	bl	80080ec <HAL_I2C_Master_Transmit>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	3301      	adds	r3, #1
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	ddea      	ble.n	8001aca <MPU6050_init+0xe6>
 8001af4:	e000      	b.n	8001af8 <MPU6050_init+0x114>
      break;
 8001af6:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	dd01      	ble.n	8001b02 <MPU6050_init+0x11e>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e17b      	b.n	8001dfa <MPU6050_init+0x416>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 8001b02:	2319      	movs	r3, #25
 8001b04:	753b      	strb	r3, [r7, #20]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e011      	b.n	8001b34 <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	791b      	ldrb	r3, [r3, #4]
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	f107 0214 	add.w	r2, r7, #20
 8001b1e:	2364      	movs	r3, #100	; 0x64
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2302      	movs	r3, #2
 8001b24:	f006 fae2 	bl	80080ec <HAL_I2C_Master_Transmit>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	ddea      	ble.n	8001b10 <MPU6050_init+0x12c>
 8001b3a:	e000      	b.n	8001b3e <MPU6050_init+0x15a>
      break;
 8001b3c:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	dd01      	ble.n	8001b48 <MPU6050_init+0x164>
 8001b44:	2307      	movs	r3, #7
 8001b46:	e158      	b.n	8001dfa <MPU6050_init+0x416>

  // Set accel config
  uint8_t accel_config = 0x1C;
 8001b48:	231c      	movs	r3, #28
 8001b4a:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	e011      	b.n	8001b76 <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	b299      	uxth	r1, r3
 8001b5c:	f107 0213 	add.w	r2, r7, #19
 8001b60:	2364      	movs	r3, #100	; 0x64
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	f006 fac1 	bl	80080ec <HAL_I2C_Master_Transmit>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	ddea      	ble.n	8001b52 <MPU6050_init+0x16e>
 8001b7c:	e000      	b.n	8001b80 <MPU6050_init+0x19c>
      break;
 8001b7e:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	dd01      	ble.n	8001b8a <MPU6050_init+0x1a6>
 8001b86:	2308      	movs	r3, #8
 8001b88:	e137      	b.n	8001dfa <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e011      	b.n	8001bb4 <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	791b      	ldrb	r3, [r3, #4]
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	f107 0213 	add.w	r2, r7, #19
 8001b9e:	2364      	movs	r3, #100	; 0x64
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f006 fb96 	bl	80082d4 <HAL_I2C_Master_Receive>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	ddea      	ble.n	8001b90 <MPU6050_init+0x1ac>
 8001bba:	e000      	b.n	8001bbe <MPU6050_init+0x1da>
      break;
 8001bbc:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	dd01      	ble.n	8001bc8 <MPU6050_init+0x1e4>
 8001bc4:	2309      	movs	r3, #9
 8001bc6:	e118      	b.n	8001dfa <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001bc8:	7cfb      	ldrb	r3, [r7, #19]
 8001bca:	b25b      	sxtb	r3, r3
 8001bcc:	f023 0318 	bic.w	r3, r3, #24
 8001bd0:	b25a      	sxtb	r2, r3
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	e011      	b.n	8001c0a <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	791b      	ldrb	r3, [r3, #4]
 8001bee:	b299      	uxth	r1, r3
 8001bf0:	f107 0213 	add.w	r2, r7, #19
 8001bf4:	2364      	movs	r3, #100	; 0x64
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f006 fa77 	bl	80080ec <HAL_I2C_Master_Transmit>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	3301      	adds	r3, #1
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	ddea      	ble.n	8001be6 <MPU6050_init+0x202>
 8001c10:	e000      	b.n	8001c14 <MPU6050_init+0x230>
      break;
 8001c12:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	dd01      	ble.n	8001c1e <MPU6050_init+0x23a>
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	e0ed      	b.n	8001dfa <MPU6050_init+0x416>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8001c1e:	231b      	movs	r3, #27
 8001c20:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e011      	b.n	8001c4c <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	791b      	ldrb	r3, [r3, #4]
 8001c30:	b299      	uxth	r1, r3
 8001c32:	f107 0212 	add.w	r2, r7, #18
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f006 fa56 	bl	80080ec <HAL_I2C_Master_Transmit>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	ddea      	ble.n	8001c28 <MPU6050_init+0x244>
 8001c52:	e000      	b.n	8001c56 <MPU6050_init+0x272>
      break;
 8001c54:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	dd01      	ble.n	8001c60 <MPU6050_init+0x27c>
 8001c5c:	230b      	movs	r3, #11
 8001c5e:	e0cc      	b.n	8001dfa <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e011      	b.n	8001c8a <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	791b      	ldrb	r3, [r3, #4]
 8001c6e:	b299      	uxth	r1, r3
 8001c70:	f107 0212 	add.w	r2, r7, #18
 8001c74:	2364      	movs	r3, #100	; 0x64
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f006 fb2b 	bl	80082d4 <HAL_I2C_Master_Receive>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	3301      	adds	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	ddea      	ble.n	8001c66 <MPU6050_init+0x282>
 8001c90:	e000      	b.n	8001c94 <MPU6050_init+0x2b0>
      break;
 8001c92:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	dd01      	ble.n	8001c9e <MPU6050_init+0x2ba>
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	e0ad      	b.n	8001dfa <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8001c9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	f023 0318 	bic.w	r3, r3, #24
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	e011      	b.n	8001ce2 <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	791b      	ldrb	r3, [r3, #4]
 8001cc6:	b299      	uxth	r1, r3
 8001cc8:	f107 0212 	add.w	r2, r7, #18
 8001ccc:	2364      	movs	r3, #100	; 0x64
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f006 fa0b 	bl	80080ec <HAL_I2C_Master_Transmit>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	ddea      	ble.n	8001cbe <MPU6050_init+0x2da>
 8001ce8:	e000      	b.n	8001cec <MPU6050_init+0x308>
      break;
 8001cea:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	dd01      	ble.n	8001cf6 <MPU6050_init+0x312>
 8001cf2:	230d      	movs	r3, #13
 8001cf4:	e081      	b.n	8001dfa <MPU6050_init+0x416>
  #define MPU6050_DLPF_BW_94          0x02
  #define MPU6050_DLPF_BW_44          0x03
  #define MPU6050_DLPF_BW_21          0x04
  #define MPU6050_DLPF_BW_10          0x05
  #define MPU6050_DLPF_BW_5           0x06
  uint8_t lpf[2] = {0x1A, MPU6050_DLPF_BW_94};
 8001cf6:	f240 231a 	movw	r3, #538	; 0x21a
 8001cfa:	823b      	strh	r3, [r7, #16]
  for (counter = 0; counter < 5; counter += 1) {
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	e011      	b.n	8001d26 <MPU6050_init+0x342>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, lpf, 2, 100) == HAL_OK) {
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	791b      	ldrb	r3, [r3, #4]
 8001d0a:	b299      	uxth	r1, r3
 8001d0c:	f107 0210 	add.w	r2, r7, #16
 8001d10:	2364      	movs	r3, #100	; 0x64
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2302      	movs	r3, #2
 8001d16:	f006 f9e9 	bl	80080ec <HAL_I2C_Master_Transmit>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <MPU6050_init+0x34a>
  for (counter = 0; counter < 5; counter += 1) {
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	3301      	adds	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	ddea      	ble.n	8001d02 <MPU6050_init+0x31e>
 8001d2c:	e000      	b.n	8001d30 <MPU6050_init+0x34c>
      break;
 8001d2e:	bf00      	nop
    }
  }
  if (counter >= 5) return 14;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	dd01      	ble.n	8001d3a <MPU6050_init+0x356>
 8001d36:	230e      	movs	r3, #14
 8001d38:	e05f      	b.n	8001dfa <MPU6050_init+0x416>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3380      	adds	r3, #128	; 0x80
 8001d3e:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001e04 <MPU6050_init+0x420>
 8001d42:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d46:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fe5e 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3398      	adds	r3, #152	; 0x98
 8001d54:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001e04 <MPU6050_init+0x420>
 8001d58:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d5c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fe53 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	33b0      	adds	r3, #176	; 0xb0
 8001d6a:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001e04 <MPU6050_init+0x420>
 8001d6e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d72:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fe48 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 1.0); // Gyro x
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	33c8      	adds	r3, #200	; 0xc8
 8001d80:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001d84:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d88:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fe3d 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 1.0); // Gyro y
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	33e0      	adds	r3, #224	; 0xe0
 8001d96:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001d9a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d9e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fe32 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 1.0); // Gyro z
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	33f8      	adds	r3, #248	; 0xf8
 8001dac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001db0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001db4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fe27 	bl	8000a0c <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3354      	adds	r3, #84	; 0x54
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00d fb66 	bl	800f498 <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3360      	adds	r3, #96	; 0x60
 8001dd0:	220c      	movs	r2, #12
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f00d fb5f 	bl	800f498 <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	336c      	adds	r3, #108	; 0x6c
 8001dde:	220c      	movs	r2, #12
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f00d fb58 	bl	800f498 <memset>
  mpu6050->initialized = 0;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  mpu6050->angle_z = 0;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	3dcccccd 	.word	0x3dcccccd

08001e08 <MPU6050_set_offset>:

void MPU6050_set_offset(mpu6050_t *mpu6050,
    float ax_offset, float ay_offset, float az_offset,
    float gx_offset, float gy_offset, float gz_offset) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	61f8      	str	r0, [r7, #28]
 8001e10:	ed87 0a06 	vstr	s0, [r7, #24]
 8001e14:	edc7 0a05 	vstr	s1, [r7, #20]
 8001e18:	ed87 1a04 	vstr	s2, [r7, #16]
 8001e1c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001e20:	ed87 2a02 	vstr	s4, [r7, #8]
 8001e24:	edc7 2a01 	vstr	s5, [r7, #4]
  mpu6050->ax_offset = ax_offset;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
  mpu6050->ay_offset = ay_offset;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
  mpu6050->az_offset = az_offset;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
  mpu6050->gx_offset = gx_offset;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
  mpu6050->gy_offset = gy_offset;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
  mpu6050->gz_offset = gz_offset;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e4c:	bf00      	nop
 8001e4e:	3724      	adds	r7, #36	; 0x24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <MPU6050_calibrate>:

void MPU6050_calibrate(mpu6050_t *mpu6050) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  int gx = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  int gy = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
  int gz = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

#ifdef CALIBRATE_ANGLE
  int ax = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
  int ay = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
#endif

  HAL_Delay(2000);
 8001e74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e78:	f002 ff30 	bl	8004cdc <HAL_Delay>
  for (int i = 0; i < 1100; i += 1) {
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	e058      	b.n	8001f34 <MPU6050_calibrate+0xdc>
    MPU6050_update(mpu6050);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8b8 	bl	8001ff8 <MPU6050_update>
    HAL_Delay(3);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f002 ff27 	bl	8004cdc <HAL_Delay>
    if (i < 100) continue;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b63      	cmp	r3, #99	; 0x63
 8001e92:	dd4b      	ble.n	8001f2c <MPU6050_calibrate+0xd4>
    gx += mpu6050->gx;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eac:	ee17 3a90 	vmov	r3, s15
 8001eb0:	61fb      	str	r3, [r7, #28]
    gy += mpu6050->gy;
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eca:	ee17 3a90 	vmov	r3, s15
 8001ece:	61bb      	str	r3, [r7, #24]
    gz += mpu6050->gz;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee8:	ee17 3a90 	vmov	r3, s15
 8001eec:	617b      	str	r3, [r7, #20]

#ifdef CALIBRATE_ANGLE
    ax += mpu6050->ax;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f06:	ee17 3a90 	vmov	r3, s15
 8001f0a:	613b      	str	r3, [r7, #16]
    ay += mpu6050->ay;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f24:	ee17 3a90 	vmov	r3, s15
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e000      	b.n	8001f2e <MPU6050_calibrate+0xd6>
    if (i < 100) continue;
 8001f2c:	bf00      	nop
  for (int i = 0; i < 1100; i += 1) {
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3301      	adds	r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f240 424b 	movw	r2, #1099	; 0x44b
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	dda1      	ble.n	8001e82 <MPU6050_calibrate+0x2a>
#endif

  }

  gx = gx/1000;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <MPU6050_calibrate+0x198>)
 8001f42:	fb82 1203 	smull	r1, r2, r2, r3
 8001f46:	1192      	asrs	r2, r2, #6
 8001f48:	17db      	asrs	r3, r3, #31
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	61fb      	str	r3, [r7, #28]
  gy = gy/1000;
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <MPU6050_calibrate+0x198>)
 8001f52:	fb82 1203 	smull	r1, r2, r2, r3
 8001f56:	1192      	asrs	r2, r2, #6
 8001f58:	17db      	asrs	r3, r3, #31
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	61bb      	str	r3, [r7, #24]
  gz = gz/1000;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <MPU6050_calibrate+0x198>)
 8001f62:	fb82 1203 	smull	r1, r2, r2, r3
 8001f66:	1192      	asrs	r2, r2, #6
 8001f68:	17db      	asrs	r3, r3, #31
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]

#ifdef CALIBRATE_ANGLE
  ax = ax/1000;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <MPU6050_calibrate+0x198>)
 8001f72:	fb82 1203 	smull	r1, r2, r2, r3
 8001f76:	1192      	asrs	r2, r2, #6
 8001f78:	17db      	asrs	r3, r3, #31
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	613b      	str	r3, [r7, #16]
  ay = ay/1000;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <MPU6050_calibrate+0x198>)
 8001f82:	fb82 1203 	smull	r1, r2, r2, r3
 8001f86:	1192      	asrs	r2, r2, #6
 8001f88:	17db      	asrs	r3, r3, #31
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	60fb      	str	r3, [r7, #12]
#endif

  MPU6050_set_offset(mpu6050, -ax, -ay, 0, -gx, -gy, -gz);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	425b      	negs	r3, r3
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	ee07 3a10 	vmov	s14, r3
 8001fa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	425b      	negs	r3, r3
 8001faa:	ee06 3a90 	vmov	s13, r3
 8001fae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	425b      	negs	r3, r3
 8001fb6:	ee06 3a10 	vmov	s12, r3
 8001fba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	ee05 3a90 	vmov	s11, r3
 8001fc6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001fca:	eef0 2a65 	vmov.f32	s5, s11
 8001fce:	eeb0 2a46 	vmov.f32	s4, s12
 8001fd2:	eef0 1a66 	vmov.f32	s3, s13
 8001fd6:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8001ff4 <MPU6050_calibrate+0x19c>
 8001fda:	eef0 0a47 	vmov.f32	s1, s14
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff10 	bl	8001e08 <MPU6050_set_offset>
}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	10624dd3 	.word	0x10624dd3
 8001ff4:	00000000 	.word	0x00000000

08001ff8 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af04      	add	r7, sp, #16
 8001ffe:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14, 10);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	b299      	uxth	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002010:	220a      	movs	r2, #10
 8002012:	9202      	str	r2, [sp, #8]
 8002014:	220e      	movs	r2, #14
 8002016:	9201      	str	r2, [sp, #4]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2301      	movs	r3, #1
 800201c:	223b      	movs	r2, #59	; 0x3b
 800201e:	f006 fa4f 	bl	80084c0 <HAL_I2C_Mem_Read>
//  HAL_I2C_Mem_Read_IT(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14);
//  HAL_I2C_Mem_Read_DMA(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14);
  MPU6050_parse_6axis(mpu6050);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f804 	bl	8002030 <MPU6050_parse_6axis>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(mpu6050->rx_buffer[0] << 8 | mpu6050->rx_buffer[1]);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	b21a      	sxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b21b      	sxth	r3, r3
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(mpu6050->rx_buffer[2] << 8 | mpu6050->rx_buffer[3]);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b21a      	sxth	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800206c:	b21b      	sxth	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b21b      	sxth	r3, r3
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(mpu6050->rx_buffer[4] << 8 | mpu6050->rx_buffer[5]);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	b21a      	sxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8002090:	b21b      	sxth	r3, r3
 8002092:	4313      	orrs	r3, r2
 8002094:	b21b      	sxth	r3, r3
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	edc3 7a04 	vstr	s15, [r3, #16]

//  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax);
//  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay);
//  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az);

  mpu6050->ax = mpu6050->ax + mpu6050->ax_offset;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = mpu6050->ay + mpu6050->ay_offset;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = mpu6050->az + mpu6050->az_offset;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (mpu6050->rx_buffer[6] << 8 | mpu6050->rx_buffer[7]);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 80020fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002108:	eddf 6a44 	vldr	s13, [pc, #272]	; 800221c <MPU6050_parse_6axis+0x1ec>
 800210c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002110:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002220 <MPU6050_parse_6axis+0x1f0>
 8002114:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(mpu6050->rx_buffer[8] << 8 | mpu6050->rx_buffer[9]);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	b21a      	sxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800212e:	b21b      	sxth	r3, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	b21b      	sxth	r3, r3
 8002134:	425b      	negs	r3, r3
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(mpu6050->rx_buffer[10] << 8 | mpu6050->rx_buffer[11]);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21a      	sxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8002154:	b21b      	sxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b21b      	sxth	r3, r3
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(mpu6050->rx_buffer[12] << 8 | mpu6050->rx_buffer[13]);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	b21a      	sxth	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21b      	sxth	r3, r3
 800217e:	425b      	negs	r3, r3
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	edc3 7a08 	vstr	s15, [r3, #32]

//  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx);
//  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy);
//  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz);

  mpu6050->gx = mpu6050->gx + mpu6050->gx_offset;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	ed93 7a06 	vldr	s14, [r3, #24]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy + mpu6050->gy_offset;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80021b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz + mpu6050->gz_offset;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80021c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gyro_x = mpu6050->gx / SSF_GYRO;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80021d6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002224 <MPU6050_parse_6axis+0x1f4>
 80021da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_y = mpu6050->gy / SSF_GYRO;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80021ea:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002224 <MPU6050_parse_6axis+0x1f4>
 80021ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  mpu6050->gyro_z = mpu6050->gz / SSF_GYRO;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80021fe:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002224 <MPU6050_parse_6axis+0x1f4>
 8002202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  calc_angles(mpu6050);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff fa33 	bl	8001678 <calc_angles>
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	43aa0000 	.word	0x43aa0000
 8002220:	42121eb8 	.word	0x42121eb8
 8002224:	42830000 	.word	0x42830000

08002228 <_reset>:
#define TEMP_OSR_2048 0x56
#define TEMP_OSR_4096 0x58

#define LIMIT(number, min, max) (number < min ? min : (number > max ? max : number))

void _reset(ms5611_t *ms5611) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af02      	add	r7, sp, #8
 800222e:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_RESET;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	221e      	movs	r2, #30
 8002234:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1 , &ms5611->tx, 1, 100);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f103 0216 	add.w	r2, r3, #22
 8002240:	2364      	movs	r3, #100	; 0x64
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	21ee      	movs	r1, #238	; 0xee
 8002248:	f005 ff50 	bl	80080ec <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 800224c:	200a      	movs	r0, #10
 800224e:	f002 fd45 	bl	8004cdc <HAL_Delay>

  // For Temperature > 20 Celsius
  ms5611->T2 = 0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  ms5611->OFF2 = 0;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  ms5611->SENS2 = 0;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

  average_filter_init(&ms5611->af, 20);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	334c      	adds	r3, #76	; 0x4c
 800226e:	2114      	movs	r1, #20
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fbe4 	bl	8000a3e <average_filter_init>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_read_PROM>:

void _read_PROM(ms5611_t *ms5611) {
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af02      	add	r7, sp, #8
 8002284:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_PROM_C0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	22a0      	movs	r2, #160	; 0xa0
 800228a:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f103 0216 	add.w	r2, r3, #22
 8002296:	2364      	movs	r3, #100	; 0x64
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	21ee      	movs	r1, #238	; 0xee
 800229e:	f005 ff25 	bl	80080ec <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	1d1a      	adds	r2, r3, #4
 80022aa:	2364      	movs	r3, #100	; 0x64
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2302      	movs	r3, #2
 80022b0:	21ee      	movs	r1, #238	; 0xee
 80022b2:	f006 f80f 	bl	80082d4 <HAL_I2C_Master_Receive>
  ms5611->C[0] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	791b      	ldrb	r3, [r3, #4]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	b21a      	sxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	795b      	ldrb	r3, [r3, #5]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	831a      	strh	r2, [r3, #24]
  HAL_Delay(10);
 80022ce:	200a      	movs	r0, #10
 80022d0:	f002 fd04 	bl	8004cdc <HAL_Delay>

  ms5611->tx = CMD_PROM_C1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	22a2      	movs	r2, #162	; 0xa2
 80022d8:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f103 0216 	add.w	r2, r3, #22
 80022e4:	2364      	movs	r3, #100	; 0x64
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2301      	movs	r3, #1
 80022ea:	21ee      	movs	r1, #238	; 0xee
 80022ec:	f005 fefe 	bl	80080ec <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	1d1a      	adds	r2, r3, #4
 80022f8:	2364      	movs	r3, #100	; 0x64
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2302      	movs	r3, #2
 80022fe:	21ee      	movs	r1, #238	; 0xee
 8002300:	f005 ffe8 	bl	80082d4 <HAL_I2C_Master_Receive>
  ms5611->C[1] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	791b      	ldrb	r3, [r3, #4]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	b21a      	sxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	795b      	ldrb	r3, [r3, #5]
 8002310:	b21b      	sxth	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b21b      	sxth	r3, r3
 8002316:	b29a      	uxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	835a      	strh	r2, [r3, #26]
  HAL_Delay(10);
 800231c:	200a      	movs	r0, #10
 800231e:	f002 fcdd 	bl	8004cdc <HAL_Delay>

  ms5611->tx = CMD_PROM_C2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	22a4      	movs	r2, #164	; 0xa4
 8002326:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f103 0216 	add.w	r2, r3, #22
 8002332:	2364      	movs	r3, #100	; 0x64
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2301      	movs	r3, #1
 8002338:	21ee      	movs	r1, #238	; 0xee
 800233a:	f005 fed7 	bl	80080ec <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	1d1a      	adds	r2, r3, #4
 8002346:	2364      	movs	r3, #100	; 0x64
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2302      	movs	r3, #2
 800234c:	21ee      	movs	r1, #238	; 0xee
 800234e:	f005 ffc1 	bl	80082d4 <HAL_I2C_Master_Receive>
  ms5611->C[2] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	791b      	ldrb	r3, [r3, #4]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	b21a      	sxth	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	795b      	ldrb	r3, [r3, #5]
 800235e:	b21b      	sxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b21b      	sxth	r3, r3
 8002364:	b29a      	uxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	839a      	strh	r2, [r3, #28]
  HAL_Delay(10);
 800236a:	200a      	movs	r0, #10
 800236c:	f002 fcb6 	bl	8004cdc <HAL_Delay>

  ms5611->tx = CMD_PROM_C3;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	22a6      	movs	r2, #166	; 0xa6
 8002374:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f103 0216 	add.w	r2, r3, #22
 8002380:	2364      	movs	r3, #100	; 0x64
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2301      	movs	r3, #1
 8002386:	21ee      	movs	r1, #238	; 0xee
 8002388:	f005 feb0 	bl	80080ec <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	2364      	movs	r3, #100	; 0x64
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2302      	movs	r3, #2
 800239a:	21ee      	movs	r1, #238	; 0xee
 800239c:	f005 ff9a 	bl	80082d4 <HAL_I2C_Master_Receive>
  ms5611->C[3] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	791b      	ldrb	r3, [r3, #4]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	795b      	ldrb	r3, [r3, #5]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	83da      	strh	r2, [r3, #30]
  HAL_Delay(10);
 80023b8:	200a      	movs	r0, #10
 80023ba:	f002 fc8f 	bl	8004cdc <HAL_Delay>

  ms5611->tx = CMD_PROM_C4;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	22a8      	movs	r2, #168	; 0xa8
 80023c2:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f103 0216 	add.w	r2, r3, #22
 80023ce:	2364      	movs	r3, #100	; 0x64
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	21ee      	movs	r1, #238	; 0xee
 80023d6:	f005 fe89 	bl	80080ec <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	1d1a      	adds	r2, r3, #4
 80023e2:	2364      	movs	r3, #100	; 0x64
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2302      	movs	r3, #2
 80023e8:	21ee      	movs	r1, #238	; 0xee
 80023ea:	f005 ff73 	bl	80082d4 <HAL_I2C_Master_Receive>
  ms5611->C[4] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	791b      	ldrb	r3, [r3, #4]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	795b      	ldrb	r3, [r3, #5]
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	841a      	strh	r2, [r3, #32]
  HAL_Delay(10);
 8002406:	200a      	movs	r0, #10
 8002408:	f002 fc68 	bl	8004cdc <HAL_Delay>

  ms5611->tx = CMD_PROM_C5;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	22aa      	movs	r2, #170	; 0xaa
 8002410:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f103 0216 	add.w	r2, r3, #22
 800241c:	2364      	movs	r3, #100	; 0x64
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2301      	movs	r3, #1
 8002422:	21ee      	movs	r1, #238	; 0xee
 8002424:	f005 fe62 	bl	80080ec <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	2364      	movs	r3, #100	; 0x64
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2302      	movs	r3, #2
 8002436:	21ee      	movs	r1, #238	; 0xee
 8002438:	f005 ff4c 	bl	80082d4 <HAL_I2C_Master_Receive>
  ms5611->C[5] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	791b      	ldrb	r3, [r3, #4]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	795b      	ldrb	r3, [r3, #5]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21b      	sxth	r3, r3
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	845a      	strh	r2, [r3, #34]	; 0x22
  HAL_Delay(10);
 8002454:	200a      	movs	r0, #10
 8002456:	f002 fc41 	bl	8004cdc <HAL_Delay>

  ms5611->tx = CMD_PROM_C6;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	22ac      	movs	r2, #172	; 0xac
 800245e:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 0216 	add.w	r2, r3, #22
 800246a:	2364      	movs	r3, #100	; 0x64
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2301      	movs	r3, #1
 8002470:	21ee      	movs	r1, #238	; 0xee
 8002472:	f005 fe3b 	bl	80080ec <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	1d1a      	adds	r2, r3, #4
 800247e:	2364      	movs	r3, #100	; 0x64
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2302      	movs	r3, #2
 8002484:	21ee      	movs	r1, #238	; 0xee
 8002486:	f005 ff25 	bl	80082d4 <HAL_I2C_Master_Receive>
  ms5611->C[6] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	791b      	ldrb	r3, [r3, #4]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b21a      	sxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	795b      	ldrb	r3, [r3, #5]
 8002496:	b21b      	sxth	r3, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	b21b      	sxth	r3, r3
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	849a      	strh	r2, [r3, #36]	; 0x24
  HAL_Delay(10);
 80024a2:	200a      	movs	r0, #10
 80024a4:	f002 fc1a 	bl	8004cdc <HAL_Delay>

  ms5611->tx = CMD_PROM_C7;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	22ae      	movs	r2, #174	; 0xae
 80024ac:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f103 0216 	add.w	r2, r3, #22
 80024b8:	2364      	movs	r3, #100	; 0x64
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2301      	movs	r3, #1
 80024be:	21ee      	movs	r1, #238	; 0xee
 80024c0:	f005 fe14 	bl	80080ec <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1d1a      	adds	r2, r3, #4
 80024cc:	2364      	movs	r3, #100	; 0x64
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2302      	movs	r3, #2
 80024d2:	21ee      	movs	r1, #238	; 0xee
 80024d4:	f005 fefe 	bl	80082d4 <HAL_I2C_Master_Receive>
  ms5611->C[7] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	791b      	ldrb	r3, [r3, #4]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	b21a      	sxth	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	795b      	ldrb	r3, [r3, #5]
 80024e4:	b21b      	sxth	r3, r3
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_Delay(10);
 80024f0:	200a      	movs	r0, #10
 80024f2:	f002 fbf3 	bl	8004cdc <HAL_Delay>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <MS5611_init>:

int MS5611_init(ms5611_t *ms5611, I2C_HandleTypeDef *i2c) {
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  ms5611->i2c = i2c;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	601a      	str	r2, [r3, #0]

  _reset(ms5611);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fe8a 	bl	8002228 <_reset>
  _read_PROM(ms5611);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff feb2 	bl	800227e <_read_PROM>

  return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <MS5611_req_temperature>:

void MS5611_req_temperature(ms5611_t *ms5611, OSR osr) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af02      	add	r7, sp, #8
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = TEMP_OSR_256 + (2 * osr);
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	3328      	adds	r3, #40	; 0x28
 8002534:	b2db      	uxtb	r3, r3
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 10);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f103 0216 	add.w	r2, r3, #22
 8002548:	230a      	movs	r3, #10
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2301      	movs	r3, #1
 800254e:	21ee      	movs	r1, #238	; 0xee
 8002550:	f005 fdcc 	bl	80080ec <HAL_I2C_Master_Transmit>
//  HAL_I2C_Master_Transmit_DMA(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1);
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <MS5611_req_pressure>:

void MS5611_req_pressure(ms5611_t *ms5611, OSR osr) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = PRESSURE_OSR_256 + (2 * osr);
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	3320      	adds	r3, #32
 800256c:	b2db      	uxtb	r3, r3
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	b2da      	uxtb	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 10);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f103 0216 	add.w	r2, r3, #22
 8002580:	230a      	movs	r3, #10
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2301      	movs	r3, #1
 8002586:	21ee      	movs	r1, #238	; 0xee
 8002588:	f005 fdb0 	bl	80080ec <HAL_I2C_Master_Transmit>
//  HAL_I2C_Master_Transmit_DMA(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1);
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <MS5611_read_temperature>:

void MS5611_read_temperature(ms5611_t *ms5611) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af04      	add	r7, sp, #16
 800259a:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	759a      	strb	r2, [r3, #22]
//  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
//  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_temp, 3, 100);
  HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR << 1 , 0x00, 1, ms5611->rx_temp, 3, 10);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3310      	adds	r3, #16
 80025aa:	220a      	movs	r2, #10
 80025ac:	9202      	str	r2, [sp, #8]
 80025ae:	2203      	movs	r2, #3
 80025b0:	9201      	str	r2, [sp, #4]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2301      	movs	r3, #1
 80025b6:	2200      	movs	r2, #0
 80025b8:	21ee      	movs	r1, #238	; 0xee
 80025ba:	f005 ff81 	bl	80084c0 <HAL_I2C_Mem_Read>
//  HAL_I2C_Mem_Read_DMA(ms5611->i2c, MS5611_ADDR <<1 , 0x00, 1, ms5611->rx_temp, 3);

  ms5611->digi_tem_D2 = (ms5611->rx_temp[0] << 16) | (ms5611->rx_temp[1] << 8) | ms5611->rx_temp[2];
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7c1b      	ldrb	r3, [r3, #16]
 80025c2:	041a      	lsls	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7c5b      	ldrb	r3, [r3, #17]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	4313      	orrs	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	7c92      	ldrb	r2, [r2, #18]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	461a      	mov	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <MS5611_read_pressure>:

void MS5611_read_pressure(ms5611_t *ms5611) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	759a      	strb	r2, [r3, #22]
//  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
//  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_press, 3, 100);
  HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR << 1, 0x00, 1, ms5611->rx_press, 3, 10);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3313      	adds	r3, #19
 80025f6:	220a      	movs	r2, #10
 80025f8:	9202      	str	r2, [sp, #8]
 80025fa:	2203      	movs	r2, #3
 80025fc:	9201      	str	r2, [sp, #4]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	2200      	movs	r2, #0
 8002604:	21ee      	movs	r1, #238	; 0xee
 8002606:	f005 ff5b 	bl	80084c0 <HAL_I2C_Mem_Read>
//  HAL_I2C_Mem_Read_DMA(ms5611->i2c, MS5611_ADDR << 1, 0x00, 1, ms5611->rx_press, 3);

  ms5611->digi_psr_D1 = ms5611->rx_press[0] << 16 | ms5611->rx_press[1] << 8 | ms5611->rx_press[2];
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7cdb      	ldrb	r3, [r3, #19]
 800260e:	041a      	lsls	r2, r3, #16
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7d1b      	ldrb	r3, [r3, #20]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	4313      	orrs	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	7d52      	ldrb	r2, [r2, #21]
 800261c:	4313      	orrs	r3, r2
 800261e:	461a      	mov	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <MS5611_calc_temperature>:

void MS5611_calc_temperature(ms5611_t *ms5611) {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  ms5611->dT = ms5611->C[5];
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT <<= 8; // Calculated up to C5 * 2^8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	021a      	lsls	r2, r3, #8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT *= -1; // Apply negative sign
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	425a      	negs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT += ms5611->digi_tem_D2; // = D2 - C5 * 2^8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	4413      	add	r3, r2
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	631a      	str	r2, [r3, #48]	; 0x30

  ms5611->TEMP = ms5611->dT * ms5611->C[6];
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800266c:	fb03 f202 	mul.w	r2, r3, r2
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP >>= 23; // Calculated up to dT * C6 / 2^23
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	15da      	asrs	r2, r3, #23
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP += 2000;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	635a      	str	r2, [r3, #52]	; 0x34
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <MS5611_calc_pressure>:

void MS5611_calc_pressure(ms5611_t *ms5611) {
 8002698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800269c:	ed2d 8b02 	vpush	{d8}
 80026a0:	b08c      	sub	sp, #48	; 0x30
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  ms5611->OFF = ms5611->C[2];
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	8b9b      	ldrh	r3, [r3, #28]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2200      	movs	r2, #0
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	61fa      	str	r2, [r7, #28]
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80026b8:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
  ms5611->OFF <<= 16; // Calculated up to C2 * 2^16
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	0419      	lsls	r1, r3, #16
 80026cc:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80026d0:	0410      	lsls	r0, r2, #16
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
  ms5611->OFF += (ms5611->C[4] * ms5611->dT) >> 7;
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	8c1b      	ldrh	r3, [r3, #32]
 80026e2:	461a      	mov	r2, r3
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	11db      	asrs	r3, r3, #7
 80026ee:	17da      	asrs	r2, r3, #31
 80026f0:	623b      	str	r3, [r7, #32]
 80026f2:	627a      	str	r2, [r7, #36]	; 0x24
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	18c3      	adds	r3, r0, r3
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	eb41 0303 	adc.w	r3, r1, r3
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002708:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38


  ms5611->SENS = ms5611->C[1];
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	8b5b      	ldrh	r3, [r3, #26]
 8002710:	b29b      	uxth	r3, r3
 8002712:	2200      	movs	r2, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	60fa      	str	r2, [r7, #12]
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800271e:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40
  ms5611->SENS <<= 15; // Calculated up to C1 * 2^15
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	03cb      	lsls	r3, r1, #15
 8002732:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 8002736:	03c2      	lsls	r2, r0, #15
 8002738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800273a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  ms5611->SENS += (ms5611->C[3] * ms5611->dT) >>8;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002746:	8bc9      	ldrh	r1, [r1, #30]
 8002748:	4608      	mov	r0, r1
 800274a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800274c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800274e:	fb00 f101 	mul.w	r1, r0, r1
 8002752:	1209      	asrs	r1, r1, #8
 8002754:	17c8      	asrs	r0, r1, #31
 8002756:	468a      	mov	sl, r1
 8002758:	4683      	mov	fp, r0
 800275a:	eb12 010a 	adds.w	r1, r2, sl
 800275e:	6039      	str	r1, [r7, #0]
 8002760:	eb43 030b 	adc.w	r3, r3, fp
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	e9d7 1200 	ldrd	r1, r2, [r7]
 800276c:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

  ms5611->P = ((ms5611->digi_psr_D1 * ms5611->SENS) / pow(2, 21) - ms5611->OFF) / pow(2, 15);
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	2200      	movs	r2, #0
 8002776:	4698      	mov	r8, r3
 8002778:	4691      	mov	r9, r2
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002780:	fb02 f009 	mul.w	r0, r2, r9
 8002784:	fb08 f103 	mul.w	r1, r8, r3
 8002788:	4401      	add	r1, r0
 800278a:	fba8 4502 	umull	r4, r5, r8, r2
 800278e:	194b      	adds	r3, r1, r5
 8002790:	461d      	mov	r5, r3
 8002792:	4620      	mov	r0, r4
 8002794:	4629      	mov	r1, r5
 8002796:	f7fd ff89 	bl	80006ac <__aeabi_l2d>
 800279a:	ec41 0b16 	vmov	d6, r0, r1
 800279e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80027e0 <MS5611_calc_pressure+0x148>
 80027a2:	ee86 8b07 	vdiv.f64	d8, d6, d7
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fd ff7c 	bl	80006ac <__aeabi_l2d>
 80027b4:	ec41 0b17 	vmov	d7, r0, r1
 80027b8:	ee38 6b47 	vsub.f64	d6, d8, d7
 80027bc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80027e8 <MS5611_calc_pressure+0x150>
 80027c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80027c8:	ee17 2a90 	vmov	r2, s15
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	649a      	str	r2, [r3, #72]	; 0x48
}
 80027d0:	bf00      	nop
 80027d2:	3730      	adds	r7, #48	; 0x30
 80027d4:	46bd      	mov	sp, r7
 80027d6:	ecbd 8b02 	vpop	{d8}
 80027da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027de:	bf00      	nop
 80027e0:	00000000 	.word	0x00000000
 80027e4:	41400000 	.word	0x41400000
 80027e8:	00000000 	.word	0x00000000
 80027ec:	40e00000 	.word	0x40e00000

080027f0 <MS5611_calc_altitude>:

#define SEA_PRESSURE 1013.25f
void MS5611_calc_altitude(ms5611_t *ms5611) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  float temperature = (float)ms5611->TEMP/100.f;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002804:	eddf 6a66 	vldr	s13, [pc, #408]	; 80029a0 <MS5611_calc_altitude+0x1b0>
 8002808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800280c:	edc7 7a05 	vstr	s15, [r7, #20]
  float pressure = (float)ms5611->P/100.f;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281c:	eddf 6a60 	vldr	s13, [pc, #384]	; 80029a0 <MS5611_calc_altitude+0x1b0>
 8002820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002824:	edc7 7a04 	vstr	s15, [r7, #16]

  // Apply average filter for altitude
  ms5611->fast_pressure = average_filter_update(&ms5611->af, pressure);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	334c      	adds	r3, #76	; 0x4c
 800282c:	ed97 0a04 	vldr	s0, [r7, #16]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe f922 	bl	8000a7a <average_filter_update>
 8002836:	eef0 7a40 	vmov.f32	s15, s0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	edc3 7a7a 	vstr	s15, [r3, #488]	; 0x1e8

  // Apply complementary filter
  ms5611->slow_pressure = ms5611->slow_pressure*0.99 + ms5611->fast_pressure*0.01;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8002846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800284a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8002978 <MS5611_calc_altitude+0x188>
 800284e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8002858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800285c:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8002980 <MS5611_calc_altitude+0x190>
 8002860:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002864:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002868:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

  // Fix slow response problem
  float diff = LIMIT(ms5611->fast_pressure - ms5611->slow_pressure, -8, 8);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 800287e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002882:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8002886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288e:	d502      	bpl.n	8002896 <MS5611_calc_altitude+0xa6>
 8002890:	eefa 7a00 	vmov.f32	s15, #160	; 0xc1000000 -8.0
 8002894:	e019      	b.n	80028ca <MS5611_calc_altitude+0xda>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80028a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80028aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	dd02      	ble.n	80028ba <MS5611_calc_altitude+0xca>
 80028b4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80028b8:	e007      	b.n	80028ca <MS5611_calc_altitude+0xda>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80028c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ca:	edc7 7a03 	vstr	s15, [r7, #12]
  if (diff < -0.012 || diff > 0.012)
 80028ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80028d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028d6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8002988 <MS5611_calc_altitude+0x198>
 80028da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e2:	d40a      	bmi.n	80028fa <MS5611_calc_altitude+0x10a>
 80028e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028ec:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002990 <MS5611_calc_altitude+0x1a0>
 80028f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	dd13      	ble.n	8002922 <MS5611_calc_altitude+0x132>
    ms5611->slow_pressure += 0.2*diff;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8002900:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002904:	edd7 7a03 	vldr	s15, [r7, #12]
 8002908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800290c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002998 <MS5611_calc_altitude+0x1a8>
 8002910:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002914:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002918:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

  pressure = ms5611->slow_pressure;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8002928:	613b      	str	r3, [r7, #16]

  ms5611->altitude = (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 800292a:	edd7 7a04 	vldr	s15, [r7, #16]
 800292e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80029a4 <MS5611_calc_altitude+0x1b4>
 8002932:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002936:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80029a8 <MS5611_calc_altitude+0x1b8>
 800293a:	eeb0 0a47 	vmov.f32	s0, s14
 800293e:	f00d fd8b 	bl	8010458 <powf>
 8002942:	eef0 7a40 	vmov.f32	s15, s0
 8002946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800294a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800294e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002952:	eddf 6a16 	vldr	s13, [pc, #88]	; 80029ac <MS5611_calc_altitude+0x1bc>
 8002956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800295a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295e:	eddf 6a14 	vldr	s13, [pc, #80]	; 80029b0 <MS5611_calc_altitude+0x1c0>
 8002962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
}
 800296c:	bf00      	nop
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	f3af 8000 	nop.w
 8002978:	7ae147ae 	.word	0x7ae147ae
 800297c:	3fefae14 	.word	0x3fefae14
 8002980:	47ae147b 	.word	0x47ae147b
 8002984:	3f847ae1 	.word	0x3f847ae1
 8002988:	bc6a7efa 	.word	0xbc6a7efa
 800298c:	bf889374 	.word	0xbf889374
 8002990:	bc6a7efa 	.word	0xbc6a7efa
 8002994:	3f889374 	.word	0x3f889374
 8002998:	9999999a 	.word	0x9999999a
 800299c:	3fc99999 	.word	0x3fc99999
 80029a0:	42c80000 	.word	0x42c80000
 80029a4:	447d5000 	.word	0x447d5000
 80029a8:	3e42c9b7 	.word	0x3e42c9b7
 80029ac:	43889333 	.word	0x43889333
 80029b0:	3bd4fdf4 	.word	0x3bd4fdf4

080029b4 <MS5611_update>:
// Counter checks depend on timer frequency
#define STEP_1 0
#define STEP_2 7
#define STEP_3 14
#define STEP_END 21
void MS5611_update(ms5611_t *ms5611) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  static int counter = 0;

  if (counter == STEP_1) {
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <MS5611_update+0x70>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <MS5611_update+0x18>
    MS5611_req_temperature(ms5611, OSR_4096);
 80029c4:	2104      	movs	r1, #4
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff fdac 	bl	8002524 <MS5611_req_temperature>
  }

  if (counter == STEP_2) {
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <MS5611_update+0x70>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b07      	cmp	r3, #7
 80029d2:	d109      	bne.n	80029e8 <MS5611_update+0x34>
    MS5611_read_temperature(ms5611);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff fddd 	bl	8002594 <MS5611_read_temperature>
    MS5611_calc_temperature(ms5611);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fe26 	bl	800262c <MS5611_calc_temperature>
    MS5611_req_pressure(ms5611, OSR_4096);
 80029e0:	2104      	movs	r1, #4
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff fdba 	bl	800255c <MS5611_req_pressure>
  }

  if (counter == STEP_3) {
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <MS5611_update+0x70>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b0e      	cmp	r3, #14
 80029ee:	d108      	bne.n	8002a02 <MS5611_update+0x4e>
    MS5611_read_pressure(ms5611);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fdf5 	bl	80025e0 <MS5611_read_pressure>
    MS5611_calc_pressure(ms5611);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fe4e 	bl	8002698 <MS5611_calc_pressure>
    MS5611_calc_altitude(ms5611);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff fef7 	bl	80027f0 <MS5611_calc_altitude>
  }

  counter += 1;
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <MS5611_update+0x70>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3301      	adds	r3, #1
 8002a08:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <MS5611_update+0x70>)
 8002a0a:	6013      	str	r3, [r2, #0]
  if (counter >= STEP_END)
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <MS5611_update+0x70>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b14      	cmp	r3, #20
 8002a12:	dd02      	ble.n	8002a1a <MS5611_update+0x66>
    counter = 0;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <MS5611_update+0x70>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	240007ac 	.word	0x240007ac

08002a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_MspInit+0x30>)
 8002a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a34:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_MspInit+0x30>)
 8002a36:	f043 0302 	orr.w	r3, r3, #2
 8002a3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_MspInit+0x30>)
 8002a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	58024400 	.word	0x58024400

08002a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0b8      	sub	sp, #224	; 0xe0
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	22bc      	movs	r2, #188	; 0xbc
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f00c fd0b 	bl	800f498 <memset>
  if(hi2c->Instance==I2C1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a3f      	ldr	r2, [pc, #252]	; (8002b84 <HAL_I2C_MspInit+0x128>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d176      	bne.n	8002b7a <HAL_I2C_MspInit+0x11e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a96:	f107 0310 	add.w	r3, r7, #16
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f007 f9aa 	bl	8009df4 <HAL_RCCEx_PeriphCLKConfig>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002aa6:	f7fe fddf 	bl	8001668 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <HAL_I2C_MspInit+0x12c>)
 8002aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab0:	4a35      	ldr	r2, [pc, #212]	; (8002b88 <HAL_I2C_MspInit+0x12c>)
 8002ab2:	f043 0302 	orr.w	r3, r3, #2
 8002ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aba:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <HAL_I2C_MspInit+0x12c>)
 8002abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ac8:	23c0      	movs	r3, #192	; 0xc0
 8002aca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ace:	2312      	movs	r3, #18
 8002ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002aea:	4619      	mov	r1, r3
 8002aec:	4827      	ldr	r0, [pc, #156]	; (8002b8c <HAL_I2C_MspInit+0x130>)
 8002aee:	f005 f871 	bl	8007bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_I2C_MspInit+0x12c>)
 8002af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002af8:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <HAL_I2C_MspInit+0x12c>)
 8002afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002afe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b02:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <HAL_I2C_MspInit+0x12c>)
 8002b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream4;
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b12:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <HAL_I2C_MspInit+0x138>)
 8002b14:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b18:	2221      	movs	r2, #33	; 0x21
 8002b1a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b22:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b2e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b30:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002b4e:	4810      	ldr	r0, [pc, #64]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b50:	f002 fa04 	bl	8004f5c <HAL_DMA_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_MspInit+0x102>
    {
      Error_Handler();
 8002b5a:	f7fe fd85 	bl	8001668 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_I2C_MspInit+0x134>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	201f      	movs	r0, #31
 8002b70:	f002 f9bf 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b74:	201f      	movs	r0, #31
 8002b76:	f002 f9d6 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b7a:	bf00      	nop
 8002b7c:	37e0      	adds	r7, #224	; 0xe0
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40005400 	.word	0x40005400
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	58020400 	.word	0x58020400
 8002b90:	24000108 	.word	0x24000108
 8002b94:	40020070 	.word	0x40020070

08002b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08e      	sub	sp, #56	; 0x38
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d10f      	bne.n	8002bda <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc0:	4a61      	ldr	r2, [pc, #388]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bca:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	623b      	str	r3, [r7, #32]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002bd8:	e0b1      	b.n	8002d3e <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM4)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5b      	ldr	r2, [pc, #364]	; (8002d4c <HAL_TIM_Base_MspInit+0x1b4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d137      	bne.n	8002c54 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002be4:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bea:	4a57      	ldr	r2, [pc, #348]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bf4:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c08:	4a4f      	ldr	r2, [pc, #316]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c12:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c20:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c32:	2302      	movs	r3, #2
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4844      	ldr	r0, [pc, #272]	; (8002d50 <HAL_TIM_Base_MspInit+0x1b8>)
 8002c3e:	f004 ffc9 	bl	8007bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2101      	movs	r1, #1
 8002c46:	201e      	movs	r0, #30
 8002c48:	f002 f953 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c4c:	201e      	movs	r0, #30
 8002c4e:	f002 f96a 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 8002c52:	e074      	b.n	8002d3e <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM5)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3e      	ldr	r2, [pc, #248]	; (8002d54 <HAL_TIM_Base_MspInit+0x1bc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d136      	bne.n	8002ccc <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c64:	4a38      	ldr	r2, [pc, #224]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c82:	4a31      	ldr	r2, [pc, #196]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002caa:	2302      	movs	r3, #2
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4828      	ldr	r0, [pc, #160]	; (8002d58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002cb6:	f004 ff8d 	bl	8007bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	2032      	movs	r0, #50	; 0x32
 8002cc0:	f002 f917 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002cc4:	2032      	movs	r0, #50	; 0x32
 8002cc6:	f002 f92e 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 8002cca:	e038      	b.n	8002d3e <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM6)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_TIM_Base_MspInit+0x1c4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d117      	bne.n	8002d06 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cd6:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cdc:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002cde:	f043 0310 	orr.w	r3, r3, #16
 8002ce2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	2036      	movs	r0, #54	; 0x36
 8002cfa:	f002 f8fa 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cfe:	2036      	movs	r0, #54	; 0x36
 8002d00:	f002 f911 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 8002d04:	e01b      	b.n	8002d3e <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM7)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <HAL_TIM_Base_MspInit+0x1c8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d116      	bne.n	8002d3e <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002d18:	f043 0320 	orr.w	r3, r3, #32
 8002d1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_TIM_Base_MspInit+0x1b0>)
 8002d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2102      	movs	r1, #2
 8002d32:	2037      	movs	r0, #55	; 0x37
 8002d34:	f002 f8dd 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d38:	2037      	movs	r0, #55	; 0x37
 8002d3a:	f002 f8f4 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 8002d3e:	bf00      	nop
 8002d40:	3738      	adds	r7, #56	; 0x38
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	40000800 	.word	0x40000800
 8002d50:	58020c00 	.word	0x58020c00
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	58020000 	.word	0x58020000
 8002d5c:	40001000 	.word	0x40001000
 8002d60:	40001400 	.word	0x40001400

08002d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d13d      	bne.n	8002e02 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_TIM_MspPostInit+0xa8>)
 8002d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d8c:	4a1f      	ldr	r2, [pc, #124]	; (8002e0c <HAL_TIM_MspPostInit+0xa8>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_TIM_MspPostInit+0xa8>)
 8002d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_TIM_MspPostInit+0xa8>)
 8002da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002daa:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <HAL_TIM_MspPostInit+0xa8>)
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_TIM_MspPostInit+0xa8>)
 8002db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002dc2:	232c      	movs	r3, #44	; 0x2c
 8002dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <HAL_TIM_MspPostInit+0xac>)
 8002dde:	f004 fef9 	bl	8007bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002de2:	2308      	movs	r3, #8
 8002de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002df2:	2301      	movs	r3, #1
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4805      	ldr	r0, [pc, #20]	; (8002e14 <HAL_TIM_MspPostInit+0xb0>)
 8002dfe:	f004 fee9 	bl	8007bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e02:	bf00      	nop
 8002e04:	3728      	adds	r7, #40	; 0x28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	58024400 	.word	0x58024400
 8002e10:	58020000 	.word	0x58020000
 8002e14:	58020400 	.word	0x58020400

08002e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b0c0      	sub	sp, #256	; 0x100
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e34:	22bc      	movs	r2, #188	; 0xbc
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f00c fb2d 	bl	800f498 <memset>
  if(huart->Instance==UART4)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7e      	ldr	r2, [pc, #504]	; (800303c <HAL_UART_MspInit+0x224>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d179      	bne.n	8002f3c <HAL_UART_MspInit+0x124>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e56:	4618      	mov	r0, r3
 8002e58:	f006 ffcc 	bl	8009df4 <HAL_RCCEx_PeriphCLKConfig>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e62:	f7fe fc01 	bl	8001668 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e66:	4b76      	ldr	r3, [pc, #472]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e6c:	4a74      	ldr	r2, [pc, #464]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e76:	4b72      	ldr	r3, [pc, #456]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e84:	4b6e      	ldr	r3, [pc, #440]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8a:	4a6d      	ldr	r2, [pc, #436]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eaa:	2312      	movs	r3, #18
 8002eac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8002ebc:	2306      	movs	r3, #6
 8002ebe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	485e      	ldr	r0, [pc, #376]	; (8003044 <HAL_UART_MspInit+0x22c>)
 8002eca:	f004 fe83 	bl	8007bd4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream0;
 8002ece:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002ed0:	4a5e      	ldr	r2, [pc, #376]	; (800304c <HAL_UART_MspInit+0x234>)
 8002ed2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002ed4:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002ed6:	223f      	movs	r2, #63	; 0x3f
 8002ed8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eda:	4b5b      	ldr	r3, [pc, #364]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee0:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee6:	4b58      	ldr	r3, [pc, #352]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eec:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eee:	4b56      	ldr	r3, [pc, #344]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ef4:	4b54      	ldr	r3, [pc, #336]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002efa:	4b53      	ldr	r3, [pc, #332]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f00:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f02:	4b51      	ldr	r3, [pc, #324]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f08:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002f0e:	484e      	ldr	r0, [pc, #312]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002f10:	f002 f824 	bl	8004f5c <HAL_DMA_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8002f1a:	f7fe fba5 	bl	8001668 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a49      	ldr	r2, [pc, #292]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002f22:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f24:	4a48      	ldr	r2, [pc, #288]	; (8003048 <HAL_UART_MspInit+0x230>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	2034      	movs	r0, #52	; 0x34
 8002f30:	f001 ffdf 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002f34:	2034      	movs	r0, #52	; 0x34
 8002f36:	f001 fff6 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f3a:	e1de      	b.n	80032fa <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART5)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a43      	ldr	r2, [pc, #268]	; (8003050 <HAL_UART_MspInit+0x238>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	f040 808c 	bne.w	8003060 <HAL_UART_MspInit+0x248>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f56:	4618      	mov	r0, r3
 8002f58:	f006 ff4c 	bl	8009df4 <HAL_RCCEx_PeriphCLKConfig>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8002f62:	f7fe fb81 	bl	8001668 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f66:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f6c:	4a34      	ldr	r2, [pc, #208]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f76:	4b32      	ldr	r3, [pc, #200]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f84:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f94:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <HAL_UART_MspInit+0x228>)
 8002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002faa:	2312      	movs	r3, #18
 8002fac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002fbc:	230e      	movs	r3, #14
 8002fbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4822      	ldr	r0, [pc, #136]	; (8003054 <HAL_UART_MspInit+0x23c>)
 8002fca:	f004 fe03 	bl	8007bd4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_UART_MspInit+0x240>)
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <HAL_UART_MspInit+0x244>)
 8002fd2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002fd4:	4b20      	ldr	r3, [pc, #128]	; (8003058 <HAL_UART_MspInit+0x240>)
 8002fd6:	2241      	movs	r2, #65	; 0x41
 8002fd8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_UART_MspInit+0x240>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_UART_MspInit+0x240>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_UART_MspInit+0x240>)
 8002fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fec:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_UART_MspInit+0x240>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_UART_MspInit+0x240>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <HAL_UART_MspInit+0x240>)
 8002ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003000:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_UART_MspInit+0x240>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_UART_MspInit+0x240>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800300e:	4812      	ldr	r0, [pc, #72]	; (8003058 <HAL_UART_MspInit+0x240>)
 8003010:	f001 ffa4 	bl	8004f5c <HAL_DMA_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_UART_MspInit+0x206>
      Error_Handler();
 800301a:	f7fe fb25 	bl	8001668 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <HAL_UART_MspInit+0x240>)
 8003022:	67da      	str	r2, [r3, #124]	; 0x7c
 8003024:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <HAL_UART_MspInit+0x240>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 2, 0);
 800302a:	2200      	movs	r2, #0
 800302c:	2102      	movs	r1, #2
 800302e:	2035      	movs	r0, #53	; 0x35
 8003030:	f001 ff5f 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003034:	2035      	movs	r0, #53	; 0x35
 8003036:	f001 ff76 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 800303a:	e15e      	b.n	80032fa <HAL_UART_MspInit+0x4e2>
 800303c:	40004c00 	.word	0x40004c00
 8003040:	58024400 	.word	0x58024400
 8003044:	58020000 	.word	0x58020000
 8003048:	240005cc 	.word	0x240005cc
 800304c:	40020010 	.word	0x40020010
 8003050:	40005000 	.word	0x40005000
 8003054:	58020400 	.word	0x58020400
 8003058:	24000644 	.word	0x24000644
 800305c:	40020028 	.word	0x40020028
  else if(huart->Instance==UART7)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4aa7      	ldr	r2, [pc, #668]	; (8003304 <HAL_UART_MspInit+0x4ec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d179      	bne.n	800315e <HAL_UART_MspInit+0x346>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800306a:	2302      	movs	r3, #2
 800306c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 800306e:	2303      	movs	r3, #3
 8003070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003078:	4618      	mov	r0, r3
 800307a:	f006 febb 	bl	8009df4 <HAL_RCCEx_PeriphCLKConfig>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8003084:	f7fe faf0 	bl	8001668 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003088:	4b9f      	ldr	r3, [pc, #636]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 800308a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800308e:	4a9e      	ldr	r2, [pc, #632]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 8003090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003094:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003098:	4b9b      	ldr	r3, [pc, #620]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 800309a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800309e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030a6:	4b98      	ldr	r3, [pc, #608]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 80030a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ac:	4a96      	ldr	r2, [pc, #600]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 80030ae:	f043 0310 	orr.w	r3, r3, #16
 80030b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030b6:	4b94      	ldr	r3, [pc, #592]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 80030b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030cc:	2312      	movs	r3, #18
 80030ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80030de:	2307      	movs	r3, #7
 80030e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030e8:	4619      	mov	r1, r3
 80030ea:	4888      	ldr	r0, [pc, #544]	; (800330c <HAL_UART_MspInit+0x4f4>)
 80030ec:	f004 fd72 	bl	8007bd4 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 80030f0:	4b87      	ldr	r3, [pc, #540]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 80030f2:	4a88      	ldr	r2, [pc, #544]	; (8003314 <HAL_UART_MspInit+0x4fc>)
 80030f4:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80030f6:	4b86      	ldr	r3, [pc, #536]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 80030f8:	224f      	movs	r2, #79	; 0x4f
 80030fa:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030fc:	4b84      	ldr	r3, [pc, #528]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003102:	4b83      	ldr	r3, [pc, #524]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 8003104:	2200      	movs	r2, #0
 8003106:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003108:	4b81      	ldr	r3, [pc, #516]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 800310a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800310e:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003110:	4b7f      	ldr	r3, [pc, #508]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 8003112:	2200      	movs	r2, #0
 8003114:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003116:	4b7e      	ldr	r3, [pc, #504]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 8003118:	2200      	movs	r2, #0
 800311a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800311c:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 800311e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003122:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003124:	4b7a      	ldr	r3, [pc, #488]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 8003126:	2200      	movs	r2, #0
 8003128:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312a:	4b79      	ldr	r3, [pc, #484]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 800312c:	2200      	movs	r2, #0
 800312e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8003130:	4877      	ldr	r0, [pc, #476]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 8003132:	f001 ff13 	bl	8004f5c <HAL_DMA_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_UART_MspInit+0x328>
      Error_Handler();
 800313c:	f7fe fa94 	bl	8001668 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a73      	ldr	r2, [pc, #460]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 8003144:	67da      	str	r2, [r3, #124]	; 0x7c
 8003146:	4a72      	ldr	r2, [pc, #456]	; (8003310 <HAL_UART_MspInit+0x4f8>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 2, 0);
 800314c:	2200      	movs	r2, #0
 800314e:	2102      	movs	r1, #2
 8003150:	2052      	movs	r0, #82	; 0x52
 8003152:	f001 fece 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003156:	2052      	movs	r0, #82	; 0x52
 8003158:	f001 fee5 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 800315c:	e0cd      	b.n	80032fa <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART8)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6d      	ldr	r2, [pc, #436]	; (8003318 <HAL_UART_MspInit+0x500>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d178      	bne.n	800325a <HAL_UART_MspInit+0x442>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003168:	2302      	movs	r3, #2
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 800316c:	2303      	movs	r3, #3
 800316e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003172:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003176:	4618      	mov	r0, r3
 8003178:	f006 fe3c 	bl	8009df4 <HAL_RCCEx_PeriphCLKConfig>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_UART_MspInit+0x36e>
      Error_Handler();
 8003182:	f7fe fa71 	bl	8001668 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003186:	4b60      	ldr	r3, [pc, #384]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 8003188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800318c:	4a5e      	ldr	r2, [pc, #376]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 800318e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003192:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003196:	4b5c      	ldr	r3, [pc, #368]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 8003198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800319c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031a4:	4b58      	ldr	r3, [pc, #352]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 80031a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031aa:	4a57      	ldr	r2, [pc, #348]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 80031ac:	f043 0310 	orr.w	r3, r3, #16
 80031b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031b4:	4b54      	ldr	r3, [pc, #336]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031c2:	2302      	movs	r3, #2
 80031c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c8:	2312      	movs	r3, #18
 80031ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80031da:	2308      	movs	r3, #8
 80031dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80031e4:	4619      	mov	r1, r3
 80031e6:	4849      	ldr	r0, [pc, #292]	; (800330c <HAL_UART_MspInit+0x4f4>)
 80031e8:	f004 fcf4 	bl	8007bd4 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream3;
 80031ec:	4b4b      	ldr	r3, [pc, #300]	; (800331c <HAL_UART_MspInit+0x504>)
 80031ee:	4a4c      	ldr	r2, [pc, #304]	; (8003320 <HAL_UART_MspInit+0x508>)
 80031f0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_UART_MspInit+0x504>)
 80031f4:	2251      	movs	r2, #81	; 0x51
 80031f6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f8:	4b48      	ldr	r3, [pc, #288]	; (800331c <HAL_UART_MspInit+0x504>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_UART_MspInit+0x504>)
 8003200:	2200      	movs	r2, #0
 8003202:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003204:	4b45      	ldr	r3, [pc, #276]	; (800331c <HAL_UART_MspInit+0x504>)
 8003206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800320a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_UART_MspInit+0x504>)
 800320e:	2200      	movs	r2, #0
 8003210:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003212:	4b42      	ldr	r3, [pc, #264]	; (800331c <HAL_UART_MspInit+0x504>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8003218:	4b40      	ldr	r3, [pc, #256]	; (800331c <HAL_UART_MspInit+0x504>)
 800321a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321e:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003220:	4b3e      	ldr	r3, [pc, #248]	; (800331c <HAL_UART_MspInit+0x504>)
 8003222:	2200      	movs	r2, #0
 8003224:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_UART_MspInit+0x504>)
 8003228:	2200      	movs	r2, #0
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800322c:	483b      	ldr	r0, [pc, #236]	; (800331c <HAL_UART_MspInit+0x504>)
 800322e:	f001 fe95 	bl	8004f5c <HAL_DMA_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_MspInit+0x424>
      Error_Handler();
 8003238:	f7fe fa16 	bl	8001668 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a37      	ldr	r2, [pc, #220]	; (800331c <HAL_UART_MspInit+0x504>)
 8003240:	67da      	str	r2, [r3, #124]	; 0x7c
 8003242:	4a36      	ldr	r2, [pc, #216]	; (800331c <HAL_UART_MspInit+0x504>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2102      	movs	r1, #2
 800324c:	2053      	movs	r0, #83	; 0x53
 800324e:	f001 fe50 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8003252:	2053      	movs	r0, #83	; 0x53
 8003254:	f001 fe67 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 8003258:	e04f      	b.n	80032fa <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==USART1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a31      	ldr	r2, [pc, #196]	; (8003324 <HAL_UART_MspInit+0x50c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d14a      	bne.n	80032fa <HAL_UART_MspInit+0x4e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003264:	2301      	movs	r3, #1
 8003266:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003268:	2318      	movs	r3, #24
 800326a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800326e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003272:	4618      	mov	r0, r3
 8003274:	f006 fdbe 	bl	8009df4 <HAL_RCCEx_PeriphCLKConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_UART_MspInit+0x46a>
      Error_Handler();
 800327e:	f7fe f9f3 	bl	8001668 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003282:	4b21      	ldr	r3, [pc, #132]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 8003284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003288:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 800328a:	f043 0310 	orr.w	r3, r3, #16
 800328e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 8003294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 80032a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a6:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_UART_MspInit+0x4f0>)
 80032b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80032be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c6:	2312      	movs	r3, #18
 80032c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80032d8:	2304      	movs	r3, #4
 80032da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032e2:	4619      	mov	r1, r3
 80032e4:	4810      	ldr	r0, [pc, #64]	; (8003328 <HAL_UART_MspInit+0x510>)
 80032e6:	f004 fc75 	bl	8007bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	210f      	movs	r1, #15
 80032ee:	2025      	movs	r0, #37	; 0x25
 80032f0:	f001 fdff 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032f4:	2025      	movs	r0, #37	; 0x25
 80032f6:	f001 fe16 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 80032fa:	bf00      	nop
 80032fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40007800 	.word	0x40007800
 8003308:	58024400 	.word	0x58024400
 800330c:	58021000 	.word	0x58021000
 8003310:	240006bc 	.word	0x240006bc
 8003314:	40020040 	.word	0x40020040
 8003318:	40007c00 	.word	0x40007c00
 800331c:	24000734 	.word	0x24000734
 8003320:	40020058 	.word	0x40020058
 8003324:	40011000 	.word	0x40011000
 8003328:	58020400 	.word	0x58020400

0800332c <blink>:
void schedule_400hz(void);
void schedule_20hz(void);
void schedule_10hz(void);
void fly(void);

void blink(void) {
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  static int blink = 0;
  if (blink == 40) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <blink+0x30>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b28      	cmp	r3, #40	; 0x28
 8003336:	d103      	bne.n	8003340 <blink+0x14>
 8003338:	2102      	movs	r1, #2
 800333a:	4809      	ldr	r0, [pc, #36]	; (8003360 <blink+0x34>)
 800333c:	f004 fe2b 	bl	8007f96 <HAL_GPIO_TogglePin>
  if (blink >= 40) blink = 0;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <blink+0x30>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b27      	cmp	r3, #39	; 0x27
 8003346:	dd02      	ble.n	800334e <blink+0x22>
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <blink+0x30>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
  blink += 1;
 800334e:	4b03      	ldr	r3, [pc, #12]	; (800335c <blink+0x30>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a01      	ldr	r2, [pc, #4]	; (800335c <blink+0x30>)
 8003356:	6013      	str	r3, [r2, #0]
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}
 800335c:	2400186c 	.word	0x2400186c
 8003360:	58020000 	.word	0x58020000

08003364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003368:	e7fe      	b.n	8003368 <NMI_Handler+0x4>

0800336a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336e:	e7fe      	b.n	800336e <HardFault_Handler+0x4>

08003370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003374:	e7fe      	b.n	8003374 <MemManage_Handler+0x4>

08003376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800337a:	e7fe      	b.n	800337a <BusFault_Handler+0x4>

0800337c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003380:	e7fe      	b.n	8003380 <UsageFault_Handler+0x4>

08003382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b0:	f001 fc74 	bl	8004c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <DMA1_Stream0_IRQHandler+0x10>)
 80033be:	f003 f8f7 	bl	80065b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	240005cc 	.word	0x240005cc

080033cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80033d0:	4802      	ldr	r0, [pc, #8]	; (80033dc <DMA1_Stream1_IRQHandler+0x10>)
 80033d2:	f003 f8ed 	bl	80065b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	24000644 	.word	0x24000644

080033e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <DMA1_Stream2_IRQHandler+0x10>)
 80033e6:	f003 f8e3 	bl	80065b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	240006bc 	.word	0x240006bc

080033f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80033f8:	4802      	ldr	r0, [pc, #8]	; (8003404 <DMA1_Stream3_IRQHandler+0x10>)
 80033fa:	f003 f8d9 	bl	80065b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	24000734 	.word	0x24000734

08003408 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800340c:	4802      	ldr	r0, [pc, #8]	; (8003418 <DMA1_Stream4_IRQHandler+0x10>)
 800340e:	f003 f8cf 	bl	80065b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	24000108 	.word	0x24000108

0800341c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <TIM4_IRQHandler+0x10>)
 8003422:	f008 fc41 	bl	800bca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	240001cc 	.word	0x240001cc

08003430 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <I2C1_EV_IRQHandler+0x10>)
 8003436:	f005 f95d 	bl	80086f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	240000bc 	.word	0x240000bc

08003444 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <USART1_IRQHandler+0x10>)
 800344a:	f009 ffc1 	bl	800d3d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	2400053c 	.word	0x2400053c

08003458 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <TIM5_IRQHandler+0x10>)
 800345e:	f008 fc23 	bl	800bca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	24000218 	.word	0x24000218

0800346c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <UART4_IRQHandler+0x10>)
 8003472:	f009 ffad 	bl	800d3d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	240002fc 	.word	0x240002fc

08003480 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <UART5_IRQHandler+0x10>)
 8003486:	f009 ffa3 	bl	800d3d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2400038c 	.word	0x2400038c

08003494 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  schedule_400hz();
 8003498:	f000 f9d8 	bl	800384c <schedule_400hz>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <TIM6_DAC_IRQHandler+0x14>)
 800349e:	f008 fc03 	bl	800bca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	24000264 	.word	0x24000264

080034ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  schedule_20hz();
 80034b0:	f000 f9e6 	bl	8003880 <schedule_20hz>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <TIM7_IRQHandler+0x14>)
 80034b6:	f008 fbf7 	bl	800bca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	240002b0 	.word	0x240002b0

080034c4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <UART7_IRQHandler+0x10>)
 80034ca:	f009 ff81 	bl	800d3d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	2400041c 	.word	0x2400041c

080034d8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <UART8_IRQHandler+0x10>)
 80034de:	f009 ff77 	bl	800d3d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	240004ac 	.word	0x240004ac

080034ec <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a78      	ldr	r2, [pc, #480]	; (80036dc <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f040 813f 	bne.w	800377e <HAL_TIM_IC_CaptureCallback+0x292>
    switch (htim->Channel) {
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	7f1b      	ldrb	r3, [r3, #28]
 8003504:	3b01      	subs	r3, #1
 8003506:	2b07      	cmp	r3, #7
 8003508:	f200 80e0 	bhi.w	80036cc <HAL_TIM_IC_CaptureCallback+0x1e0>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <HAL_TIM_IC_CaptureCallback+0x28>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003535 	.word	0x08003535
 8003518:	0800359f 	.word	0x0800359f
 800351c:	080036cd 	.word	0x080036cd
 8003520:	08003605 	.word	0x08003605
 8003524:	080036cd 	.word	0x080036cd
 8003528:	080036cd 	.word	0x080036cd
 800352c:	080036cd 	.word	0x080036cd
 8003530:	08003669 	.word	0x08003669
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8003534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003538:	4869      	ldr	r0, [pc, #420]	; (80036e0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800353a:	f004 fcfb 	bl	8007f34 <HAL_GPIO_ReadPin>
 800353e:	4603      	mov	r3, r0
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003544:	2100      	movs	r1, #0
 8003546:	4867      	ldr	r0, [pc, #412]	; (80036e4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8003548:	f008 ff76 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003552:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8003554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003558:	4861      	ldr	r0, [pc, #388]	; (80036e0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800355a:	f004 fceb 	bl	8007f34 <HAL_GPIO_ReadPin>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	f040 80b5 	bne.w	80036d0 <HAL_TIM_IC_CaptureCallback+0x1e4>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003566:	2100      	movs	r1, #0
 8003568:	485e      	ldr	r0, [pc, #376]	; (80036e4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800356a:	f008 ff65 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 800356e:	4603      	mov	r3, r0
 8003570:	461a      	mov	r2, r3
 8003572:	4b5d      	ldr	r3, [pc, #372]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003574:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 8003576:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	4b5b      	ldr	r3, [pc, #364]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	613b      	str	r3, [r7, #16]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2be4      	cmp	r3, #228	; 0xe4
 8003586:	f340 80a3 	ble.w	80036d0 <HAL_TIM_IC_CaptureCallback+0x1e4>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f240 2206 	movw	r2, #518	; 0x206
 8003590:	4293      	cmp	r3, r2
 8003592:	f300 809d 	bgt.w	80036d0 <HAL_TIM_IC_CaptureCallback+0x1e4>
            pwm_in[2] = value;
 8003596:	4a54      	ldr	r2, [pc, #336]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 800359c:	e098      	b.n	80036d0 <HAL_TIM_IC_CaptureCallback+0x1e4>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 800359e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035a2:	484f      	ldr	r0, [pc, #316]	; (80036e0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80035a4:	f004 fcc6 	bl	8007f34 <HAL_GPIO_ReadPin>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_TIM_IC_CaptureCallback+0xd2>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80035ae:	2104      	movs	r1, #4
 80035b0:	484c      	ldr	r0, [pc, #304]	; (80036e4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80035b2:	f008 ff41 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80035bc:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80035be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035c2:	4847      	ldr	r0, [pc, #284]	; (80036e0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80035c4:	f004 fcb6 	bl	8007f34 <HAL_GPIO_ReadPin>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 8082 	bne.w	80036d4 <HAL_TIM_IC_CaptureCallback+0x1e8>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80035d0:	2104      	movs	r1, #4
 80035d2:	4844      	ldr	r0, [pc, #272]	; (80036e4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80035d4:	f008 ff30 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80035de:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 80035e0:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	4b40      	ldr	r3, [pc, #256]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2be4      	cmp	r3, #228	; 0xe4
 80035f0:	dd70      	ble.n	80036d4 <HAL_TIM_IC_CaptureCallback+0x1e8>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f240 2206 	movw	r2, #518	; 0x206
 80035f8:	4293      	cmp	r3, r2
 80035fa:	dc6b      	bgt.n	80036d4 <HAL_TIM_IC_CaptureCallback+0x1e8>
            pwm_in[5] = value;
 80035fc:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 8003602:	e067      	b.n	80036d4 <HAL_TIM_IC_CaptureCallback+0x1e8>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8003604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003608:	4835      	ldr	r0, [pc, #212]	; (80036e0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800360a:	f004 fc93 	bl	8007f34 <HAL_GPIO_ReadPin>
 800360e:	4603      	mov	r3, r0
 8003610:	2b01      	cmp	r3, #1
 8003612:	d107      	bne.n	8003624 <HAL_TIM_IC_CaptureCallback+0x138>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003614:	2108      	movs	r1, #8
 8003616:	4833      	ldr	r0, [pc, #204]	; (80036e4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8003618:	f008 ff0e 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003622:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8003624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003628:	482d      	ldr	r0, [pc, #180]	; (80036e0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800362a:	f004 fc83 	bl	8007f34 <HAL_GPIO_ReadPin>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d151      	bne.n	80036d8 <HAL_TIM_IC_CaptureCallback+0x1ec>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003634:	2108      	movs	r1, #8
 8003636:	482b      	ldr	r0, [pc, #172]	; (80036e4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8003638:	f008 fefe 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003642:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 8003644:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	61bb      	str	r3, [r7, #24]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2be4      	cmp	r3, #228	; 0xe4
 8003654:	dd40      	ble.n	80036d8 <HAL_TIM_IC_CaptureCallback+0x1ec>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f240 2206 	movw	r2, #518	; 0x206
 800365c:	4293      	cmp	r3, r2
 800365e:	dc3b      	bgt.n	80036d8 <HAL_TIM_IC_CaptureCallback+0x1ec>
            pwm_in[8] = value;
 8003660:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 8003666:	e037      	b.n	80036d8 <HAL_TIM_IC_CaptureCallback+0x1ec>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8003668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800366c:	481c      	ldr	r0, [pc, #112]	; (80036e0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800366e:	f004 fc61 	bl	8007f34 <HAL_GPIO_ReadPin>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IC_CaptureCallback+0x19c>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8003678:	210c      	movs	r1, #12
 800367a:	481a      	ldr	r0, [pc, #104]	; (80036e4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800367c:	f008 fedc 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8003688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800368c:	4814      	ldr	r0, [pc, #80]	; (80036e0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800368e:	f004 fc51 	bl	8007f34 <HAL_GPIO_ReadPin>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d129      	bne.n	80036ec <HAL_TIM_IC_CaptureCallback+0x200>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8003698:	210c      	movs	r1, #12
 800369a:	4812      	ldr	r0, [pc, #72]	; (80036e4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800369c:	f008 fecc 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80036aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	61fb      	str	r3, [r7, #28]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2be4      	cmp	r3, #228	; 0xe4
 80036b8:	dd18      	ble.n	80036ec <HAL_TIM_IC_CaptureCallback+0x200>
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f240 2206 	movw	r2, #518	; 0x206
 80036c0:	4293      	cmp	r3, r2
 80036c2:	dc13      	bgt.n	80036ec <HAL_TIM_IC_CaptureCallback+0x200>
            pwm_in[11] = value;
 80036c4:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 80036ca:	e00f      	b.n	80036ec <HAL_TIM_IC_CaptureCallback+0x200>
      default:
        break;
 80036cc:	bf00      	nop
 80036ce:	e00e      	b.n	80036ee <HAL_TIM_IC_CaptureCallback+0x202>
        break;
 80036d0:	bf00      	nop
 80036d2:	e00c      	b.n	80036ee <HAL_TIM_IC_CaptureCallback+0x202>
        break;
 80036d4:	bf00      	nop
 80036d6:	e00a      	b.n	80036ee <HAL_TIM_IC_CaptureCallback+0x202>
        break;
 80036d8:	bf00      	nop
 80036da:	e008      	b.n	80036ee <HAL_TIM_IC_CaptureCallback+0x202>
 80036dc:	40000800 	.word	0x40000800
 80036e0:	58020c00 	.word	0x58020c00
 80036e4:	240001cc 	.word	0x240001cc
 80036e8:	240007f0 	.word	0x240007f0
        break;
 80036ec:	bf00      	nop
    }

    g_throttle = average_filter_update(&g_af[0], pwm_in[2] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 80036ee:	4b4a      	ldr	r3, [pc, #296]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003702:	4846      	ldr	r0, [pc, #280]	; (800381c <HAL_TIM_IC_CaptureCallback+0x330>)
 8003704:	f7fd f9b9 	bl	8000a7a <average_filter_update>
 8003708:	eef0 7a40 	vmov.f32	s15, s0
 800370c:	4b44      	ldr	r3, [pc, #272]	; (8003820 <HAL_TIM_IC_CaptureCallback+0x334>)
 800370e:	edc3 7a00 	vstr	s15, [r3]
    g_yaw = average_filter_update(&g_af[1], pwm_in[5] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8003712:	4b41      	ldr	r3, [pc, #260]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003722:	eeb0 0a67 	vmov.f32	s0, s15
 8003726:	483f      	ldr	r0, [pc, #252]	; (8003824 <HAL_TIM_IC_CaptureCallback+0x338>)
 8003728:	f7fd f9a7 	bl	8000a7a <average_filter_update>
 800372c:	eef0 7a40 	vmov.f32	s15, s0
 8003730:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8003732:	edc3 7a00 	vstr	s15, [r3]
    g_pitch = average_filter_update(&g_af[2], pwm_in[11] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 8003736:	4b38      	ldr	r3, [pc, #224]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003746:	eeb0 0a67 	vmov.f32	s0, s15
 800374a:	4838      	ldr	r0, [pc, #224]	; (800382c <HAL_TIM_IC_CaptureCallback+0x340>)
 800374c:	f7fd f995 	bl	8000a7a <average_filter_update>
 8003750:	eef0 7a40 	vmov.f32	s15, s0
 8003754:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_TIM_IC_CaptureCallback+0x344>)
 8003756:	edc3 7a00 	vstr	s15, [r3]
    g_roll = average_filter_update(&g_af[3], pwm_in[8] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 800375a:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376a:	eeb0 0a67 	vmov.f32	s0, s15
 800376e:	4831      	ldr	r0, [pc, #196]	; (8003834 <HAL_TIM_IC_CaptureCallback+0x348>)
 8003770:	f7fd f983 	bl	8000a7a <average_filter_update>
 8003774:	eef0 7a40 	vmov.f32	s15, s0
 8003778:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_TIM_IC_CaptureCallback+0x34c>)
 800377a:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM5) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2e      	ldr	r2, [pc, #184]	; (800383c <HAL_TIM_IC_CaptureCallback+0x350>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d142      	bne.n	800380e <HAL_TIM_IC_CaptureCallback+0x322>
    switch (htim->Channel) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7f1b      	ldrb	r3, [r3, #28]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d12f      	bne.n	80037f0 <HAL_TIM_IC_CaptureCallback+0x304>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8003790:	2101      	movs	r1, #1
 8003792:	482b      	ldr	r0, [pc, #172]	; (8003840 <HAL_TIM_IC_CaptureCallback+0x354>)
 8003794:	f004 fbce 	bl	8007f34 <HAL_GPIO_ReadPin>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d107      	bne.n	80037ae <HAL_TIM_IC_CaptureCallback+0x2c2>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 800379e:	2100      	movs	r1, #0
 80037a0:	4828      	ldr	r0, [pc, #160]	; (8003844 <HAL_TIM_IC_CaptureCallback+0x358>)
 80037a2:	f008 fe49 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80037ae:	2101      	movs	r1, #1
 80037b0:	4823      	ldr	r0, [pc, #140]	; (8003840 <HAL_TIM_IC_CaptureCallback+0x354>)
 80037b2:	f004 fbbf 	bl	8007f34 <HAL_GPIO_ReadPin>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IC_CaptureCallback+0x308>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 80037bc:	2100      	movs	r1, #0
 80037be:	4821      	ldr	r0, [pc, #132]	; (8003844 <HAL_TIM_IC_CaptureCallback+0x358>)
 80037c0:	f008 fe3a 	bl	800c438 <HAL_TIM_ReadCapturedValue>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80037ca:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80037ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	60fb      	str	r3, [r7, #12]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2be4      	cmp	r3, #228	; 0xe4
 80037dc:	dd0a      	ble.n	80037f4 <HAL_TIM_IC_CaptureCallback+0x308>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f240 2206 	movw	r2, #518	; 0x206
 80037e4:	4293      	cmp	r3, r2
 80037e6:	dc05      	bgt.n	80037f4 <HAL_TIM_IC_CaptureCallback+0x308>
            pwm_in[14] = value;
 80037e8:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6393      	str	r3, [r2, #56]	; 0x38
          }
        }
        break;
 80037ee:	e001      	b.n	80037f4 <HAL_TIM_IC_CaptureCallback+0x308>
      default:
        break;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_TIM_IC_CaptureCallback+0x30a>
        break;
 80037f4:	bf00      	nop
    }

    g_stick1 = pwm_in[14] > MIN_PWN_IN_CAP + 0.5*RANGE_PWM_IN_CAP ? 1 : 0;
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 80037fe:	db02      	blt.n	8003806 <HAL_TIM_IC_CaptureCallback+0x31a>
 8003800:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003804:	e001      	b.n	800380a <HAL_TIM_IC_CaptureCallback+0x31e>
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	4a0f      	ldr	r2, [pc, #60]	; (8003848 <HAL_TIM_IC_CaptureCallback+0x35c>)
 800380c:	6013      	str	r3, [r2, #0]
  }
}
 800380e:	bf00      	nop
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	240007f0 	.word	0x240007f0
 800381c:	2400092c 	.word	0x2400092c
 8003820:	24000868 	.word	0x24000868
 8003824:	24000ac8 	.word	0x24000ac8
 8003828:	24000874 	.word	0x24000874
 800382c:	24000c64 	.word	0x24000c64
 8003830:	2400086c 	.word	0x2400086c
 8003834:	24000e00 	.word	0x24000e00
 8003838:	24000870 	.word	0x24000870
 800383c:	40000c00 	.word	0x40000c00
 8003840:	58020000 	.word	0x58020000
 8003844:	24000218 	.word	0x24000218
 8003848:	24000878 	.word	0x24000878

0800384c <schedule_400hz>:

void schedule_400hz(void) {
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <schedule_400hz+0x18>)
 8003852:	f7fe fbd1 	bl	8001ff8 <MPU6050_update>
  MS5611_update(&g_ms5611);
 8003856:	4804      	ldr	r0, [pc, #16]	; (8003868 <schedule_400hz+0x1c>)
 8003858:	f7ff f8ac 	bl	80029b4 <MS5611_update>
  fly();
 800385c:	f000 f994 	bl	8003b88 <fly>
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	24001538 	.word	0x24001538
 8003868:	24001668 	.word	0x24001668

0800386c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <schedule_20hz>:

void schedule_20hz(void) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
  static char line[16];
  static int starts[4] = {-1, -1, -1, -1};

  for (int t = 0; t < 4; t += 1) {
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	e10d      	b.n	8003aa8 <schedule_20hz+0x228>
    int start = starts[t];
 800388c:	4a92      	ldr	r2, [pc, #584]	; (8003ad8 <schedule_20hz+0x258>)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	623b      	str	r3, [r7, #32]
    int end = -1;
 8003896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800389a:	61fb      	str	r3, [r7, #28]
    uint8_t *p;
    switch (t) {
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d816      	bhi.n	80038d0 <schedule_20hz+0x50>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <schedule_20hz+0x28>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038bf 	.word	0x080038bf
 80038b0:	080038c5 	.word	0x080038c5
 80038b4:	080038cb 	.word	0x080038cb
    case 0: p = g_uart_rx_buffer1; break;
 80038b8:	4b88      	ldr	r3, [pc, #544]	; (8003adc <schedule_20hz+0x25c>)
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e008      	b.n	80038d0 <schedule_20hz+0x50>
    case 1: p = g_uart_rx_buffer2; break;
 80038be:	4b88      	ldr	r3, [pc, #544]	; (8003ae0 <schedule_20hz+0x260>)
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	e005      	b.n	80038d0 <schedule_20hz+0x50>
    case 2: p = g_uart_rx_buffer3; break;
 80038c4:	4b87      	ldr	r3, [pc, #540]	; (8003ae4 <schedule_20hz+0x264>)
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	e002      	b.n	80038d0 <schedule_20hz+0x50>
    case 3: p = g_uart_rx_buffer4; break;
 80038ca:	4b87      	ldr	r3, [pc, #540]	; (8003ae8 <schedule_20hz+0x268>)
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	bf00      	nop
    }

    if (start == -1) {
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d6:	d111      	bne.n	80038fc <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e00b      	b.n	80038f6 <schedule_20hz+0x76>
        if (p[i] == '$') {
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4413      	add	r3, r2
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b24      	cmp	r3, #36	; 0x24
 80038e8:	d102      	bne.n	80038f0 <schedule_20hz+0x70>
          start = i;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	623b      	str	r3, [r7, #32]
          break;
 80038ee:	e005      	b.n	80038fc <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3301      	adds	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2bff      	cmp	r3, #255	; 0xff
 80038fa:	ddf0      	ble.n	80038de <schedule_20hz+0x5e>
        }
      }
    }

    if (start > -1) {
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db2b      	blt.n	800395a <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	e025      	b.n	8003954 <schedule_20hz+0xd4>
        if (p[(start+i)%UART_BUF_SIZE] == 0) {
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4413      	add	r3, r2
 800390e:	425a      	negs	r2, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	bf58      	it	pl
 8003916:	4253      	negpl	r3, r2
 8003918:	461a      	mov	r2, r3
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4413      	add	r3, r2
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d103      	bne.n	800392c <schedule_20hz+0xac>
          start = -1;
 8003924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003928:	623b      	str	r3, [r7, #32]
          break;
 800392a:	e016      	b.n	800395a <schedule_20hz+0xda>
        }

        if (p[(start+i)%UART_BUF_SIZE] == '\n') {
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4413      	add	r3, r2
 8003932:	425a      	negs	r2, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	bf58      	it	pl
 800393a:	4253      	negpl	r3, r2
 800393c:	461a      	mov	r2, r3
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	4413      	add	r3, r2
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d102      	bne.n	800394e <schedule_20hz+0xce>
          end = i;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	61fb      	str	r3, [r7, #28]
          break;
 800394c:	e005      	b.n	800395a <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3301      	adds	r3, #1
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2bff      	cmp	r3, #255	; 0xff
 8003958:	ddd6      	ble.n	8003908 <schedule_20hz+0x88>
        }
      }
    }

    if (start > -1 && end > -1) {
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f2c0 809f 	blt.w	8003aa0 <schedule_20hz+0x220>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f2c0 809b 	blt.w	8003aa0 <schedule_20hz+0x220>
      memset(line, 0, 16);
 800396a:	2210      	movs	r2, #16
 800396c:	2100      	movs	r1, #0
 800396e:	485f      	ldr	r0, [pc, #380]	; (8003aec <schedule_20hz+0x26c>)
 8003970:	f00b fd92 	bl	800f498 <memset>

      if (start < end) {
 8003974:	6a3a      	ldr	r2, [r7, #32]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	429a      	cmp	r2, r3
 800397a:	da14      	bge.n	80039a6 <schedule_20hz+0x126>
        memcpy(line, &p[start], end - start);
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	18d1      	adds	r1, r2, r3
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	461a      	mov	r2, r3
 800398a:	4858      	ldr	r0, [pc, #352]	; (8003aec <schedule_20hz+0x26c>)
 800398c:	f00b fd76 	bl	800f47c <memcpy>
        memset(&p[start], 0, end - start);
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	18d0      	adds	r0, r2, r3
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	461a      	mov	r2, r3
 800399e:	2100      	movs	r1, #0
 80039a0:	f00b fd7a 	bl	800f498 <memset>
 80039a4:	e027      	b.n	80039f6 <schedule_20hz+0x176>
      }
      else if (start > end) {
 80039a6:	6a3a      	ldr	r2, [r7, #32]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	dd23      	ble.n	80039f6 <schedule_20hz+0x176>
        memcpy(line, &p[start], UART_BUF_SIZE - start);
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	18d1      	adds	r1, r2, r3
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80039ba:	461a      	mov	r2, r3
 80039bc:	484b      	ldr	r0, [pc, #300]	; (8003aec <schedule_20hz+0x26c>)
 80039be:	f00b fd5d 	bl	800f47c <memcpy>
        memset(&p[start], 0, UART_BUF_SIZE - start);
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	18d0      	adds	r0, r2, r3
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80039ce:	461a      	mov	r2, r3
 80039d0:	2100      	movs	r1, #0
 80039d2:	f00b fd61 	bl	800f498 <memset>
        memcpy(&line[UART_BUF_SIZE - start], p, end);
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80039dc:	4a43      	ldr	r2, [pc, #268]	; (8003aec <schedule_20hz+0x26c>)
 80039de:	4413      	add	r3, r2
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	69b9      	ldr	r1, [r7, #24]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f00b fd49 	bl	800f47c <memcpy>
        memset(p, 0, end);
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	461a      	mov	r2, r3
 80039ee:	2100      	movs	r1, #0
 80039f0:	69b8      	ldr	r0, [r7, #24]
 80039f2:	f00b fd51 	bl	800f498 <memset>
      }

      starts[t] = -1;
 80039f6:	4a38      	ldr	r2, [pc, #224]	; (8003ad8 <schedule_20hz+0x258>)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      int idx = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
      for (int idx = 0; idx < 16; idx += 1) {
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e008      	b.n	8003a1e <schedule_20hz+0x19e>
        if (line[idx] == ',') {
 8003a0c:	4a37      	ldr	r2, [pc, #220]	; (8003aec <schedule_20hz+0x26c>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b2c      	cmp	r3, #44	; 0x2c
 8003a16:	d006      	beq.n	8003a26 <schedule_20hz+0x1a6>
      for (int idx = 0; idx < 16; idx += 1) {
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	ddf3      	ble.n	8003a0c <schedule_20hz+0x18c>
 8003a24:	e000      	b.n	8003a28 <schedule_20hz+0x1a8>
          break;
 8003a26:	bf00      	nop
        }
      }
      line[idx] = 0;
 8003a28:	4a30      	ldr	r2, [pc, #192]	; (8003aec <schedule_20hz+0x26c>)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
      int dy = atoi(&line[1]);
 8003a32:	482f      	ldr	r0, [pc, #188]	; (8003af0 <schedule_20hz+0x270>)
 8003a34:	f00b fcf4 	bl	800f420 <atoi>
 8003a38:	6078      	str	r0, [r7, #4]
      int dx = atoi(&line[idx+1]);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	4a2b      	ldr	r2, [pc, #172]	; (8003aec <schedule_20hz+0x26c>)
 8003a40:	4413      	add	r3, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f00b fcec 	bl	800f420 <atoi>
 8003a48:	6038      	str	r0, [r7, #0]
      switch (t) {
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d828      	bhi.n	8003aa2 <schedule_20hz+0x222>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <schedule_20hz+0x1d8>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a77 	.word	0x08003a77
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003a93 	.word	0x08003a93
      case 0: drift.lf = dx;drift.v1 = dy; break;
 8003a68:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <schedule_20hz+0x274>)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	4a21      	ldr	r2, [pc, #132]	; (8003af4 <schedule_20hz+0x274>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6113      	str	r3, [r2, #16]
 8003a74:	e015      	b.n	8003aa2 <schedule_20hz+0x222>
      case 1: drift.rf = dx;drift.v2 = dy; break;
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <schedule_20hz+0x274>)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6053      	str	r3, [r2, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <schedule_20hz+0x274>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6153      	str	r3, [r2, #20]
 8003a82:	e00e      	b.n	8003aa2 <schedule_20hz+0x222>
      case 2: drift.rb = dx;drift.v3 = dy; break;
 8003a84:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <schedule_20hz+0x274>)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	60d3      	str	r3, [r2, #12]
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <schedule_20hz+0x274>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6193      	str	r3, [r2, #24]
 8003a90:	e007      	b.n	8003aa2 <schedule_20hz+0x222>
      case 3: drift.lb = dx;drift.v4 = dy; break;
 8003a92:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <schedule_20hz+0x274>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6093      	str	r3, [r2, #8]
 8003a98:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <schedule_20hz+0x274>)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	61d3      	str	r3, [r2, #28]
 8003a9e:	e000      	b.n	8003aa2 <schedule_20hz+0x222>
      }
    }
 8003aa0:	bf00      	nop
  for (int t = 0; t < 4; t += 1) {
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	f77f aeee 	ble.w	800388c <schedule_20hz+0xc>
  }

  static char run_10hz = 1;
  if (run_10hz) schedule_10hz();
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <schedule_20hz+0x278>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <schedule_20hz+0x23c>
 8003ab8:	f000 f820 	bl	8003afc <schedule_10hz>
  run_10hz = !run_10hz;
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <schedule_20hz+0x278>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <schedule_20hz+0x278>)
 8003ace:	701a      	strb	r2, [r3, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	24000018 	.word	0x24000018
 8003adc:	24001138 	.word	0x24001138
 8003ae0:	24001238 	.word	0x24001238
 8003ae4:	24001338 	.word	0x24001338
 8003ae8:	24001438 	.word	0x24001438
 8003aec:	24001870 	.word	0x24001870
 8003af0:	24001871 	.word	0x24001871
 8003af4:	24000894 	.word	0x24000894
 8003af8:	24000028 	.word	0x24000028

08003afc <schedule_10hz>:

void schedule_10hz(void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af02      	add	r7, sp, #8
      drift.v1 + drift.v2 + drift.v3 + drift.v4);
  console(monitor);
#endif // Drift

#if MONITOR == 7
  memset(monitor, 0, 64);
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	2100      	movs	r1, #0
 8003b06:	481a      	ldr	r0, [pc, #104]	; (8003b70 <schedule_10hz+0x74>)
 8003b08:	f00b fcc6 	bl	800f498 <memset>
  sprintf(monitor, "$%d,%d,%d\n",
      (int)(g_ms5611.P*10-960000),
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <schedule_10hz+0x78>)
 8003b0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <schedule_10hz+0x7c>)
 8003b1a:	441a      	add	r2, r3
      (int)(g_ms5611.slow_pressure*1000-960000),
 8003b1c:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <schedule_10hz+0x78>)
 8003b1e:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8003b22:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003b7c <schedule_10hz+0x80>
 8003b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b2a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003b80 <schedule_10hz+0x84>
 8003b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
  sprintf(monitor, "$%d,%d,%d\n",
 8003b32:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(g_ms5611.fast_pressure*1000-960000));
 8003b36:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <schedule_10hz+0x78>)
 8003b38:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8003b3c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003b7c <schedule_10hz+0x80>
 8003b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b44:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003b80 <schedule_10hz+0x84>
 8003b48:	ee77 7ac7 	vsub.f32	s15, s15, s14
  sprintf(monitor, "$%d,%d,%d\n",
 8003b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b50:	ee17 3a90 	vmov	r3, s15
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	ee16 3a90 	vmov	r3, s13
 8003b5a:	490a      	ldr	r1, [pc, #40]	; (8003b84 <schedule_10hz+0x88>)
 8003b5c:	4804      	ldr	r0, [pc, #16]	; (8003b70 <schedule_10hz+0x74>)
 8003b5e:	f00b fca3 	bl	800f4a8 <siprintf>
  console(monitor);
 8003b62:	4803      	ldr	r0, [pc, #12]	; (8003b70 <schedule_10hz+0x74>)
 8003b64:	f000 feb6 	bl	80048d4 <console>
#endif // Pressure
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	240008b4 	.word	0x240008b4
 8003b74:	24001668 	.word	0x24001668
 8003b78:	fff15a00 	.word	0xfff15a00
 8003b7c:	447a0000 	.word	0x447a0000
 8003b80:	496a6000 	.word	0x496a6000
 8003b84:	080116c0 	.word	0x080116c0

08003b88 <fly>:

void fly() {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af00      	add	r7, sp, #0
  float angle_x = g_mpu6050.angle_x;
 8003b8e:	4bc6      	ldr	r3, [pc, #792]	; (8003ea8 <fly+0x320>)
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	623b      	str	r3, [r7, #32]
  float angle_y = g_mpu6050.angle_y;
 8003b94:	4bc4      	ldr	r3, [pc, #784]	; (8003ea8 <fly+0x320>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	61fb      	str	r3, [r7, #28]
  float angle_z = g_mpu6050.angle_z;
 8003b9a:	4bc3      	ldr	r3, [pc, #780]	; (8003ea8 <fly+0x320>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	61bb      	str	r3, [r7, #24]
  float gyro_x = g_mpu6050.gyro_x;
 8003ba0:	4bc1      	ldr	r3, [pc, #772]	; (8003ea8 <fly+0x320>)
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba4:	617b      	str	r3, [r7, #20]
  float gyro_y = g_mpu6050.gyro_y;
 8003ba6:	4bc0      	ldr	r3, [pc, #768]	; (8003ea8 <fly+0x320>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	613b      	str	r3, [r7, #16]
  float gyro_z = g_mpu6050.gyro_z;
 8003bac:	4bbe      	ldr	r3, [pc, #760]	; (8003ea8 <fly+0x320>)
 8003bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb0:	60fb      	str	r3, [r7, #12]

  // Add remote control bias
  float angle_error_y = angle_y - 0.125*g_pitch; // Max 25 degree
 8003bb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bb6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003bba:	4bbc      	ldr	r3, [pc, #752]	; (8003eac <fly+0x324>)
 8003bbc:	edd3 7a00 	vldr	s15, [r3]
 8003bc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc4:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8003bc8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003bcc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003bd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bd4:	edc7 7a02 	vstr	s15, [r7, #8]
  float angle_error_x = angle_x - 0.125*g_roll; // Max 25 degree
 8003bd8:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bdc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003be0:	4bb3      	ldr	r3, [pc, #716]	; (8003eb0 <fly+0x328>)
 8003be2:	edd3 7a00 	vldr	s15, [r3]
 8003be6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bea:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 8003bee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003bf2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003bf6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bfa:	edc7 7a01 	vstr	s15, [r7, #4]
  float angle_error_z = angle_z;
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (g_yaw < -5 || g_yaw > 5) {
 8003c02:	4bac      	ldr	r3, [pc, #688]	; (8003eb4 <fly+0x32c>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8003c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	d409      	bmi.n	8003c2a <fly+0xa2>
 8003c16:	4ba7      	ldr	r3, [pc, #668]	; (8003eb4 <fly+0x32c>)
 8003c18:	edd3 7a00 	vldr	s15, [r3]
 8003c1c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	dd10      	ble.n	8003c4c <fly+0xc4>
    angle_error_z = g_yaw > 0 ? -0.2*g_yaw : -0.2*g_yaw;
 8003c2a:	4ba2      	ldr	r3, [pc, #648]	; (8003eb4 <fly+0x32c>)
 8003c2c:	edd3 7a00 	vldr	s15, [r3]
 8003c30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c34:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8003e88 <fly+0x300>
 8003c38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c40:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_mpu6050.angle_z = 0;
 8003c44:	4b98      	ldr	r3, [pc, #608]	; (8003ea8 <fly+0x320>)
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44
  // Keep alive for the fly
//  if (g_stick1 == 0) {
//    fly_mode = init;
//  }

  switch (fly_mode) {
 8003c4c:	4b9a      	ldr	r3, [pc, #616]	; (8003eb8 <fly+0x330>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b05      	cmp	r3, #5
 8003c52:	f200 861d 	bhi.w	8004890 <fly+0xd08>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <fly+0xd4>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003d4d 	.word	0x08003d4d
 8003c64:	0800488f 	.word	0x0800488f
 8003c68:	08003d97 	.word	0x08003d97
 8003c6c:	0800488f 	.word	0x0800488f
 8003c70:	080046c3 	.word	0x080046c3
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 8003c74:	4b91      	ldr	r3, [pc, #580]	; (8003ebc <fly+0x334>)
 8003c76:	4a92      	ldr	r2, [pc, #584]	; (8003ec0 <fly+0x338>)
 8003c78:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 8003c7a:	4b92      	ldr	r3, [pc, #584]	; (8003ec4 <fly+0x33c>)
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 8003c82:	4b91      	ldr	r3, [pc, #580]	; (8003ec8 <fly+0x340>)
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 8003c8a:	4b90      	ldr	r3, [pc, #576]	; (8003ecc <fly+0x344>)
 8003c8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c90:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 8003c92:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <fly+0x348>)
 8003c94:	4a8a      	ldr	r2, [pc, #552]	; (8003ec0 <fly+0x338>)
 8003c96:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 8003c98:	4b8e      	ldr	r3, [pc, #568]	; (8003ed4 <fly+0x34c>)
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 8003ca0:	4b8d      	ldr	r3, [pc, #564]	; (8003ed8 <fly+0x350>)
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 8003ca8:	4b8c      	ldr	r3, [pc, #560]	; (8003edc <fly+0x354>)
 8003caa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003cae:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 8003cb0:	4b8b      	ldr	r3, [pc, #556]	; (8003ee0 <fly+0x358>)
 8003cb2:	4a83      	ldr	r2, [pc, #524]	; (8003ec0 <fly+0x338>)
 8003cb4:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	; (8003ee4 <fly+0x35c>)
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 8003cbe:	4b8a      	ldr	r3, [pc, #552]	; (8003ee8 <fly+0x360>)
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 8003cc6:	4b89      	ldr	r3, [pc, #548]	; (8003eec <fly+0x364>)
 8003cc8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ccc:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003cce:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003cd2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8003cd6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8003cda:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8003cde:	f000 fe0d 	bl	80048fc <set_speed>

      // Move sticks to make it ready to take off
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8003ce2:	4b83      	ldr	r3, [pc, #524]	; (8003ef0 <fly+0x368>)
 8003ce4:	edd3 7a00 	vldr	s15, [r3]
 8003ce8:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003ef4 <fly+0x36c>
 8003cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf4:	d901      	bls.n	8003cfa <fly+0x172>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
        fly_mode = ready;
      }

      break;
 8003cf6:	f000 bdcb 	b.w	8004890 <fly+0xd08>
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8003cfa:	4b6e      	ldr	r3, [pc, #440]	; (8003eb4 <fly+0x32c>)
 8003cfc:	edd3 7a00 	vldr	s15, [r3]
 8003d00:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003ef4 <fly+0x36c>
 8003d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0c:	d901      	bls.n	8003d12 <fly+0x18a>
      break;
 8003d0e:	f000 bdbf 	b.w	8004890 <fly+0xd08>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8003d12:	4b66      	ldr	r3, [pc, #408]	; (8003eac <fly+0x324>)
 8003d14:	edd3 7a00 	vldr	s15, [r3]
 8003d18:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003ef4 <fly+0x36c>
 8003d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d24:	d901      	bls.n	8003d2a <fly+0x1a2>
      break;
 8003d26:	f000 bdb3 	b.w	8004890 <fly+0xd08>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8003d2a:	4b61      	ldr	r3, [pc, #388]	; (8003eb0 <fly+0x328>)
 8003d2c:	edd3 7a00 	vldr	s15, [r3]
 8003d30:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003ef4 <fly+0x36c>
 8003d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3c:	da01      	bge.n	8003d42 <fly+0x1ba>
      break;
 8003d3e:	f000 bda7 	b.w	8004890 <fly+0xd08>
        fly_mode = ready;
 8003d42:	4b5d      	ldr	r3, [pc, #372]	; (8003eb8 <fly+0x330>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
      break;
 8003d48:	f000 bda2 	b.w	8004890 <fly+0xd08>
    case ready:
      // Reset accumulated integral
      g_I_pitch_accumulated = 0;
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <fly+0x370>)
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003d54:	4b69      	ldr	r3, [pc, #420]	; (8003efc <fly+0x374>)
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8003d5c:	4b68      	ldr	r3, [pc, #416]	; (8003f00 <fly+0x378>)
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003d64:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8003d68:	f640 12f6 	movw	r2, #2550	; 0x9f6
 8003d6c:	f640 11f6 	movw	r1, #2550	; 0x9f6
 8003d70:	f640 10f6 	movw	r0, #2550	; 0x9f6
 8003d74:	f000 fdc2 	bl	80048fc <set_speed>

      // Switch to fly mode
      if (g_throttle > 0) {
 8003d78:	4b5d      	ldr	r3, [pc, #372]	; (8003ef0 <fly+0x368>)
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d86:	dc01      	bgt.n	8003d8c <fly+0x204>
        fly_mode = moving;
      }

      break;
 8003d88:	f000 bd82 	b.w	8004890 <fly+0xd08>
        fly_mode = moving;
 8003d8c:	4b4a      	ldr	r3, [pc, #296]	; (8003eb8 <fly+0x330>)
 8003d8e:	2203      	movs	r2, #3
 8003d90:	701a      	strb	r2, [r3, #0]
      break;
 8003d92:	f000 bd7d 	b.w	8004890 <fly+0xd08>
    case holding:

      break;
    case moving:
      g_P_pitch = LIMIT(angle_error_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8003d96:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <fly+0x334>)
 8003d98:	ed93 7a00 	vldr	s14, [r3]
 8003d9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003f04 <fly+0x37c>
 8003da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db0:	d502      	bpl.n	8003db8 <fly+0x230>
 8003db2:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003f04 <fly+0x37c>
 8003db6:	e017      	b.n	8003de8 <fly+0x260>
 8003db8:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <fly+0x334>)
 8003dba:	ed93 7a00 	vldr	s14, [r3]
 8003dbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003f08 <fly+0x380>
 8003dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd2:	dd02      	ble.n	8003dda <fly+0x252>
 8003dd4:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8003f08 <fly+0x380>
 8003dd8:	e006      	b.n	8003de8 <fly+0x260>
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <fly+0x334>)
 8003ddc:	ed93 7a00 	vldr	s14, [r3]
 8003de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de8:	4b48      	ldr	r3, [pc, #288]	; (8003f0c <fly+0x384>)
 8003dea:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_error_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <fly+0x370>)
 8003df0:	edd3 7a00 	vldr	s15, [r3]
 8003df4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003df8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e00:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003e90 <fly+0x308>
 8003e04:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003e08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <fly+0x370>)
 8003e12:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated = LIMIT(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 8003e16:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <fly+0x370>)
 8003e18:	edd3 7a00 	vldr	s15, [r3]
 8003e1c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <fly+0x33c>)
 8003e22:	edd3 7a00 	vldr	s15, [r3]
 8003e26:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003e2a:	ed9f 4b1b 	vldr	d4, [pc, #108]	; 8003e98 <fly+0x310>
 8003e2e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003e32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3a:	d507      	bpl.n	8003e4c <fly+0x2c4>
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <fly+0x33c>)
 8003e3e:	ed93 7a00 	vldr	s14, [r3]
 8003e42:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003f10 <fly+0x388>
 8003e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4a:	e068      	b.n	8003f1e <fly+0x396>
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <fly+0x370>)
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <fly+0x33c>)
 8003e58:	edd3 7a00 	vldr	s15, [r3]
 8003e5c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003e60:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8003ea0 <fly+0x318>
 8003e64:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003e68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e70:	dd52      	ble.n	8003f18 <fly+0x390>
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <fly+0x33c>)
 8003e74:	ed93 7a00 	vldr	s14, [r3]
 8003e78:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f14 <fly+0x38c>
 8003e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e80:	e04d      	b.n	8003f1e <fly+0x396>
 8003e82:	bf00      	nop
 8003e84:	f3af 8000 	nop.w
 8003e88:	9999999a 	.word	0x9999999a
 8003e8c:	bfc99999 	.word	0xbfc99999
	...
 8003e9c:	c0709000 	.word	0xc0709000
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	40709000 	.word	0x40709000
 8003ea8:	24001538 	.word	0x24001538
 8003eac:	2400086c 	.word	0x2400086c
 8003eb0:	24000870 	.word	0x24000870
 8003eb4:	24000874 	.word	0x24000874
 8003eb8:	24001868 	.word	0x24001868
 8003ebc:	24000000 	.word	0x24000000
 8003ec0:	40400000 	.word	0x40400000
 8003ec4:	2400087c 	.word	0x2400087c
 8003ec8:	24000880 	.word	0x24000880
 8003ecc:	24000004 	.word	0x24000004
 8003ed0:	24000008 	.word	0x24000008
 8003ed4:	24000884 	.word	0x24000884
 8003ed8:	24000888 	.word	0x24000888
 8003edc:	2400000c 	.word	0x2400000c
 8003ee0:	24000010 	.word	0x24000010
 8003ee4:	2400088c 	.word	0x2400088c
 8003ee8:	24000890 	.word	0x24000890
 8003eec:	24000014 	.word	0x24000014
 8003ef0:	24000868 	.word	0x24000868
 8003ef4:	c2f80000 	.word	0xc2f80000
 8003ef8:	240007b8 	.word	0x240007b8
 8003efc:	240007c8 	.word	0x240007c8
 8003f00:	240007d8 	.word	0x240007d8
 8003f04:	c446c000 	.word	0xc446c000
 8003f08:	4446c000 	.word	0x4446c000
 8003f0c:	240007b0 	.word	0x240007b0
 8003f10:	c3848000 	.word	0xc3848000
 8003f14:	43848000 	.word	0x43848000
 8003f18:	4bcd      	ldr	r3, [pc, #820]	; (8004250 <fly+0x6c8>)
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	4bcc      	ldr	r3, [pc, #816]	; (8004250 <fly+0x6c8>)
 8003f20:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 8003f24:	4bca      	ldr	r3, [pc, #808]	; (8004250 <fly+0x6c8>)
 8003f26:	ed93 7a00 	vldr	s14, [r3]
 8003f2a:	4bca      	ldr	r3, [pc, #808]	; (8004254 <fly+0x6cc>)
 8003f2c:	edd3 7a00 	vldr	s15, [r3]
 8003f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f34:	4bc8      	ldr	r3, [pc, #800]	; (8004258 <fly+0x6d0>)
 8003f36:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = LIMIT(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 8003f3a:	4bc8      	ldr	r3, [pc, #800]	; (800425c <fly+0x6d4>)
 8003f3c:	ed93 7a00 	vldr	s14, [r3]
 8003f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f48:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8004260 <fly+0x6d8>
 8003f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f54:	d502      	bpl.n	8003f5c <fly+0x3d4>
 8003f56:	eddf 7ac2 	vldr	s15, [pc, #776]	; 8004260 <fly+0x6d8>
 8003f5a:	e017      	b.n	8003f8c <fly+0x404>
 8003f5c:	4bbf      	ldr	r3, [pc, #764]	; (800425c <fly+0x6d4>)
 8003f5e:	ed93 7a00 	vldr	s14, [r3]
 8003f62:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6a:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8004264 <fly+0x6dc>
 8003f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f76:	dd02      	ble.n	8003f7e <fly+0x3f6>
 8003f78:	eddf 7aba 	vldr	s15, [pc, #744]	; 8004264 <fly+0x6dc>
 8003f7c:	e006      	b.n	8003f8c <fly+0x404>
 8003f7e:	4bb7      	ldr	r3, [pc, #732]	; (800425c <fly+0x6d4>)
 8003f80:	ed93 7a00 	vldr	s14, [r3]
 8003f84:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8c:	4bb6      	ldr	r3, [pc, #728]	; (8004268 <fly+0x6e0>)
 8003f8e:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = LIMIT(angle_error_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 8003f92:	4bb6      	ldr	r3, [pc, #728]	; (800426c <fly+0x6e4>)
 8003f94:	ed93 7a00 	vldr	s14, [r3]
 8003f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa0:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8004260 <fly+0x6d8>
 8003fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fac:	d502      	bpl.n	8003fb4 <fly+0x42c>
 8003fae:	eddf 7aac 	vldr	s15, [pc, #688]	; 8004260 <fly+0x6d8>
 8003fb2:	e017      	b.n	8003fe4 <fly+0x45c>
 8003fb4:	4bad      	ldr	r3, [pc, #692]	; (800426c <fly+0x6e4>)
 8003fb6:	ed93 7a00 	vldr	s14, [r3]
 8003fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc2:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8004264 <fly+0x6dc>
 8003fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fce:	dd02      	ble.n	8003fd6 <fly+0x44e>
 8003fd0:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8004264 <fly+0x6dc>
 8003fd4:	e006      	b.n	8003fe4 <fly+0x45c>
 8003fd6:	4ba5      	ldr	r3, [pc, #660]	; (800426c <fly+0x6e4>)
 8003fd8:	ed93 7a00 	vldr	s14, [r3]
 8003fdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	4ba2      	ldr	r3, [pc, #648]	; (8004270 <fly+0x6e8>)
 8003fe6:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_error_x*I_ROLL_PERIOD;
 8003fea:	4ba2      	ldr	r3, [pc, #648]	; (8004274 <fly+0x6ec>)
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ff4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ff8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ffc:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8004228 <fly+0x6a0>
 8004000:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004004:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004008:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800400c:	4b99      	ldr	r3, [pc, #612]	; (8004274 <fly+0x6ec>)
 800400e:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated = LIMIT(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 8004012:	4b98      	ldr	r3, [pc, #608]	; (8004274 <fly+0x6ec>)
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800401c:	4b96      	ldr	r3, [pc, #600]	; (8004278 <fly+0x6f0>)
 800401e:	edd3 7a00 	vldr	s15, [r3]
 8004022:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004026:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8004230 <fly+0x6a8>
 800402a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800402e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004036:	d507      	bpl.n	8004048 <fly+0x4c0>
 8004038:	4b8f      	ldr	r3, [pc, #572]	; (8004278 <fly+0x6f0>)
 800403a:	ed93 7a00 	vldr	s14, [r3]
 800403e:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800427c <fly+0x6f4>
 8004042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004046:	e01d      	b.n	8004084 <fly+0x4fc>
 8004048:	4b8a      	ldr	r3, [pc, #552]	; (8004274 <fly+0x6ec>)
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004052:	4b89      	ldr	r3, [pc, #548]	; (8004278 <fly+0x6f0>)
 8004054:	edd3 7a00 	vldr	s15, [r3]
 8004058:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800405c:	ed9f 4b76 	vldr	d4, [pc, #472]	; 8004238 <fly+0x6b0>
 8004060:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406c:	dd07      	ble.n	800407e <fly+0x4f6>
 800406e:	4b82      	ldr	r3, [pc, #520]	; (8004278 <fly+0x6f0>)
 8004070:	ed93 7a00 	vldr	s14, [r3]
 8004074:	eddf 6a82 	vldr	s13, [pc, #520]	; 8004280 <fly+0x6f8>
 8004078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407c:	e002      	b.n	8004084 <fly+0x4fc>
 800407e:	4b7d      	ldr	r3, [pc, #500]	; (8004274 <fly+0x6ec>)
 8004080:	edd3 7a00 	vldr	s15, [r3]
 8004084:	4b7b      	ldr	r3, [pc, #492]	; (8004274 <fly+0x6ec>)
 8004086:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 800408a:	4b7a      	ldr	r3, [pc, #488]	; (8004274 <fly+0x6ec>)
 800408c:	ed93 7a00 	vldr	s14, [r3]
 8004090:	4b79      	ldr	r3, [pc, #484]	; (8004278 <fly+0x6f0>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	4b7a      	ldr	r3, [pc, #488]	; (8004284 <fly+0x6fc>)
 800409c:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = LIMIT(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 80040a0:	4b79      	ldr	r3, [pc, #484]	; (8004288 <fly+0x700>)
 80040a2:	ed93 7a00 	vldr	s14, [r3]
 80040a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80040aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ae:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004260 <fly+0x6d8>
 80040b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ba:	d502      	bpl.n	80040c2 <fly+0x53a>
 80040bc:	eddf 7a68 	vldr	s15, [pc, #416]	; 8004260 <fly+0x6d8>
 80040c0:	e017      	b.n	80040f2 <fly+0x56a>
 80040c2:	4b71      	ldr	r3, [pc, #452]	; (8004288 <fly+0x700>)
 80040c4:	ed93 7a00 	vldr	s14, [r3]
 80040c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80040cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d0:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8004264 <fly+0x6dc>
 80040d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040dc:	dd02      	ble.n	80040e4 <fly+0x55c>
 80040de:	eddf 7a61 	vldr	s15, [pc, #388]	; 8004264 <fly+0x6dc>
 80040e2:	e006      	b.n	80040f2 <fly+0x56a>
 80040e4:	4b68      	ldr	r3, [pc, #416]	; (8004288 <fly+0x700>)
 80040e6:	ed93 7a00 	vldr	s14, [r3]
 80040ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80040ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f2:	4b66      	ldr	r3, [pc, #408]	; (800428c <fly+0x704>)
 80040f4:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = LIMIT(angle_error_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 80040f8:	4b65      	ldr	r3, [pc, #404]	; (8004290 <fly+0x708>)
 80040fa:	ed93 7a00 	vldr	s14, [r3]
 80040fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004106:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004294 <fly+0x70c>
 800410a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004112:	d502      	bpl.n	800411a <fly+0x592>
 8004114:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8004294 <fly+0x70c>
 8004118:	e017      	b.n	800414a <fly+0x5c2>
 800411a:	4b5d      	ldr	r3, [pc, #372]	; (8004290 <fly+0x708>)
 800411c:	ed93 7a00 	vldr	s14, [r3]
 8004120:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004128:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8004298 <fly+0x710>
 800412c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004134:	dd02      	ble.n	800413c <fly+0x5b4>
 8004136:	eddf 7a58 	vldr	s15, [pc, #352]	; 8004298 <fly+0x710>
 800413a:	e006      	b.n	800414a <fly+0x5c2>
 800413c:	4b54      	ldr	r3, [pc, #336]	; (8004290 <fly+0x708>)
 800413e:	ed93 7a00 	vldr	s14, [r3]
 8004142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414a:	4b54      	ldr	r3, [pc, #336]	; (800429c <fly+0x714>)
 800414c:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_error_z*I_YAW_PERIOD;
 8004150:	4b53      	ldr	r3, [pc, #332]	; (80042a0 <fly+0x718>)
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800415a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800415e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004162:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8004228 <fly+0x6a0>
 8004166:	ee27 7b05 	vmul.f64	d7, d7, d5
 800416a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800416e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004172:	4b4b      	ldr	r3, [pc, #300]	; (80042a0 <fly+0x718>)
 8004174:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated = LIMIT(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 8004178:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <fly+0x718>)
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004182:	4b48      	ldr	r3, [pc, #288]	; (80042a4 <fly+0x71c>)
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800418c:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8004240 <fly+0x6b8>
 8004190:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004194:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419c:	d507      	bpl.n	80041ae <fly+0x626>
 800419e:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <fly+0x71c>)
 80041a0:	ed93 7a00 	vldr	s14, [r3]
 80041a4:	eddf 6a40 	vldr	s13, [pc, #256]	; 80042a8 <fly+0x720>
 80041a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ac:	e01d      	b.n	80041ea <fly+0x662>
 80041ae:	4b3c      	ldr	r3, [pc, #240]	; (80042a0 <fly+0x718>)
 80041b0:	edd3 7a00 	vldr	s15, [r3]
 80041b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80041b8:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <fly+0x71c>)
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80041c2:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8004248 <fly+0x6c0>
 80041c6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80041ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80041ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d2:	dd07      	ble.n	80041e4 <fly+0x65c>
 80041d4:	4b33      	ldr	r3, [pc, #204]	; (80042a4 <fly+0x71c>)
 80041d6:	ed93 7a00 	vldr	s14, [r3]
 80041da:	eddf 6a34 	vldr	s13, [pc, #208]	; 80042ac <fly+0x724>
 80041de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e2:	e002      	b.n	80041ea <fly+0x662>
 80041e4:	4b2e      	ldr	r3, [pc, #184]	; (80042a0 <fly+0x718>)
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	4b2d      	ldr	r3, [pc, #180]	; (80042a0 <fly+0x718>)
 80041ec:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 80041f0:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <fly+0x718>)
 80041f2:	ed93 7a00 	vldr	s14, [r3]
 80041f6:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <fly+0x71c>)
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004200:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <fly+0x728>)
 8004202:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = LIMIT(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 8004206:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <fly+0x72c>)
 8004208:	ed93 7a00 	vldr	s14, [r3]
 800420c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004214:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004294 <fly+0x70c>
 8004218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	d54a      	bpl.n	80042b8 <fly+0x730>
 8004222:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004294 <fly+0x70c>
 8004226:	e05f      	b.n	80042e8 <fly+0x760>
	...
 8004234:	c0609000 	.word	0xc0609000
 8004238:	00000000 	.word	0x00000000
 800423c:	40609000 	.word	0x40609000
 8004240:	00000000 	.word	0x00000000
 8004244:	c0709000 	.word	0xc0709000
 8004248:	00000000 	.word	0x00000000
 800424c:	40709000 	.word	0x40709000
 8004250:	240007b8 	.word	0x240007b8
 8004254:	2400087c 	.word	0x2400087c
 8004258:	240007b4 	.word	0x240007b4
 800425c:	24000004 	.word	0x24000004
 8004260:	c446c000 	.word	0xc446c000
 8004264:	4446c000 	.word	0x4446c000
 8004268:	240007bc 	.word	0x240007bc
 800426c:	24000008 	.word	0x24000008
 8004270:	240007c0 	.word	0x240007c0
 8004274:	240007c8 	.word	0x240007c8
 8004278:	24000884 	.word	0x24000884
 800427c:	c3048000 	.word	0xc3048000
 8004280:	43048000 	.word	0x43048000
 8004284:	240007c4 	.word	0x240007c4
 8004288:	2400000c 	.word	0x2400000c
 800428c:	240007cc 	.word	0x240007cc
 8004290:	24000010 	.word	0x24000010
 8004294:	c4048000 	.word	0xc4048000
 8004298:	44048000 	.word	0x44048000
 800429c:	240007d0 	.word	0x240007d0
 80042a0:	240007d8 	.word	0x240007d8
 80042a4:	2400088c 	.word	0x2400088c
 80042a8:	c3848000 	.word	0xc3848000
 80042ac:	43848000 	.word	0x43848000
 80042b0:	240007d4 	.word	0x240007d4
 80042b4:	24000014 	.word	0x24000014
 80042b8:	4bc1      	ldr	r3, [pc, #772]	; (80045c0 <fly+0xa38>)
 80042ba:	ed93 7a00 	vldr	s14, [r3]
 80042be:	edd7 7a03 	vldr	s15, [r7, #12]
 80042c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80045c4 <fly+0xa3c>
 80042ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d2:	dd02      	ble.n	80042da <fly+0x752>
 80042d4:	eddf 7abb 	vldr	s15, [pc, #748]	; 80045c4 <fly+0xa3c>
 80042d8:	e006      	b.n	80042e8 <fly+0x760>
 80042da:	4bb9      	ldr	r3, [pc, #740]	; (80045c0 <fly+0xa38>)
 80042dc:	ed93 7a00 	vldr	s14, [r3]
 80042e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	4bb7      	ldr	r3, [pc, #732]	; (80045c8 <fly+0xa40>)
 80042ea:	edc3 7a00 	vstr	s15, [r3]

      float background = MIN_SPEED + 8*(11.18f*sqrt(g_throttle > 0 ? g_throttle : 0));
 80042ee:	4bb7      	ldr	r3, [pc, #732]	; (80045cc <fly+0xa44>)
 80042f0:	edd3 7a00 	vldr	s15, [r3]
 80042f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	dd05      	ble.n	800430a <fly+0x782>
 80042fe:	4bb3      	ldr	r3, [pc, #716]	; (80045cc <fly+0xa44>)
 8004300:	edd3 7a00 	vldr	s15, [r3]
 8004304:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004308:	e001      	b.n	800430e <fly+0x786>
 800430a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 80045a8 <fly+0xa20>
 800430e:	eeb0 0b47 	vmov.f64	d0, d7
 8004312:	f00c fa2d 	bl	8010770 <sqrt>
 8004316:	eeb0 7b40 	vmov.f64	d7, d0
 800431a:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80045b0 <fly+0xa28>
 800431e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004322:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8004326:	ee27 7b06 	vmul.f64	d7, d7, d6
 800432a:	ed9f 6ba3 	vldr	d6, [pc, #652]	; 80045b8 <fly+0xa30>
 800432e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004332:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004336:	edc7 7a00 	vstr	s15, [r7]

      g_sig1 = background + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 800433a:	4ba5      	ldr	r3, [pc, #660]	; (80045d0 <fly+0xa48>)
 800433c:	ed93 7a00 	vldr	s14, [r3]
 8004340:	4ba4      	ldr	r3, [pc, #656]	; (80045d4 <fly+0xa4c>)
 8004342:	edd3 7a00 	vldr	s15, [r3]
 8004346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800434a:	4ba3      	ldr	r3, [pc, #652]	; (80045d8 <fly+0xa50>)
 800434c:	edd3 7a00 	vldr	s15, [r3]
 8004350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004354:	edd7 7a00 	vldr	s15, [r7]
 8004358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800435c:	4b9f      	ldr	r3, [pc, #636]	; (80045dc <fly+0xa54>)
 800435e:	edd3 6a00 	vldr	s13, [r3]
 8004362:	4b9f      	ldr	r3, [pc, #636]	; (80045e0 <fly+0xa58>)
 8004364:	edd3 7a00 	vldr	s15, [r3]
 8004368:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800436c:	4b9d      	ldr	r3, [pc, #628]	; (80045e4 <fly+0xa5c>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004376:	ee37 7a67 	vsub.f32	s14, s14, s15
 800437a:	4b9b      	ldr	r3, [pc, #620]	; (80045e8 <fly+0xa60>)
 800437c:	edd3 6a00 	vldr	s13, [r3]
 8004380:	4b9a      	ldr	r3, [pc, #616]	; (80045ec <fly+0xa64>)
 8004382:	edd3 7a00 	vldr	s15, [r3]
 8004386:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800438a:	4b8f      	ldr	r3, [pc, #572]	; (80045c8 <fly+0xa40>)
 800438c:	edd3 7a00 	vldr	s15, [r3]
 8004390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004398:	4b95      	ldr	r3, [pc, #596]	; (80045f0 <fly+0xa68>)
 800439a:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = background + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 800439e:	4b8c      	ldr	r3, [pc, #560]	; (80045d0 <fly+0xa48>)
 80043a0:	ed93 7a00 	vldr	s14, [r3]
 80043a4:	4b8b      	ldr	r3, [pc, #556]	; (80045d4 <fly+0xa4c>)
 80043a6:	edd3 7a00 	vldr	s15, [r3]
 80043aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043ae:	4b8a      	ldr	r3, [pc, #552]	; (80045d8 <fly+0xa50>)
 80043b0:	edd3 7a00 	vldr	s15, [r3]
 80043b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b8:	edd7 7a00 	vldr	s15, [r7]
 80043bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043c0:	4b86      	ldr	r3, [pc, #536]	; (80045dc <fly+0xa54>)
 80043c2:	edd3 6a00 	vldr	s13, [r3]
 80043c6:	4b86      	ldr	r3, [pc, #536]	; (80045e0 <fly+0xa58>)
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80043d0:	4b84      	ldr	r3, [pc, #528]	; (80045e4 <fly+0xa5c>)
 80043d2:	edd3 7a00 	vldr	s15, [r3]
 80043d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043de:	4b82      	ldr	r3, [pc, #520]	; (80045e8 <fly+0xa60>)
 80043e0:	edd3 6a00 	vldr	s13, [r3]
 80043e4:	4b81      	ldr	r3, [pc, #516]	; (80045ec <fly+0xa64>)
 80043e6:	edd3 7a00 	vldr	s15, [r3]
 80043ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80043ee:	4b76      	ldr	r3, [pc, #472]	; (80045c8 <fly+0xa40>)
 80043f0:	edd3 7a00 	vldr	s15, [r3]
 80043f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043fc:	4b7d      	ldr	r3, [pc, #500]	; (80045f4 <fly+0xa6c>)
 80043fe:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = background - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8004402:	4b73      	ldr	r3, [pc, #460]	; (80045d0 <fly+0xa48>)
 8004404:	ed93 7a00 	vldr	s14, [r3]
 8004408:	4b72      	ldr	r3, [pc, #456]	; (80045d4 <fly+0xa4c>)
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004412:	4b71      	ldr	r3, [pc, #452]	; (80045d8 <fly+0xa50>)
 8004414:	edd3 7a00 	vldr	s15, [r3]
 8004418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800441c:	ed97 7a00 	vldr	s14, [r7]
 8004420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004424:	4b6d      	ldr	r3, [pc, #436]	; (80045dc <fly+0xa54>)
 8004426:	edd3 6a00 	vldr	s13, [r3]
 800442a:	4b6d      	ldr	r3, [pc, #436]	; (80045e0 <fly+0xa58>)
 800442c:	edd3 7a00 	vldr	s15, [r3]
 8004430:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004434:	4b6b      	ldr	r3, [pc, #428]	; (80045e4 <fly+0xa5c>)
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004442:	4b69      	ldr	r3, [pc, #420]	; (80045e8 <fly+0xa60>)
 8004444:	edd3 6a00 	vldr	s13, [r3]
 8004448:	4b68      	ldr	r3, [pc, #416]	; (80045ec <fly+0xa64>)
 800444a:	edd3 7a00 	vldr	s15, [r3]
 800444e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004452:	4b5d      	ldr	r3, [pc, #372]	; (80045c8 <fly+0xa40>)
 8004454:	edd3 7a00 	vldr	s15, [r3]
 8004458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004460:	4b65      	ldr	r3, [pc, #404]	; (80045f8 <fly+0xa70>)
 8004462:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = background - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8004466:	4b5a      	ldr	r3, [pc, #360]	; (80045d0 <fly+0xa48>)
 8004468:	ed93 7a00 	vldr	s14, [r3]
 800446c:	4b59      	ldr	r3, [pc, #356]	; (80045d4 <fly+0xa4c>)
 800446e:	edd3 7a00 	vldr	s15, [r3]
 8004472:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004476:	4b58      	ldr	r3, [pc, #352]	; (80045d8 <fly+0xa50>)
 8004478:	edd3 7a00 	vldr	s15, [r3]
 800447c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004480:	ed97 7a00 	vldr	s14, [r7]
 8004484:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004488:	4b54      	ldr	r3, [pc, #336]	; (80045dc <fly+0xa54>)
 800448a:	edd3 6a00 	vldr	s13, [r3]
 800448e:	4b54      	ldr	r3, [pc, #336]	; (80045e0 <fly+0xa58>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004498:	4b52      	ldr	r3, [pc, #328]	; (80045e4 <fly+0xa5c>)
 800449a:	edd3 7a00 	vldr	s15, [r3]
 800449e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044a6:	4b50      	ldr	r3, [pc, #320]	; (80045e8 <fly+0xa60>)
 80044a8:	edd3 6a00 	vldr	s13, [r3]
 80044ac:	4b4f      	ldr	r3, [pc, #316]	; (80045ec <fly+0xa64>)
 80044ae:	edd3 7a00 	vldr	s15, [r3]
 80044b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80044b6:	4b44      	ldr	r3, [pc, #272]	; (80045c8 <fly+0xa40>)
 80044b8:	edd3 7a00 	vldr	s15, [r3]
 80044bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044c4:	4b4d      	ldr	r3, [pc, #308]	; (80045fc <fly+0xa74>)
 80044c6:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = LIMIT(g_sig1, MIN_SPEED, MAX_SPEED);
 80044ca:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <fly+0xa68>)
 80044cc:	edd3 7a00 	vldr	s15, [r3]
 80044d0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004600 <fly+0xa78>
 80044d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044dc:	d501      	bpl.n	80044e2 <fly+0x95a>
 80044de:	4b49      	ldr	r3, [pc, #292]	; (8004604 <fly+0xa7c>)
 80044e0:	e00d      	b.n	80044fe <fly+0x976>
 80044e2:	4b43      	ldr	r3, [pc, #268]	; (80045f0 <fly+0xa68>)
 80044e4:	edd3 7a00 	vldr	s15, [r3]
 80044e8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004608 <fly+0xa80>
 80044ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f4:	dd01      	ble.n	80044fa <fly+0x972>
 80044f6:	4b45      	ldr	r3, [pc, #276]	; (800460c <fly+0xa84>)
 80044f8:	e001      	b.n	80044fe <fly+0x976>
 80044fa:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <fly+0xa68>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a3c      	ldr	r2, [pc, #240]	; (80045f0 <fly+0xa68>)
 8004500:	6013      	str	r3, [r2, #0]
      g_sig2 = LIMIT(g_sig2, MIN_SPEED, MAX_SPEED);
 8004502:	4b3c      	ldr	r3, [pc, #240]	; (80045f4 <fly+0xa6c>)
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8004600 <fly+0xa78>
 800450c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004514:	d501      	bpl.n	800451a <fly+0x992>
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <fly+0xa7c>)
 8004518:	e00d      	b.n	8004536 <fly+0x9ae>
 800451a:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <fly+0xa6c>)
 800451c:	edd3 7a00 	vldr	s15, [r3]
 8004520:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004608 <fly+0xa80>
 8004524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	dd01      	ble.n	8004532 <fly+0x9aa>
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <fly+0xa84>)
 8004530:	e001      	b.n	8004536 <fly+0x9ae>
 8004532:	4b30      	ldr	r3, [pc, #192]	; (80045f4 <fly+0xa6c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <fly+0xa6c>)
 8004538:	6013      	str	r3, [r2, #0]
      g_sig3 = LIMIT(g_sig3, MIN_SPEED, MAX_SPEED);
 800453a:	4b2f      	ldr	r3, [pc, #188]	; (80045f8 <fly+0xa70>)
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004600 <fly+0xa78>
 8004544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	d501      	bpl.n	8004552 <fly+0x9ca>
 800454e:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <fly+0xa7c>)
 8004550:	e00d      	b.n	800456e <fly+0x9e6>
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <fly+0xa70>)
 8004554:	edd3 7a00 	vldr	s15, [r3]
 8004558:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004608 <fly+0xa80>
 800455c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004564:	dd01      	ble.n	800456a <fly+0x9e2>
 8004566:	4b29      	ldr	r3, [pc, #164]	; (800460c <fly+0xa84>)
 8004568:	e001      	b.n	800456e <fly+0x9e6>
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <fly+0xa70>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <fly+0xa70>)
 8004570:	6013      	str	r3, [r2, #0]
      g_sig4 = LIMIT(g_sig4, MIN_SPEED, MAX_SPEED);
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <fly+0xa74>)
 8004574:	edd3 7a00 	vldr	s15, [r3]
 8004578:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004600 <fly+0xa78>
 800457c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004584:	d501      	bpl.n	800458a <fly+0xa02>
 8004586:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <fly+0xa7c>)
 8004588:	e044      	b.n	8004614 <fly+0xa8c>
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <fly+0xa74>)
 800458c:	edd3 7a00 	vldr	s15, [r3]
 8004590:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004608 <fly+0xa80>
 8004594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459c:	dd38      	ble.n	8004610 <fly+0xa88>
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <fly+0xa84>)
 80045a0:	e038      	b.n	8004614 <fly+0xa8c>
 80045a2:	bf00      	nop
 80045a4:	f3af 8000 	nop.w
	...
 80045b4:	40265c29 	.word	0x40265c29
 80045b8:	00000000 	.word	0x00000000
 80045bc:	40a3ec00 	.word	0x40a3ec00
 80045c0:	24000014 	.word	0x24000014
 80045c4:	44048000 	.word	0x44048000
 80045c8:	240007dc 	.word	0x240007dc
 80045cc:	24000868 	.word	0x24000868
 80045d0:	240007b0 	.word	0x240007b0
 80045d4:	240007b4 	.word	0x240007b4
 80045d8:	240007bc 	.word	0x240007bc
 80045dc:	240007c0 	.word	0x240007c0
 80045e0:	240007c4 	.word	0x240007c4
 80045e4:	240007cc 	.word	0x240007cc
 80045e8:	240007d0 	.word	0x240007d0
 80045ec:	240007d4 	.word	0x240007d4
 80045f0:	240007e0 	.word	0x240007e0
 80045f4:	240007e4 	.word	0x240007e4
 80045f8:	240007e8 	.word	0x240007e8
 80045fc:	240007ec 	.word	0x240007ec
 8004600:	451f6000 	.word	0x451f6000
 8004604:	451f6000 	.word	0x451f6000
 8004608:	45a28000 	.word	0x45a28000
 800460c:	45a28000 	.word	0x45a28000
 8004610:	4ba1      	ldr	r3, [pc, #644]	; (8004898 <fly+0xd10>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4aa0      	ldr	r2, [pc, #640]	; (8004898 <fly+0xd10>)
 8004616:	6013      	str	r3, [r2, #0]

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8004618:	4ba0      	ldr	r3, [pc, #640]	; (800489c <fly+0xd14>)
 800461a:	edd3 7a00 	vldr	s15, [r3]
 800461e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004622:	4b9f      	ldr	r3, [pc, #636]	; (80048a0 <fly+0xd18>)
 8004624:	edd3 7a00 	vldr	s15, [r3]
 8004628:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800462c:	4b9d      	ldr	r3, [pc, #628]	; (80048a4 <fly+0xd1c>)
 800462e:	edd3 7a00 	vldr	s15, [r3]
 8004632:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8004636:	4b98      	ldr	r3, [pc, #608]	; (8004898 <fly+0xd10>)
 8004638:	edd3 7a00 	vldr	s15, [r3]
 800463c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004640:	ee17 3a90 	vmov	r3, s15
 8004644:	ee16 2a10 	vmov	r2, s12
 8004648:	ee16 1a90 	vmov	r1, s13
 800464c:	ee17 0a10 	vmov	r0, s14
 8004650:	f000 f954 	bl	80048fc <set_speed>

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 8004654:	4b94      	ldr	r3, [pc, #592]	; (80048a8 <fly+0xd20>)
 8004656:	edd3 7a00 	vldr	s15, [r3]
 800465a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80048ac <fly+0xd24>
 800465e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004666:	d802      	bhi.n	800466e <fly+0xae6>
        fly_mode = init;
 8004668:	4b91      	ldr	r3, [pc, #580]	; (80048b0 <fly+0xd28>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
      }

      // Stop if angle too large (crashed), can disable if test with the rig
      if (angle_error_x < -90 || angle_error_x > 90 || angle_error_y < -90 || angle_error_y > 90) {
 800466e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004672:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80048b4 <fly+0xd2c>
 8004676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800467a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467e:	d41a      	bmi.n	80046b6 <fly+0xb2e>
 8004680:	edd7 7a01 	vldr	s15, [r7, #4]
 8004684:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80048b8 <fly+0xd30>
 8004688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	dc11      	bgt.n	80046b6 <fly+0xb2e>
 8004692:	edd7 7a02 	vldr	s15, [r7, #8]
 8004696:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80048b4 <fly+0xd2c>
 800469a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a2:	d408      	bmi.n	80046b6 <fly+0xb2e>
 80046a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80046a8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80048b8 <fly+0xd30>
 80046ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b4:	dd02      	ble.n	80046bc <fly+0xb34>
        fly_mode = init;
 80046b6:	4b7e      	ldr	r3, [pc, #504]	; (80048b0 <fly+0xd28>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
      }

      blink();
 80046bc:	f7fe fe36 	bl	800332c <blink>
      break;
 80046c0:	e0e6      	b.n	8004890 <fly+0xd08>
    case landing:

      break;
    case testing:
      blink();
 80046c2:	f7fe fe33 	bl	800332c <blink>
      g_sig1 = MIN_SPEED + LIMIT(20*g_throttle, 0, MAX_SPEED);
 80046c6:	4b78      	ldr	r3, [pc, #480]	; (80048a8 <fly+0xd20>)
 80046c8:	edd3 7a00 	vldr	s15, [r3]
 80046cc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80046d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046dc:	d502      	bpl.n	80046e4 <fly+0xb5c>
 80046de:	eddf 7a77 	vldr	s15, [pc, #476]	; 80048bc <fly+0xd34>
 80046e2:	e017      	b.n	8004714 <fly+0xb8c>
 80046e4:	4b70      	ldr	r3, [pc, #448]	; (80048a8 <fly+0xd20>)
 80046e6:	edd3 7a00 	vldr	s15, [r3]
 80046ea:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80046ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046f2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80048c0 <fly+0xd38>
 80046f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fe:	dd02      	ble.n	8004706 <fly+0xb7e>
 8004700:	eddf 7a6f 	vldr	s15, [pc, #444]	; 80048c0 <fly+0xd38>
 8004704:	e006      	b.n	8004714 <fly+0xb8c>
 8004706:	4b68      	ldr	r3, [pc, #416]	; (80048a8 <fly+0xd20>)
 8004708:	edd3 7a00 	vldr	s15, [r3]
 800470c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004714:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80048c4 <fly+0xd3c>
 8004718:	ee77 7a87 	vadd.f32	s15, s15, s14
 800471c:	4b5f      	ldr	r3, [pc, #380]	; (800489c <fly+0xd14>)
 800471e:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + LIMIT(20*g_yaw, 0, MAX_SPEED);
 8004722:	4b69      	ldr	r3, [pc, #420]	; (80048c8 <fly+0xd40>)
 8004724:	edd3 7a00 	vldr	s15, [r3]
 8004728:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800472c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004730:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004738:	d502      	bpl.n	8004740 <fly+0xbb8>
 800473a:	eddf 7a60 	vldr	s15, [pc, #384]	; 80048bc <fly+0xd34>
 800473e:	e017      	b.n	8004770 <fly+0xbe8>
 8004740:	4b61      	ldr	r3, [pc, #388]	; (80048c8 <fly+0xd40>)
 8004742:	edd3 7a00 	vldr	s15, [r3]
 8004746:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800474a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800474e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80048c0 <fly+0xd38>
 8004752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475a:	dd02      	ble.n	8004762 <fly+0xbda>
 800475c:	eddf 7a58 	vldr	s15, [pc, #352]	; 80048c0 <fly+0xd38>
 8004760:	e006      	b.n	8004770 <fly+0xbe8>
 8004762:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <fly+0xd40>)
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800476c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004770:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80048c4 <fly+0xd3c>
 8004774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004778:	4b49      	ldr	r3, [pc, #292]	; (80048a0 <fly+0xd18>)
 800477a:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + LIMIT(20*g_pitch, 0, MAX_SPEED);
 800477e:	4b53      	ldr	r3, [pc, #332]	; (80048cc <fly+0xd44>)
 8004780:	edd3 7a00 	vldr	s15, [r3]
 8004784:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800478c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004794:	d502      	bpl.n	800479c <fly+0xc14>
 8004796:	eddf 7a49 	vldr	s15, [pc, #292]	; 80048bc <fly+0xd34>
 800479a:	e017      	b.n	80047cc <fly+0xc44>
 800479c:	4b4b      	ldr	r3, [pc, #300]	; (80048cc <fly+0xd44>)
 800479e:	edd3 7a00 	vldr	s15, [r3]
 80047a2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80047a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047aa:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80048c0 <fly+0xd38>
 80047ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	dd02      	ble.n	80047be <fly+0xc36>
 80047b8:	eddf 7a41 	vldr	s15, [pc, #260]	; 80048c0 <fly+0xd38>
 80047bc:	e006      	b.n	80047cc <fly+0xc44>
 80047be:	4b43      	ldr	r3, [pc, #268]	; (80048cc <fly+0xd44>)
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80047c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047cc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80048c4 <fly+0xd3c>
 80047d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047d4:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <fly+0xd1c>)
 80047d6:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + LIMIT(20*g_roll, 0, MAX_SPEED);
 80047da:	4b3d      	ldr	r3, [pc, #244]	; (80048d0 <fly+0xd48>)
 80047dc:	edd3 7a00 	vldr	s15, [r3]
 80047e0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80047e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f0:	d502      	bpl.n	80047f8 <fly+0xc70>
 80047f2:	eddf 7a32 	vldr	s15, [pc, #200]	; 80048bc <fly+0xd34>
 80047f6:	e017      	b.n	8004828 <fly+0xca0>
 80047f8:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <fly+0xd48>)
 80047fa:	edd3 7a00 	vldr	s15, [r3]
 80047fe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004806:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80048c0 <fly+0xd38>
 800480a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	dd02      	ble.n	800481a <fly+0xc92>
 8004814:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80048c0 <fly+0xd38>
 8004818:	e006      	b.n	8004828 <fly+0xca0>
 800481a:	4b2d      	ldr	r3, [pc, #180]	; (80048d0 <fly+0xd48>)
 800481c:	edd3 7a00 	vldr	s15, [r3]
 8004820:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004828:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80048c4 <fly+0xd3c>
 800482c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <fly+0xd10>)
 8004832:	edc3 7a00 	vstr	s15, [r3]

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <fly+0xd20>)
 8004838:	edd3 7a00 	vldr	s15, [r3]
 800483c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80048ac <fly+0xd24>
 8004840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004848:	d802      	bhi.n	8004850 <fly+0xcc8>
        fly_mode = init;
 800484a:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <fly+0xd28>)
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
      }

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8004850:	4b12      	ldr	r3, [pc, #72]	; (800489c <fly+0xd14>)
 8004852:	edd3 7a00 	vldr	s15, [r3]
 8004856:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <fly+0xd18>)
 800485c:	edd3 7a00 	vldr	s15, [r3]
 8004860:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8004864:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <fly+0xd1c>)
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <fly+0xd10>)
 8004870:	edd3 7a00 	vldr	s15, [r3]
 8004874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004878:	ee17 3a90 	vmov	r3, s15
 800487c:	ee16 2a10 	vmov	r2, s12
 8004880:	ee16 1a90 	vmov	r1, s13
 8004884:	ee17 0a10 	vmov	r0, s14
 8004888:	f000 f838 	bl	80048fc <set_speed>
      break;
 800488c:	e000      	b.n	8004890 <fly+0xd08>
      break;
 800488e:	bf00      	nop
  }
}
 8004890:	bf00      	nop
 8004892:	3728      	adds	r7, #40	; 0x28
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	240007ec 	.word	0x240007ec
 800489c:	240007e0 	.word	0x240007e0
 80048a0:	240007e4 	.word	0x240007e4
 80048a4:	240007e8 	.word	0x240007e8
 80048a8:	24000868 	.word	0x24000868
 80048ac:	c2f80000 	.word	0xc2f80000
 80048b0:	24001868 	.word	0x24001868
 80048b4:	c2b40000 	.word	0xc2b40000
 80048b8:	42b40000 	.word	0x42b40000
 80048bc:	00000000 	.word	0x00000000
 80048c0:	45a28000 	.word	0x45a28000
 80048c4:	451f6000 	.word	0x451f6000
 80048c8:	24000874 	.word	0x24000874
 80048cc:	2400086c 	.word	0x2400086c
 80048d0:	24000870 	.word	0x24000870

080048d4 <console>:

void console(const char *str) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fb fcff 	bl	80002e0 <strlen>
 80048e2:	4603      	mov	r3, r0
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4803      	ldr	r0, [pc, #12]	; (80048f8 <console+0x24>)
 80048ec:	f008 fc72 	bl	800d1d4 <HAL_UART_Transmit_IT>
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	2400053c 	.word	0x2400053c

080048fc <set_speed>:

void set_speed(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4) {
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  TIM2->CCR1 = m1;
 800490a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = m2;
 8004912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	6393      	str	r3, [r2, #56]	; 0x38
  TIM2->CCR3 = m3;
 800491a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = m4;
 8004922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6413      	str	r3, [r2, #64]	; 0x40
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
	...

08004938 <init_filters>:

void init_filters() {
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  average_filter_init(&g_af[0], 5); // Thrust
 800493c:	2105      	movs	r1, #5
 800493e:	480a      	ldr	r0, [pc, #40]	; (8004968 <init_filters+0x30>)
 8004940:	f7fc f87d 	bl	8000a3e <average_filter_init>
  average_filter_init(&g_af[1], 5); // Yaw
 8004944:	2105      	movs	r1, #5
 8004946:	4809      	ldr	r0, [pc, #36]	; (800496c <init_filters+0x34>)
 8004948:	f7fc f879 	bl	8000a3e <average_filter_init>
  average_filter_init(&g_af[2], 5); // Pitch
 800494c:	2105      	movs	r1, #5
 800494e:	4808      	ldr	r0, [pc, #32]	; (8004970 <init_filters+0x38>)
 8004950:	f7fc f875 	bl	8000a3e <average_filter_init>
  average_filter_init(&g_af[3], 5); // Roll
 8004954:	2105      	movs	r1, #5
 8004956:	4807      	ldr	r0, [pc, #28]	; (8004974 <init_filters+0x3c>)
 8004958:	f7fc f871 	bl	8000a3e <average_filter_init>
  average_filter_init(&g_af[4], 5); // Stick 1
 800495c:	2105      	movs	r1, #5
 800495e:	4806      	ldr	r0, [pc, #24]	; (8004978 <init_filters+0x40>)
 8004960:	f7fc f86d 	bl	8000a3e <average_filter_init>
}
 8004964:	bf00      	nop
 8004966:	bd80      	pop	{r7, pc}
 8004968:	2400092c 	.word	0x2400092c
 800496c:	24000ac8 	.word	0x24000ac8
 8004970:	24000c64 	.word	0x24000c64
 8004974:	24000e00 	.word	0x24000e00
 8004978:	24000f9c 	.word	0x24000f9c

0800497c <init_sensors>:

void init_sensors() {
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af02      	add	r7, sp, #8
  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 8004982:	2303      	movs	r3, #3
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2303      	movs	r3, #3
 8004988:	2200      	movs	r2, #0
 800498a:	4912      	ldr	r1, [pc, #72]	; (80049d4 <init_sensors+0x58>)
 800498c:	4812      	ldr	r0, [pc, #72]	; (80049d8 <init_sensors+0x5c>)
 800498e:	f7fd f829 	bl	80019e4 <MPU6050_init>
 8004992:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <init_sensors+0x2a>
    flash(error);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc f8b8 	bl	8000b14 <flash>
  while (1) {
 80049a4:	e7ed      	b.n	8004982 <init_sensors+0x6>
    if (error == 0) break;
 80049a6:	bf00      	nop
  }

  MPU6050_calibrate(&g_mpu6050);
 80049a8:	480b      	ldr	r0, [pc, #44]	; (80049d8 <init_sensors+0x5c>)
 80049aa:	f7fd fa55 	bl	8001e58 <MPU6050_calibrate>

  // This takes quite long
  while (1) {
    int error = MS5611_init(
 80049ae:	4909      	ldr	r1, [pc, #36]	; (80049d4 <init_sensors+0x58>)
 80049b0:	480a      	ldr	r0, [pc, #40]	; (80049dc <init_sensors+0x60>)
 80049b2:	f7fd fda4 	bl	80024fe <MS5611_init>
 80049b6:	6038      	str	r0, [r7, #0]
        &g_ms5611,
        &hi2c1);
    if (error == 0) break;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <init_sensors+0x4e>
    flash(error);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fc f8a6 	bl	8000b14 <flash>
  while (1) {
 80049c8:	e7f1      	b.n	80049ae <init_sensors+0x32>
    if (error == 0) break;
 80049ca:	bf00      	nop
  }
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	240000bc 	.word	0x240000bc
 80049d8:	24001538 	.word	0x24001538
 80049dc:	24001668 	.word	0x24001668

080049e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049e8:	4a14      	ldr	r2, [pc, #80]	; (8004a3c <_sbrk+0x5c>)
 80049ea:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <_sbrk+0x60>)
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049f4:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <_sbrk+0x64>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d102      	bne.n	8004a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <_sbrk+0x64>)
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <_sbrk+0x68>)
 8004a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <_sbrk+0x64>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d207      	bcs.n	8004a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a10:	f00a fd0a 	bl	800f428 <__errno>
 8004a14:	4603      	mov	r3, r0
 8004a16:	220c      	movs	r2, #12
 8004a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a1e:	e009      	b.n	8004a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a20:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <_sbrk+0x64>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a26:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <_sbrk+0x64>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	4a05      	ldr	r2, [pc, #20]	; (8004a44 <_sbrk+0x64>)
 8004a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a32:	68fb      	ldr	r3, [r7, #12]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	24080000 	.word	0x24080000
 8004a40:	00000400 	.word	0x00000400
 8004a44:	24001880 	.word	0x24001880
 8004a48:	24001898 	.word	0x24001898

08004a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a50:	4b39      	ldr	r3, [pc, #228]	; (8004b38 <SystemInit+0xec>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	4a38      	ldr	r2, [pc, #224]	; (8004b38 <SystemInit+0xec>)
 8004a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004a60:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <SystemInit+0xf0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2b06      	cmp	r3, #6
 8004a6a:	d807      	bhi.n	8004a7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004a6c:	4b33      	ldr	r3, [pc, #204]	; (8004b3c <SystemInit+0xf0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f023 030f 	bic.w	r3, r3, #15
 8004a74:	4a31      	ldr	r2, [pc, #196]	; (8004b3c <SystemInit+0xf0>)
 8004a76:	f043 0307 	orr.w	r3, r3, #7
 8004a7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004a7c:	4b30      	ldr	r3, [pc, #192]	; (8004b40 <SystemInit+0xf4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <SystemInit+0xf4>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004a88:	4b2d      	ldr	r3, [pc, #180]	; (8004b40 <SystemInit+0xf4>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004a8e:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <SystemInit+0xf4>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	492b      	ldr	r1, [pc, #172]	; (8004b40 <SystemInit+0xf4>)
 8004a94:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <SystemInit+0xf8>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004a9a:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <SystemInit+0xf0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004aa6:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <SystemInit+0xf0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 030f 	bic.w	r3, r3, #15
 8004aae:	4a23      	ldr	r2, [pc, #140]	; (8004b3c <SystemInit+0xf0>)
 8004ab0:	f043 0307 	orr.w	r3, r3, #7
 8004ab4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <SystemInit+0xf4>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004abc:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <SystemInit+0xf4>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004ac2:	4b1f      	ldr	r3, [pc, #124]	; (8004b40 <SystemInit+0xf4>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <SystemInit+0xf4>)
 8004aca:	4a1f      	ldr	r2, [pc, #124]	; (8004b48 <SystemInit+0xfc>)
 8004acc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <SystemInit+0xf4>)
 8004ad0:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <SystemInit+0x100>)
 8004ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <SystemInit+0xf4>)
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <SystemInit+0x104>)
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <SystemInit+0xf4>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <SystemInit+0xf4>)
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <SystemInit+0x104>)
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004ae6:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <SystemInit+0xf4>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <SystemInit+0xf4>)
 8004aee:	4a18      	ldr	r2, [pc, #96]	; (8004b50 <SystemInit+0x104>)
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004af2:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <SystemInit+0xf4>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <SystemInit+0xf4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a10      	ldr	r2, [pc, #64]	; (8004b40 <SystemInit+0xf4>)
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <SystemInit+0xf4>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <SystemInit+0x108>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <SystemInit+0x10c>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b16:	d202      	bcs.n	8004b1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004b18:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <SystemInit+0x110>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <SystemInit+0x114>)
 8004b20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004b24:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <SystemInit+0xec>)
 8004b28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b2c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	e000ed00 	.word	0xe000ed00
 8004b3c:	52002000 	.word	0x52002000
 8004b40:	58024400 	.word	0x58024400
 8004b44:	eaf6ed7f 	.word	0xeaf6ed7f
 8004b48:	02020200 	.word	0x02020200
 8004b4c:	01ff0000 	.word	0x01ff0000
 8004b50:	01010280 	.word	0x01010280
 8004b54:	5c001000 	.word	0x5c001000
 8004b58:	ffff0000 	.word	0xffff0000
 8004b5c:	51008108 	.word	0x51008108
 8004b60:	52004000 	.word	0x52004000

08004b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b9c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004b68:	f7ff ff70 	bl	8004a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b6e:	e003      	b.n	8004b78 <LoopCopyDataInit>

08004b70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004b72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b76:	3104      	adds	r1, #4

08004b78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b78:	480a      	ldr	r0, [pc, #40]	; (8004ba4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004b7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b80:	d3f6      	bcc.n	8004b70 <CopyDataInit>
  ldr  r2, =_sbss
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004b84:	e002      	b.n	8004b8c <LoopFillZerobss>

08004b86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b88:	f842 3b04 	str.w	r3, [r2], #4

08004b8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8004b8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b90:	d3f9      	bcc.n	8004b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b92:	f00a fc4f 	bl	800f434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b96:	f7fb ffe3 	bl	8000b60 <main>
  bx  lr    
 8004b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b9c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004ba0:	08013550 	.word	0x08013550
  ldr  r0, =_sdata
 8004ba4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004ba8:	240000a0 	.word	0x240000a0
  ldr  r2, =_sbss
 8004bac:	240000a0 	.word	0x240000a0
  ldr  r3, = _ebss
 8004bb0:	24001898 	.word	0x24001898

08004bb4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bb4:	e7fe      	b.n	8004bb4 <ADC3_IRQHandler>
	...

08004bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bbe:	2003      	movs	r0, #3
 8004bc0:	f000 f98c 	bl	8004edc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bc4:	f004 ff40 	bl	8009a48 <HAL_RCC_GetSysClockFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <HAL_Init+0x68>)
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	4913      	ldr	r1, [pc, #76]	; (8004c24 <HAL_Init+0x6c>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004be0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004be2:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_Init+0x68>)
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	4a0e      	ldr	r2, [pc, #56]	; (8004c24 <HAL_Init+0x6c>)
 8004bec:	5cd3      	ldrb	r3, [r2, r3]
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf8:	4a0b      	ldr	r2, [pc, #44]	; (8004c28 <HAL_Init+0x70>)
 8004bfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bfc:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <HAL_Init+0x74>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c02:	2000      	movs	r0, #0
 8004c04:	f000 f814 	bl	8004c30 <HAL_InitTick>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e002      	b.n	8004c18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004c12:	f7fd ff09 	bl	8002a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	58024400 	.word	0x58024400
 8004c24:	080116cc 	.word	0x080116cc
 8004c28:	24000030 	.word	0x24000030
 8004c2c:	2400002c 	.word	0x2400002c

08004c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_InitTick+0x60>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e021      	b.n	8004c88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_InitTick+0x64>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <HAL_InitTick+0x60>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f971 	bl	8004f42 <HAL_SYSTICK_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e00e      	b.n	8004c88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b0f      	cmp	r3, #15
 8004c6e:	d80a      	bhi.n	8004c86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c70:	2200      	movs	r2, #0
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c78:	f000 f93b 	bl	8004ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c7c:	4a06      	ldr	r2, [pc, #24]	; (8004c98 <HAL_InitTick+0x68>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e000      	b.n	8004c88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	24000038 	.word	0x24000038
 8004c94:	2400002c 	.word	0x2400002c
 8004c98:	24000034 	.word	0x24000034

08004c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_IncTick+0x20>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_IncTick+0x24>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4413      	add	r3, r2
 8004cac:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <HAL_IncTick+0x24>)
 8004cae:	6013      	str	r3, [r2, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	24000038 	.word	0x24000038
 8004cc0:	24001884 	.word	0x24001884

08004cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <HAL_GetTick+0x14>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	24001884 	.word	0x24001884

08004cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ce4:	f7ff ffee 	bl	8004cc4 <HAL_GetTick>
 8004ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cf4:	d005      	beq.n	8004d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <HAL_Delay+0x44>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d02:	bf00      	nop
 8004d04:	f7ff ffde 	bl	8004cc4 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d8f7      	bhi.n	8004d04 <HAL_Delay+0x28>
  {
  }
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	24000038 	.word	0x24000038

08004d24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <HAL_GetREVID+0x14>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	0c1b      	lsrs	r3, r3, #16
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	5c001000 	.word	0x5c001000

08004d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <__NVIC_SetPriorityGrouping+0x40>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <__NVIC_SetPriorityGrouping+0x44>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d6a:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <__NVIC_SetPriorityGrouping+0x40>)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	60d3      	str	r3, [r2, #12]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	e000ed00 	.word	0xe000ed00
 8004d80:	05fa0000 	.word	0x05fa0000

08004d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <__NVIC_GetPriorityGrouping+0x18>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	f003 0307 	and.w	r3, r3, #7
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	db0b      	blt.n	8004dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	f003 021f 	and.w	r2, r3, #31
 8004db8:	4907      	ldr	r1, [pc, #28]	; (8004dd8 <__NVIC_EnableIRQ+0x38>)
 8004dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	e000e100 	.word	0xe000e100

08004ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	6039      	str	r1, [r7, #0]
 8004de6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	db0a      	blt.n	8004e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	490c      	ldr	r1, [pc, #48]	; (8004e28 <__NVIC_SetPriority+0x4c>)
 8004df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dfa:	0112      	lsls	r2, r2, #4
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	440b      	add	r3, r1
 8004e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e04:	e00a      	b.n	8004e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	4908      	ldr	r1, [pc, #32]	; (8004e2c <__NVIC_SetPriority+0x50>)
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	3b04      	subs	r3, #4
 8004e14:	0112      	lsls	r2, r2, #4
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	440b      	add	r3, r1
 8004e1a:	761a      	strb	r2, [r3, #24]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	e000e100 	.word	0xe000e100
 8004e2c:	e000ed00 	.word	0xe000ed00

08004e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f1c3 0307 	rsb	r3, r3, #7
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	bf28      	it	cs
 8004e4e:	2304      	movcs	r3, #4
 8004e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d902      	bls.n	8004e60 <NVIC_EncodePriority+0x30>
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3b03      	subs	r3, #3
 8004e5e:	e000      	b.n	8004e62 <NVIC_EncodePriority+0x32>
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	401a      	ands	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	43d9      	mvns	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e88:	4313      	orrs	r3, r2
         );
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3724      	adds	r7, #36	; 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea8:	d301      	bcc.n	8004eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e00f      	b.n	8004ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eae:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <SysTick_Config+0x40>)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eb6:	210f      	movs	r1, #15
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ebc:	f7ff ff8e 	bl	8004ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <SysTick_Config+0x40>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ec6:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <SysTick_Config+0x40>)
 8004ec8:	2207      	movs	r2, #7
 8004eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	e000e010 	.word	0xe000e010

08004edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff ff29 	bl	8004d3c <__NVIC_SetPriorityGrouping>
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	4603      	mov	r3, r0
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
 8004efe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f00:	f7ff ff40 	bl	8004d84 <__NVIC_GetPriorityGrouping>
 8004f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f7ff ff90 	bl	8004e30 <NVIC_EncodePriority>
 8004f10:	4602      	mov	r2, r0
 8004f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff5f 	bl	8004ddc <__NVIC_SetPriority>
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff33 	bl	8004da0 <__NVIC_EnableIRQ>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ffa4 	bl	8004e98 <SysTick_Config>
 8004f50:	4603      	mov	r3, r0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004f64:	f7ff feae 	bl	8004cc4 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e316      	b.n	80055a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a66      	ldr	r2, [pc, #408]	; (8005114 <HAL_DMA_Init+0x1b8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d04a      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a65      	ldr	r2, [pc, #404]	; (8005118 <HAL_DMA_Init+0x1bc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d045      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a63      	ldr	r2, [pc, #396]	; (800511c <HAL_DMA_Init+0x1c0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d040      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a62      	ldr	r2, [pc, #392]	; (8005120 <HAL_DMA_Init+0x1c4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d03b      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a60      	ldr	r2, [pc, #384]	; (8005124 <HAL_DMA_Init+0x1c8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d036      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a5f      	ldr	r2, [pc, #380]	; (8005128 <HAL_DMA_Init+0x1cc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d031      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a5d      	ldr	r2, [pc, #372]	; (800512c <HAL_DMA_Init+0x1d0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d02c      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a5c      	ldr	r2, [pc, #368]	; (8005130 <HAL_DMA_Init+0x1d4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d027      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a5a      	ldr	r2, [pc, #360]	; (8005134 <HAL_DMA_Init+0x1d8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d022      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a59      	ldr	r2, [pc, #356]	; (8005138 <HAL_DMA_Init+0x1dc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d01d      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a57      	ldr	r2, [pc, #348]	; (800513c <HAL_DMA_Init+0x1e0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d018      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a56      	ldr	r2, [pc, #344]	; (8005140 <HAL_DMA_Init+0x1e4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d013      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a54      	ldr	r2, [pc, #336]	; (8005144 <HAL_DMA_Init+0x1e8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00e      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a53      	ldr	r2, [pc, #332]	; (8005148 <HAL_DMA_Init+0x1ec>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d009      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a51      	ldr	r2, [pc, #324]	; (800514c <HAL_DMA_Init+0x1f0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_DMA_Init+0xb8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a50      	ldr	r2, [pc, #320]	; (8005150 <HAL_DMA_Init+0x1f4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d101      	bne.n	8005018 <HAL_DMA_Init+0xbc>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <HAL_DMA_Init+0xbe>
 8005018:	2300      	movs	r3, #0
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 813b 	beq.w	8005296 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a37      	ldr	r2, [pc, #220]	; (8005114 <HAL_DMA_Init+0x1b8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d04a      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a36      	ldr	r2, [pc, #216]	; (8005118 <HAL_DMA_Init+0x1bc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d045      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a34      	ldr	r2, [pc, #208]	; (800511c <HAL_DMA_Init+0x1c0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d040      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a33      	ldr	r2, [pc, #204]	; (8005120 <HAL_DMA_Init+0x1c4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d03b      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a31      	ldr	r2, [pc, #196]	; (8005124 <HAL_DMA_Init+0x1c8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d036      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a30      	ldr	r2, [pc, #192]	; (8005128 <HAL_DMA_Init+0x1cc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d031      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a2e      	ldr	r2, [pc, #184]	; (800512c <HAL_DMA_Init+0x1d0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d02c      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2d      	ldr	r2, [pc, #180]	; (8005130 <HAL_DMA_Init+0x1d4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d027      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a2b      	ldr	r2, [pc, #172]	; (8005134 <HAL_DMA_Init+0x1d8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d022      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2a      	ldr	r2, [pc, #168]	; (8005138 <HAL_DMA_Init+0x1dc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d01d      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a28      	ldr	r2, [pc, #160]	; (800513c <HAL_DMA_Init+0x1e0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d018      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a27      	ldr	r2, [pc, #156]	; (8005140 <HAL_DMA_Init+0x1e4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d013      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <HAL_DMA_Init+0x1e8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00e      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a24      	ldr	r2, [pc, #144]	; (8005148 <HAL_DMA_Init+0x1ec>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d009      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a22      	ldr	r2, [pc, #136]	; (800514c <HAL_DMA_Init+0x1f0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_DMA_Init+0x174>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a21      	ldr	r2, [pc, #132]	; (8005150 <HAL_DMA_Init+0x1f4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d108      	bne.n	80050e2 <HAL_DMA_Init+0x186>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	e007      	b.n	80050f2 <HAL_DMA_Init+0x196>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050f2:	e02f      	b.n	8005154 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050f4:	f7ff fde6 	bl	8004cc4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d928      	bls.n	8005154 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2203      	movs	r2, #3
 800510c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e246      	b.n	80055a2 <HAL_DMA_Init+0x646>
 8005114:	40020010 	.word	0x40020010
 8005118:	40020028 	.word	0x40020028
 800511c:	40020040 	.word	0x40020040
 8005120:	40020058 	.word	0x40020058
 8005124:	40020070 	.word	0x40020070
 8005128:	40020088 	.word	0x40020088
 800512c:	400200a0 	.word	0x400200a0
 8005130:	400200b8 	.word	0x400200b8
 8005134:	40020410 	.word	0x40020410
 8005138:	40020428 	.word	0x40020428
 800513c:	40020440 	.word	0x40020440
 8005140:	40020458 	.word	0x40020458
 8005144:	40020470 	.word	0x40020470
 8005148:	40020488 	.word	0x40020488
 800514c:	400204a0 	.word	0x400204a0
 8005150:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1c8      	bne.n	80050f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4b83      	ldr	r3, [pc, #524]	; (800537c <HAL_DMA_Init+0x420>)
 800516e:	4013      	ands	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800517a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005186:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005192:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d107      	bne.n	80051b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	4313      	orrs	r3, r2
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80051b8:	4b71      	ldr	r3, [pc, #452]	; (8005380 <HAL_DMA_Init+0x424>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b71      	ldr	r3, [pc, #452]	; (8005384 <HAL_DMA_Init+0x428>)
 80051be:	4013      	ands	r3, r2
 80051c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c4:	d328      	bcc.n	8005218 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b28      	cmp	r3, #40	; 0x28
 80051cc:	d903      	bls.n	80051d6 <HAL_DMA_Init+0x27a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b2e      	cmp	r3, #46	; 0x2e
 80051d4:	d917      	bls.n	8005206 <HAL_DMA_Init+0x2aa>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b3e      	cmp	r3, #62	; 0x3e
 80051dc:	d903      	bls.n	80051e6 <HAL_DMA_Init+0x28a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b42      	cmp	r3, #66	; 0x42
 80051e4:	d90f      	bls.n	8005206 <HAL_DMA_Init+0x2aa>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b46      	cmp	r3, #70	; 0x46
 80051ec:	d903      	bls.n	80051f6 <HAL_DMA_Init+0x29a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b48      	cmp	r3, #72	; 0x48
 80051f4:	d907      	bls.n	8005206 <HAL_DMA_Init+0x2aa>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b4e      	cmp	r3, #78	; 0x4e
 80051fc:	d905      	bls.n	800520a <HAL_DMA_Init+0x2ae>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b52      	cmp	r3, #82	; 0x52
 8005204:	d801      	bhi.n	800520a <HAL_DMA_Init+0x2ae>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <HAL_DMA_Init+0x2b0>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005216:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b04      	cmp	r3, #4
 8005240:	d117      	bne.n	8005272 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f002 fb33 	bl	80078c0 <DMA_CheckFifoParam>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2240      	movs	r2, #64	; 0x40
 8005264:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e197      	b.n	80055a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f002 fa6e 	bl	800775c <DMA_CalcBaseAndBitshift>
 8005280:	4603      	mov	r3, r0
 8005282:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	223f      	movs	r2, #63	; 0x3f
 800528e:	409a      	lsls	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	e0cd      	b.n	8005432 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a3b      	ldr	r2, [pc, #236]	; (8005388 <HAL_DMA_Init+0x42c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d022      	beq.n	80052e6 <HAL_DMA_Init+0x38a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a39      	ldr	r2, [pc, #228]	; (800538c <HAL_DMA_Init+0x430>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01d      	beq.n	80052e6 <HAL_DMA_Init+0x38a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a38      	ldr	r2, [pc, #224]	; (8005390 <HAL_DMA_Init+0x434>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d018      	beq.n	80052e6 <HAL_DMA_Init+0x38a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a36      	ldr	r2, [pc, #216]	; (8005394 <HAL_DMA_Init+0x438>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_DMA_Init+0x38a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a35      	ldr	r2, [pc, #212]	; (8005398 <HAL_DMA_Init+0x43c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00e      	beq.n	80052e6 <HAL_DMA_Init+0x38a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a33      	ldr	r2, [pc, #204]	; (800539c <HAL_DMA_Init+0x440>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d009      	beq.n	80052e6 <HAL_DMA_Init+0x38a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a32      	ldr	r2, [pc, #200]	; (80053a0 <HAL_DMA_Init+0x444>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d004      	beq.n	80052e6 <HAL_DMA_Init+0x38a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a30      	ldr	r2, [pc, #192]	; (80053a4 <HAL_DMA_Init+0x448>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d101      	bne.n	80052ea <HAL_DMA_Init+0x38e>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_DMA_Init+0x390>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8097 	beq.w	8005420 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a24      	ldr	r2, [pc, #144]	; (8005388 <HAL_DMA_Init+0x42c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d021      	beq.n	8005340 <HAL_DMA_Init+0x3e4>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a22      	ldr	r2, [pc, #136]	; (800538c <HAL_DMA_Init+0x430>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01c      	beq.n	8005340 <HAL_DMA_Init+0x3e4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a21      	ldr	r2, [pc, #132]	; (8005390 <HAL_DMA_Init+0x434>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d017      	beq.n	8005340 <HAL_DMA_Init+0x3e4>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <HAL_DMA_Init+0x438>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d012      	beq.n	8005340 <HAL_DMA_Init+0x3e4>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <HAL_DMA_Init+0x43c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00d      	beq.n	8005340 <HAL_DMA_Init+0x3e4>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1c      	ldr	r2, [pc, #112]	; (800539c <HAL_DMA_Init+0x440>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d008      	beq.n	8005340 <HAL_DMA_Init+0x3e4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <HAL_DMA_Init+0x444>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <HAL_DMA_Init+0x3e4>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <HAL_DMA_Init+0x448>)
 800533e:	4293      	cmp	r3, r2
 8005340:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <HAL_DMA_Init+0x44c>)
 800535e:	4013      	ands	r3, r2
 8005360:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d020      	beq.n	80053ac <HAL_DMA_Init+0x450>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b80      	cmp	r3, #128	; 0x80
 8005370:	d102      	bne.n	8005378 <HAL_DMA_Init+0x41c>
 8005372:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005376:	e01a      	b.n	80053ae <HAL_DMA_Init+0x452>
 8005378:	2300      	movs	r3, #0
 800537a:	e018      	b.n	80053ae <HAL_DMA_Init+0x452>
 800537c:	fe10803f 	.word	0xfe10803f
 8005380:	5c001000 	.word	0x5c001000
 8005384:	ffff0000 	.word	0xffff0000
 8005388:	58025408 	.word	0x58025408
 800538c:	5802541c 	.word	0x5802541c
 8005390:	58025430 	.word	0x58025430
 8005394:	58025444 	.word	0x58025444
 8005398:	58025458 	.word	0x58025458
 800539c:	5802546c 	.word	0x5802546c
 80053a0:	58025480 	.word	0x58025480
 80053a4:	58025494 	.word	0x58025494
 80053a8:	fffe000f 	.word	0xfffe000f
 80053ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68d2      	ldr	r2, [r2, #12]
 80053b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80053bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80053c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80053cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80053d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80053dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b6e      	ldr	r3, [pc, #440]	; (80055ac <HAL_DMA_Init+0x650>)
 80053f4:	4413      	add	r3, r2
 80053f6:	4a6e      	ldr	r2, [pc, #440]	; (80055b0 <HAL_DMA_Init+0x654>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	009a      	lsls	r2, r3, #2
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f002 f9a9 	bl	800775c <DMA_CalcBaseAndBitshift>
 800540a:	4603      	mov	r3, r0
 800540c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	2201      	movs	r2, #1
 8005418:	409a      	lsls	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	e008      	b.n	8005432 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2240      	movs	r2, #64	; 0x40
 8005424:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2203      	movs	r2, #3
 800542a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e0b7      	b.n	80055a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a5f      	ldr	r2, [pc, #380]	; (80055b4 <HAL_DMA_Init+0x658>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d072      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a5d      	ldr	r2, [pc, #372]	; (80055b8 <HAL_DMA_Init+0x65c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d06d      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a5c      	ldr	r2, [pc, #368]	; (80055bc <HAL_DMA_Init+0x660>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d068      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a5a      	ldr	r2, [pc, #360]	; (80055c0 <HAL_DMA_Init+0x664>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d063      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a59      	ldr	r2, [pc, #356]	; (80055c4 <HAL_DMA_Init+0x668>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d05e      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a57      	ldr	r2, [pc, #348]	; (80055c8 <HAL_DMA_Init+0x66c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d059      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a56      	ldr	r2, [pc, #344]	; (80055cc <HAL_DMA_Init+0x670>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d054      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a54      	ldr	r2, [pc, #336]	; (80055d0 <HAL_DMA_Init+0x674>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d04f      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a53      	ldr	r2, [pc, #332]	; (80055d4 <HAL_DMA_Init+0x678>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d04a      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a51      	ldr	r2, [pc, #324]	; (80055d8 <HAL_DMA_Init+0x67c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d045      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a50      	ldr	r2, [pc, #320]	; (80055dc <HAL_DMA_Init+0x680>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d040      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a4e      	ldr	r2, [pc, #312]	; (80055e0 <HAL_DMA_Init+0x684>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d03b      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a4d      	ldr	r2, [pc, #308]	; (80055e4 <HAL_DMA_Init+0x688>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d036      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a4b      	ldr	r2, [pc, #300]	; (80055e8 <HAL_DMA_Init+0x68c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d031      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a4a      	ldr	r2, [pc, #296]	; (80055ec <HAL_DMA_Init+0x690>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d02c      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a48      	ldr	r2, [pc, #288]	; (80055f0 <HAL_DMA_Init+0x694>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d027      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a47      	ldr	r2, [pc, #284]	; (80055f4 <HAL_DMA_Init+0x698>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a45      	ldr	r2, [pc, #276]	; (80055f8 <HAL_DMA_Init+0x69c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01d      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a44      	ldr	r2, [pc, #272]	; (80055fc <HAL_DMA_Init+0x6a0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a42      	ldr	r2, [pc, #264]	; (8005600 <HAL_DMA_Init+0x6a4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a41      	ldr	r2, [pc, #260]	; (8005604 <HAL_DMA_Init+0x6a8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a3f      	ldr	r2, [pc, #252]	; (8005608 <HAL_DMA_Init+0x6ac>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a3e      	ldr	r2, [pc, #248]	; (800560c <HAL_DMA_Init+0x6b0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_DMA_Init+0x5c6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a3c      	ldr	r2, [pc, #240]	; (8005610 <HAL_DMA_Init+0x6b4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d101      	bne.n	8005526 <HAL_DMA_Init+0x5ca>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <HAL_DMA_Init+0x5cc>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d032      	beq.n	8005592 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f002 fa43 	bl	80079b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d102      	bne.n	8005540 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005554:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d010      	beq.n	8005580 <HAL_DMA_Init+0x624>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b08      	cmp	r3, #8
 8005564:	d80c      	bhi.n	8005580 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f002 fac0 	bl	8007aec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	e008      	b.n	8005592 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	a7fdabf8 	.word	0xa7fdabf8
 80055b0:	cccccccd 	.word	0xcccccccd
 80055b4:	40020010 	.word	0x40020010
 80055b8:	40020028 	.word	0x40020028
 80055bc:	40020040 	.word	0x40020040
 80055c0:	40020058 	.word	0x40020058
 80055c4:	40020070 	.word	0x40020070
 80055c8:	40020088 	.word	0x40020088
 80055cc:	400200a0 	.word	0x400200a0
 80055d0:	400200b8 	.word	0x400200b8
 80055d4:	40020410 	.word	0x40020410
 80055d8:	40020428 	.word	0x40020428
 80055dc:	40020440 	.word	0x40020440
 80055e0:	40020458 	.word	0x40020458
 80055e4:	40020470 	.word	0x40020470
 80055e8:	40020488 	.word	0x40020488
 80055ec:	400204a0 	.word	0x400204a0
 80055f0:	400204b8 	.word	0x400204b8
 80055f4:	58025408 	.word	0x58025408
 80055f8:	5802541c 	.word	0x5802541c
 80055fc:	58025430 	.word	0x58025430
 8005600:	58025444 	.word	0x58025444
 8005604:	58025458 	.word	0x58025458
 8005608:	5802546c 	.word	0x5802546c
 800560c:	58025480 	.word	0x58025480
 8005610:	58025494 	.word	0x58025494

08005614 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e226      	b.n	8005a7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_DMA_Start_IT+0x2a>
 800563a:	2302      	movs	r3, #2
 800563c:	e21f      	b.n	8005a7e <HAL_DMA_Start_IT+0x46a>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	f040 820a 	bne.w	8005a68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a68      	ldr	r2, [pc, #416]	; (8005808 <HAL_DMA_Start_IT+0x1f4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d04a      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a66      	ldr	r2, [pc, #408]	; (800580c <HAL_DMA_Start_IT+0x1f8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d045      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a65      	ldr	r2, [pc, #404]	; (8005810 <HAL_DMA_Start_IT+0x1fc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d040      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a63      	ldr	r2, [pc, #396]	; (8005814 <HAL_DMA_Start_IT+0x200>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d03b      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a62      	ldr	r2, [pc, #392]	; (8005818 <HAL_DMA_Start_IT+0x204>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d036      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a60      	ldr	r2, [pc, #384]	; (800581c <HAL_DMA_Start_IT+0x208>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d031      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a5f      	ldr	r2, [pc, #380]	; (8005820 <HAL_DMA_Start_IT+0x20c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d02c      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a5d      	ldr	r2, [pc, #372]	; (8005824 <HAL_DMA_Start_IT+0x210>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d027      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a5c      	ldr	r2, [pc, #368]	; (8005828 <HAL_DMA_Start_IT+0x214>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d022      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a5a      	ldr	r2, [pc, #360]	; (800582c <HAL_DMA_Start_IT+0x218>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01d      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a59      	ldr	r2, [pc, #356]	; (8005830 <HAL_DMA_Start_IT+0x21c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d018      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a57      	ldr	r2, [pc, #348]	; (8005834 <HAL_DMA_Start_IT+0x220>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a56      	ldr	r2, [pc, #344]	; (8005838 <HAL_DMA_Start_IT+0x224>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a54      	ldr	r2, [pc, #336]	; (800583c <HAL_DMA_Start_IT+0x228>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a53      	ldr	r2, [pc, #332]	; (8005840 <HAL_DMA_Start_IT+0x22c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_DMA_Start_IT+0xee>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a51      	ldr	r2, [pc, #324]	; (8005844 <HAL_DMA_Start_IT+0x230>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d108      	bne.n	8005714 <HAL_DMA_Start_IT+0x100>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	e007      	b.n	8005724 <HAL_DMA_Start_IT+0x110>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0201 	bic.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f001 fe6a 	bl	8007404 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a34      	ldr	r2, [pc, #208]	; (8005808 <HAL_DMA_Start_IT+0x1f4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d04a      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a33      	ldr	r2, [pc, #204]	; (800580c <HAL_DMA_Start_IT+0x1f8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d045      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a31      	ldr	r2, [pc, #196]	; (8005810 <HAL_DMA_Start_IT+0x1fc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d040      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a30      	ldr	r2, [pc, #192]	; (8005814 <HAL_DMA_Start_IT+0x200>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d03b      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a2e      	ldr	r2, [pc, #184]	; (8005818 <HAL_DMA_Start_IT+0x204>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d036      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2d      	ldr	r2, [pc, #180]	; (800581c <HAL_DMA_Start_IT+0x208>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d031      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2b      	ldr	r2, [pc, #172]	; (8005820 <HAL_DMA_Start_IT+0x20c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d02c      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2a      	ldr	r2, [pc, #168]	; (8005824 <HAL_DMA_Start_IT+0x210>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d027      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a28      	ldr	r2, [pc, #160]	; (8005828 <HAL_DMA_Start_IT+0x214>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d022      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a27      	ldr	r2, [pc, #156]	; (800582c <HAL_DMA_Start_IT+0x218>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d01d      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a25      	ldr	r2, [pc, #148]	; (8005830 <HAL_DMA_Start_IT+0x21c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d018      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a24      	ldr	r2, [pc, #144]	; (8005834 <HAL_DMA_Start_IT+0x220>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a22      	ldr	r2, [pc, #136]	; (8005838 <HAL_DMA_Start_IT+0x224>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00e      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a21      	ldr	r2, [pc, #132]	; (800583c <HAL_DMA_Start_IT+0x228>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1f      	ldr	r2, [pc, #124]	; (8005840 <HAL_DMA_Start_IT+0x22c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_DMA_Start_IT+0x1bc>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <HAL_DMA_Start_IT+0x230>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d101      	bne.n	80057d4 <HAL_DMA_Start_IT+0x1c0>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <HAL_DMA_Start_IT+0x1c2>
 80057d4:	2300      	movs	r3, #0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d036      	beq.n	8005848 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 021e 	bic.w	r2, r3, #30
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0216 	orr.w	r2, r2, #22
 80057ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d03e      	beq.n	8005874 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0208 	orr.w	r2, r2, #8
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e035      	b.n	8005874 <HAL_DMA_Start_IT+0x260>
 8005808:	40020010 	.word	0x40020010
 800580c:	40020028 	.word	0x40020028
 8005810:	40020040 	.word	0x40020040
 8005814:	40020058 	.word	0x40020058
 8005818:	40020070 	.word	0x40020070
 800581c:	40020088 	.word	0x40020088
 8005820:	400200a0 	.word	0x400200a0
 8005824:	400200b8 	.word	0x400200b8
 8005828:	40020410 	.word	0x40020410
 800582c:	40020428 	.word	0x40020428
 8005830:	40020440 	.word	0x40020440
 8005834:	40020458 	.word	0x40020458
 8005838:	40020470 	.word	0x40020470
 800583c:	40020488 	.word	0x40020488
 8005840:	400204a0 	.word	0x400204a0
 8005844:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f023 020e 	bic.w	r2, r3, #14
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 020a 	orr.w	r2, r2, #10
 800585a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0204 	orr.w	r2, r2, #4
 8005872:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a83      	ldr	r2, [pc, #524]	; (8005a88 <HAL_DMA_Start_IT+0x474>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d072      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a82      	ldr	r2, [pc, #520]	; (8005a8c <HAL_DMA_Start_IT+0x478>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d06d      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a80      	ldr	r2, [pc, #512]	; (8005a90 <HAL_DMA_Start_IT+0x47c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d068      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a7f      	ldr	r2, [pc, #508]	; (8005a94 <HAL_DMA_Start_IT+0x480>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d063      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a7d      	ldr	r2, [pc, #500]	; (8005a98 <HAL_DMA_Start_IT+0x484>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d05e      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a7c      	ldr	r2, [pc, #496]	; (8005a9c <HAL_DMA_Start_IT+0x488>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d059      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a7a      	ldr	r2, [pc, #488]	; (8005aa0 <HAL_DMA_Start_IT+0x48c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d054      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a79      	ldr	r2, [pc, #484]	; (8005aa4 <HAL_DMA_Start_IT+0x490>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d04f      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a77      	ldr	r2, [pc, #476]	; (8005aa8 <HAL_DMA_Start_IT+0x494>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d04a      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a76      	ldr	r2, [pc, #472]	; (8005aac <HAL_DMA_Start_IT+0x498>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d045      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a74      	ldr	r2, [pc, #464]	; (8005ab0 <HAL_DMA_Start_IT+0x49c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d040      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a73      	ldr	r2, [pc, #460]	; (8005ab4 <HAL_DMA_Start_IT+0x4a0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d03b      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a71      	ldr	r2, [pc, #452]	; (8005ab8 <HAL_DMA_Start_IT+0x4a4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d036      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a70      	ldr	r2, [pc, #448]	; (8005abc <HAL_DMA_Start_IT+0x4a8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d031      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a6e      	ldr	r2, [pc, #440]	; (8005ac0 <HAL_DMA_Start_IT+0x4ac>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d02c      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a6d      	ldr	r2, [pc, #436]	; (8005ac4 <HAL_DMA_Start_IT+0x4b0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d027      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a6b      	ldr	r2, [pc, #428]	; (8005ac8 <HAL_DMA_Start_IT+0x4b4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d022      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a6a      	ldr	r2, [pc, #424]	; (8005acc <HAL_DMA_Start_IT+0x4b8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d01d      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a68      	ldr	r2, [pc, #416]	; (8005ad0 <HAL_DMA_Start_IT+0x4bc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d018      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a67      	ldr	r2, [pc, #412]	; (8005ad4 <HAL_DMA_Start_IT+0x4c0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a65      	ldr	r2, [pc, #404]	; (8005ad8 <HAL_DMA_Start_IT+0x4c4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00e      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a64      	ldr	r2, [pc, #400]	; (8005adc <HAL_DMA_Start_IT+0x4c8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a62      	ldr	r2, [pc, #392]	; (8005ae0 <HAL_DMA_Start_IT+0x4cc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_DMA_Start_IT+0x350>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a61      	ldr	r2, [pc, #388]	; (8005ae4 <HAL_DMA_Start_IT+0x4d0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d101      	bne.n	8005968 <HAL_DMA_Start_IT+0x354>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <HAL_DMA_Start_IT+0x356>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01a      	beq.n	80059a4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800598a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800599e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a37      	ldr	r2, [pc, #220]	; (8005a88 <HAL_DMA_Start_IT+0x474>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d04a      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a36      	ldr	r2, [pc, #216]	; (8005a8c <HAL_DMA_Start_IT+0x478>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d045      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a34      	ldr	r2, [pc, #208]	; (8005a90 <HAL_DMA_Start_IT+0x47c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d040      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a33      	ldr	r2, [pc, #204]	; (8005a94 <HAL_DMA_Start_IT+0x480>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d03b      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a31      	ldr	r2, [pc, #196]	; (8005a98 <HAL_DMA_Start_IT+0x484>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d036      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a30      	ldr	r2, [pc, #192]	; (8005a9c <HAL_DMA_Start_IT+0x488>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d031      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2e      	ldr	r2, [pc, #184]	; (8005aa0 <HAL_DMA_Start_IT+0x48c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d02c      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2d      	ldr	r2, [pc, #180]	; (8005aa4 <HAL_DMA_Start_IT+0x490>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d027      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <HAL_DMA_Start_IT+0x494>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d022      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <HAL_DMA_Start_IT+0x498>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d01d      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <HAL_DMA_Start_IT+0x49c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d018      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <HAL_DMA_Start_IT+0x4a0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d013      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <HAL_DMA_Start_IT+0x4a4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00e      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a24      	ldr	r2, [pc, #144]	; (8005abc <HAL_DMA_Start_IT+0x4a8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <HAL_DMA_Start_IT+0x4ac>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_DMA_Start_IT+0x430>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a21      	ldr	r2, [pc, #132]	; (8005ac4 <HAL_DMA_Start_IT+0x4b0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d108      	bne.n	8005a56 <HAL_DMA_Start_IT+0x442>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	e012      	b.n	8005a7c <HAL_DMA_Start_IT+0x468>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0201 	orr.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e009      	b.n	8005a7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40020010 	.word	0x40020010
 8005a8c:	40020028 	.word	0x40020028
 8005a90:	40020040 	.word	0x40020040
 8005a94:	40020058 	.word	0x40020058
 8005a98:	40020070 	.word	0x40020070
 8005a9c:	40020088 	.word	0x40020088
 8005aa0:	400200a0 	.word	0x400200a0
 8005aa4:	400200b8 	.word	0x400200b8
 8005aa8:	40020410 	.word	0x40020410
 8005aac:	40020428 	.word	0x40020428
 8005ab0:	40020440 	.word	0x40020440
 8005ab4:	40020458 	.word	0x40020458
 8005ab8:	40020470 	.word	0x40020470
 8005abc:	40020488 	.word	0x40020488
 8005ac0:	400204a0 	.word	0x400204a0
 8005ac4:	400204b8 	.word	0x400204b8
 8005ac8:	58025408 	.word	0x58025408
 8005acc:	5802541c 	.word	0x5802541c
 8005ad0:	58025430 	.word	0x58025430
 8005ad4:	58025444 	.word	0x58025444
 8005ad8:	58025458 	.word	0x58025458
 8005adc:	5802546c 	.word	0x5802546c
 8005ae0:	58025480 	.word	0x58025480
 8005ae4:	58025494 	.word	0x58025494

08005ae8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005af0:	f7ff f8e8 	bl	8004cc4 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e2dc      	b.n	80060ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d008      	beq.n	8005b1e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2280      	movs	r2, #128	; 0x80
 8005b10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e2cd      	b.n	80060ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a76      	ldr	r2, [pc, #472]	; (8005cfc <HAL_DMA_Abort+0x214>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d04a      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a74      	ldr	r2, [pc, #464]	; (8005d00 <HAL_DMA_Abort+0x218>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d045      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a73      	ldr	r2, [pc, #460]	; (8005d04 <HAL_DMA_Abort+0x21c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d040      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a71      	ldr	r2, [pc, #452]	; (8005d08 <HAL_DMA_Abort+0x220>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d03b      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a70      	ldr	r2, [pc, #448]	; (8005d0c <HAL_DMA_Abort+0x224>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d036      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a6e      	ldr	r2, [pc, #440]	; (8005d10 <HAL_DMA_Abort+0x228>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d031      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a6d      	ldr	r2, [pc, #436]	; (8005d14 <HAL_DMA_Abort+0x22c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d02c      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a6b      	ldr	r2, [pc, #428]	; (8005d18 <HAL_DMA_Abort+0x230>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d027      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a6a      	ldr	r2, [pc, #424]	; (8005d1c <HAL_DMA_Abort+0x234>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d022      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a68      	ldr	r2, [pc, #416]	; (8005d20 <HAL_DMA_Abort+0x238>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01d      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a67      	ldr	r2, [pc, #412]	; (8005d24 <HAL_DMA_Abort+0x23c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d018      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a65      	ldr	r2, [pc, #404]	; (8005d28 <HAL_DMA_Abort+0x240>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a64      	ldr	r2, [pc, #400]	; (8005d2c <HAL_DMA_Abort+0x244>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a62      	ldr	r2, [pc, #392]	; (8005d30 <HAL_DMA_Abort+0x248>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a61      	ldr	r2, [pc, #388]	; (8005d34 <HAL_DMA_Abort+0x24c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_DMA_Abort+0xd6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a5f      	ldr	r2, [pc, #380]	; (8005d38 <HAL_DMA_Abort+0x250>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <HAL_DMA_Abort+0xda>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <HAL_DMA_Abort+0xdc>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 021e 	bic.w	r2, r2, #30
 8005bd6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695a      	ldr	r2, [r3, #20]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005be6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e00a      	b.n	8005c06 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 020e 	bic.w	r2, r2, #14
 8005bfe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3c      	ldr	r2, [pc, #240]	; (8005cfc <HAL_DMA_Abort+0x214>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d072      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a3a      	ldr	r2, [pc, #232]	; (8005d00 <HAL_DMA_Abort+0x218>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d06d      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a39      	ldr	r2, [pc, #228]	; (8005d04 <HAL_DMA_Abort+0x21c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d068      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a37      	ldr	r2, [pc, #220]	; (8005d08 <HAL_DMA_Abort+0x220>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d063      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a36      	ldr	r2, [pc, #216]	; (8005d0c <HAL_DMA_Abort+0x224>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d05e      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a34      	ldr	r2, [pc, #208]	; (8005d10 <HAL_DMA_Abort+0x228>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d059      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a33      	ldr	r2, [pc, #204]	; (8005d14 <HAL_DMA_Abort+0x22c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d054      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a31      	ldr	r2, [pc, #196]	; (8005d18 <HAL_DMA_Abort+0x230>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d04f      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a30      	ldr	r2, [pc, #192]	; (8005d1c <HAL_DMA_Abort+0x234>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d04a      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2e      	ldr	r2, [pc, #184]	; (8005d20 <HAL_DMA_Abort+0x238>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d045      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2d      	ldr	r2, [pc, #180]	; (8005d24 <HAL_DMA_Abort+0x23c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d040      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2b      	ldr	r2, [pc, #172]	; (8005d28 <HAL_DMA_Abort+0x240>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d03b      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <HAL_DMA_Abort+0x244>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d036      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <HAL_DMA_Abort+0x248>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d031      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <HAL_DMA_Abort+0x24c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d02c      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a25      	ldr	r2, [pc, #148]	; (8005d38 <HAL_DMA_Abort+0x250>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d027      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a24      	ldr	r2, [pc, #144]	; (8005d3c <HAL_DMA_Abort+0x254>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d022      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a22      	ldr	r2, [pc, #136]	; (8005d40 <HAL_DMA_Abort+0x258>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01d      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <HAL_DMA_Abort+0x25c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d018      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <HAL_DMA_Abort+0x260>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1e      	ldr	r2, [pc, #120]	; (8005d4c <HAL_DMA_Abort+0x264>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00e      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <HAL_DMA_Abort+0x268>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d009      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1b      	ldr	r2, [pc, #108]	; (8005d54 <HAL_DMA_Abort+0x26c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_DMA_Abort+0x20e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <HAL_DMA_Abort+0x270>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d132      	bne.n	8005d5c <HAL_DMA_Abort+0x274>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e031      	b.n	8005d5e <HAL_DMA_Abort+0x276>
 8005cfa:	bf00      	nop
 8005cfc:	40020010 	.word	0x40020010
 8005d00:	40020028 	.word	0x40020028
 8005d04:	40020040 	.word	0x40020040
 8005d08:	40020058 	.word	0x40020058
 8005d0c:	40020070 	.word	0x40020070
 8005d10:	40020088 	.word	0x40020088
 8005d14:	400200a0 	.word	0x400200a0
 8005d18:	400200b8 	.word	0x400200b8
 8005d1c:	40020410 	.word	0x40020410
 8005d20:	40020428 	.word	0x40020428
 8005d24:	40020440 	.word	0x40020440
 8005d28:	40020458 	.word	0x40020458
 8005d2c:	40020470 	.word	0x40020470
 8005d30:	40020488 	.word	0x40020488
 8005d34:	400204a0 	.word	0x400204a0
 8005d38:	400204b8 	.word	0x400204b8
 8005d3c:	58025408 	.word	0x58025408
 8005d40:	5802541c 	.word	0x5802541c
 8005d44:	58025430 	.word	0x58025430
 8005d48:	58025444 	.word	0x58025444
 8005d4c:	58025458 	.word	0x58025458
 8005d50:	5802546c 	.word	0x5802546c
 8005d54:	58025480 	.word	0x58025480
 8005d58:	58025494 	.word	0x58025494
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d70:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a6d      	ldr	r2, [pc, #436]	; (8005f2c <HAL_DMA_Abort+0x444>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d04a      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a6b      	ldr	r2, [pc, #428]	; (8005f30 <HAL_DMA_Abort+0x448>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d045      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a6a      	ldr	r2, [pc, #424]	; (8005f34 <HAL_DMA_Abort+0x44c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d040      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a68      	ldr	r2, [pc, #416]	; (8005f38 <HAL_DMA_Abort+0x450>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d03b      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a67      	ldr	r2, [pc, #412]	; (8005f3c <HAL_DMA_Abort+0x454>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d036      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a65      	ldr	r2, [pc, #404]	; (8005f40 <HAL_DMA_Abort+0x458>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d031      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a64      	ldr	r2, [pc, #400]	; (8005f44 <HAL_DMA_Abort+0x45c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d02c      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a62      	ldr	r2, [pc, #392]	; (8005f48 <HAL_DMA_Abort+0x460>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d027      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a61      	ldr	r2, [pc, #388]	; (8005f4c <HAL_DMA_Abort+0x464>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d022      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a5f      	ldr	r2, [pc, #380]	; (8005f50 <HAL_DMA_Abort+0x468>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01d      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a5e      	ldr	r2, [pc, #376]	; (8005f54 <HAL_DMA_Abort+0x46c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d018      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a5c      	ldr	r2, [pc, #368]	; (8005f58 <HAL_DMA_Abort+0x470>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5b      	ldr	r2, [pc, #364]	; (8005f5c <HAL_DMA_Abort+0x474>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a59      	ldr	r2, [pc, #356]	; (8005f60 <HAL_DMA_Abort+0x478>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a58      	ldr	r2, [pc, #352]	; (8005f64 <HAL_DMA_Abort+0x47c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_DMA_Abort+0x32a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a56      	ldr	r2, [pc, #344]	; (8005f68 <HAL_DMA_Abort+0x480>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d108      	bne.n	8005e24 <HAL_DMA_Abort+0x33c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e007      	b.n	8005e34 <HAL_DMA_Abort+0x34c>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e34:	e013      	b.n	8005e5e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e36:	f7fe ff45 	bl	8004cc4 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b05      	cmp	r3, #5
 8005e42:	d90c      	bls.n	8005e5e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e12d      	b.n	80060ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e5      	bne.n	8005e36 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2f      	ldr	r2, [pc, #188]	; (8005f2c <HAL_DMA_Abort+0x444>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d04a      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a2d      	ldr	r2, [pc, #180]	; (8005f30 <HAL_DMA_Abort+0x448>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d045      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a2c      	ldr	r2, [pc, #176]	; (8005f34 <HAL_DMA_Abort+0x44c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d040      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a2a      	ldr	r2, [pc, #168]	; (8005f38 <HAL_DMA_Abort+0x450>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d03b      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a29      	ldr	r2, [pc, #164]	; (8005f3c <HAL_DMA_Abort+0x454>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d036      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a27      	ldr	r2, [pc, #156]	; (8005f40 <HAL_DMA_Abort+0x458>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d031      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a26      	ldr	r2, [pc, #152]	; (8005f44 <HAL_DMA_Abort+0x45c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d02c      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a24      	ldr	r2, [pc, #144]	; (8005f48 <HAL_DMA_Abort+0x460>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d027      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a23      	ldr	r2, [pc, #140]	; (8005f4c <HAL_DMA_Abort+0x464>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d022      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a21      	ldr	r2, [pc, #132]	; (8005f50 <HAL_DMA_Abort+0x468>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01d      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a20      	ldr	r2, [pc, #128]	; (8005f54 <HAL_DMA_Abort+0x46c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1e      	ldr	r2, [pc, #120]	; (8005f58 <HAL_DMA_Abort+0x470>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1d      	ldr	r2, [pc, #116]	; (8005f5c <HAL_DMA_Abort+0x474>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <HAL_DMA_Abort+0x478>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1a      	ldr	r2, [pc, #104]	; (8005f64 <HAL_DMA_Abort+0x47c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_DMA_Abort+0x422>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <HAL_DMA_Abort+0x480>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d101      	bne.n	8005f0e <HAL_DMA_Abort+0x426>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <HAL_DMA_Abort+0x428>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02b      	beq.n	8005f6c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	223f      	movs	r2, #63	; 0x3f
 8005f24:	409a      	lsls	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	609a      	str	r2, [r3, #8]
 8005f2a:	e02a      	b.n	8005f82 <HAL_DMA_Abort+0x49a>
 8005f2c:	40020010 	.word	0x40020010
 8005f30:	40020028 	.word	0x40020028
 8005f34:	40020040 	.word	0x40020040
 8005f38:	40020058 	.word	0x40020058
 8005f3c:	40020070 	.word	0x40020070
 8005f40:	40020088 	.word	0x40020088
 8005f44:	400200a0 	.word	0x400200a0
 8005f48:	400200b8 	.word	0x400200b8
 8005f4c:	40020410 	.word	0x40020410
 8005f50:	40020428 	.word	0x40020428
 8005f54:	40020440 	.word	0x40020440
 8005f58:	40020458 	.word	0x40020458
 8005f5c:	40020470 	.word	0x40020470
 8005f60:	40020488 	.word	0x40020488
 8005f64:	400204a0 	.word	0x400204a0
 8005f68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a4f      	ldr	r2, [pc, #316]	; (80060c4 <HAL_DMA_Abort+0x5dc>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d072      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a4d      	ldr	r2, [pc, #308]	; (80060c8 <HAL_DMA_Abort+0x5e0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d06d      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4c      	ldr	r2, [pc, #304]	; (80060cc <HAL_DMA_Abort+0x5e4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d068      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a4a      	ldr	r2, [pc, #296]	; (80060d0 <HAL_DMA_Abort+0x5e8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d063      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a49      	ldr	r2, [pc, #292]	; (80060d4 <HAL_DMA_Abort+0x5ec>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d05e      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a47      	ldr	r2, [pc, #284]	; (80060d8 <HAL_DMA_Abort+0x5f0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d059      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a46      	ldr	r2, [pc, #280]	; (80060dc <HAL_DMA_Abort+0x5f4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d054      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a44      	ldr	r2, [pc, #272]	; (80060e0 <HAL_DMA_Abort+0x5f8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d04f      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a43      	ldr	r2, [pc, #268]	; (80060e4 <HAL_DMA_Abort+0x5fc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d04a      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a41      	ldr	r2, [pc, #260]	; (80060e8 <HAL_DMA_Abort+0x600>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d045      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a40      	ldr	r2, [pc, #256]	; (80060ec <HAL_DMA_Abort+0x604>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d040      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a3e      	ldr	r2, [pc, #248]	; (80060f0 <HAL_DMA_Abort+0x608>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d03b      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a3d      	ldr	r2, [pc, #244]	; (80060f4 <HAL_DMA_Abort+0x60c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d036      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a3b      	ldr	r2, [pc, #236]	; (80060f8 <HAL_DMA_Abort+0x610>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d031      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a3a      	ldr	r2, [pc, #232]	; (80060fc <HAL_DMA_Abort+0x614>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d02c      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a38      	ldr	r2, [pc, #224]	; (8006100 <HAL_DMA_Abort+0x618>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d027      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a37      	ldr	r2, [pc, #220]	; (8006104 <HAL_DMA_Abort+0x61c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d022      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a35      	ldr	r2, [pc, #212]	; (8006108 <HAL_DMA_Abort+0x620>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01d      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a34      	ldr	r2, [pc, #208]	; (800610c <HAL_DMA_Abort+0x624>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d018      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a32      	ldr	r2, [pc, #200]	; (8006110 <HAL_DMA_Abort+0x628>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a31      	ldr	r2, [pc, #196]	; (8006114 <HAL_DMA_Abort+0x62c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00e      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a2f      	ldr	r2, [pc, #188]	; (8006118 <HAL_DMA_Abort+0x630>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d009      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a2e      	ldr	r2, [pc, #184]	; (800611c <HAL_DMA_Abort+0x634>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d004      	beq.n	8006072 <HAL_DMA_Abort+0x58a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <HAL_DMA_Abort+0x638>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d101      	bne.n	8006076 <HAL_DMA_Abort+0x58e>
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <HAL_DMA_Abort+0x590>
 8006076:	2300      	movs	r3, #0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d015      	beq.n	80060a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006084:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00c      	beq.n	80060a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800609c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40020010 	.word	0x40020010
 80060c8:	40020028 	.word	0x40020028
 80060cc:	40020040 	.word	0x40020040
 80060d0:	40020058 	.word	0x40020058
 80060d4:	40020070 	.word	0x40020070
 80060d8:	40020088 	.word	0x40020088
 80060dc:	400200a0 	.word	0x400200a0
 80060e0:	400200b8 	.word	0x400200b8
 80060e4:	40020410 	.word	0x40020410
 80060e8:	40020428 	.word	0x40020428
 80060ec:	40020440 	.word	0x40020440
 80060f0:	40020458 	.word	0x40020458
 80060f4:	40020470 	.word	0x40020470
 80060f8:	40020488 	.word	0x40020488
 80060fc:	400204a0 	.word	0x400204a0
 8006100:	400204b8 	.word	0x400204b8
 8006104:	58025408 	.word	0x58025408
 8006108:	5802541c 	.word	0x5802541c
 800610c:	58025430 	.word	0x58025430
 8006110:	58025444 	.word	0x58025444
 8006114:	58025458 	.word	0x58025458
 8006118:	5802546c 	.word	0x5802546c
 800611c:	58025480 	.word	0x58025480
 8006120:	58025494 	.word	0x58025494

08006124 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e237      	b.n	80065a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d004      	beq.n	800614c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2280      	movs	r2, #128	; 0x80
 8006146:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e22c      	b.n	80065a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a5c      	ldr	r2, [pc, #368]	; (80062c4 <HAL_DMA_Abort_IT+0x1a0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d04a      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a5b      	ldr	r2, [pc, #364]	; (80062c8 <HAL_DMA_Abort_IT+0x1a4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d045      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a59      	ldr	r2, [pc, #356]	; (80062cc <HAL_DMA_Abort_IT+0x1a8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d040      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a58      	ldr	r2, [pc, #352]	; (80062d0 <HAL_DMA_Abort_IT+0x1ac>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d03b      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a56      	ldr	r2, [pc, #344]	; (80062d4 <HAL_DMA_Abort_IT+0x1b0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d036      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a55      	ldr	r2, [pc, #340]	; (80062d8 <HAL_DMA_Abort_IT+0x1b4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d031      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a53      	ldr	r2, [pc, #332]	; (80062dc <HAL_DMA_Abort_IT+0x1b8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d02c      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a52      	ldr	r2, [pc, #328]	; (80062e0 <HAL_DMA_Abort_IT+0x1bc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d027      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a50      	ldr	r2, [pc, #320]	; (80062e4 <HAL_DMA_Abort_IT+0x1c0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d022      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a4f      	ldr	r2, [pc, #316]	; (80062e8 <HAL_DMA_Abort_IT+0x1c4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d01d      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a4d      	ldr	r2, [pc, #308]	; (80062ec <HAL_DMA_Abort_IT+0x1c8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d018      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a4c      	ldr	r2, [pc, #304]	; (80062f0 <HAL_DMA_Abort_IT+0x1cc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d013      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a4a      	ldr	r2, [pc, #296]	; (80062f4 <HAL_DMA_Abort_IT+0x1d0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00e      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a49      	ldr	r2, [pc, #292]	; (80062f8 <HAL_DMA_Abort_IT+0x1d4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d009      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a47      	ldr	r2, [pc, #284]	; (80062fc <HAL_DMA_Abort_IT+0x1d8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <HAL_DMA_Abort_IT+0xc8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a46      	ldr	r2, [pc, #280]	; (8006300 <HAL_DMA_Abort_IT+0x1dc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d101      	bne.n	80061f0 <HAL_DMA_Abort_IT+0xcc>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <HAL_DMA_Abort_IT+0xce>
 80061f0:	2300      	movs	r3, #0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8086 	beq.w	8006304 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2204      	movs	r2, #4
 80061fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a2f      	ldr	r2, [pc, #188]	; (80062c4 <HAL_DMA_Abort_IT+0x1a0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d04a      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2e      	ldr	r2, [pc, #184]	; (80062c8 <HAL_DMA_Abort_IT+0x1a4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d045      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2c      	ldr	r2, [pc, #176]	; (80062cc <HAL_DMA_Abort_IT+0x1a8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d040      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <HAL_DMA_Abort_IT+0x1ac>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d03b      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a29      	ldr	r2, [pc, #164]	; (80062d4 <HAL_DMA_Abort_IT+0x1b0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d036      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a28      	ldr	r2, [pc, #160]	; (80062d8 <HAL_DMA_Abort_IT+0x1b4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d031      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a26      	ldr	r2, [pc, #152]	; (80062dc <HAL_DMA_Abort_IT+0x1b8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d02c      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a25      	ldr	r2, [pc, #148]	; (80062e0 <HAL_DMA_Abort_IT+0x1bc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d027      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <HAL_DMA_Abort_IT+0x1c0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d022      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <HAL_DMA_Abort_IT+0x1c4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d01d      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a20      	ldr	r2, [pc, #128]	; (80062ec <HAL_DMA_Abort_IT+0x1c8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d018      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <HAL_DMA_Abort_IT+0x1cc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <HAL_DMA_Abort_IT+0x1d0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00e      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1c      	ldr	r2, [pc, #112]	; (80062f8 <HAL_DMA_Abort_IT+0x1d4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1a      	ldr	r2, [pc, #104]	; (80062fc <HAL_DMA_Abort_IT+0x1d8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x17c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a19      	ldr	r2, [pc, #100]	; (8006300 <HAL_DMA_Abort_IT+0x1dc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d108      	bne.n	80062b2 <HAL_DMA_Abort_IT+0x18e>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0201 	bic.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	e178      	b.n	80065a4 <HAL_DMA_Abort_IT+0x480>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e16f      	b.n	80065a4 <HAL_DMA_Abort_IT+0x480>
 80062c4:	40020010 	.word	0x40020010
 80062c8:	40020028 	.word	0x40020028
 80062cc:	40020040 	.word	0x40020040
 80062d0:	40020058 	.word	0x40020058
 80062d4:	40020070 	.word	0x40020070
 80062d8:	40020088 	.word	0x40020088
 80062dc:	400200a0 	.word	0x400200a0
 80062e0:	400200b8 	.word	0x400200b8
 80062e4:	40020410 	.word	0x40020410
 80062e8:	40020428 	.word	0x40020428
 80062ec:	40020440 	.word	0x40020440
 80062f0:	40020458 	.word	0x40020458
 80062f4:	40020470 	.word	0x40020470
 80062f8:	40020488 	.word	0x40020488
 80062fc:	400204a0 	.word	0x400204a0
 8006300:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 020e 	bic.w	r2, r2, #14
 8006312:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a6c      	ldr	r2, [pc, #432]	; (80064cc <HAL_DMA_Abort_IT+0x3a8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d04a      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a6b      	ldr	r2, [pc, #428]	; (80064d0 <HAL_DMA_Abort_IT+0x3ac>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d045      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a69      	ldr	r2, [pc, #420]	; (80064d4 <HAL_DMA_Abort_IT+0x3b0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d040      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a68      	ldr	r2, [pc, #416]	; (80064d8 <HAL_DMA_Abort_IT+0x3b4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d03b      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a66      	ldr	r2, [pc, #408]	; (80064dc <HAL_DMA_Abort_IT+0x3b8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d036      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a65      	ldr	r2, [pc, #404]	; (80064e0 <HAL_DMA_Abort_IT+0x3bc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d031      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a63      	ldr	r2, [pc, #396]	; (80064e4 <HAL_DMA_Abort_IT+0x3c0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d02c      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a62      	ldr	r2, [pc, #392]	; (80064e8 <HAL_DMA_Abort_IT+0x3c4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d027      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a60      	ldr	r2, [pc, #384]	; (80064ec <HAL_DMA_Abort_IT+0x3c8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d022      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a5f      	ldr	r2, [pc, #380]	; (80064f0 <HAL_DMA_Abort_IT+0x3cc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d01d      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a5d      	ldr	r2, [pc, #372]	; (80064f4 <HAL_DMA_Abort_IT+0x3d0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d018      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a5c      	ldr	r2, [pc, #368]	; (80064f8 <HAL_DMA_Abort_IT+0x3d4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a5a      	ldr	r2, [pc, #360]	; (80064fc <HAL_DMA_Abort_IT+0x3d8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00e      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a59      	ldr	r2, [pc, #356]	; (8006500 <HAL_DMA_Abort_IT+0x3dc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a57      	ldr	r2, [pc, #348]	; (8006504 <HAL_DMA_Abort_IT+0x3e0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x290>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a56      	ldr	r2, [pc, #344]	; (8006508 <HAL_DMA_Abort_IT+0x3e4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d108      	bne.n	80063c6 <HAL_DMA_Abort_IT+0x2a2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e007      	b.n	80063d6 <HAL_DMA_Abort_IT+0x2b2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a3c      	ldr	r2, [pc, #240]	; (80064cc <HAL_DMA_Abort_IT+0x3a8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d072      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a3a      	ldr	r2, [pc, #232]	; (80064d0 <HAL_DMA_Abort_IT+0x3ac>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d06d      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a39      	ldr	r2, [pc, #228]	; (80064d4 <HAL_DMA_Abort_IT+0x3b0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d068      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a37      	ldr	r2, [pc, #220]	; (80064d8 <HAL_DMA_Abort_IT+0x3b4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d063      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a36      	ldr	r2, [pc, #216]	; (80064dc <HAL_DMA_Abort_IT+0x3b8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d05e      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a34      	ldr	r2, [pc, #208]	; (80064e0 <HAL_DMA_Abort_IT+0x3bc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d059      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a33      	ldr	r2, [pc, #204]	; (80064e4 <HAL_DMA_Abort_IT+0x3c0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d054      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a31      	ldr	r2, [pc, #196]	; (80064e8 <HAL_DMA_Abort_IT+0x3c4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d04f      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a30      	ldr	r2, [pc, #192]	; (80064ec <HAL_DMA_Abort_IT+0x3c8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d04a      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2e      	ldr	r2, [pc, #184]	; (80064f0 <HAL_DMA_Abort_IT+0x3cc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d045      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a2d      	ldr	r2, [pc, #180]	; (80064f4 <HAL_DMA_Abort_IT+0x3d0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d040      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2b      	ldr	r2, [pc, #172]	; (80064f8 <HAL_DMA_Abort_IT+0x3d4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d03b      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a2a      	ldr	r2, [pc, #168]	; (80064fc <HAL_DMA_Abort_IT+0x3d8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d036      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a28      	ldr	r2, [pc, #160]	; (8006500 <HAL_DMA_Abort_IT+0x3dc>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d031      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a27      	ldr	r2, [pc, #156]	; (8006504 <HAL_DMA_Abort_IT+0x3e0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d02c      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a25      	ldr	r2, [pc, #148]	; (8006508 <HAL_DMA_Abort_IT+0x3e4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d027      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a24      	ldr	r2, [pc, #144]	; (800650c <HAL_DMA_Abort_IT+0x3e8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a22      	ldr	r2, [pc, #136]	; (8006510 <HAL_DMA_Abort_IT+0x3ec>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01d      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a21      	ldr	r2, [pc, #132]	; (8006514 <HAL_DMA_Abort_IT+0x3f0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1f      	ldr	r2, [pc, #124]	; (8006518 <HAL_DMA_Abort_IT+0x3f4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1e      	ldr	r2, [pc, #120]	; (800651c <HAL_DMA_Abort_IT+0x3f8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <HAL_DMA_Abort_IT+0x3fc>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <HAL_DMA_Abort_IT+0x400>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_DMA_Abort_IT+0x3a2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a19      	ldr	r2, [pc, #100]	; (8006528 <HAL_DMA_Abort_IT+0x404>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d132      	bne.n	800652c <HAL_DMA_Abort_IT+0x408>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e031      	b.n	800652e <HAL_DMA_Abort_IT+0x40a>
 80064ca:	bf00      	nop
 80064cc:	40020010 	.word	0x40020010
 80064d0:	40020028 	.word	0x40020028
 80064d4:	40020040 	.word	0x40020040
 80064d8:	40020058 	.word	0x40020058
 80064dc:	40020070 	.word	0x40020070
 80064e0:	40020088 	.word	0x40020088
 80064e4:	400200a0 	.word	0x400200a0
 80064e8:	400200b8 	.word	0x400200b8
 80064ec:	40020410 	.word	0x40020410
 80064f0:	40020428 	.word	0x40020428
 80064f4:	40020440 	.word	0x40020440
 80064f8:	40020458 	.word	0x40020458
 80064fc:	40020470 	.word	0x40020470
 8006500:	40020488 	.word	0x40020488
 8006504:	400204a0 	.word	0x400204a0
 8006508:	400204b8 	.word	0x400204b8
 800650c:	58025408 	.word	0x58025408
 8006510:	5802541c 	.word	0x5802541c
 8006514:	58025430 	.word	0x58025430
 8006518:	58025444 	.word	0x58025444
 800651c:	58025458 	.word	0x58025458
 8006520:	5802546c 	.word	0x5802546c
 8006524:	58025480 	.word	0x58025480
 8006528:	58025494 	.word	0x58025494
 800652c:	2300      	movs	r3, #0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d028      	beq.n	8006584 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006540:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006546:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2201      	movs	r2, #1
 8006552:	409a      	lsls	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006560:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00c      	beq.n	8006584 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006578:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006582:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop

080065b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065bc:	4b67      	ldr	r3, [pc, #412]	; (800675c <HAL_DMA_IRQHandler+0x1ac>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a67      	ldr	r2, [pc, #412]	; (8006760 <HAL_DMA_IRQHandler+0x1b0>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	0a9b      	lsrs	r3, r3, #10
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a5f      	ldr	r2, [pc, #380]	; (8006764 <HAL_DMA_IRQHandler+0x1b4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d04a      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a5d      	ldr	r2, [pc, #372]	; (8006768 <HAL_DMA_IRQHandler+0x1b8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d045      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a5c      	ldr	r2, [pc, #368]	; (800676c <HAL_DMA_IRQHandler+0x1bc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d040      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a5a      	ldr	r2, [pc, #360]	; (8006770 <HAL_DMA_IRQHandler+0x1c0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d03b      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a59      	ldr	r2, [pc, #356]	; (8006774 <HAL_DMA_IRQHandler+0x1c4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d036      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a57      	ldr	r2, [pc, #348]	; (8006778 <HAL_DMA_IRQHandler+0x1c8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d031      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a56      	ldr	r2, [pc, #344]	; (800677c <HAL_DMA_IRQHandler+0x1cc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d02c      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a54      	ldr	r2, [pc, #336]	; (8006780 <HAL_DMA_IRQHandler+0x1d0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d027      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a53      	ldr	r2, [pc, #332]	; (8006784 <HAL_DMA_IRQHandler+0x1d4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d022      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a51      	ldr	r2, [pc, #324]	; (8006788 <HAL_DMA_IRQHandler+0x1d8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01d      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a50      	ldr	r2, [pc, #320]	; (800678c <HAL_DMA_IRQHandler+0x1dc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d018      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a4e      	ldr	r2, [pc, #312]	; (8006790 <HAL_DMA_IRQHandler+0x1e0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a4d      	ldr	r2, [pc, #308]	; (8006794 <HAL_DMA_IRQHandler+0x1e4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00e      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a4b      	ldr	r2, [pc, #300]	; (8006798 <HAL_DMA_IRQHandler+0x1e8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d009      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a4a      	ldr	r2, [pc, #296]	; (800679c <HAL_DMA_IRQHandler+0x1ec>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d004      	beq.n	8006682 <HAL_DMA_IRQHandler+0xd2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a48      	ldr	r2, [pc, #288]	; (80067a0 <HAL_DMA_IRQHandler+0x1f0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d101      	bne.n	8006686 <HAL_DMA_IRQHandler+0xd6>
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <HAL_DMA_IRQHandler+0xd8>
 8006686:	2300      	movs	r3, #0
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 842b 	beq.w	8006ee4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006692:	f003 031f 	and.w	r3, r3, #31
 8006696:	2208      	movs	r2, #8
 8006698:	409a      	lsls	r2, r3
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	4013      	ands	r3, r2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80a2 	beq.w	80067e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2e      	ldr	r2, [pc, #184]	; (8006764 <HAL_DMA_IRQHandler+0x1b4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d04a      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2d      	ldr	r2, [pc, #180]	; (8006768 <HAL_DMA_IRQHandler+0x1b8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d045      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a2b      	ldr	r2, [pc, #172]	; (800676c <HAL_DMA_IRQHandler+0x1bc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d040      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a2a      	ldr	r2, [pc, #168]	; (8006770 <HAL_DMA_IRQHandler+0x1c0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d03b      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a28      	ldr	r2, [pc, #160]	; (8006774 <HAL_DMA_IRQHandler+0x1c4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d036      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a27      	ldr	r2, [pc, #156]	; (8006778 <HAL_DMA_IRQHandler+0x1c8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d031      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a25      	ldr	r2, [pc, #148]	; (800677c <HAL_DMA_IRQHandler+0x1cc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d02c      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a24      	ldr	r2, [pc, #144]	; (8006780 <HAL_DMA_IRQHandler+0x1d0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d027      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a22      	ldr	r2, [pc, #136]	; (8006784 <HAL_DMA_IRQHandler+0x1d4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d022      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a21      	ldr	r2, [pc, #132]	; (8006788 <HAL_DMA_IRQHandler+0x1d8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d01d      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1f      	ldr	r2, [pc, #124]	; (800678c <HAL_DMA_IRQHandler+0x1dc>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d018      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <HAL_DMA_IRQHandler+0x1e0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d013      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1c      	ldr	r2, [pc, #112]	; (8006794 <HAL_DMA_IRQHandler+0x1e4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00e      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1b      	ldr	r2, [pc, #108]	; (8006798 <HAL_DMA_IRQHandler+0x1e8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d009      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a19      	ldr	r2, [pc, #100]	; (800679c <HAL_DMA_IRQHandler+0x1ec>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d004      	beq.n	8006744 <HAL_DMA_IRQHandler+0x194>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a18      	ldr	r2, [pc, #96]	; (80067a0 <HAL_DMA_IRQHandler+0x1f0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d12f      	bne.n	80067a4 <HAL_DMA_IRQHandler+0x1f4>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	bf14      	ite	ne
 8006752:	2301      	movne	r3, #1
 8006754:	2300      	moveq	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	e02e      	b.n	80067b8 <HAL_DMA_IRQHandler+0x208>
 800675a:	bf00      	nop
 800675c:	2400002c 	.word	0x2400002c
 8006760:	1b4e81b5 	.word	0x1b4e81b5
 8006764:	40020010 	.word	0x40020010
 8006768:	40020028 	.word	0x40020028
 800676c:	40020040 	.word	0x40020040
 8006770:	40020058 	.word	0x40020058
 8006774:	40020070 	.word	0x40020070
 8006778:	40020088 	.word	0x40020088
 800677c:	400200a0 	.word	0x400200a0
 8006780:	400200b8 	.word	0x400200b8
 8006784:	40020410 	.word	0x40020410
 8006788:	40020428 	.word	0x40020428
 800678c:	40020440 	.word	0x40020440
 8006790:	40020458 	.word	0x40020458
 8006794:	40020470 	.word	0x40020470
 8006798:	40020488 	.word	0x40020488
 800679c:	400204a0 	.word	0x400204a0
 80067a0:	400204b8 	.word	0x400204b8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bf14      	ite	ne
 80067b2:	2301      	movne	r3, #1
 80067b4:	2300      	moveq	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d015      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0204 	bic.w	r2, r2, #4
 80067ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2208      	movs	r2, #8
 80067d6:	409a      	lsls	r2, r3
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	f043 0201 	orr.w	r2, r3, #1
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ec:	f003 031f 	and.w	r3, r3, #31
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d06e      	beq.n	80068dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a69      	ldr	r2, [pc, #420]	; (80069a8 <HAL_DMA_IRQHandler+0x3f8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d04a      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a67      	ldr	r2, [pc, #412]	; (80069ac <HAL_DMA_IRQHandler+0x3fc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d045      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a66      	ldr	r2, [pc, #408]	; (80069b0 <HAL_DMA_IRQHandler+0x400>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d040      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a64      	ldr	r2, [pc, #400]	; (80069b4 <HAL_DMA_IRQHandler+0x404>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d03b      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a63      	ldr	r2, [pc, #396]	; (80069b8 <HAL_DMA_IRQHandler+0x408>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d036      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a61      	ldr	r2, [pc, #388]	; (80069bc <HAL_DMA_IRQHandler+0x40c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d031      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a60      	ldr	r2, [pc, #384]	; (80069c0 <HAL_DMA_IRQHandler+0x410>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d02c      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a5e      	ldr	r2, [pc, #376]	; (80069c4 <HAL_DMA_IRQHandler+0x414>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d027      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a5d      	ldr	r2, [pc, #372]	; (80069c8 <HAL_DMA_IRQHandler+0x418>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d022      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a5b      	ldr	r2, [pc, #364]	; (80069cc <HAL_DMA_IRQHandler+0x41c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d01d      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a5a      	ldr	r2, [pc, #360]	; (80069d0 <HAL_DMA_IRQHandler+0x420>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d018      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a58      	ldr	r2, [pc, #352]	; (80069d4 <HAL_DMA_IRQHandler+0x424>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a57      	ldr	r2, [pc, #348]	; (80069d8 <HAL_DMA_IRQHandler+0x428>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00e      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a55      	ldr	r2, [pc, #340]	; (80069dc <HAL_DMA_IRQHandler+0x42c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d009      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a54      	ldr	r2, [pc, #336]	; (80069e0 <HAL_DMA_IRQHandler+0x430>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d004      	beq.n	800689e <HAL_DMA_IRQHandler+0x2ee>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a52      	ldr	r2, [pc, #328]	; (80069e4 <HAL_DMA_IRQHandler+0x434>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d10a      	bne.n	80068b4 <HAL_DMA_IRQHandler+0x304>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	e003      	b.n	80068bc <HAL_DMA_IRQHandler+0x30c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2300      	movs	r3, #0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00d      	beq.n	80068dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	2201      	movs	r2, #1
 80068ca:	409a      	lsls	r2, r3
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d4:	f043 0202 	orr.w	r2, r3, #2
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	2204      	movs	r2, #4
 80068e6:	409a      	lsls	r2, r3
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 808f 	beq.w	8006a10 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a2c      	ldr	r2, [pc, #176]	; (80069a8 <HAL_DMA_IRQHandler+0x3f8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d04a      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a2a      	ldr	r2, [pc, #168]	; (80069ac <HAL_DMA_IRQHandler+0x3fc>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d045      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a29      	ldr	r2, [pc, #164]	; (80069b0 <HAL_DMA_IRQHandler+0x400>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d040      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a27      	ldr	r2, [pc, #156]	; (80069b4 <HAL_DMA_IRQHandler+0x404>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d03b      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a26      	ldr	r2, [pc, #152]	; (80069b8 <HAL_DMA_IRQHandler+0x408>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d036      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a24      	ldr	r2, [pc, #144]	; (80069bc <HAL_DMA_IRQHandler+0x40c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d031      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a23      	ldr	r2, [pc, #140]	; (80069c0 <HAL_DMA_IRQHandler+0x410>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d02c      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <HAL_DMA_IRQHandler+0x414>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d027      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a20      	ldr	r2, [pc, #128]	; (80069c8 <HAL_DMA_IRQHandler+0x418>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d022      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1e      	ldr	r2, [pc, #120]	; (80069cc <HAL_DMA_IRQHandler+0x41c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01d      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1d      	ldr	r2, [pc, #116]	; (80069d0 <HAL_DMA_IRQHandler+0x420>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d018      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <HAL_DMA_IRQHandler+0x424>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d013      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1a      	ldr	r2, [pc, #104]	; (80069d8 <HAL_DMA_IRQHandler+0x428>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00e      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a18      	ldr	r2, [pc, #96]	; (80069dc <HAL_DMA_IRQHandler+0x42c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d009      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a17      	ldr	r2, [pc, #92]	; (80069e0 <HAL_DMA_IRQHandler+0x430>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d004      	beq.n	8006992 <HAL_DMA_IRQHandler+0x3e2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <HAL_DMA_IRQHandler+0x434>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d12a      	bne.n	80069e8 <HAL_DMA_IRQHandler+0x438>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	e023      	b.n	80069f0 <HAL_DMA_IRQHandler+0x440>
 80069a8:	40020010 	.word	0x40020010
 80069ac:	40020028 	.word	0x40020028
 80069b0:	40020040 	.word	0x40020040
 80069b4:	40020058 	.word	0x40020058
 80069b8:	40020070 	.word	0x40020070
 80069bc:	40020088 	.word	0x40020088
 80069c0:	400200a0 	.word	0x400200a0
 80069c4:	400200b8 	.word	0x400200b8
 80069c8:	40020410 	.word	0x40020410
 80069cc:	40020428 	.word	0x40020428
 80069d0:	40020440 	.word	0x40020440
 80069d4:	40020458 	.word	0x40020458
 80069d8:	40020470 	.word	0x40020470
 80069dc:	40020488 	.word	0x40020488
 80069e0:	400204a0 	.word	0x400204a0
 80069e4:	400204b8 	.word	0x400204b8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2300      	movs	r3, #0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2204      	movs	r2, #4
 80069fe:	409a      	lsls	r2, r3
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	f043 0204 	orr.w	r2, r3, #4
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	2210      	movs	r2, #16
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 80a6 	beq.w	8006b72 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a85      	ldr	r2, [pc, #532]	; (8006c40 <HAL_DMA_IRQHandler+0x690>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d04a      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a83      	ldr	r2, [pc, #524]	; (8006c44 <HAL_DMA_IRQHandler+0x694>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d045      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a82      	ldr	r2, [pc, #520]	; (8006c48 <HAL_DMA_IRQHandler+0x698>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d040      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a80      	ldr	r2, [pc, #512]	; (8006c4c <HAL_DMA_IRQHandler+0x69c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d03b      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a7f      	ldr	r2, [pc, #508]	; (8006c50 <HAL_DMA_IRQHandler+0x6a0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d036      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a7d      	ldr	r2, [pc, #500]	; (8006c54 <HAL_DMA_IRQHandler+0x6a4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d031      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a7c      	ldr	r2, [pc, #496]	; (8006c58 <HAL_DMA_IRQHandler+0x6a8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d02c      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a7a      	ldr	r2, [pc, #488]	; (8006c5c <HAL_DMA_IRQHandler+0x6ac>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d027      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a79      	ldr	r2, [pc, #484]	; (8006c60 <HAL_DMA_IRQHandler+0x6b0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d022      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a77      	ldr	r2, [pc, #476]	; (8006c64 <HAL_DMA_IRQHandler+0x6b4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01d      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a76      	ldr	r2, [pc, #472]	; (8006c68 <HAL_DMA_IRQHandler+0x6b8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d018      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a74      	ldr	r2, [pc, #464]	; (8006c6c <HAL_DMA_IRQHandler+0x6bc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a73      	ldr	r2, [pc, #460]	; (8006c70 <HAL_DMA_IRQHandler+0x6c0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a71      	ldr	r2, [pc, #452]	; (8006c74 <HAL_DMA_IRQHandler+0x6c4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a70      	ldr	r2, [pc, #448]	; (8006c78 <HAL_DMA_IRQHandler+0x6c8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x516>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a6e      	ldr	r2, [pc, #440]	; (8006c7c <HAL_DMA_IRQHandler+0x6cc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d10a      	bne.n	8006adc <HAL_DMA_IRQHandler+0x52c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	e009      	b.n	8006af0 <HAL_DMA_IRQHandler+0x540>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bf14      	ite	ne
 8006aea:	2301      	movne	r3, #1
 8006aec:	2300      	moveq	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d03e      	beq.n	8006b72 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2210      	movs	r2, #16
 8006afe:	409a      	lsls	r2, r3
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d018      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d108      	bne.n	8006b32 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d024      	beq.n	8006b72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
 8006b30:	e01f      	b.n	8006b72 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01b      	beq.n	8006b72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
 8006b42:	e016      	b.n	8006b72 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d107      	bne.n	8006b62 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0208 	bic.w	r2, r2, #8
 8006b60:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	409a      	lsls	r2, r3
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	4013      	ands	r3, r2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8110 	beq.w	8006da8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a2c      	ldr	r2, [pc, #176]	; (8006c40 <HAL_DMA_IRQHandler+0x690>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d04a      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a2b      	ldr	r2, [pc, #172]	; (8006c44 <HAL_DMA_IRQHandler+0x694>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d045      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a29      	ldr	r2, [pc, #164]	; (8006c48 <HAL_DMA_IRQHandler+0x698>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d040      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a28      	ldr	r2, [pc, #160]	; (8006c4c <HAL_DMA_IRQHandler+0x69c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d03b      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a26      	ldr	r2, [pc, #152]	; (8006c50 <HAL_DMA_IRQHandler+0x6a0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d036      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a25      	ldr	r2, [pc, #148]	; (8006c54 <HAL_DMA_IRQHandler+0x6a4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d031      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a23      	ldr	r2, [pc, #140]	; (8006c58 <HAL_DMA_IRQHandler+0x6a8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d02c      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a22      	ldr	r2, [pc, #136]	; (8006c5c <HAL_DMA_IRQHandler+0x6ac>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d027      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a20      	ldr	r2, [pc, #128]	; (8006c60 <HAL_DMA_IRQHandler+0x6b0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d022      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <HAL_DMA_IRQHandler+0x6b4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d01d      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a1d      	ldr	r2, [pc, #116]	; (8006c68 <HAL_DMA_IRQHandler+0x6b8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d018      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a1c      	ldr	r2, [pc, #112]	; (8006c6c <HAL_DMA_IRQHandler+0x6bc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d013      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a1a      	ldr	r2, [pc, #104]	; (8006c70 <HAL_DMA_IRQHandler+0x6c0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00e      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <HAL_DMA_IRQHandler+0x6c4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d009      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <HAL_DMA_IRQHandler+0x6c8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d004      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x678>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a16      	ldr	r2, [pc, #88]	; (8006c7c <HAL_DMA_IRQHandler+0x6cc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d12b      	bne.n	8006c80 <HAL_DMA_IRQHandler+0x6d0>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bf14      	ite	ne
 8006c36:	2301      	movne	r3, #1
 8006c38:	2300      	moveq	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	e02a      	b.n	8006c94 <HAL_DMA_IRQHandler+0x6e4>
 8006c3e:	bf00      	nop
 8006c40:	40020010 	.word	0x40020010
 8006c44:	40020028 	.word	0x40020028
 8006c48:	40020040 	.word	0x40020040
 8006c4c:	40020058 	.word	0x40020058
 8006c50:	40020070 	.word	0x40020070
 8006c54:	40020088 	.word	0x40020088
 8006c58:	400200a0 	.word	0x400200a0
 8006c5c:	400200b8 	.word	0x400200b8
 8006c60:	40020410 	.word	0x40020410
 8006c64:	40020428 	.word	0x40020428
 8006c68:	40020440 	.word	0x40020440
 8006c6c:	40020458 	.word	0x40020458
 8006c70:	40020470 	.word	0x40020470
 8006c74:	40020488 	.word	0x40020488
 8006c78:	400204a0 	.word	0x400204a0
 8006c7c:	400204b8 	.word	0x400204b8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bf14      	ite	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	2300      	moveq	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8087 	beq.w	8006da8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	409a      	lsls	r2, r3
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d139      	bne.n	8006d2a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0216 	bic.w	r2, r2, #22
 8006cc4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695a      	ldr	r2, [r3, #20]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cd4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d103      	bne.n	8006ce6 <HAL_DMA_IRQHandler+0x736>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0208 	bic.w	r2, r2, #8
 8006cf4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	223f      	movs	r2, #63	; 0x3f
 8006d00:	409a      	lsls	r2, r3
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 834a 	beq.w	80073b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
          }
          return;
 8006d28:	e344      	b.n	80073b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d018      	beq.n	8006d6a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d108      	bne.n	8006d58 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d02c      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
 8006d56:	e027      	b.n	8006da8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d023      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
 8006d68:	e01e      	b.n	8006da8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10f      	bne.n	8006d98 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0210 	bic.w	r2, r2, #16
 8006d86:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8306 	beq.w	80073be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 8088 	beq.w	8006ed0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a7a      	ldr	r2, [pc, #488]	; (8006fb8 <HAL_DMA_IRQHandler+0xa08>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d04a      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a79      	ldr	r2, [pc, #484]	; (8006fbc <HAL_DMA_IRQHandler+0xa0c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d045      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a77      	ldr	r2, [pc, #476]	; (8006fc0 <HAL_DMA_IRQHandler+0xa10>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d040      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a76      	ldr	r2, [pc, #472]	; (8006fc4 <HAL_DMA_IRQHandler+0xa14>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d03b      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a74      	ldr	r2, [pc, #464]	; (8006fc8 <HAL_DMA_IRQHandler+0xa18>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d036      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a73      	ldr	r2, [pc, #460]	; (8006fcc <HAL_DMA_IRQHandler+0xa1c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d031      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a71      	ldr	r2, [pc, #452]	; (8006fd0 <HAL_DMA_IRQHandler+0xa20>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d02c      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a70      	ldr	r2, [pc, #448]	; (8006fd4 <HAL_DMA_IRQHandler+0xa24>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d027      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a6e      	ldr	r2, [pc, #440]	; (8006fd8 <HAL_DMA_IRQHandler+0xa28>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d022      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a6d      	ldr	r2, [pc, #436]	; (8006fdc <HAL_DMA_IRQHandler+0xa2c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d01d      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a6b      	ldr	r2, [pc, #428]	; (8006fe0 <HAL_DMA_IRQHandler+0xa30>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d018      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a6a      	ldr	r2, [pc, #424]	; (8006fe4 <HAL_DMA_IRQHandler+0xa34>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a68      	ldr	r2, [pc, #416]	; (8006fe8 <HAL_DMA_IRQHandler+0xa38>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00e      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a67      	ldr	r2, [pc, #412]	; (8006fec <HAL_DMA_IRQHandler+0xa3c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d009      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a65      	ldr	r2, [pc, #404]	; (8006ff0 <HAL_DMA_IRQHandler+0xa40>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x8b8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a64      	ldr	r2, [pc, #400]	; (8006ff4 <HAL_DMA_IRQHandler+0xa44>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d108      	bne.n	8006e7a <HAL_DMA_IRQHandler+0x8ca>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0201 	bic.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	e007      	b.n	8006e8a <HAL_DMA_IRQHandler+0x8da>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0201 	bic.w	r2, r2, #1
 8006e88:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d307      	bcc.n	8006ea6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f2      	bne.n	8006e8a <HAL_DMA_IRQHandler+0x8da>
 8006ea4:	e000      	b.n	8006ea8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006ea6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2203      	movs	r2, #3
 8006eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006ebe:	e003      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8272 	beq.w	80073be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	4798      	blx	r3
 8006ee2:	e26c      	b.n	80073be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a43      	ldr	r2, [pc, #268]	; (8006ff8 <HAL_DMA_IRQHandler+0xa48>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d022      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x984>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a42      	ldr	r2, [pc, #264]	; (8006ffc <HAL_DMA_IRQHandler+0xa4c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d01d      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x984>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a40      	ldr	r2, [pc, #256]	; (8007000 <HAL_DMA_IRQHandler+0xa50>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d018      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x984>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a3f      	ldr	r2, [pc, #252]	; (8007004 <HAL_DMA_IRQHandler+0xa54>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d013      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x984>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a3d      	ldr	r2, [pc, #244]	; (8007008 <HAL_DMA_IRQHandler+0xa58>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00e      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x984>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a3c      	ldr	r2, [pc, #240]	; (800700c <HAL_DMA_IRQHandler+0xa5c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d009      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x984>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a3a      	ldr	r2, [pc, #232]	; (8007010 <HAL_DMA_IRQHandler+0xa60>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d004      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x984>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a39      	ldr	r2, [pc, #228]	; (8007014 <HAL_DMA_IRQHandler+0xa64>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d101      	bne.n	8006f38 <HAL_DMA_IRQHandler+0x988>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <HAL_DMA_IRQHandler+0x98a>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 823f 	beq.w	80073be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2204      	movs	r2, #4
 8006f52:	409a      	lsls	r2, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80cd 	beq.w	80070f8 <HAL_DMA_IRQHandler+0xb48>
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80c7 	beq.w	80070f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	2204      	movs	r2, #4
 8006f74:	409a      	lsls	r2, r3
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d049      	beq.n	8007018 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8210 	beq.w	80073b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fa0:	e20a      	b.n	80073b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8206 	beq.w	80073b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fb4:	e200      	b.n	80073b8 <HAL_DMA_IRQHandler+0xe08>
 8006fb6:	bf00      	nop
 8006fb8:	40020010 	.word	0x40020010
 8006fbc:	40020028 	.word	0x40020028
 8006fc0:	40020040 	.word	0x40020040
 8006fc4:	40020058 	.word	0x40020058
 8006fc8:	40020070 	.word	0x40020070
 8006fcc:	40020088 	.word	0x40020088
 8006fd0:	400200a0 	.word	0x400200a0
 8006fd4:	400200b8 	.word	0x400200b8
 8006fd8:	40020410 	.word	0x40020410
 8006fdc:	40020428 	.word	0x40020428
 8006fe0:	40020440 	.word	0x40020440
 8006fe4:	40020458 	.word	0x40020458
 8006fe8:	40020470 	.word	0x40020470
 8006fec:	40020488 	.word	0x40020488
 8006ff0:	400204a0 	.word	0x400204a0
 8006ff4:	400204b8 	.word	0x400204b8
 8006ff8:	58025408 	.word	0x58025408
 8006ffc:	5802541c 	.word	0x5802541c
 8007000:	58025430 	.word	0x58025430
 8007004:	58025444 	.word	0x58025444
 8007008:	58025458 	.word	0x58025458
 800700c:	5802546c 	.word	0x5802546c
 8007010:	58025480 	.word	0x58025480
 8007014:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d160      	bne.n	80070e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a7f      	ldr	r2, [pc, #508]	; (8007224 <HAL_DMA_IRQHandler+0xc74>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d04a      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a7d      	ldr	r2, [pc, #500]	; (8007228 <HAL_DMA_IRQHandler+0xc78>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d045      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a7c      	ldr	r2, [pc, #496]	; (800722c <HAL_DMA_IRQHandler+0xc7c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d040      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a7a      	ldr	r2, [pc, #488]	; (8007230 <HAL_DMA_IRQHandler+0xc80>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d03b      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a79      	ldr	r2, [pc, #484]	; (8007234 <HAL_DMA_IRQHandler+0xc84>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d036      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a77      	ldr	r2, [pc, #476]	; (8007238 <HAL_DMA_IRQHandler+0xc88>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d031      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a76      	ldr	r2, [pc, #472]	; (800723c <HAL_DMA_IRQHandler+0xc8c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d02c      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a74      	ldr	r2, [pc, #464]	; (8007240 <HAL_DMA_IRQHandler+0xc90>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d027      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a73      	ldr	r2, [pc, #460]	; (8007244 <HAL_DMA_IRQHandler+0xc94>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d022      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a71      	ldr	r2, [pc, #452]	; (8007248 <HAL_DMA_IRQHandler+0xc98>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01d      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a70      	ldr	r2, [pc, #448]	; (800724c <HAL_DMA_IRQHandler+0xc9c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d018      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a6e      	ldr	r2, [pc, #440]	; (8007250 <HAL_DMA_IRQHandler+0xca0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a6d      	ldr	r2, [pc, #436]	; (8007254 <HAL_DMA_IRQHandler+0xca4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00e      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a6b      	ldr	r2, [pc, #428]	; (8007258 <HAL_DMA_IRQHandler+0xca8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d009      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a6a      	ldr	r2, [pc, #424]	; (800725c <HAL_DMA_IRQHandler+0xcac>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xb12>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a68      	ldr	r2, [pc, #416]	; (8007260 <HAL_DMA_IRQHandler+0xcb0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d108      	bne.n	80070d4 <HAL_DMA_IRQHandler+0xb24>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0208 	bic.w	r2, r2, #8
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e007      	b.n	80070e4 <HAL_DMA_IRQHandler+0xb34>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0204 	bic.w	r2, r2, #4
 80070e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8165 	beq.w	80073b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070f6:	e15f      	b.n	80073b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	2202      	movs	r2, #2
 8007102:	409a      	lsls	r2, r3
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4013      	ands	r3, r2
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80c5 	beq.w	8007298 <HAL_DMA_IRQHandler+0xce8>
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80bf 	beq.w	8007298 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	2202      	movs	r2, #2
 8007124:	409a      	lsls	r2, r3
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d018      	beq.n	8007166 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 813a 	beq.w	80073bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007150:	e134      	b.n	80073bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 8130 	beq.w	80073bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007164:	e12a      	b.n	80073bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	f040 8089 	bne.w	8007284 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a2b      	ldr	r2, [pc, #172]	; (8007224 <HAL_DMA_IRQHandler+0xc74>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d04a      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a29      	ldr	r2, [pc, #164]	; (8007228 <HAL_DMA_IRQHandler+0xc78>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d045      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a28      	ldr	r2, [pc, #160]	; (800722c <HAL_DMA_IRQHandler+0xc7c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d040      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a26      	ldr	r2, [pc, #152]	; (8007230 <HAL_DMA_IRQHandler+0xc80>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d03b      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a25      	ldr	r2, [pc, #148]	; (8007234 <HAL_DMA_IRQHandler+0xc84>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d036      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a23      	ldr	r2, [pc, #140]	; (8007238 <HAL_DMA_IRQHandler+0xc88>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d031      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a22      	ldr	r2, [pc, #136]	; (800723c <HAL_DMA_IRQHandler+0xc8c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d02c      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a20      	ldr	r2, [pc, #128]	; (8007240 <HAL_DMA_IRQHandler+0xc90>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d027      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1f      	ldr	r2, [pc, #124]	; (8007244 <HAL_DMA_IRQHandler+0xc94>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d022      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1d      	ldr	r2, [pc, #116]	; (8007248 <HAL_DMA_IRQHandler+0xc98>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01d      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1c      	ldr	r2, [pc, #112]	; (800724c <HAL_DMA_IRQHandler+0xc9c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d018      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1a      	ldr	r2, [pc, #104]	; (8007250 <HAL_DMA_IRQHandler+0xca0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a19      	ldr	r2, [pc, #100]	; (8007254 <HAL_DMA_IRQHandler+0xca4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a17      	ldr	r2, [pc, #92]	; (8007258 <HAL_DMA_IRQHandler+0xca8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a16      	ldr	r2, [pc, #88]	; (800725c <HAL_DMA_IRQHandler+0xcac>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_DMA_IRQHandler+0xc62>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a14      	ldr	r2, [pc, #80]	; (8007260 <HAL_DMA_IRQHandler+0xcb0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d128      	bne.n	8007264 <HAL_DMA_IRQHandler+0xcb4>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0214 	bic.w	r2, r2, #20
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e027      	b.n	8007274 <HAL_DMA_IRQHandler+0xcc4>
 8007224:	40020010 	.word	0x40020010
 8007228:	40020028 	.word	0x40020028
 800722c:	40020040 	.word	0x40020040
 8007230:	40020058 	.word	0x40020058
 8007234:	40020070 	.word	0x40020070
 8007238:	40020088 	.word	0x40020088
 800723c:	400200a0 	.word	0x400200a0
 8007240:	400200b8 	.word	0x400200b8
 8007244:	40020410 	.word	0x40020410
 8007248:	40020428 	.word	0x40020428
 800724c:	40020440 	.word	0x40020440
 8007250:	40020458 	.word	0x40020458
 8007254:	40020470 	.word	0x40020470
 8007258:	40020488 	.word	0x40020488
 800725c:	400204a0 	.word	0x400204a0
 8007260:	400204b8 	.word	0x400204b8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 020a 	bic.w	r2, r2, #10
 8007272:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8097 	beq.w	80073bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007296:	e091      	b.n	80073bc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	2208      	movs	r2, #8
 80072a2:	409a      	lsls	r2, r3
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8088 	beq.w	80073be <HAL_DMA_IRQHandler+0xe0e>
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8082 	beq.w	80073be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a41      	ldr	r2, [pc, #260]	; (80073c4 <HAL_DMA_IRQHandler+0xe14>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d04a      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a3f      	ldr	r2, [pc, #252]	; (80073c8 <HAL_DMA_IRQHandler+0xe18>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d045      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a3e      	ldr	r2, [pc, #248]	; (80073cc <HAL_DMA_IRQHandler+0xe1c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d040      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a3c      	ldr	r2, [pc, #240]	; (80073d0 <HAL_DMA_IRQHandler+0xe20>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d03b      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a3b      	ldr	r2, [pc, #236]	; (80073d4 <HAL_DMA_IRQHandler+0xe24>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d036      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a39      	ldr	r2, [pc, #228]	; (80073d8 <HAL_DMA_IRQHandler+0xe28>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d031      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a38      	ldr	r2, [pc, #224]	; (80073dc <HAL_DMA_IRQHandler+0xe2c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d02c      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a36      	ldr	r2, [pc, #216]	; (80073e0 <HAL_DMA_IRQHandler+0xe30>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d027      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a35      	ldr	r2, [pc, #212]	; (80073e4 <HAL_DMA_IRQHandler+0xe34>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d022      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a33      	ldr	r2, [pc, #204]	; (80073e8 <HAL_DMA_IRQHandler+0xe38>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01d      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a32      	ldr	r2, [pc, #200]	; (80073ec <HAL_DMA_IRQHandler+0xe3c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d018      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a30      	ldr	r2, [pc, #192]	; (80073f0 <HAL_DMA_IRQHandler+0xe40>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a2f      	ldr	r2, [pc, #188]	; (80073f4 <HAL_DMA_IRQHandler+0xe44>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00e      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a2d      	ldr	r2, [pc, #180]	; (80073f8 <HAL_DMA_IRQHandler+0xe48>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a2c      	ldr	r2, [pc, #176]	; (80073fc <HAL_DMA_IRQHandler+0xe4c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_DMA_IRQHandler+0xdaa>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a2a      	ldr	r2, [pc, #168]	; (8007400 <HAL_DMA_IRQHandler+0xe50>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d108      	bne.n	800736c <HAL_DMA_IRQHandler+0xdbc>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 021c 	bic.w	r2, r2, #28
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	e007      	b.n	800737c <HAL_DMA_IRQHandler+0xdcc>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 020e 	bic.w	r2, r2, #14
 800737a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	2201      	movs	r2, #1
 8007386:	409a      	lsls	r2, r3
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
 80073b2:	e004      	b.n	80073be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80073b4:	bf00      	nop
 80073b6:	e002      	b.n	80073be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073b8:	bf00      	nop
 80073ba:	e000      	b.n	80073be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073be:	3728      	adds	r7, #40	; 0x28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40020010 	.word	0x40020010
 80073c8:	40020028 	.word	0x40020028
 80073cc:	40020040 	.word	0x40020040
 80073d0:	40020058 	.word	0x40020058
 80073d4:	40020070 	.word	0x40020070
 80073d8:	40020088 	.word	0x40020088
 80073dc:	400200a0 	.word	0x400200a0
 80073e0:	400200b8 	.word	0x400200b8
 80073e4:	40020410 	.word	0x40020410
 80073e8:	40020428 	.word	0x40020428
 80073ec:	40020440 	.word	0x40020440
 80073f0:	40020458 	.word	0x40020458
 80073f4:	40020470 	.word	0x40020470
 80073f8:	40020488 	.word	0x40020488
 80073fc:	400204a0 	.word	0x400204a0
 8007400:	400204b8 	.word	0x400204b8

08007404 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007416:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a7f      	ldr	r2, [pc, #508]	; (8007620 <DMA_SetConfig+0x21c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d072      	beq.n	800750e <DMA_SetConfig+0x10a>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a7d      	ldr	r2, [pc, #500]	; (8007624 <DMA_SetConfig+0x220>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d06d      	beq.n	800750e <DMA_SetConfig+0x10a>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a7c      	ldr	r2, [pc, #496]	; (8007628 <DMA_SetConfig+0x224>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d068      	beq.n	800750e <DMA_SetConfig+0x10a>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a7a      	ldr	r2, [pc, #488]	; (800762c <DMA_SetConfig+0x228>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d063      	beq.n	800750e <DMA_SetConfig+0x10a>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a79      	ldr	r2, [pc, #484]	; (8007630 <DMA_SetConfig+0x22c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d05e      	beq.n	800750e <DMA_SetConfig+0x10a>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a77      	ldr	r2, [pc, #476]	; (8007634 <DMA_SetConfig+0x230>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d059      	beq.n	800750e <DMA_SetConfig+0x10a>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a76      	ldr	r2, [pc, #472]	; (8007638 <DMA_SetConfig+0x234>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d054      	beq.n	800750e <DMA_SetConfig+0x10a>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a74      	ldr	r2, [pc, #464]	; (800763c <DMA_SetConfig+0x238>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d04f      	beq.n	800750e <DMA_SetConfig+0x10a>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a73      	ldr	r2, [pc, #460]	; (8007640 <DMA_SetConfig+0x23c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d04a      	beq.n	800750e <DMA_SetConfig+0x10a>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a71      	ldr	r2, [pc, #452]	; (8007644 <DMA_SetConfig+0x240>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d045      	beq.n	800750e <DMA_SetConfig+0x10a>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a70      	ldr	r2, [pc, #448]	; (8007648 <DMA_SetConfig+0x244>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d040      	beq.n	800750e <DMA_SetConfig+0x10a>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a6e      	ldr	r2, [pc, #440]	; (800764c <DMA_SetConfig+0x248>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d03b      	beq.n	800750e <DMA_SetConfig+0x10a>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a6d      	ldr	r2, [pc, #436]	; (8007650 <DMA_SetConfig+0x24c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d036      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a6b      	ldr	r2, [pc, #428]	; (8007654 <DMA_SetConfig+0x250>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d031      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a6a      	ldr	r2, [pc, #424]	; (8007658 <DMA_SetConfig+0x254>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d02c      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a68      	ldr	r2, [pc, #416]	; (800765c <DMA_SetConfig+0x258>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d027      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a67      	ldr	r2, [pc, #412]	; (8007660 <DMA_SetConfig+0x25c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d022      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a65      	ldr	r2, [pc, #404]	; (8007664 <DMA_SetConfig+0x260>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d01d      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a64      	ldr	r2, [pc, #400]	; (8007668 <DMA_SetConfig+0x264>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d018      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a62      	ldr	r2, [pc, #392]	; (800766c <DMA_SetConfig+0x268>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a61      	ldr	r2, [pc, #388]	; (8007670 <DMA_SetConfig+0x26c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a5f      	ldr	r2, [pc, #380]	; (8007674 <DMA_SetConfig+0x270>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d009      	beq.n	800750e <DMA_SetConfig+0x10a>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a5e      	ldr	r2, [pc, #376]	; (8007678 <DMA_SetConfig+0x274>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <DMA_SetConfig+0x10a>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a5c      	ldr	r2, [pc, #368]	; (800767c <DMA_SetConfig+0x278>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d101      	bne.n	8007512 <DMA_SetConfig+0x10e>
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <DMA_SetConfig+0x110>
 8007512:	2300      	movs	r3, #0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00d      	beq.n	8007534 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007520:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007532:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a39      	ldr	r2, [pc, #228]	; (8007620 <DMA_SetConfig+0x21c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d04a      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a38      	ldr	r2, [pc, #224]	; (8007624 <DMA_SetConfig+0x220>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d045      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a36      	ldr	r2, [pc, #216]	; (8007628 <DMA_SetConfig+0x224>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d040      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a35      	ldr	r2, [pc, #212]	; (800762c <DMA_SetConfig+0x228>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d03b      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a33      	ldr	r2, [pc, #204]	; (8007630 <DMA_SetConfig+0x22c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d036      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a32      	ldr	r2, [pc, #200]	; (8007634 <DMA_SetConfig+0x230>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d031      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a30      	ldr	r2, [pc, #192]	; (8007638 <DMA_SetConfig+0x234>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d02c      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a2f      	ldr	r2, [pc, #188]	; (800763c <DMA_SetConfig+0x238>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d027      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a2d      	ldr	r2, [pc, #180]	; (8007640 <DMA_SetConfig+0x23c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d022      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a2c      	ldr	r2, [pc, #176]	; (8007644 <DMA_SetConfig+0x240>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d01d      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a2a      	ldr	r2, [pc, #168]	; (8007648 <DMA_SetConfig+0x244>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d018      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a29      	ldr	r2, [pc, #164]	; (800764c <DMA_SetConfig+0x248>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d013      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a27      	ldr	r2, [pc, #156]	; (8007650 <DMA_SetConfig+0x24c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00e      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a26      	ldr	r2, [pc, #152]	; (8007654 <DMA_SetConfig+0x250>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d009      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a24      	ldr	r2, [pc, #144]	; (8007658 <DMA_SetConfig+0x254>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d004      	beq.n	80075d4 <DMA_SetConfig+0x1d0>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a23      	ldr	r2, [pc, #140]	; (800765c <DMA_SetConfig+0x258>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d101      	bne.n	80075d8 <DMA_SetConfig+0x1d4>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <DMA_SetConfig+0x1d6>
 80075d8:	2300      	movs	r3, #0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d059      	beq.n	8007692 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e2:	f003 031f 	and.w	r3, r3, #31
 80075e6:	223f      	movs	r2, #63	; 0x3f
 80075e8:	409a      	lsls	r2, r3
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d138      	bne.n	8007680 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800761e:	e086      	b.n	800772e <DMA_SetConfig+0x32a>
 8007620:	40020010 	.word	0x40020010
 8007624:	40020028 	.word	0x40020028
 8007628:	40020040 	.word	0x40020040
 800762c:	40020058 	.word	0x40020058
 8007630:	40020070 	.word	0x40020070
 8007634:	40020088 	.word	0x40020088
 8007638:	400200a0 	.word	0x400200a0
 800763c:	400200b8 	.word	0x400200b8
 8007640:	40020410 	.word	0x40020410
 8007644:	40020428 	.word	0x40020428
 8007648:	40020440 	.word	0x40020440
 800764c:	40020458 	.word	0x40020458
 8007650:	40020470 	.word	0x40020470
 8007654:	40020488 	.word	0x40020488
 8007658:	400204a0 	.word	0x400204a0
 800765c:	400204b8 	.word	0x400204b8
 8007660:	58025408 	.word	0x58025408
 8007664:	5802541c 	.word	0x5802541c
 8007668:	58025430 	.word	0x58025430
 800766c:	58025444 	.word	0x58025444
 8007670:	58025458 	.word	0x58025458
 8007674:	5802546c 	.word	0x5802546c
 8007678:	58025480 	.word	0x58025480
 800767c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	60da      	str	r2, [r3, #12]
}
 8007690:	e04d      	b.n	800772e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a29      	ldr	r2, [pc, #164]	; (800773c <DMA_SetConfig+0x338>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d022      	beq.n	80076e2 <DMA_SetConfig+0x2de>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a27      	ldr	r2, [pc, #156]	; (8007740 <DMA_SetConfig+0x33c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d01d      	beq.n	80076e2 <DMA_SetConfig+0x2de>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a26      	ldr	r2, [pc, #152]	; (8007744 <DMA_SetConfig+0x340>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d018      	beq.n	80076e2 <DMA_SetConfig+0x2de>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a24      	ldr	r2, [pc, #144]	; (8007748 <DMA_SetConfig+0x344>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d013      	beq.n	80076e2 <DMA_SetConfig+0x2de>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a23      	ldr	r2, [pc, #140]	; (800774c <DMA_SetConfig+0x348>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00e      	beq.n	80076e2 <DMA_SetConfig+0x2de>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a21      	ldr	r2, [pc, #132]	; (8007750 <DMA_SetConfig+0x34c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d009      	beq.n	80076e2 <DMA_SetConfig+0x2de>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a20      	ldr	r2, [pc, #128]	; (8007754 <DMA_SetConfig+0x350>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d004      	beq.n	80076e2 <DMA_SetConfig+0x2de>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1e      	ldr	r2, [pc, #120]	; (8007758 <DMA_SetConfig+0x354>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d101      	bne.n	80076e6 <DMA_SetConfig+0x2e2>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e000      	b.n	80076e8 <DMA_SetConfig+0x2e4>
 80076e6:	2300      	movs	r3, #0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d020      	beq.n	800772e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f0:	f003 031f 	and.w	r3, r3, #31
 80076f4:	2201      	movs	r2, #1
 80076f6:	409a      	lsls	r2, r3
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	d108      	bne.n	800771e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	60da      	str	r2, [r3, #12]
}
 800771c:	e007      	b.n	800772e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	60da      	str	r2, [r3, #12]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	58025408 	.word	0x58025408
 8007740:	5802541c 	.word	0x5802541c
 8007744:	58025430 	.word	0x58025430
 8007748:	58025444 	.word	0x58025444
 800774c:	58025458 	.word	0x58025458
 8007750:	5802546c 	.word	0x5802546c
 8007754:	58025480 	.word	0x58025480
 8007758:	58025494 	.word	0x58025494

0800775c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a42      	ldr	r2, [pc, #264]	; (8007874 <DMA_CalcBaseAndBitshift+0x118>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d04a      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a41      	ldr	r2, [pc, #260]	; (8007878 <DMA_CalcBaseAndBitshift+0x11c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d045      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a3f      	ldr	r2, [pc, #252]	; (800787c <DMA_CalcBaseAndBitshift+0x120>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d040      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a3e      	ldr	r2, [pc, #248]	; (8007880 <DMA_CalcBaseAndBitshift+0x124>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d03b      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a3c      	ldr	r2, [pc, #240]	; (8007884 <DMA_CalcBaseAndBitshift+0x128>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d036      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a3b      	ldr	r2, [pc, #236]	; (8007888 <DMA_CalcBaseAndBitshift+0x12c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d031      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a39      	ldr	r2, [pc, #228]	; (800788c <DMA_CalcBaseAndBitshift+0x130>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d02c      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a38      	ldr	r2, [pc, #224]	; (8007890 <DMA_CalcBaseAndBitshift+0x134>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d027      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a36      	ldr	r2, [pc, #216]	; (8007894 <DMA_CalcBaseAndBitshift+0x138>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d022      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a35      	ldr	r2, [pc, #212]	; (8007898 <DMA_CalcBaseAndBitshift+0x13c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d01d      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a33      	ldr	r2, [pc, #204]	; (800789c <DMA_CalcBaseAndBitshift+0x140>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d018      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a32      	ldr	r2, [pc, #200]	; (80078a0 <DMA_CalcBaseAndBitshift+0x144>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d013      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a30      	ldr	r2, [pc, #192]	; (80078a4 <DMA_CalcBaseAndBitshift+0x148>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00e      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a2f      	ldr	r2, [pc, #188]	; (80078a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d009      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a2d      	ldr	r2, [pc, #180]	; (80078ac <DMA_CalcBaseAndBitshift+0x150>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d004      	beq.n	8007804 <DMA_CalcBaseAndBitshift+0xa8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a2c      	ldr	r2, [pc, #176]	; (80078b0 <DMA_CalcBaseAndBitshift+0x154>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d101      	bne.n	8007808 <DMA_CalcBaseAndBitshift+0xac>
 8007804:	2301      	movs	r3, #1
 8007806:	e000      	b.n	800780a <DMA_CalcBaseAndBitshift+0xae>
 8007808:	2300      	movs	r3, #0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d024      	beq.n	8007858 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	3b10      	subs	r3, #16
 8007816:	4a27      	ldr	r2, [pc, #156]	; (80078b4 <DMA_CalcBaseAndBitshift+0x158>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	091b      	lsrs	r3, r3, #4
 800781e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	4a24      	ldr	r2, [pc, #144]	; (80078b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007828:	5cd3      	ldrb	r3, [r2, r3]
 800782a:	461a      	mov	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d908      	bls.n	8007848 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	4b1f      	ldr	r3, [pc, #124]	; (80078bc <DMA_CalcBaseAndBitshift+0x160>)
 800783e:	4013      	ands	r3, r2
 8007840:	1d1a      	adds	r2, r3, #4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	659a      	str	r2, [r3, #88]	; 0x58
 8007846:	e00d      	b.n	8007864 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	4b1b      	ldr	r3, [pc, #108]	; (80078bc <DMA_CalcBaseAndBitshift+0x160>)
 8007850:	4013      	ands	r3, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6593      	str	r3, [r2, #88]	; 0x58
 8007856:	e005      	b.n	8007864 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	40020010 	.word	0x40020010
 8007878:	40020028 	.word	0x40020028
 800787c:	40020040 	.word	0x40020040
 8007880:	40020058 	.word	0x40020058
 8007884:	40020070 	.word	0x40020070
 8007888:	40020088 	.word	0x40020088
 800788c:	400200a0 	.word	0x400200a0
 8007890:	400200b8 	.word	0x400200b8
 8007894:	40020410 	.word	0x40020410
 8007898:	40020428 	.word	0x40020428
 800789c:	40020440 	.word	0x40020440
 80078a0:	40020458 	.word	0x40020458
 80078a4:	40020470 	.word	0x40020470
 80078a8:	40020488 	.word	0x40020488
 80078ac:	400204a0 	.word	0x400204a0
 80078b0:	400204b8 	.word	0x400204b8
 80078b4:	aaaaaaab 	.word	0xaaaaaaab
 80078b8:	080116dc 	.word	0x080116dc
 80078bc:	fffffc00 	.word	0xfffffc00

080078c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d120      	bne.n	8007916 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d858      	bhi.n	800798e <DMA_CheckFifoParam+0xce>
 80078dc:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <DMA_CheckFifoParam+0x24>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	080078f5 	.word	0x080078f5
 80078e8:	08007907 	.word	0x08007907
 80078ec:	080078f5 	.word	0x080078f5
 80078f0:	0800798f 	.word	0x0800798f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d048      	beq.n	8007992 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007904:	e045      	b.n	8007992 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800790e:	d142      	bne.n	8007996 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007914:	e03f      	b.n	8007996 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800791e:	d123      	bne.n	8007968 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	2b03      	cmp	r3, #3
 8007926:	d838      	bhi.n	800799a <DMA_CheckFifoParam+0xda>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <DMA_CheckFifoParam+0x70>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007941 	.word	0x08007941
 8007934:	08007947 	.word	0x08007947
 8007938:	08007941 	.word	0x08007941
 800793c:	08007959 	.word	0x08007959
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	73fb      	strb	r3, [r7, #15]
        break;
 8007944:	e030      	b.n	80079a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d025      	beq.n	800799e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007956:	e022      	b.n	800799e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007960:	d11f      	bne.n	80079a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007966:	e01c      	b.n	80079a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	2b02      	cmp	r3, #2
 800796e:	d902      	bls.n	8007976 <DMA_CheckFifoParam+0xb6>
 8007970:	2b03      	cmp	r3, #3
 8007972:	d003      	beq.n	800797c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007974:	e018      	b.n	80079a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	73fb      	strb	r3, [r7, #15]
        break;
 800797a:	e015      	b.n	80079a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00e      	beq.n	80079a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
    break;
 800798c:	e00b      	b.n	80079a6 <DMA_CheckFifoParam+0xe6>
        break;
 800798e:	bf00      	nop
 8007990:	e00a      	b.n	80079a8 <DMA_CheckFifoParam+0xe8>
        break;
 8007992:	bf00      	nop
 8007994:	e008      	b.n	80079a8 <DMA_CheckFifoParam+0xe8>
        break;
 8007996:	bf00      	nop
 8007998:	e006      	b.n	80079a8 <DMA_CheckFifoParam+0xe8>
        break;
 800799a:	bf00      	nop
 800799c:	e004      	b.n	80079a8 <DMA_CheckFifoParam+0xe8>
        break;
 800799e:	bf00      	nop
 80079a0:	e002      	b.n	80079a8 <DMA_CheckFifoParam+0xe8>
        break;
 80079a2:	bf00      	nop
 80079a4:	e000      	b.n	80079a8 <DMA_CheckFifoParam+0xe8>
    break;
 80079a6:	bf00      	nop
    }
  }

  return status;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop

080079b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a38      	ldr	r2, [pc, #224]	; (8007aac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d022      	beq.n	8007a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a36      	ldr	r2, [pc, #216]	; (8007ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d01d      	beq.n	8007a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a35      	ldr	r2, [pc, #212]	; (8007ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d018      	beq.n	8007a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a33      	ldr	r2, [pc, #204]	; (8007ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d013      	beq.n	8007a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a32      	ldr	r2, [pc, #200]	; (8007abc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00e      	beq.n	8007a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a30      	ldr	r2, [pc, #192]	; (8007ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d009      	beq.n	8007a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a2f      	ldr	r2, [pc, #188]	; (8007ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d004      	beq.n	8007a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a2d      	ldr	r2, [pc, #180]	; (8007ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d101      	bne.n	8007a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01a      	beq.n	8007a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	3b08      	subs	r3, #8
 8007a28:	4a28      	ldr	r2, [pc, #160]	; (8007acc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4b26      	ldr	r3, [pc, #152]	; (8007ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a24      	ldr	r2, [pc, #144]	; (8007ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007a44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	409a      	lsls	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007a54:	e024      	b.n	8007aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	3b10      	subs	r3, #16
 8007a5e:	4a1e      	ldr	r2, [pc, #120]	; (8007ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007a60:	fba2 2303 	umull	r2, r3, r2, r3
 8007a64:	091b      	lsrs	r3, r3, #4
 8007a66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4a1c      	ldr	r2, [pc, #112]	; (8007adc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d806      	bhi.n	8007a7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d902      	bls.n	8007a7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4b18      	ldr	r3, [pc, #96]	; (8007ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	461a      	mov	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007a90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	2201      	movs	r2, #1
 8007a9a:	409a      	lsls	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	58025408 	.word	0x58025408
 8007ab0:	5802541c 	.word	0x5802541c
 8007ab4:	58025430 	.word	0x58025430
 8007ab8:	58025444 	.word	0x58025444
 8007abc:	58025458 	.word	0x58025458
 8007ac0:	5802546c 	.word	0x5802546c
 8007ac4:	58025480 	.word	0x58025480
 8007ac8:	58025494 	.word	0x58025494
 8007acc:	cccccccd 	.word	0xcccccccd
 8007ad0:	16009600 	.word	0x16009600
 8007ad4:	58025880 	.word	0x58025880
 8007ad8:	aaaaaaab 	.word	0xaaaaaaab
 8007adc:	400204b8 	.word	0x400204b8
 8007ae0:	4002040f 	.word	0x4002040f
 8007ae4:	10008200 	.word	0x10008200
 8007ae8:	40020880 	.word	0x40020880

08007aec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d04a      	beq.n	8007b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d847      	bhi.n	8007b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a25      	ldr	r2, [pc, #148]	; (8007ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d022      	beq.n	8007b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a24      	ldr	r2, [pc, #144]	; (8007ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d01d      	beq.n	8007b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a22      	ldr	r2, [pc, #136]	; (8007bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d018      	beq.n	8007b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a21      	ldr	r2, [pc, #132]	; (8007bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d013      	beq.n	8007b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1f      	ldr	r2, [pc, #124]	; (8007bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00e      	beq.n	8007b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d009      	beq.n	8007b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a1c      	ldr	r2, [pc, #112]	; (8007bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d004      	beq.n	8007b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a1b      	ldr	r2, [pc, #108]	; (8007bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d101      	bne.n	8007b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e000      	b.n	8007b5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007b74:	671a      	str	r2, [r3, #112]	; 0x70
 8007b76:	e009      	b.n	8007b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4b14      	ldr	r3, [pc, #80]	; (8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	461a      	mov	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a11      	ldr	r2, [pc, #68]	; (8007bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007b8a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	2201      	movs	r2, #1
 8007b92:	409a      	lsls	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007b98:	bf00      	nop
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	58025408 	.word	0x58025408
 8007ba8:	5802541c 	.word	0x5802541c
 8007bac:	58025430 	.word	0x58025430
 8007bb0:	58025444 	.word	0x58025444
 8007bb4:	58025458 	.word	0x58025458
 8007bb8:	5802546c 	.word	0x5802546c
 8007bbc:	58025480 	.word	0x58025480
 8007bc0:	58025494 	.word	0x58025494
 8007bc4:	1600963f 	.word	0x1600963f
 8007bc8:	58025940 	.word	0x58025940
 8007bcc:	1000823f 	.word	0x1000823f
 8007bd0:	40020940 	.word	0x40020940

08007bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b089      	sub	sp, #36	; 0x24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007be2:	4b89      	ldr	r3, [pc, #548]	; (8007e08 <HAL_GPIO_Init+0x234>)
 8007be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007be6:	e194      	b.n	8007f12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	2101      	movs	r1, #1
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8186 	beq.w	8007f0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f003 0303 	and.w	r3, r3, #3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d005      	beq.n	8007c18 <HAL_GPIO_Init+0x44>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f003 0303 	and.w	r3, r3, #3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d130      	bne.n	8007c7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	2203      	movs	r2, #3
 8007c24:	fa02 f303 	lsl.w	r3, r2, r3
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c4e:	2201      	movs	r2, #1
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	fa02 f303 	lsl.w	r3, r2, r3
 8007c56:	43db      	mvns	r3, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	091b      	lsrs	r3, r3, #4
 8007c64:	f003 0201 	and.w	r2, r3, #1
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f003 0303 	and.w	r3, r3, #3
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d017      	beq.n	8007cb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	2203      	movs	r2, #3
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	43db      	mvns	r3, r3
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d123      	bne.n	8007d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	08da      	lsrs	r2, r3, #3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3208      	adds	r2, #8
 8007cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	220f      	movs	r2, #15
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	08da      	lsrs	r2, r3, #3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3208      	adds	r2, #8
 8007d04:	69b9      	ldr	r1, [r7, #24]
 8007d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	2203      	movs	r2, #3
 8007d16:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1a:	43db      	mvns	r3, r3
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f003 0203 	and.w	r2, r3, #3
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80e0 	beq.w	8007f0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d4c:	4b2f      	ldr	r3, [pc, #188]	; (8007e0c <HAL_GPIO_Init+0x238>)
 8007d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d52:	4a2e      	ldr	r2, [pc, #184]	; (8007e0c <HAL_GPIO_Init+0x238>)
 8007d54:	f043 0302 	orr.w	r3, r3, #2
 8007d58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d5c:	4b2b      	ldr	r3, [pc, #172]	; (8007e0c <HAL_GPIO_Init+0x238>)
 8007d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d6a:	4a29      	ldr	r2, [pc, #164]	; (8007e10 <HAL_GPIO_Init+0x23c>)
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	089b      	lsrs	r3, r3, #2
 8007d70:	3302      	adds	r3, #2
 8007d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	220f      	movs	r2, #15
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	43db      	mvns	r3, r3
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a20      	ldr	r2, [pc, #128]	; (8007e14 <HAL_GPIO_Init+0x240>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d052      	beq.n	8007e3c <HAL_GPIO_Init+0x268>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a1f      	ldr	r2, [pc, #124]	; (8007e18 <HAL_GPIO_Init+0x244>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d031      	beq.n	8007e02 <HAL_GPIO_Init+0x22e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a1e      	ldr	r2, [pc, #120]	; (8007e1c <HAL_GPIO_Init+0x248>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d02b      	beq.n	8007dfe <HAL_GPIO_Init+0x22a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a1d      	ldr	r2, [pc, #116]	; (8007e20 <HAL_GPIO_Init+0x24c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d025      	beq.n	8007dfa <HAL_GPIO_Init+0x226>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a1c      	ldr	r2, [pc, #112]	; (8007e24 <HAL_GPIO_Init+0x250>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d01f      	beq.n	8007df6 <HAL_GPIO_Init+0x222>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <HAL_GPIO_Init+0x254>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d019      	beq.n	8007df2 <HAL_GPIO_Init+0x21e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a1a      	ldr	r2, [pc, #104]	; (8007e2c <HAL_GPIO_Init+0x258>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d013      	beq.n	8007dee <HAL_GPIO_Init+0x21a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a19      	ldr	r2, [pc, #100]	; (8007e30 <HAL_GPIO_Init+0x25c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00d      	beq.n	8007dea <HAL_GPIO_Init+0x216>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_GPIO_Init+0x260>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d007      	beq.n	8007de6 <HAL_GPIO_Init+0x212>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_GPIO_Init+0x264>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d101      	bne.n	8007de2 <HAL_GPIO_Init+0x20e>
 8007dde:	2309      	movs	r3, #9
 8007de0:	e02d      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007de2:	230a      	movs	r3, #10
 8007de4:	e02b      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007de6:	2308      	movs	r3, #8
 8007de8:	e029      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007dea:	2307      	movs	r3, #7
 8007dec:	e027      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007dee:	2306      	movs	r3, #6
 8007df0:	e025      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007df2:	2305      	movs	r3, #5
 8007df4:	e023      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007df6:	2304      	movs	r3, #4
 8007df8:	e021      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e01f      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e01d      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e01b      	b.n	8007e3e <HAL_GPIO_Init+0x26a>
 8007e06:	bf00      	nop
 8007e08:	58000080 	.word	0x58000080
 8007e0c:	58024400 	.word	0x58024400
 8007e10:	58000400 	.word	0x58000400
 8007e14:	58020000 	.word	0x58020000
 8007e18:	58020400 	.word	0x58020400
 8007e1c:	58020800 	.word	0x58020800
 8007e20:	58020c00 	.word	0x58020c00
 8007e24:	58021000 	.word	0x58021000
 8007e28:	58021400 	.word	0x58021400
 8007e2c:	58021800 	.word	0x58021800
 8007e30:	58021c00 	.word	0x58021c00
 8007e34:	58022000 	.word	0x58022000
 8007e38:	58022400 	.word	0x58022400
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	f002 0203 	and.w	r2, r2, #3
 8007e44:	0092      	lsls	r2, r2, #2
 8007e46:	4093      	lsls	r3, r2
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e4e:	4938      	ldr	r1, [pc, #224]	; (8007f30 <HAL_GPIO_Init+0x35c>)
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	089b      	lsrs	r3, r3, #2
 8007e54:	3302      	adds	r3, #2
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	43db      	mvns	r3, r3
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	43db      	mvns	r3, r3
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	43db      	mvns	r3, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f47f ae63 	bne.w	8007be8 <HAL_GPIO_Init+0x14>
  }
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	3724      	adds	r7, #36	; 0x24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	58000400 	.word	0x58000400

08007f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	887b      	ldrh	r3, [r7, #2]
 8007f46:	4013      	ands	r3, r2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	73fb      	strb	r3, [r7, #15]
 8007f50:	e001      	b.n	8007f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	807b      	strh	r3, [r7, #2]
 8007f70:	4613      	mov	r3, r2
 8007f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f74:	787b      	ldrb	r3, [r7, #1]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f7a:	887a      	ldrh	r2, [r7, #2]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f80:	e003      	b.n	8007f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f82:	887b      	ldrh	r3, [r7, #2]
 8007f84:	041a      	lsls	r2, r3, #16
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	619a      	str	r2, [r3, #24]
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b085      	sub	sp, #20
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007fa8:	887a      	ldrh	r2, [r7, #2]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4013      	ands	r3, r2
 8007fae:	041a      	lsls	r2, r3, #16
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	43d9      	mvns	r1, r3
 8007fb4:	887b      	ldrh	r3, [r7, #2]
 8007fb6:	400b      	ands	r3, r1
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	619a      	str	r2, [r3, #24]
}
 8007fbe:	bf00      	nop
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
	...

08007fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e07f      	b.n	80080de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7fa fd32 	bl	8002a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2224      	movs	r2, #36	; 0x24
 8007ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0201 	bic.w	r2, r2, #1
 800800e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800801c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800802c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d107      	bne.n	8008046 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008042:	609a      	str	r2, [r3, #8]
 8008044:	e006      	b.n	8008054 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008052:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d104      	bne.n	8008066 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008064:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6859      	ldr	r1, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <HAL_I2C_Init+0x11c>)
 8008072:	430b      	orrs	r3, r1
 8008074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	69d9      	ldr	r1, [r3, #28]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	02008000 	.word	0x02008000

080080ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	607a      	str	r2, [r7, #4]
 80080f6:	461a      	mov	r2, r3
 80080f8:	460b      	mov	r3, r1
 80080fa:	817b      	strh	r3, [r7, #10]
 80080fc:	4613      	mov	r3, r2
 80080fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b20      	cmp	r3, #32
 800810a:	f040 80da 	bne.w	80082c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_I2C_Master_Transmit+0x30>
 8008118:	2302      	movs	r3, #2
 800811a:	e0d3      	b.n	80082c4 <HAL_I2C_Master_Transmit+0x1d8>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008124:	f7fc fdce 	bl	8004cc4 <HAL_GetTick>
 8008128:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	2319      	movs	r3, #25
 8008130:	2201      	movs	r2, #1
 8008132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fb7c 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e0be      	b.n	80082c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2221      	movs	r2, #33	; 0x21
 800814a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2210      	movs	r2, #16
 8008152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	893a      	ldrh	r2, [r7, #8]
 8008166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008172:	b29b      	uxth	r3, r3
 8008174:	2bff      	cmp	r3, #255	; 0xff
 8008176:	d90e      	bls.n	8008196 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	22ff      	movs	r2, #255	; 0xff
 800817c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008182:	b2da      	uxtb	r2, r3
 8008184:	8979      	ldrh	r1, [r7, #10]
 8008186:	4b51      	ldr	r3, [pc, #324]	; (80082cc <HAL_I2C_Master_Transmit+0x1e0>)
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 fd72 	bl	8008c78 <I2C_TransferConfig>
 8008194:	e06c      	b.n	8008270 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819a:	b29a      	uxth	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	8979      	ldrh	r1, [r7, #10]
 80081a8:	4b48      	ldr	r3, [pc, #288]	; (80082cc <HAL_I2C_Master_Transmit+0x1e0>)
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 fd61 	bl	8008c78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80081b6:	e05b      	b.n	8008270 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	6a39      	ldr	r1, [r7, #32]
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 fb79 	bl	80088b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e07b      	b.n	80082c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	3b01      	subs	r3, #1
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f4:	3b01      	subs	r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008200:	b29b      	uxth	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d034      	beq.n	8008270 <HAL_I2C_Master_Transmit+0x184>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820a:	2b00      	cmp	r3, #0
 800820c:	d130      	bne.n	8008270 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	2200      	movs	r2, #0
 8008216:	2180      	movs	r1, #128	; 0x80
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 fb0b 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e04d      	b.n	80082c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800822c:	b29b      	uxth	r3, r3
 800822e:	2bff      	cmp	r3, #255	; 0xff
 8008230:	d90e      	bls.n	8008250 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	22ff      	movs	r2, #255	; 0xff
 8008236:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823c:	b2da      	uxtb	r2, r3
 800823e:	8979      	ldrh	r1, [r7, #10]
 8008240:	2300      	movs	r3, #0
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 fd15 	bl	8008c78 <I2C_TransferConfig>
 800824e:	e00f      	b.n	8008270 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825e:	b2da      	uxtb	r2, r3
 8008260:	8979      	ldrh	r1, [r7, #10]
 8008262:	2300      	movs	r3, #0
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 fd04 	bl	8008c78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d19e      	bne.n	80081b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	6a39      	ldr	r1, [r7, #32]
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fb58 	bl	8008934 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e01a      	b.n	80082c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2220      	movs	r2, #32
 8008294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6859      	ldr	r1, [r3, #4]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80082a2:	400b      	ands	r3, r1
 80082a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	e000      	b.n	80082c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80082c2:	2302      	movs	r3, #2
  }
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	80002000 	.word	0x80002000
 80082d0:	fe00e800 	.word	0xfe00e800

080082d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	461a      	mov	r2, r3
 80082e0:	460b      	mov	r3, r1
 80082e2:	817b      	strh	r3, [r7, #10]
 80082e4:	4613      	mov	r3, r2
 80082e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	f040 80db 	bne.w	80084ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d101      	bne.n	8008304 <HAL_I2C_Master_Receive+0x30>
 8008300:	2302      	movs	r3, #2
 8008302:	e0d4      	b.n	80084ae <HAL_I2C_Master_Receive+0x1da>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800830c:	f7fc fcda 	bl	8004cc4 <HAL_GetTick>
 8008310:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	2319      	movs	r3, #25
 8008318:	2201      	movs	r2, #1
 800831a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fa88 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e0bf      	b.n	80084ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2222      	movs	r2, #34	; 0x22
 8008332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2210      	movs	r2, #16
 800833a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	893a      	ldrh	r2, [r7, #8]
 800834e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835a:	b29b      	uxth	r3, r3
 800835c:	2bff      	cmp	r3, #255	; 0xff
 800835e:	d90e      	bls.n	800837e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	22ff      	movs	r2, #255	; 0xff
 8008364:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800836a:	b2da      	uxtb	r2, r3
 800836c:	8979      	ldrh	r1, [r7, #10]
 800836e:	4b52      	ldr	r3, [pc, #328]	; (80084b8 <HAL_I2C_Master_Receive+0x1e4>)
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fc7e 	bl	8008c78 <I2C_TransferConfig>
 800837c:	e06d      	b.n	800845a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838c:	b2da      	uxtb	r2, r3
 800838e:	8979      	ldrh	r1, [r7, #10]
 8008390:	4b49      	ldr	r3, [pc, #292]	; (80084b8 <HAL_I2C_Master_Receive+0x1e4>)
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fc6d 	bl	8008c78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800839e:	e05c      	b.n	800845a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	6a39      	ldr	r1, [r7, #32]
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fb01 	bl	80089ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e07c      	b.n	80084ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	b2d2      	uxtb	r2, r2
 80083c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d034      	beq.n	800845a <HAL_I2C_Master_Receive+0x186>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d130      	bne.n	800845a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	2200      	movs	r2, #0
 8008400:	2180      	movs	r1, #128	; 0x80
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 fa16 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e04d      	b.n	80084ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008416:	b29b      	uxth	r3, r3
 8008418:	2bff      	cmp	r3, #255	; 0xff
 800841a:	d90e      	bls.n	800843a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	22ff      	movs	r2, #255	; 0xff
 8008420:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008426:	b2da      	uxtb	r2, r3
 8008428:	8979      	ldrh	r1, [r7, #10]
 800842a:	2300      	movs	r3, #0
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 fc20 	bl	8008c78 <I2C_TransferConfig>
 8008438:	e00f      	b.n	800845a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843e:	b29a      	uxth	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008448:	b2da      	uxtb	r2, r3
 800844a:	8979      	ldrh	r1, [r7, #10]
 800844c:	2300      	movs	r3, #0
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 fc0f 	bl	8008c78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d19d      	bne.n	80083a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	6a39      	ldr	r1, [r7, #32]
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fa63 	bl	8008934 <I2C_WaitOnSTOPFlagUntilTimeout>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e01a      	b.n	80084ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2220      	movs	r2, #32
 800847e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6859      	ldr	r1, [r3, #4]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <HAL_I2C_Master_Receive+0x1e8>)
 800848c:	400b      	ands	r3, r1
 800848e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e000      	b.n	80084ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80084ac:	2302      	movs	r3, #2
  }
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	80002400 	.word	0x80002400
 80084bc:	fe00e800 	.word	0xfe00e800

080084c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	4608      	mov	r0, r1
 80084ca:	4611      	mov	r1, r2
 80084cc:	461a      	mov	r2, r3
 80084ce:	4603      	mov	r3, r0
 80084d0:	817b      	strh	r3, [r7, #10]
 80084d2:	460b      	mov	r3, r1
 80084d4:	813b      	strh	r3, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	f040 80fd 	bne.w	80086e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <HAL_I2C_Mem_Read+0x34>
 80084ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d105      	bne.n	8008500 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e0f1      	b.n	80086e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_I2C_Mem_Read+0x4e>
 800850a:	2302      	movs	r3, #2
 800850c:	e0ea      	b.n	80086e4 <HAL_I2C_Mem_Read+0x224>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008516:	f7fc fbd5 	bl	8004cc4 <HAL_GetTick>
 800851a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	2319      	movs	r3, #25
 8008522:	2201      	movs	r2, #1
 8008524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f983 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e0d5      	b.n	80086e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2222      	movs	r2, #34	; 0x22
 800853c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2240      	movs	r2, #64	; 0x40
 8008544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a3a      	ldr	r2, [r7, #32]
 8008552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008558:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008560:	88f8      	ldrh	r0, [r7, #6]
 8008562:	893a      	ldrh	r2, [r7, #8]
 8008564:	8979      	ldrh	r1, [r7, #10]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	4603      	mov	r3, r0
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 f8e7 	bl	8008744 <I2C_RequestMemoryRead>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e0ad      	b.n	80086e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858c:	b29b      	uxth	r3, r3
 800858e:	2bff      	cmp	r3, #255	; 0xff
 8008590:	d90e      	bls.n	80085b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	22ff      	movs	r2, #255	; 0xff
 8008596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859c:	b2da      	uxtb	r2, r3
 800859e:	8979      	ldrh	r1, [r7, #10]
 80085a0:	4b52      	ldr	r3, [pc, #328]	; (80086ec <HAL_I2C_Mem_Read+0x22c>)
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fb65 	bl	8008c78 <I2C_TransferConfig>
 80085ae:	e00f      	b.n	80085d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	8979      	ldrh	r1, [r7, #10]
 80085c2:	4b4a      	ldr	r3, [pc, #296]	; (80086ec <HAL_I2C_Mem_Read+0x22c>)
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fb54 	bl	8008c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	2200      	movs	r2, #0
 80085d8:	2104      	movs	r1, #4
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f92a 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e07c      	b.n	80086e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	b2d2      	uxtb	r2, r2
 80085f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008606:	3b01      	subs	r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008612:	b29b      	uxth	r3, r3
 8008614:	3b01      	subs	r3, #1
 8008616:	b29a      	uxth	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d034      	beq.n	8008690 <HAL_I2C_Mem_Read+0x1d0>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800862a:	2b00      	cmp	r3, #0
 800862c:	d130      	bne.n	8008690 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	2200      	movs	r2, #0
 8008636:	2180      	movs	r1, #128	; 0x80
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 f8fb 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e04d      	b.n	80086e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864c:	b29b      	uxth	r3, r3
 800864e:	2bff      	cmp	r3, #255	; 0xff
 8008650:	d90e      	bls.n	8008670 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	22ff      	movs	r2, #255	; 0xff
 8008656:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800865c:	b2da      	uxtb	r2, r3
 800865e:	8979      	ldrh	r1, [r7, #10]
 8008660:	2300      	movs	r3, #0
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 fb05 	bl	8008c78 <I2C_TransferConfig>
 800866e:	e00f      	b.n	8008690 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800867e:	b2da      	uxtb	r2, r3
 8008680:	8979      	ldrh	r1, [r7, #10]
 8008682:	2300      	movs	r3, #0
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 faf4 	bl	8008c78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008694:	b29b      	uxth	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d19a      	bne.n	80085d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 f948 	bl	8008934 <I2C_WaitOnSTOPFlagUntilTimeout>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e01a      	b.n	80086e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2220      	movs	r2, #32
 80086b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6859      	ldr	r1, [r3, #4]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <HAL_I2C_Mem_Read+0x230>)
 80086c2:	400b      	ands	r3, r1
 80086c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	e000      	b.n	80086e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80086e2:	2302      	movs	r3, #2
  }
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	80002400 	.word	0x80002400
 80086f0:	fe00e800 	.word	0xfe00e800

080086f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	4798      	blx	r3
  }
}
 8008720:	bf00      	nop
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008736:	b2db      	uxtb	r3, r3
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af02      	add	r7, sp, #8
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	461a      	mov	r2, r3
 8008752:	4603      	mov	r3, r0
 8008754:	817b      	strh	r3, [r7, #10]
 8008756:	460b      	mov	r3, r1
 8008758:	813b      	strh	r3, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800875e:	88fb      	ldrh	r3, [r7, #6]
 8008760:	b2da      	uxtb	r2, r3
 8008762:	8979      	ldrh	r1, [r7, #10]
 8008764:	4b20      	ldr	r3, [pc, #128]	; (80087e8 <I2C_RequestMemoryRead+0xa4>)
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	2300      	movs	r3, #0
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fa84 	bl	8008c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008770:	69fa      	ldr	r2, [r7, #28]
 8008772:	69b9      	ldr	r1, [r7, #24]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f89d 	bl	80088b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e02c      	b.n	80087de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008784:	88fb      	ldrh	r3, [r7, #6]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d105      	bne.n	8008796 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800878a:	893b      	ldrh	r3, [r7, #8]
 800878c:	b2da      	uxtb	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	629a      	str	r2, [r3, #40]	; 0x28
 8008794:	e015      	b.n	80087c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008796:	893b      	ldrh	r3, [r7, #8]
 8008798:	0a1b      	lsrs	r3, r3, #8
 800879a:	b29b      	uxth	r3, r3
 800879c:	b2da      	uxtb	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	69b9      	ldr	r1, [r7, #24]
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 f883 	bl	80088b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e012      	b.n	80087de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087b8:	893b      	ldrh	r3, [r7, #8]
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2200      	movs	r2, #0
 80087ca:	2140      	movs	r1, #64	; 0x40
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 f831 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	80002000 	.word	0x80002000

080087ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d103      	bne.n	800880a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2200      	movs	r2, #0
 8008808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b01      	cmp	r3, #1
 8008816:	d007      	beq.n	8008828 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0201 	orr.w	r2, r2, #1
 8008826:	619a      	str	r2, [r3, #24]
  }
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	4613      	mov	r3, r2
 8008842:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008844:	e022      	b.n	800888c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800884c:	d01e      	beq.n	800888c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800884e:	f7fc fa39 	bl	8004cc4 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d302      	bcc.n	8008864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d113      	bne.n	800888c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008868:	f043 0220 	orr.w	r2, r3, #32
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e00f      	b.n	80088ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	4013      	ands	r3, r2
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	429a      	cmp	r2, r3
 800889a:	bf0c      	ite	eq
 800889c:	2301      	moveq	r3, #1
 800889e:	2300      	movne	r3, #0
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d0cd      	beq.n	8008846 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088c0:	e02c      	b.n	800891c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 f8ea 	bl	8008aa0 <I2C_IsErrorOccurred>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e02a      	b.n	800892c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088dc:	d01e      	beq.n	800891c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088de:	f7fc f9f1 	bl	8004cc4 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d302      	bcc.n	80088f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d113      	bne.n	800891c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f8:	f043 0220 	orr.w	r2, r3, #32
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e007      	b.n	800892c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b02      	cmp	r3, #2
 8008928:	d1cb      	bne.n	80088c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008940:	e028      	b.n	8008994 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 f8aa 	bl	8008aa0 <I2C_IsErrorOccurred>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e026      	b.n	80089a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008956:	f7fc f9b5 	bl	8004cc4 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	429a      	cmp	r2, r3
 8008964:	d302      	bcc.n	800896c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d113      	bne.n	8008994 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008970:	f043 0220 	orr.w	r2, r3, #32
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e007      	b.n	80089a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b20      	cmp	r3, #32
 80089a0:	d1cf      	bne.n	8008942 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089b8:	e064      	b.n	8008a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 f86e 	bl	8008aa0 <I2C_IsErrorOccurred>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e062      	b.n	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	f003 0320 	and.w	r3, r3, #32
 80089d8:	2b20      	cmp	r3, #32
 80089da:	d138      	bne.n	8008a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d105      	bne.n	80089f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e04e      	b.n	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b10      	cmp	r3, #16
 8008a02:	d107      	bne.n	8008a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2210      	movs	r2, #16
 8008a0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2204      	movs	r2, #4
 8008a10:	645a      	str	r2, [r3, #68]	; 0x44
 8008a12:	e002      	b.n	8008a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6859      	ldr	r1, [r3, #4]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	; (8008a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8008a2e:	400b      	ands	r3, r1
 8008a30:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e022      	b.n	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a4e:	f7fc f939 	bl	8004cc4 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d302      	bcc.n	8008a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10f      	bne.n	8008a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a68:	f043 0220 	orr.w	r2, r3, #32
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2220      	movs	r2, #32
 8008a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e007      	b.n	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d193      	bne.n	80089ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	fe00e800 	.word	0xfe00e800

08008aa0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	; 0x28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	f003 0310 	and.w	r3, r3, #16
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d075      	beq.n	8008bb8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2210      	movs	r2, #16
 8008ad2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ad4:	e056      	b.n	8008b84 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008adc:	d052      	beq.n	8008b84 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ade:	f7fc f8f1 	bl	8004cc4 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d302      	bcc.n	8008af4 <I2C_IsErrorOccurred+0x54>
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d147      	bne.n	8008b84 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008afe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b16:	d12e      	bne.n	8008b76 <I2C_IsErrorOccurred+0xd6>
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b1e:	d02a      	beq.n	8008b76 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008b20:	7cfb      	ldrb	r3, [r7, #19]
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d027      	beq.n	8008b76 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b34:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008b36:	f7fc f8c5 	bl	8004cc4 <HAL_GetTick>
 8008b3a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b3c:	e01b      	b.n	8008b76 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008b3e:	f7fc f8c1 	bl	8004cc4 <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	2b19      	cmp	r3, #25
 8008b4a:	d914      	bls.n	8008b76 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b50:	f043 0220 	orr.w	r2, r3, #32
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d1dc      	bne.n	8008b3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d003      	beq.n	8008b9a <I2C_IsErrorOccurred+0xfa>
 8008b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d09d      	beq.n	8008ad6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d103      	bne.n	8008baa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	f043 0304 	orr.w	r3, r3, #4
 8008bb0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00b      	beq.n	8008be2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	f043 0301 	orr.w	r3, r3, #1
 8008bd0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00b      	beq.n	8008c04 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	f043 0308 	orr.w	r3, r3, #8
 8008bf2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00b      	beq.n	8008c26 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	f043 0302 	orr.w	r3, r3, #2
 8008c14:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01c      	beq.n	8008c68 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff fddc 	bl	80087ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6859      	ldr	r1, [r3, #4]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <I2C_IsErrorOccurred+0x1d4>)
 8008c40:	400b      	ands	r3, r1
 8008c42:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3728      	adds	r7, #40	; 0x28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	fe00e800 	.word	0xfe00e800

08008c78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	607b      	str	r3, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	817b      	strh	r3, [r7, #10]
 8008c86:	4613      	mov	r3, r2
 8008c88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c8a:	897b      	ldrh	r3, [r7, #10]
 8008c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c90:	7a7b      	ldrb	r3, [r7, #9]
 8008c92:	041b      	lsls	r3, r3, #16
 8008c94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c98:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ca6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	0d5b      	lsrs	r3, r3, #21
 8008cb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008cb6:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <I2C_TransferConfig+0x60>)
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	ea02 0103 	and.w	r1, r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008cca:	bf00      	nop
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	03ff63ff 	.word	0x03ff63ff

08008cdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b20      	cmp	r3, #32
 8008cf0:	d138      	bne.n	8008d64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e032      	b.n	8008d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2224      	movs	r2, #36	; 0x24
 8008d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0201 	bic.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6819      	ldr	r1, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0201 	orr.w	r2, r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2220      	movs	r2, #32
 8008d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	e000      	b.n	8008d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d64:	2302      	movs	r3, #2
  }
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b20      	cmp	r3, #32
 8008d86:	d139      	bne.n	8008dfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d101      	bne.n	8008d96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d92:	2302      	movs	r3, #2
 8008d94:	e033      	b.n	8008dfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2224      	movs	r2, #36	; 0x24
 8008da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0201 	bic.w	r2, r2, #1
 8008db4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008dc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0201 	orr.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e000      	b.n	8008dfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008dfc:	2302      	movs	r3, #2
  }
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
	...

08008e0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e14:	4b19      	ldr	r3, [pc, #100]	; (8008e7c <HAL_PWREx_ConfigSupply+0x70>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d00a      	beq.n	8008e36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e20:	4b16      	ldr	r3, [pc, #88]	; (8008e7c <HAL_PWREx_ConfigSupply+0x70>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d001      	beq.n	8008e32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e01f      	b.n	8008e72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e01d      	b.n	8008e72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e36:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <HAL_PWREx_ConfigSupply+0x70>)
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f023 0207 	bic.w	r2, r3, #7
 8008e3e:	490f      	ldr	r1, [pc, #60]	; (8008e7c <HAL_PWREx_ConfigSupply+0x70>)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e46:	f7fb ff3d 	bl	8004cc4 <HAL_GetTick>
 8008e4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e4c:	e009      	b.n	8008e62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e4e:	f7fb ff39 	bl	8004cc4 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e5c:	d901      	bls.n	8008e62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e007      	b.n	8008e72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e62:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <HAL_PWREx_ConfigSupply+0x70>)
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e6e:	d1ee      	bne.n	8008e4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	58024800 	.word	0x58024800

08008e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08c      	sub	sp, #48	; 0x30
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d102      	bne.n	8008e94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f000 bc1d 	b.w	80096ce <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 8087 	beq.w	8008fb0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ea2:	4b99      	ldr	r3, [pc, #612]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008eac:	4b96      	ldr	r3, [pc, #600]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	2b10      	cmp	r3, #16
 8008eb6:	d007      	beq.n	8008ec8 <HAL_RCC_OscConfig+0x48>
 8008eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eba:	2b18      	cmp	r3, #24
 8008ebc:	d110      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x60>
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d10b      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ec8:	4b8f      	ldr	r3, [pc, #572]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d06c      	beq.n	8008fae <HAL_RCC_OscConfig+0x12e>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d168      	bne.n	8008fae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e3f6      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee8:	d106      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x78>
 8008eea:	4b87      	ldr	r3, [pc, #540]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a86      	ldr	r2, [pc, #536]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	e02e      	b.n	8008f56 <HAL_RCC_OscConfig+0xd6>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10c      	bne.n	8008f1a <HAL_RCC_OscConfig+0x9a>
 8008f00:	4b81      	ldr	r3, [pc, #516]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a80      	ldr	r2, [pc, #512]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	4b7e      	ldr	r3, [pc, #504]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a7d      	ldr	r2, [pc, #500]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	e01d      	b.n	8008f56 <HAL_RCC_OscConfig+0xd6>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f22:	d10c      	bne.n	8008f3e <HAL_RCC_OscConfig+0xbe>
 8008f24:	4b78      	ldr	r3, [pc, #480]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a77      	ldr	r2, [pc, #476]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	4b75      	ldr	r3, [pc, #468]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a74      	ldr	r2, [pc, #464]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	e00b      	b.n	8008f56 <HAL_RCC_OscConfig+0xd6>
 8008f3e:	4b72      	ldr	r3, [pc, #456]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a71      	ldr	r2, [pc, #452]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	4b6f      	ldr	r3, [pc, #444]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a6e      	ldr	r2, [pc, #440]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d013      	beq.n	8008f86 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f5e:	f7fb feb1 	bl	8004cc4 <HAL_GetTick>
 8008f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f64:	e008      	b.n	8008f78 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f66:	f7fb fead 	bl	8004cc4 <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b64      	cmp	r3, #100	; 0x64
 8008f72:	d901      	bls.n	8008f78 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e3aa      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f78:	4b63      	ldr	r3, [pc, #396]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0f0      	beq.n	8008f66 <HAL_RCC_OscConfig+0xe6>
 8008f84:	e014      	b.n	8008fb0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f86:	f7fb fe9d 	bl	8004cc4 <HAL_GetTick>
 8008f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f8c:	e008      	b.n	8008fa0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f8e:	f7fb fe99 	bl	8004cc4 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b64      	cmp	r3, #100	; 0x64
 8008f9a:	d901      	bls.n	8008fa0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e396      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fa0:	4b59      	ldr	r3, [pc, #356]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1f0      	bne.n	8008f8e <HAL_RCC_OscConfig+0x10e>
 8008fac:	e000      	b.n	8008fb0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 80cb 	beq.w	8009154 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fbe:	4b52      	ldr	r3, [pc, #328]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fc6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fc8:	4b4f      	ldr	r3, [pc, #316]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d007      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x164>
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	2b18      	cmp	r3, #24
 8008fd8:	d156      	bne.n	8009088 <HAL_RCC_OscConfig+0x208>
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d151      	bne.n	8009088 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fe4:	4b48      	ldr	r3, [pc, #288]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <HAL_RCC_OscConfig+0x17c>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e368      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ffc:	4b42      	ldr	r3, [pc, #264]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f023 0219 	bic.w	r2, r3, #25
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	493f      	ldr	r1, [pc, #252]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 800900a:	4313      	orrs	r3, r2
 800900c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800900e:	f7fb fe59 	bl	8004cc4 <HAL_GetTick>
 8009012:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009014:	e008      	b.n	8009028 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009016:	f7fb fe55 	bl	8004cc4 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d901      	bls.n	8009028 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e352      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009028:	4b37      	ldr	r3, [pc, #220]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0f0      	beq.n	8009016 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009034:	f7fb fe76 	bl	8004d24 <HAL_GetREVID>
 8009038:	4603      	mov	r3, r0
 800903a:	f241 0203 	movw	r2, #4099	; 0x1003
 800903e:	4293      	cmp	r3, r2
 8009040:	d817      	bhi.n	8009072 <HAL_RCC_OscConfig+0x1f2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b40      	cmp	r3, #64	; 0x40
 8009048:	d108      	bne.n	800905c <HAL_RCC_OscConfig+0x1dc>
 800904a:	4b2f      	ldr	r3, [pc, #188]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009052:	4a2d      	ldr	r2, [pc, #180]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8009054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009058:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800905a:	e07b      	b.n	8009154 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800905c:	4b2a      	ldr	r3, [pc, #168]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	031b      	lsls	r3, r3, #12
 800906a:	4927      	ldr	r1, [pc, #156]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 800906c:	4313      	orrs	r3, r2
 800906e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009070:	e070      	b.n	8009154 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009072:	4b25      	ldr	r3, [pc, #148]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	061b      	lsls	r3, r3, #24
 8009080:	4921      	ldr	r1, [pc, #132]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8009082:	4313      	orrs	r3, r2
 8009084:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009086:	e065      	b.n	8009154 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d048      	beq.n	8009122 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009090:	4b1d      	ldr	r3, [pc, #116]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f023 0219 	bic.w	r2, r3, #25
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	491a      	ldr	r1, [pc, #104]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a2:	f7fb fe0f 	bl	8004cc4 <HAL_GetTick>
 80090a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090a8:	e008      	b.n	80090bc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090aa:	f7fb fe0b 	bl	8004cc4 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d901      	bls.n	80090bc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e308      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090bc:	4b12      	ldr	r3, [pc, #72]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0304 	and.w	r3, r3, #4
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d0f0      	beq.n	80090aa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090c8:	f7fb fe2c 	bl	8004d24 <HAL_GetREVID>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d81a      	bhi.n	800910c <HAL_RCC_OscConfig+0x28c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b40      	cmp	r3, #64	; 0x40
 80090dc:	d108      	bne.n	80090f0 <HAL_RCC_OscConfig+0x270>
 80090de:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80090e6:	4a08      	ldr	r2, [pc, #32]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 80090e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ec:	6053      	str	r3, [r2, #4]
 80090ee:	e031      	b.n	8009154 <HAL_RCC_OscConfig+0x2d4>
 80090f0:	4b05      	ldr	r3, [pc, #20]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	031b      	lsls	r3, r3, #12
 80090fe:	4902      	ldr	r1, [pc, #8]	; (8009108 <HAL_RCC_OscConfig+0x288>)
 8009100:	4313      	orrs	r3, r2
 8009102:	604b      	str	r3, [r1, #4]
 8009104:	e026      	b.n	8009154 <HAL_RCC_OscConfig+0x2d4>
 8009106:	bf00      	nop
 8009108:	58024400 	.word	0x58024400
 800910c:	4b9a      	ldr	r3, [pc, #616]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	061b      	lsls	r3, r3, #24
 800911a:	4997      	ldr	r1, [pc, #604]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 800911c:	4313      	orrs	r3, r2
 800911e:	604b      	str	r3, [r1, #4]
 8009120:	e018      	b.n	8009154 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009122:	4b95      	ldr	r3, [pc, #596]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a94      	ldr	r2, [pc, #592]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009128:	f023 0301 	bic.w	r3, r3, #1
 800912c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800912e:	f7fb fdc9 	bl	8004cc4 <HAL_GetTick>
 8009132:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009134:	e008      	b.n	8009148 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009136:	f7fb fdc5 	bl	8004cc4 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e2c2      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009148:	4b8b      	ldr	r3, [pc, #556]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1f0      	bne.n	8009136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 80a9 	beq.w	80092b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009162:	4b85      	ldr	r3, [pc, #532]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800916a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800916c:	4b82      	ldr	r3, [pc, #520]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	2b08      	cmp	r3, #8
 8009176:	d007      	beq.n	8009188 <HAL_RCC_OscConfig+0x308>
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	2b18      	cmp	r3, #24
 800917c:	d13a      	bne.n	80091f4 <HAL_RCC_OscConfig+0x374>
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f003 0303 	and.w	r3, r3, #3
 8009184:	2b01      	cmp	r3, #1
 8009186:	d135      	bne.n	80091f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009188:	4b7b      	ldr	r3, [pc, #492]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <HAL_RCC_OscConfig+0x320>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	2b80      	cmp	r3, #128	; 0x80
 800919a:	d001      	beq.n	80091a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e296      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091a0:	f7fb fdc0 	bl	8004d24 <HAL_GetREVID>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d817      	bhi.n	80091de <HAL_RCC_OscConfig+0x35e>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d108      	bne.n	80091c8 <HAL_RCC_OscConfig+0x348>
 80091b6:	4b70      	ldr	r3, [pc, #448]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80091be:	4a6e      	ldr	r2, [pc, #440]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80091c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091c6:	e075      	b.n	80092b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091c8:	4b6b      	ldr	r3, [pc, #428]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	069b      	lsls	r3, r3, #26
 80091d6:	4968      	ldr	r1, [pc, #416]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091dc:	e06a      	b.n	80092b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091de:	4b66      	ldr	r3, [pc, #408]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	061b      	lsls	r3, r3, #24
 80091ec:	4962      	ldr	r1, [pc, #392]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091f2:	e05f      	b.n	80092b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d042      	beq.n	8009282 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80091fc:	4b5e      	ldr	r3, [pc, #376]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a5d      	ldr	r2, [pc, #372]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009208:	f7fb fd5c 	bl	8004cc4 <HAL_GetTick>
 800920c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800920e:	e008      	b.n	8009222 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009210:	f7fb fd58 	bl	8004cc4 <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	2b02      	cmp	r3, #2
 800921c:	d901      	bls.n	8009222 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800921e:	2303      	movs	r3, #3
 8009220:	e255      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009222:	4b55      	ldr	r3, [pc, #340]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0f0      	beq.n	8009210 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800922e:	f7fb fd79 	bl	8004d24 <HAL_GetREVID>
 8009232:	4603      	mov	r3, r0
 8009234:	f241 0203 	movw	r2, #4099	; 0x1003
 8009238:	4293      	cmp	r3, r2
 800923a:	d817      	bhi.n	800926c <HAL_RCC_OscConfig+0x3ec>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	2b20      	cmp	r3, #32
 8009242:	d108      	bne.n	8009256 <HAL_RCC_OscConfig+0x3d6>
 8009244:	4b4c      	ldr	r3, [pc, #304]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800924c:	4a4a      	ldr	r2, [pc, #296]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 800924e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009252:	6053      	str	r3, [r2, #4]
 8009254:	e02e      	b.n	80092b4 <HAL_RCC_OscConfig+0x434>
 8009256:	4b48      	ldr	r3, [pc, #288]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	069b      	lsls	r3, r3, #26
 8009264:	4944      	ldr	r1, [pc, #272]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009266:	4313      	orrs	r3, r2
 8009268:	604b      	str	r3, [r1, #4]
 800926a:	e023      	b.n	80092b4 <HAL_RCC_OscConfig+0x434>
 800926c:	4b42      	ldr	r3, [pc, #264]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	061b      	lsls	r3, r3, #24
 800927a:	493f      	ldr	r1, [pc, #252]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 800927c:	4313      	orrs	r3, r2
 800927e:	60cb      	str	r3, [r1, #12]
 8009280:	e018      	b.n	80092b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009282:	4b3d      	ldr	r3, [pc, #244]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a3c      	ldr	r2, [pc, #240]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800928c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800928e:	f7fb fd19 	bl	8004cc4 <HAL_GetTick>
 8009292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009294:	e008      	b.n	80092a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009296:	f7fb fd15 	bl	8004cc4 <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d901      	bls.n	80092a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e212      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092a8:	4b33      	ldr	r3, [pc, #204]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f0      	bne.n	8009296 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d036      	beq.n	800932e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d019      	beq.n	80092fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092c8:	4b2b      	ldr	r3, [pc, #172]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80092ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092cc:	4a2a      	ldr	r2, [pc, #168]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092d4:	f7fb fcf6 	bl	8004cc4 <HAL_GetTick>
 80092d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092dc:	f7fb fcf2 	bl	8004cc4 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e1ef      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092ee:	4b22      	ldr	r3, [pc, #136]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80092f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <HAL_RCC_OscConfig+0x45c>
 80092fa:	e018      	b.n	800932e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092fc:	4b1e      	ldr	r3, [pc, #120]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 80092fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009300:	4a1d      	ldr	r2, [pc, #116]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009302:	f023 0301 	bic.w	r3, r3, #1
 8009306:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009308:	f7fb fcdc 	bl	8004cc4 <HAL_GetTick>
 800930c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800930e:	e008      	b.n	8009322 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009310:	f7fb fcd8 	bl	8004cc4 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b02      	cmp	r3, #2
 800931c:	d901      	bls.n	8009322 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e1d5      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1f0      	bne.n	8009310 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d039      	beq.n	80093ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d01c      	beq.n	800937c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a0c      	ldr	r2, [pc, #48]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 8009348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800934c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800934e:	f7fb fcb9 	bl	8004cc4 <HAL_GetTick>
 8009352:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009354:	e008      	b.n	8009368 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009356:	f7fb fcb5 	bl	8004cc4 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	2b02      	cmp	r3, #2
 8009362:	d901      	bls.n	8009368 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e1b2      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009368:	4b03      	ldr	r3, [pc, #12]	; (8009378 <HAL_RCC_OscConfig+0x4f8>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0f0      	beq.n	8009356 <HAL_RCC_OscConfig+0x4d6>
 8009374:	e01b      	b.n	80093ae <HAL_RCC_OscConfig+0x52e>
 8009376:	bf00      	nop
 8009378:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800937c:	4b9b      	ldr	r3, [pc, #620]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a9a      	ldr	r2, [pc, #616]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009386:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009388:	f7fb fc9c 	bl	8004cc4 <HAL_GetTick>
 800938c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800938e:	e008      	b.n	80093a2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009390:	f7fb fc98 	bl	8004cc4 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e195      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093a2:	4b92      	ldr	r3, [pc, #584]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1f0      	bne.n	8009390 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0304 	and.w	r3, r3, #4
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 8081 	beq.w	80094be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80093bc:	4b8c      	ldr	r3, [pc, #560]	; (80095f0 <HAL_RCC_OscConfig+0x770>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a8b      	ldr	r2, [pc, #556]	; (80095f0 <HAL_RCC_OscConfig+0x770>)
 80093c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093c8:	f7fb fc7c 	bl	8004cc4 <HAL_GetTick>
 80093cc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093ce:	e008      	b.n	80093e2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80093d0:	f7fb fc78 	bl	8004cc4 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	2b64      	cmp	r3, #100	; 0x64
 80093dc:	d901      	bls.n	80093e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e175      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093e2:	4b83      	ldr	r3, [pc, #524]	; (80095f0 <HAL_RCC_OscConfig+0x770>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0f0      	beq.n	80093d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d106      	bne.n	8009404 <HAL_RCC_OscConfig+0x584>
 80093f6:	4b7d      	ldr	r3, [pc, #500]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80093f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fa:	4a7c      	ldr	r2, [pc, #496]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80093fc:	f043 0301 	orr.w	r3, r3, #1
 8009400:	6713      	str	r3, [r2, #112]	; 0x70
 8009402:	e02d      	b.n	8009460 <HAL_RCC_OscConfig+0x5e0>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10c      	bne.n	8009426 <HAL_RCC_OscConfig+0x5a6>
 800940c:	4b77      	ldr	r3, [pc, #476]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800940e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009410:	4a76      	ldr	r2, [pc, #472]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009412:	f023 0301 	bic.w	r3, r3, #1
 8009416:	6713      	str	r3, [r2, #112]	; 0x70
 8009418:	4b74      	ldr	r3, [pc, #464]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800941a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941c:	4a73      	ldr	r2, [pc, #460]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800941e:	f023 0304 	bic.w	r3, r3, #4
 8009422:	6713      	str	r3, [r2, #112]	; 0x70
 8009424:	e01c      	b.n	8009460 <HAL_RCC_OscConfig+0x5e0>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2b05      	cmp	r3, #5
 800942c:	d10c      	bne.n	8009448 <HAL_RCC_OscConfig+0x5c8>
 800942e:	4b6f      	ldr	r3, [pc, #444]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009432:	4a6e      	ldr	r2, [pc, #440]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009434:	f043 0304 	orr.w	r3, r3, #4
 8009438:	6713      	str	r3, [r2, #112]	; 0x70
 800943a:	4b6c      	ldr	r3, [pc, #432]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800943c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943e:	4a6b      	ldr	r2, [pc, #428]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009440:	f043 0301 	orr.w	r3, r3, #1
 8009444:	6713      	str	r3, [r2, #112]	; 0x70
 8009446:	e00b      	b.n	8009460 <HAL_RCC_OscConfig+0x5e0>
 8009448:	4b68      	ldr	r3, [pc, #416]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800944a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944c:	4a67      	ldr	r2, [pc, #412]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800944e:	f023 0301 	bic.w	r3, r3, #1
 8009452:	6713      	str	r3, [r2, #112]	; 0x70
 8009454:	4b65      	ldr	r3, [pc, #404]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009458:	4a64      	ldr	r2, [pc, #400]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800945a:	f023 0304 	bic.w	r3, r3, #4
 800945e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d015      	beq.n	8009494 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009468:	f7fb fc2c 	bl	8004cc4 <HAL_GetTick>
 800946c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800946e:	e00a      	b.n	8009486 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009470:	f7fb fc28 	bl	8004cc4 <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	f241 3288 	movw	r2, #5000	; 0x1388
 800947e:	4293      	cmp	r3, r2
 8009480:	d901      	bls.n	8009486 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e123      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009486:	4b59      	ldr	r3, [pc, #356]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0ee      	beq.n	8009470 <HAL_RCC_OscConfig+0x5f0>
 8009492:	e014      	b.n	80094be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009494:	f7fb fc16 	bl	8004cc4 <HAL_GetTick>
 8009498:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800949a:	e00a      	b.n	80094b2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800949c:	f7fb fc12 	bl	8004cc4 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e10d      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094b2:	4b4e      	ldr	r3, [pc, #312]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80094b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1ee      	bne.n	800949c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 8102 	beq.w	80096cc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80094c8:	4b48      	ldr	r3, [pc, #288]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094d0:	2b18      	cmp	r3, #24
 80094d2:	f000 80bd 	beq.w	8009650 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	2b02      	cmp	r3, #2
 80094dc:	f040 809e 	bne.w	800961c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094e0:	4b42      	ldr	r3, [pc, #264]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a41      	ldr	r2, [pc, #260]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80094e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ec:	f7fb fbea 	bl	8004cc4 <HAL_GetTick>
 80094f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094f2:	e008      	b.n	8009506 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094f4:	f7fb fbe6 	bl	8004cc4 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d901      	bls.n	8009506 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e0e3      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009506:	4b39      	ldr	r3, [pc, #228]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1f0      	bne.n	80094f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009512:	4b36      	ldr	r3, [pc, #216]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009516:	4b37      	ldr	r3, [pc, #220]	; (80095f4 <HAL_RCC_OscConfig+0x774>)
 8009518:	4013      	ands	r3, r2
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009522:	0112      	lsls	r2, r2, #4
 8009524:	430a      	orrs	r2, r1
 8009526:	4931      	ldr	r1, [pc, #196]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009528:	4313      	orrs	r3, r2
 800952a:	628b      	str	r3, [r1, #40]	; 0x28
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009530:	3b01      	subs	r3, #1
 8009532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953a:	3b01      	subs	r3, #1
 800953c:	025b      	lsls	r3, r3, #9
 800953e:	b29b      	uxth	r3, r3
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	3b01      	subs	r3, #1
 8009548:	041b      	lsls	r3, r3, #16
 800954a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800954e:	431a      	orrs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009554:	3b01      	subs	r3, #1
 8009556:	061b      	lsls	r3, r3, #24
 8009558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800955c:	4923      	ldr	r1, [pc, #140]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800955e:	4313      	orrs	r3, r2
 8009560:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009562:	4b22      	ldr	r3, [pc, #136]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009566:	4a21      	ldr	r2, [pc, #132]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009568:	f023 0301 	bic.w	r3, r3, #1
 800956c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800956e:	4b1f      	ldr	r3, [pc, #124]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009572:	4b21      	ldr	r3, [pc, #132]	; (80095f8 <HAL_RCC_OscConfig+0x778>)
 8009574:	4013      	ands	r3, r2
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800957a:	00d2      	lsls	r2, r2, #3
 800957c:	491b      	ldr	r1, [pc, #108]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 800957e:	4313      	orrs	r3, r2
 8009580:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009582:	4b1a      	ldr	r3, [pc, #104]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	f023 020c 	bic.w	r2, r3, #12
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	4917      	ldr	r1, [pc, #92]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009590:	4313      	orrs	r3, r2
 8009592:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009594:	4b15      	ldr	r3, [pc, #84]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	f023 0202 	bic.w	r2, r3, #2
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a0:	4912      	ldr	r1, [pc, #72]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80095a6:	4b11      	ldr	r3, [pc, #68]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	4a10      	ldr	r2, [pc, #64]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b2:	4b0e      	ldr	r3, [pc, #56]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b6:	4a0d      	ldr	r2, [pc, #52]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80095be:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80095ca:	4b08      	ldr	r3, [pc, #32]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ce:	4a07      	ldr	r2, [pc, #28]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095d0:	f043 0301 	orr.w	r3, r3, #1
 80095d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095d6:	4b05      	ldr	r3, [pc, #20]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a04      	ldr	r2, [pc, #16]	; (80095ec <HAL_RCC_OscConfig+0x76c>)
 80095dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e2:	f7fb fb6f 	bl	8004cc4 <HAL_GetTick>
 80095e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095e8:	e011      	b.n	800960e <HAL_RCC_OscConfig+0x78e>
 80095ea:	bf00      	nop
 80095ec:	58024400 	.word	0x58024400
 80095f0:	58024800 	.word	0x58024800
 80095f4:	fffffc0c 	.word	0xfffffc0c
 80095f8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095fc:	f7fb fb62 	bl	8004cc4 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	2b02      	cmp	r3, #2
 8009608:	d901      	bls.n	800960e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e05f      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800960e:	4b32      	ldr	r3, [pc, #200]	; (80096d8 <HAL_RCC_OscConfig+0x858>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0f0      	beq.n	80095fc <HAL_RCC_OscConfig+0x77c>
 800961a:	e057      	b.n	80096cc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800961c:	4b2e      	ldr	r3, [pc, #184]	; (80096d8 <HAL_RCC_OscConfig+0x858>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a2d      	ldr	r2, [pc, #180]	; (80096d8 <HAL_RCC_OscConfig+0x858>)
 8009622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009628:	f7fb fb4c 	bl	8004cc4 <HAL_GetTick>
 800962c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800962e:	e008      	b.n	8009642 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009630:	f7fb fb48 	bl	8004cc4 <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	2b02      	cmp	r3, #2
 800963c:	d901      	bls.n	8009642 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e045      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009642:	4b25      	ldr	r3, [pc, #148]	; (80096d8 <HAL_RCC_OscConfig+0x858>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1f0      	bne.n	8009630 <HAL_RCC_OscConfig+0x7b0>
 800964e:	e03d      	b.n	80096cc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009650:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <HAL_RCC_OscConfig+0x858>)
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009656:	4b20      	ldr	r3, [pc, #128]	; (80096d8 <HAL_RCC_OscConfig+0x858>)
 8009658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	2b01      	cmp	r3, #1
 8009662:	d031      	beq.n	80096c8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f003 0203 	and.w	r2, r3, #3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800966e:	429a      	cmp	r2, r3
 8009670:	d12a      	bne.n	80096c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	091b      	lsrs	r3, r3, #4
 8009676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800967e:	429a      	cmp	r2, r3
 8009680:	d122      	bne.n	80096c8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800968e:	429a      	cmp	r2, r3
 8009690:	d11a      	bne.n	80096c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	0a5b      	lsrs	r3, r3, #9
 8009696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d111      	bne.n	80096c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	0c1b      	lsrs	r3, r3, #16
 80096a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d108      	bne.n	80096c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	0e1b      	lsrs	r3, r3, #24
 80096ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d001      	beq.n	80096cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e000      	b.n	80096ce <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3730      	adds	r7, #48	; 0x30
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	58024400 	.word	0x58024400

080096dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e19c      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096f0:	4b8a      	ldr	r3, [pc, #552]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 030f 	and.w	r3, r3, #15
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d910      	bls.n	8009720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096fe:	4b87      	ldr	r3, [pc, #540]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f023 020f 	bic.w	r2, r3, #15
 8009706:	4985      	ldr	r1, [pc, #532]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	4313      	orrs	r3, r2
 800970c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800970e:	4b83      	ldr	r3, [pc, #524]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	429a      	cmp	r2, r3
 800971a:	d001      	beq.n	8009720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e184      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	d010      	beq.n	800974e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691a      	ldr	r2, [r3, #16]
 8009730:	4b7b      	ldr	r3, [pc, #492]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009738:	429a      	cmp	r2, r3
 800973a:	d908      	bls.n	800974e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800973c:	4b78      	ldr	r3, [pc, #480]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	4975      	ldr	r1, [pc, #468]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800974a:	4313      	orrs	r3, r2
 800974c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0308 	and.w	r3, r3, #8
 8009756:	2b00      	cmp	r3, #0
 8009758:	d010      	beq.n	800977c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	695a      	ldr	r2, [r3, #20]
 800975e:	4b70      	ldr	r3, [pc, #448]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009766:	429a      	cmp	r2, r3
 8009768:	d908      	bls.n	800977c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800976a:	4b6d      	ldr	r3, [pc, #436]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	496a      	ldr	r1, [pc, #424]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009778:	4313      	orrs	r3, r2
 800977a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b00      	cmp	r3, #0
 8009786:	d010      	beq.n	80097aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	699a      	ldr	r2, [r3, #24]
 800978c:	4b64      	ldr	r3, [pc, #400]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009794:	429a      	cmp	r2, r3
 8009796:	d908      	bls.n	80097aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009798:	4b61      	ldr	r3, [pc, #388]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	495e      	ldr	r1, [pc, #376]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0320 	and.w	r3, r3, #32
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d010      	beq.n	80097d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	69da      	ldr	r2, [r3, #28]
 80097ba:	4b59      	ldr	r3, [pc, #356]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d908      	bls.n	80097d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80097c6:	4b56      	ldr	r3, [pc, #344]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	4953      	ldr	r1, [pc, #332]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d010      	beq.n	8009806 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	4b4d      	ldr	r3, [pc, #308]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d908      	bls.n	8009806 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097f4:	4b4a      	ldr	r3, [pc, #296]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	f023 020f 	bic.w	r2, r3, #15
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	4947      	ldr	r1, [pc, #284]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009802:	4313      	orrs	r3, r2
 8009804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d055      	beq.n	80098be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009812:	4b43      	ldr	r3, [pc, #268]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	4940      	ldr	r1, [pc, #256]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009820:	4313      	orrs	r3, r2
 8009822:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d107      	bne.n	800983c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800982c:	4b3c      	ldr	r3, [pc, #240]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d121      	bne.n	800987c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e0f6      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	2b03      	cmp	r3, #3
 8009842:	d107      	bne.n	8009854 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009844:	4b36      	ldr	r3, [pc, #216]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d115      	bne.n	800987c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e0ea      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d107      	bne.n	800986c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800985c:	4b30      	ldr	r3, [pc, #192]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009864:	2b00      	cmp	r3, #0
 8009866:	d109      	bne.n	800987c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e0de      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800986c:	4b2c      	ldr	r3, [pc, #176]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e0d6      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800987c:	4b28      	ldr	r3, [pc, #160]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f023 0207 	bic.w	r2, r3, #7
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4925      	ldr	r1, [pc, #148]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 800988a:	4313      	orrs	r3, r2
 800988c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800988e:	f7fb fa19 	bl	8004cc4 <HAL_GetTick>
 8009892:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009894:	e00a      	b.n	80098ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009896:	f7fb fa15 	bl	8004cc4 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d901      	bls.n	80098ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e0be      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098ac:	4b1c      	ldr	r3, [pc, #112]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d1eb      	bne.n	8009896 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d010      	beq.n	80098ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	4b14      	ldr	r3, [pc, #80]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f003 030f 	and.w	r3, r3, #15
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d208      	bcs.n	80098ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098da:	4b11      	ldr	r3, [pc, #68]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	f023 020f 	bic.w	r2, r3, #15
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	490e      	ldr	r1, [pc, #56]	; (8009920 <HAL_RCC_ClockConfig+0x244>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80098ec:	4b0b      	ldr	r3, [pc, #44]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 030f 	and.w	r3, r3, #15
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d214      	bcs.n	8009924 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098fa:	4b08      	ldr	r3, [pc, #32]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f023 020f 	bic.w	r2, r3, #15
 8009902:	4906      	ldr	r1, [pc, #24]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	4313      	orrs	r3, r2
 8009908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800990a:	4b04      	ldr	r3, [pc, #16]	; (800991c <HAL_RCC_ClockConfig+0x240>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d005      	beq.n	8009924 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e086      	b.n	8009a2a <HAL_RCC_ClockConfig+0x34e>
 800991c:	52002000 	.word	0x52002000
 8009920:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d010      	beq.n	8009952 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691a      	ldr	r2, [r3, #16]
 8009934:	4b3f      	ldr	r3, [pc, #252]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800993c:	429a      	cmp	r2, r3
 800993e:	d208      	bcs.n	8009952 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009940:	4b3c      	ldr	r3, [pc, #240]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	4939      	ldr	r1, [pc, #228]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 800994e:	4313      	orrs	r3, r2
 8009950:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0308 	and.w	r3, r3, #8
 800995a:	2b00      	cmp	r3, #0
 800995c:	d010      	beq.n	8009980 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	695a      	ldr	r2, [r3, #20]
 8009962:	4b34      	ldr	r3, [pc, #208]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800996a:	429a      	cmp	r2, r3
 800996c:	d208      	bcs.n	8009980 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800996e:	4b31      	ldr	r3, [pc, #196]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	492e      	ldr	r1, [pc, #184]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 800997c:	4313      	orrs	r3, r2
 800997e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0310 	and.w	r3, r3, #16
 8009988:	2b00      	cmp	r3, #0
 800998a:	d010      	beq.n	80099ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699a      	ldr	r2, [r3, #24]
 8009990:	4b28      	ldr	r3, [pc, #160]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009998:	429a      	cmp	r2, r3
 800999a:	d208      	bcs.n	80099ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800999c:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	4922      	ldr	r1, [pc, #136]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	69da      	ldr	r2, [r3, #28]
 80099be:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d208      	bcs.n	80099dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80099ca:	4b1a      	ldr	r3, [pc, #104]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	4917      	ldr	r1, [pc, #92]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80099dc:	f000 f834 	bl	8009a48 <HAL_RCC_GetSysClockFreq>
 80099e0:	4602      	mov	r2, r0
 80099e2:	4b14      	ldr	r3, [pc, #80]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	0a1b      	lsrs	r3, r3, #8
 80099e8:	f003 030f 	and.w	r3, r3, #15
 80099ec:	4912      	ldr	r1, [pc, #72]	; (8009a38 <HAL_RCC_ClockConfig+0x35c>)
 80099ee:	5ccb      	ldrb	r3, [r1, r3]
 80099f0:	f003 031f 	and.w	r3, r3, #31
 80099f4:	fa22 f303 	lsr.w	r3, r2, r3
 80099f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099fa:	4b0e      	ldr	r3, [pc, #56]	; (8009a34 <HAL_RCC_ClockConfig+0x358>)
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	f003 030f 	and.w	r3, r3, #15
 8009a02:	4a0d      	ldr	r2, [pc, #52]	; (8009a38 <HAL_RCC_ClockConfig+0x35c>)
 8009a04:	5cd3      	ldrb	r3, [r2, r3]
 8009a06:	f003 031f 	and.w	r3, r3, #31
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a10:	4a0a      	ldr	r2, [pc, #40]	; (8009a3c <HAL_RCC_ClockConfig+0x360>)
 8009a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a14:	4a0a      	ldr	r2, [pc, #40]	; (8009a40 <HAL_RCC_ClockConfig+0x364>)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <HAL_RCC_ClockConfig+0x368>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fb f906 	bl	8004c30 <HAL_InitTick>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	58024400 	.word	0x58024400
 8009a38:	080116cc 	.word	0x080116cc
 8009a3c:	24000030 	.word	0x24000030
 8009a40:	2400002c 	.word	0x2400002c
 8009a44:	24000034 	.word	0x24000034

08009a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b089      	sub	sp, #36	; 0x24
 8009a4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a4e:	4bb3      	ldr	r3, [pc, #716]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a56:	2b18      	cmp	r3, #24
 8009a58:	f200 8155 	bhi.w	8009d06 <HAL_RCC_GetSysClockFreq+0x2be>
 8009a5c:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a62:	bf00      	nop
 8009a64:	08009ac9 	.word	0x08009ac9
 8009a68:	08009d07 	.word	0x08009d07
 8009a6c:	08009d07 	.word	0x08009d07
 8009a70:	08009d07 	.word	0x08009d07
 8009a74:	08009d07 	.word	0x08009d07
 8009a78:	08009d07 	.word	0x08009d07
 8009a7c:	08009d07 	.word	0x08009d07
 8009a80:	08009d07 	.word	0x08009d07
 8009a84:	08009aef 	.word	0x08009aef
 8009a88:	08009d07 	.word	0x08009d07
 8009a8c:	08009d07 	.word	0x08009d07
 8009a90:	08009d07 	.word	0x08009d07
 8009a94:	08009d07 	.word	0x08009d07
 8009a98:	08009d07 	.word	0x08009d07
 8009a9c:	08009d07 	.word	0x08009d07
 8009aa0:	08009d07 	.word	0x08009d07
 8009aa4:	08009af5 	.word	0x08009af5
 8009aa8:	08009d07 	.word	0x08009d07
 8009aac:	08009d07 	.word	0x08009d07
 8009ab0:	08009d07 	.word	0x08009d07
 8009ab4:	08009d07 	.word	0x08009d07
 8009ab8:	08009d07 	.word	0x08009d07
 8009abc:	08009d07 	.word	0x08009d07
 8009ac0:	08009d07 	.word	0x08009d07
 8009ac4:	08009afb 	.word	0x08009afb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ac8:	4b94      	ldr	r3, [pc, #592]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d009      	beq.n	8009ae8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ad4:	4b91      	ldr	r3, [pc, #580]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	08db      	lsrs	r3, r3, #3
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	4a90      	ldr	r2, [pc, #576]	; (8009d20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009ae6:	e111      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ae8:	4b8d      	ldr	r3, [pc, #564]	; (8009d20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009aea:	61bb      	str	r3, [r7, #24]
    break;
 8009aec:	e10e      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009aee:	4b8d      	ldr	r3, [pc, #564]	; (8009d24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009af0:	61bb      	str	r3, [r7, #24]
    break;
 8009af2:	e10b      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009af4:	4b8c      	ldr	r3, [pc, #560]	; (8009d28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009af6:	61bb      	str	r3, [r7, #24]
    break;
 8009af8:	e108      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009afa:	4b88      	ldr	r3, [pc, #544]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afe:	f003 0303 	and.w	r3, r3, #3
 8009b02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009b04:	4b85      	ldr	r3, [pc, #532]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b08:	091b      	lsrs	r3, r3, #4
 8009b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b10:	4b82      	ldr	r3, [pc, #520]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b14:	f003 0301 	and.w	r3, r3, #1
 8009b18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b1a:	4b80      	ldr	r3, [pc, #512]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	08db      	lsrs	r3, r3, #3
 8009b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	fb02 f303 	mul.w	r3, r2, r3
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 80e1 	beq.w	8009d00 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	f000 8083 	beq.w	8009c4c <HAL_RCC_GetSysClockFreq+0x204>
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	f200 80a1 	bhi.w	8009c90 <HAL_RCC_GetSysClockFreq+0x248>
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <HAL_RCC_GetSysClockFreq+0x114>
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d056      	beq.n	8009c08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b5a:	e099      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b5c:	4b6f      	ldr	r3, [pc, #444]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0320 	and.w	r3, r3, #32
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d02d      	beq.n	8009bc4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b68:	4b6c      	ldr	r3, [pc, #432]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	08db      	lsrs	r3, r3, #3
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	4a6b      	ldr	r2, [pc, #428]	; (8009d20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b74:	fa22 f303 	lsr.w	r3, r2, r3
 8009b78:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	ee07 3a90 	vmov	s15, r3
 8009b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b92:	4b62      	ldr	r3, [pc, #392]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ba6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009bc2:	e087      	b.n	8009cd4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009d30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd6:	4b51      	ldr	r3, [pc, #324]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c06:	e065      	b.n	8009cd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009d34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1a:	4b40      	ldr	r3, [pc, #256]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c4a:	e043      	b.n	8009cd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009d38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5e:	4b2f      	ldr	r3, [pc, #188]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c8e:	e021      	b.n	8009cd4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009d34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca2:	4b1e      	ldr	r3, [pc, #120]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cd2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009cd4:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd8:	0a5b      	lsrs	r3, r3, #9
 8009cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cde:	3301      	adds	r3, #1
 8009ce0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	ee07 3a90 	vmov	s15, r3
 8009ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf8:	ee17 3a90 	vmov	r3, s15
 8009cfc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009cfe:	e005      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61bb      	str	r3, [r7, #24]
    break;
 8009d04:	e002      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009d06:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d08:	61bb      	str	r3, [r7, #24]
    break;
 8009d0a:	bf00      	nop
  }

  return sysclockfreq;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3724      	adds	r7, #36	; 0x24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	58024400 	.word	0x58024400
 8009d20:	03d09000 	.word	0x03d09000
 8009d24:	003d0900 	.word	0x003d0900
 8009d28:	02625a00 	.word	0x02625a00
 8009d2c:	46000000 	.word	0x46000000
 8009d30:	4c742400 	.word	0x4c742400
 8009d34:	4a742400 	.word	0x4a742400
 8009d38:	4c189680 	.word	0x4c189680

08009d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d42:	f7ff fe81 	bl	8009a48 <HAL_RCC_GetSysClockFreq>
 8009d46:	4602      	mov	r2, r0
 8009d48:	4b10      	ldr	r3, [pc, #64]	; (8009d8c <HAL_RCC_GetHCLKFreq+0x50>)
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	0a1b      	lsrs	r3, r3, #8
 8009d4e:	f003 030f 	and.w	r3, r3, #15
 8009d52:	490f      	ldr	r1, [pc, #60]	; (8009d90 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d54:	5ccb      	ldrb	r3, [r1, r3]
 8009d56:	f003 031f 	and.w	r3, r3, #31
 8009d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d60:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <HAL_RCC_GetHCLKFreq+0x50>)
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	f003 030f 	and.w	r3, r3, #15
 8009d68:	4a09      	ldr	r2, [pc, #36]	; (8009d90 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d6a:	5cd3      	ldrb	r3, [r2, r3]
 8009d6c:	f003 031f 	and.w	r3, r3, #31
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	fa22 f303 	lsr.w	r3, r2, r3
 8009d76:	4a07      	ldr	r2, [pc, #28]	; (8009d94 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d7a:	4a07      	ldr	r2, [pc, #28]	; (8009d98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d80:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d82:	681b      	ldr	r3, [r3, #0]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	58024400 	.word	0x58024400
 8009d90:	080116cc 	.word	0x080116cc
 8009d94:	24000030 	.word	0x24000030
 8009d98:	2400002c 	.word	0x2400002c

08009d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009da0:	f7ff ffcc 	bl	8009d3c <HAL_RCC_GetHCLKFreq>
 8009da4:	4602      	mov	r2, r0
 8009da6:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009da8:	69db      	ldr	r3, [r3, #28]
 8009daa:	091b      	lsrs	r3, r3, #4
 8009dac:	f003 0307 	and.w	r3, r3, #7
 8009db0:	4904      	ldr	r1, [pc, #16]	; (8009dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009db2:	5ccb      	ldrb	r3, [r1, r3]
 8009db4:	f003 031f 	and.w	r3, r3, #31
 8009db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	58024400 	.word	0x58024400
 8009dc4:	080116cc 	.word	0x080116cc

08009dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009dcc:	f7ff ffb6 	bl	8009d3c <HAL_RCC_GetHCLKFreq>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	4b06      	ldr	r3, [pc, #24]	; (8009dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	0a1b      	lsrs	r3, r3, #8
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	4904      	ldr	r1, [pc, #16]	; (8009df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009dde:	5ccb      	ldrb	r3, [r1, r3]
 8009de0:	f003 031f 	and.w	r3, r3, #31
 8009de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	58024400 	.word	0x58024400
 8009df0:	080116cc 	.word	0x080116cc

08009df4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e00:	2300      	movs	r3, #0
 8009e02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d03f      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e18:	d02a      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009e1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e1e:	d824      	bhi.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e24:	d018      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e2a:	d81e      	bhi.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e34:	d007      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009e36:	e018      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e38:	4ba3      	ldr	r3, [pc, #652]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3c:	4aa2      	ldr	r2, [pc, #648]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e44:	e015      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3304      	adds	r3, #4
 8009e4a:	2102      	movs	r1, #2
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f001 f9d5 	bl	800b1fc <RCCEx_PLL2_Config>
 8009e52:	4603      	mov	r3, r0
 8009e54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e56:	e00c      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3324      	adds	r3, #36	; 0x24
 8009e5c:	2102      	movs	r1, #2
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 fa7e 	bl	800b360 <RCCEx_PLL3_Config>
 8009e64:	4603      	mov	r3, r0
 8009e66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e68:	e003      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6e:	e000      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d109      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e78:	4b93      	ldr	r3, [pc, #588]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e84:	4990      	ldr	r1, [pc, #576]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009e86:	4313      	orrs	r3, r2
 8009e88:	650b      	str	r3, [r1, #80]	; 0x50
 8009e8a:	e001      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d03d      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea0:	2b04      	cmp	r3, #4
 8009ea2:	d826      	bhi.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009ea4:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eaa:	bf00      	nop
 8009eac:	08009ec1 	.word	0x08009ec1
 8009eb0:	08009ecf 	.word	0x08009ecf
 8009eb4:	08009ee1 	.word	0x08009ee1
 8009eb8:	08009ef9 	.word	0x08009ef9
 8009ebc:	08009ef9 	.word	0x08009ef9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec0:	4b81      	ldr	r3, [pc, #516]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec4:	4a80      	ldr	r2, [pc, #512]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ecc:	e015      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 f991 	bl	800b1fc <RCCEx_PLL2_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ede:	e00c      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3324      	adds	r3, #36	; 0x24
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fa3a 	bl	800b360 <RCCEx_PLL3_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ef0:	e003      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef6:	e000      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f00:	4b71      	ldr	r3, [pc, #452]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f04:	f023 0207 	bic.w	r2, r3, #7
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0c:	496e      	ldr	r1, [pc, #440]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	650b      	str	r3, [r1, #80]	; 0x50
 8009f12:	e001      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
 8009f16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d042      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f2c:	d02b      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f32:	d825      	bhi.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f34:	2bc0      	cmp	r3, #192	; 0xc0
 8009f36:	d028      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009f38:	2bc0      	cmp	r3, #192	; 0xc0
 8009f3a:	d821      	bhi.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f3c:	2b80      	cmp	r3, #128	; 0x80
 8009f3e:	d016      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009f40:	2b80      	cmp	r3, #128	; 0x80
 8009f42:	d81d      	bhi.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009f48:	2b40      	cmp	r3, #64	; 0x40
 8009f4a:	d007      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009f4c:	e018      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f4e:	4b5e      	ldr	r3, [pc, #376]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f52:	4a5d      	ldr	r2, [pc, #372]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009f5a:	e017      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	2100      	movs	r1, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 f94a 	bl	800b1fc <RCCEx_PLL2_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009f6c:	e00e      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	3324      	adds	r3, #36	; 0x24
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 f9f3 	bl	800b360 <RCCEx_PLL3_Config>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009f7e:	e005      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	75fb      	strb	r3, [r7, #23]
      break;
 8009f84:	e002      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009f86:	bf00      	nop
 8009f88:	e000      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d109      	bne.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009f92:	4b4d      	ldr	r3, [pc, #308]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f9e:	494a      	ldr	r1, [pc, #296]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	650b      	str	r3, [r1, #80]	; 0x50
 8009fa4:	e001      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
 8009fa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d049      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009fc0:	d030      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009fc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009fc6:	d82a      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009fc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009fcc:	d02c      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009fce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009fd2:	d824      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fd8:	d018      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fde:	d81e      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fe8:	d007      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009fea:	e018      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fec:	4b36      	ldr	r3, [pc, #216]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff0:	4a35      	ldr	r2, [pc, #212]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ff8:	e017      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	2100      	movs	r1, #0
 800a000:	4618      	mov	r0, r3
 800a002:	f001 f8fb 	bl	800b1fc <RCCEx_PLL2_Config>
 800a006:	4603      	mov	r3, r0
 800a008:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a00a:	e00e      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3324      	adds	r3, #36	; 0x24
 800a010:	2100      	movs	r1, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f001 f9a4 	bl	800b360 <RCCEx_PLL3_Config>
 800a018:	4603      	mov	r3, r0
 800a01a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a01c:	e005      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	75fb      	strb	r3, [r7, #23]
      break;
 800a022:	e002      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a024:	bf00      	nop
 800a026:	e000      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a030:	4b25      	ldr	r3, [pc, #148]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a034:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a03e:	4922      	ldr	r1, [pc, #136]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a040:	4313      	orrs	r3, r2
 800a042:	658b      	str	r3, [r1, #88]	; 0x58
 800a044:	e001      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a052:	2b00      	cmp	r3, #0
 800a054:	d04b      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a05c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a060:	d030      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a066:	d82a      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a068:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a06c:	d02e      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800a06e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a072:	d824      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a078:	d018      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a07a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a07e:	d81e      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a088:	d007      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a08a:	e018      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a08c:	4b0e      	ldr	r3, [pc, #56]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a090:	4a0d      	ldr	r2, [pc, #52]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a098:	e019      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3304      	adds	r3, #4
 800a09e:	2100      	movs	r1, #0
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 f8ab 	bl	800b1fc <RCCEx_PLL2_Config>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a0aa:	e010      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3324      	adds	r3, #36	; 0x24
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 f954 	bl	800b360 <RCCEx_PLL3_Config>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a0bc:	e007      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c2:	e004      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800a0c4:	bf00      	nop
 800a0c6:	e002      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a0c8:	58024400 	.word	0x58024400
      break;
 800a0cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a0d4:	4b99      	ldr	r3, [pc, #612]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a0d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0e2:	4996      	ldr	r1, [pc, #600]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	658b      	str	r3, [r1, #88]	; 0x58
 800a0e8:	e001      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d032      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0fe:	2b30      	cmp	r3, #48	; 0x30
 800a100:	d01c      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800a102:	2b30      	cmp	r3, #48	; 0x30
 800a104:	d817      	bhi.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a106:	2b20      	cmp	r3, #32
 800a108:	d00c      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800a10a:	2b20      	cmp	r3, #32
 800a10c:	d813      	bhi.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d016      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a112:	2b10      	cmp	r3, #16
 800a114:	d10f      	bne.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a116:	4b89      	ldr	r3, [pc, #548]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	4a88      	ldr	r2, [pc, #544]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a11c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a122:	e00e      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3304      	adds	r3, #4
 800a128:	2102      	movs	r1, #2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 f866 	bl	800b1fc <RCCEx_PLL2_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a134:	e005      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
      break;
 800a13a:	e002      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a140:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a142:	7dfb      	ldrb	r3, [r7, #23]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d109      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a148:	4b7c      	ldr	r3, [pc, #496]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a14a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a14c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a154:	4979      	ldr	r1, [pc, #484]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a156:	4313      	orrs	r3, r2
 800a158:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a15a:	e001      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d047      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a174:	d030      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a17a:	d82a      	bhi.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a17c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a180:	d02c      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a182:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a186:	d824      	bhi.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a18c:	d018      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800a18e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a192:	d81e      	bhi.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a194:	2b00      	cmp	r3, #0
 800a196:	d003      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a19c:	d007      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800a19e:	e018      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1a0:	4b66      	ldr	r3, [pc, #408]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	4a65      	ldr	r2, [pc, #404]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a1a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a1ac:	e017      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f001 f821 	bl	800b1fc <RCCEx_PLL2_Config>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a1be:	e00e      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3324      	adds	r3, #36	; 0x24
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f001 f8ca 	bl	800b360 <RCCEx_PLL3_Config>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a1d0:	e005      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d6:	e002      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a1d8:	bf00      	nop
 800a1da:	e000      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a1dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d109      	bne.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a1e4:	4b55      	ldr	r3, [pc, #340]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1f0:	4952      	ldr	r1, [pc, #328]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	650b      	str	r3, [r1, #80]	; 0x50
 800a1f6:	e001      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f8:	7dfb      	ldrb	r3, [r7, #23]
 800a1fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d049      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a20c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a210:	d02e      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a216:	d828      	bhi.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a218:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a21c:	d02a      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800a21e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a222:	d822      	bhi.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a224:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a228:	d026      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800a22a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a22e:	d81c      	bhi.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a234:	d010      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a23a:	d816      	bhi.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01d      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x488>
 800a240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a244:	d111      	bne.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3304      	adds	r3, #4
 800a24a:	2101      	movs	r1, #1
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 ffd5 	bl	800b1fc <RCCEx_PLL2_Config>
 800a252:	4603      	mov	r3, r0
 800a254:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a256:	e012      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3324      	adds	r3, #36	; 0x24
 800a25c:	2101      	movs	r1, #1
 800a25e:	4618      	mov	r0, r3
 800a260:	f001 f87e 	bl	800b360 <RCCEx_PLL3_Config>
 800a264:	4603      	mov	r3, r0
 800a266:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a268:	e009      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	75fb      	strb	r3, [r7, #23]
      break;
 800a26e:	e006      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a270:	bf00      	nop
 800a272:	e004      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a274:	bf00      	nop
 800a276:	e002      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a278:	bf00      	nop
 800a27a:	e000      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a27c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a27e:	7dfb      	ldrb	r3, [r7, #23]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d109      	bne.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a284:	4b2d      	ldr	r3, [pc, #180]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a288:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a290:	492a      	ldr	r1, [pc, #168]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a292:	4313      	orrs	r3, r2
 800a294:	650b      	str	r3, [r1, #80]	; 0x50
 800a296:	e001      	b.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d04d      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2b2:	d02e      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a2b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2b8:	d828      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2be:	d02a      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c4:	d822      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a2c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2ca:	d026      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800a2cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2d0:	d81c      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a2d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2d6:	d010      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a2d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2dc:	d816      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d01d      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a2e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2e6:	d111      	bne.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 ff84 	bl	800b1fc <RCCEx_PLL2_Config>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a2f8:	e012      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	3324      	adds	r3, #36	; 0x24
 800a2fe:	2101      	movs	r1, #1
 800a300:	4618      	mov	r0, r3
 800a302:	f001 f82d 	bl	800b360 <RCCEx_PLL3_Config>
 800a306:	4603      	mov	r3, r0
 800a308:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a30a:	e009      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	75fb      	strb	r3, [r7, #23]
      break;
 800a310:	e006      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a312:	bf00      	nop
 800a314:	e004      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a316:	bf00      	nop
 800a318:	e002      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a31e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10c      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a326:	4b05      	ldr	r3, [pc, #20]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a32a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a334:	4901      	ldr	r1, [pc, #4]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a336:	4313      	orrs	r3, r2
 800a338:	658b      	str	r3, [r1, #88]	; 0x58
 800a33a:	e003      	b.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a33c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a340:	7dfb      	ldrb	r3, [r7, #23]
 800a342:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d02f      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a358:	d00e      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800a35a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a35e:	d814      	bhi.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x596>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d015      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800a364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a368:	d10f      	bne.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a36a:	4baf      	ldr	r3, [pc, #700]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36e:	4aae      	ldr	r2, [pc, #696]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a374:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a376:	e00c      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3304      	adds	r3, #4
 800a37c:	2101      	movs	r1, #1
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 ff3c 	bl	800b1fc <RCCEx_PLL2_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a388:	e003      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	75fb      	strb	r3, [r7, #23]
      break;
 800a38e:	e000      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800a390:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a392:	7dfb      	ldrb	r3, [r7, #23]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d109      	bne.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a398:	4ba3      	ldr	r3, [pc, #652]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a39a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a39c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a4:	49a0      	ldr	r1, [pc, #640]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	650b      	str	r3, [r1, #80]	; 0x50
 800a3aa:	e001      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d032      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d81b      	bhi.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a3c4:	a201      	add	r2, pc, #4	; (adr r2, 800a3cc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800a3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ca:	bf00      	nop
 800a3cc:	0800a403 	.word	0x0800a403
 800a3d0:	0800a3dd 	.word	0x0800a3dd
 800a3d4:	0800a3eb 	.word	0x0800a3eb
 800a3d8:	0800a403 	.word	0x0800a403
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3dc:	4b92      	ldr	r3, [pc, #584]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e0:	4a91      	ldr	r2, [pc, #580]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a3e8:	e00c      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	2102      	movs	r1, #2
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 ff03 	bl	800b1fc <RCCEx_PLL2_Config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a3fa:	e003      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a400:	e000      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a402:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a404:	7dfb      	ldrb	r3, [r7, #23]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d109      	bne.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a40a:	4b87      	ldr	r3, [pc, #540]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a40c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a40e:	f023 0203 	bic.w	r2, r3, #3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a416:	4984      	ldr	r1, [pc, #528]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a41c:	e001      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
 800a420:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 8086 	beq.w	800a53c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a430:	4b7e      	ldr	r3, [pc, #504]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a7d      	ldr	r2, [pc, #500]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a43a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a43c:	f7fa fc42 	bl	8004cc4 <HAL_GetTick>
 800a440:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a442:	e009      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a444:	f7fa fc3e 	bl	8004cc4 <HAL_GetTick>
 800a448:	4602      	mov	r2, r0
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	2b64      	cmp	r3, #100	; 0x64
 800a450:	d902      	bls.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	75fb      	strb	r3, [r7, #23]
        break;
 800a456:	e005      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a458:	4b74      	ldr	r3, [pc, #464]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0ef      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d166      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a46a:	4b6f      	ldr	r3, [pc, #444]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a46c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a474:	4053      	eors	r3, r2
 800a476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d013      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a47e:	4b6a      	ldr	r3, [pc, #424]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a486:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a488:	4b67      	ldr	r3, [pc, #412]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48c:	4a66      	ldr	r2, [pc, #408]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a48e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a492:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a494:	4b64      	ldr	r3, [pc, #400]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a498:	4a63      	ldr	r2, [pc, #396]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a49a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a49e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a4a0:	4a61      	ldr	r2, [pc, #388]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4b0:	d115      	bne.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b2:	f7fa fc07 	bl	8004cc4 <HAL_GetTick>
 800a4b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4b8:	e00b      	b.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ba:	f7fa fc03 	bl	8004cc4 <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d902      	bls.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	75fb      	strb	r3, [r7, #23]
            break;
 800a4d0:	e005      	b.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4d2:	4b55      	ldr	r3, [pc, #340]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0ed      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d126      	bne.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4f2:	d10d      	bne.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a4f4:	4b4c      	ldr	r3, [pc, #304]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a502:	0919      	lsrs	r1, r3, #4
 800a504:	4b4a      	ldr	r3, [pc, #296]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800a506:	400b      	ands	r3, r1
 800a508:	4947      	ldr	r1, [pc, #284]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	610b      	str	r3, [r1, #16]
 800a50e:	e005      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a510:	4b45      	ldr	r3, [pc, #276]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	4a44      	ldr	r2, [pc, #272]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a516:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a51a:	6113      	str	r3, [r2, #16]
 800a51c:	4b42      	ldr	r3, [pc, #264]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a51e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a52a:	493f      	ldr	r1, [pc, #252]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a52c:	4313      	orrs	r3, r2
 800a52e:	670b      	str	r3, [r1, #112]	; 0x70
 800a530:	e004      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	75bb      	strb	r3, [r7, #22]
 800a536:	e001      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0301 	and.w	r3, r3, #1
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 8085 	beq.w	800a654 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a54e:	2b28      	cmp	r3, #40	; 0x28
 800a550:	d866      	bhi.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a552:	a201      	add	r2, pc, #4	; (adr r2, 800a558 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a558:	0800a635 	.word	0x0800a635
 800a55c:	0800a621 	.word	0x0800a621
 800a560:	0800a621 	.word	0x0800a621
 800a564:	0800a621 	.word	0x0800a621
 800a568:	0800a621 	.word	0x0800a621
 800a56c:	0800a621 	.word	0x0800a621
 800a570:	0800a621 	.word	0x0800a621
 800a574:	0800a621 	.word	0x0800a621
 800a578:	0800a5fd 	.word	0x0800a5fd
 800a57c:	0800a621 	.word	0x0800a621
 800a580:	0800a621 	.word	0x0800a621
 800a584:	0800a621 	.word	0x0800a621
 800a588:	0800a621 	.word	0x0800a621
 800a58c:	0800a621 	.word	0x0800a621
 800a590:	0800a621 	.word	0x0800a621
 800a594:	0800a621 	.word	0x0800a621
 800a598:	0800a60f 	.word	0x0800a60f
 800a59c:	0800a621 	.word	0x0800a621
 800a5a0:	0800a621 	.word	0x0800a621
 800a5a4:	0800a621 	.word	0x0800a621
 800a5a8:	0800a621 	.word	0x0800a621
 800a5ac:	0800a621 	.word	0x0800a621
 800a5b0:	0800a621 	.word	0x0800a621
 800a5b4:	0800a621 	.word	0x0800a621
 800a5b8:	0800a635 	.word	0x0800a635
 800a5bc:	0800a621 	.word	0x0800a621
 800a5c0:	0800a621 	.word	0x0800a621
 800a5c4:	0800a621 	.word	0x0800a621
 800a5c8:	0800a621 	.word	0x0800a621
 800a5cc:	0800a621 	.word	0x0800a621
 800a5d0:	0800a621 	.word	0x0800a621
 800a5d4:	0800a621 	.word	0x0800a621
 800a5d8:	0800a635 	.word	0x0800a635
 800a5dc:	0800a621 	.word	0x0800a621
 800a5e0:	0800a621 	.word	0x0800a621
 800a5e4:	0800a621 	.word	0x0800a621
 800a5e8:	0800a621 	.word	0x0800a621
 800a5ec:	0800a621 	.word	0x0800a621
 800a5f0:	0800a621 	.word	0x0800a621
 800a5f4:	0800a621 	.word	0x0800a621
 800a5f8:	0800a635 	.word	0x0800a635
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	3304      	adds	r3, #4
 800a600:	2101      	movs	r1, #1
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fdfa 	bl	800b1fc <RCCEx_PLL2_Config>
 800a608:	4603      	mov	r3, r0
 800a60a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a60c:	e013      	b.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	3324      	adds	r3, #36	; 0x24
 800a612:	2101      	movs	r1, #1
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fea3 	bl	800b360 <RCCEx_PLL3_Config>
 800a61a:	4603      	mov	r3, r0
 800a61c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a61e:	e00a      	b.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	75fb      	strb	r3, [r7, #23]
      break;
 800a624:	e007      	b.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800a626:	bf00      	nop
 800a628:	58024400 	.word	0x58024400
 800a62c:	58024800 	.word	0x58024800
 800a630:	00ffffcf 	.word	0x00ffffcf
      break;
 800a634:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a636:	7dfb      	ldrb	r3, [r7, #23]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d109      	bne.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a63c:	4b96      	ldr	r3, [pc, #600]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a640:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a648:	4993      	ldr	r1, [pc, #588]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	654b      	str	r3, [r1, #84]	; 0x54
 800a64e:	e001      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0302 	and.w	r3, r3, #2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d038      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a664:	2b05      	cmp	r3, #5
 800a666:	d821      	bhi.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a668:	a201      	add	r2, pc, #4	; (adr r2, 800a670 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800a66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66e:	bf00      	nop
 800a670:	0800a6b3 	.word	0x0800a6b3
 800a674:	0800a689 	.word	0x0800a689
 800a678:	0800a69b 	.word	0x0800a69b
 800a67c:	0800a6b3 	.word	0x0800a6b3
 800a680:	0800a6b3 	.word	0x0800a6b3
 800a684:	0800a6b3 	.word	0x0800a6b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	3304      	adds	r3, #4
 800a68c:	2101      	movs	r1, #1
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 fdb4 	bl	800b1fc <RCCEx_PLL2_Config>
 800a694:	4603      	mov	r3, r0
 800a696:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a698:	e00c      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	3324      	adds	r3, #36	; 0x24
 800a69e:	2101      	movs	r1, #1
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 fe5d 	bl	800b360 <RCCEx_PLL3_Config>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a6aa:	e003      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a6b0:	e000      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800a6b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a6ba:	4b77      	ldr	r3, [pc, #476]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6be:	f023 0207 	bic.w	r2, r3, #7
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6c6:	4974      	ldr	r1, [pc, #464]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	654b      	str	r3, [r1, #84]	; 0x54
 800a6cc:	e001      	b.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0304 	and.w	r3, r3, #4
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d03a      	beq.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6e4:	2b05      	cmp	r3, #5
 800a6e6:	d821      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800a6e8:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a733 	.word	0x0800a733
 800a6f4:	0800a709 	.word	0x0800a709
 800a6f8:	0800a71b 	.word	0x0800a71b
 800a6fc:	0800a733 	.word	0x0800a733
 800a700:	0800a733 	.word	0x0800a733
 800a704:	0800a733 	.word	0x0800a733
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3304      	adds	r3, #4
 800a70c:	2101      	movs	r1, #1
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fd74 	bl	800b1fc <RCCEx_PLL2_Config>
 800a714:	4603      	mov	r3, r0
 800a716:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a718:	e00c      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	3324      	adds	r3, #36	; 0x24
 800a71e:	2101      	movs	r1, #1
 800a720:	4618      	mov	r0, r3
 800a722:	f000 fe1d 	bl	800b360 <RCCEx_PLL3_Config>
 800a726:	4603      	mov	r3, r0
 800a728:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a72a:	e003      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	75fb      	strb	r3, [r7, #23]
      break;
 800a730:	e000      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800a732:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a734:	7dfb      	ldrb	r3, [r7, #23]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10a      	bne.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a73a:	4b57      	ldr	r3, [pc, #348]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a73c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73e:	f023 0207 	bic.w	r2, r3, #7
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a748:	4953      	ldr	r1, [pc, #332]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	658b      	str	r3, [r1, #88]	; 0x58
 800a74e:	e001      	b.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a750:	7dfb      	ldrb	r3, [r7, #23]
 800a752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 0320 	and.w	r3, r3, #32
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d04b      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a76a:	d02e      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a76c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a770:	d828      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a776:	d02a      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a77c:	d822      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a77e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a782:	d026      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a784:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a788:	d81c      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a78a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a78e:	d010      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a794:	d816      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d01d      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a79a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a79e:	d111      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 fd28 	bl	800b1fc <RCCEx_PLL2_Config>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a7b0:	e012      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3324      	adds	r3, #36	; 0x24
 800a7b6:	2102      	movs	r1, #2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 fdd1 	bl	800b360 <RCCEx_PLL3_Config>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a7c2:	e009      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c8:	e006      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a7ca:	bf00      	nop
 800a7cc:	e004      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a7ce:	bf00      	nop
 800a7d0:	e002      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a7d2:	bf00      	nop
 800a7d4:	e000      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a7d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7d8:	7dfb      	ldrb	r3, [r7, #23]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10a      	bne.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7de:	4b2e      	ldr	r3, [pc, #184]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ec:	492a      	ldr	r1, [pc, #168]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	654b      	str	r3, [r1, #84]	; 0x54
 800a7f2:	e001      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a800:	2b00      	cmp	r3, #0
 800a802:	d04d      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a80a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a80e:	d02e      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a810:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a814:	d828      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a81a:	d02a      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a81c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a820:	d822      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a822:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a826:	d026      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a82c:	d81c      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a82e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a832:	d010      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a838:	d816      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d01d      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a83e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a842:	d111      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3304      	adds	r3, #4
 800a848:	2100      	movs	r1, #0
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fcd6 	bl	800b1fc <RCCEx_PLL2_Config>
 800a850:	4603      	mov	r3, r0
 800a852:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a854:	e012      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	3324      	adds	r3, #36	; 0x24
 800a85a:	2102      	movs	r1, #2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 fd7f 	bl	800b360 <RCCEx_PLL3_Config>
 800a862:	4603      	mov	r3, r0
 800a864:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a866:	e009      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	75fb      	strb	r3, [r7, #23]
      break;
 800a86c:	e006      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a86e:	bf00      	nop
 800a870:	e004      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a872:	bf00      	nop
 800a874:	e002      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a876:	bf00      	nop
 800a878:	e000      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a87a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10c      	bne.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a882:	4b05      	ldr	r3, [pc, #20]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a886:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a890:	4901      	ldr	r1, [pc, #4]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a892:	4313      	orrs	r3, r2
 800a894:	658b      	str	r3, [r1, #88]	; 0x58
 800a896:	e003      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
 800a89e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d04b      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8b6:	d02e      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a8b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8bc:	d828      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a8be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8c2:	d02a      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a8c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8c8:	d822      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a8ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8ce:	d026      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a8d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8d4:	d81c      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a8d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8da:	d010      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a8dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8e0:	d816      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d01d      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a8e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ea:	d111      	bne.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fc82 	bl	800b1fc <RCCEx_PLL2_Config>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a8fc:	e012      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3324      	adds	r3, #36	; 0x24
 800a902:	2102      	movs	r1, #2
 800a904:	4618      	mov	r0, r3
 800a906:	f000 fd2b 	bl	800b360 <RCCEx_PLL3_Config>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a90e:	e009      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	75fb      	strb	r3, [r7, #23]
      break;
 800a914:	e006      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a916:	bf00      	nop
 800a918:	e004      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a91a:	bf00      	nop
 800a91c:	e002      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a91e:	bf00      	nop
 800a920:	e000      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a922:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a924:	7dfb      	ldrb	r3, [r7, #23]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a92a:	4b9d      	ldr	r3, [pc, #628]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a938:	4999      	ldr	r1, [pc, #612]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a93a:	4313      	orrs	r3, r2
 800a93c:	658b      	str	r3, [r1, #88]	; 0x58
 800a93e:	e001      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a940:	7dfb      	ldrb	r3, [r7, #23]
 800a942:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0308 	and.w	r3, r3, #8
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d01a      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95a:	d10a      	bne.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3324      	adds	r3, #36	; 0x24
 800a960:	2102      	movs	r1, #2
 800a962:	4618      	mov	r0, r3
 800a964:	f000 fcfc 	bl	800b360 <RCCEx_PLL3_Config>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a972:	4b8b      	ldr	r3, [pc, #556]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a976:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a980:	4987      	ldr	r1, [pc, #540]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a982:	4313      	orrs	r3, r2
 800a984:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 0310 	and.w	r3, r3, #16
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d01a      	beq.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a99c:	d10a      	bne.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3324      	adds	r3, #36	; 0x24
 800a9a2:	2102      	movs	r1, #2
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 fcdb 	bl	800b360 <RCCEx_PLL3_Config>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9b4:	4b7a      	ldr	r3, [pc, #488]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a9b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9c2:	4977      	ldr	r1, [pc, #476]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d034      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a9da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9de:	d01d      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a9e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9e4:	d817      	bhi.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a9ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ee:	d009      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a9f0:	e011      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fbff 	bl	800b1fc <RCCEx_PLL2_Config>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aa02:	e00c      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3324      	adds	r3, #36	; 0x24
 800aa08:	2102      	movs	r1, #2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fca8 	bl	800b360 <RCCEx_PLL3_Config>
 800aa10:	4603      	mov	r3, r0
 800aa12:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aa14:	e003      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	75fb      	strb	r3, [r7, #23]
      break;
 800aa1a:	e000      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800aa1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa1e:	7dfb      	ldrb	r3, [r7, #23]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10a      	bne.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa24:	4b5e      	ldr	r3, [pc, #376]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aa26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa32:	495b      	ldr	r1, [pc, #364]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	658b      	str	r3, [r1, #88]	; 0x58
 800aa38:	e001      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
 800aa3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d033      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa54:	d01c      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800aa56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa5a:	d816      	bhi.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800aa5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa60:	d003      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800aa62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa66:	d007      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800aa68:	e00f      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa6a:	4b4d      	ldr	r3, [pc, #308]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6e:	4a4c      	ldr	r2, [pc, #304]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aa70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800aa76:	e00c      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	3324      	adds	r3, #36	; 0x24
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fc6e 	bl	800b360 <RCCEx_PLL3_Config>
 800aa84:	4603      	mov	r3, r0
 800aa86:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800aa88:	e003      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa8e:	e000      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800aa90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10a      	bne.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa98:	4b41      	ldr	r3, [pc, #260]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aa9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaa6:	493e      	ldr	r1, [pc, #248]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	654b      	str	r3, [r1, #84]	; 0x54
 800aaac:	e001      	b.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
 800aab0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d029      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d003      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800aac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaca:	d007      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800aacc:	e00f      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aace:	4b34      	ldr	r3, [pc, #208]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad2:	4a33      	ldr	r2, [pc, #204]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aad8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aada:	e00b      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3304      	adds	r3, #4
 800aae0:	2102      	movs	r1, #2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fb8a 	bl	800b1fc <RCCEx_PLL2_Config>
 800aae8:	4603      	mov	r3, r0
 800aaea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aaec:	e002      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	75fb      	strb	r3, [r7, #23]
      break;
 800aaf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d109      	bne.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aafa:	4b29      	ldr	r3, [pc, #164]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aafc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aafe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab06:	4926      	ldr	r1, [pc, #152]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ab0c:	e001      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
 800ab10:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00a      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3324      	adds	r3, #36	; 0x24
 800ab22:	2102      	movs	r1, #2
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fc1b 	bl	800b360 <RCCEx_PLL3_Config>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d033      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab48:	d017      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ab4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab4e:	d811      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800ab50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab54:	d013      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ab56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab5a:	d80b      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d010      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800ab60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab64:	d106      	bne.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab66:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	4a0d      	ldr	r2, [pc, #52]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ab6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ab72:	e007      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	75fb      	strb	r3, [r7, #23]
      break;
 800ab78:	e004      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ab7a:	bf00      	nop
 800ab7c:	e002      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ab7e:	bf00      	nop
 800ab80:	e000      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ab82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10c      	bne.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ab8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab96:	4902      	ldr	r1, [pc, #8]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	654b      	str	r3, [r1, #84]	; 0x54
 800ab9c:	e004      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800ab9e:	bf00      	nop
 800aba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba4:	7dfb      	ldrb	r3, [r7, #23]
 800aba6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d008      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800abb4:	4b31      	ldr	r3, [pc, #196]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800abb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc0:	492e      	ldr	r1, [pc, #184]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800abc2:	4313      	orrs	r3, r2
 800abc4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d009      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800abd2:	4b2a      	ldr	r3, [pc, #168]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800abe0:	4926      	ldr	r1, [pc, #152]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d008      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800abf2:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800abf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abfe:	491f      	ldr	r1, [pc, #124]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ac00:	4313      	orrs	r3, r2
 800ac02:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00d      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac10:	4b1a      	ldr	r3, [pc, #104]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	4a19      	ldr	r2, [pc, #100]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ac16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac1a:	6113      	str	r3, [r2, #16]
 800ac1c:	4b17      	ldr	r3, [pc, #92]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ac1e:	691a      	ldr	r2, [r3, #16]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ac26:	4915      	ldr	r1, [pc, #84]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	da08      	bge.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ac34:	4b11      	ldr	r3, [pc, #68]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ac36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac40:	490e      	ldr	r1, [pc, #56]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d009      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac52:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ac54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac60:	4906      	ldr	r1, [pc, #24]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ac62:	4313      	orrs	r3, r2
 800ac64:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ac66:	7dbb      	ldrb	r3, [r7, #22]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e000      	b.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	58024400 	.word	0x58024400

0800ac80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ac84:	f7ff f85a 	bl	8009d3c <HAL_RCC_GetHCLKFreq>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	091b      	lsrs	r3, r3, #4
 800ac90:	f003 0307 	and.w	r3, r3, #7
 800ac94:	4904      	ldr	r1, [pc, #16]	; (800aca8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ac96:	5ccb      	ldrb	r3, [r1, r3]
 800ac98:	f003 031f 	and.w	r3, r3, #31
 800ac9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	58024400 	.word	0x58024400
 800aca8:	080116cc 	.word	0x080116cc

0800acac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800acac:	b480      	push	{r7}
 800acae:	b089      	sub	sp, #36	; 0x24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acb4:	4ba1      	ldr	r3, [pc, #644]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb8:	f003 0303 	and.w	r3, r3, #3
 800acbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800acbe:	4b9f      	ldr	r3, [pc, #636]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc2:	0b1b      	lsrs	r3, r3, #12
 800acc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800acca:	4b9c      	ldr	r3, [pc, #624]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	091b      	lsrs	r3, r3, #4
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800acd6:	4b99      	ldr	r3, [pc, #612]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acda:	08db      	lsrs	r3, r3, #3
 800acdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	fb02 f303 	mul.w	r3, r2, r3
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 8111 	beq.w	800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	f000 8083 	beq.w	800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	f200 80a1 	bhi.w	800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d056      	beq.n	800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ad16:	e099      	b.n	800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad18:	4b88      	ldr	r3, [pc, #544]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0320 	and.w	r3, r3, #32
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d02d      	beq.n	800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad24:	4b85      	ldr	r3, [pc, #532]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	08db      	lsrs	r3, r3, #3
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	4a84      	ldr	r2, [pc, #528]	; (800af40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ad30:	fa22 f303 	lsr.w	r3, r2, r3
 800ad34:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	ee07 3a90 	vmov	s15, r3
 800ad3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4e:	4b7b      	ldr	r3, [pc, #492]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ad7e:	e087      	b.n	800ae90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	ee07 3a90 	vmov	s15, r3
 800ad86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ad8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad92:	4b6a      	ldr	r3, [pc, #424]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9a:	ee07 3a90 	vmov	s15, r3
 800ad9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adc2:	e065      	b.n	800ae90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800add2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add6:	4b59      	ldr	r3, [pc, #356]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae06:	e043      	b.n	800ae90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ae16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae1a:	4b48      	ldr	r3, [pc, #288]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae4a:	e021      	b.n	800ae90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae5e:	4b37      	ldr	r3, [pc, #220]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae66:	ee07 3a90 	vmov	s15, r3
 800ae6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae72:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ae90:	4b2a      	ldr	r3, [pc, #168]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae94:	0a5b      	lsrs	r3, r3, #9
 800ae96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae9a:	ee07 3a90 	vmov	s15, r3
 800ae9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeb6:	ee17 2a90 	vmov	r2, s15
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800aebe:	4b1f      	ldr	r3, [pc, #124]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec2:	0c1b      	lsrs	r3, r3, #16
 800aec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec8:	ee07 3a90 	vmov	s15, r3
 800aecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aed8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aedc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee4:	ee17 2a90 	vmov	r2, s15
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800aeec:	4b13      	ldr	r3, [pc, #76]	; (800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef0:	0e1b      	lsrs	r3, r3, #24
 800aef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af06:	edd7 6a07 	vldr	s13, [r7, #28]
 800af0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af12:	ee17 2a90 	vmov	r2, s15
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800af1a:	e008      	b.n	800af2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	609a      	str	r2, [r3, #8]
}
 800af2e:	bf00      	nop
 800af30:	3724      	adds	r7, #36	; 0x24
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	58024400 	.word	0x58024400
 800af40:	03d09000 	.word	0x03d09000
 800af44:	46000000 	.word	0x46000000
 800af48:	4c742400 	.word	0x4c742400
 800af4c:	4a742400 	.word	0x4a742400
 800af50:	4c189680 	.word	0x4c189680

0800af54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800af54:	b480      	push	{r7}
 800af56:	b089      	sub	sp, #36	; 0x24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af5c:	4ba1      	ldr	r3, [pc, #644]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af60:	f003 0303 	and.w	r3, r3, #3
 800af64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800af66:	4b9f      	ldr	r3, [pc, #636]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6a:	0d1b      	lsrs	r3, r3, #20
 800af6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800af72:	4b9c      	ldr	r3, [pc, #624]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af76:	0a1b      	lsrs	r3, r3, #8
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800af7e:	4b99      	ldr	r3, [pc, #612]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af82:	08db      	lsrs	r3, r3, #3
 800af84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	fb02 f303 	mul.w	r3, r2, r3
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f000 8111 	beq.w	800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	f000 8083 	beq.w	800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	2b02      	cmp	r3, #2
 800afae:	f200 80a1 	bhi.w	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d003      	beq.n	800afc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d056      	beq.n	800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800afbe:	e099      	b.n	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afc0:	4b88      	ldr	r3, [pc, #544]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 0320 	and.w	r3, r3, #32
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d02d      	beq.n	800b028 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afcc:	4b85      	ldr	r3, [pc, #532]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	08db      	lsrs	r3, r3, #3
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	4a84      	ldr	r2, [pc, #528]	; (800b1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800afd8:	fa22 f303 	lsr.w	r3, r2, r3
 800afdc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	ee07 3a90 	vmov	s15, r3
 800afe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff6:	4b7b      	ldr	r3, [pc, #492]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b006:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b022:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b026:	e087      	b.n	800b138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b032:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03a:	4b6a      	ldr	r3, [pc, #424]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b042:	ee07 3a90 	vmov	s15, r3
 800b046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b04e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b06a:	e065      	b.n	800b138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	ee07 3a90 	vmov	s15, r3
 800b072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b076:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b07e:	4b59      	ldr	r3, [pc, #356]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b086:	ee07 3a90 	vmov	s15, r3
 800b08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b08e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b092:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b09e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0ae:	e043      	b.n	800b138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0c2:	4b48      	ldr	r3, [pc, #288]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ca:	ee07 3a90 	vmov	s15, r3
 800b0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0f2:	e021      	b.n	800b138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b106:	4b37      	ldr	r3, [pc, #220]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b116:	ed97 6a03 	vldr	s12, [r7, #12]
 800b11a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b136:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b138:	4b2a      	ldr	r3, [pc, #168]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13c:	0a5b      	lsrs	r3, r3, #9
 800b13e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b14e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b152:	edd7 6a07 	vldr	s13, [r7, #28]
 800b156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b15a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b15e:	ee17 2a90 	vmov	r2, s15
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b166:	4b1f      	ldr	r3, [pc, #124]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16a:	0c1b      	lsrs	r3, r3, #16
 800b16c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b170:	ee07 3a90 	vmov	s15, r3
 800b174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b17c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b180:	edd7 6a07 	vldr	s13, [r7, #28]
 800b184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b18c:	ee17 2a90 	vmov	r2, s15
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b194:	4b13      	ldr	r3, [pc, #76]	; (800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b198:	0e1b      	lsrs	r3, r3, #24
 800b19a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ba:	ee17 2a90 	vmov	r2, s15
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b1c2:	e008      	b.n	800b1d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	609a      	str	r2, [r3, #8]
}
 800b1d6:	bf00      	nop
 800b1d8:	3724      	adds	r7, #36	; 0x24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	58024400 	.word	0x58024400
 800b1e8:	03d09000 	.word	0x03d09000
 800b1ec:	46000000 	.word	0x46000000
 800b1f0:	4c742400 	.word	0x4c742400
 800b1f4:	4a742400 	.word	0x4a742400
 800b1f8:	4c189680 	.word	0x4c189680

0800b1fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b20a:	4b53      	ldr	r3, [pc, #332]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b20e:	f003 0303 	and.w	r3, r3, #3
 800b212:	2b03      	cmp	r3, #3
 800b214:	d101      	bne.n	800b21a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e099      	b.n	800b34e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b21a:	4b4f      	ldr	r3, [pc, #316]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a4e      	ldr	r2, [pc, #312]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b220:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b226:	f7f9 fd4d 	bl	8004cc4 <HAL_GetTick>
 800b22a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b22c:	e008      	b.n	800b240 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b22e:	f7f9 fd49 	bl	8004cc4 <HAL_GetTick>
 800b232:	4602      	mov	r2, r0
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d901      	bls.n	800b240 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e086      	b.n	800b34e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b240:	4b45      	ldr	r3, [pc, #276]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1f0      	bne.n	800b22e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b24c:	4b42      	ldr	r3, [pc, #264]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b250:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	031b      	lsls	r3, r3, #12
 800b25a:	493f      	ldr	r1, [pc, #252]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b25c:	4313      	orrs	r3, r2
 800b25e:	628b      	str	r3, [r1, #40]	; 0x28
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	3b01      	subs	r3, #1
 800b266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	3b01      	subs	r3, #1
 800b270:	025b      	lsls	r3, r3, #9
 800b272:	b29b      	uxth	r3, r3
 800b274:	431a      	orrs	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	041b      	lsls	r3, r3, #16
 800b27e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	3b01      	subs	r3, #1
 800b28a:	061b      	lsls	r3, r3, #24
 800b28c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b290:	4931      	ldr	r1, [pc, #196]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b292:	4313      	orrs	r3, r2
 800b294:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b296:	4b30      	ldr	r3, [pc, #192]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	492d      	ldr	r1, [pc, #180]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2a8:	4b2b      	ldr	r3, [pc, #172]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ac:	f023 0220 	bic.w	r2, r3, #32
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	4928      	ldr	r1, [pc, #160]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2ba:	4b27      	ldr	r3, [pc, #156]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2be:	4a26      	ldr	r2, [pc, #152]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2c0:	f023 0310 	bic.w	r3, r3, #16
 800b2c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2c6:	4b24      	ldr	r3, [pc, #144]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2ca:	4b24      	ldr	r3, [pc, #144]	; (800b35c <RCCEx_PLL2_Config+0x160>)
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	69d2      	ldr	r2, [r2, #28]
 800b2d2:	00d2      	lsls	r2, r2, #3
 800b2d4:	4920      	ldr	r1, [pc, #128]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2da:	4b1f      	ldr	r3, [pc, #124]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2de:	4a1e      	ldr	r2, [pc, #120]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2e0:	f043 0310 	orr.w	r3, r3, #16
 800b2e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d106      	bne.n	800b2fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2ec:	4b1a      	ldr	r3, [pc, #104]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f0:	4a19      	ldr	r2, [pc, #100]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b2f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2f8:	e00f      	b.n	800b31a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d106      	bne.n	800b30e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b300:	4b15      	ldr	r3, [pc, #84]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b304:	4a14      	ldr	r2, [pc, #80]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b30a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b30c:	e005      	b.n	800b31a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b30e:	4b12      	ldr	r3, [pc, #72]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	4a11      	ldr	r2, [pc, #68]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b318:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b31a:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a0e      	ldr	r2, [pc, #56]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b320:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b326:	f7f9 fccd 	bl	8004cc4 <HAL_GetTick>
 800b32a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b32c:	e008      	b.n	800b340 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b32e:	f7f9 fcc9 	bl	8004cc4 <HAL_GetTick>
 800b332:	4602      	mov	r2, r0
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d901      	bls.n	800b340 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e006      	b.n	800b34e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b340:	4b05      	ldr	r3, [pc, #20]	; (800b358 <RCCEx_PLL2_Config+0x15c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d0f0      	beq.n	800b32e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	58024400 	.word	0x58024400
 800b35c:	ffff0007 	.word	0xffff0007

0800b360 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b36e:	4b53      	ldr	r3, [pc, #332]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	2b03      	cmp	r3, #3
 800b378:	d101      	bne.n	800b37e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e099      	b.n	800b4b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b37e:	4b4f      	ldr	r3, [pc, #316]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a4e      	ldr	r2, [pc, #312]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b38a:	f7f9 fc9b 	bl	8004cc4 <HAL_GetTick>
 800b38e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b390:	e008      	b.n	800b3a4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b392:	f7f9 fc97 	bl	8004cc4 <HAL_GetTick>
 800b396:	4602      	mov	r2, r0
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	2b02      	cmp	r3, #2
 800b39e:	d901      	bls.n	800b3a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	e086      	b.n	800b4b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3a4:	4b45      	ldr	r3, [pc, #276]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1f0      	bne.n	800b392 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3b0:	4b42      	ldr	r3, [pc, #264]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	051b      	lsls	r3, r3, #20
 800b3be:	493f      	ldr	r1, [pc, #252]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	628b      	str	r3, [r1, #40]	; 0x28
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	025b      	lsls	r3, r3, #9
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	431a      	orrs	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	041b      	lsls	r3, r3, #16
 800b3e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	061b      	lsls	r3, r3, #24
 800b3f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3f4:	4931      	ldr	r1, [pc, #196]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3fa:	4b30      	ldr	r3, [pc, #192]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	492d      	ldr	r1, [pc, #180]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b408:	4313      	orrs	r3, r2
 800b40a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b40c:	4b2b      	ldr	r3, [pc, #172]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b410:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	4928      	ldr	r1, [pc, #160]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b41a:	4313      	orrs	r3, r2
 800b41c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b41e:	4b27      	ldr	r3, [pc, #156]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b422:	4a26      	ldr	r2, [pc, #152]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b42a:	4b24      	ldr	r3, [pc, #144]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b42e:	4b24      	ldr	r3, [pc, #144]	; (800b4c0 <RCCEx_PLL3_Config+0x160>)
 800b430:	4013      	ands	r3, r2
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	69d2      	ldr	r2, [r2, #28]
 800b436:	00d2      	lsls	r2, r2, #3
 800b438:	4920      	ldr	r1, [pc, #128]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b43e:	4b1f      	ldr	r3, [pc, #124]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	4a1e      	ldr	r2, [pc, #120]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b448:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d106      	bne.n	800b45e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b450:	4b1a      	ldr	r3, [pc, #104]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4a19      	ldr	r2, [pc, #100]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b45a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b45c:	e00f      	b.n	800b47e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d106      	bne.n	800b472 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b464:	4b15      	ldr	r3, [pc, #84]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b468:	4a14      	ldr	r2, [pc, #80]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b46a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b46e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b470:	e005      	b.n	800b47e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b472:	4b12      	ldr	r3, [pc, #72]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b476:	4a11      	ldr	r2, [pc, #68]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b47c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b47e:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a0e      	ldr	r2, [pc, #56]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b48a:	f7f9 fc1b 	bl	8004cc4 <HAL_GetTick>
 800b48e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b490:	e008      	b.n	800b4a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b492:	f7f9 fc17 	bl	8004cc4 <HAL_GetTick>
 800b496:	4602      	mov	r2, r0
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d901      	bls.n	800b4a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	e006      	b.n	800b4b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4a4:	4b05      	ldr	r3, [pc, #20]	; (800b4bc <RCCEx_PLL3_Config+0x15c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d0f0      	beq.n	800b492 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	58024400 	.word	0x58024400
 800b4c0:	ffff0007 	.word	0xffff0007

0800b4c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e049      	b.n	800b56a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d106      	bne.n	800b4f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7f7 fb54 	bl	8002b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3304      	adds	r3, #4
 800b500:	4619      	mov	r1, r3
 800b502:	4610      	mov	r0, r2
 800b504:	f001 f804 	bl	800c510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
	...

0800b574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b01      	cmp	r3, #1
 800b586:	d001      	beq.n	800b58c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e054      	b.n	800b636 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2202      	movs	r2, #2
 800b590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f042 0201 	orr.w	r2, r2, #1
 800b5a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a26      	ldr	r2, [pc, #152]	; (800b644 <HAL_TIM_Base_Start_IT+0xd0>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d022      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x80>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5b6:	d01d      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x80>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a22      	ldr	r2, [pc, #136]	; (800b648 <HAL_TIM_Base_Start_IT+0xd4>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d018      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x80>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a21      	ldr	r2, [pc, #132]	; (800b64c <HAL_TIM_Base_Start_IT+0xd8>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d013      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x80>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a1f      	ldr	r2, [pc, #124]	; (800b650 <HAL_TIM_Base_Start_IT+0xdc>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d00e      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x80>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a1e      	ldr	r2, [pc, #120]	; (800b654 <HAL_TIM_Base_Start_IT+0xe0>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d009      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x80>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a1c      	ldr	r2, [pc, #112]	; (800b658 <HAL_TIM_Base_Start_IT+0xe4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d004      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x80>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a1b      	ldr	r2, [pc, #108]	; (800b65c <HAL_TIM_Base_Start_IT+0xe8>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d115      	bne.n	800b620 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	689a      	ldr	r2, [r3, #8]
 800b5fa:	4b19      	ldr	r3, [pc, #100]	; (800b660 <HAL_TIM_Base_Start_IT+0xec>)
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b06      	cmp	r3, #6
 800b604:	d015      	beq.n	800b632 <HAL_TIM_Base_Start_IT+0xbe>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b60c:	d011      	beq.n	800b632 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f042 0201 	orr.w	r2, r2, #1
 800b61c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b61e:	e008      	b.n	800b632 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f042 0201 	orr.w	r2, r2, #1
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	e000      	b.n	800b634 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	40010000 	.word	0x40010000
 800b648:	40000400 	.word	0x40000400
 800b64c:	40000800 	.word	0x40000800
 800b650:	40000c00 	.word	0x40000c00
 800b654:	40010400 	.word	0x40010400
 800b658:	40001800 	.word	0x40001800
 800b65c:	40014000 	.word	0x40014000
 800b660:	00010007 	.word	0x00010007

0800b664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	e049      	b.n	800b70a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d106      	bne.n	800b690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f841 	bl	800b712 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4610      	mov	r0, r2
 800b6a4:	f000 ff34 	bl	800c510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b712:	b480      	push	{r7}
 800b714:	b083      	sub	sp, #12
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b71a:	bf00      	nop
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
	...

0800b728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d109      	bne.n	800b74c <HAL_TIM_PWM_Start+0x24>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b01      	cmp	r3, #1
 800b742:	bf14      	ite	ne
 800b744:	2301      	movne	r3, #1
 800b746:	2300      	moveq	r3, #0
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	e03c      	b.n	800b7c6 <HAL_TIM_PWM_Start+0x9e>
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d109      	bne.n	800b766 <HAL_TIM_PWM_Start+0x3e>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	bf14      	ite	ne
 800b75e:	2301      	movne	r3, #1
 800b760:	2300      	moveq	r3, #0
 800b762:	b2db      	uxtb	r3, r3
 800b764:	e02f      	b.n	800b7c6 <HAL_TIM_PWM_Start+0x9e>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b08      	cmp	r3, #8
 800b76a:	d109      	bne.n	800b780 <HAL_TIM_PWM_Start+0x58>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b01      	cmp	r3, #1
 800b776:	bf14      	ite	ne
 800b778:	2301      	movne	r3, #1
 800b77a:	2300      	moveq	r3, #0
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	e022      	b.n	800b7c6 <HAL_TIM_PWM_Start+0x9e>
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	2b0c      	cmp	r3, #12
 800b784:	d109      	bne.n	800b79a <HAL_TIM_PWM_Start+0x72>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b01      	cmp	r3, #1
 800b790:	bf14      	ite	ne
 800b792:	2301      	movne	r3, #1
 800b794:	2300      	moveq	r3, #0
 800b796:	b2db      	uxtb	r3, r3
 800b798:	e015      	b.n	800b7c6 <HAL_TIM_PWM_Start+0x9e>
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	2b10      	cmp	r3, #16
 800b79e:	d109      	bne.n	800b7b4 <HAL_TIM_PWM_Start+0x8c>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	bf14      	ite	ne
 800b7ac:	2301      	movne	r3, #1
 800b7ae:	2300      	moveq	r3, #0
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	e008      	b.n	800b7c6 <HAL_TIM_PWM_Start+0x9e>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	bf14      	ite	ne
 800b7c0:	2301      	movne	r3, #1
 800b7c2:	2300      	moveq	r3, #0
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e0a1      	b.n	800b912 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d104      	bne.n	800b7de <HAL_TIM_PWM_Start+0xb6>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7dc:	e023      	b.n	800b826 <HAL_TIM_PWM_Start+0xfe>
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2b04      	cmp	r3, #4
 800b7e2:	d104      	bne.n	800b7ee <HAL_TIM_PWM_Start+0xc6>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7ec:	e01b      	b.n	800b826 <HAL_TIM_PWM_Start+0xfe>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b08      	cmp	r3, #8
 800b7f2:	d104      	bne.n	800b7fe <HAL_TIM_PWM_Start+0xd6>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7fc:	e013      	b.n	800b826 <HAL_TIM_PWM_Start+0xfe>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b0c      	cmp	r3, #12
 800b802:	d104      	bne.n	800b80e <HAL_TIM_PWM_Start+0xe6>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2202      	movs	r2, #2
 800b808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b80c:	e00b      	b.n	800b826 <HAL_TIM_PWM_Start+0xfe>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b10      	cmp	r3, #16
 800b812:	d104      	bne.n	800b81e <HAL_TIM_PWM_Start+0xf6>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b81c:	e003      	b.n	800b826 <HAL_TIM_PWM_Start+0xfe>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2202      	movs	r2, #2
 800b822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2201      	movs	r2, #1
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	4618      	mov	r0, r3
 800b830:	f001 fba6 	bl	800cf80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a38      	ldr	r2, [pc, #224]	; (800b91c <HAL_TIM_PWM_Start+0x1f4>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d013      	beq.n	800b866 <HAL_TIM_PWM_Start+0x13e>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a37      	ldr	r2, [pc, #220]	; (800b920 <HAL_TIM_PWM_Start+0x1f8>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d00e      	beq.n	800b866 <HAL_TIM_PWM_Start+0x13e>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a35      	ldr	r2, [pc, #212]	; (800b924 <HAL_TIM_PWM_Start+0x1fc>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d009      	beq.n	800b866 <HAL_TIM_PWM_Start+0x13e>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a34      	ldr	r2, [pc, #208]	; (800b928 <HAL_TIM_PWM_Start+0x200>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d004      	beq.n	800b866 <HAL_TIM_PWM_Start+0x13e>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a32      	ldr	r2, [pc, #200]	; (800b92c <HAL_TIM_PWM_Start+0x204>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d101      	bne.n	800b86a <HAL_TIM_PWM_Start+0x142>
 800b866:	2301      	movs	r3, #1
 800b868:	e000      	b.n	800b86c <HAL_TIM_PWM_Start+0x144>
 800b86a:	2300      	movs	r3, #0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d007      	beq.n	800b880 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b87e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a25      	ldr	r2, [pc, #148]	; (800b91c <HAL_TIM_PWM_Start+0x1f4>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d022      	beq.n	800b8d0 <HAL_TIM_PWM_Start+0x1a8>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b892:	d01d      	beq.n	800b8d0 <HAL_TIM_PWM_Start+0x1a8>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a25      	ldr	r2, [pc, #148]	; (800b930 <HAL_TIM_PWM_Start+0x208>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d018      	beq.n	800b8d0 <HAL_TIM_PWM_Start+0x1a8>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a24      	ldr	r2, [pc, #144]	; (800b934 <HAL_TIM_PWM_Start+0x20c>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d013      	beq.n	800b8d0 <HAL_TIM_PWM_Start+0x1a8>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a22      	ldr	r2, [pc, #136]	; (800b938 <HAL_TIM_PWM_Start+0x210>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d00e      	beq.n	800b8d0 <HAL_TIM_PWM_Start+0x1a8>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a1a      	ldr	r2, [pc, #104]	; (800b920 <HAL_TIM_PWM_Start+0x1f8>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d009      	beq.n	800b8d0 <HAL_TIM_PWM_Start+0x1a8>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a1e      	ldr	r2, [pc, #120]	; (800b93c <HAL_TIM_PWM_Start+0x214>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d004      	beq.n	800b8d0 <HAL_TIM_PWM_Start+0x1a8>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a16      	ldr	r2, [pc, #88]	; (800b924 <HAL_TIM_PWM_Start+0x1fc>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d115      	bne.n	800b8fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	4b1a      	ldr	r3, [pc, #104]	; (800b940 <HAL_TIM_PWM_Start+0x218>)
 800b8d8:	4013      	ands	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b06      	cmp	r3, #6
 800b8e0:	d015      	beq.n	800b90e <HAL_TIM_PWM_Start+0x1e6>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e8:	d011      	beq.n	800b90e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 0201 	orr.w	r2, r2, #1
 800b8f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8fa:	e008      	b.n	800b90e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f042 0201 	orr.w	r2, r2, #1
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	e000      	b.n	800b910 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b90e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	40010000 	.word	0x40010000
 800b920:	40010400 	.word	0x40010400
 800b924:	40014000 	.word	0x40014000
 800b928:	40014400 	.word	0x40014400
 800b92c:	40014800 	.word	0x40014800
 800b930:	40000400 	.word	0x40000400
 800b934:	40000800 	.word	0x40000800
 800b938:	40000c00 	.word	0x40000c00
 800b93c:	40001800 	.word	0x40001800
 800b940:	00010007 	.word	0x00010007

0800b944 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e049      	b.n	800b9ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f841 	bl	800b9f2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3304      	adds	r3, #4
 800b980:	4619      	mov	r1, r3
 800b982:	4610      	mov	r0, r2
 800b984:	f000 fdc4 	bl	800c510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
	...

0800ba08 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d104      	bne.n	800ba26 <HAL_TIM_IC_Start_IT+0x1e>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	e023      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d104      	bne.n	800ba36 <HAL_TIM_IC_Start_IT+0x2e>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	e01b      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b08      	cmp	r3, #8
 800ba3a:	d104      	bne.n	800ba46 <HAL_TIM_IC_Start_IT+0x3e>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	e013      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b0c      	cmp	r3, #12
 800ba4a:	d104      	bne.n	800ba56 <HAL_TIM_IC_Start_IT+0x4e>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	e00b      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b10      	cmp	r3, #16
 800ba5a:	d104      	bne.n	800ba66 <HAL_TIM_IC_Start_IT+0x5e>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	e003      	b.n	800ba6e <HAL_TIM_IC_Start_IT+0x66>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d104      	bne.n	800ba80 <HAL_TIM_IC_Start_IT+0x78>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	e013      	b.n	800baa8 <HAL_TIM_IC_Start_IT+0xa0>
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b04      	cmp	r3, #4
 800ba84:	d104      	bne.n	800ba90 <HAL_TIM_IC_Start_IT+0x88>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	e00b      	b.n	800baa8 <HAL_TIM_IC_Start_IT+0xa0>
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b08      	cmp	r3, #8
 800ba94:	d104      	bne.n	800baa0 <HAL_TIM_IC_Start_IT+0x98>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	e003      	b.n	800baa8 <HAL_TIM_IC_Start_IT+0xa0>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d102      	bne.n	800bab6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800bab0:	7b7b      	ldrb	r3, [r7, #13]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d001      	beq.n	800baba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e0e2      	b.n	800bc80 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d104      	bne.n	800baca <HAL_TIM_IC_Start_IT+0xc2>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bac8:	e023      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b04      	cmp	r3, #4
 800bace:	d104      	bne.n	800bada <HAL_TIM_IC_Start_IT+0xd2>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2202      	movs	r2, #2
 800bad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bad8:	e01b      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b08      	cmp	r3, #8
 800bade:	d104      	bne.n	800baea <HAL_TIM_IC_Start_IT+0xe2>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2202      	movs	r2, #2
 800bae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bae8:	e013      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b0c      	cmp	r3, #12
 800baee:	d104      	bne.n	800bafa <HAL_TIM_IC_Start_IT+0xf2>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2202      	movs	r2, #2
 800baf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800baf8:	e00b      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	2b10      	cmp	r3, #16
 800bafe:	d104      	bne.n	800bb0a <HAL_TIM_IC_Start_IT+0x102>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2202      	movs	r2, #2
 800bb04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb08:	e003      	b.n	800bb12 <HAL_TIM_IC_Start_IT+0x10a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2202      	movs	r2, #2
 800bb0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d104      	bne.n	800bb22 <HAL_TIM_IC_Start_IT+0x11a>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb20:	e013      	b.n	800bb4a <HAL_TIM_IC_Start_IT+0x142>
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	d104      	bne.n	800bb32 <HAL_TIM_IC_Start_IT+0x12a>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb30:	e00b      	b.n	800bb4a <HAL_TIM_IC_Start_IT+0x142>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	2b08      	cmp	r3, #8
 800bb36:	d104      	bne.n	800bb42 <HAL_TIM_IC_Start_IT+0x13a>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb40:	e003      	b.n	800bb4a <HAL_TIM_IC_Start_IT+0x142>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2202      	movs	r2, #2
 800bb46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b0c      	cmp	r3, #12
 800bb4e:	d841      	bhi.n	800bbd4 <HAL_TIM_IC_Start_IT+0x1cc>
 800bb50:	a201      	add	r2, pc, #4	; (adr r2, 800bb58 <HAL_TIM_IC_Start_IT+0x150>)
 800bb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb56:	bf00      	nop
 800bb58:	0800bb8d 	.word	0x0800bb8d
 800bb5c:	0800bbd5 	.word	0x0800bbd5
 800bb60:	0800bbd5 	.word	0x0800bbd5
 800bb64:	0800bbd5 	.word	0x0800bbd5
 800bb68:	0800bb9f 	.word	0x0800bb9f
 800bb6c:	0800bbd5 	.word	0x0800bbd5
 800bb70:	0800bbd5 	.word	0x0800bbd5
 800bb74:	0800bbd5 	.word	0x0800bbd5
 800bb78:	0800bbb1 	.word	0x0800bbb1
 800bb7c:	0800bbd5 	.word	0x0800bbd5
 800bb80:	0800bbd5 	.word	0x0800bbd5
 800bb84:	0800bbd5 	.word	0x0800bbd5
 800bb88:	0800bbc3 	.word	0x0800bbc3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68da      	ldr	r2, [r3, #12]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f042 0202 	orr.w	r2, r2, #2
 800bb9a:	60da      	str	r2, [r3, #12]
      break;
 800bb9c:	e01d      	b.n	800bbda <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f042 0204 	orr.w	r2, r2, #4
 800bbac:	60da      	str	r2, [r3, #12]
      break;
 800bbae:	e014      	b.n	800bbda <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f042 0208 	orr.w	r2, r2, #8
 800bbbe:	60da      	str	r2, [r3, #12]
      break;
 800bbc0:	e00b      	b.n	800bbda <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	68da      	ldr	r2, [r3, #12]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f042 0210 	orr.w	r2, r2, #16
 800bbd0:	60da      	str	r2, [r3, #12]
      break;
 800bbd2:	e002      	b.n	800bbda <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd8:	bf00      	nop
  }

  if (status == HAL_OK)
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d14e      	bne.n	800bc7e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f001 f9c9 	bl	800cf80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a25      	ldr	r2, [pc, #148]	; (800bc88 <HAL_TIM_IC_Start_IT+0x280>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d022      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc00:	d01d      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a21      	ldr	r2, [pc, #132]	; (800bc8c <HAL_TIM_IC_Start_IT+0x284>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d018      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a1f      	ldr	r2, [pc, #124]	; (800bc90 <HAL_TIM_IC_Start_IT+0x288>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d013      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a1e      	ldr	r2, [pc, #120]	; (800bc94 <HAL_TIM_IC_Start_IT+0x28c>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d00e      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a1c      	ldr	r2, [pc, #112]	; (800bc98 <HAL_TIM_IC_Start_IT+0x290>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d009      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a1b      	ldr	r2, [pc, #108]	; (800bc9c <HAL_TIM_IC_Start_IT+0x294>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d004      	beq.n	800bc3e <HAL_TIM_IC_Start_IT+0x236>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a19      	ldr	r2, [pc, #100]	; (800bca0 <HAL_TIM_IC_Start_IT+0x298>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d115      	bne.n	800bc6a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689a      	ldr	r2, [r3, #8]
 800bc44:	4b17      	ldr	r3, [pc, #92]	; (800bca4 <HAL_TIM_IC_Start_IT+0x29c>)
 800bc46:	4013      	ands	r3, r2
 800bc48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b06      	cmp	r3, #6
 800bc4e:	d015      	beq.n	800bc7c <HAL_TIM_IC_Start_IT+0x274>
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc56:	d011      	beq.n	800bc7c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f042 0201 	orr.w	r2, r2, #1
 800bc66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc68:	e008      	b.n	800bc7c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f042 0201 	orr.w	r2, r2, #1
 800bc78:	601a      	str	r2, [r3, #0]
 800bc7a:	e000      	b.n	800bc7e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc7c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	40010000 	.word	0x40010000
 800bc8c:	40000400 	.word	0x40000400
 800bc90:	40000800 	.word	0x40000800
 800bc94:	40000c00 	.word	0x40000c00
 800bc98:	40010400 	.word	0x40010400
 800bc9c:	40001800 	.word	0x40001800
 800bca0:	40014000 	.word	0x40014000
 800bca4:	00010007 	.word	0x00010007

0800bca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	f003 0302 	and.w	r3, r3, #2
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d122      	bne.n	800bd04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f003 0302 	and.w	r3, r3, #2
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d11b      	bne.n	800bd04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f06f 0202 	mvn.w	r2, #2
 800bcd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7f7 fbfe 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 800bcf0:	e005      	b.n	800bcfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fbee 	bl	800c4d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fbf5 	bl	800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	f003 0304 	and.w	r3, r3, #4
 800bd0e:	2b04      	cmp	r3, #4
 800bd10:	d122      	bne.n	800bd58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	d11b      	bne.n	800bd58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f06f 0204 	mvn.w	r2, #4
 800bd28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7f7 fbd4 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 800bd44:	e005      	b.n	800bd52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fbc4 	bl	800c4d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 fbcb 	bl	800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	f003 0308 	and.w	r3, r3, #8
 800bd62:	2b08      	cmp	r3, #8
 800bd64:	d122      	bne.n	800bdac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f003 0308 	and.w	r3, r3, #8
 800bd70:	2b08      	cmp	r3, #8
 800bd72:	d11b      	bne.n	800bdac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f06f 0208 	mvn.w	r2, #8
 800bd7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2204      	movs	r2, #4
 800bd82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	69db      	ldr	r3, [r3, #28]
 800bd8a:	f003 0303 	and.w	r3, r3, #3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f7f7 fbaa 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 800bd98:	e005      	b.n	800bda6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fb9a 	bl	800c4d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fba1 	bl	800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	f003 0310 	and.w	r3, r3, #16
 800bdb6:	2b10      	cmp	r3, #16
 800bdb8:	d122      	bne.n	800be00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	f003 0310 	and.w	r3, r3, #16
 800bdc4:	2b10      	cmp	r3, #16
 800bdc6:	d11b      	bne.n	800be00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f06f 0210 	mvn.w	r2, #16
 800bdd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2208      	movs	r2, #8
 800bdd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7f7 fb80 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 800bdec:	e005      	b.n	800bdfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fb70 	bl	800c4d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fb77 	bl	800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d10e      	bne.n	800be2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	f003 0301 	and.w	r3, r3, #1
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d107      	bne.n	800be2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f06f 0201 	mvn.w	r2, #1
 800be24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fb4a 	bl	800c4c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be36:	2b80      	cmp	r3, #128	; 0x80
 800be38:	d10e      	bne.n	800be58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be44:	2b80      	cmp	r3, #128	; 0x80
 800be46:	d107      	bne.n	800be58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f001 f952 	bl	800d0fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be66:	d10e      	bne.n	800be86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be72:	2b80      	cmp	r3, #128	; 0x80
 800be74:	d107      	bne.n	800be86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800be7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f001 f945 	bl	800d110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be90:	2b40      	cmp	r3, #64	; 0x40
 800be92:	d10e      	bne.n	800beb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9e:	2b40      	cmp	r3, #64	; 0x40
 800bea0:	d107      	bne.n	800beb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800beaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fb25 	bl	800c4fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	f003 0320 	and.w	r3, r3, #32
 800bebc:	2b20      	cmp	r3, #32
 800bebe:	d10e      	bne.n	800bede <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	f003 0320 	and.w	r3, r3, #32
 800beca:	2b20      	cmp	r3, #32
 800becc:	d107      	bne.n	800bede <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f06f 0220 	mvn.w	r2, #32
 800bed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f001 f905 	bl	800d0e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bede:	bf00      	nop
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b086      	sub	sp, #24
 800beea:	af00      	add	r7, sp, #0
 800beec:	60f8      	str	r0, [r7, #12]
 800beee:	60b9      	str	r1, [r7, #8]
 800bef0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800befc:	2b01      	cmp	r3, #1
 800befe:	d101      	bne.n	800bf04 <HAL_TIM_IC_ConfigChannel+0x1e>
 800bf00:	2302      	movs	r3, #2
 800bf02:	e088      	b.n	800c016 <HAL_TIM_IC_ConfigChannel+0x130>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d11b      	bne.n	800bf4a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	6819      	ldr	r1, [r3, #0]
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f000 fe65 	bl	800cbf0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	699a      	ldr	r2, [r3, #24]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f022 020c 	bic.w	r2, r2, #12
 800bf34:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6999      	ldr	r1, [r3, #24]
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	689a      	ldr	r2, [r3, #8]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	430a      	orrs	r2, r1
 800bf46:	619a      	str	r2, [r3, #24]
 800bf48:	e060      	b.n	800c00c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b04      	cmp	r3, #4
 800bf4e:	d11c      	bne.n	800bf8a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6818      	ldr	r0, [r3, #0]
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	6819      	ldr	r1, [r3, #0]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	f000 fee9 	bl	800cd36 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	699a      	ldr	r2, [r3, #24]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bf72:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6999      	ldr	r1, [r3, #24]
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	021a      	lsls	r2, r3, #8
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	430a      	orrs	r2, r1
 800bf86:	619a      	str	r2, [r3, #24]
 800bf88:	e040      	b.n	800c00c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b08      	cmp	r3, #8
 800bf8e:	d11b      	bne.n	800bfc8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6818      	ldr	r0, [r3, #0]
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	6819      	ldr	r1, [r3, #0]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	685a      	ldr	r2, [r3, #4]
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f000 ff36 	bl	800ce10 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	69da      	ldr	r2, [r3, #28]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f022 020c 	bic.w	r2, r2, #12
 800bfb2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	69d9      	ldr	r1, [r3, #28]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	689a      	ldr	r2, [r3, #8]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	430a      	orrs	r2, r1
 800bfc4:	61da      	str	r2, [r3, #28]
 800bfc6:	e021      	b.n	800c00c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b0c      	cmp	r3, #12
 800bfcc:	d11c      	bne.n	800c008 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6818      	ldr	r0, [r3, #0]
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	6819      	ldr	r1, [r3, #0]
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	685a      	ldr	r2, [r3, #4]
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	f000 ff53 	bl	800ce88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	69da      	ldr	r2, [r3, #28]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bff0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	69d9      	ldr	r1, [r3, #28]
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	021a      	lsls	r2, r3, #8
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	61da      	str	r2, [r3, #28]
 800c006:	e001      	b.n	800c00c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c014:	7dfb      	ldrb	r3, [r7, #23]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3718      	adds	r7, #24
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
	...

0800c020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c036:	2b01      	cmp	r3, #1
 800c038:	d101      	bne.n	800c03e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c03a:	2302      	movs	r3, #2
 800c03c:	e0ff      	b.n	800c23e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2201      	movs	r2, #1
 800c042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b14      	cmp	r3, #20
 800c04a:	f200 80f0 	bhi.w	800c22e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c04e:	a201      	add	r2, pc, #4	; (adr r2, 800c054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c054:	0800c0a9 	.word	0x0800c0a9
 800c058:	0800c22f 	.word	0x0800c22f
 800c05c:	0800c22f 	.word	0x0800c22f
 800c060:	0800c22f 	.word	0x0800c22f
 800c064:	0800c0e9 	.word	0x0800c0e9
 800c068:	0800c22f 	.word	0x0800c22f
 800c06c:	0800c22f 	.word	0x0800c22f
 800c070:	0800c22f 	.word	0x0800c22f
 800c074:	0800c12b 	.word	0x0800c12b
 800c078:	0800c22f 	.word	0x0800c22f
 800c07c:	0800c22f 	.word	0x0800c22f
 800c080:	0800c22f 	.word	0x0800c22f
 800c084:	0800c16b 	.word	0x0800c16b
 800c088:	0800c22f 	.word	0x0800c22f
 800c08c:	0800c22f 	.word	0x0800c22f
 800c090:	0800c22f 	.word	0x0800c22f
 800c094:	0800c1ad 	.word	0x0800c1ad
 800c098:	0800c22f 	.word	0x0800c22f
 800c09c:	0800c22f 	.word	0x0800c22f
 800c0a0:	0800c22f 	.word	0x0800c22f
 800c0a4:	0800c1ed 	.word	0x0800c1ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68b9      	ldr	r1, [r7, #8]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 fac8 	bl	800c644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	699a      	ldr	r2, [r3, #24]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f042 0208 	orr.w	r2, r2, #8
 800c0c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	699a      	ldr	r2, [r3, #24]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f022 0204 	bic.w	r2, r2, #4
 800c0d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6999      	ldr	r1, [r3, #24]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	691a      	ldr	r2, [r3, #16]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	619a      	str	r2, [r3, #24]
      break;
 800c0e6:	e0a5      	b.n	800c234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68b9      	ldr	r1, [r7, #8]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 fb38 	bl	800c764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	699a      	ldr	r2, [r3, #24]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	699a      	ldr	r2, [r3, #24]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6999      	ldr	r1, [r3, #24]
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	021a      	lsls	r2, r3, #8
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	430a      	orrs	r2, r1
 800c126:	619a      	str	r2, [r3, #24]
      break;
 800c128:	e084      	b.n	800c234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68b9      	ldr	r1, [r7, #8]
 800c130:	4618      	mov	r0, r3
 800c132:	f000 fba1 	bl	800c878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	69da      	ldr	r2, [r3, #28]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f042 0208 	orr.w	r2, r2, #8
 800c144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	69da      	ldr	r2, [r3, #28]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f022 0204 	bic.w	r2, r2, #4
 800c154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	69d9      	ldr	r1, [r3, #28]
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	691a      	ldr	r2, [r3, #16]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	430a      	orrs	r2, r1
 800c166:	61da      	str	r2, [r3, #28]
      break;
 800c168:	e064      	b.n	800c234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	68b9      	ldr	r1, [r7, #8]
 800c170:	4618      	mov	r0, r3
 800c172:	f000 fc09 	bl	800c988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	69da      	ldr	r2, [r3, #28]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	69da      	ldr	r2, [r3, #28]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69d9      	ldr	r1, [r3, #28]
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	021a      	lsls	r2, r3, #8
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	430a      	orrs	r2, r1
 800c1a8:	61da      	str	r2, [r3, #28]
      break;
 800c1aa:	e043      	b.n	800c234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f000 fc52 	bl	800ca5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f042 0208 	orr.w	r2, r2, #8
 800c1c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f022 0204 	bic.w	r2, r2, #4
 800c1d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	691a      	ldr	r2, [r3, #16]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	430a      	orrs	r2, r1
 800c1e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c1ea:	e023      	b.n	800c234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68b9      	ldr	r1, [r7, #8]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f000 fc96 	bl	800cb24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	021a      	lsls	r2, r3, #8
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	430a      	orrs	r2, r1
 800c22a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c22c:	e002      	b.n	800c234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	75fb      	strb	r3, [r7, #23]
      break;
 800c232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3718      	adds	r7, #24
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop

0800c248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c252:	2300      	movs	r3, #0
 800c254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d101      	bne.n	800c264 <HAL_TIM_ConfigClockSource+0x1c>
 800c260:	2302      	movs	r3, #2
 800c262:	e0dc      	b.n	800c41e <HAL_TIM_ConfigClockSource+0x1d6>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2202      	movs	r2, #2
 800c270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	4b6a      	ldr	r3, [pc, #424]	; (800c428 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c280:	4013      	ands	r3, r2
 800c282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c28a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68ba      	ldr	r2, [r7, #8]
 800c292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a64      	ldr	r2, [pc, #400]	; (800c42c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	f000 80a9 	beq.w	800c3f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c2a0:	4a62      	ldr	r2, [pc, #392]	; (800c42c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	f200 80ae 	bhi.w	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2a8:	4a61      	ldr	r2, [pc, #388]	; (800c430 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	f000 80a1 	beq.w	800c3f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c2b0:	4a5f      	ldr	r2, [pc, #380]	; (800c430 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	f200 80a6 	bhi.w	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2b8:	4a5e      	ldr	r2, [pc, #376]	; (800c434 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	f000 8099 	beq.w	800c3f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c2c0:	4a5c      	ldr	r2, [pc, #368]	; (800c434 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	f200 809e 	bhi.w	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c2cc:	f000 8091 	beq.w	800c3f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c2d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c2d4:	f200 8096 	bhi.w	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2dc:	f000 8089 	beq.w	800c3f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c2e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2e4:	f200 808e 	bhi.w	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2ec:	d03e      	beq.n	800c36c <HAL_TIM_ConfigClockSource+0x124>
 800c2ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2f2:	f200 8087 	bhi.w	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2fa:	f000 8086 	beq.w	800c40a <HAL_TIM_ConfigClockSource+0x1c2>
 800c2fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c302:	d87f      	bhi.n	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c304:	2b70      	cmp	r3, #112	; 0x70
 800c306:	d01a      	beq.n	800c33e <HAL_TIM_ConfigClockSource+0xf6>
 800c308:	2b70      	cmp	r3, #112	; 0x70
 800c30a:	d87b      	bhi.n	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c30c:	2b60      	cmp	r3, #96	; 0x60
 800c30e:	d050      	beq.n	800c3b2 <HAL_TIM_ConfigClockSource+0x16a>
 800c310:	2b60      	cmp	r3, #96	; 0x60
 800c312:	d877      	bhi.n	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c314:	2b50      	cmp	r3, #80	; 0x50
 800c316:	d03c      	beq.n	800c392 <HAL_TIM_ConfigClockSource+0x14a>
 800c318:	2b50      	cmp	r3, #80	; 0x50
 800c31a:	d873      	bhi.n	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c31c:	2b40      	cmp	r3, #64	; 0x40
 800c31e:	d058      	beq.n	800c3d2 <HAL_TIM_ConfigClockSource+0x18a>
 800c320:	2b40      	cmp	r3, #64	; 0x40
 800c322:	d86f      	bhi.n	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c324:	2b30      	cmp	r3, #48	; 0x30
 800c326:	d064      	beq.n	800c3f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c328:	2b30      	cmp	r3, #48	; 0x30
 800c32a:	d86b      	bhi.n	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c32c:	2b20      	cmp	r3, #32
 800c32e:	d060      	beq.n	800c3f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c330:	2b20      	cmp	r3, #32
 800c332:	d867      	bhi.n	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
 800c334:	2b00      	cmp	r3, #0
 800c336:	d05c      	beq.n	800c3f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c338:	2b10      	cmp	r3, #16
 800c33a:	d05a      	beq.n	800c3f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c33c:	e062      	b.n	800c404 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	6899      	ldr	r1, [r3, #8]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	f000 fdf7 	bl	800cf40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	609a      	str	r2, [r3, #8]
      break;
 800c36a:	e04f      	b.n	800c40c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6818      	ldr	r0, [r3, #0]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	6899      	ldr	r1, [r3, #8]
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	685a      	ldr	r2, [r3, #4]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	f000 fde0 	bl	800cf40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689a      	ldr	r2, [r3, #8]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c38e:	609a      	str	r2, [r3, #8]
      break;
 800c390:	e03c      	b.n	800c40c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	6859      	ldr	r1, [r3, #4]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f000 fc9a 	bl	800ccd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2150      	movs	r1, #80	; 0x50
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 fdaa 	bl	800cf04 <TIM_ITRx_SetConfig>
      break;
 800c3b0:	e02c      	b.n	800c40c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	6859      	ldr	r1, [r3, #4]
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f000 fcf6 	bl	800cdb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2160      	movs	r1, #96	; 0x60
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fd9a 	bl	800cf04 <TIM_ITRx_SetConfig>
      break;
 800c3d0:	e01c      	b.n	800c40c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	6859      	ldr	r1, [r3, #4]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f000 fc7a 	bl	800ccd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2140      	movs	r1, #64	; 0x40
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 fd8a 	bl	800cf04 <TIM_ITRx_SetConfig>
      break;
 800c3f0:	e00c      	b.n	800c40c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	f000 fd81 	bl	800cf04 <TIM_ITRx_SetConfig>
      break;
 800c402:	e003      	b.n	800c40c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]
      break;
 800c408:	e000      	b.n	800c40c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c40a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	ffceff88 	.word	0xffceff88
 800c42c:	00100040 	.word	0x00100040
 800c430:	00100030 	.word	0x00100030
 800c434:	00100020 	.word	0x00100020

0800c438 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b0c      	cmp	r3, #12
 800c44a:	d831      	bhi.n	800c4b0 <HAL_TIM_ReadCapturedValue+0x78>
 800c44c:	a201      	add	r2, pc, #4	; (adr r2, 800c454 <HAL_TIM_ReadCapturedValue+0x1c>)
 800c44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c452:	bf00      	nop
 800c454:	0800c489 	.word	0x0800c489
 800c458:	0800c4b1 	.word	0x0800c4b1
 800c45c:	0800c4b1 	.word	0x0800c4b1
 800c460:	0800c4b1 	.word	0x0800c4b1
 800c464:	0800c493 	.word	0x0800c493
 800c468:	0800c4b1 	.word	0x0800c4b1
 800c46c:	0800c4b1 	.word	0x0800c4b1
 800c470:	0800c4b1 	.word	0x0800c4b1
 800c474:	0800c49d 	.word	0x0800c49d
 800c478:	0800c4b1 	.word	0x0800c4b1
 800c47c:	0800c4b1 	.word	0x0800c4b1
 800c480:	0800c4b1 	.word	0x0800c4b1
 800c484:	0800c4a7 	.word	0x0800c4a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48e:	60fb      	str	r3, [r7, #12]

      break;
 800c490:	e00f      	b.n	800c4b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c498:	60fb      	str	r3, [r7, #12]

      break;
 800c49a:	e00a      	b.n	800c4b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a2:	60fb      	str	r3, [r7, #12]

      break;
 800c4a4:	e005      	b.n	800c4b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ac:	60fb      	str	r3, [r7, #12]

      break;
 800c4ae:	e000      	b.n	800c4b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c4b0:	bf00      	nop
  }

  return tmpreg;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a40      	ldr	r2, [pc, #256]	; (800c624 <TIM_Base_SetConfig+0x114>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d013      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c52e:	d00f      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a3d      	ldr	r2, [pc, #244]	; (800c628 <TIM_Base_SetConfig+0x118>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d00b      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a3c      	ldr	r2, [pc, #240]	; (800c62c <TIM_Base_SetConfig+0x11c>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d007      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a3b      	ldr	r2, [pc, #236]	; (800c630 <TIM_Base_SetConfig+0x120>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d003      	beq.n	800c550 <TIM_Base_SetConfig+0x40>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a3a      	ldr	r2, [pc, #232]	; (800c634 <TIM_Base_SetConfig+0x124>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d108      	bne.n	800c562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	4313      	orrs	r3, r2
 800c560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a2f      	ldr	r2, [pc, #188]	; (800c624 <TIM_Base_SetConfig+0x114>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d01f      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c570:	d01b      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a2c      	ldr	r2, [pc, #176]	; (800c628 <TIM_Base_SetConfig+0x118>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d017      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a2b      	ldr	r2, [pc, #172]	; (800c62c <TIM_Base_SetConfig+0x11c>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d013      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a2a      	ldr	r2, [pc, #168]	; (800c630 <TIM_Base_SetConfig+0x120>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d00f      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4a29      	ldr	r2, [pc, #164]	; (800c634 <TIM_Base_SetConfig+0x124>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d00b      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a28      	ldr	r2, [pc, #160]	; (800c638 <TIM_Base_SetConfig+0x128>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d007      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a27      	ldr	r2, [pc, #156]	; (800c63c <TIM_Base_SetConfig+0x12c>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d003      	beq.n	800c5aa <TIM_Base_SetConfig+0x9a>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4a26      	ldr	r2, [pc, #152]	; (800c640 <TIM_Base_SetConfig+0x130>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d108      	bne.n	800c5bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	689a      	ldr	r2, [r3, #8]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a10      	ldr	r2, [pc, #64]	; (800c624 <TIM_Base_SetConfig+0x114>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d00f      	beq.n	800c608 <TIM_Base_SetConfig+0xf8>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a12      	ldr	r2, [pc, #72]	; (800c634 <TIM_Base_SetConfig+0x124>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d00b      	beq.n	800c608 <TIM_Base_SetConfig+0xf8>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a11      	ldr	r2, [pc, #68]	; (800c638 <TIM_Base_SetConfig+0x128>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d007      	beq.n	800c608 <TIM_Base_SetConfig+0xf8>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a10      	ldr	r2, [pc, #64]	; (800c63c <TIM_Base_SetConfig+0x12c>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d003      	beq.n	800c608 <TIM_Base_SetConfig+0xf8>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a0f      	ldr	r2, [pc, #60]	; (800c640 <TIM_Base_SetConfig+0x130>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d103      	bne.n	800c610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	691a      	ldr	r2, [r3, #16]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	615a      	str	r2, [r3, #20]
}
 800c616:	bf00      	nop
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	40010000 	.word	0x40010000
 800c628:	40000400 	.word	0x40000400
 800c62c:	40000800 	.word	0x40000800
 800c630:	40000c00 	.word	0x40000c00
 800c634:	40010400 	.word	0x40010400
 800c638:	40014000 	.word	0x40014000
 800c63c:	40014400 	.word	0x40014400
 800c640:	40014800 	.word	0x40014800

0800c644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c644:	b480      	push	{r7}
 800c646:	b087      	sub	sp, #28
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	f023 0201 	bic.w	r2, r3, #1
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	4b37      	ldr	r3, [pc, #220]	; (800c74c <TIM_OC1_SetConfig+0x108>)
 800c670:	4013      	ands	r3, r2
 800c672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f023 0303 	bic.w	r3, r3, #3
 800c67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	4313      	orrs	r3, r2
 800c684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f023 0302 	bic.w	r3, r3, #2
 800c68c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	4313      	orrs	r3, r2
 800c696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a2d      	ldr	r2, [pc, #180]	; (800c750 <TIM_OC1_SetConfig+0x10c>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d00f      	beq.n	800c6c0 <TIM_OC1_SetConfig+0x7c>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a2c      	ldr	r2, [pc, #176]	; (800c754 <TIM_OC1_SetConfig+0x110>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d00b      	beq.n	800c6c0 <TIM_OC1_SetConfig+0x7c>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a2b      	ldr	r2, [pc, #172]	; (800c758 <TIM_OC1_SetConfig+0x114>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d007      	beq.n	800c6c0 <TIM_OC1_SetConfig+0x7c>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a2a      	ldr	r2, [pc, #168]	; (800c75c <TIM_OC1_SetConfig+0x118>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d003      	beq.n	800c6c0 <TIM_OC1_SetConfig+0x7c>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a29      	ldr	r2, [pc, #164]	; (800c760 <TIM_OC1_SetConfig+0x11c>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d10c      	bne.n	800c6da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	f023 0308 	bic.w	r3, r3, #8
 800c6c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	f023 0304 	bic.w	r3, r3, #4
 800c6d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a1c      	ldr	r2, [pc, #112]	; (800c750 <TIM_OC1_SetConfig+0x10c>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d00f      	beq.n	800c702 <TIM_OC1_SetConfig+0xbe>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a1b      	ldr	r2, [pc, #108]	; (800c754 <TIM_OC1_SetConfig+0x110>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d00b      	beq.n	800c702 <TIM_OC1_SetConfig+0xbe>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a1a      	ldr	r2, [pc, #104]	; (800c758 <TIM_OC1_SetConfig+0x114>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d007      	beq.n	800c702 <TIM_OC1_SetConfig+0xbe>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a19      	ldr	r2, [pc, #100]	; (800c75c <TIM_OC1_SetConfig+0x118>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d003      	beq.n	800c702 <TIM_OC1_SetConfig+0xbe>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a18      	ldr	r2, [pc, #96]	; (800c760 <TIM_OC1_SetConfig+0x11c>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d111      	bne.n	800c726 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	4313      	orrs	r3, r2
 800c71a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	4313      	orrs	r3, r2
 800c724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	697a      	ldr	r2, [r7, #20]
 800c73e:	621a      	str	r2, [r3, #32]
}
 800c740:	bf00      	nop
 800c742:	371c      	adds	r7, #28
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	fffeff8f 	.word	0xfffeff8f
 800c750:	40010000 	.word	0x40010000
 800c754:	40010400 	.word	0x40010400
 800c758:	40014000 	.word	0x40014000
 800c75c:	40014400 	.word	0x40014400
 800c760:	40014800 	.word	0x40014800

0800c764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	f023 0210 	bic.w	r2, r3, #16
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	4b34      	ldr	r3, [pc, #208]	; (800c860 <TIM_OC2_SetConfig+0xfc>)
 800c790:	4013      	ands	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c79a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	021b      	lsls	r3, r3, #8
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	f023 0320 	bic.w	r3, r3, #32
 800c7ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	011b      	lsls	r3, r3, #4
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a29      	ldr	r2, [pc, #164]	; (800c864 <TIM_OC2_SetConfig+0x100>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d003      	beq.n	800c7cc <TIM_OC2_SetConfig+0x68>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a28      	ldr	r2, [pc, #160]	; (800c868 <TIM_OC2_SetConfig+0x104>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d10d      	bne.n	800c7e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	011b      	lsls	r3, r3, #4
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a1e      	ldr	r2, [pc, #120]	; (800c864 <TIM_OC2_SetConfig+0x100>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d00f      	beq.n	800c810 <TIM_OC2_SetConfig+0xac>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a1d      	ldr	r2, [pc, #116]	; (800c868 <TIM_OC2_SetConfig+0x104>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d00b      	beq.n	800c810 <TIM_OC2_SetConfig+0xac>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a1c      	ldr	r2, [pc, #112]	; (800c86c <TIM_OC2_SetConfig+0x108>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d007      	beq.n	800c810 <TIM_OC2_SetConfig+0xac>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a1b      	ldr	r2, [pc, #108]	; (800c870 <TIM_OC2_SetConfig+0x10c>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d003      	beq.n	800c810 <TIM_OC2_SetConfig+0xac>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a1a      	ldr	r2, [pc, #104]	; (800c874 <TIM_OC2_SetConfig+0x110>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d113      	bne.n	800c838 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c81e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	695b      	ldr	r3, [r3, #20]
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	4313      	orrs	r3, r2
 800c82a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	4313      	orrs	r3, r2
 800c836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	697a      	ldr	r2, [r7, #20]
 800c850:	621a      	str	r2, [r3, #32]
}
 800c852:	bf00      	nop
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	feff8fff 	.word	0xfeff8fff
 800c864:	40010000 	.word	0x40010000
 800c868:	40010400 	.word	0x40010400
 800c86c:	40014000 	.word	0x40014000
 800c870:	40014400 	.word	0x40014400
 800c874:	40014800 	.word	0x40014800

0800c878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c878:	b480      	push	{r7}
 800c87a:	b087      	sub	sp, #28
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a1b      	ldr	r3, [r3, #32]
 800c892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	69db      	ldr	r3, [r3, #28]
 800c89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	4b33      	ldr	r3, [pc, #204]	; (800c970 <TIM_OC3_SetConfig+0xf8>)
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 0303 	bic.w	r3, r3, #3
 800c8ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	021b      	lsls	r3, r3, #8
 800c8c8:	697a      	ldr	r2, [r7, #20]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a28      	ldr	r2, [pc, #160]	; (800c974 <TIM_OC3_SetConfig+0xfc>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d003      	beq.n	800c8de <TIM_OC3_SetConfig+0x66>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a27      	ldr	r2, [pc, #156]	; (800c978 <TIM_OC3_SetConfig+0x100>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d10d      	bne.n	800c8fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	021b      	lsls	r3, r3, #8
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a1d      	ldr	r2, [pc, #116]	; (800c974 <TIM_OC3_SetConfig+0xfc>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d00f      	beq.n	800c922 <TIM_OC3_SetConfig+0xaa>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a1c      	ldr	r2, [pc, #112]	; (800c978 <TIM_OC3_SetConfig+0x100>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d00b      	beq.n	800c922 <TIM_OC3_SetConfig+0xaa>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a1b      	ldr	r2, [pc, #108]	; (800c97c <TIM_OC3_SetConfig+0x104>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d007      	beq.n	800c922 <TIM_OC3_SetConfig+0xaa>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4a1a      	ldr	r2, [pc, #104]	; (800c980 <TIM_OC3_SetConfig+0x108>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d003      	beq.n	800c922 <TIM_OC3_SetConfig+0xaa>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4a19      	ldr	r2, [pc, #100]	; (800c984 <TIM_OC3_SetConfig+0x10c>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d113      	bne.n	800c94a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	011b      	lsls	r3, r3, #4
 800c938:	693a      	ldr	r2, [r7, #16]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	699b      	ldr	r3, [r3, #24]
 800c942:	011b      	lsls	r3, r3, #4
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	4313      	orrs	r3, r2
 800c948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	693a      	ldr	r2, [r7, #16]
 800c94e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	685a      	ldr	r2, [r3, #4]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	697a      	ldr	r2, [r7, #20]
 800c962:	621a      	str	r2, [r3, #32]
}
 800c964:	bf00      	nop
 800c966:	371c      	adds	r7, #28
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	fffeff8f 	.word	0xfffeff8f
 800c974:	40010000 	.word	0x40010000
 800c978:	40010400 	.word	0x40010400
 800c97c:	40014000 	.word	0x40014000
 800c980:	40014400 	.word	0x40014400
 800c984:	40014800 	.word	0x40014800

0800c988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c988:	b480      	push	{r7}
 800c98a:	b087      	sub	sp, #28
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	69db      	ldr	r3, [r3, #28]
 800c9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	4b24      	ldr	r3, [pc, #144]	; (800ca44 <TIM_OC4_SetConfig+0xbc>)
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	021b      	lsls	r3, r3, #8
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	031b      	lsls	r3, r3, #12
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4a19      	ldr	r2, [pc, #100]	; (800ca48 <TIM_OC4_SetConfig+0xc0>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d00f      	beq.n	800ca08 <TIM_OC4_SetConfig+0x80>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a18      	ldr	r2, [pc, #96]	; (800ca4c <TIM_OC4_SetConfig+0xc4>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d00b      	beq.n	800ca08 <TIM_OC4_SetConfig+0x80>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a17      	ldr	r2, [pc, #92]	; (800ca50 <TIM_OC4_SetConfig+0xc8>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d007      	beq.n	800ca08 <TIM_OC4_SetConfig+0x80>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a16      	ldr	r2, [pc, #88]	; (800ca54 <TIM_OC4_SetConfig+0xcc>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d003      	beq.n	800ca08 <TIM_OC4_SetConfig+0x80>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a15      	ldr	r2, [pc, #84]	; (800ca58 <TIM_OC4_SetConfig+0xd0>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d109      	bne.n	800ca1c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	019b      	lsls	r3, r3, #6
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	621a      	str	r2, [r3, #32]
}
 800ca36:	bf00      	nop
 800ca38:	371c      	adds	r7, #28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	feff8fff 	.word	0xfeff8fff
 800ca48:	40010000 	.word	0x40010000
 800ca4c:	40010400 	.word	0x40010400
 800ca50:	40014000 	.word	0x40014000
 800ca54:	40014400 	.word	0x40014400
 800ca58:	40014800 	.word	0x40014800

0800ca5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b087      	sub	sp, #28
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a1b      	ldr	r3, [r3, #32]
 800ca6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a1b      	ldr	r3, [r3, #32]
 800ca76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca84:	68fa      	ldr	r2, [r7, #12]
 800ca86:	4b21      	ldr	r3, [pc, #132]	; (800cb0c <TIM_OC5_SetConfig+0xb0>)
 800ca88:	4013      	ands	r3, r2
 800ca8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	041b      	lsls	r3, r3, #16
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	4313      	orrs	r3, r2
 800caa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4a18      	ldr	r2, [pc, #96]	; (800cb10 <TIM_OC5_SetConfig+0xb4>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d00f      	beq.n	800cad2 <TIM_OC5_SetConfig+0x76>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4a17      	ldr	r2, [pc, #92]	; (800cb14 <TIM_OC5_SetConfig+0xb8>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d00b      	beq.n	800cad2 <TIM_OC5_SetConfig+0x76>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4a16      	ldr	r2, [pc, #88]	; (800cb18 <TIM_OC5_SetConfig+0xbc>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d007      	beq.n	800cad2 <TIM_OC5_SetConfig+0x76>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	4a15      	ldr	r2, [pc, #84]	; (800cb1c <TIM_OC5_SetConfig+0xc0>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d003      	beq.n	800cad2 <TIM_OC5_SetConfig+0x76>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4a14      	ldr	r2, [pc, #80]	; (800cb20 <TIM_OC5_SetConfig+0xc4>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d109      	bne.n	800cae6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	695b      	ldr	r3, [r3, #20]
 800cade:	021b      	lsls	r3, r3, #8
 800cae0:	697a      	ldr	r2, [r7, #20]
 800cae2:	4313      	orrs	r3, r2
 800cae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	697a      	ldr	r2, [r7, #20]
 800caea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	685a      	ldr	r2, [r3, #4]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	621a      	str	r2, [r3, #32]
}
 800cb00:	bf00      	nop
 800cb02:	371c      	adds	r7, #28
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	fffeff8f 	.word	0xfffeff8f
 800cb10:	40010000 	.word	0x40010000
 800cb14:	40010400 	.word	0x40010400
 800cb18:	40014000 	.word	0x40014000
 800cb1c:	40014400 	.word	0x40014400
 800cb20:	40014800 	.word	0x40014800

0800cb24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a1b      	ldr	r3, [r3, #32]
 800cb3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	4b22      	ldr	r3, [pc, #136]	; (800cbd8 <TIM_OC6_SetConfig+0xb4>)
 800cb50:	4013      	ands	r3, r2
 800cb52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	021b      	lsls	r3, r3, #8
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	051b      	lsls	r3, r3, #20
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a19      	ldr	r2, [pc, #100]	; (800cbdc <TIM_OC6_SetConfig+0xb8>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d00f      	beq.n	800cb9c <TIM_OC6_SetConfig+0x78>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a18      	ldr	r2, [pc, #96]	; (800cbe0 <TIM_OC6_SetConfig+0xbc>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d00b      	beq.n	800cb9c <TIM_OC6_SetConfig+0x78>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a17      	ldr	r2, [pc, #92]	; (800cbe4 <TIM_OC6_SetConfig+0xc0>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d007      	beq.n	800cb9c <TIM_OC6_SetConfig+0x78>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a16      	ldr	r2, [pc, #88]	; (800cbe8 <TIM_OC6_SetConfig+0xc4>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d003      	beq.n	800cb9c <TIM_OC6_SetConfig+0x78>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a15      	ldr	r2, [pc, #84]	; (800cbec <TIM_OC6_SetConfig+0xc8>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d109      	bne.n	800cbb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	695b      	ldr	r3, [r3, #20]
 800cba8:	029b      	lsls	r3, r3, #10
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	697a      	ldr	r2, [r7, #20]
 800cbb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	621a      	str	r2, [r3, #32]
}
 800cbca:	bf00      	nop
 800cbcc:	371c      	adds	r7, #28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	feff8fff 	.word	0xfeff8fff
 800cbdc:	40010000 	.word	0x40010000
 800cbe0:	40010400 	.word	0x40010400
 800cbe4:	40014000 	.word	0x40014000
 800cbe8:	40014400 	.word	0x40014400
 800cbec:	40014800 	.word	0x40014800

0800cbf0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b087      	sub	sp, #28
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	f023 0201 	bic.w	r2, r3, #1
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	699b      	ldr	r3, [r3, #24]
 800cc0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6a1b      	ldr	r3, [r3, #32]
 800cc14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4a28      	ldr	r2, [pc, #160]	; (800ccbc <TIM_TI1_SetConfig+0xcc>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d01b      	beq.n	800cc56 <TIM_TI1_SetConfig+0x66>
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc24:	d017      	beq.n	800cc56 <TIM_TI1_SetConfig+0x66>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	4a25      	ldr	r2, [pc, #148]	; (800ccc0 <TIM_TI1_SetConfig+0xd0>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d013      	beq.n	800cc56 <TIM_TI1_SetConfig+0x66>
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	4a24      	ldr	r2, [pc, #144]	; (800ccc4 <TIM_TI1_SetConfig+0xd4>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d00f      	beq.n	800cc56 <TIM_TI1_SetConfig+0x66>
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	4a23      	ldr	r2, [pc, #140]	; (800ccc8 <TIM_TI1_SetConfig+0xd8>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d00b      	beq.n	800cc56 <TIM_TI1_SetConfig+0x66>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	4a22      	ldr	r2, [pc, #136]	; (800cccc <TIM_TI1_SetConfig+0xdc>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d007      	beq.n	800cc56 <TIM_TI1_SetConfig+0x66>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	4a21      	ldr	r2, [pc, #132]	; (800ccd0 <TIM_TI1_SetConfig+0xe0>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d003      	beq.n	800cc56 <TIM_TI1_SetConfig+0x66>
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	4a20      	ldr	r2, [pc, #128]	; (800ccd4 <TIM_TI1_SetConfig+0xe4>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d101      	bne.n	800cc5a <TIM_TI1_SetConfig+0x6a>
 800cc56:	2301      	movs	r3, #1
 800cc58:	e000      	b.n	800cc5c <TIM_TI1_SetConfig+0x6c>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d008      	beq.n	800cc72 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	f023 0303 	bic.w	r3, r3, #3
 800cc66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	617b      	str	r3, [r7, #20]
 800cc70:	e003      	b.n	800cc7a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	f043 0301 	orr.w	r3, r3, #1
 800cc78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	011b      	lsls	r3, r3, #4
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	697a      	ldr	r2, [r7, #20]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	f023 030a 	bic.w	r3, r3, #10
 800cc94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	f003 030a 	and.w	r3, r3, #10
 800cc9c:	693a      	ldr	r2, [r7, #16]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	693a      	ldr	r2, [r7, #16]
 800ccac:	621a      	str	r2, [r3, #32]
}
 800ccae:	bf00      	nop
 800ccb0:	371c      	adds	r7, #28
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	40010000 	.word	0x40010000
 800ccc0:	40000400 	.word	0x40000400
 800ccc4:	40000800 	.word	0x40000800
 800ccc8:	40000c00 	.word	0x40000c00
 800cccc:	40010400 	.word	0x40010400
 800ccd0:	40001800 	.word	0x40001800
 800ccd4:	40014000 	.word	0x40014000

0800ccd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b087      	sub	sp, #28
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6a1b      	ldr	r3, [r3, #32]
 800cce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	f023 0201 	bic.w	r2, r3, #1
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	011b      	lsls	r3, r3, #4
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f023 030a 	bic.w	r3, r3, #10
 800cd14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd16:	697a      	ldr	r2, [r7, #20]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	693a      	ldr	r2, [r7, #16]
 800cd22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	697a      	ldr	r2, [r7, #20]
 800cd28:	621a      	str	r2, [r3, #32]
}
 800cd2a:	bf00      	nop
 800cd2c:	371c      	adds	r7, #28
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cd36:	b480      	push	{r7}
 800cd38:	b087      	sub	sp, #28
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	60f8      	str	r0, [r7, #12]
 800cd3e:	60b9      	str	r1, [r7, #8]
 800cd40:	607a      	str	r2, [r7, #4]
 800cd42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6a1b      	ldr	r3, [r3, #32]
 800cd48:	f023 0210 	bic.w	r2, r3, #16
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	699b      	ldr	r3, [r3, #24]
 800cd54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	021b      	lsls	r3, r3, #8
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	031b      	lsls	r3, r3, #12
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	697a      	ldr	r2, [r7, #20]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	011b      	lsls	r3, r3, #4
 800cd8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	697a      	ldr	r2, [r7, #20]
 800cd9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	693a      	ldr	r2, [r7, #16]
 800cda2:	621a      	str	r2, [r3, #32]
}
 800cda4:	bf00      	nop
 800cda6:	371c      	adds	r7, #28
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b087      	sub	sp, #28
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6a1b      	ldr	r3, [r3, #32]
 800cdc0:	f023 0210 	bic.w	r2, r3, #16
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cdda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	031b      	lsls	r3, r3, #12
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cdec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	011b      	lsls	r3, r3, #4
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	693a      	ldr	r2, [r7, #16]
 800ce02:	621a      	str	r2, [r3, #32]
}
 800ce04:	bf00      	nop
 800ce06:	371c      	adds	r7, #28
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b087      	sub	sp, #28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
 800ce1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6a1b      	ldr	r3, [r3, #32]
 800ce22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6a1b      	ldr	r3, [r3, #32]
 800ce34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	f023 0303 	bic.w	r3, r3, #3
 800ce3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	011b      	lsls	r3, r3, #4
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ce60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	021b      	lsls	r3, r3, #8
 800ce66:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	621a      	str	r2, [r3, #32]
}
 800ce7c:	bf00      	nop
 800ce7e:	371c      	adds	r7, #28
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	6a1b      	ldr	r3, [r3, #32]
 800ce9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	69db      	ldr	r3, [r3, #28]
 800cea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	021b      	lsls	r3, r3, #8
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cec6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	031b      	lsls	r3, r3, #12
 800cecc:	b29b      	uxth	r3, r3
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ceda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	031b      	lsls	r3, r3, #12
 800cee0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	693a      	ldr	r2, [r7, #16]
 800cef4:	621a      	str	r2, [r3, #32]
}
 800cef6:	bf00      	nop
 800cef8:	371c      	adds	r7, #28
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
	...

0800cf04 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <TIM_ITRx_SetConfig+0x38>)
 800cf18:	4013      	ands	r3, r2
 800cf1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	f043 0307 	orr.w	r3, r3, #7
 800cf26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	609a      	str	r2, [r3, #8]
}
 800cf2e:	bf00      	nop
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	ffcfff8f 	.word	0xffcfff8f

0800cf40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b087      	sub	sp, #28
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	021a      	lsls	r2, r3, #8
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	431a      	orrs	r2, r3
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	697a      	ldr	r2, [r7, #20]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	697a      	ldr	r2, [r7, #20]
 800cf72:	609a      	str	r2, [r3, #8]
}
 800cf74:	bf00      	nop
 800cf76:	371c      	adds	r7, #28
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b087      	sub	sp, #28
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	f003 031f 	and.w	r3, r3, #31
 800cf92:	2201      	movs	r2, #1
 800cf94:	fa02 f303 	lsl.w	r3, r2, r3
 800cf98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6a1a      	ldr	r2, [r3, #32]
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	43db      	mvns	r3, r3
 800cfa2:	401a      	ands	r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6a1a      	ldr	r2, [r3, #32]
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	f003 031f 	and.w	r3, r3, #31
 800cfb2:	6879      	ldr	r1, [r7, #4]
 800cfb4:	fa01 f303 	lsl.w	r3, r1, r3
 800cfb8:	431a      	orrs	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	621a      	str	r2, [r3, #32]
}
 800cfbe:	bf00      	nop
 800cfc0:	371c      	adds	r7, #28
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
	...

0800cfcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d101      	bne.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cfe0:	2302      	movs	r3, #2
 800cfe2:	e06d      	b.n	800d0c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2202      	movs	r2, #2
 800cff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a30      	ldr	r2, [pc, #192]	; (800d0cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d004      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a2f      	ldr	r2, [pc, #188]	; (800d0d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d108      	bne.n	800d02a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d01e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	4313      	orrs	r3, r2
 800d028:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d030:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	4313      	orrs	r3, r2
 800d03a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a20      	ldr	r2, [pc, #128]	; (800d0cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d022      	beq.n	800d094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d056:	d01d      	beq.n	800d094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a1d      	ldr	r2, [pc, #116]	; (800d0d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d018      	beq.n	800d094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a1c      	ldr	r2, [pc, #112]	; (800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d013      	beq.n	800d094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a1a      	ldr	r2, [pc, #104]	; (800d0dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d00e      	beq.n	800d094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a15      	ldr	r2, [pc, #84]	; (800d0d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d009      	beq.n	800d094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a16      	ldr	r2, [pc, #88]	; (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d004      	beq.n	800d094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a15      	ldr	r2, [pc, #84]	; (800d0e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d10c      	bne.n	800d0ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d09a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	40010000 	.word	0x40010000
 800d0d0:	40010400 	.word	0x40010400
 800d0d4:	40000400 	.word	0x40000400
 800d0d8:	40000800 	.word	0x40000800
 800d0dc:	40000c00 	.word	0x40000c00
 800d0e0:	40001800 	.word	0x40001800
 800d0e4:	40014000 	.word	0x40014000

0800d0e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	e04a      	b.n	800d1cc <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d106      	bne.n	800d14e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f7f5 fe65 	bl	8002e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2224      	movs	r2, #36	; 0x24
 800d152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f022 0201 	bic.w	r2, r2, #1
 800d164:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 fcfa 	bl	800db60 <UART_SetConfig>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d101      	bne.n	800d176 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e02a      	b.n	800d1cc <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d002      	beq.n	800d184 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f001 fa56 	bl	800e630 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	685a      	ldr	r2, [r3, #4]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	689a      	ldr	r2, [r3, #8]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800d1a2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689a      	ldr	r2, [r3, #8]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f042 0208 	orr.w	r2, r2, #8
 800d1b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f042 0201 	orr.w	r2, r2, #1
 800d1c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f001 fad5 	bl	800e774 <UART_CheckIdleState>
 800d1ca:	4603      	mov	r3, r0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b091      	sub	sp, #68	; 0x44
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1e8:	2b20      	cmp	r3, #32
 800d1ea:	f040 808c 	bne.w	800d306 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <HAL_UART_Transmit_IT+0x26>
 800d1f4:	88fb      	ldrh	r3, [r7, #6]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e084      	b.n	800d308 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d204:	2b01      	cmp	r3, #1
 800d206:	d101      	bne.n	800d20c <HAL_UART_Transmit_IT+0x38>
 800d208:	2302      	movs	r3, #2
 800d20a:	e07d      	b.n	800d308 <HAL_UART_Transmit_IT+0x134>
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	88fa      	ldrh	r2, [r7, #6]
 800d21e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	88fa      	ldrh	r2, [r7, #6]
 800d226:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2200      	movs	r2, #0
 800d234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2221      	movs	r2, #33	; 0x21
 800d23c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d248:	d12e      	bne.n	800d2a8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d252:	d107      	bne.n	800d264 <HAL_UART_Transmit_IT+0x90>
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	691b      	ldr	r3, [r3, #16]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d103      	bne.n	800d264 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	4a2d      	ldr	r2, [pc, #180]	; (800d314 <HAL_UART_Transmit_IT+0x140>)
 800d260:	675a      	str	r2, [r3, #116]	; 0x74
 800d262:	e002      	b.n	800d26a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	4a2c      	ldr	r2, [pc, #176]	; (800d318 <HAL_UART_Transmit_IT+0x144>)
 800d268:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	3308      	adds	r3, #8
 800d278:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27c:	e853 3f00 	ldrex	r3, [r3]
 800d280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d288:	63bb      	str	r3, [r7, #56]	; 0x38
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3308      	adds	r3, #8
 800d290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d292:	637a      	str	r2, [r7, #52]	; 0x34
 800d294:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d29a:	e841 2300 	strex	r3, r2, [r1]
 800d29e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1e5      	bne.n	800d272 <HAL_UART_Transmit_IT+0x9e>
 800d2a6:	e02c      	b.n	800d302 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2b0:	d107      	bne.n	800d2c2 <HAL_UART_Transmit_IT+0xee>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d103      	bne.n	800d2c2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	4a17      	ldr	r2, [pc, #92]	; (800d31c <HAL_UART_Transmit_IT+0x148>)
 800d2be:	675a      	str	r2, [r3, #116]	; 0x74
 800d2c0:	e002      	b.n	800d2c8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	4a16      	ldr	r2, [pc, #88]	; (800d320 <HAL_UART_Transmit_IT+0x14c>)
 800d2c6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	e853 3f00 	ldrex	r3, [r3]
 800d2dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ee:	623b      	str	r3, [r7, #32]
 800d2f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f2:	69f9      	ldr	r1, [r7, #28]
 800d2f4:	6a3a      	ldr	r2, [r7, #32]
 800d2f6:	e841 2300 	strex	r3, r2, [r1]
 800d2fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d1e6      	bne.n	800d2d0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	e000      	b.n	800d308 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d306:	2302      	movs	r3, #2
  }
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3744      	adds	r7, #68	; 0x44
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	0800f09d 	.word	0x0800f09d
 800d318:	0800efbd 	.word	0x0800efbd
 800d31c:	0800eefb 	.word	0x0800eefb
 800d320:	0800ee43 	.word	0x0800ee43

0800d324 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b08a      	sub	sp, #40	; 0x28
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	4613      	mov	r3, r2
 800d330:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d338:	2b20      	cmp	r3, #32
 800d33a:	d142      	bne.n	800d3c2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <HAL_UART_Receive_DMA+0x24>
 800d342:	88fb      	ldrh	r3, [r7, #6]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d101      	bne.n	800d34c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	e03b      	b.n	800d3c4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d352:	2b01      	cmp	r3, #1
 800d354:	d101      	bne.n	800d35a <HAL_UART_Receive_DMA+0x36>
 800d356:	2302      	movs	r3, #2
 800d358:	e034      	b.n	800d3c4 <HAL_UART_Receive_DMA+0xa0>
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2201      	movs	r2, #1
 800d35e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a17      	ldr	r2, [pc, #92]	; (800d3cc <HAL_UART_Receive_DMA+0xa8>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d01f      	beq.n	800d3b2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d018      	beq.n	800d3b2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	e853 3f00 	ldrex	r3, [r3]
 800d38c:	613b      	str	r3, [r7, #16]
   return(result);
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d394:	627b      	str	r3, [r7, #36]	; 0x24
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	461a      	mov	r2, r3
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	623b      	str	r3, [r7, #32]
 800d3a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a2:	69f9      	ldr	r1, [r7, #28]
 800d3a4:	6a3a      	ldr	r2, [r7, #32]
 800d3a6:	e841 2300 	strex	r3, r2, [r1]
 800d3aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1e6      	bne.n	800d380 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d3b2:	88fb      	ldrh	r3, [r7, #6]
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	68b9      	ldr	r1, [r7, #8]
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f001 faef 	bl	800e99c <UART_Start_Receive_DMA>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	e000      	b.n	800d3c4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d3c2:	2302      	movs	r3, #2
  }
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3728      	adds	r7, #40	; 0x28
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	58000c00 	.word	0x58000c00

0800d3d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b0ba      	sub	sp, #232	; 0xe8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	69db      	ldr	r3, [r3, #28]
 800d3de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d3f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d3fa:	f640 030f 	movw	r3, #2063	; 0x80f
 800d3fe:	4013      	ands	r3, r2
 800d400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d11b      	bne.n	800d444 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d410:	f003 0320 	and.w	r3, r3, #32
 800d414:	2b00      	cmp	r3, #0
 800d416:	d015      	beq.n	800d444 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d41c:	f003 0320 	and.w	r3, r3, #32
 800d420:	2b00      	cmp	r3, #0
 800d422:	d105      	bne.n	800d430 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d009      	beq.n	800d444 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 835a 	beq.w	800daee <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	4798      	blx	r3
      }
      return;
 800d442:	e354      	b.n	800daee <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f000 811f 	beq.w	800d68c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d44e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d452:	4b8b      	ldr	r3, [pc, #556]	; (800d680 <HAL_UART_IRQHandler+0x2b0>)
 800d454:	4013      	ands	r3, r2
 800d456:	2b00      	cmp	r3, #0
 800d458:	d106      	bne.n	800d468 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d45a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d45e:	4b89      	ldr	r3, [pc, #548]	; (800d684 <HAL_UART_IRQHandler+0x2b4>)
 800d460:	4013      	ands	r3, r2
 800d462:	2b00      	cmp	r3, #0
 800d464:	f000 8112 	beq.w	800d68c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	2b00      	cmp	r3, #0
 800d472:	d011      	beq.n	800d498 <HAL_UART_IRQHandler+0xc8>
 800d474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00b      	beq.n	800d498 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2201      	movs	r2, #1
 800d486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d48e:	f043 0201 	orr.w	r2, r3, #1
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d49c:	f003 0302 	and.w	r3, r3, #2
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d011      	beq.n	800d4c8 <HAL_UART_IRQHandler+0xf8>
 800d4a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4a8:	f003 0301 	and.w	r3, r3, #1
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00b      	beq.n	800d4c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2202      	movs	r2, #2
 800d4b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4be:	f043 0204 	orr.w	r2, r3, #4
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4cc:	f003 0304 	and.w	r3, r3, #4
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d011      	beq.n	800d4f8 <HAL_UART_IRQHandler+0x128>
 800d4d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d00b      	beq.n	800d4f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2204      	movs	r2, #4
 800d4e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4ee:	f043 0202 	orr.w	r2, r3, #2
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4fc:	f003 0308 	and.w	r3, r3, #8
 800d500:	2b00      	cmp	r3, #0
 800d502:	d017      	beq.n	800d534 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d508:	f003 0320 	and.w	r3, r3, #32
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d105      	bne.n	800d51c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d510:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d514:	4b5a      	ldr	r3, [pc, #360]	; (800d680 <HAL_UART_IRQHandler+0x2b0>)
 800d516:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00b      	beq.n	800d534 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2208      	movs	r2, #8
 800d522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d52a:	f043 0208 	orr.w	r2, r3, #8
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d012      	beq.n	800d566 <HAL_UART_IRQHandler+0x196>
 800d540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00c      	beq.n	800d566 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d55c:	f043 0220 	orr.w	r2, r3, #32
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 82c0 	beq.w	800daf2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d576:	f003 0320 	and.w	r3, r3, #32
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d013      	beq.n	800d5a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d57e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d582:	f003 0320 	and.w	r3, r3, #32
 800d586:	2b00      	cmp	r3, #0
 800d588:	d105      	bne.n	800d596 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d58a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d58e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d592:	2b00      	cmp	r3, #0
 800d594:	d007      	beq.n	800d5a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d003      	beq.n	800d5a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ba:	2b40      	cmp	r3, #64	; 0x40
 800d5bc:	d005      	beq.n	800d5ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d5be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d04f      	beq.n	800d66a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f001 fad0 	bl	800eb70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5da:	2b40      	cmp	r3, #64	; 0x40
 800d5dc:	d141      	bne.n	800d662 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3308      	adds	r3, #8
 800d5e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5ec:	e853 3f00 	ldrex	r3, [r3]
 800d5f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d5f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	3308      	adds	r3, #8
 800d606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d60a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d60e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d61a:	e841 2300 	strex	r3, r2, [r1]
 800d61e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1d9      	bne.n	800d5de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d013      	beq.n	800d65a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d636:	4a14      	ldr	r2, [pc, #80]	; (800d688 <HAL_UART_IRQHandler+0x2b8>)
 800d638:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f8 fd70 	bl	8006124 <HAL_DMA_Abort_IT>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d017      	beq.n	800d67a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d654:	4610      	mov	r0, r2
 800d656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d658:	e00f      	b.n	800d67a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fa6a 	bl	800db34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d660:	e00b      	b.n	800d67a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 fa66 	bl	800db34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d668:	e007      	b.n	800d67a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fa62 	bl	800db34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d678:	e23b      	b.n	800daf2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d67a:	bf00      	nop
    return;
 800d67c:	e239      	b.n	800daf2 <HAL_UART_IRQHandler+0x722>
 800d67e:	bf00      	nop
 800d680:	10000001 	.word	0x10000001
 800d684:	04000120 	.word	0x04000120
 800d688:	0800ee17 	.word	0x0800ee17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d690:	2b01      	cmp	r3, #1
 800d692:	f040 81ce 	bne.w	800da32 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d69a:	f003 0310 	and.w	r3, r3, #16
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f000 81c7 	beq.w	800da32 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6a8:	f003 0310 	and.w	r3, r3, #16
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f000 81c0 	beq.w	800da32 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2210      	movs	r2, #16
 800d6b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c4:	2b40      	cmp	r3, #64	; 0x40
 800d6c6:	f040 813b 	bne.w	800d940 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a8b      	ldr	r2, [pc, #556]	; (800d900 <HAL_UART_IRQHandler+0x530>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d059      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a89      	ldr	r2, [pc, #548]	; (800d904 <HAL_UART_IRQHandler+0x534>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d053      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a87      	ldr	r2, [pc, #540]	; (800d908 <HAL_UART_IRQHandler+0x538>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d04d      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a85      	ldr	r2, [pc, #532]	; (800d90c <HAL_UART_IRQHandler+0x53c>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d047      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a83      	ldr	r2, [pc, #524]	; (800d910 <HAL_UART_IRQHandler+0x540>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d041      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a81      	ldr	r2, [pc, #516]	; (800d914 <HAL_UART_IRQHandler+0x544>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d03b      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a7f      	ldr	r2, [pc, #508]	; (800d918 <HAL_UART_IRQHandler+0x548>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d035      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a7d      	ldr	r2, [pc, #500]	; (800d91c <HAL_UART_IRQHandler+0x54c>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d02f      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a7b      	ldr	r2, [pc, #492]	; (800d920 <HAL_UART_IRQHandler+0x550>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d029      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a79      	ldr	r2, [pc, #484]	; (800d924 <HAL_UART_IRQHandler+0x554>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d023      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a77      	ldr	r2, [pc, #476]	; (800d928 <HAL_UART_IRQHandler+0x558>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d01d      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a75      	ldr	r2, [pc, #468]	; (800d92c <HAL_UART_IRQHandler+0x55c>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d017      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a73      	ldr	r2, [pc, #460]	; (800d930 <HAL_UART_IRQHandler+0x560>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d011      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a71      	ldr	r2, [pc, #452]	; (800d934 <HAL_UART_IRQHandler+0x564>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d00b      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a6f      	ldr	r2, [pc, #444]	; (800d938 <HAL_UART_IRQHandler+0x568>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d005      	beq.n	800d78a <HAL_UART_IRQHandler+0x3ba>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a6d      	ldr	r2, [pc, #436]	; (800d93c <HAL_UART_IRQHandler+0x56c>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d105      	bne.n	800d796 <HAL_UART_IRQHandler+0x3c6>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	b29b      	uxth	r3, r3
 800d794:	e004      	b.n	800d7a0 <HAL_UART_IRQHandler+0x3d0>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d7a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f000 81a4 	beq.w	800daf6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	f080 819c 	bcs.w	800daf6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d7c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7cc:	69db      	ldr	r3, [r3, #28]
 800d7ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7d2:	f000 8086 	beq.w	800d8e2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d7e2:	e853 3f00 	ldrex	r3, [r3]
 800d7e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d7ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d804:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d808:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d80c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d810:	e841 2300 	strex	r3, r2, [r1]
 800d814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d1da      	bne.n	800d7d6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	3308      	adds	r3, #8
 800d826:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d82a:	e853 3f00 	ldrex	r3, [r3]
 800d82e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d832:	f023 0301 	bic.w	r3, r3, #1
 800d836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3308      	adds	r3, #8
 800d840:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d844:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d848:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d84a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d84c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d850:	e841 2300 	strex	r3, r2, [r1]
 800d854:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1e1      	bne.n	800d820 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	3308      	adds	r3, #8
 800d862:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d866:	e853 3f00 	ldrex	r3, [r3]
 800d86a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d86c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d86e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	3308      	adds	r3, #8
 800d87c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d880:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d882:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d884:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d888:	e841 2300 	strex	r3, r2, [r1]
 800d88c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d88e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1e3      	bne.n	800d85c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2220      	movs	r2, #32
 800d898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8aa:	e853 3f00 	ldrex	r3, [r3]
 800d8ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d8b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8b2:	f023 0310 	bic.w	r3, r3, #16
 800d8b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	461a      	mov	r2, r3
 800d8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d8c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8cc:	e841 2300 	strex	r3, r2, [r1]
 800d8d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1e4      	bne.n	800d8a2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7f8 f903 	bl	8005ae8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f926 	bl	800db48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d8fc:	e0fb      	b.n	800daf6 <HAL_UART_IRQHandler+0x726>
 800d8fe:	bf00      	nop
 800d900:	40020010 	.word	0x40020010
 800d904:	40020028 	.word	0x40020028
 800d908:	40020040 	.word	0x40020040
 800d90c:	40020058 	.word	0x40020058
 800d910:	40020070 	.word	0x40020070
 800d914:	40020088 	.word	0x40020088
 800d918:	400200a0 	.word	0x400200a0
 800d91c:	400200b8 	.word	0x400200b8
 800d920:	40020410 	.word	0x40020410
 800d924:	40020428 	.word	0x40020428
 800d928:	40020440 	.word	0x40020440
 800d92c:	40020458 	.word	0x40020458
 800d930:	40020470 	.word	0x40020470
 800d934:	40020488 	.word	0x40020488
 800d938:	400204a0 	.word	0x400204a0
 800d93c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f000 80cc 	beq.w	800dafa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 80c7 	beq.w	800dafa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d974:	e853 3f00 	ldrex	r3, [r3]
 800d978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d97c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	461a      	mov	r2, r3
 800d98a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d98e:	647b      	str	r3, [r7, #68]	; 0x44
 800d990:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d992:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d996:	e841 2300 	strex	r3, r2, [r1]
 800d99a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1e4      	bne.n	800d96c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3308      	adds	r3, #8
 800d9a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	e853 3f00 	ldrex	r3, [r3]
 800d9b0:	623b      	str	r3, [r7, #32]
   return(result);
 800d9b2:	6a3a      	ldr	r2, [r7, #32]
 800d9b4:	4b54      	ldr	r3, [pc, #336]	; (800db08 <HAL_UART_IRQHandler+0x738>)
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3308      	adds	r3, #8
 800d9c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d9c6:	633a      	str	r2, [r7, #48]	; 0x30
 800d9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ce:	e841 2300 	strex	r3, r2, [r1]
 800d9d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1e3      	bne.n	800d9a2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2220      	movs	r2, #32
 800d9de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	e853 3f00 	ldrex	r3, [r3]
 800d9fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f023 0310 	bic.w	r3, r3, #16
 800da02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800da10:	61fb      	str	r3, [r7, #28]
 800da12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da14:	69b9      	ldr	r1, [r7, #24]
 800da16:	69fa      	ldr	r2, [r7, #28]
 800da18:	e841 2300 	strex	r3, r2, [r1]
 800da1c:	617b      	str	r3, [r7, #20]
   return(result);
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d1e4      	bne.n	800d9ee <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f88c 	bl	800db48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da30:	e063      	b.n	800dafa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800da32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00e      	beq.n	800da5c <HAL_UART_IRQHandler+0x68c>
 800da3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da46:	2b00      	cmp	r3, #0
 800da48:	d008      	beq.n	800da5c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800da52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f001 fbc1 	bl	800f1dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da5a:	e051      	b.n	800db00 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800da5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da64:	2b00      	cmp	r3, #0
 800da66:	d014      	beq.n	800da92 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800da68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da70:	2b00      	cmp	r3, #0
 800da72:	d105      	bne.n	800da80 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800da74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d008      	beq.n	800da92 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da84:	2b00      	cmp	r3, #0
 800da86:	d03a      	beq.n	800dafe <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	4798      	blx	r3
    }
    return;
 800da90:	e035      	b.n	800dafe <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800da92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d009      	beq.n	800dab2 <HAL_UART_IRQHandler+0x6e2>
 800da9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d003      	beq.n	800dab2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f001 fb6b 	bl	800f186 <UART_EndTransmit_IT>
    return;
 800dab0:	e026      	b.n	800db00 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d009      	beq.n	800dad2 <HAL_UART_IRQHandler+0x702>
 800dabe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dac2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d003      	beq.n	800dad2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f001 fb9a 	bl	800f204 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dad0:	e016      	b.n	800db00 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d010      	beq.n	800db00 <HAL_UART_IRQHandler+0x730>
 800dade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	da0c      	bge.n	800db00 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f001 fb82 	bl	800f1f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800daec:	e008      	b.n	800db00 <HAL_UART_IRQHandler+0x730>
      return;
 800daee:	bf00      	nop
 800daf0:	e006      	b.n	800db00 <HAL_UART_IRQHandler+0x730>
    return;
 800daf2:	bf00      	nop
 800daf4:	e004      	b.n	800db00 <HAL_UART_IRQHandler+0x730>
      return;
 800daf6:	bf00      	nop
 800daf8:	e002      	b.n	800db00 <HAL_UART_IRQHandler+0x730>
      return;
 800dafa:	bf00      	nop
 800dafc:	e000      	b.n	800db00 <HAL_UART_IRQHandler+0x730>
    return;
 800dafe:	bf00      	nop
  }
}
 800db00:	37e8      	adds	r7, #232	; 0xe8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	effffffe 	.word	0xeffffffe

0800db0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800db14:	bf00      	nop
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800db3c:	bf00      	nop
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	460b      	mov	r3, r1
 800db52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db54:	bf00      	nop
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db64:	b092      	sub	sp, #72	; 0x48
 800db66:	af00      	add	r7, sp, #0
 800db68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	689a      	ldr	r2, [r3, #8]
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	691b      	ldr	r3, [r3, #16]
 800db78:	431a      	orrs	r2, r3
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	431a      	orrs	r2, r3
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	69db      	ldr	r3, [r3, #28]
 800db84:	4313      	orrs	r3, r2
 800db86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	4bbe      	ldr	r3, [pc, #760]	; (800de88 <UART_SetConfig+0x328>)
 800db90:	4013      	ands	r3, r2
 800db92:	697a      	ldr	r2, [r7, #20]
 800db94:	6812      	ldr	r2, [r2, #0]
 800db96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db98:	430b      	orrs	r3, r1
 800db9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	68da      	ldr	r2, [r3, #12]
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4ab3      	ldr	r2, [pc, #716]	; (800de8c <UART_SetConfig+0x32c>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d004      	beq.n	800dbcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	6a1b      	ldr	r3, [r3, #32]
 800dbc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	689a      	ldr	r2, [r3, #8]
 800dbd2:	4baf      	ldr	r3, [pc, #700]	; (800de90 <UART_SetConfig+0x330>)
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	6812      	ldr	r2, [r2, #0]
 800dbda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbdc:	430b      	orrs	r3, r1
 800dbde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe6:	f023 010f 	bic.w	r1, r3, #15
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	430a      	orrs	r2, r1
 800dbf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4aa6      	ldr	r2, [pc, #664]	; (800de94 <UART_SetConfig+0x334>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d177      	bne.n	800dcf0 <UART_SetConfig+0x190>
 800dc00:	4ba5      	ldr	r3, [pc, #660]	; (800de98 <UART_SetConfig+0x338>)
 800dc02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc08:	2b28      	cmp	r3, #40	; 0x28
 800dc0a:	d86d      	bhi.n	800dce8 <UART_SetConfig+0x188>
 800dc0c:	a201      	add	r2, pc, #4	; (adr r2, 800dc14 <UART_SetConfig+0xb4>)
 800dc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc12:	bf00      	nop
 800dc14:	0800dcb9 	.word	0x0800dcb9
 800dc18:	0800dce9 	.word	0x0800dce9
 800dc1c:	0800dce9 	.word	0x0800dce9
 800dc20:	0800dce9 	.word	0x0800dce9
 800dc24:	0800dce9 	.word	0x0800dce9
 800dc28:	0800dce9 	.word	0x0800dce9
 800dc2c:	0800dce9 	.word	0x0800dce9
 800dc30:	0800dce9 	.word	0x0800dce9
 800dc34:	0800dcc1 	.word	0x0800dcc1
 800dc38:	0800dce9 	.word	0x0800dce9
 800dc3c:	0800dce9 	.word	0x0800dce9
 800dc40:	0800dce9 	.word	0x0800dce9
 800dc44:	0800dce9 	.word	0x0800dce9
 800dc48:	0800dce9 	.word	0x0800dce9
 800dc4c:	0800dce9 	.word	0x0800dce9
 800dc50:	0800dce9 	.word	0x0800dce9
 800dc54:	0800dcc9 	.word	0x0800dcc9
 800dc58:	0800dce9 	.word	0x0800dce9
 800dc5c:	0800dce9 	.word	0x0800dce9
 800dc60:	0800dce9 	.word	0x0800dce9
 800dc64:	0800dce9 	.word	0x0800dce9
 800dc68:	0800dce9 	.word	0x0800dce9
 800dc6c:	0800dce9 	.word	0x0800dce9
 800dc70:	0800dce9 	.word	0x0800dce9
 800dc74:	0800dcd1 	.word	0x0800dcd1
 800dc78:	0800dce9 	.word	0x0800dce9
 800dc7c:	0800dce9 	.word	0x0800dce9
 800dc80:	0800dce9 	.word	0x0800dce9
 800dc84:	0800dce9 	.word	0x0800dce9
 800dc88:	0800dce9 	.word	0x0800dce9
 800dc8c:	0800dce9 	.word	0x0800dce9
 800dc90:	0800dce9 	.word	0x0800dce9
 800dc94:	0800dcd9 	.word	0x0800dcd9
 800dc98:	0800dce9 	.word	0x0800dce9
 800dc9c:	0800dce9 	.word	0x0800dce9
 800dca0:	0800dce9 	.word	0x0800dce9
 800dca4:	0800dce9 	.word	0x0800dce9
 800dca8:	0800dce9 	.word	0x0800dce9
 800dcac:	0800dce9 	.word	0x0800dce9
 800dcb0:	0800dce9 	.word	0x0800dce9
 800dcb4:	0800dce1 	.word	0x0800dce1
 800dcb8:	2301      	movs	r3, #1
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e222      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcc0:	2304      	movs	r3, #4
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e21e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcc8:	2308      	movs	r3, #8
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcce:	e21a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcd0:	2310      	movs	r3, #16
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd6:	e216      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcd8:	2320      	movs	r3, #32
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcde:	e212      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dce0:	2340      	movs	r3, #64	; 0x40
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce6:	e20e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dce8:	2380      	movs	r3, #128	; 0x80
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcee:	e20a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a69      	ldr	r2, [pc, #420]	; (800de9c <UART_SetConfig+0x33c>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d130      	bne.n	800dd5c <UART_SetConfig+0x1fc>
 800dcfa:	4b67      	ldr	r3, [pc, #412]	; (800de98 <UART_SetConfig+0x338>)
 800dcfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcfe:	f003 0307 	and.w	r3, r3, #7
 800dd02:	2b05      	cmp	r3, #5
 800dd04:	d826      	bhi.n	800dd54 <UART_SetConfig+0x1f4>
 800dd06:	a201      	add	r2, pc, #4	; (adr r2, 800dd0c <UART_SetConfig+0x1ac>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800dd25 	.word	0x0800dd25
 800dd10:	0800dd2d 	.word	0x0800dd2d
 800dd14:	0800dd35 	.word	0x0800dd35
 800dd18:	0800dd3d 	.word	0x0800dd3d
 800dd1c:	0800dd45 	.word	0x0800dd45
 800dd20:	0800dd4d 	.word	0x0800dd4d
 800dd24:	2300      	movs	r3, #0
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e1ec      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd2c:	2304      	movs	r3, #4
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd32:	e1e8      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd34:	2308      	movs	r3, #8
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3a:	e1e4      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd3c:	2310      	movs	r3, #16
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd42:	e1e0      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd44:	2320      	movs	r3, #32
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e1dc      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd4c:	2340      	movs	r3, #64	; 0x40
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e1d8      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd54:	2380      	movs	r3, #128	; 0x80
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5a:	e1d4      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a4f      	ldr	r2, [pc, #316]	; (800dea0 <UART_SetConfig+0x340>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d130      	bne.n	800ddc8 <UART_SetConfig+0x268>
 800dd66:	4b4c      	ldr	r3, [pc, #304]	; (800de98 <UART_SetConfig+0x338>)
 800dd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd6a:	f003 0307 	and.w	r3, r3, #7
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	d826      	bhi.n	800ddc0 <UART_SetConfig+0x260>
 800dd72:	a201      	add	r2, pc, #4	; (adr r2, 800dd78 <UART_SetConfig+0x218>)
 800dd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd78:	0800dd91 	.word	0x0800dd91
 800dd7c:	0800dd99 	.word	0x0800dd99
 800dd80:	0800dda1 	.word	0x0800dda1
 800dd84:	0800dda9 	.word	0x0800dda9
 800dd88:	0800ddb1 	.word	0x0800ddb1
 800dd8c:	0800ddb9 	.word	0x0800ddb9
 800dd90:	2300      	movs	r3, #0
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd96:	e1b6      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd98:	2304      	movs	r3, #4
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9e:	e1b2      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dda0:	2308      	movs	r3, #8
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda6:	e1ae      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dda8:	2310      	movs	r3, #16
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddae:	e1aa      	b.n	800e106 <UART_SetConfig+0x5a6>
 800ddb0:	2320      	movs	r3, #32
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb6:	e1a6      	b.n	800e106 <UART_SetConfig+0x5a6>
 800ddb8:	2340      	movs	r3, #64	; 0x40
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddbe:	e1a2      	b.n	800e106 <UART_SetConfig+0x5a6>
 800ddc0:	2380      	movs	r3, #128	; 0x80
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc6:	e19e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a35      	ldr	r2, [pc, #212]	; (800dea4 <UART_SetConfig+0x344>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d130      	bne.n	800de34 <UART_SetConfig+0x2d4>
 800ddd2:	4b31      	ldr	r3, [pc, #196]	; (800de98 <UART_SetConfig+0x338>)
 800ddd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddd6:	f003 0307 	and.w	r3, r3, #7
 800ddda:	2b05      	cmp	r3, #5
 800dddc:	d826      	bhi.n	800de2c <UART_SetConfig+0x2cc>
 800ddde:	a201      	add	r2, pc, #4	; (adr r2, 800dde4 <UART_SetConfig+0x284>)
 800dde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde4:	0800ddfd 	.word	0x0800ddfd
 800dde8:	0800de05 	.word	0x0800de05
 800ddec:	0800de0d 	.word	0x0800de0d
 800ddf0:	0800de15 	.word	0x0800de15
 800ddf4:	0800de1d 	.word	0x0800de1d
 800ddf8:	0800de25 	.word	0x0800de25
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de02:	e180      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de04:	2304      	movs	r3, #4
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0a:	e17c      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de0c:	2308      	movs	r3, #8
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de12:	e178      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de14:	2310      	movs	r3, #16
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de1a:	e174      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de1c:	2320      	movs	r3, #32
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de22:	e170      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de24:	2340      	movs	r3, #64	; 0x40
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2a:	e16c      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de2c:	2380      	movs	r3, #128	; 0x80
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de32:	e168      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a1b      	ldr	r2, [pc, #108]	; (800dea8 <UART_SetConfig+0x348>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d142      	bne.n	800dec4 <UART_SetConfig+0x364>
 800de3e:	4b16      	ldr	r3, [pc, #88]	; (800de98 <UART_SetConfig+0x338>)
 800de40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b05      	cmp	r3, #5
 800de48:	d838      	bhi.n	800debc <UART_SetConfig+0x35c>
 800de4a:	a201      	add	r2, pc, #4	; (adr r2, 800de50 <UART_SetConfig+0x2f0>)
 800de4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de50:	0800de69 	.word	0x0800de69
 800de54:	0800de71 	.word	0x0800de71
 800de58:	0800de79 	.word	0x0800de79
 800de5c:	0800de81 	.word	0x0800de81
 800de60:	0800dead 	.word	0x0800dead
 800de64:	0800deb5 	.word	0x0800deb5
 800de68:	2300      	movs	r3, #0
 800de6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6e:	e14a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de70:	2304      	movs	r3, #4
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de76:	e146      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de78:	2308      	movs	r3, #8
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7e:	e142      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de80:	2310      	movs	r3, #16
 800de82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de86:	e13e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de88:	cfff69f3 	.word	0xcfff69f3
 800de8c:	58000c00 	.word	0x58000c00
 800de90:	11fff4ff 	.word	0x11fff4ff
 800de94:	40011000 	.word	0x40011000
 800de98:	58024400 	.word	0x58024400
 800de9c:	40004400 	.word	0x40004400
 800dea0:	40004800 	.word	0x40004800
 800dea4:	40004c00 	.word	0x40004c00
 800dea8:	40005000 	.word	0x40005000
 800deac:	2320      	movs	r3, #32
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e128      	b.n	800e106 <UART_SetConfig+0x5a6>
 800deb4:	2340      	movs	r3, #64	; 0x40
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e124      	b.n	800e106 <UART_SetConfig+0x5a6>
 800debc:	2380      	movs	r3, #128	; 0x80
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e120      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4acb      	ldr	r2, [pc, #812]	; (800e1f8 <UART_SetConfig+0x698>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d176      	bne.n	800dfbc <UART_SetConfig+0x45c>
 800dece:	4bcb      	ldr	r3, [pc, #812]	; (800e1fc <UART_SetConfig+0x69c>)
 800ded0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ded2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ded6:	2b28      	cmp	r3, #40	; 0x28
 800ded8:	d86c      	bhi.n	800dfb4 <UART_SetConfig+0x454>
 800deda:	a201      	add	r2, pc, #4	; (adr r2, 800dee0 <UART_SetConfig+0x380>)
 800dedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee0:	0800df85 	.word	0x0800df85
 800dee4:	0800dfb5 	.word	0x0800dfb5
 800dee8:	0800dfb5 	.word	0x0800dfb5
 800deec:	0800dfb5 	.word	0x0800dfb5
 800def0:	0800dfb5 	.word	0x0800dfb5
 800def4:	0800dfb5 	.word	0x0800dfb5
 800def8:	0800dfb5 	.word	0x0800dfb5
 800defc:	0800dfb5 	.word	0x0800dfb5
 800df00:	0800df8d 	.word	0x0800df8d
 800df04:	0800dfb5 	.word	0x0800dfb5
 800df08:	0800dfb5 	.word	0x0800dfb5
 800df0c:	0800dfb5 	.word	0x0800dfb5
 800df10:	0800dfb5 	.word	0x0800dfb5
 800df14:	0800dfb5 	.word	0x0800dfb5
 800df18:	0800dfb5 	.word	0x0800dfb5
 800df1c:	0800dfb5 	.word	0x0800dfb5
 800df20:	0800df95 	.word	0x0800df95
 800df24:	0800dfb5 	.word	0x0800dfb5
 800df28:	0800dfb5 	.word	0x0800dfb5
 800df2c:	0800dfb5 	.word	0x0800dfb5
 800df30:	0800dfb5 	.word	0x0800dfb5
 800df34:	0800dfb5 	.word	0x0800dfb5
 800df38:	0800dfb5 	.word	0x0800dfb5
 800df3c:	0800dfb5 	.word	0x0800dfb5
 800df40:	0800df9d 	.word	0x0800df9d
 800df44:	0800dfb5 	.word	0x0800dfb5
 800df48:	0800dfb5 	.word	0x0800dfb5
 800df4c:	0800dfb5 	.word	0x0800dfb5
 800df50:	0800dfb5 	.word	0x0800dfb5
 800df54:	0800dfb5 	.word	0x0800dfb5
 800df58:	0800dfb5 	.word	0x0800dfb5
 800df5c:	0800dfb5 	.word	0x0800dfb5
 800df60:	0800dfa5 	.word	0x0800dfa5
 800df64:	0800dfb5 	.word	0x0800dfb5
 800df68:	0800dfb5 	.word	0x0800dfb5
 800df6c:	0800dfb5 	.word	0x0800dfb5
 800df70:	0800dfb5 	.word	0x0800dfb5
 800df74:	0800dfb5 	.word	0x0800dfb5
 800df78:	0800dfb5 	.word	0x0800dfb5
 800df7c:	0800dfb5 	.word	0x0800dfb5
 800df80:	0800dfad 	.word	0x0800dfad
 800df84:	2301      	movs	r3, #1
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e0bc      	b.n	800e106 <UART_SetConfig+0x5a6>
 800df8c:	2304      	movs	r3, #4
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e0b8      	b.n	800e106 <UART_SetConfig+0x5a6>
 800df94:	2308      	movs	r3, #8
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e0b4      	b.n	800e106 <UART_SetConfig+0x5a6>
 800df9c:	2310      	movs	r3, #16
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa2:	e0b0      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dfa4:	2320      	movs	r3, #32
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfaa:	e0ac      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dfac:	2340      	movs	r3, #64	; 0x40
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb2:	e0a8      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dfb4:	2380      	movs	r3, #128	; 0x80
 800dfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfba:	e0a4      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a8f      	ldr	r2, [pc, #572]	; (800e200 <UART_SetConfig+0x6a0>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d130      	bne.n	800e028 <UART_SetConfig+0x4c8>
 800dfc6:	4b8d      	ldr	r3, [pc, #564]	; (800e1fc <UART_SetConfig+0x69c>)
 800dfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfca:	f003 0307 	and.w	r3, r3, #7
 800dfce:	2b05      	cmp	r3, #5
 800dfd0:	d826      	bhi.n	800e020 <UART_SetConfig+0x4c0>
 800dfd2:	a201      	add	r2, pc, #4	; (adr r2, 800dfd8 <UART_SetConfig+0x478>)
 800dfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd8:	0800dff1 	.word	0x0800dff1
 800dfdc:	0800dff9 	.word	0x0800dff9
 800dfe0:	0800e001 	.word	0x0800e001
 800dfe4:	0800e009 	.word	0x0800e009
 800dfe8:	0800e011 	.word	0x0800e011
 800dfec:	0800e019 	.word	0x0800e019
 800dff0:	2300      	movs	r3, #0
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff6:	e086      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dff8:	2304      	movs	r3, #4
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffe:	e082      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e000:	2308      	movs	r3, #8
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e006:	e07e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e008:	2310      	movs	r3, #16
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00e:	e07a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e010:	2320      	movs	r3, #32
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e016:	e076      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e018:	2340      	movs	r3, #64	; 0x40
 800e01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01e:	e072      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e020:	2380      	movs	r3, #128	; 0x80
 800e022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e026:	e06e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a75      	ldr	r2, [pc, #468]	; (800e204 <UART_SetConfig+0x6a4>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d130      	bne.n	800e094 <UART_SetConfig+0x534>
 800e032:	4b72      	ldr	r3, [pc, #456]	; (800e1fc <UART_SetConfig+0x69c>)
 800e034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e036:	f003 0307 	and.w	r3, r3, #7
 800e03a:	2b05      	cmp	r3, #5
 800e03c:	d826      	bhi.n	800e08c <UART_SetConfig+0x52c>
 800e03e:	a201      	add	r2, pc, #4	; (adr r2, 800e044 <UART_SetConfig+0x4e4>)
 800e040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e044:	0800e05d 	.word	0x0800e05d
 800e048:	0800e065 	.word	0x0800e065
 800e04c:	0800e06d 	.word	0x0800e06d
 800e050:	0800e075 	.word	0x0800e075
 800e054:	0800e07d 	.word	0x0800e07d
 800e058:	0800e085 	.word	0x0800e085
 800e05c:	2300      	movs	r3, #0
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e062:	e050      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e064:	2304      	movs	r3, #4
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06a:	e04c      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e06c:	2308      	movs	r3, #8
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e072:	e048      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e074:	2310      	movs	r3, #16
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07a:	e044      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e07c:	2320      	movs	r3, #32
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e082:	e040      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e084:	2340      	movs	r3, #64	; 0x40
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08a:	e03c      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e08c:	2380      	movs	r3, #128	; 0x80
 800e08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e092:	e038      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a5b      	ldr	r2, [pc, #364]	; (800e208 <UART_SetConfig+0x6a8>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d130      	bne.n	800e100 <UART_SetConfig+0x5a0>
 800e09e:	4b57      	ldr	r3, [pc, #348]	; (800e1fc <UART_SetConfig+0x69c>)
 800e0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0a2:	f003 0307 	and.w	r3, r3, #7
 800e0a6:	2b05      	cmp	r3, #5
 800e0a8:	d826      	bhi.n	800e0f8 <UART_SetConfig+0x598>
 800e0aa:	a201      	add	r2, pc, #4	; (adr r2, 800e0b0 <UART_SetConfig+0x550>)
 800e0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b0:	0800e0c9 	.word	0x0800e0c9
 800e0b4:	0800e0d1 	.word	0x0800e0d1
 800e0b8:	0800e0d9 	.word	0x0800e0d9
 800e0bc:	0800e0e1 	.word	0x0800e0e1
 800e0c0:	0800e0e9 	.word	0x0800e0e9
 800e0c4:	0800e0f1 	.word	0x0800e0f1
 800e0c8:	2302      	movs	r3, #2
 800e0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ce:	e01a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0d0:	2304      	movs	r3, #4
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d6:	e016      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0d8:	2308      	movs	r3, #8
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0de:	e012      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0e0:	2310      	movs	r3, #16
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e6:	e00e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0e8:	2320      	movs	r3, #32
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ee:	e00a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0f0:	2340      	movs	r3, #64	; 0x40
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e006      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0f8:	2380      	movs	r3, #128	; 0x80
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fe:	e002      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e100:	2380      	movs	r3, #128	; 0x80
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a3f      	ldr	r2, [pc, #252]	; (800e208 <UART_SetConfig+0x6a8>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	f040 80f8 	bne.w	800e302 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e112:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e116:	2b20      	cmp	r3, #32
 800e118:	dc46      	bgt.n	800e1a8 <UART_SetConfig+0x648>
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	f2c0 8082 	blt.w	800e224 <UART_SetConfig+0x6c4>
 800e120:	3b02      	subs	r3, #2
 800e122:	2b1e      	cmp	r3, #30
 800e124:	d87e      	bhi.n	800e224 <UART_SetConfig+0x6c4>
 800e126:	a201      	add	r2, pc, #4	; (adr r2, 800e12c <UART_SetConfig+0x5cc>)
 800e128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12c:	0800e1af 	.word	0x0800e1af
 800e130:	0800e225 	.word	0x0800e225
 800e134:	0800e1b7 	.word	0x0800e1b7
 800e138:	0800e225 	.word	0x0800e225
 800e13c:	0800e225 	.word	0x0800e225
 800e140:	0800e225 	.word	0x0800e225
 800e144:	0800e1c7 	.word	0x0800e1c7
 800e148:	0800e225 	.word	0x0800e225
 800e14c:	0800e225 	.word	0x0800e225
 800e150:	0800e225 	.word	0x0800e225
 800e154:	0800e225 	.word	0x0800e225
 800e158:	0800e225 	.word	0x0800e225
 800e15c:	0800e225 	.word	0x0800e225
 800e160:	0800e225 	.word	0x0800e225
 800e164:	0800e1d7 	.word	0x0800e1d7
 800e168:	0800e225 	.word	0x0800e225
 800e16c:	0800e225 	.word	0x0800e225
 800e170:	0800e225 	.word	0x0800e225
 800e174:	0800e225 	.word	0x0800e225
 800e178:	0800e225 	.word	0x0800e225
 800e17c:	0800e225 	.word	0x0800e225
 800e180:	0800e225 	.word	0x0800e225
 800e184:	0800e225 	.word	0x0800e225
 800e188:	0800e225 	.word	0x0800e225
 800e18c:	0800e225 	.word	0x0800e225
 800e190:	0800e225 	.word	0x0800e225
 800e194:	0800e225 	.word	0x0800e225
 800e198:	0800e225 	.word	0x0800e225
 800e19c:	0800e225 	.word	0x0800e225
 800e1a0:	0800e225 	.word	0x0800e225
 800e1a4:	0800e217 	.word	0x0800e217
 800e1a8:	2b40      	cmp	r3, #64	; 0x40
 800e1aa:	d037      	beq.n	800e21c <UART_SetConfig+0x6bc>
 800e1ac:	e03a      	b.n	800e224 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e1ae:	f7fc fd67 	bl	800ac80 <HAL_RCCEx_GetD3PCLK1Freq>
 800e1b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1b4:	e03c      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fc fd76 	bl	800acac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1c4:	e034      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1c6:	f107 0318 	add.w	r3, r7, #24
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fc fec2 	bl	800af54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d4:	e02c      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1d6:	4b09      	ldr	r3, [pc, #36]	; (800e1fc <UART_SetConfig+0x69c>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f003 0320 	and.w	r3, r3, #32
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d016      	beq.n	800e210 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1e2:	4b06      	ldr	r3, [pc, #24]	; (800e1fc <UART_SetConfig+0x69c>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	08db      	lsrs	r3, r3, #3
 800e1e8:	f003 0303 	and.w	r3, r3, #3
 800e1ec:	4a07      	ldr	r2, [pc, #28]	; (800e20c <UART_SetConfig+0x6ac>)
 800e1ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1f4:	e01c      	b.n	800e230 <UART_SetConfig+0x6d0>
 800e1f6:	bf00      	nop
 800e1f8:	40011400 	.word	0x40011400
 800e1fc:	58024400 	.word	0x58024400
 800e200:	40007800 	.word	0x40007800
 800e204:	40007c00 	.word	0x40007c00
 800e208:	58000c00 	.word	0x58000c00
 800e20c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e210:	4b9d      	ldr	r3, [pc, #628]	; (800e488 <UART_SetConfig+0x928>)
 800e212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e214:	e00c      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e216:	4b9d      	ldr	r3, [pc, #628]	; (800e48c <UART_SetConfig+0x92c>)
 800e218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e21a:	e009      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e21c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e222:	e005      	b.n	800e230 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e224:	2300      	movs	r3, #0
 800e226:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e228:	2301      	movs	r3, #1
 800e22a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e22e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e232:	2b00      	cmp	r3, #0
 800e234:	f000 81de 	beq.w	800e5f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23c:	4a94      	ldr	r2, [pc, #592]	; (800e490 <UART_SetConfig+0x930>)
 800e23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e242:	461a      	mov	r2, r3
 800e244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e246:	fbb3 f3f2 	udiv	r3, r3, r2
 800e24a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	685a      	ldr	r2, [r3, #4]
 800e250:	4613      	mov	r3, r2
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	4413      	add	r3, r2
 800e256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e258:	429a      	cmp	r2, r3
 800e25a:	d305      	bcc.n	800e268 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e264:	429a      	cmp	r2, r3
 800e266:	d903      	bls.n	800e270 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e26e:	e1c1      	b.n	800e5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e272:	2200      	movs	r2, #0
 800e274:	60bb      	str	r3, [r7, #8]
 800e276:	60fa      	str	r2, [r7, #12]
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	4a84      	ldr	r2, [pc, #528]	; (800e490 <UART_SetConfig+0x930>)
 800e27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e282:	b29b      	uxth	r3, r3
 800e284:	2200      	movs	r2, #0
 800e286:	603b      	str	r3, [r7, #0]
 800e288:	607a      	str	r2, [r7, #4]
 800e28a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e28e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e292:	f7f2 fa39 	bl	8000708 <__aeabi_uldivmod>
 800e296:	4602      	mov	r2, r0
 800e298:	460b      	mov	r3, r1
 800e29a:	4610      	mov	r0, r2
 800e29c:	4619      	mov	r1, r3
 800e29e:	f04f 0200 	mov.w	r2, #0
 800e2a2:	f04f 0300 	mov.w	r3, #0
 800e2a6:	020b      	lsls	r3, r1, #8
 800e2a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e2ac:	0202      	lsls	r2, r0, #8
 800e2ae:	6979      	ldr	r1, [r7, #20]
 800e2b0:	6849      	ldr	r1, [r1, #4]
 800e2b2:	0849      	lsrs	r1, r1, #1
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	eb12 0804 	adds.w	r8, r2, r4
 800e2be:	eb43 0905 	adc.w	r9, r3, r5
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	469a      	mov	sl, r3
 800e2ca:	4693      	mov	fp, r2
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	465b      	mov	r3, fp
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	f7f2 fa18 	bl	8000708 <__aeabi_uldivmod>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4613      	mov	r3, r2
 800e2de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2e6:	d308      	bcc.n	800e2fa <UART_SetConfig+0x79a>
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2ee:	d204      	bcs.n	800e2fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2f6:	60da      	str	r2, [r3, #12]
 800e2f8:	e17c      	b.n	800e5f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e300:	e178      	b.n	800e5f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e30a:	f040 80c5 	bne.w	800e498 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e30e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e312:	2b20      	cmp	r3, #32
 800e314:	dc48      	bgt.n	800e3a8 <UART_SetConfig+0x848>
 800e316:	2b00      	cmp	r3, #0
 800e318:	db7b      	blt.n	800e412 <UART_SetConfig+0x8b2>
 800e31a:	2b20      	cmp	r3, #32
 800e31c:	d879      	bhi.n	800e412 <UART_SetConfig+0x8b2>
 800e31e:	a201      	add	r2, pc, #4	; (adr r2, 800e324 <UART_SetConfig+0x7c4>)
 800e320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e324:	0800e3af 	.word	0x0800e3af
 800e328:	0800e3b7 	.word	0x0800e3b7
 800e32c:	0800e413 	.word	0x0800e413
 800e330:	0800e413 	.word	0x0800e413
 800e334:	0800e3bf 	.word	0x0800e3bf
 800e338:	0800e413 	.word	0x0800e413
 800e33c:	0800e413 	.word	0x0800e413
 800e340:	0800e413 	.word	0x0800e413
 800e344:	0800e3cf 	.word	0x0800e3cf
 800e348:	0800e413 	.word	0x0800e413
 800e34c:	0800e413 	.word	0x0800e413
 800e350:	0800e413 	.word	0x0800e413
 800e354:	0800e413 	.word	0x0800e413
 800e358:	0800e413 	.word	0x0800e413
 800e35c:	0800e413 	.word	0x0800e413
 800e360:	0800e413 	.word	0x0800e413
 800e364:	0800e3df 	.word	0x0800e3df
 800e368:	0800e413 	.word	0x0800e413
 800e36c:	0800e413 	.word	0x0800e413
 800e370:	0800e413 	.word	0x0800e413
 800e374:	0800e413 	.word	0x0800e413
 800e378:	0800e413 	.word	0x0800e413
 800e37c:	0800e413 	.word	0x0800e413
 800e380:	0800e413 	.word	0x0800e413
 800e384:	0800e413 	.word	0x0800e413
 800e388:	0800e413 	.word	0x0800e413
 800e38c:	0800e413 	.word	0x0800e413
 800e390:	0800e413 	.word	0x0800e413
 800e394:	0800e413 	.word	0x0800e413
 800e398:	0800e413 	.word	0x0800e413
 800e39c:	0800e413 	.word	0x0800e413
 800e3a0:	0800e413 	.word	0x0800e413
 800e3a4:	0800e405 	.word	0x0800e405
 800e3a8:	2b40      	cmp	r3, #64	; 0x40
 800e3aa:	d02e      	beq.n	800e40a <UART_SetConfig+0x8aa>
 800e3ac:	e031      	b.n	800e412 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3ae:	f7fb fcf5 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800e3b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3b4:	e033      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3b6:	f7fb fd07 	bl	8009dc8 <HAL_RCC_GetPCLK2Freq>
 800e3ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3bc:	e02f      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fc fc72 	bl	800acac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3cc:	e027      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3ce:	f107 0318 	add.w	r3, r7, #24
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fc fdbe 	bl	800af54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3dc:	e01f      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3de:	4b2d      	ldr	r3, [pc, #180]	; (800e494 <UART_SetConfig+0x934>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f003 0320 	and.w	r3, r3, #32
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d009      	beq.n	800e3fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3ea:	4b2a      	ldr	r3, [pc, #168]	; (800e494 <UART_SetConfig+0x934>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	08db      	lsrs	r3, r3, #3
 800e3f0:	f003 0303 	and.w	r3, r3, #3
 800e3f4:	4a24      	ldr	r2, [pc, #144]	; (800e488 <UART_SetConfig+0x928>)
 800e3f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3fc:	e00f      	b.n	800e41e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e3fe:	4b22      	ldr	r3, [pc, #136]	; (800e488 <UART_SetConfig+0x928>)
 800e400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e402:	e00c      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e404:	4b21      	ldr	r3, [pc, #132]	; (800e48c <UART_SetConfig+0x92c>)
 800e406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e408:	e009      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e40a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e410:	e005      	b.n	800e41e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e412:	2300      	movs	r3, #0
 800e414:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e41c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e420:	2b00      	cmp	r3, #0
 800e422:	f000 80e7 	beq.w	800e5f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42a:	4a19      	ldr	r2, [pc, #100]	; (800e490 <UART_SetConfig+0x930>)
 800e42c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e430:	461a      	mov	r2, r3
 800e432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e434:	fbb3 f3f2 	udiv	r3, r3, r2
 800e438:	005a      	lsls	r2, r3, #1
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	085b      	lsrs	r3, r3, #1
 800e440:	441a      	add	r2, r3
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	fbb2 f3f3 	udiv	r3, r2, r3
 800e44a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44e:	2b0f      	cmp	r3, #15
 800e450:	d916      	bls.n	800e480 <UART_SetConfig+0x920>
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e458:	d212      	bcs.n	800e480 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	f023 030f 	bic.w	r3, r3, #15
 800e462:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	085b      	lsrs	r3, r3, #1
 800e468:	b29b      	uxth	r3, r3
 800e46a:	f003 0307 	and.w	r3, r3, #7
 800e46e:	b29a      	uxth	r2, r3
 800e470:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e472:	4313      	orrs	r3, r2
 800e474:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e47c:	60da      	str	r2, [r3, #12]
 800e47e:	e0b9      	b.n	800e5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e486:	e0b5      	b.n	800e5f4 <UART_SetConfig+0xa94>
 800e488:	03d09000 	.word	0x03d09000
 800e48c:	003d0900 	.word	0x003d0900
 800e490:	080116e4 	.word	0x080116e4
 800e494:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e498:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e49c:	2b20      	cmp	r3, #32
 800e49e:	dc49      	bgt.n	800e534 <UART_SetConfig+0x9d4>
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	db7c      	blt.n	800e59e <UART_SetConfig+0xa3e>
 800e4a4:	2b20      	cmp	r3, #32
 800e4a6:	d87a      	bhi.n	800e59e <UART_SetConfig+0xa3e>
 800e4a8:	a201      	add	r2, pc, #4	; (adr r2, 800e4b0 <UART_SetConfig+0x950>)
 800e4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ae:	bf00      	nop
 800e4b0:	0800e53b 	.word	0x0800e53b
 800e4b4:	0800e543 	.word	0x0800e543
 800e4b8:	0800e59f 	.word	0x0800e59f
 800e4bc:	0800e59f 	.word	0x0800e59f
 800e4c0:	0800e54b 	.word	0x0800e54b
 800e4c4:	0800e59f 	.word	0x0800e59f
 800e4c8:	0800e59f 	.word	0x0800e59f
 800e4cc:	0800e59f 	.word	0x0800e59f
 800e4d0:	0800e55b 	.word	0x0800e55b
 800e4d4:	0800e59f 	.word	0x0800e59f
 800e4d8:	0800e59f 	.word	0x0800e59f
 800e4dc:	0800e59f 	.word	0x0800e59f
 800e4e0:	0800e59f 	.word	0x0800e59f
 800e4e4:	0800e59f 	.word	0x0800e59f
 800e4e8:	0800e59f 	.word	0x0800e59f
 800e4ec:	0800e59f 	.word	0x0800e59f
 800e4f0:	0800e56b 	.word	0x0800e56b
 800e4f4:	0800e59f 	.word	0x0800e59f
 800e4f8:	0800e59f 	.word	0x0800e59f
 800e4fc:	0800e59f 	.word	0x0800e59f
 800e500:	0800e59f 	.word	0x0800e59f
 800e504:	0800e59f 	.word	0x0800e59f
 800e508:	0800e59f 	.word	0x0800e59f
 800e50c:	0800e59f 	.word	0x0800e59f
 800e510:	0800e59f 	.word	0x0800e59f
 800e514:	0800e59f 	.word	0x0800e59f
 800e518:	0800e59f 	.word	0x0800e59f
 800e51c:	0800e59f 	.word	0x0800e59f
 800e520:	0800e59f 	.word	0x0800e59f
 800e524:	0800e59f 	.word	0x0800e59f
 800e528:	0800e59f 	.word	0x0800e59f
 800e52c:	0800e59f 	.word	0x0800e59f
 800e530:	0800e591 	.word	0x0800e591
 800e534:	2b40      	cmp	r3, #64	; 0x40
 800e536:	d02e      	beq.n	800e596 <UART_SetConfig+0xa36>
 800e538:	e031      	b.n	800e59e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e53a:	f7fb fc2f 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800e53e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e540:	e033      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e542:	f7fb fc41 	bl	8009dc8 <HAL_RCC_GetPCLK2Freq>
 800e546:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e548:	e02f      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e54a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fc fbac 	bl	800acac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e558:	e027      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e55a:	f107 0318 	add.w	r3, r7, #24
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fc fcf8 	bl	800af54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e568:	e01f      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e56a:	4b2d      	ldr	r3, [pc, #180]	; (800e620 <UART_SetConfig+0xac0>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f003 0320 	and.w	r3, r3, #32
 800e572:	2b00      	cmp	r3, #0
 800e574:	d009      	beq.n	800e58a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e576:	4b2a      	ldr	r3, [pc, #168]	; (800e620 <UART_SetConfig+0xac0>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	08db      	lsrs	r3, r3, #3
 800e57c:	f003 0303 	and.w	r3, r3, #3
 800e580:	4a28      	ldr	r2, [pc, #160]	; (800e624 <UART_SetConfig+0xac4>)
 800e582:	fa22 f303 	lsr.w	r3, r2, r3
 800e586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e588:	e00f      	b.n	800e5aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e58a:	4b26      	ldr	r3, [pc, #152]	; (800e624 <UART_SetConfig+0xac4>)
 800e58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e58e:	e00c      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e590:	4b25      	ldr	r3, [pc, #148]	; (800e628 <UART_SetConfig+0xac8>)
 800e592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e594:	e009      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e59c:	e005      	b.n	800e5aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5a8:	bf00      	nop
    }

    if (pclk != 0U)
 800e5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d021      	beq.n	800e5f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b4:	4a1d      	ldr	r2, [pc, #116]	; (800e62c <UART_SetConfig+0xacc>)
 800e5b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5be:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	085b      	lsrs	r3, r3, #1
 800e5c8:	441a      	add	r2, r3
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d6:	2b0f      	cmp	r3, #15
 800e5d8:	d909      	bls.n	800e5ee <UART_SetConfig+0xa8e>
 800e5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5e0:	d205      	bcs.n	800e5ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	60da      	str	r2, [r3, #12]
 800e5ec:	e002      	b.n	800e5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	2201      	movs	r2, #1
 800e600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	2200      	movs	r2, #0
 800e608:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	2200      	movs	r2, #0
 800e60e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e610:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e614:	4618      	mov	r0, r3
 800e616:	3748      	adds	r7, #72	; 0x48
 800e618:	46bd      	mov	sp, r7
 800e61a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e61e:	bf00      	nop
 800e620:	58024400 	.word	0x58024400
 800e624:	03d09000 	.word	0x03d09000
 800e628:	003d0900 	.word	0x003d0900
 800e62c:	080116e4 	.word	0x080116e4

0800e630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e63c:	f003 0301 	and.w	r3, r3, #1
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00a      	beq.n	800e65a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	430a      	orrs	r2, r1
 800e658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00a      	beq.n	800e67c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	430a      	orrs	r2, r1
 800e67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e680:	f003 0304 	and.w	r3, r3, #4
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00a      	beq.n	800e69e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	430a      	orrs	r2, r1
 800e69c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a2:	f003 0308 	and.w	r3, r3, #8
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00a      	beq.n	800e6c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	430a      	orrs	r2, r1
 800e6be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c4:	f003 0310 	and.w	r3, r3, #16
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00a      	beq.n	800e6e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	430a      	orrs	r2, r1
 800e6e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e6:	f003 0320 	and.w	r3, r3, #32
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00a      	beq.n	800e704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	430a      	orrs	r2, r1
 800e702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d01a      	beq.n	800e746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	430a      	orrs	r2, r1
 800e724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e72a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e72e:	d10a      	bne.n	800e746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	430a      	orrs	r2, r1
 800e744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00a      	beq.n	800e768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	430a      	orrs	r2, r1
 800e766:	605a      	str	r2, [r3, #4]
  }
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b086      	sub	sp, #24
 800e778:	af02      	add	r7, sp, #8
 800e77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e784:	f7f6 fa9e 	bl	8004cc4 <HAL_GetTick>
 800e788:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f003 0308 	and.w	r3, r3, #8
 800e794:	2b08      	cmp	r3, #8
 800e796:	d10e      	bne.n	800e7b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f82f 	bl	800e80a <UART_WaitOnFlagUntilTimeout>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d001      	beq.n	800e7b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	e025      	b.n	800e802 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f003 0304 	and.w	r3, r3, #4
 800e7c0:	2b04      	cmp	r3, #4
 800e7c2:	d10e      	bne.n	800e7e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f819 	bl	800e80a <UART_WaitOnFlagUntilTimeout>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d001      	beq.n	800e7e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7de:	2303      	movs	r3, #3
 800e7e0:	e00f      	b.n	800e802 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2220      	movs	r2, #32
 800e7e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2220      	movs	r2, #32
 800e7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e800:	2300      	movs	r3, #0
}
 800e802:	4618      	mov	r0, r3
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b09c      	sub	sp, #112	; 0x70
 800e80e:	af00      	add	r7, sp, #0
 800e810:	60f8      	str	r0, [r7, #12]
 800e812:	60b9      	str	r1, [r7, #8]
 800e814:	603b      	str	r3, [r7, #0]
 800e816:	4613      	mov	r3, r2
 800e818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e81a:	e0a9      	b.n	800e970 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e81c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e81e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e822:	f000 80a5 	beq.w	800e970 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e826:	f7f6 fa4d 	bl	8004cc4 <HAL_GetTick>
 800e82a:	4602      	mov	r2, r0
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e832:	429a      	cmp	r2, r3
 800e834:	d302      	bcc.n	800e83c <UART_WaitOnFlagUntilTimeout+0x32>
 800e836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d140      	bne.n	800e8be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e844:	e853 3f00 	ldrex	r3, [r3]
 800e848:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e84c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e850:	667b      	str	r3, [r7, #100]	; 0x64
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	461a      	mov	r2, r3
 800e858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e85a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e85c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e85e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e862:	e841 2300 	strex	r3, r2, [r1]
 800e866:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1e6      	bne.n	800e83c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3308      	adds	r3, #8
 800e874:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e878:	e853 3f00 	ldrex	r3, [r3]
 800e87c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e880:	f023 0301 	bic.w	r3, r3, #1
 800e884:	663b      	str	r3, [r7, #96]	; 0x60
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3308      	adds	r3, #8
 800e88c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e88e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e890:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e896:	e841 2300 	strex	r3, r2, [r1]
 800e89a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d1e5      	bne.n	800e86e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2220      	movs	r2, #32
 800e8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2220      	movs	r2, #32
 800e8ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	e069      	b.n	800e992 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f003 0304 	and.w	r3, r3, #4
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d051      	beq.n	800e970 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	69db      	ldr	r3, [r3, #28]
 800e8d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8da:	d149      	bne.n	800e970 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ee:	e853 3f00 	ldrex	r3, [r3]
 800e8f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e8fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	461a      	mov	r2, r3
 800e902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e904:	637b      	str	r3, [r7, #52]	; 0x34
 800e906:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e90a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e90c:	e841 2300 	strex	r3, r2, [r1]
 800e910:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1e6      	bne.n	800e8e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	3308      	adds	r3, #8
 800e91e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	e853 3f00 	ldrex	r3, [r3]
 800e926:	613b      	str	r3, [r7, #16]
   return(result);
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	f023 0301 	bic.w	r3, r3, #1
 800e92e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	3308      	adds	r3, #8
 800e936:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e938:	623a      	str	r2, [r7, #32]
 800e93a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93c:	69f9      	ldr	r1, [r7, #28]
 800e93e:	6a3a      	ldr	r2, [r7, #32]
 800e940:	e841 2300 	strex	r3, r2, [r1]
 800e944:	61bb      	str	r3, [r7, #24]
   return(result);
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1e5      	bne.n	800e918 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2220      	movs	r2, #32
 800e950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2220      	movs	r2, #32
 800e958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2220      	movs	r2, #32
 800e960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2200      	movs	r2, #0
 800e968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e96c:	2303      	movs	r3, #3
 800e96e:	e010      	b.n	800e992 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	69da      	ldr	r2, [r3, #28]
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	4013      	ands	r3, r2
 800e97a:	68ba      	ldr	r2, [r7, #8]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	bf0c      	ite	eq
 800e980:	2301      	moveq	r3, #1
 800e982:	2300      	movne	r3, #0
 800e984:	b2db      	uxtb	r3, r3
 800e986:	461a      	mov	r2, r3
 800e988:	79fb      	ldrb	r3, [r7, #7]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	f43f af46 	beq.w	800e81c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e990:	2300      	movs	r3, #0
}
 800e992:	4618      	mov	r0, r3
 800e994:	3770      	adds	r7, #112	; 0x70
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
	...

0800e99c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b096      	sub	sp, #88	; 0x58
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	68ba      	ldr	r2, [r7, #8]
 800e9ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	88fa      	ldrh	r2, [r7, #6]
 800e9b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2222      	movs	r2, #34	; 0x22
 800e9c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d02c      	beq.n	800ea2a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9d4:	4a42      	ldr	r2, [pc, #264]	; (800eae0 <UART_Start_Receive_DMA+0x144>)
 800e9d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9dc:	4a41      	ldr	r2, [pc, #260]	; (800eae4 <UART_Start_Receive_DMA+0x148>)
 800e9de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9e4:	4a40      	ldr	r2, [pc, #256]	; (800eae8 <UART_Start_Receive_DMA+0x14c>)
 800e9e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	3324      	adds	r3, #36	; 0x24
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea00:	461a      	mov	r2, r3
 800ea02:	88fb      	ldrh	r3, [r7, #6]
 800ea04:	f7f6 fe06 	bl	8005614 <HAL_DMA_Start_IT>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00d      	beq.n	800ea2a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2210      	movs	r2, #16
 800ea12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2220      	movs	r2, #32
 800ea22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ea26:	2301      	movs	r3, #1
 800ea28:	e055      	b.n	800ead6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	691b      	ldr	r3, [r3, #16]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d018      	beq.n	800ea6c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea42:	e853 3f00 	ldrex	r3, [r3]
 800ea46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea4e:	657b      	str	r3, [r7, #84]	; 0x54
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	461a      	mov	r2, r3
 800ea56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea5a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea60:	e841 2300 	strex	r3, r2, [r1]
 800ea64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1e6      	bne.n	800ea3a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	3308      	adds	r3, #8
 800ea72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea76:	e853 3f00 	ldrex	r3, [r3]
 800ea7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7e:	f043 0301 	orr.w	r3, r3, #1
 800ea82:	653b      	str	r3, [r7, #80]	; 0x50
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	3308      	adds	r3, #8
 800ea8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea8c:	637a      	str	r2, [r7, #52]	; 0x34
 800ea8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea94:	e841 2300 	strex	r3, r2, [r1]
 800ea98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ea9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1e5      	bne.n	800ea6c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	3308      	adds	r3, #8
 800eaa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	e853 3f00 	ldrex	r3, [r3]
 800eaae:	613b      	str	r3, [r7, #16]
   return(result);
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	3308      	adds	r3, #8
 800eabe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eac0:	623a      	str	r2, [r7, #32]
 800eac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac4:	69f9      	ldr	r1, [r7, #28]
 800eac6:	6a3a      	ldr	r2, [r7, #32]
 800eac8:	e841 2300 	strex	r3, r2, [r1]
 800eacc:	61bb      	str	r3, [r7, #24]
   return(result);
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1e5      	bne.n	800eaa0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ead4:	2300      	movs	r3, #0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3758      	adds	r7, #88	; 0x58
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	0800ec3d 	.word	0x0800ec3d
 800eae4:	0800ed5f 	.word	0x0800ed5f
 800eae8:	0800ed97 	.word	0x0800ed97

0800eaec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b08f      	sub	sp, #60	; 0x3c
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafa:	6a3b      	ldr	r3, [r7, #32]
 800eafc:	e853 3f00 	ldrex	r3, [r3]
 800eb00:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eb08:	637b      	str	r3, [r7, #52]	; 0x34
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb1a:	e841 2300 	strex	r3, r2, [r1]
 800eb1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d1e6      	bne.n	800eaf4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	3308      	adds	r3, #8
 800eb2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	e853 3f00 	ldrex	r3, [r3]
 800eb34:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eb3c:	633b      	str	r3, [r7, #48]	; 0x30
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	3308      	adds	r3, #8
 800eb44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb46:	61ba      	str	r2, [r7, #24]
 800eb48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4a:	6979      	ldr	r1, [r7, #20]
 800eb4c:	69ba      	ldr	r2, [r7, #24]
 800eb4e:	e841 2300 	strex	r3, r2, [r1]
 800eb52:	613b      	str	r3, [r7, #16]
   return(result);
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1e5      	bne.n	800eb26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2220      	movs	r2, #32
 800eb5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800eb62:	bf00      	nop
 800eb64:	373c      	adds	r7, #60	; 0x3c
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr
	...

0800eb70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b095      	sub	sp, #84	; 0x54
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb80:	e853 3f00 	ldrex	r3, [r3]
 800eb84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	461a      	mov	r2, r3
 800eb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb96:	643b      	str	r3, [r7, #64]	; 0x40
 800eb98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb9e:	e841 2300 	strex	r3, r2, [r1]
 800eba2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1e6      	bne.n	800eb78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	3308      	adds	r3, #8
 800ebb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb2:	6a3b      	ldr	r3, [r7, #32]
 800ebb4:	e853 3f00 	ldrex	r3, [r3]
 800ebb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebba:	69fa      	ldr	r2, [r7, #28]
 800ebbc:	4b1e      	ldr	r3, [pc, #120]	; (800ec38 <UART_EndRxTransfer+0xc8>)
 800ebbe:	4013      	ands	r3, r2
 800ebc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	3308      	adds	r3, #8
 800ebc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebd2:	e841 2300 	strex	r3, r2, [r1]
 800ebd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1e5      	bne.n	800ebaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d118      	bne.n	800ec18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	e853 3f00 	ldrex	r3, [r3]
 800ebf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	f023 0310 	bic.w	r3, r3, #16
 800ebfa:	647b      	str	r3, [r7, #68]	; 0x44
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	461a      	mov	r2, r3
 800ec02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec04:	61bb      	str	r3, [r7, #24]
 800ec06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec08:	6979      	ldr	r1, [r7, #20]
 800ec0a:	69ba      	ldr	r2, [r7, #24]
 800ec0c:	e841 2300 	strex	r3, r2, [r1]
 800ec10:	613b      	str	r3, [r7, #16]
   return(result);
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1e6      	bne.n	800ebe6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2220      	movs	r2, #32
 800ec1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ec2c:	bf00      	nop
 800ec2e:	3754      	adds	r7, #84	; 0x54
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	effffffe 	.word	0xeffffffe

0800ec3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b09c      	sub	sp, #112	; 0x70
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec48:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	69db      	ldr	r3, [r3, #28]
 800ec4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec52:	d071      	beq.n	800ed38 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ec54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec56:	2200      	movs	r2, #0
 800ec58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec64:	e853 3f00 	ldrex	r3, [r3]
 800ec68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ec6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec70:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	461a      	mov	r2, r3
 800ec78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec82:	e841 2300 	strex	r3, r2, [r1]
 800ec86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ec88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1e6      	bne.n	800ec5c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	3308      	adds	r3, #8
 800ec94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec98:	e853 3f00 	ldrex	r3, [r3]
 800ec9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca0:	f023 0301 	bic.w	r3, r3, #1
 800eca4:	667b      	str	r3, [r7, #100]	; 0x64
 800eca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	3308      	adds	r3, #8
 800ecac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ecae:	647a      	str	r2, [r7, #68]	; 0x44
 800ecb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ecb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecb6:	e841 2300 	strex	r3, r2, [r1]
 800ecba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ecbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d1e5      	bne.n	800ec8e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	3308      	adds	r3, #8
 800ecc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eccc:	e853 3f00 	ldrex	r3, [r3]
 800ecd0:	623b      	str	r3, [r7, #32]
   return(result);
 800ecd2:	6a3b      	ldr	r3, [r7, #32]
 800ecd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecd8:	663b      	str	r3, [r7, #96]	; 0x60
 800ecda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	3308      	adds	r3, #8
 800ece0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ece2:	633a      	str	r2, [r7, #48]	; 0x30
 800ece4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ece8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecea:	e841 2300 	strex	r3, r2, [r1]
 800ecee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ecf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1e5      	bne.n	800ecc2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ecf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecf8:	2220      	movs	r2, #32
 800ecfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d118      	bne.n	800ed38 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	e853 3f00 	ldrex	r3, [r3]
 800ed12:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f023 0310 	bic.w	r3, r3, #16
 800ed1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	461a      	mov	r2, r3
 800ed22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed28:	69b9      	ldr	r1, [r7, #24]
 800ed2a:	69fa      	ldr	r2, [r7, #28]
 800ed2c:	e841 2300 	strex	r3, r2, [r1]
 800ed30:	617b      	str	r3, [r7, #20]
   return(result);
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1e6      	bne.n	800ed06 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d107      	bne.n	800ed50 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed46:	4619      	mov	r1, r3
 800ed48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ed4a:	f7fe fefd 	bl	800db48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed4e:	e002      	b.n	800ed56 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ed50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ed52:	f7f4 fd8b 	bl	800386c <HAL_UART_RxCpltCallback>
}
 800ed56:	bf00      	nop
 800ed58:	3770      	adds	r7, #112	; 0x70
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed6a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d109      	bne.n	800ed88 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed7a:	085b      	lsrs	r3, r3, #1
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	4619      	mov	r1, r3
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f7fe fee1 	bl	800db48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed86:	e002      	b.n	800ed8e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f7fe fec9 	bl	800db20 <HAL_UART_RxHalfCpltCallback>
}
 800ed8e:	bf00      	nop
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b086      	sub	sp, #24
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edaa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edb2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edbe:	2b80      	cmp	r3, #128	; 0x80
 800edc0:	d109      	bne.n	800edd6 <UART_DMAError+0x40>
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	2b21      	cmp	r3, #33	; 0x21
 800edc6:	d106      	bne.n	800edd6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	2200      	movs	r2, #0
 800edcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800edd0:	6978      	ldr	r0, [r7, #20]
 800edd2:	f7ff fe8b 	bl	800eaec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede0:	2b40      	cmp	r3, #64	; 0x40
 800ede2:	d109      	bne.n	800edf8 <UART_DMAError+0x62>
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2b22      	cmp	r3, #34	; 0x22
 800ede8:	d106      	bne.n	800edf8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	2200      	movs	r2, #0
 800edee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800edf2:	6978      	ldr	r0, [r7, #20]
 800edf4:	f7ff febc 	bl	800eb70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edfe:	f043 0210 	orr.w	r2, r3, #16
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee08:	6978      	ldr	r0, [r7, #20]
 800ee0a:	f7fe fe93 	bl	800db34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee0e:	bf00      	nop
 800ee10:	3718      	adds	r7, #24
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f7fe fe7d 	bl	800db34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee3a:	bf00      	nop
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ee42:	b480      	push	{r7}
 800ee44:	b08f      	sub	sp, #60	; 0x3c
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee50:	2b21      	cmp	r3, #33	; 0x21
 800ee52:	d14c      	bne.n	800eeee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d132      	bne.n	800eec6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee66:	6a3b      	ldr	r3, [r7, #32]
 800ee68:	e853 3f00 	ldrex	r3, [r3]
 800ee6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee74:	637b      	str	r3, [r7, #52]	; 0x34
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee80:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee86:	e841 2300 	strex	r3, r2, [r1]
 800ee8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d1e6      	bne.n	800ee60 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	e853 3f00 	ldrex	r3, [r3]
 800ee9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eea6:	633b      	str	r3, [r7, #48]	; 0x30
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	461a      	mov	r2, r3
 800eeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb0:	61bb      	str	r3, [r7, #24]
 800eeb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb4:	6979      	ldr	r1, [r7, #20]
 800eeb6:	69ba      	ldr	r2, [r7, #24]
 800eeb8:	e841 2300 	strex	r3, r2, [r1]
 800eebc:	613b      	str	r3, [r7, #16]
   return(result);
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d1e6      	bne.n	800ee92 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800eec4:	e013      	b.n	800eeee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeca:	781a      	ldrb	r2, [r3, #0]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eed6:	1c5a      	adds	r2, r3, #1
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	3b01      	subs	r3, #1
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800eeee:	bf00      	nop
 800eef0:	373c      	adds	r7, #60	; 0x3c
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr

0800eefa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eefa:	b480      	push	{r7}
 800eefc:	b091      	sub	sp, #68	; 0x44
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef08:	2b21      	cmp	r3, #33	; 0x21
 800ef0a:	d151      	bne.n	800efb0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d132      	bne.n	800ef7e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef20:	e853 3f00 	ldrex	r3, [r3]
 800ef24:	623b      	str	r3, [r7, #32]
   return(result);
 800ef26:	6a3b      	ldr	r3, [r7, #32]
 800ef28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	461a      	mov	r2, r3
 800ef34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef36:	633b      	str	r3, [r7, #48]	; 0x30
 800ef38:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef3e:	e841 2300 	strex	r3, r2, [r1]
 800ef42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1e6      	bne.n	800ef18 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	e853 3f00 	ldrex	r3, [r3]
 800ef56:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	461a      	mov	r2, r3
 800ef66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef68:	61fb      	str	r3, [r7, #28]
 800ef6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6c:	69b9      	ldr	r1, [r7, #24]
 800ef6e:	69fa      	ldr	r2, [r7, #28]
 800ef70:	e841 2300 	strex	r3, r2, [r1]
 800ef74:	617b      	str	r3, [r7, #20]
   return(result);
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d1e6      	bne.n	800ef4a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ef7c:	e018      	b.n	800efb0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef82:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ef84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef86:	881b      	ldrh	r3, [r3, #0]
 800ef88:	461a      	mov	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ef92:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef98:	1c9a      	adds	r2, r3, #2
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	3b01      	subs	r3, #1
 800efa8:	b29a      	uxth	r2, r3
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800efb0:	bf00      	nop
 800efb2:	3744      	adds	r7, #68	; 0x44
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b091      	sub	sp, #68	; 0x44
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efca:	2b21      	cmp	r3, #33	; 0x21
 800efcc:	d160      	bne.n	800f090 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800efd6:	e057      	b.n	800f088 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800efde:	b29b      	uxth	r3, r3
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d133      	bne.n	800f04c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	3308      	adds	r3, #8
 800efea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efee:	e853 3f00 	ldrex	r3, [r3]
 800eff2:	623b      	str	r3, [r7, #32]
   return(result);
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800effa:	63bb      	str	r3, [r7, #56]	; 0x38
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	3308      	adds	r3, #8
 800f002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f004:	633a      	str	r2, [r7, #48]	; 0x30
 800f006:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f00c:	e841 2300 	strex	r3, r2, [r1]
 800f010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f014:	2b00      	cmp	r3, #0
 800f016:	d1e5      	bne.n	800efe4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	e853 3f00 	ldrex	r3, [r3]
 800f024:	60fb      	str	r3, [r7, #12]
   return(result);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f02c:	637b      	str	r3, [r7, #52]	; 0x34
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f036:	61fb      	str	r3, [r7, #28]
 800f038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03a:	69b9      	ldr	r1, [r7, #24]
 800f03c:	69fa      	ldr	r2, [r7, #28]
 800f03e:	e841 2300 	strex	r3, r2, [r1]
 800f042:	617b      	str	r3, [r7, #20]
   return(result);
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1e6      	bne.n	800f018 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f04a:	e021      	b.n	800f090 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	69db      	ldr	r3, [r3, #28]
 800f052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f056:	2b00      	cmp	r3, #0
 800f058:	d013      	beq.n	800f082 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f05e:	781a      	ldrb	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f076:	b29b      	uxth	r3, r3
 800f078:	3b01      	subs	r3, #1
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f082:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f084:	3b01      	subs	r3, #1
 800f086:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f088:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1a4      	bne.n	800efd8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f08e:	e7ff      	b.n	800f090 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800f090:	bf00      	nop
 800f092:	3744      	adds	r7, #68	; 0x44
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b091      	sub	sp, #68	; 0x44
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0aa:	2b21      	cmp	r3, #33	; 0x21
 800f0ac:	d165      	bne.n	800f17a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f0b6:	e05c      	b.n	800f172 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d133      	bne.n	800f12c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	3308      	adds	r3, #8
 800f0ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0cc:	6a3b      	ldr	r3, [r7, #32]
 800f0ce:	e853 3f00 	ldrex	r3, [r3]
 800f0d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f0da:	637b      	str	r3, [r7, #52]	; 0x34
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	3308      	adds	r3, #8
 800f0e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f0e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0ec:	e841 2300 	strex	r3, r2, [r1]
 800f0f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1e5      	bne.n	800f0c4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	e853 3f00 	ldrex	r3, [r3]
 800f104:	60bb      	str	r3, [r7, #8]
   return(result);
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f10c:	633b      	str	r3, [r7, #48]	; 0x30
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	461a      	mov	r2, r3
 800f114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f116:	61bb      	str	r3, [r7, #24]
 800f118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11a:	6979      	ldr	r1, [r7, #20]
 800f11c:	69ba      	ldr	r2, [r7, #24]
 800f11e:	e841 2300 	strex	r3, r2, [r1]
 800f122:	613b      	str	r3, [r7, #16]
   return(result);
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1e6      	bne.n	800f0f8 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f12a:	e026      	b.n	800f17a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	69db      	ldr	r3, [r3, #28]
 800f132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f136:	2b00      	cmp	r3, #0
 800f138:	d018      	beq.n	800f16c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f13e:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	461a      	mov	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f14e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f154:	1c9a      	adds	r2, r3, #2
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f160:	b29b      	uxth	r3, r3
 800f162:	3b01      	subs	r3, #1
 800f164:	b29a      	uxth	r2, r3
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f16c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f16e:	3b01      	subs	r3, #1
 800f170:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f172:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f174:	2b00      	cmp	r3, #0
 800f176:	d19f      	bne.n	800f0b8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f178:	e7ff      	b.n	800f17a <UART_TxISR_16BIT_FIFOEN+0xde>
 800f17a:	bf00      	nop
 800f17c:	3744      	adds	r7, #68	; 0x44
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr

0800f186 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b088      	sub	sp, #32
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	e853 3f00 	ldrex	r3, [r3]
 800f19a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1a2:	61fb      	str	r3, [r7, #28]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	61bb      	str	r3, [r7, #24]
 800f1ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1b0:	6979      	ldr	r1, [r7, #20]
 800f1b2:	69ba      	ldr	r2, [r7, #24]
 800f1b4:	e841 2300 	strex	r3, r2, [r1]
 800f1b8:	613b      	str	r3, [r7, #16]
   return(result);
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d1e6      	bne.n	800f18e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2220      	movs	r2, #32
 800f1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7fe fc9c 	bl	800db0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1d4:	bf00      	nop
 800f1d6:	3720      	adds	r7, #32
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f1e4:	bf00      	nop
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f1f8:	bf00      	nop
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f20c:	bf00      	nop
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f218:	b480      	push	{r7}
 800f21a:	b085      	sub	sp, #20
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f226:	2b01      	cmp	r3, #1
 800f228:	d101      	bne.n	800f22e <HAL_UARTEx_DisableFifoMode+0x16>
 800f22a:	2302      	movs	r3, #2
 800f22c:	e027      	b.n	800f27e <HAL_UARTEx_DisableFifoMode+0x66>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2201      	movs	r2, #1
 800f232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2224      	movs	r2, #36	; 0x24
 800f23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f022 0201 	bic.w	r2, r2, #1
 800f254:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f25c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	68fa      	ldr	r2, [r7, #12]
 800f26a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2220      	movs	r2, #32
 800f270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2200      	movs	r2, #0
 800f278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3714      	adds	r7, #20
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b084      	sub	sp, #16
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d101      	bne.n	800f2a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f29e:	2302      	movs	r3, #2
 800f2a0:	e02d      	b.n	800f2fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2224      	movs	r2, #36	; 0x24
 800f2ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f022 0201 	bic.w	r2, r2, #1
 800f2c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	683a      	ldr	r2, [r7, #0]
 800f2da:	430a      	orrs	r2, r1
 800f2dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 f850 	bl	800f384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	68fa      	ldr	r2, [r7, #12]
 800f2ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2220      	movs	r2, #32
 800f2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3710      	adds	r7, #16
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}

0800f306 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f306:	b580      	push	{r7, lr}
 800f308:	b084      	sub	sp, #16
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
 800f30e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f316:	2b01      	cmp	r3, #1
 800f318:	d101      	bne.n	800f31e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f31a:	2302      	movs	r3, #2
 800f31c:	e02d      	b.n	800f37a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2201      	movs	r2, #1
 800f322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2224      	movs	r2, #36	; 0x24
 800f32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f022 0201 	bic.w	r2, r2, #1
 800f344:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	683a      	ldr	r2, [r7, #0]
 800f356:	430a      	orrs	r2, r1
 800f358:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f000 f812 	bl	800f384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2220      	movs	r2, #32
 800f36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f378:	2300      	movs	r3, #0
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
	...

0800f384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f390:	2b00      	cmp	r3, #0
 800f392:	d108      	bne.n	800f3a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2201      	movs	r2, #1
 800f398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f3a4:	e031      	b.n	800f40a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f3a6:	2310      	movs	r3, #16
 800f3a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f3aa:	2310      	movs	r3, #16
 800f3ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	0e5b      	lsrs	r3, r3, #25
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	f003 0307 	and.w	r3, r3, #7
 800f3bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	0f5b      	lsrs	r3, r3, #29
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	f003 0307 	and.w	r3, r3, #7
 800f3cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3ce:	7bbb      	ldrb	r3, [r7, #14]
 800f3d0:	7b3a      	ldrb	r2, [r7, #12]
 800f3d2:	4911      	ldr	r1, [pc, #68]	; (800f418 <UARTEx_SetNbDataToProcess+0x94>)
 800f3d4:	5c8a      	ldrb	r2, [r1, r2]
 800f3d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f3da:	7b3a      	ldrb	r2, [r7, #12]
 800f3dc:	490f      	ldr	r1, [pc, #60]	; (800f41c <UARTEx_SetNbDataToProcess+0x98>)
 800f3de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3ec:	7bfb      	ldrb	r3, [r7, #15]
 800f3ee:	7b7a      	ldrb	r2, [r7, #13]
 800f3f0:	4909      	ldr	r1, [pc, #36]	; (800f418 <UARTEx_SetNbDataToProcess+0x94>)
 800f3f2:	5c8a      	ldrb	r2, [r1, r2]
 800f3f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f3f8:	7b7a      	ldrb	r2, [r7, #13]
 800f3fa:	4908      	ldr	r1, [pc, #32]	; (800f41c <UARTEx_SetNbDataToProcess+0x98>)
 800f3fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800f402:	b29a      	uxth	r2, r3
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f40a:	bf00      	nop
 800f40c:	3714      	adds	r7, #20
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	080116fc 	.word	0x080116fc
 800f41c:	08011704 	.word	0x08011704

0800f420 <atoi>:
 800f420:	220a      	movs	r2, #10
 800f422:	2100      	movs	r1, #0
 800f424:	f000 b8e2 	b.w	800f5ec <strtol>

0800f428 <__errno>:
 800f428:	4b01      	ldr	r3, [pc, #4]	; (800f430 <__errno+0x8>)
 800f42a:	6818      	ldr	r0, [r3, #0]
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	2400003c 	.word	0x2400003c

0800f434 <__libc_init_array>:
 800f434:	b570      	push	{r4, r5, r6, lr}
 800f436:	4d0d      	ldr	r5, [pc, #52]	; (800f46c <__libc_init_array+0x38>)
 800f438:	4c0d      	ldr	r4, [pc, #52]	; (800f470 <__libc_init_array+0x3c>)
 800f43a:	1b64      	subs	r4, r4, r5
 800f43c:	10a4      	asrs	r4, r4, #2
 800f43e:	2600      	movs	r6, #0
 800f440:	42a6      	cmp	r6, r4
 800f442:	d109      	bne.n	800f458 <__libc_init_array+0x24>
 800f444:	4d0b      	ldr	r5, [pc, #44]	; (800f474 <__libc_init_array+0x40>)
 800f446:	4c0c      	ldr	r4, [pc, #48]	; (800f478 <__libc_init_array+0x44>)
 800f448:	f002 f92c 	bl	80116a4 <_init>
 800f44c:	1b64      	subs	r4, r4, r5
 800f44e:	10a4      	asrs	r4, r4, #2
 800f450:	2600      	movs	r6, #0
 800f452:	42a6      	cmp	r6, r4
 800f454:	d105      	bne.n	800f462 <__libc_init_array+0x2e>
 800f456:	bd70      	pop	{r4, r5, r6, pc}
 800f458:	f855 3b04 	ldr.w	r3, [r5], #4
 800f45c:	4798      	blx	r3
 800f45e:	3601      	adds	r6, #1
 800f460:	e7ee      	b.n	800f440 <__libc_init_array+0xc>
 800f462:	f855 3b04 	ldr.w	r3, [r5], #4
 800f466:	4798      	blx	r3
 800f468:	3601      	adds	r6, #1
 800f46a:	e7f2      	b.n	800f452 <__libc_init_array+0x1e>
 800f46c:	08013548 	.word	0x08013548
 800f470:	08013548 	.word	0x08013548
 800f474:	08013548 	.word	0x08013548
 800f478:	0801354c 	.word	0x0801354c

0800f47c <memcpy>:
 800f47c:	440a      	add	r2, r1
 800f47e:	4291      	cmp	r1, r2
 800f480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f484:	d100      	bne.n	800f488 <memcpy+0xc>
 800f486:	4770      	bx	lr
 800f488:	b510      	push	{r4, lr}
 800f48a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f48e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f492:	4291      	cmp	r1, r2
 800f494:	d1f9      	bne.n	800f48a <memcpy+0xe>
 800f496:	bd10      	pop	{r4, pc}

0800f498 <memset>:
 800f498:	4402      	add	r2, r0
 800f49a:	4603      	mov	r3, r0
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d100      	bne.n	800f4a2 <memset+0xa>
 800f4a0:	4770      	bx	lr
 800f4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800f4a6:	e7f9      	b.n	800f49c <memset+0x4>

0800f4a8 <siprintf>:
 800f4a8:	b40e      	push	{r1, r2, r3}
 800f4aa:	b500      	push	{lr}
 800f4ac:	b09c      	sub	sp, #112	; 0x70
 800f4ae:	ab1d      	add	r3, sp, #116	; 0x74
 800f4b0:	9002      	str	r0, [sp, #8]
 800f4b2:	9006      	str	r0, [sp, #24]
 800f4b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4b8:	4809      	ldr	r0, [pc, #36]	; (800f4e0 <siprintf+0x38>)
 800f4ba:	9107      	str	r1, [sp, #28]
 800f4bc:	9104      	str	r1, [sp, #16]
 800f4be:	4909      	ldr	r1, [pc, #36]	; (800f4e4 <siprintf+0x3c>)
 800f4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4c4:	9105      	str	r1, [sp, #20]
 800f4c6:	6800      	ldr	r0, [r0, #0]
 800f4c8:	9301      	str	r3, [sp, #4]
 800f4ca:	a902      	add	r1, sp, #8
 800f4cc:	f000 f8f4 	bl	800f6b8 <_svfiprintf_r>
 800f4d0:	9b02      	ldr	r3, [sp, #8]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	701a      	strb	r2, [r3, #0]
 800f4d6:	b01c      	add	sp, #112	; 0x70
 800f4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4dc:	b003      	add	sp, #12
 800f4de:	4770      	bx	lr
 800f4e0:	2400003c 	.word	0x2400003c
 800f4e4:	ffff0208 	.word	0xffff0208

0800f4e8 <_strtol_l.constprop.0>:
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ee:	d001      	beq.n	800f4f4 <_strtol_l.constprop.0+0xc>
 800f4f0:	2b24      	cmp	r3, #36	; 0x24
 800f4f2:	d906      	bls.n	800f502 <_strtol_l.constprop.0+0x1a>
 800f4f4:	f7ff ff98 	bl	800f428 <__errno>
 800f4f8:	2316      	movs	r3, #22
 800f4fa:	6003      	str	r3, [r0, #0]
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f502:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f5e8 <_strtol_l.constprop.0+0x100>
 800f506:	460d      	mov	r5, r1
 800f508:	462e      	mov	r6, r5
 800f50a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f50e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f512:	f017 0708 	ands.w	r7, r7, #8
 800f516:	d1f7      	bne.n	800f508 <_strtol_l.constprop.0+0x20>
 800f518:	2c2d      	cmp	r4, #45	; 0x2d
 800f51a:	d132      	bne.n	800f582 <_strtol_l.constprop.0+0x9a>
 800f51c:	782c      	ldrb	r4, [r5, #0]
 800f51e:	2701      	movs	r7, #1
 800f520:	1cb5      	adds	r5, r6, #2
 800f522:	2b00      	cmp	r3, #0
 800f524:	d05b      	beq.n	800f5de <_strtol_l.constprop.0+0xf6>
 800f526:	2b10      	cmp	r3, #16
 800f528:	d109      	bne.n	800f53e <_strtol_l.constprop.0+0x56>
 800f52a:	2c30      	cmp	r4, #48	; 0x30
 800f52c:	d107      	bne.n	800f53e <_strtol_l.constprop.0+0x56>
 800f52e:	782c      	ldrb	r4, [r5, #0]
 800f530:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f534:	2c58      	cmp	r4, #88	; 0x58
 800f536:	d14d      	bne.n	800f5d4 <_strtol_l.constprop.0+0xec>
 800f538:	786c      	ldrb	r4, [r5, #1]
 800f53a:	2310      	movs	r3, #16
 800f53c:	3502      	adds	r5, #2
 800f53e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f542:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f546:	f04f 0c00 	mov.w	ip, #0
 800f54a:	fbb8 f9f3 	udiv	r9, r8, r3
 800f54e:	4666      	mov	r6, ip
 800f550:	fb03 8a19 	mls	sl, r3, r9, r8
 800f554:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f558:	f1be 0f09 	cmp.w	lr, #9
 800f55c:	d816      	bhi.n	800f58c <_strtol_l.constprop.0+0xa4>
 800f55e:	4674      	mov	r4, lr
 800f560:	42a3      	cmp	r3, r4
 800f562:	dd24      	ble.n	800f5ae <_strtol_l.constprop.0+0xc6>
 800f564:	f1bc 0f00 	cmp.w	ip, #0
 800f568:	db1e      	blt.n	800f5a8 <_strtol_l.constprop.0+0xc0>
 800f56a:	45b1      	cmp	r9, r6
 800f56c:	d31c      	bcc.n	800f5a8 <_strtol_l.constprop.0+0xc0>
 800f56e:	d101      	bne.n	800f574 <_strtol_l.constprop.0+0x8c>
 800f570:	45a2      	cmp	sl, r4
 800f572:	db19      	blt.n	800f5a8 <_strtol_l.constprop.0+0xc0>
 800f574:	fb06 4603 	mla	r6, r6, r3, r4
 800f578:	f04f 0c01 	mov.w	ip, #1
 800f57c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f580:	e7e8      	b.n	800f554 <_strtol_l.constprop.0+0x6c>
 800f582:	2c2b      	cmp	r4, #43	; 0x2b
 800f584:	bf04      	itt	eq
 800f586:	782c      	ldrbeq	r4, [r5, #0]
 800f588:	1cb5      	addeq	r5, r6, #2
 800f58a:	e7ca      	b.n	800f522 <_strtol_l.constprop.0+0x3a>
 800f58c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f590:	f1be 0f19 	cmp.w	lr, #25
 800f594:	d801      	bhi.n	800f59a <_strtol_l.constprop.0+0xb2>
 800f596:	3c37      	subs	r4, #55	; 0x37
 800f598:	e7e2      	b.n	800f560 <_strtol_l.constprop.0+0x78>
 800f59a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f59e:	f1be 0f19 	cmp.w	lr, #25
 800f5a2:	d804      	bhi.n	800f5ae <_strtol_l.constprop.0+0xc6>
 800f5a4:	3c57      	subs	r4, #87	; 0x57
 800f5a6:	e7db      	b.n	800f560 <_strtol_l.constprop.0+0x78>
 800f5a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f5ac:	e7e6      	b.n	800f57c <_strtol_l.constprop.0+0x94>
 800f5ae:	f1bc 0f00 	cmp.w	ip, #0
 800f5b2:	da05      	bge.n	800f5c0 <_strtol_l.constprop.0+0xd8>
 800f5b4:	2322      	movs	r3, #34	; 0x22
 800f5b6:	6003      	str	r3, [r0, #0]
 800f5b8:	4646      	mov	r6, r8
 800f5ba:	b942      	cbnz	r2, 800f5ce <_strtol_l.constprop.0+0xe6>
 800f5bc:	4630      	mov	r0, r6
 800f5be:	e79e      	b.n	800f4fe <_strtol_l.constprop.0+0x16>
 800f5c0:	b107      	cbz	r7, 800f5c4 <_strtol_l.constprop.0+0xdc>
 800f5c2:	4276      	negs	r6, r6
 800f5c4:	2a00      	cmp	r2, #0
 800f5c6:	d0f9      	beq.n	800f5bc <_strtol_l.constprop.0+0xd4>
 800f5c8:	f1bc 0f00 	cmp.w	ip, #0
 800f5cc:	d000      	beq.n	800f5d0 <_strtol_l.constprop.0+0xe8>
 800f5ce:	1e69      	subs	r1, r5, #1
 800f5d0:	6011      	str	r1, [r2, #0]
 800f5d2:	e7f3      	b.n	800f5bc <_strtol_l.constprop.0+0xd4>
 800f5d4:	2430      	movs	r4, #48	; 0x30
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1b1      	bne.n	800f53e <_strtol_l.constprop.0+0x56>
 800f5da:	2308      	movs	r3, #8
 800f5dc:	e7af      	b.n	800f53e <_strtol_l.constprop.0+0x56>
 800f5de:	2c30      	cmp	r4, #48	; 0x30
 800f5e0:	d0a5      	beq.n	800f52e <_strtol_l.constprop.0+0x46>
 800f5e2:	230a      	movs	r3, #10
 800f5e4:	e7ab      	b.n	800f53e <_strtol_l.constprop.0+0x56>
 800f5e6:	bf00      	nop
 800f5e8:	0801170d 	.word	0x0801170d

0800f5ec <strtol>:
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	460a      	mov	r2, r1
 800f5f0:	4601      	mov	r1, r0
 800f5f2:	4802      	ldr	r0, [pc, #8]	; (800f5fc <strtol+0x10>)
 800f5f4:	6800      	ldr	r0, [r0, #0]
 800f5f6:	f7ff bf77 	b.w	800f4e8 <_strtol_l.constprop.0>
 800f5fa:	bf00      	nop
 800f5fc:	2400003c 	.word	0x2400003c

0800f600 <__ssputs_r>:
 800f600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f604:	688e      	ldr	r6, [r1, #8]
 800f606:	429e      	cmp	r6, r3
 800f608:	4682      	mov	sl, r0
 800f60a:	460c      	mov	r4, r1
 800f60c:	4690      	mov	r8, r2
 800f60e:	461f      	mov	r7, r3
 800f610:	d838      	bhi.n	800f684 <__ssputs_r+0x84>
 800f612:	898a      	ldrh	r2, [r1, #12]
 800f614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f618:	d032      	beq.n	800f680 <__ssputs_r+0x80>
 800f61a:	6825      	ldr	r5, [r4, #0]
 800f61c:	6909      	ldr	r1, [r1, #16]
 800f61e:	eba5 0901 	sub.w	r9, r5, r1
 800f622:	6965      	ldr	r5, [r4, #20]
 800f624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f62c:	3301      	adds	r3, #1
 800f62e:	444b      	add	r3, r9
 800f630:	106d      	asrs	r5, r5, #1
 800f632:	429d      	cmp	r5, r3
 800f634:	bf38      	it	cc
 800f636:	461d      	movcc	r5, r3
 800f638:	0553      	lsls	r3, r2, #21
 800f63a:	d531      	bpl.n	800f6a0 <__ssputs_r+0xa0>
 800f63c:	4629      	mov	r1, r5
 800f63e:	f000 fb55 	bl	800fcec <_malloc_r>
 800f642:	4606      	mov	r6, r0
 800f644:	b950      	cbnz	r0, 800f65c <__ssputs_r+0x5c>
 800f646:	230c      	movs	r3, #12
 800f648:	f8ca 3000 	str.w	r3, [sl]
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f652:	81a3      	strh	r3, [r4, #12]
 800f654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f65c:	6921      	ldr	r1, [r4, #16]
 800f65e:	464a      	mov	r2, r9
 800f660:	f7ff ff0c 	bl	800f47c <memcpy>
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f66e:	81a3      	strh	r3, [r4, #12]
 800f670:	6126      	str	r6, [r4, #16]
 800f672:	6165      	str	r5, [r4, #20]
 800f674:	444e      	add	r6, r9
 800f676:	eba5 0509 	sub.w	r5, r5, r9
 800f67a:	6026      	str	r6, [r4, #0]
 800f67c:	60a5      	str	r5, [r4, #8]
 800f67e:	463e      	mov	r6, r7
 800f680:	42be      	cmp	r6, r7
 800f682:	d900      	bls.n	800f686 <__ssputs_r+0x86>
 800f684:	463e      	mov	r6, r7
 800f686:	6820      	ldr	r0, [r4, #0]
 800f688:	4632      	mov	r2, r6
 800f68a:	4641      	mov	r1, r8
 800f68c:	f000 faa8 	bl	800fbe0 <memmove>
 800f690:	68a3      	ldr	r3, [r4, #8]
 800f692:	1b9b      	subs	r3, r3, r6
 800f694:	60a3      	str	r3, [r4, #8]
 800f696:	6823      	ldr	r3, [r4, #0]
 800f698:	4433      	add	r3, r6
 800f69a:	6023      	str	r3, [r4, #0]
 800f69c:	2000      	movs	r0, #0
 800f69e:	e7db      	b.n	800f658 <__ssputs_r+0x58>
 800f6a0:	462a      	mov	r2, r5
 800f6a2:	f000 fb97 	bl	800fdd4 <_realloc_r>
 800f6a6:	4606      	mov	r6, r0
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d1e1      	bne.n	800f670 <__ssputs_r+0x70>
 800f6ac:	6921      	ldr	r1, [r4, #16]
 800f6ae:	4650      	mov	r0, sl
 800f6b0:	f000 fab0 	bl	800fc14 <_free_r>
 800f6b4:	e7c7      	b.n	800f646 <__ssputs_r+0x46>
	...

0800f6b8 <_svfiprintf_r>:
 800f6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6bc:	4698      	mov	r8, r3
 800f6be:	898b      	ldrh	r3, [r1, #12]
 800f6c0:	061b      	lsls	r3, r3, #24
 800f6c2:	b09d      	sub	sp, #116	; 0x74
 800f6c4:	4607      	mov	r7, r0
 800f6c6:	460d      	mov	r5, r1
 800f6c8:	4614      	mov	r4, r2
 800f6ca:	d50e      	bpl.n	800f6ea <_svfiprintf_r+0x32>
 800f6cc:	690b      	ldr	r3, [r1, #16]
 800f6ce:	b963      	cbnz	r3, 800f6ea <_svfiprintf_r+0x32>
 800f6d0:	2140      	movs	r1, #64	; 0x40
 800f6d2:	f000 fb0b 	bl	800fcec <_malloc_r>
 800f6d6:	6028      	str	r0, [r5, #0]
 800f6d8:	6128      	str	r0, [r5, #16]
 800f6da:	b920      	cbnz	r0, 800f6e6 <_svfiprintf_r+0x2e>
 800f6dc:	230c      	movs	r3, #12
 800f6de:	603b      	str	r3, [r7, #0]
 800f6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6e4:	e0d1      	b.n	800f88a <_svfiprintf_r+0x1d2>
 800f6e6:	2340      	movs	r3, #64	; 0x40
 800f6e8:	616b      	str	r3, [r5, #20]
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f6ee:	2320      	movs	r3, #32
 800f6f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6f8:	2330      	movs	r3, #48	; 0x30
 800f6fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f8a4 <_svfiprintf_r+0x1ec>
 800f6fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f702:	f04f 0901 	mov.w	r9, #1
 800f706:	4623      	mov	r3, r4
 800f708:	469a      	mov	sl, r3
 800f70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f70e:	b10a      	cbz	r2, 800f714 <_svfiprintf_r+0x5c>
 800f710:	2a25      	cmp	r2, #37	; 0x25
 800f712:	d1f9      	bne.n	800f708 <_svfiprintf_r+0x50>
 800f714:	ebba 0b04 	subs.w	fp, sl, r4
 800f718:	d00b      	beq.n	800f732 <_svfiprintf_r+0x7a>
 800f71a:	465b      	mov	r3, fp
 800f71c:	4622      	mov	r2, r4
 800f71e:	4629      	mov	r1, r5
 800f720:	4638      	mov	r0, r7
 800f722:	f7ff ff6d 	bl	800f600 <__ssputs_r>
 800f726:	3001      	adds	r0, #1
 800f728:	f000 80aa 	beq.w	800f880 <_svfiprintf_r+0x1c8>
 800f72c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f72e:	445a      	add	r2, fp
 800f730:	9209      	str	r2, [sp, #36]	; 0x24
 800f732:	f89a 3000 	ldrb.w	r3, [sl]
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 80a2 	beq.w	800f880 <_svfiprintf_r+0x1c8>
 800f73c:	2300      	movs	r3, #0
 800f73e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f746:	f10a 0a01 	add.w	sl, sl, #1
 800f74a:	9304      	str	r3, [sp, #16]
 800f74c:	9307      	str	r3, [sp, #28]
 800f74e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f752:	931a      	str	r3, [sp, #104]	; 0x68
 800f754:	4654      	mov	r4, sl
 800f756:	2205      	movs	r2, #5
 800f758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f75c:	4851      	ldr	r0, [pc, #324]	; (800f8a4 <_svfiprintf_r+0x1ec>)
 800f75e:	f7f0 fdc7 	bl	80002f0 <memchr>
 800f762:	9a04      	ldr	r2, [sp, #16]
 800f764:	b9d8      	cbnz	r0, 800f79e <_svfiprintf_r+0xe6>
 800f766:	06d0      	lsls	r0, r2, #27
 800f768:	bf44      	itt	mi
 800f76a:	2320      	movmi	r3, #32
 800f76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f770:	0711      	lsls	r1, r2, #28
 800f772:	bf44      	itt	mi
 800f774:	232b      	movmi	r3, #43	; 0x2b
 800f776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f77a:	f89a 3000 	ldrb.w	r3, [sl]
 800f77e:	2b2a      	cmp	r3, #42	; 0x2a
 800f780:	d015      	beq.n	800f7ae <_svfiprintf_r+0xf6>
 800f782:	9a07      	ldr	r2, [sp, #28]
 800f784:	4654      	mov	r4, sl
 800f786:	2000      	movs	r0, #0
 800f788:	f04f 0c0a 	mov.w	ip, #10
 800f78c:	4621      	mov	r1, r4
 800f78e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f792:	3b30      	subs	r3, #48	; 0x30
 800f794:	2b09      	cmp	r3, #9
 800f796:	d94e      	bls.n	800f836 <_svfiprintf_r+0x17e>
 800f798:	b1b0      	cbz	r0, 800f7c8 <_svfiprintf_r+0x110>
 800f79a:	9207      	str	r2, [sp, #28]
 800f79c:	e014      	b.n	800f7c8 <_svfiprintf_r+0x110>
 800f79e:	eba0 0308 	sub.w	r3, r0, r8
 800f7a2:	fa09 f303 	lsl.w	r3, r9, r3
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	9304      	str	r3, [sp, #16]
 800f7aa:	46a2      	mov	sl, r4
 800f7ac:	e7d2      	b.n	800f754 <_svfiprintf_r+0x9c>
 800f7ae:	9b03      	ldr	r3, [sp, #12]
 800f7b0:	1d19      	adds	r1, r3, #4
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	9103      	str	r1, [sp, #12]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	bfbb      	ittet	lt
 800f7ba:	425b      	neglt	r3, r3
 800f7bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f7c0:	9307      	strge	r3, [sp, #28]
 800f7c2:	9307      	strlt	r3, [sp, #28]
 800f7c4:	bfb8      	it	lt
 800f7c6:	9204      	strlt	r2, [sp, #16]
 800f7c8:	7823      	ldrb	r3, [r4, #0]
 800f7ca:	2b2e      	cmp	r3, #46	; 0x2e
 800f7cc:	d10c      	bne.n	800f7e8 <_svfiprintf_r+0x130>
 800f7ce:	7863      	ldrb	r3, [r4, #1]
 800f7d0:	2b2a      	cmp	r3, #42	; 0x2a
 800f7d2:	d135      	bne.n	800f840 <_svfiprintf_r+0x188>
 800f7d4:	9b03      	ldr	r3, [sp, #12]
 800f7d6:	1d1a      	adds	r2, r3, #4
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	9203      	str	r2, [sp, #12]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	bfb8      	it	lt
 800f7e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f7e4:	3402      	adds	r4, #2
 800f7e6:	9305      	str	r3, [sp, #20]
 800f7e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f8b4 <_svfiprintf_r+0x1fc>
 800f7ec:	7821      	ldrb	r1, [r4, #0]
 800f7ee:	2203      	movs	r2, #3
 800f7f0:	4650      	mov	r0, sl
 800f7f2:	f7f0 fd7d 	bl	80002f0 <memchr>
 800f7f6:	b140      	cbz	r0, 800f80a <_svfiprintf_r+0x152>
 800f7f8:	2340      	movs	r3, #64	; 0x40
 800f7fa:	eba0 000a 	sub.w	r0, r0, sl
 800f7fe:	fa03 f000 	lsl.w	r0, r3, r0
 800f802:	9b04      	ldr	r3, [sp, #16]
 800f804:	4303      	orrs	r3, r0
 800f806:	3401      	adds	r4, #1
 800f808:	9304      	str	r3, [sp, #16]
 800f80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f80e:	4826      	ldr	r0, [pc, #152]	; (800f8a8 <_svfiprintf_r+0x1f0>)
 800f810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f814:	2206      	movs	r2, #6
 800f816:	f7f0 fd6b 	bl	80002f0 <memchr>
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d038      	beq.n	800f890 <_svfiprintf_r+0x1d8>
 800f81e:	4b23      	ldr	r3, [pc, #140]	; (800f8ac <_svfiprintf_r+0x1f4>)
 800f820:	bb1b      	cbnz	r3, 800f86a <_svfiprintf_r+0x1b2>
 800f822:	9b03      	ldr	r3, [sp, #12]
 800f824:	3307      	adds	r3, #7
 800f826:	f023 0307 	bic.w	r3, r3, #7
 800f82a:	3308      	adds	r3, #8
 800f82c:	9303      	str	r3, [sp, #12]
 800f82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f830:	4433      	add	r3, r6
 800f832:	9309      	str	r3, [sp, #36]	; 0x24
 800f834:	e767      	b.n	800f706 <_svfiprintf_r+0x4e>
 800f836:	fb0c 3202 	mla	r2, ip, r2, r3
 800f83a:	460c      	mov	r4, r1
 800f83c:	2001      	movs	r0, #1
 800f83e:	e7a5      	b.n	800f78c <_svfiprintf_r+0xd4>
 800f840:	2300      	movs	r3, #0
 800f842:	3401      	adds	r4, #1
 800f844:	9305      	str	r3, [sp, #20]
 800f846:	4619      	mov	r1, r3
 800f848:	f04f 0c0a 	mov.w	ip, #10
 800f84c:	4620      	mov	r0, r4
 800f84e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f852:	3a30      	subs	r2, #48	; 0x30
 800f854:	2a09      	cmp	r2, #9
 800f856:	d903      	bls.n	800f860 <_svfiprintf_r+0x1a8>
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d0c5      	beq.n	800f7e8 <_svfiprintf_r+0x130>
 800f85c:	9105      	str	r1, [sp, #20]
 800f85e:	e7c3      	b.n	800f7e8 <_svfiprintf_r+0x130>
 800f860:	fb0c 2101 	mla	r1, ip, r1, r2
 800f864:	4604      	mov	r4, r0
 800f866:	2301      	movs	r3, #1
 800f868:	e7f0      	b.n	800f84c <_svfiprintf_r+0x194>
 800f86a:	ab03      	add	r3, sp, #12
 800f86c:	9300      	str	r3, [sp, #0]
 800f86e:	462a      	mov	r2, r5
 800f870:	4b0f      	ldr	r3, [pc, #60]	; (800f8b0 <_svfiprintf_r+0x1f8>)
 800f872:	a904      	add	r1, sp, #16
 800f874:	4638      	mov	r0, r7
 800f876:	f3af 8000 	nop.w
 800f87a:	1c42      	adds	r2, r0, #1
 800f87c:	4606      	mov	r6, r0
 800f87e:	d1d6      	bne.n	800f82e <_svfiprintf_r+0x176>
 800f880:	89ab      	ldrh	r3, [r5, #12]
 800f882:	065b      	lsls	r3, r3, #25
 800f884:	f53f af2c 	bmi.w	800f6e0 <_svfiprintf_r+0x28>
 800f888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f88a:	b01d      	add	sp, #116	; 0x74
 800f88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f890:	ab03      	add	r3, sp, #12
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	462a      	mov	r2, r5
 800f896:	4b06      	ldr	r3, [pc, #24]	; (800f8b0 <_svfiprintf_r+0x1f8>)
 800f898:	a904      	add	r1, sp, #16
 800f89a:	4638      	mov	r0, r7
 800f89c:	f000 f87a 	bl	800f994 <_printf_i>
 800f8a0:	e7eb      	b.n	800f87a <_svfiprintf_r+0x1c2>
 800f8a2:	bf00      	nop
 800f8a4:	0801180d 	.word	0x0801180d
 800f8a8:	08011817 	.word	0x08011817
 800f8ac:	00000000 	.word	0x00000000
 800f8b0:	0800f601 	.word	0x0800f601
 800f8b4:	08011813 	.word	0x08011813

0800f8b8 <_printf_common>:
 800f8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8bc:	4616      	mov	r6, r2
 800f8be:	4699      	mov	r9, r3
 800f8c0:	688a      	ldr	r2, [r1, #8]
 800f8c2:	690b      	ldr	r3, [r1, #16]
 800f8c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	bfb8      	it	lt
 800f8cc:	4613      	movlt	r3, r2
 800f8ce:	6033      	str	r3, [r6, #0]
 800f8d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8d4:	4607      	mov	r7, r0
 800f8d6:	460c      	mov	r4, r1
 800f8d8:	b10a      	cbz	r2, 800f8de <_printf_common+0x26>
 800f8da:	3301      	adds	r3, #1
 800f8dc:	6033      	str	r3, [r6, #0]
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	0699      	lsls	r1, r3, #26
 800f8e2:	bf42      	ittt	mi
 800f8e4:	6833      	ldrmi	r3, [r6, #0]
 800f8e6:	3302      	addmi	r3, #2
 800f8e8:	6033      	strmi	r3, [r6, #0]
 800f8ea:	6825      	ldr	r5, [r4, #0]
 800f8ec:	f015 0506 	ands.w	r5, r5, #6
 800f8f0:	d106      	bne.n	800f900 <_printf_common+0x48>
 800f8f2:	f104 0a19 	add.w	sl, r4, #25
 800f8f6:	68e3      	ldr	r3, [r4, #12]
 800f8f8:	6832      	ldr	r2, [r6, #0]
 800f8fa:	1a9b      	subs	r3, r3, r2
 800f8fc:	42ab      	cmp	r3, r5
 800f8fe:	dc26      	bgt.n	800f94e <_printf_common+0x96>
 800f900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f904:	1e13      	subs	r3, r2, #0
 800f906:	6822      	ldr	r2, [r4, #0]
 800f908:	bf18      	it	ne
 800f90a:	2301      	movne	r3, #1
 800f90c:	0692      	lsls	r2, r2, #26
 800f90e:	d42b      	bmi.n	800f968 <_printf_common+0xb0>
 800f910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f914:	4649      	mov	r1, r9
 800f916:	4638      	mov	r0, r7
 800f918:	47c0      	blx	r8
 800f91a:	3001      	adds	r0, #1
 800f91c:	d01e      	beq.n	800f95c <_printf_common+0xa4>
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	68e5      	ldr	r5, [r4, #12]
 800f922:	6832      	ldr	r2, [r6, #0]
 800f924:	f003 0306 	and.w	r3, r3, #6
 800f928:	2b04      	cmp	r3, #4
 800f92a:	bf08      	it	eq
 800f92c:	1aad      	subeq	r5, r5, r2
 800f92e:	68a3      	ldr	r3, [r4, #8]
 800f930:	6922      	ldr	r2, [r4, #16]
 800f932:	bf0c      	ite	eq
 800f934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f938:	2500      	movne	r5, #0
 800f93a:	4293      	cmp	r3, r2
 800f93c:	bfc4      	itt	gt
 800f93e:	1a9b      	subgt	r3, r3, r2
 800f940:	18ed      	addgt	r5, r5, r3
 800f942:	2600      	movs	r6, #0
 800f944:	341a      	adds	r4, #26
 800f946:	42b5      	cmp	r5, r6
 800f948:	d11a      	bne.n	800f980 <_printf_common+0xc8>
 800f94a:	2000      	movs	r0, #0
 800f94c:	e008      	b.n	800f960 <_printf_common+0xa8>
 800f94e:	2301      	movs	r3, #1
 800f950:	4652      	mov	r2, sl
 800f952:	4649      	mov	r1, r9
 800f954:	4638      	mov	r0, r7
 800f956:	47c0      	blx	r8
 800f958:	3001      	adds	r0, #1
 800f95a:	d103      	bne.n	800f964 <_printf_common+0xac>
 800f95c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f964:	3501      	adds	r5, #1
 800f966:	e7c6      	b.n	800f8f6 <_printf_common+0x3e>
 800f968:	18e1      	adds	r1, r4, r3
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	2030      	movs	r0, #48	; 0x30
 800f96e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f972:	4422      	add	r2, r4
 800f974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f97c:	3302      	adds	r3, #2
 800f97e:	e7c7      	b.n	800f910 <_printf_common+0x58>
 800f980:	2301      	movs	r3, #1
 800f982:	4622      	mov	r2, r4
 800f984:	4649      	mov	r1, r9
 800f986:	4638      	mov	r0, r7
 800f988:	47c0      	blx	r8
 800f98a:	3001      	adds	r0, #1
 800f98c:	d0e6      	beq.n	800f95c <_printf_common+0xa4>
 800f98e:	3601      	adds	r6, #1
 800f990:	e7d9      	b.n	800f946 <_printf_common+0x8e>
	...

0800f994 <_printf_i>:
 800f994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f998:	7e0f      	ldrb	r7, [r1, #24]
 800f99a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f99c:	2f78      	cmp	r7, #120	; 0x78
 800f99e:	4691      	mov	r9, r2
 800f9a0:	4680      	mov	r8, r0
 800f9a2:	460c      	mov	r4, r1
 800f9a4:	469a      	mov	sl, r3
 800f9a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9aa:	d807      	bhi.n	800f9bc <_printf_i+0x28>
 800f9ac:	2f62      	cmp	r7, #98	; 0x62
 800f9ae:	d80a      	bhi.n	800f9c6 <_printf_i+0x32>
 800f9b0:	2f00      	cmp	r7, #0
 800f9b2:	f000 80d8 	beq.w	800fb66 <_printf_i+0x1d2>
 800f9b6:	2f58      	cmp	r7, #88	; 0x58
 800f9b8:	f000 80a3 	beq.w	800fb02 <_printf_i+0x16e>
 800f9bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9c4:	e03a      	b.n	800fa3c <_printf_i+0xa8>
 800f9c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9ca:	2b15      	cmp	r3, #21
 800f9cc:	d8f6      	bhi.n	800f9bc <_printf_i+0x28>
 800f9ce:	a101      	add	r1, pc, #4	; (adr r1, 800f9d4 <_printf_i+0x40>)
 800f9d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9d4:	0800fa2d 	.word	0x0800fa2d
 800f9d8:	0800fa41 	.word	0x0800fa41
 800f9dc:	0800f9bd 	.word	0x0800f9bd
 800f9e0:	0800f9bd 	.word	0x0800f9bd
 800f9e4:	0800f9bd 	.word	0x0800f9bd
 800f9e8:	0800f9bd 	.word	0x0800f9bd
 800f9ec:	0800fa41 	.word	0x0800fa41
 800f9f0:	0800f9bd 	.word	0x0800f9bd
 800f9f4:	0800f9bd 	.word	0x0800f9bd
 800f9f8:	0800f9bd 	.word	0x0800f9bd
 800f9fc:	0800f9bd 	.word	0x0800f9bd
 800fa00:	0800fb4d 	.word	0x0800fb4d
 800fa04:	0800fa71 	.word	0x0800fa71
 800fa08:	0800fb2f 	.word	0x0800fb2f
 800fa0c:	0800f9bd 	.word	0x0800f9bd
 800fa10:	0800f9bd 	.word	0x0800f9bd
 800fa14:	0800fb6f 	.word	0x0800fb6f
 800fa18:	0800f9bd 	.word	0x0800f9bd
 800fa1c:	0800fa71 	.word	0x0800fa71
 800fa20:	0800f9bd 	.word	0x0800f9bd
 800fa24:	0800f9bd 	.word	0x0800f9bd
 800fa28:	0800fb37 	.word	0x0800fb37
 800fa2c:	682b      	ldr	r3, [r5, #0]
 800fa2e:	1d1a      	adds	r2, r3, #4
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	602a      	str	r2, [r5, #0]
 800fa34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e0a3      	b.n	800fb88 <_printf_i+0x1f4>
 800fa40:	6820      	ldr	r0, [r4, #0]
 800fa42:	6829      	ldr	r1, [r5, #0]
 800fa44:	0606      	lsls	r6, r0, #24
 800fa46:	f101 0304 	add.w	r3, r1, #4
 800fa4a:	d50a      	bpl.n	800fa62 <_printf_i+0xce>
 800fa4c:	680e      	ldr	r6, [r1, #0]
 800fa4e:	602b      	str	r3, [r5, #0]
 800fa50:	2e00      	cmp	r6, #0
 800fa52:	da03      	bge.n	800fa5c <_printf_i+0xc8>
 800fa54:	232d      	movs	r3, #45	; 0x2d
 800fa56:	4276      	negs	r6, r6
 800fa58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa5c:	485e      	ldr	r0, [pc, #376]	; (800fbd8 <_printf_i+0x244>)
 800fa5e:	230a      	movs	r3, #10
 800fa60:	e019      	b.n	800fa96 <_printf_i+0x102>
 800fa62:	680e      	ldr	r6, [r1, #0]
 800fa64:	602b      	str	r3, [r5, #0]
 800fa66:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa6a:	bf18      	it	ne
 800fa6c:	b236      	sxthne	r6, r6
 800fa6e:	e7ef      	b.n	800fa50 <_printf_i+0xbc>
 800fa70:	682b      	ldr	r3, [r5, #0]
 800fa72:	6820      	ldr	r0, [r4, #0]
 800fa74:	1d19      	adds	r1, r3, #4
 800fa76:	6029      	str	r1, [r5, #0]
 800fa78:	0601      	lsls	r1, r0, #24
 800fa7a:	d501      	bpl.n	800fa80 <_printf_i+0xec>
 800fa7c:	681e      	ldr	r6, [r3, #0]
 800fa7e:	e002      	b.n	800fa86 <_printf_i+0xf2>
 800fa80:	0646      	lsls	r6, r0, #25
 800fa82:	d5fb      	bpl.n	800fa7c <_printf_i+0xe8>
 800fa84:	881e      	ldrh	r6, [r3, #0]
 800fa86:	4854      	ldr	r0, [pc, #336]	; (800fbd8 <_printf_i+0x244>)
 800fa88:	2f6f      	cmp	r7, #111	; 0x6f
 800fa8a:	bf0c      	ite	eq
 800fa8c:	2308      	moveq	r3, #8
 800fa8e:	230a      	movne	r3, #10
 800fa90:	2100      	movs	r1, #0
 800fa92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa96:	6865      	ldr	r5, [r4, #4]
 800fa98:	60a5      	str	r5, [r4, #8]
 800fa9a:	2d00      	cmp	r5, #0
 800fa9c:	bfa2      	ittt	ge
 800fa9e:	6821      	ldrge	r1, [r4, #0]
 800faa0:	f021 0104 	bicge.w	r1, r1, #4
 800faa4:	6021      	strge	r1, [r4, #0]
 800faa6:	b90e      	cbnz	r6, 800faac <_printf_i+0x118>
 800faa8:	2d00      	cmp	r5, #0
 800faaa:	d04d      	beq.n	800fb48 <_printf_i+0x1b4>
 800faac:	4615      	mov	r5, r2
 800faae:	fbb6 f1f3 	udiv	r1, r6, r3
 800fab2:	fb03 6711 	mls	r7, r3, r1, r6
 800fab6:	5dc7      	ldrb	r7, [r0, r7]
 800fab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fabc:	4637      	mov	r7, r6
 800fabe:	42bb      	cmp	r3, r7
 800fac0:	460e      	mov	r6, r1
 800fac2:	d9f4      	bls.n	800faae <_printf_i+0x11a>
 800fac4:	2b08      	cmp	r3, #8
 800fac6:	d10b      	bne.n	800fae0 <_printf_i+0x14c>
 800fac8:	6823      	ldr	r3, [r4, #0]
 800faca:	07de      	lsls	r6, r3, #31
 800facc:	d508      	bpl.n	800fae0 <_printf_i+0x14c>
 800face:	6923      	ldr	r3, [r4, #16]
 800fad0:	6861      	ldr	r1, [r4, #4]
 800fad2:	4299      	cmp	r1, r3
 800fad4:	bfde      	ittt	le
 800fad6:	2330      	movle	r3, #48	; 0x30
 800fad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fadc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fae0:	1b52      	subs	r2, r2, r5
 800fae2:	6122      	str	r2, [r4, #16]
 800fae4:	f8cd a000 	str.w	sl, [sp]
 800fae8:	464b      	mov	r3, r9
 800faea:	aa03      	add	r2, sp, #12
 800faec:	4621      	mov	r1, r4
 800faee:	4640      	mov	r0, r8
 800faf0:	f7ff fee2 	bl	800f8b8 <_printf_common>
 800faf4:	3001      	adds	r0, #1
 800faf6:	d14c      	bne.n	800fb92 <_printf_i+0x1fe>
 800faf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fafc:	b004      	add	sp, #16
 800fafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb02:	4835      	ldr	r0, [pc, #212]	; (800fbd8 <_printf_i+0x244>)
 800fb04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fb08:	6829      	ldr	r1, [r5, #0]
 800fb0a:	6823      	ldr	r3, [r4, #0]
 800fb0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb10:	6029      	str	r1, [r5, #0]
 800fb12:	061d      	lsls	r5, r3, #24
 800fb14:	d514      	bpl.n	800fb40 <_printf_i+0x1ac>
 800fb16:	07df      	lsls	r7, r3, #31
 800fb18:	bf44      	itt	mi
 800fb1a:	f043 0320 	orrmi.w	r3, r3, #32
 800fb1e:	6023      	strmi	r3, [r4, #0]
 800fb20:	b91e      	cbnz	r6, 800fb2a <_printf_i+0x196>
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	f023 0320 	bic.w	r3, r3, #32
 800fb28:	6023      	str	r3, [r4, #0]
 800fb2a:	2310      	movs	r3, #16
 800fb2c:	e7b0      	b.n	800fa90 <_printf_i+0xfc>
 800fb2e:	6823      	ldr	r3, [r4, #0]
 800fb30:	f043 0320 	orr.w	r3, r3, #32
 800fb34:	6023      	str	r3, [r4, #0]
 800fb36:	2378      	movs	r3, #120	; 0x78
 800fb38:	4828      	ldr	r0, [pc, #160]	; (800fbdc <_printf_i+0x248>)
 800fb3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb3e:	e7e3      	b.n	800fb08 <_printf_i+0x174>
 800fb40:	0659      	lsls	r1, r3, #25
 800fb42:	bf48      	it	mi
 800fb44:	b2b6      	uxthmi	r6, r6
 800fb46:	e7e6      	b.n	800fb16 <_printf_i+0x182>
 800fb48:	4615      	mov	r5, r2
 800fb4a:	e7bb      	b.n	800fac4 <_printf_i+0x130>
 800fb4c:	682b      	ldr	r3, [r5, #0]
 800fb4e:	6826      	ldr	r6, [r4, #0]
 800fb50:	6961      	ldr	r1, [r4, #20]
 800fb52:	1d18      	adds	r0, r3, #4
 800fb54:	6028      	str	r0, [r5, #0]
 800fb56:	0635      	lsls	r5, r6, #24
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	d501      	bpl.n	800fb60 <_printf_i+0x1cc>
 800fb5c:	6019      	str	r1, [r3, #0]
 800fb5e:	e002      	b.n	800fb66 <_printf_i+0x1d2>
 800fb60:	0670      	lsls	r0, r6, #25
 800fb62:	d5fb      	bpl.n	800fb5c <_printf_i+0x1c8>
 800fb64:	8019      	strh	r1, [r3, #0]
 800fb66:	2300      	movs	r3, #0
 800fb68:	6123      	str	r3, [r4, #16]
 800fb6a:	4615      	mov	r5, r2
 800fb6c:	e7ba      	b.n	800fae4 <_printf_i+0x150>
 800fb6e:	682b      	ldr	r3, [r5, #0]
 800fb70:	1d1a      	adds	r2, r3, #4
 800fb72:	602a      	str	r2, [r5, #0]
 800fb74:	681d      	ldr	r5, [r3, #0]
 800fb76:	6862      	ldr	r2, [r4, #4]
 800fb78:	2100      	movs	r1, #0
 800fb7a:	4628      	mov	r0, r5
 800fb7c:	f7f0 fbb8 	bl	80002f0 <memchr>
 800fb80:	b108      	cbz	r0, 800fb86 <_printf_i+0x1f2>
 800fb82:	1b40      	subs	r0, r0, r5
 800fb84:	6060      	str	r0, [r4, #4]
 800fb86:	6863      	ldr	r3, [r4, #4]
 800fb88:	6123      	str	r3, [r4, #16]
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb90:	e7a8      	b.n	800fae4 <_printf_i+0x150>
 800fb92:	6923      	ldr	r3, [r4, #16]
 800fb94:	462a      	mov	r2, r5
 800fb96:	4649      	mov	r1, r9
 800fb98:	4640      	mov	r0, r8
 800fb9a:	47d0      	blx	sl
 800fb9c:	3001      	adds	r0, #1
 800fb9e:	d0ab      	beq.n	800faf8 <_printf_i+0x164>
 800fba0:	6823      	ldr	r3, [r4, #0]
 800fba2:	079b      	lsls	r3, r3, #30
 800fba4:	d413      	bmi.n	800fbce <_printf_i+0x23a>
 800fba6:	68e0      	ldr	r0, [r4, #12]
 800fba8:	9b03      	ldr	r3, [sp, #12]
 800fbaa:	4298      	cmp	r0, r3
 800fbac:	bfb8      	it	lt
 800fbae:	4618      	movlt	r0, r3
 800fbb0:	e7a4      	b.n	800fafc <_printf_i+0x168>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	4632      	mov	r2, r6
 800fbb6:	4649      	mov	r1, r9
 800fbb8:	4640      	mov	r0, r8
 800fbba:	47d0      	blx	sl
 800fbbc:	3001      	adds	r0, #1
 800fbbe:	d09b      	beq.n	800faf8 <_printf_i+0x164>
 800fbc0:	3501      	adds	r5, #1
 800fbc2:	68e3      	ldr	r3, [r4, #12]
 800fbc4:	9903      	ldr	r1, [sp, #12]
 800fbc6:	1a5b      	subs	r3, r3, r1
 800fbc8:	42ab      	cmp	r3, r5
 800fbca:	dcf2      	bgt.n	800fbb2 <_printf_i+0x21e>
 800fbcc:	e7eb      	b.n	800fba6 <_printf_i+0x212>
 800fbce:	2500      	movs	r5, #0
 800fbd0:	f104 0619 	add.w	r6, r4, #25
 800fbd4:	e7f5      	b.n	800fbc2 <_printf_i+0x22e>
 800fbd6:	bf00      	nop
 800fbd8:	0801181e 	.word	0x0801181e
 800fbdc:	0801182f 	.word	0x0801182f

0800fbe0 <memmove>:
 800fbe0:	4288      	cmp	r0, r1
 800fbe2:	b510      	push	{r4, lr}
 800fbe4:	eb01 0402 	add.w	r4, r1, r2
 800fbe8:	d902      	bls.n	800fbf0 <memmove+0x10>
 800fbea:	4284      	cmp	r4, r0
 800fbec:	4623      	mov	r3, r4
 800fbee:	d807      	bhi.n	800fc00 <memmove+0x20>
 800fbf0:	1e43      	subs	r3, r0, #1
 800fbf2:	42a1      	cmp	r1, r4
 800fbf4:	d008      	beq.n	800fc08 <memmove+0x28>
 800fbf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbfe:	e7f8      	b.n	800fbf2 <memmove+0x12>
 800fc00:	4402      	add	r2, r0
 800fc02:	4601      	mov	r1, r0
 800fc04:	428a      	cmp	r2, r1
 800fc06:	d100      	bne.n	800fc0a <memmove+0x2a>
 800fc08:	bd10      	pop	{r4, pc}
 800fc0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc12:	e7f7      	b.n	800fc04 <memmove+0x24>

0800fc14 <_free_r>:
 800fc14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc16:	2900      	cmp	r1, #0
 800fc18:	d044      	beq.n	800fca4 <_free_r+0x90>
 800fc1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc1e:	9001      	str	r0, [sp, #4]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	f1a1 0404 	sub.w	r4, r1, #4
 800fc26:	bfb8      	it	lt
 800fc28:	18e4      	addlt	r4, r4, r3
 800fc2a:	f000 f913 	bl	800fe54 <__malloc_lock>
 800fc2e:	4a1e      	ldr	r2, [pc, #120]	; (800fca8 <_free_r+0x94>)
 800fc30:	9801      	ldr	r0, [sp, #4]
 800fc32:	6813      	ldr	r3, [r2, #0]
 800fc34:	b933      	cbnz	r3, 800fc44 <_free_r+0x30>
 800fc36:	6063      	str	r3, [r4, #4]
 800fc38:	6014      	str	r4, [r2, #0]
 800fc3a:	b003      	add	sp, #12
 800fc3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc40:	f000 b90e 	b.w	800fe60 <__malloc_unlock>
 800fc44:	42a3      	cmp	r3, r4
 800fc46:	d908      	bls.n	800fc5a <_free_r+0x46>
 800fc48:	6825      	ldr	r5, [r4, #0]
 800fc4a:	1961      	adds	r1, r4, r5
 800fc4c:	428b      	cmp	r3, r1
 800fc4e:	bf01      	itttt	eq
 800fc50:	6819      	ldreq	r1, [r3, #0]
 800fc52:	685b      	ldreq	r3, [r3, #4]
 800fc54:	1949      	addeq	r1, r1, r5
 800fc56:	6021      	streq	r1, [r4, #0]
 800fc58:	e7ed      	b.n	800fc36 <_free_r+0x22>
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	b10b      	cbz	r3, 800fc64 <_free_r+0x50>
 800fc60:	42a3      	cmp	r3, r4
 800fc62:	d9fa      	bls.n	800fc5a <_free_r+0x46>
 800fc64:	6811      	ldr	r1, [r2, #0]
 800fc66:	1855      	adds	r5, r2, r1
 800fc68:	42a5      	cmp	r5, r4
 800fc6a:	d10b      	bne.n	800fc84 <_free_r+0x70>
 800fc6c:	6824      	ldr	r4, [r4, #0]
 800fc6e:	4421      	add	r1, r4
 800fc70:	1854      	adds	r4, r2, r1
 800fc72:	42a3      	cmp	r3, r4
 800fc74:	6011      	str	r1, [r2, #0]
 800fc76:	d1e0      	bne.n	800fc3a <_free_r+0x26>
 800fc78:	681c      	ldr	r4, [r3, #0]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	6053      	str	r3, [r2, #4]
 800fc7e:	4421      	add	r1, r4
 800fc80:	6011      	str	r1, [r2, #0]
 800fc82:	e7da      	b.n	800fc3a <_free_r+0x26>
 800fc84:	d902      	bls.n	800fc8c <_free_r+0x78>
 800fc86:	230c      	movs	r3, #12
 800fc88:	6003      	str	r3, [r0, #0]
 800fc8a:	e7d6      	b.n	800fc3a <_free_r+0x26>
 800fc8c:	6825      	ldr	r5, [r4, #0]
 800fc8e:	1961      	adds	r1, r4, r5
 800fc90:	428b      	cmp	r3, r1
 800fc92:	bf04      	itt	eq
 800fc94:	6819      	ldreq	r1, [r3, #0]
 800fc96:	685b      	ldreq	r3, [r3, #4]
 800fc98:	6063      	str	r3, [r4, #4]
 800fc9a:	bf04      	itt	eq
 800fc9c:	1949      	addeq	r1, r1, r5
 800fc9e:	6021      	streq	r1, [r4, #0]
 800fca0:	6054      	str	r4, [r2, #4]
 800fca2:	e7ca      	b.n	800fc3a <_free_r+0x26>
 800fca4:	b003      	add	sp, #12
 800fca6:	bd30      	pop	{r4, r5, pc}
 800fca8:	24001888 	.word	0x24001888

0800fcac <sbrk_aligned>:
 800fcac:	b570      	push	{r4, r5, r6, lr}
 800fcae:	4e0e      	ldr	r6, [pc, #56]	; (800fce8 <sbrk_aligned+0x3c>)
 800fcb0:	460c      	mov	r4, r1
 800fcb2:	6831      	ldr	r1, [r6, #0]
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	b911      	cbnz	r1, 800fcbe <sbrk_aligned+0x12>
 800fcb8:	f000 f8bc 	bl	800fe34 <_sbrk_r>
 800fcbc:	6030      	str	r0, [r6, #0]
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	f000 f8b7 	bl	800fe34 <_sbrk_r>
 800fcc6:	1c43      	adds	r3, r0, #1
 800fcc8:	d00a      	beq.n	800fce0 <sbrk_aligned+0x34>
 800fcca:	1cc4      	adds	r4, r0, #3
 800fccc:	f024 0403 	bic.w	r4, r4, #3
 800fcd0:	42a0      	cmp	r0, r4
 800fcd2:	d007      	beq.n	800fce4 <sbrk_aligned+0x38>
 800fcd4:	1a21      	subs	r1, r4, r0
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	f000 f8ac 	bl	800fe34 <_sbrk_r>
 800fcdc:	3001      	adds	r0, #1
 800fcde:	d101      	bne.n	800fce4 <sbrk_aligned+0x38>
 800fce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fce4:	4620      	mov	r0, r4
 800fce6:	bd70      	pop	{r4, r5, r6, pc}
 800fce8:	2400188c 	.word	0x2400188c

0800fcec <_malloc_r>:
 800fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf0:	1ccd      	adds	r5, r1, #3
 800fcf2:	f025 0503 	bic.w	r5, r5, #3
 800fcf6:	3508      	adds	r5, #8
 800fcf8:	2d0c      	cmp	r5, #12
 800fcfa:	bf38      	it	cc
 800fcfc:	250c      	movcc	r5, #12
 800fcfe:	2d00      	cmp	r5, #0
 800fd00:	4607      	mov	r7, r0
 800fd02:	db01      	blt.n	800fd08 <_malloc_r+0x1c>
 800fd04:	42a9      	cmp	r1, r5
 800fd06:	d905      	bls.n	800fd14 <_malloc_r+0x28>
 800fd08:	230c      	movs	r3, #12
 800fd0a:	603b      	str	r3, [r7, #0]
 800fd0c:	2600      	movs	r6, #0
 800fd0e:	4630      	mov	r0, r6
 800fd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd14:	4e2e      	ldr	r6, [pc, #184]	; (800fdd0 <_malloc_r+0xe4>)
 800fd16:	f000 f89d 	bl	800fe54 <__malloc_lock>
 800fd1a:	6833      	ldr	r3, [r6, #0]
 800fd1c:	461c      	mov	r4, r3
 800fd1e:	bb34      	cbnz	r4, 800fd6e <_malloc_r+0x82>
 800fd20:	4629      	mov	r1, r5
 800fd22:	4638      	mov	r0, r7
 800fd24:	f7ff ffc2 	bl	800fcac <sbrk_aligned>
 800fd28:	1c43      	adds	r3, r0, #1
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	d14d      	bne.n	800fdca <_malloc_r+0xde>
 800fd2e:	6834      	ldr	r4, [r6, #0]
 800fd30:	4626      	mov	r6, r4
 800fd32:	2e00      	cmp	r6, #0
 800fd34:	d140      	bne.n	800fdb8 <_malloc_r+0xcc>
 800fd36:	6823      	ldr	r3, [r4, #0]
 800fd38:	4631      	mov	r1, r6
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	eb04 0803 	add.w	r8, r4, r3
 800fd40:	f000 f878 	bl	800fe34 <_sbrk_r>
 800fd44:	4580      	cmp	r8, r0
 800fd46:	d13a      	bne.n	800fdbe <_malloc_r+0xd2>
 800fd48:	6821      	ldr	r1, [r4, #0]
 800fd4a:	3503      	adds	r5, #3
 800fd4c:	1a6d      	subs	r5, r5, r1
 800fd4e:	f025 0503 	bic.w	r5, r5, #3
 800fd52:	3508      	adds	r5, #8
 800fd54:	2d0c      	cmp	r5, #12
 800fd56:	bf38      	it	cc
 800fd58:	250c      	movcc	r5, #12
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	4638      	mov	r0, r7
 800fd5e:	f7ff ffa5 	bl	800fcac <sbrk_aligned>
 800fd62:	3001      	adds	r0, #1
 800fd64:	d02b      	beq.n	800fdbe <_malloc_r+0xd2>
 800fd66:	6823      	ldr	r3, [r4, #0]
 800fd68:	442b      	add	r3, r5
 800fd6a:	6023      	str	r3, [r4, #0]
 800fd6c:	e00e      	b.n	800fd8c <_malloc_r+0xa0>
 800fd6e:	6822      	ldr	r2, [r4, #0]
 800fd70:	1b52      	subs	r2, r2, r5
 800fd72:	d41e      	bmi.n	800fdb2 <_malloc_r+0xc6>
 800fd74:	2a0b      	cmp	r2, #11
 800fd76:	d916      	bls.n	800fda6 <_malloc_r+0xba>
 800fd78:	1961      	adds	r1, r4, r5
 800fd7a:	42a3      	cmp	r3, r4
 800fd7c:	6025      	str	r5, [r4, #0]
 800fd7e:	bf18      	it	ne
 800fd80:	6059      	strne	r1, [r3, #4]
 800fd82:	6863      	ldr	r3, [r4, #4]
 800fd84:	bf08      	it	eq
 800fd86:	6031      	streq	r1, [r6, #0]
 800fd88:	5162      	str	r2, [r4, r5]
 800fd8a:	604b      	str	r3, [r1, #4]
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	f104 060b 	add.w	r6, r4, #11
 800fd92:	f000 f865 	bl	800fe60 <__malloc_unlock>
 800fd96:	f026 0607 	bic.w	r6, r6, #7
 800fd9a:	1d23      	adds	r3, r4, #4
 800fd9c:	1af2      	subs	r2, r6, r3
 800fd9e:	d0b6      	beq.n	800fd0e <_malloc_r+0x22>
 800fda0:	1b9b      	subs	r3, r3, r6
 800fda2:	50a3      	str	r3, [r4, r2]
 800fda4:	e7b3      	b.n	800fd0e <_malloc_r+0x22>
 800fda6:	6862      	ldr	r2, [r4, #4]
 800fda8:	42a3      	cmp	r3, r4
 800fdaa:	bf0c      	ite	eq
 800fdac:	6032      	streq	r2, [r6, #0]
 800fdae:	605a      	strne	r2, [r3, #4]
 800fdb0:	e7ec      	b.n	800fd8c <_malloc_r+0xa0>
 800fdb2:	4623      	mov	r3, r4
 800fdb4:	6864      	ldr	r4, [r4, #4]
 800fdb6:	e7b2      	b.n	800fd1e <_malloc_r+0x32>
 800fdb8:	4634      	mov	r4, r6
 800fdba:	6876      	ldr	r6, [r6, #4]
 800fdbc:	e7b9      	b.n	800fd32 <_malloc_r+0x46>
 800fdbe:	230c      	movs	r3, #12
 800fdc0:	603b      	str	r3, [r7, #0]
 800fdc2:	4638      	mov	r0, r7
 800fdc4:	f000 f84c 	bl	800fe60 <__malloc_unlock>
 800fdc8:	e7a1      	b.n	800fd0e <_malloc_r+0x22>
 800fdca:	6025      	str	r5, [r4, #0]
 800fdcc:	e7de      	b.n	800fd8c <_malloc_r+0xa0>
 800fdce:	bf00      	nop
 800fdd0:	24001888 	.word	0x24001888

0800fdd4 <_realloc_r>:
 800fdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd8:	4680      	mov	r8, r0
 800fdda:	4614      	mov	r4, r2
 800fddc:	460e      	mov	r6, r1
 800fdde:	b921      	cbnz	r1, 800fdea <_realloc_r+0x16>
 800fde0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fde4:	4611      	mov	r1, r2
 800fde6:	f7ff bf81 	b.w	800fcec <_malloc_r>
 800fdea:	b92a      	cbnz	r2, 800fdf8 <_realloc_r+0x24>
 800fdec:	f7ff ff12 	bl	800fc14 <_free_r>
 800fdf0:	4625      	mov	r5, r4
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf8:	f000 f838 	bl	800fe6c <_malloc_usable_size_r>
 800fdfc:	4284      	cmp	r4, r0
 800fdfe:	4607      	mov	r7, r0
 800fe00:	d802      	bhi.n	800fe08 <_realloc_r+0x34>
 800fe02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe06:	d812      	bhi.n	800fe2e <_realloc_r+0x5a>
 800fe08:	4621      	mov	r1, r4
 800fe0a:	4640      	mov	r0, r8
 800fe0c:	f7ff ff6e 	bl	800fcec <_malloc_r>
 800fe10:	4605      	mov	r5, r0
 800fe12:	2800      	cmp	r0, #0
 800fe14:	d0ed      	beq.n	800fdf2 <_realloc_r+0x1e>
 800fe16:	42bc      	cmp	r4, r7
 800fe18:	4622      	mov	r2, r4
 800fe1a:	4631      	mov	r1, r6
 800fe1c:	bf28      	it	cs
 800fe1e:	463a      	movcs	r2, r7
 800fe20:	f7ff fb2c 	bl	800f47c <memcpy>
 800fe24:	4631      	mov	r1, r6
 800fe26:	4640      	mov	r0, r8
 800fe28:	f7ff fef4 	bl	800fc14 <_free_r>
 800fe2c:	e7e1      	b.n	800fdf2 <_realloc_r+0x1e>
 800fe2e:	4635      	mov	r5, r6
 800fe30:	e7df      	b.n	800fdf2 <_realloc_r+0x1e>
	...

0800fe34 <_sbrk_r>:
 800fe34:	b538      	push	{r3, r4, r5, lr}
 800fe36:	4d06      	ldr	r5, [pc, #24]	; (800fe50 <_sbrk_r+0x1c>)
 800fe38:	2300      	movs	r3, #0
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	4608      	mov	r0, r1
 800fe3e:	602b      	str	r3, [r5, #0]
 800fe40:	f7f4 fdce 	bl	80049e0 <_sbrk>
 800fe44:	1c43      	adds	r3, r0, #1
 800fe46:	d102      	bne.n	800fe4e <_sbrk_r+0x1a>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	b103      	cbz	r3, 800fe4e <_sbrk_r+0x1a>
 800fe4c:	6023      	str	r3, [r4, #0]
 800fe4e:	bd38      	pop	{r3, r4, r5, pc}
 800fe50:	24001890 	.word	0x24001890

0800fe54 <__malloc_lock>:
 800fe54:	4801      	ldr	r0, [pc, #4]	; (800fe5c <__malloc_lock+0x8>)
 800fe56:	f000 b811 	b.w	800fe7c <__retarget_lock_acquire_recursive>
 800fe5a:	bf00      	nop
 800fe5c:	24001894 	.word	0x24001894

0800fe60 <__malloc_unlock>:
 800fe60:	4801      	ldr	r0, [pc, #4]	; (800fe68 <__malloc_unlock+0x8>)
 800fe62:	f000 b80c 	b.w	800fe7e <__retarget_lock_release_recursive>
 800fe66:	bf00      	nop
 800fe68:	24001894 	.word	0x24001894

0800fe6c <_malloc_usable_size_r>:
 800fe6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe70:	1f18      	subs	r0, r3, #4
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	bfbc      	itt	lt
 800fe76:	580b      	ldrlt	r3, [r1, r0]
 800fe78:	18c0      	addlt	r0, r0, r3
 800fe7a:	4770      	bx	lr

0800fe7c <__retarget_lock_acquire_recursive>:
 800fe7c:	4770      	bx	lr

0800fe7e <__retarget_lock_release_recursive>:
 800fe7e:	4770      	bx	lr

0800fe80 <checkint>:
 800fe80:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fe84:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	b570      	push	{r4, r5, r6, lr}
 800fe8c:	dd2a      	ble.n	800fee4 <checkint+0x64>
 800fe8e:	f240 4333 	movw	r3, #1075	; 0x433
 800fe92:	429a      	cmp	r2, r3
 800fe94:	dc24      	bgt.n	800fee0 <checkint+0x60>
 800fe96:	1a9b      	subs	r3, r3, r2
 800fe98:	f1a3 0620 	sub.w	r6, r3, #32
 800fe9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fea0:	fa02 f403 	lsl.w	r4, r2, r3
 800fea4:	fa02 f606 	lsl.w	r6, r2, r6
 800fea8:	f1c3 0520 	rsb	r5, r3, #32
 800feac:	fa22 f505 	lsr.w	r5, r2, r5
 800feb0:	4334      	orrs	r4, r6
 800feb2:	432c      	orrs	r4, r5
 800feb4:	409a      	lsls	r2, r3
 800feb6:	ea20 0202 	bic.w	r2, r0, r2
 800feba:	ea21 0404 	bic.w	r4, r1, r4
 800febe:	4322      	orrs	r2, r4
 800fec0:	f1a3 0420 	sub.w	r4, r3, #32
 800fec4:	f1c3 0220 	rsb	r2, r3, #32
 800fec8:	d10c      	bne.n	800fee4 <checkint+0x64>
 800feca:	40d8      	lsrs	r0, r3
 800fecc:	fa01 f302 	lsl.w	r3, r1, r2
 800fed0:	4318      	orrs	r0, r3
 800fed2:	40e1      	lsrs	r1, r4
 800fed4:	4308      	orrs	r0, r1
 800fed6:	f000 0001 	and.w	r0, r0, #1
 800feda:	f1d0 0002 	rsbs	r0, r0, #2
 800fede:	bd70      	pop	{r4, r5, r6, pc}
 800fee0:	2002      	movs	r0, #2
 800fee2:	e7fc      	b.n	800fede <checkint+0x5e>
 800fee4:	2000      	movs	r0, #0
 800fee6:	e7fa      	b.n	800fede <checkint+0x5e>

0800fee8 <pow>:
 800fee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feec:	ee10 4a90 	vmov	r4, s1
 800fef0:	ed2d 8b0a 	vpush	{d8-d12}
 800fef4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800fef8:	ee11 7a90 	vmov	r7, s3
 800fefc:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800ff00:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800ff04:	429a      	cmp	r2, r3
 800ff06:	ee10 6a10 	vmov	r6, s0
 800ff0a:	ee11 0a10 	vmov	r0, s2
 800ff0e:	b086      	sub	sp, #24
 800ff10:	46d4      	mov	ip, sl
 800ff12:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800ff16:	d806      	bhi.n	800ff26 <pow+0x3e>
 800ff18:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800ff1c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800ff20:	2b7f      	cmp	r3, #127	; 0x7f
 800ff22:	f240 8156 	bls.w	80101d2 <pow+0x2ea>
 800ff26:	1802      	adds	r2, r0, r0
 800ff28:	eb47 0107 	adc.w	r1, r7, r7
 800ff2c:	f06f 0e01 	mvn.w	lr, #1
 800ff30:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 800ff34:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 800ff38:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800ff3c:	45ce      	cmp	lr, r9
 800ff3e:	eb73 0808 	sbcs.w	r8, r3, r8
 800ff42:	d23f      	bcs.n	800ffc4 <pow+0xdc>
 800ff44:	ea52 0301 	orrs.w	r3, r2, r1
 800ff48:	f04f 0300 	mov.w	r3, #0
 800ff4c:	d10c      	bne.n	800ff68 <pow+0x80>
 800ff4e:	19b6      	adds	r6, r6, r6
 800ff50:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800ff54:	4164      	adcs	r4, r4
 800ff56:	42b3      	cmp	r3, r6
 800ff58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ff5c:	41a3      	sbcs	r3, r4
 800ff5e:	f0c0 808c 	bcc.w	801007a <pow+0x192>
 800ff62:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ff66:	e028      	b.n	800ffba <pow+0xd2>
 800ff68:	4da3      	ldr	r5, [pc, #652]	; (80101f8 <pow+0x310>)
 800ff6a:	42ac      	cmp	r4, r5
 800ff6c:	bf08      	it	eq
 800ff6e:	429e      	cmpeq	r6, r3
 800ff70:	d107      	bne.n	800ff82 <pow+0x9a>
 800ff72:	1800      	adds	r0, r0, r0
 800ff74:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800ff78:	417f      	adcs	r7, r7
 800ff7a:	4283      	cmp	r3, r0
 800ff7c:	4b9f      	ldr	r3, [pc, #636]	; (80101fc <pow+0x314>)
 800ff7e:	41bb      	sbcs	r3, r7
 800ff80:	e7ed      	b.n	800ff5e <pow+0x76>
 800ff82:	19b6      	adds	r6, r6, r6
 800ff84:	489e      	ldr	r0, [pc, #632]	; (8010200 <pow+0x318>)
 800ff86:	4164      	adcs	r4, r4
 800ff88:	42b3      	cmp	r3, r6
 800ff8a:	eb70 0504 	sbcs.w	r5, r0, r4
 800ff8e:	d374      	bcc.n	801007a <pow+0x192>
 800ff90:	4281      	cmp	r1, r0
 800ff92:	bf08      	it	eq
 800ff94:	429a      	cmpeq	r2, r3
 800ff96:	d170      	bne.n	801007a <pow+0x192>
 800ff98:	4a9a      	ldr	r2, [pc, #616]	; (8010204 <pow+0x31c>)
 800ff9a:	4294      	cmp	r4, r2
 800ff9c:	bf08      	it	eq
 800ff9e:	429e      	cmpeq	r6, r3
 800ffa0:	d0df      	beq.n	800ff62 <pow+0x7a>
 800ffa2:	4294      	cmp	r4, r2
 800ffa4:	ea6f 0707 	mvn.w	r7, r7
 800ffa8:	bf34      	ite	cc
 800ffaa:	2400      	movcc	r4, #0
 800ffac:	2401      	movcs	r4, #1
 800ffae:	0fff      	lsrs	r7, r7, #31
 800ffb0:	42bc      	cmp	r4, r7
 800ffb2:	f040 81d9 	bne.w	8010368 <pow+0x480>
 800ffb6:	ee21 0b01 	vmul.f64	d0, d1, d1
 800ffba:	b006      	add	sp, #24
 800ffbc:	ecbd 8b0a 	vpop	{d8-d12}
 800ffc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc4:	eb16 0806 	adds.w	r8, r6, r6
 800ffc8:	eb44 0904 	adc.w	r9, r4, r4
 800ffcc:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 800ffd0:	f169 0200 	sbc.w	r2, r9, #0
 800ffd4:	458e      	cmp	lr, r1
 800ffd6:	4193      	sbcs	r3, r2
 800ffd8:	d223      	bcs.n	8010022 <pow+0x13a>
 800ffda:	ee20 0b00 	vmul.f64	d0, d0, d0
 800ffde:	2c00      	cmp	r4, #0
 800ffe0:	da12      	bge.n	8010008 <pow+0x120>
 800ffe2:	4639      	mov	r1, r7
 800ffe4:	f7ff ff4c 	bl	800fe80 <checkint>
 800ffe8:	2801      	cmp	r0, #1
 800ffea:	d10d      	bne.n	8010008 <pow+0x120>
 800ffec:	eeb1 0b40 	vneg.f64	d0, d0
 800fff0:	ea58 0309 	orrs.w	r3, r8, r9
 800fff4:	d10a      	bne.n	801000c <pow+0x124>
 800fff6:	2f00      	cmp	r7, #0
 800fff8:	dadf      	bge.n	800ffba <pow+0xd2>
 800fffa:	b006      	add	sp, #24
 800fffc:	ecbd 8b0a 	vpop	{d8-d12}
 8010000:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010004:	f001 b9b4 	b.w	8011370 <__math_divzero>
 8010008:	2000      	movs	r0, #0
 801000a:	e7f1      	b.n	800fff0 <pow+0x108>
 801000c:	2f00      	cmp	r7, #0
 801000e:	dad4      	bge.n	800ffba <pow+0xd2>
 8010010:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010014:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010018:	ed8d 7b00 	vstr	d7, [sp]
 801001c:	ed9d 0b00 	vldr	d0, [sp]
 8010020:	e7cb      	b.n	800ffba <pow+0xd2>
 8010022:	2c00      	cmp	r4, #0
 8010024:	da2c      	bge.n	8010080 <pow+0x198>
 8010026:	4639      	mov	r1, r7
 8010028:	f7ff ff2a 	bl	800fe80 <checkint>
 801002c:	b930      	cbnz	r0, 801003c <pow+0x154>
 801002e:	b006      	add	sp, #24
 8010030:	ecbd 8b0a 	vpop	{d8-d12}
 8010034:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010038:	f001 b9b2 	b.w	80113a0 <__math_invalid>
 801003c:	2801      	cmp	r0, #1
 801003e:	bf14      	ite	ne
 8010040:	2000      	movne	r0, #0
 8010042:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010046:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801004a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801004e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010052:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010056:	2b7f      	cmp	r3, #127	; 0x7f
 8010058:	d92d      	bls.n	80100b6 <pow+0x1ce>
 801005a:	4b67      	ldr	r3, [pc, #412]	; (80101f8 <pow+0x310>)
 801005c:	2000      	movs	r0, #0
 801005e:	429c      	cmp	r4, r3
 8010060:	bf08      	it	eq
 8010062:	4286      	cmpeq	r6, r0
 8010064:	f43f af7d 	beq.w	800ff62 <pow+0x7a>
 8010068:	f240 31bd 	movw	r1, #957	; 0x3bd
 801006c:	428a      	cmp	r2, r1
 801006e:	d80c      	bhi.n	801008a <pow+0x1a2>
 8010070:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010074:	42b0      	cmp	r0, r6
 8010076:	41a3      	sbcs	r3, r4
 8010078:	d204      	bcs.n	8010084 <pow+0x19c>
 801007a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801007e:	e79c      	b.n	800ffba <pow+0xd2>
 8010080:	2000      	movs	r0, #0
 8010082:	e7e4      	b.n	801004e <pow+0x166>
 8010084:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010088:	e797      	b.n	800ffba <pow+0xd2>
 801008a:	2e01      	cmp	r6, #1
 801008c:	eb74 0303 	sbcs.w	r3, r4, r3
 8010090:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010094:	bf34      	ite	cc
 8010096:	2301      	movcc	r3, #1
 8010098:	2300      	movcs	r3, #0
 801009a:	4295      	cmp	r5, r2
 801009c:	bf8c      	ite	hi
 801009e:	2500      	movhi	r5, #0
 80100a0:	2501      	movls	r5, #1
 80100a2:	42ab      	cmp	r3, r5
 80100a4:	f000 809d 	beq.w	80101e2 <pow+0x2fa>
 80100a8:	b006      	add	sp, #24
 80100aa:	ecbd 8b0a 	vpop	{d8-d12}
 80100ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100b2:	f001 b955 	b.w	8011360 <__math_oflow>
 80100b6:	f1bc 0f00 	cmp.w	ip, #0
 80100ba:	d10b      	bne.n	80100d4 <pow+0x1ec>
 80100bc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80101f0 <pow+0x308>
 80100c0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80100c4:	ec53 2b17 	vmov	r2, r3, d7
 80100c8:	ee17 6a10 	vmov	r6, s14
 80100cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80100d0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80100d4:	4b4c      	ldr	r3, [pc, #304]	; (8010208 <pow+0x320>)
 80100d6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80100da:	4423      	add	r3, r4
 80100dc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80100e0:	1519      	asrs	r1, r3, #20
 80100e2:	0d1b      	lsrs	r3, r3, #20
 80100e4:	051b      	lsls	r3, r3, #20
 80100e6:	eba4 0903 	sub.w	r9, r4, r3
 80100ea:	4b48      	ldr	r3, [pc, #288]	; (801020c <pow+0x324>)
 80100ec:	ee04 1a10 	vmov	s8, r1
 80100f0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80100f4:	f1b6 0800 	subs.w	r8, r6, #0
 80100f8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80100fc:	ec49 8b15 	vmov	d5, r8, r9
 8010100:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010104:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010108:	ed93 7b00 	vldr	d7, [r3]
 801010c:	ed93 5b02 	vldr	d5, [r3, #8]
 8010110:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010114:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010118:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801011c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010120:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010124:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010128:	ed93 5b04 	vldr	d5, [r3, #16]
 801012c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010130:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010134:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010138:	ed93 4b08 	vldr	d4, [r3, #32]
 801013c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010140:	eeb0 9b40 	vmov.f64	d9, d0
 8010144:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010148:	ed93 5b06 	vldr	d5, [r3, #24]
 801014c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010150:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010154:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010158:	eea6 5b04 	vfma.f64	d5, d6, d4
 801015c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010160:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010164:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010168:	ee3a ab00 	vadd.f64	d10, d10, d0
 801016c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010170:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010174:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010178:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801017c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010180:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010184:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010188:	eeab ab05 	vfma.f64	d10, d11, d5
 801018c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8010190:	ee21 7b06 	vmul.f64	d7, d1, d6
 8010194:	ee17 3a90 	vmov	r3, s15
 8010198:	eeb0 5b47 	vmov.f64	d5, d7
 801019c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80101a0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80101a4:	18b2      	adds	r2, r6, r2
 80101a6:	2a3e      	cmp	r2, #62	; 0x3e
 80101a8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80101ac:	ee38 8b46 	vsub.f64	d8, d8, d6
 80101b0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80101b4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80101b8:	d92b      	bls.n	8010212 <pow+0x32a>
 80101ba:	2a00      	cmp	r2, #0
 80101bc:	da0b      	bge.n	80101d6 <pow+0x2ee>
 80101be:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80101c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80101c6:	2800      	cmp	r0, #0
 80101c8:	f43f aef7 	beq.w	800ffba <pow+0xd2>
 80101cc:	eeb1 0b40 	vneg.f64	d0, d0
 80101d0:	e6f3      	b.n	800ffba <pow+0xd2>
 80101d2:	2000      	movs	r0, #0
 80101d4:	e77e      	b.n	80100d4 <pow+0x1ec>
 80101d6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80101da:	d919      	bls.n	8010210 <pow+0x328>
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f6bf af63 	bge.w	80100a8 <pow+0x1c0>
 80101e2:	b006      	add	sp, #24
 80101e4:	ecbd 8b0a 	vpop	{d8-d12}
 80101e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101ec:	f001 b8b0 	b.w	8011350 <__math_uflow>
 80101f0:	00000000 	.word	0x00000000
 80101f4:	43300000 	.word	0x43300000
 80101f8:	3ff00000 	.word	0x3ff00000
 80101fc:	fff00000 	.word	0xfff00000
 8010200:	ffe00000 	.word	0xffe00000
 8010204:	7fe00000 	.word	0x7fe00000
 8010208:	c0196aab 	.word	0xc0196aab
 801020c:	08011840 	.word	0x08011840
 8010210:	2600      	movs	r6, #0
 8010212:	495d      	ldr	r1, [pc, #372]	; (8010388 <pow+0x4a0>)
 8010214:	ed91 4b02 	vldr	d4, [r1, #8]
 8010218:	ed91 3b00 	vldr	d3, [r1]
 801021c:	eeb0 6b44 	vmov.f64	d6, d4
 8010220:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010224:	ee16 5a10 	vmov	r5, s12
 8010228:	ee36 6b44 	vsub.f64	d6, d6, d4
 801022c:	ed91 4b04 	vldr	d4, [r1, #16]
 8010230:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010234:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010238:	eeb0 0b47 	vmov.f64	d0, d7
 801023c:	ed91 7b06 	vldr	d7, [r1, #24]
 8010240:	18dc      	adds	r4, r3, r3
 8010242:	f104 030f 	add.w	r3, r4, #15
 8010246:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801024a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801024e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010252:	ee35 0b00 	vadd.f64	d0, d5, d0
 8010256:	ee20 6b00 	vmul.f64	d6, d0, d0
 801025a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801025e:	ed91 5b08 	vldr	d5, [r1, #32]
 8010262:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010266:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801026a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801026e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8010272:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010276:	ee26 6b06 	vmul.f64	d6, d6, d6
 801027a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801027e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010282:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010286:	eea0 5b04 	vfma.f64	d5, d0, d4
 801028a:	1940      	adds	r0, r0, r5
 801028c:	2700      	movs	r7, #0
 801028e:	eb17 020c 	adds.w	r2, r7, ip
 8010292:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8010296:	eea6 7b05 	vfma.f64	d7, d6, d5
 801029a:	2e00      	cmp	r6, #0
 801029c:	d15f      	bne.n	801035e <pow+0x476>
 801029e:	42bd      	cmp	r5, r7
 80102a0:	db13      	blt.n	80102ca <pow+0x3e2>
 80102a2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80102a6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80102aa:	4610      	mov	r0, r2
 80102ac:	ec41 0b10 	vmov	d0, r0, r1
 80102b0:	eea7 0b00 	vfma.f64	d0, d7, d0
 80102b4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010370 <pow+0x488>
 80102b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80102bc:	b006      	add	sp, #24
 80102be:	ecbd 8b0a 	vpop	{d8-d12}
 80102c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102c6:	f001 b883 	b.w	80113d0 <__math_check_oflow>
 80102ca:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80102ce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80102d2:	4610      	mov	r0, r2
 80102d4:	ec41 0b15 	vmov	d5, r0, r1
 80102d8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80102dc:	ee27 6b05 	vmul.f64	d6, d7, d5
 80102e0:	ee35 7b06 	vadd.f64	d7, d5, d6
 80102e4:	eeb0 3bc7 	vabs.f64	d3, d7
 80102e8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80102ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010378 <pow+0x490>
 80102f4:	d52a      	bpl.n	801034c <pow+0x464>
 80102f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80102fa:	ee35 5b47 	vsub.f64	d5, d5, d7
 80102fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010302:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010306:	ee35 6b06 	vadd.f64	d6, d5, d6
 801030a:	bf48      	it	mi
 801030c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010310:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010314:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010318:	ee35 7b07 	vadd.f64	d7, d5, d7
 801031c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010320:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010324:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010328:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801032c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010330:	d104      	bne.n	801033c <pow+0x454>
 8010332:	4632      	mov	r2, r6
 8010334:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010338:	ec43 2b17 	vmov	d7, r2, r3
 801033c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010340:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010344:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010348:	ed8d 6b04 	vstr	d6, [sp, #16]
 801034c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010350:	b006      	add	sp, #24
 8010352:	ecbd 8b0a 	vpop	{d8-d12}
 8010356:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801035a:	f001 b830 	b.w	80113be <__math_check_uflow>
 801035e:	ec43 2b10 	vmov	d0, r2, r3
 8010362:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010366:	e628      	b.n	800ffba <pow+0xd2>
 8010368:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010380 <pow+0x498>
 801036c:	e625      	b.n	800ffba <pow+0xd2>
 801036e:	bf00      	nop
 8010370:	00000000 	.word	0x00000000
 8010374:	7f000000 	.word	0x7f000000
 8010378:	00000000 	.word	0x00000000
 801037c:	00100000 	.word	0x00100000
	...
 8010388:	08012b38 	.word	0x08012b38
 801038c:	00000000 	.word	0x00000000

08010390 <sin>:
 8010390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010392:	eeb0 7b40 	vmov.f64	d7, d0
 8010396:	ee17 3a90 	vmov	r3, s15
 801039a:	4a21      	ldr	r2, [pc, #132]	; (8010420 <sin+0x90>)
 801039c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80103a0:	4293      	cmp	r3, r2
 80103a2:	dc07      	bgt.n	80103b4 <sin+0x24>
 80103a4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010418 <sin+0x88>
 80103a8:	2000      	movs	r0, #0
 80103aa:	b005      	add	sp, #20
 80103ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80103b0:	f000 bf5a 	b.w	8011268 <__kernel_sin>
 80103b4:	4a1b      	ldr	r2, [pc, #108]	; (8010424 <sin+0x94>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	dd04      	ble.n	80103c4 <sin+0x34>
 80103ba:	ee30 0b40 	vsub.f64	d0, d0, d0
 80103be:	b005      	add	sp, #20
 80103c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80103c4:	4668      	mov	r0, sp
 80103c6:	f000 fb03 	bl	80109d0 <__ieee754_rem_pio2>
 80103ca:	f000 0003 	and.w	r0, r0, #3
 80103ce:	2801      	cmp	r0, #1
 80103d0:	d00a      	beq.n	80103e8 <sin+0x58>
 80103d2:	2802      	cmp	r0, #2
 80103d4:	d00f      	beq.n	80103f6 <sin+0x66>
 80103d6:	b9c0      	cbnz	r0, 801040a <sin+0x7a>
 80103d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103dc:	ed9d 0b00 	vldr	d0, [sp]
 80103e0:	2001      	movs	r0, #1
 80103e2:	f000 ff41 	bl	8011268 <__kernel_sin>
 80103e6:	e7ea      	b.n	80103be <sin+0x2e>
 80103e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103ec:	ed9d 0b00 	vldr	d0, [sp]
 80103f0:	f000 fc36 	bl	8010c60 <__kernel_cos>
 80103f4:	e7e3      	b.n	80103be <sin+0x2e>
 80103f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103fa:	ed9d 0b00 	vldr	d0, [sp]
 80103fe:	2001      	movs	r0, #1
 8010400:	f000 ff32 	bl	8011268 <__kernel_sin>
 8010404:	eeb1 0b40 	vneg.f64	d0, d0
 8010408:	e7d9      	b.n	80103be <sin+0x2e>
 801040a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801040e:	ed9d 0b00 	vldr	d0, [sp]
 8010412:	f000 fc25 	bl	8010c60 <__kernel_cos>
 8010416:	e7f5      	b.n	8010404 <sin+0x74>
	...
 8010420:	3fe921fb 	.word	0x3fe921fb
 8010424:	7fefffff 	.word	0x7fefffff

08010428 <checkint>:
 8010428:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801042c:	2b7e      	cmp	r3, #126	; 0x7e
 801042e:	dd10      	ble.n	8010452 <checkint+0x2a>
 8010430:	2b96      	cmp	r3, #150	; 0x96
 8010432:	dc0c      	bgt.n	801044e <checkint+0x26>
 8010434:	2201      	movs	r2, #1
 8010436:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801043a:	fa02 f303 	lsl.w	r3, r2, r3
 801043e:	1e5a      	subs	r2, r3, #1
 8010440:	4202      	tst	r2, r0
 8010442:	d106      	bne.n	8010452 <checkint+0x2a>
 8010444:	4203      	tst	r3, r0
 8010446:	bf0c      	ite	eq
 8010448:	2002      	moveq	r0, #2
 801044a:	2001      	movne	r0, #1
 801044c:	4770      	bx	lr
 801044e:	2002      	movs	r0, #2
 8010450:	4770      	bx	lr
 8010452:	2000      	movs	r0, #0
 8010454:	4770      	bx	lr
	...

08010458 <powf>:
 8010458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801045a:	ee10 1a10 	vmov	r1, s0
 801045e:	ee10 4a90 	vmov	r4, s1
 8010462:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8010466:	0062      	lsls	r2, r4, #1
 8010468:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801046c:	eef0 7a40 	vmov.f32	s15, s0
 8010470:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8010474:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8010478:	d252      	bcs.n	8010520 <powf+0xc8>
 801047a:	4298      	cmp	r0, r3
 801047c:	d252      	bcs.n	8010524 <powf+0xcc>
 801047e:	2000      	movs	r0, #0
 8010480:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8010484:	4ca0      	ldr	r4, [pc, #640]	; (8010708 <powf+0x2b0>)
 8010486:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 801048a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801048e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8010492:	0dd2      	lsrs	r2, r2, #23
 8010494:	05d2      	lsls	r2, r2, #23
 8010496:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 801049a:	1a8b      	subs	r3, r1, r2
 801049c:	ed95 6b00 	vldr	d6, [r5]
 80104a0:	ee07 3a90 	vmov	s15, r3
 80104a4:	15d2      	asrs	r2, r2, #23
 80104a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80104aa:	eea6 5b07 	vfma.f64	d5, d6, d7
 80104ae:	ed95 6b02 	vldr	d6, [r5, #8]
 80104b2:	ee25 2b05 	vmul.f64	d2, d5, d5
 80104b6:	ee22 1b02 	vmul.f64	d1, d2, d2
 80104ba:	ee07 2a90 	vmov	s15, r2
 80104be:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80104c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80104c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80104ca:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80104ce:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80104d2:	eea5 3b06 	vfma.f64	d3, d5, d6
 80104d6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 80104da:	eea5 6b04 	vfma.f64	d6, d5, d4
 80104de:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 80104e2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80104e6:	eea5 7b04 	vfma.f64	d7, d5, d4
 80104ea:	eea2 7b06 	vfma.f64	d7, d2, d6
 80104ee:	eea3 7b01 	vfma.f64	d7, d3, d1
 80104f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80104f6:	ee10 3a90 	vmov	r3, s1
 80104fa:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80104fe:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8010502:	429a      	cmp	r2, r3
 8010504:	f0c0 80b1 	bcc.w	801066a <powf+0x212>
 8010508:	ed9f 7b77 	vldr	d7, [pc, #476]	; 80106e8 <powf+0x290>
 801050c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010514:	dd79      	ble.n	801060a <powf+0x1b2>
 8010516:	b003      	add	sp, #12
 8010518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801051c:	f000 bf8e 	b.w	801143c <__math_oflowf>
 8010520:	4298      	cmp	r0, r3
 8010522:	d32d      	bcc.n	8010580 <powf+0x128>
 8010524:	b952      	cbnz	r2, 801053c <powf+0xe4>
 8010526:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 801052a:	005b      	lsls	r3, r3, #1
 801052c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8010530:	f240 80c9 	bls.w	80106c6 <powf+0x26e>
 8010534:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8010538:	b003      	add	sp, #12
 801053a:	bd30      	pop	{r4, r5, pc}
 801053c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8010540:	d105      	bne.n	801054e <powf+0xf6>
 8010542:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8010546:	0064      	lsls	r4, r4, #1
 8010548:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801054c:	e7f0      	b.n	8010530 <powf+0xd8>
 801054e:	004b      	lsls	r3, r1, #1
 8010550:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8010554:	d8ee      	bhi.n	8010534 <powf+0xdc>
 8010556:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801055a:	d1eb      	bne.n	8010534 <powf+0xdc>
 801055c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8010560:	f000 80b1 	beq.w	80106c6 <powf+0x26e>
 8010564:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8010568:	ea6f 0404 	mvn.w	r4, r4
 801056c:	bf34      	ite	cc
 801056e:	2300      	movcc	r3, #0
 8010570:	2301      	movcs	r3, #1
 8010572:	0fe4      	lsrs	r4, r4, #31
 8010574:	42a3      	cmp	r3, r4
 8010576:	f040 80a9 	bne.w	80106cc <powf+0x274>
 801057a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801057e:	e7db      	b.n	8010538 <powf+0xe0>
 8010580:	004d      	lsls	r5, r1, #1
 8010582:	1e6a      	subs	r2, r5, #1
 8010584:	429a      	cmp	r2, r3
 8010586:	d31c      	bcc.n	80105c2 <powf+0x16a>
 8010588:	2900      	cmp	r1, #0
 801058a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801058e:	da0f      	bge.n	80105b0 <powf+0x158>
 8010590:	ee10 0a90 	vmov	r0, s1
 8010594:	f7ff ff48 	bl	8010428 <checkint>
 8010598:	2801      	cmp	r0, #1
 801059a:	d109      	bne.n	80105b0 <powf+0x158>
 801059c:	eeb1 0a40 	vneg.f32	s0, s0
 80105a0:	b945      	cbnz	r5, 80105b4 <powf+0x15c>
 80105a2:	2c00      	cmp	r4, #0
 80105a4:	dac8      	bge.n	8010538 <powf+0xe0>
 80105a6:	b003      	add	sp, #12
 80105a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105ac:	f000 bf4c 	b.w	8011448 <__math_divzerof>
 80105b0:	2000      	movs	r0, #0
 80105b2:	e7f5      	b.n	80105a0 <powf+0x148>
 80105b4:	2c00      	cmp	r4, #0
 80105b6:	dabf      	bge.n	8010538 <powf+0xe0>
 80105b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80105bc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80105c0:	e7ba      	b.n	8010538 <powf+0xe0>
 80105c2:	2900      	cmp	r1, #0
 80105c4:	da1f      	bge.n	8010606 <powf+0x1ae>
 80105c6:	ee10 0a90 	vmov	r0, s1
 80105ca:	f7ff ff2d 	bl	8010428 <checkint>
 80105ce:	b920      	cbnz	r0, 80105da <powf+0x182>
 80105d0:	b003      	add	sp, #12
 80105d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105d6:	f000 bf47 	b.w	8011468 <__math_invalidf>
 80105da:	2801      	cmp	r0, #1
 80105dc:	bf14      	ite	ne
 80105de:	2000      	movne	r0, #0
 80105e0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80105e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80105ec:	f4bf af48 	bcs.w	8010480 <powf+0x28>
 80105f0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 801070c <powf+0x2b4>
 80105f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80105f8:	ee10 3a10 	vmov	r3, s0
 80105fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010600:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8010604:	e73c      	b.n	8010480 <powf+0x28>
 8010606:	2000      	movs	r0, #0
 8010608:	e7ee      	b.n	80105e8 <powf+0x190>
 801060a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80106f0 <powf+0x298>
 801060e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010616:	dd10      	ble.n	801063a <powf+0x1e2>
 8010618:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801061c:	2800      	cmp	r0, #0
 801061e:	d158      	bne.n	80106d2 <powf+0x27a>
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	eddd 7a00 	vldr	s15, [sp]
 8010626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801062a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801062e:	eef4 7a47 	vcmp.f32	s15, s14
 8010632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010636:	f47f af6e 	bne.w	8010516 <powf+0xbe>
 801063a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80106f8 <powf+0x2a0>
 801063e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010646:	d804      	bhi.n	8010652 <powf+0x1fa>
 8010648:	b003      	add	sp, #12
 801064a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801064e:	f000 bee9 	b.w	8011424 <__math_uflowf>
 8010652:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8010700 <powf+0x2a8>
 8010656:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801065a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801065e:	d504      	bpl.n	801066a <powf+0x212>
 8010660:	b003      	add	sp, #12
 8010662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010666:	f000 bee3 	b.w	8011430 <__math_may_uflowf>
 801066a:	4b29      	ldr	r3, [pc, #164]	; (8010710 <powf+0x2b8>)
 801066c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8010670:	ee30 6b07 	vadd.f64	d6, d0, d7
 8010674:	ee16 2a10 	vmov	r2, s12
 8010678:	ee36 7b47 	vsub.f64	d7, d6, d7
 801067c:	f002 011f 	and.w	r1, r2, #31
 8010680:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8010684:	ee30 7b47 	vsub.f64	d7, d0, d7
 8010688:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801068c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8010690:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010694:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8010698:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801069c:	eea7 6b05 	vfma.f64	d6, d7, d5
 80106a0:	686d      	ldr	r5, [r5, #4]
 80106a2:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80106a6:	1882      	adds	r2, r0, r2
 80106a8:	2300      	movs	r3, #0
 80106aa:	1918      	adds	r0, r3, r4
 80106ac:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80106b0:	eea7 0b05 	vfma.f64	d0, d7, d5
 80106b4:	ec41 0b17 	vmov	d7, r0, r1
 80106b8:	eea6 0b04 	vfma.f64	d0, d6, d4
 80106bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80106c0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80106c4:	e738      	b.n	8010538 <powf+0xe0>
 80106c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80106ca:	e735      	b.n	8010538 <powf+0xe0>
 80106cc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8010714 <powf+0x2bc>
 80106d0:	e732      	b.n	8010538 <powf+0xe0>
 80106d2:	9301      	str	r3, [sp, #4]
 80106d4:	eddd 7a01 	vldr	s15, [sp, #4]
 80106d8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80106dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106e0:	e7a5      	b.n	801062e <powf+0x1d6>
 80106e2:	bf00      	nop
 80106e4:	f3af 8000 	nop.w
 80106e8:	ffd1d571 	.word	0xffd1d571
 80106ec:	405fffff 	.word	0x405fffff
 80106f0:	ffa3aae2 	.word	0xffa3aae2
 80106f4:	405fffff 	.word	0x405fffff
 80106f8:	00000000 	.word	0x00000000
 80106fc:	c062c000 	.word	0xc062c000
 8010700:	00000000 	.word	0x00000000
 8010704:	c062a000 	.word	0xc062a000
 8010708:	08012888 	.word	0x08012888
 801070c:	4b000000 	.word	0x4b000000
 8010710:	080133f8 	.word	0x080133f8
 8010714:	00000000 	.word	0x00000000

08010718 <asin>:
 8010718:	b508      	push	{r3, lr}
 801071a:	ed2d 8b04 	vpush	{d8-d9}
 801071e:	eeb0 8b40 	vmov.f64	d8, d0
 8010722:	f000 f845 	bl	80107b0 <__ieee754_asin>
 8010726:	eeb4 8b48 	vcmp.f64	d8, d8
 801072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801072e:	eeb0 9b40 	vmov.f64	d9, d0
 8010732:	d615      	bvs.n	8010760 <asin+0x48>
 8010734:	eeb0 0b48 	vmov.f64	d0, d8
 8010738:	f000 fea5 	bl	8011486 <fabs>
 801073c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010740:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010748:	dd0a      	ble.n	8010760 <asin+0x48>
 801074a:	f7fe fe6d 	bl	800f428 <__errno>
 801074e:	ecbd 8b04 	vpop	{d8-d9}
 8010752:	2321      	movs	r3, #33	; 0x21
 8010754:	6003      	str	r3, [r0, #0]
 8010756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801075a:	4804      	ldr	r0, [pc, #16]	; (801076c <asin+0x54>)
 801075c:	f000 bf10 	b.w	8011580 <nan>
 8010760:	eeb0 0b49 	vmov.f64	d0, d9
 8010764:	ecbd 8b04 	vpop	{d8-d9}
 8010768:	bd08      	pop	{r3, pc}
 801076a:	bf00      	nop
 801076c:	08011812 	.word	0x08011812

08010770 <sqrt>:
 8010770:	b508      	push	{r3, lr}
 8010772:	ed2d 8b04 	vpush	{d8-d9}
 8010776:	eeb0 8b40 	vmov.f64	d8, d0
 801077a:	f000 fa6d 	bl	8010c58 <__ieee754_sqrt>
 801077e:	eeb4 8b48 	vcmp.f64	d8, d8
 8010782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010786:	d60c      	bvs.n	80107a2 <sqrt+0x32>
 8010788:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80107a8 <sqrt+0x38>
 801078c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010794:	d505      	bpl.n	80107a2 <sqrt+0x32>
 8010796:	f7fe fe47 	bl	800f428 <__errno>
 801079a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801079e:	2321      	movs	r3, #33	; 0x21
 80107a0:	6003      	str	r3, [r0, #0]
 80107a2:	ecbd 8b04 	vpop	{d8-d9}
 80107a6:	bd08      	pop	{r3, pc}
	...

080107b0 <__ieee754_asin>:
 80107b0:	b538      	push	{r3, r4, r5, lr}
 80107b2:	ee10 5a90 	vmov	r5, s1
 80107b6:	4b82      	ldr	r3, [pc, #520]	; (80109c0 <__ieee754_asin+0x210>)
 80107b8:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80107bc:	429c      	cmp	r4, r3
 80107be:	ed2d 8b06 	vpush	{d8-d10}
 80107c2:	dd19      	ble.n	80107f8 <__ieee754_asin+0x48>
 80107c4:	ee10 3a10 	vmov	r3, s0
 80107c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80107cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80107d0:	4323      	orrs	r3, r4
 80107d2:	d10c      	bne.n	80107ee <__ieee754_asin+0x3e>
 80107d4:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8010948 <__ieee754_asin+0x198>
 80107d8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8010950 <__ieee754_asin+0x1a0>
 80107dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80107e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80107e4:	eeb0 0b47 	vmov.f64	d0, d7
 80107e8:	ecbd 8b06 	vpop	{d8-d10}
 80107ec:	bd38      	pop	{r3, r4, r5, pc}
 80107ee:	ee30 7b40 	vsub.f64	d7, d0, d0
 80107f2:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80107f6:	e7f7      	b.n	80107e8 <__ieee754_asin+0x38>
 80107f8:	4b72      	ldr	r3, [pc, #456]	; (80109c4 <__ieee754_asin+0x214>)
 80107fa:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80107fe:	429c      	cmp	r4, r3
 8010800:	dc0b      	bgt.n	801081a <__ieee754_asin+0x6a>
 8010802:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8010806:	da52      	bge.n	80108ae <__ieee754_asin+0xfe>
 8010808:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8010958 <__ieee754_asin+0x1a8>
 801080c:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010810:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8010814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010818:	dce6      	bgt.n	80107e8 <__ieee754_asin+0x38>
 801081a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801081e:	f000 fe32 	bl	8011486 <fabs>
 8010822:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010960 <__ieee754_asin+0x1b0>
 8010826:	ee39 0b40 	vsub.f64	d0, d9, d0
 801082a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801082e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010968 <__ieee754_asin+0x1b8>
 8010832:	eeb0 0b48 	vmov.f64	d0, d8
 8010836:	eea8 6b07 	vfma.f64	d6, d8, d7
 801083a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010970 <__ieee754_asin+0x1c0>
 801083e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010842:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8010978 <__ieee754_asin+0x1c8>
 8010846:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8010980 <__ieee754_asin+0x1d0>
 801084a:	eea7 6b08 	vfma.f64	d6, d7, d8
 801084e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8010988 <__ieee754_asin+0x1d8>
 8010852:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010856:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010990 <__ieee754_asin+0x1e0>
 801085a:	eea7 ab08 	vfma.f64	d10, d7, d8
 801085e:	ee2a ab08 	vmul.f64	d10, d10, d8
 8010862:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010998 <__ieee754_asin+0x1e8>
 8010866:	eea8 7b06 	vfma.f64	d7, d8, d6
 801086a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80109a0 <__ieee754_asin+0x1f0>
 801086e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010872:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80109a8 <__ieee754_asin+0x1f8>
 8010876:	eea6 7b08 	vfma.f64	d7, d6, d8
 801087a:	eea7 9b08 	vfma.f64	d9, d7, d8
 801087e:	f000 f9eb 	bl	8010c58 <__ieee754_sqrt>
 8010882:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8010886:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801088a:	4b4f      	ldr	r3, [pc, #316]	; (80109c8 <__ieee754_asin+0x218>)
 801088c:	429c      	cmp	r4, r3
 801088e:	dd3d      	ble.n	801090c <__ieee754_asin+0x15c>
 8010890:	eea0 0b05 	vfma.f64	d0, d0, d5
 8010894:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80109b0 <__ieee754_asin+0x200>
 8010898:	eea0 7b04 	vfma.f64	d7, d0, d4
 801089c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8010950 <__ieee754_asin+0x1a0>
 80108a0:	ee30 0b47 	vsub.f64	d0, d0, d7
 80108a4:	2d00      	cmp	r5, #0
 80108a6:	bfd8      	it	le
 80108a8:	eeb1 0b40 	vnegle.f64	d0, d0
 80108ac:	e79c      	b.n	80107e8 <__ieee754_asin+0x38>
 80108ae:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010960 <__ieee754_asin+0x1b0>
 80108b2:	ee20 7b00 	vmul.f64	d7, d0, d0
 80108b6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010968 <__ieee754_asin+0x1b8>
 80108ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80108be:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010970 <__ieee754_asin+0x1c0>
 80108c2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80108c6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010978 <__ieee754_asin+0x1c8>
 80108ca:	eea5 6b07 	vfma.f64	d6, d5, d7
 80108ce:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8010988 <__ieee754_asin+0x1d8>
 80108d2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80108d6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8010980 <__ieee754_asin+0x1d0>
 80108da:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8010990 <__ieee754_asin+0x1e0>
 80108de:	eea5 6b07 	vfma.f64	d6, d5, d7
 80108e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80108e6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010998 <__ieee754_asin+0x1e8>
 80108ea:	eea7 5b04 	vfma.f64	d5, d7, d4
 80108ee:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80109a0 <__ieee754_asin+0x1f0>
 80108f2:	eea5 4b07 	vfma.f64	d4, d5, d7
 80108f6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80109a8 <__ieee754_asin+0x1f8>
 80108fa:	eea4 5b07 	vfma.f64	d5, d4, d7
 80108fe:	eea5 9b07 	vfma.f64	d9, d5, d7
 8010902:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8010906:	eea0 0b07 	vfma.f64	d0, d0, d7
 801090a:	e76d      	b.n	80107e8 <__ieee754_asin+0x38>
 801090c:	ec53 2b10 	vmov	r2, r3, d0
 8010910:	2200      	movs	r2, #0
 8010912:	ec43 2b16 	vmov	d6, r2, r3
 8010916:	ee30 7b06 	vadd.f64	d7, d0, d6
 801091a:	eea6 8b46 	vfms.f64	d8, d6, d6
 801091e:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8010922:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8010948 <__ieee754_asin+0x198>
 8010926:	ee30 0b00 	vadd.f64	d0, d0, d0
 801092a:	eea3 7b44 	vfms.f64	d7, d3, d4
 801092e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8010932:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80109b8 <__ieee754_asin+0x208>
 8010936:	eeb0 0b45 	vmov.f64	d0, d5
 801093a:	eea6 0b44 	vfms.f64	d0, d6, d4
 801093e:	ee37 0b40 	vsub.f64	d0, d7, d0
 8010942:	ee35 0b40 	vsub.f64	d0, d5, d0
 8010946:	e7ad      	b.n	80108a4 <__ieee754_asin+0xf4>
 8010948:	33145c07 	.word	0x33145c07
 801094c:	3c91a626 	.word	0x3c91a626
 8010950:	54442d18 	.word	0x54442d18
 8010954:	3ff921fb 	.word	0x3ff921fb
 8010958:	8800759c 	.word	0x8800759c
 801095c:	7e37e43c 	.word	0x7e37e43c
 8010960:	0dfdf709 	.word	0x0dfdf709
 8010964:	3f023de1 	.word	0x3f023de1
 8010968:	7501b288 	.word	0x7501b288
 801096c:	3f49efe0 	.word	0x3f49efe0
 8010970:	b5688f3b 	.word	0xb5688f3b
 8010974:	bfa48228 	.word	0xbfa48228
 8010978:	0e884455 	.word	0x0e884455
 801097c:	3fc9c155 	.word	0x3fc9c155
 8010980:	55555555 	.word	0x55555555
 8010984:	3fc55555 	.word	0x3fc55555
 8010988:	03eb6f7d 	.word	0x03eb6f7d
 801098c:	bfd4d612 	.word	0xbfd4d612
 8010990:	b12e9282 	.word	0xb12e9282
 8010994:	3fb3b8c5 	.word	0x3fb3b8c5
 8010998:	1b8d0159 	.word	0x1b8d0159
 801099c:	bfe6066c 	.word	0xbfe6066c
 80109a0:	9c598ac8 	.word	0x9c598ac8
 80109a4:	40002ae5 	.word	0x40002ae5
 80109a8:	1c8a2d4b 	.word	0x1c8a2d4b
 80109ac:	c0033a27 	.word	0xc0033a27
 80109b0:	33145c07 	.word	0x33145c07
 80109b4:	bc91a626 	.word	0xbc91a626
 80109b8:	54442d18 	.word	0x54442d18
 80109bc:	3fe921fb 	.word	0x3fe921fb
 80109c0:	3fefffff 	.word	0x3fefffff
 80109c4:	3fdfffff 	.word	0x3fdfffff
 80109c8:	3fef3332 	.word	0x3fef3332
 80109cc:	00000000 	.word	0x00000000

080109d0 <__ieee754_rem_pio2>:
 80109d0:	b570      	push	{r4, r5, r6, lr}
 80109d2:	eeb0 7b40 	vmov.f64	d7, d0
 80109d6:	ee17 5a90 	vmov	r5, s15
 80109da:	4b99      	ldr	r3, [pc, #612]	; (8010c40 <__ieee754_rem_pio2+0x270>)
 80109dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80109e0:	429e      	cmp	r6, r3
 80109e2:	b088      	sub	sp, #32
 80109e4:	4604      	mov	r4, r0
 80109e6:	dc07      	bgt.n	80109f8 <__ieee754_rem_pio2+0x28>
 80109e8:	2200      	movs	r2, #0
 80109ea:	2300      	movs	r3, #0
 80109ec:	ed84 0b00 	vstr	d0, [r4]
 80109f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80109f4:	2000      	movs	r0, #0
 80109f6:	e01b      	b.n	8010a30 <__ieee754_rem_pio2+0x60>
 80109f8:	4b92      	ldr	r3, [pc, #584]	; (8010c44 <__ieee754_rem_pio2+0x274>)
 80109fa:	429e      	cmp	r6, r3
 80109fc:	dc3b      	bgt.n	8010a76 <__ieee754_rem_pio2+0xa6>
 80109fe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8010a02:	2d00      	cmp	r5, #0
 8010a04:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8010c00 <__ieee754_rem_pio2+0x230>
 8010a08:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010a0c:	dd19      	ble.n	8010a42 <__ieee754_rem_pio2+0x72>
 8010a0e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010a12:	429e      	cmp	r6, r3
 8010a14:	d00e      	beq.n	8010a34 <__ieee754_rem_pio2+0x64>
 8010a16:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010c08 <__ieee754_rem_pio2+0x238>
 8010a1a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010a1e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010a22:	ed84 5b00 	vstr	d5, [r4]
 8010a26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010a2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8010a2e:	2001      	movs	r0, #1
 8010a30:	b008      	add	sp, #32
 8010a32:	bd70      	pop	{r4, r5, r6, pc}
 8010a34:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010c10 <__ieee754_rem_pio2+0x240>
 8010a38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010a3c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010c18 <__ieee754_rem_pio2+0x248>
 8010a40:	e7eb      	b.n	8010a1a <__ieee754_rem_pio2+0x4a>
 8010a42:	429e      	cmp	r6, r3
 8010a44:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010a48:	d00e      	beq.n	8010a68 <__ieee754_rem_pio2+0x98>
 8010a4a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8010c08 <__ieee754_rem_pio2+0x238>
 8010a4e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010a52:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010a56:	ed84 5b00 	vstr	d5, [r4]
 8010a5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a62:	ed84 7b02 	vstr	d7, [r4, #8]
 8010a66:	e7e3      	b.n	8010a30 <__ieee754_rem_pio2+0x60>
 8010a68:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010c10 <__ieee754_rem_pio2+0x240>
 8010a6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010a70:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010c18 <__ieee754_rem_pio2+0x248>
 8010a74:	e7eb      	b.n	8010a4e <__ieee754_rem_pio2+0x7e>
 8010a76:	4b74      	ldr	r3, [pc, #464]	; (8010c48 <__ieee754_rem_pio2+0x278>)
 8010a78:	429e      	cmp	r6, r3
 8010a7a:	dc70      	bgt.n	8010b5e <__ieee754_rem_pio2+0x18e>
 8010a7c:	f000 fd03 	bl	8011486 <fabs>
 8010a80:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010a84:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010c20 <__ieee754_rem_pio2+0x250>
 8010a88:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010a8c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010a90:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010a94:	ee17 0a90 	vmov	r0, s15
 8010a98:	eeb1 4b45 	vneg.f64	d4, d5
 8010a9c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010c00 <__ieee754_rem_pio2+0x230>
 8010aa0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010aa4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010c08 <__ieee754_rem_pio2+0x238>
 8010aa8:	281f      	cmp	r0, #31
 8010aaa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010aae:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010ab2:	dc08      	bgt.n	8010ac6 <__ieee754_rem_pio2+0xf6>
 8010ab4:	4b65      	ldr	r3, [pc, #404]	; (8010c4c <__ieee754_rem_pio2+0x27c>)
 8010ab6:	1e42      	subs	r2, r0, #1
 8010ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010abc:	42b3      	cmp	r3, r6
 8010abe:	d002      	beq.n	8010ac6 <__ieee754_rem_pio2+0xf6>
 8010ac0:	ed84 6b00 	vstr	d6, [r4]
 8010ac4:	e026      	b.n	8010b14 <__ieee754_rem_pio2+0x144>
 8010ac6:	ee16 3a90 	vmov	r3, s13
 8010aca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010ace:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010ad2:	2b10      	cmp	r3, #16
 8010ad4:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010ad8:	ddf2      	ble.n	8010ac0 <__ieee754_rem_pio2+0xf0>
 8010ada:	eeb0 6b40 	vmov.f64	d6, d0
 8010ade:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010c10 <__ieee754_rem_pio2+0x240>
 8010ae2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8010c18 <__ieee754_rem_pio2+0x248>
 8010ae6:	eea4 6b07 	vfma.f64	d6, d4, d7
 8010aea:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010aee:	eea4 0b07 	vfma.f64	d0, d4, d7
 8010af2:	eeb0 7b40 	vmov.f64	d7, d0
 8010af6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010afa:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010afe:	ee13 3a90 	vmov	r3, s7
 8010b02:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	2b31      	cmp	r3, #49	; 0x31
 8010b0a:	dc17      	bgt.n	8010b3c <__ieee754_rem_pio2+0x16c>
 8010b0c:	eeb0 0b46 	vmov.f64	d0, d6
 8010b10:	ed84 3b00 	vstr	d3, [r4]
 8010b14:	ed94 6b00 	vldr	d6, [r4]
 8010b18:	2d00      	cmp	r5, #0
 8010b1a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010b1e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010b22:	ed84 0b02 	vstr	d0, [r4, #8]
 8010b26:	da83      	bge.n	8010a30 <__ieee754_rem_pio2+0x60>
 8010b28:	eeb1 6b46 	vneg.f64	d6, d6
 8010b2c:	eeb1 0b40 	vneg.f64	d0, d0
 8010b30:	ed84 6b00 	vstr	d6, [r4]
 8010b34:	ed84 0b02 	vstr	d0, [r4, #8]
 8010b38:	4240      	negs	r0, r0
 8010b3a:	e779      	b.n	8010a30 <__ieee754_rem_pio2+0x60>
 8010b3c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8010c28 <__ieee754_rem_pio2+0x258>
 8010b40:	eeb0 0b46 	vmov.f64	d0, d6
 8010b44:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010b48:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010b4c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8010c30 <__ieee754_rem_pio2+0x260>
 8010b50:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010b54:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010b58:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010b5c:	e7b0      	b.n	8010ac0 <__ieee754_rem_pio2+0xf0>
 8010b5e:	4b3c      	ldr	r3, [pc, #240]	; (8010c50 <__ieee754_rem_pio2+0x280>)
 8010b60:	429e      	cmp	r6, r3
 8010b62:	dd06      	ble.n	8010b72 <__ieee754_rem_pio2+0x1a2>
 8010b64:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010b68:	ed80 7b02 	vstr	d7, [r0, #8]
 8010b6c:	ed80 7b00 	vstr	d7, [r0]
 8010b70:	e740      	b.n	80109f4 <__ieee754_rem_pio2+0x24>
 8010b72:	1532      	asrs	r2, r6, #20
 8010b74:	ee10 0a10 	vmov	r0, s0
 8010b78:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010b7c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010b80:	ec41 0b17 	vmov	d7, r0, r1
 8010b84:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010b88:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8010c38 <__ieee754_rem_pio2+0x268>
 8010b8c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010b90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b94:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010b98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010b9c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010ba0:	a902      	add	r1, sp, #8
 8010ba2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010ba6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010baa:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010bae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010bb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010bb6:	2603      	movs	r6, #3
 8010bb8:	4608      	mov	r0, r1
 8010bba:	ed91 7b04 	vldr	d7, [r1, #16]
 8010bbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc6:	4633      	mov	r3, r6
 8010bc8:	f1a1 0108 	sub.w	r1, r1, #8
 8010bcc:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8010bd0:	d0f3      	beq.n	8010bba <__ieee754_rem_pio2+0x1ea>
 8010bd2:	4920      	ldr	r1, [pc, #128]	; (8010c54 <__ieee754_rem_pio2+0x284>)
 8010bd4:	9101      	str	r1, [sp, #4]
 8010bd6:	2102      	movs	r1, #2
 8010bd8:	9100      	str	r1, [sp, #0]
 8010bda:	4621      	mov	r1, r4
 8010bdc:	f000 f8ac 	bl	8010d38 <__kernel_rem_pio2>
 8010be0:	2d00      	cmp	r5, #0
 8010be2:	f6bf af25 	bge.w	8010a30 <__ieee754_rem_pio2+0x60>
 8010be6:	ed94 7b00 	vldr	d7, [r4]
 8010bea:	eeb1 7b47 	vneg.f64	d7, d7
 8010bee:	ed84 7b00 	vstr	d7, [r4]
 8010bf2:	ed94 7b02 	vldr	d7, [r4, #8]
 8010bf6:	eeb1 7b47 	vneg.f64	d7, d7
 8010bfa:	ed84 7b02 	vstr	d7, [r4, #8]
 8010bfe:	e79b      	b.n	8010b38 <__ieee754_rem_pio2+0x168>
 8010c00:	54400000 	.word	0x54400000
 8010c04:	3ff921fb 	.word	0x3ff921fb
 8010c08:	1a626331 	.word	0x1a626331
 8010c0c:	3dd0b461 	.word	0x3dd0b461
 8010c10:	1a600000 	.word	0x1a600000
 8010c14:	3dd0b461 	.word	0x3dd0b461
 8010c18:	2e037073 	.word	0x2e037073
 8010c1c:	3ba3198a 	.word	0x3ba3198a
 8010c20:	6dc9c883 	.word	0x6dc9c883
 8010c24:	3fe45f30 	.word	0x3fe45f30
 8010c28:	2e000000 	.word	0x2e000000
 8010c2c:	3ba3198a 	.word	0x3ba3198a
 8010c30:	252049c1 	.word	0x252049c1
 8010c34:	397b839a 	.word	0x397b839a
 8010c38:	00000000 	.word	0x00000000
 8010c3c:	41700000 	.word	0x41700000
 8010c40:	3fe921fb 	.word	0x3fe921fb
 8010c44:	4002d97b 	.word	0x4002d97b
 8010c48:	413921fb 	.word	0x413921fb
 8010c4c:	080129b0 	.word	0x080129b0
 8010c50:	7fefffff 	.word	0x7fefffff
 8010c54:	08012a30 	.word	0x08012a30

08010c58 <__ieee754_sqrt>:
 8010c58:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010c5c:	4770      	bx	lr
	...

08010c60 <__kernel_cos>:
 8010c60:	ee10 1a90 	vmov	r1, s1
 8010c64:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010c68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010c6c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010c70:	da05      	bge.n	8010c7e <__kernel_cos+0x1e>
 8010c72:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010c76:	ee17 3a90 	vmov	r3, s15
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d03d      	beq.n	8010cfa <__kernel_cos+0x9a>
 8010c7e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8010c82:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010d00 <__kernel_cos+0xa0>
 8010c86:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010d08 <__kernel_cos+0xa8>
 8010c8a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010c8e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010d10 <__kernel_cos+0xb0>
 8010c92:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010c96:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010d18 <__kernel_cos+0xb8>
 8010c9a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010c9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010d20 <__kernel_cos+0xc0>
 8010ca2:	4b23      	ldr	r3, [pc, #140]	; (8010d30 <__kernel_cos+0xd0>)
 8010ca4:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010ca8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010d28 <__kernel_cos+0xc8>
 8010cac:	4299      	cmp	r1, r3
 8010cae:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010cb2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010cb6:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010cba:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010cbe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010cc2:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010cc6:	dc04      	bgt.n	8010cd2 <__kernel_cos+0x72>
 8010cc8:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010ccc:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010cd0:	4770      	bx	lr
 8010cd2:	4b18      	ldr	r3, [pc, #96]	; (8010d34 <__kernel_cos+0xd4>)
 8010cd4:	4299      	cmp	r1, r3
 8010cd6:	dc0d      	bgt.n	8010cf4 <__kernel_cos+0x94>
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010cde:	ec43 2b15 	vmov	d5, r2, r3
 8010ce2:	ee34 0b45 	vsub.f64	d0, d4, d5
 8010ce6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010cea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010cee:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010cf2:	4770      	bx	lr
 8010cf4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010cf8:	e7f3      	b.n	8010ce2 <__kernel_cos+0x82>
 8010cfa:	eeb0 0b44 	vmov.f64	d0, d4
 8010cfe:	4770      	bx	lr
 8010d00:	be8838d4 	.word	0xbe8838d4
 8010d04:	bda8fae9 	.word	0xbda8fae9
 8010d08:	bdb4b1c4 	.word	0xbdb4b1c4
 8010d0c:	3e21ee9e 	.word	0x3e21ee9e
 8010d10:	809c52ad 	.word	0x809c52ad
 8010d14:	be927e4f 	.word	0xbe927e4f
 8010d18:	19cb1590 	.word	0x19cb1590
 8010d1c:	3efa01a0 	.word	0x3efa01a0
 8010d20:	16c15177 	.word	0x16c15177
 8010d24:	bf56c16c 	.word	0xbf56c16c
 8010d28:	5555554c 	.word	0x5555554c
 8010d2c:	3fa55555 	.word	0x3fa55555
 8010d30:	3fd33332 	.word	0x3fd33332
 8010d34:	3fe90000 	.word	0x3fe90000

08010d38 <__kernel_rem_pio2>:
 8010d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d3c:	ed2d 8b06 	vpush	{d8-d10}
 8010d40:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8010d44:	460f      	mov	r7, r1
 8010d46:	9002      	str	r0, [sp, #8]
 8010d48:	49c5      	ldr	r1, [pc, #788]	; (8011060 <__kernel_rem_pio2+0x328>)
 8010d4a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8010d4c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8010d50:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	f112 0f14 	cmn.w	r2, #20
 8010d5a:	bfa8      	it	ge
 8010d5c:	2018      	movge	r0, #24
 8010d5e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010d62:	bfb8      	it	lt
 8010d64:	2000      	movlt	r0, #0
 8010d66:	f06f 0417 	mvn.w	r4, #23
 8010d6a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8011048 <__kernel_rem_pio2+0x310>
 8010d6e:	bfa4      	itt	ge
 8010d70:	f1a2 0a03 	subge.w	sl, r2, #3
 8010d74:	fb9a f0f0 	sdivge	r0, sl, r0
 8010d78:	fb00 4404 	mla	r4, r0, r4, r4
 8010d7c:	1a46      	subs	r6, r0, r1
 8010d7e:	4414      	add	r4, r2
 8010d80:	eb09 0c01 	add.w	ip, r9, r1
 8010d84:	ad1a      	add	r5, sp, #104	; 0x68
 8010d86:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	4562      	cmp	r2, ip
 8010d8e:	dd10      	ble.n	8010db2 <__kernel_rem_pio2+0x7a>
 8010d90:	9a01      	ldr	r2, [sp, #4]
 8010d92:	ab1a      	add	r3, sp, #104	; 0x68
 8010d94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010d98:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8010d9c:	f04f 0c00 	mov.w	ip, #0
 8010da0:	45cc      	cmp	ip, r9
 8010da2:	dc26      	bgt.n	8010df2 <__kernel_rem_pio2+0xba>
 8010da4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8011048 <__kernel_rem_pio2+0x310>
 8010da8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010dac:	4616      	mov	r6, r2
 8010dae:	2500      	movs	r5, #0
 8010db0:	e015      	b.n	8010dde <__kernel_rem_pio2+0xa6>
 8010db2:	42d6      	cmn	r6, r2
 8010db4:	d409      	bmi.n	8010dca <__kernel_rem_pio2+0x92>
 8010db6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8010dba:	ee07 3a90 	vmov	s15, r3
 8010dbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010dc2:	eca5 7b02 	vstmia	r5!, {d7}
 8010dc6:	3201      	adds	r2, #1
 8010dc8:	e7e0      	b.n	8010d8c <__kernel_rem_pio2+0x54>
 8010dca:	eeb0 7b46 	vmov.f64	d7, d6
 8010dce:	e7f8      	b.n	8010dc2 <__kernel_rem_pio2+0x8a>
 8010dd0:	ecb8 5b02 	vldmia	r8!, {d5}
 8010dd4:	ed96 6b00 	vldr	d6, [r6]
 8010dd8:	3501      	adds	r5, #1
 8010dda:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010dde:	428d      	cmp	r5, r1
 8010de0:	f1a6 0608 	sub.w	r6, r6, #8
 8010de4:	ddf4      	ble.n	8010dd0 <__kernel_rem_pio2+0x98>
 8010de6:	ecaa 7b02 	vstmia	sl!, {d7}
 8010dea:	f10c 0c01 	add.w	ip, ip, #1
 8010dee:	3208      	adds	r2, #8
 8010df0:	e7d6      	b.n	8010da0 <__kernel_rem_pio2+0x68>
 8010df2:	ab06      	add	r3, sp, #24
 8010df4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011050 <__kernel_rem_pio2+0x318>
 8010df8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011058 <__kernel_rem_pio2+0x320>
 8010dfc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8010e00:	9303      	str	r3, [sp, #12]
 8010e02:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8010e06:	464d      	mov	r5, r9
 8010e08:	00eb      	lsls	r3, r5, #3
 8010e0a:	9304      	str	r3, [sp, #16]
 8010e0c:	ab92      	add	r3, sp, #584	; 0x248
 8010e0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8010e12:	f10d 0b18 	add.w	fp, sp, #24
 8010e16:	ab6a      	add	r3, sp, #424	; 0x1a8
 8010e18:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8010e1c:	465e      	mov	r6, fp
 8010e1e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8010e22:	4628      	mov	r0, r5
 8010e24:	2800      	cmp	r0, #0
 8010e26:	f1a2 0208 	sub.w	r2, r2, #8
 8010e2a:	dc4c      	bgt.n	8010ec6 <__kernel_rem_pio2+0x18e>
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	9105      	str	r1, [sp, #20]
 8010e30:	f000 fbae 	bl	8011590 <scalbn>
 8010e34:	eeb0 8b40 	vmov.f64	d8, d0
 8010e38:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010e3c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010e40:	f000 fb2a 	bl	8011498 <floor>
 8010e44:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010e48:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010e4c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010e50:	2c00      	cmp	r4, #0
 8010e52:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010e56:	ee17 8a90 	vmov	r8, s15
 8010e5a:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010e5e:	9905      	ldr	r1, [sp, #20]
 8010e60:	dd43      	ble.n	8010eea <__kernel_rem_pio2+0x1b2>
 8010e62:	1e68      	subs	r0, r5, #1
 8010e64:	ab06      	add	r3, sp, #24
 8010e66:	f1c4 0c18 	rsb	ip, r4, #24
 8010e6a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8010e6e:	fa46 f20c 	asr.w	r2, r6, ip
 8010e72:	4490      	add	r8, r2
 8010e74:	fa02 f20c 	lsl.w	r2, r2, ip
 8010e78:	1ab6      	subs	r6, r6, r2
 8010e7a:	f1c4 0217 	rsb	r2, r4, #23
 8010e7e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8010e82:	4116      	asrs	r6, r2
 8010e84:	2e00      	cmp	r6, #0
 8010e86:	dd3f      	ble.n	8010f08 <__kernel_rem_pio2+0x1d0>
 8010e88:	f04f 0c00 	mov.w	ip, #0
 8010e8c:	f108 0801 	add.w	r8, r8, #1
 8010e90:	4660      	mov	r0, ip
 8010e92:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010e96:	4565      	cmp	r5, ip
 8010e98:	dc6e      	bgt.n	8010f78 <__kernel_rem_pio2+0x240>
 8010e9a:	2c00      	cmp	r4, #0
 8010e9c:	dd04      	ble.n	8010ea8 <__kernel_rem_pio2+0x170>
 8010e9e:	2c01      	cmp	r4, #1
 8010ea0:	d07f      	beq.n	8010fa2 <__kernel_rem_pio2+0x26a>
 8010ea2:	2c02      	cmp	r4, #2
 8010ea4:	f000 8087 	beq.w	8010fb6 <__kernel_rem_pio2+0x27e>
 8010ea8:	2e02      	cmp	r6, #2
 8010eaa:	d12d      	bne.n	8010f08 <__kernel_rem_pio2+0x1d0>
 8010eac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010eb0:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010eb4:	b340      	cbz	r0, 8010f08 <__kernel_rem_pio2+0x1d0>
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	9105      	str	r1, [sp, #20]
 8010eba:	f000 fb69 	bl	8011590 <scalbn>
 8010ebe:	9905      	ldr	r1, [sp, #20]
 8010ec0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010ec4:	e020      	b.n	8010f08 <__kernel_rem_pio2+0x1d0>
 8010ec6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010eca:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010ece:	3801      	subs	r0, #1
 8010ed0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010ed4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010ed8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010edc:	eca6 0a01 	vstmia	r6!, {s0}
 8010ee0:	ed92 0b00 	vldr	d0, [r2]
 8010ee4:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010ee8:	e79c      	b.n	8010e24 <__kernel_rem_pio2+0xec>
 8010eea:	d105      	bne.n	8010ef8 <__kernel_rem_pio2+0x1c0>
 8010eec:	1e6a      	subs	r2, r5, #1
 8010eee:	ab06      	add	r3, sp, #24
 8010ef0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8010ef4:	15f6      	asrs	r6, r6, #23
 8010ef6:	e7c5      	b.n	8010e84 <__kernel_rem_pio2+0x14c>
 8010ef8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010efc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f04:	da36      	bge.n	8010f74 <__kernel_rem_pio2+0x23c>
 8010f06:	2600      	movs	r6, #0
 8010f08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f10:	f040 80aa 	bne.w	8011068 <__kernel_rem_pio2+0x330>
 8010f14:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8010f18:	4658      	mov	r0, fp
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	4548      	cmp	r0, r9
 8010f1e:	da52      	bge.n	8010fc6 <__kernel_rem_pio2+0x28e>
 8010f20:	2a00      	cmp	r2, #0
 8010f22:	f000 8081 	beq.w	8011028 <__kernel_rem_pio2+0x2f0>
 8010f26:	ab06      	add	r3, sp, #24
 8010f28:	3c18      	subs	r4, #24
 8010f2a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f000 8087 	beq.w	8011042 <__kernel_rem_pio2+0x30a>
 8010f34:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f000 fb29 	bl	8011590 <scalbn>
 8010f3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010f42:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8011050 <__kernel_rem_pio2+0x318>
 8010f46:	a96a      	add	r1, sp, #424	; 0x1a8
 8010f48:	f103 0208 	add.w	r2, r3, #8
 8010f4c:	1888      	adds	r0, r1, r2
 8010f4e:	4659      	mov	r1, fp
 8010f50:	2900      	cmp	r1, #0
 8010f52:	f280 80b7 	bge.w	80110c4 <__kernel_rem_pio2+0x38c>
 8010f56:	4659      	mov	r1, fp
 8010f58:	2900      	cmp	r1, #0
 8010f5a:	f2c0 80d5 	blt.w	8011108 <__kernel_rem_pio2+0x3d0>
 8010f5e:	a86a      	add	r0, sp, #424	; 0x1a8
 8010f60:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8010f64:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8011048 <__kernel_rem_pio2+0x310>
 8010f68:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011064 <__kernel_rem_pio2+0x32c>
 8010f6c:	2400      	movs	r4, #0
 8010f6e:	ebab 0001 	sub.w	r0, fp, r1
 8010f72:	e0be      	b.n	80110f2 <__kernel_rem_pio2+0x3ba>
 8010f74:	2602      	movs	r6, #2
 8010f76:	e787      	b.n	8010e88 <__kernel_rem_pio2+0x150>
 8010f78:	f8db 2000 	ldr.w	r2, [fp]
 8010f7c:	b958      	cbnz	r0, 8010f96 <__kernel_rem_pio2+0x25e>
 8010f7e:	b122      	cbz	r2, 8010f8a <__kernel_rem_pio2+0x252>
 8010f80:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010f84:	f8cb 2000 	str.w	r2, [fp]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	f10c 0c01 	add.w	ip, ip, #1
 8010f8e:	f10b 0b04 	add.w	fp, fp, #4
 8010f92:	4610      	mov	r0, r2
 8010f94:	e77f      	b.n	8010e96 <__kernel_rem_pio2+0x15e>
 8010f96:	ebae 0202 	sub.w	r2, lr, r2
 8010f9a:	f8cb 2000 	str.w	r2, [fp]
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	e7f3      	b.n	8010f8a <__kernel_rem_pio2+0x252>
 8010fa2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8010fa6:	ab06      	add	r3, sp, #24
 8010fa8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8010fac:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8010fb0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8010fb4:	e778      	b.n	8010ea8 <__kernel_rem_pio2+0x170>
 8010fb6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8010fba:	ab06      	add	r3, sp, #24
 8010fbc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8010fc0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8010fc4:	e7f4      	b.n	8010fb0 <__kernel_rem_pio2+0x278>
 8010fc6:	ab06      	add	r3, sp, #24
 8010fc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010fcc:	3801      	subs	r0, #1
 8010fce:	431a      	orrs	r2, r3
 8010fd0:	e7a4      	b.n	8010f1c <__kernel_rem_pio2+0x1e4>
 8010fd2:	f10c 0c01 	add.w	ip, ip, #1
 8010fd6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8010fda:	2800      	cmp	r0, #0
 8010fdc:	d0f9      	beq.n	8010fd2 <__kernel_rem_pio2+0x29a>
 8010fde:	9b04      	ldr	r3, [sp, #16]
 8010fe0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010fe4:	eb0d 0203 	add.w	r2, sp, r3
 8010fe8:	9b01      	ldr	r3, [sp, #4]
 8010fea:	18e8      	adds	r0, r5, r3
 8010fec:	ab1a      	add	r3, sp, #104	; 0x68
 8010fee:	1c6e      	adds	r6, r5, #1
 8010ff0:	3a98      	subs	r2, #152	; 0x98
 8010ff2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010ff6:	4465      	add	r5, ip
 8010ff8:	42b5      	cmp	r5, r6
 8010ffa:	f6ff af05 	blt.w	8010e08 <__kernel_rem_pio2+0xd0>
 8010ffe:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8011002:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011006:	ee07 3a90 	vmov	s15, r3
 801100a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801100e:	f04f 0c00 	mov.w	ip, #0
 8011012:	eca0 7b02 	vstmia	r0!, {d7}
 8011016:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011048 <__kernel_rem_pio2+0x310>
 801101a:	4680      	mov	r8, r0
 801101c:	458c      	cmp	ip, r1
 801101e:	dd07      	ble.n	8011030 <__kernel_rem_pio2+0x2f8>
 8011020:	eca2 7b02 	vstmia	r2!, {d7}
 8011024:	3601      	adds	r6, #1
 8011026:	e7e7      	b.n	8010ff8 <__kernel_rem_pio2+0x2c0>
 8011028:	9a03      	ldr	r2, [sp, #12]
 801102a:	f04f 0c01 	mov.w	ip, #1
 801102e:	e7d2      	b.n	8010fd6 <__kernel_rem_pio2+0x29e>
 8011030:	ecbe 5b02 	vldmia	lr!, {d5}
 8011034:	ed38 6b02 	vldmdb	r8!, {d6}
 8011038:	f10c 0c01 	add.w	ip, ip, #1
 801103c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011040:	e7ec      	b.n	801101c <__kernel_rem_pio2+0x2e4>
 8011042:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011046:	e76e      	b.n	8010f26 <__kernel_rem_pio2+0x1ee>
	...
 8011054:	3e700000 	.word	0x3e700000
 8011058:	00000000 	.word	0x00000000
 801105c:	41700000 	.word	0x41700000
 8011060:	080133e8 	.word	0x080133e8
 8011064:	080133a8 	.word	0x080133a8
 8011068:	4260      	negs	r0, r4
 801106a:	eeb0 0b48 	vmov.f64	d0, d8
 801106e:	f000 fa8f 	bl	8011590 <scalbn>
 8011072:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011250 <__kernel_rem_pio2+0x518>
 8011076:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801107e:	db18      	blt.n	80110b2 <__kernel_rem_pio2+0x37a>
 8011080:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011258 <__kernel_rem_pio2+0x520>
 8011084:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011088:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801108c:	aa06      	add	r2, sp, #24
 801108e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011092:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011096:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801109a:	f105 0b01 	add.w	fp, r5, #1
 801109e:	ee10 3a10 	vmov	r3, s0
 80110a2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80110a6:	ee17 3a10 	vmov	r3, s14
 80110aa:	3418      	adds	r4, #24
 80110ac:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80110b0:	e740      	b.n	8010f34 <__kernel_rem_pio2+0x1fc>
 80110b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80110b6:	aa06      	add	r2, sp, #24
 80110b8:	ee10 3a10 	vmov	r3, s0
 80110bc:	46ab      	mov	fp, r5
 80110be:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80110c2:	e737      	b.n	8010f34 <__kernel_rem_pio2+0x1fc>
 80110c4:	ac06      	add	r4, sp, #24
 80110c6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80110ca:	9401      	str	r4, [sp, #4]
 80110cc:	ee07 4a90 	vmov	s15, r4
 80110d0:	3901      	subs	r1, #1
 80110d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80110d6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80110da:	ee20 0b06 	vmul.f64	d0, d0, d6
 80110de:	ed20 7b02 	vstmdb	r0!, {d7}
 80110e2:	e735      	b.n	8010f50 <__kernel_rem_pio2+0x218>
 80110e4:	ecbc 5b02 	vldmia	ip!, {d5}
 80110e8:	ecb5 6b02 	vldmia	r5!, {d6}
 80110ec:	3401      	adds	r4, #1
 80110ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 80110f2:	454c      	cmp	r4, r9
 80110f4:	dc01      	bgt.n	80110fa <__kernel_rem_pio2+0x3c2>
 80110f6:	4284      	cmp	r4, r0
 80110f8:	ddf4      	ble.n	80110e4 <__kernel_rem_pio2+0x3ac>
 80110fa:	ac42      	add	r4, sp, #264	; 0x108
 80110fc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8011100:	ed80 7b00 	vstr	d7, [r0]
 8011104:	3901      	subs	r1, #1
 8011106:	e727      	b.n	8010f58 <__kernel_rem_pio2+0x220>
 8011108:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801110a:	2902      	cmp	r1, #2
 801110c:	dc0a      	bgt.n	8011124 <__kernel_rem_pio2+0x3ec>
 801110e:	2900      	cmp	r1, #0
 8011110:	dc2c      	bgt.n	801116c <__kernel_rem_pio2+0x434>
 8011112:	d045      	beq.n	80111a0 <__kernel_rem_pio2+0x468>
 8011114:	f008 0007 	and.w	r0, r8, #7
 8011118:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801111c:	ecbd 8b06 	vpop	{d8-d10}
 8011120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011124:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011126:	2a03      	cmp	r2, #3
 8011128:	d1f4      	bne.n	8011114 <__kernel_rem_pio2+0x3dc>
 801112a:	aa42      	add	r2, sp, #264	; 0x108
 801112c:	4413      	add	r3, r2
 801112e:	461a      	mov	r2, r3
 8011130:	4619      	mov	r1, r3
 8011132:	4658      	mov	r0, fp
 8011134:	2800      	cmp	r0, #0
 8011136:	f1a1 0108 	sub.w	r1, r1, #8
 801113a:	dc54      	bgt.n	80111e6 <__kernel_rem_pio2+0x4ae>
 801113c:	4659      	mov	r1, fp
 801113e:	2901      	cmp	r1, #1
 8011140:	f1a2 0208 	sub.w	r2, r2, #8
 8011144:	dc5f      	bgt.n	8011206 <__kernel_rem_pio2+0x4ce>
 8011146:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011260 <__kernel_rem_pio2+0x528>
 801114a:	3308      	adds	r3, #8
 801114c:	f1bb 0f01 	cmp.w	fp, #1
 8011150:	dc69      	bgt.n	8011226 <__kernel_rem_pio2+0x4ee>
 8011152:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011156:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801115a:	2e00      	cmp	r6, #0
 801115c:	d16a      	bne.n	8011234 <__kernel_rem_pio2+0x4fc>
 801115e:	ed87 5b00 	vstr	d5, [r7]
 8011162:	ed87 6b02 	vstr	d6, [r7, #8]
 8011166:	ed87 7b04 	vstr	d7, [r7, #16]
 801116a:	e7d3      	b.n	8011114 <__kernel_rem_pio2+0x3dc>
 801116c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011260 <__kernel_rem_pio2+0x528>
 8011170:	ab42      	add	r3, sp, #264	; 0x108
 8011172:	441a      	add	r2, r3
 8011174:	465b      	mov	r3, fp
 8011176:	2b00      	cmp	r3, #0
 8011178:	da26      	bge.n	80111c8 <__kernel_rem_pio2+0x490>
 801117a:	b35e      	cbz	r6, 80111d4 <__kernel_rem_pio2+0x49c>
 801117c:	eeb1 7b46 	vneg.f64	d7, d6
 8011180:	ed87 7b00 	vstr	d7, [r7]
 8011184:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011188:	aa44      	add	r2, sp, #272	; 0x110
 801118a:	2301      	movs	r3, #1
 801118c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011190:	459b      	cmp	fp, r3
 8011192:	da22      	bge.n	80111da <__kernel_rem_pio2+0x4a2>
 8011194:	b10e      	cbz	r6, 801119a <__kernel_rem_pio2+0x462>
 8011196:	eeb1 7b47 	vneg.f64	d7, d7
 801119a:	ed87 7b02 	vstr	d7, [r7, #8]
 801119e:	e7b9      	b.n	8011114 <__kernel_rem_pio2+0x3dc>
 80111a0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011260 <__kernel_rem_pio2+0x528>
 80111a4:	ab42      	add	r3, sp, #264	; 0x108
 80111a6:	441a      	add	r2, r3
 80111a8:	f1bb 0f00 	cmp.w	fp, #0
 80111ac:	da05      	bge.n	80111ba <__kernel_rem_pio2+0x482>
 80111ae:	b10e      	cbz	r6, 80111b4 <__kernel_rem_pio2+0x47c>
 80111b0:	eeb1 7b47 	vneg.f64	d7, d7
 80111b4:	ed87 7b00 	vstr	d7, [r7]
 80111b8:	e7ac      	b.n	8011114 <__kernel_rem_pio2+0x3dc>
 80111ba:	ed32 6b02 	vldmdb	r2!, {d6}
 80111be:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80111c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111c6:	e7ef      	b.n	80111a8 <__kernel_rem_pio2+0x470>
 80111c8:	ed32 7b02 	vldmdb	r2!, {d7}
 80111cc:	3b01      	subs	r3, #1
 80111ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80111d2:	e7d0      	b.n	8011176 <__kernel_rem_pio2+0x43e>
 80111d4:	eeb0 7b46 	vmov.f64	d7, d6
 80111d8:	e7d2      	b.n	8011180 <__kernel_rem_pio2+0x448>
 80111da:	ecb2 6b02 	vldmia	r2!, {d6}
 80111de:	3301      	adds	r3, #1
 80111e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111e4:	e7d4      	b.n	8011190 <__kernel_rem_pio2+0x458>
 80111e6:	ed91 7b00 	vldr	d7, [r1]
 80111ea:	ed91 5b02 	vldr	d5, [r1, #8]
 80111ee:	3801      	subs	r0, #1
 80111f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80111f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80111f8:	ed81 6b00 	vstr	d6, [r1]
 80111fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011200:	ed81 7b02 	vstr	d7, [r1, #8]
 8011204:	e796      	b.n	8011134 <__kernel_rem_pio2+0x3fc>
 8011206:	ed92 7b00 	vldr	d7, [r2]
 801120a:	ed92 5b02 	vldr	d5, [r2, #8]
 801120e:	3901      	subs	r1, #1
 8011210:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011214:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011218:	ed82 6b00 	vstr	d6, [r2]
 801121c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011220:	ed82 7b02 	vstr	d7, [r2, #8]
 8011224:	e78b      	b.n	801113e <__kernel_rem_pio2+0x406>
 8011226:	ed33 6b02 	vldmdb	r3!, {d6}
 801122a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801122e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011232:	e78b      	b.n	801114c <__kernel_rem_pio2+0x414>
 8011234:	eeb1 5b45 	vneg.f64	d5, d5
 8011238:	eeb1 6b46 	vneg.f64	d6, d6
 801123c:	ed87 5b00 	vstr	d5, [r7]
 8011240:	eeb1 7b47 	vneg.f64	d7, d7
 8011244:	ed87 6b02 	vstr	d6, [r7, #8]
 8011248:	e78d      	b.n	8011166 <__kernel_rem_pio2+0x42e>
 801124a:	bf00      	nop
 801124c:	f3af 8000 	nop.w
 8011250:	00000000 	.word	0x00000000
 8011254:	41700000 	.word	0x41700000
 8011258:	00000000 	.word	0x00000000
 801125c:	3e700000 	.word	0x3e700000
	...

08011268 <__kernel_sin>:
 8011268:	ee10 3a90 	vmov	r3, s1
 801126c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011270:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011274:	da04      	bge.n	8011280 <__kernel_sin+0x18>
 8011276:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801127a:	ee17 3a90 	vmov	r3, s15
 801127e:	b35b      	cbz	r3, 80112d8 <__kernel_sin+0x70>
 8011280:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011284:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011288:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80112e0 <__kernel_sin+0x78>
 801128c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80112e8 <__kernel_sin+0x80>
 8011290:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011294:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80112f0 <__kernel_sin+0x88>
 8011298:	eea4 7b06 	vfma.f64	d7, d4, d6
 801129c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80112f8 <__kernel_sin+0x90>
 80112a0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80112a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011300 <__kernel_sin+0x98>
 80112a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80112ac:	b930      	cbnz	r0, 80112bc <__kernel_sin+0x54>
 80112ae:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011308 <__kernel_sin+0xa0>
 80112b2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80112b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80112ba:	4770      	bx	lr
 80112bc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80112c0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80112c4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80112c8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80112cc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011310 <__kernel_sin+0xa8>
 80112d0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80112d4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80112d8:	4770      	bx	lr
 80112da:	bf00      	nop
 80112dc:	f3af 8000 	nop.w
 80112e0:	5acfd57c 	.word	0x5acfd57c
 80112e4:	3de5d93a 	.word	0x3de5d93a
 80112e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80112ec:	be5ae5e6 	.word	0xbe5ae5e6
 80112f0:	57b1fe7d 	.word	0x57b1fe7d
 80112f4:	3ec71de3 	.word	0x3ec71de3
 80112f8:	19c161d5 	.word	0x19c161d5
 80112fc:	bf2a01a0 	.word	0xbf2a01a0
 8011300:	1110f8a6 	.word	0x1110f8a6
 8011304:	3f811111 	.word	0x3f811111
 8011308:	55555549 	.word	0x55555549
 801130c:	bfc55555 	.word	0xbfc55555
 8011310:	55555549 	.word	0x55555549
 8011314:	3fc55555 	.word	0x3fc55555

08011318 <with_errno>:
 8011318:	b513      	push	{r0, r1, r4, lr}
 801131a:	4604      	mov	r4, r0
 801131c:	ed8d 0b00 	vstr	d0, [sp]
 8011320:	f7fe f882 	bl	800f428 <__errno>
 8011324:	ed9d 0b00 	vldr	d0, [sp]
 8011328:	6004      	str	r4, [r0, #0]
 801132a:	b002      	add	sp, #8
 801132c:	bd10      	pop	{r4, pc}

0801132e <xflow>:
 801132e:	b082      	sub	sp, #8
 8011330:	b158      	cbz	r0, 801134a <xflow+0x1c>
 8011332:	eeb1 7b40 	vneg.f64	d7, d0
 8011336:	ed8d 7b00 	vstr	d7, [sp]
 801133a:	ed9d 7b00 	vldr	d7, [sp]
 801133e:	2022      	movs	r0, #34	; 0x22
 8011340:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011344:	b002      	add	sp, #8
 8011346:	f7ff bfe7 	b.w	8011318 <with_errno>
 801134a:	eeb0 7b40 	vmov.f64	d7, d0
 801134e:	e7f2      	b.n	8011336 <xflow+0x8>

08011350 <__math_uflow>:
 8011350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011358 <__math_uflow+0x8>
 8011354:	f7ff bfeb 	b.w	801132e <xflow>
 8011358:	00000000 	.word	0x00000000
 801135c:	10000000 	.word	0x10000000

08011360 <__math_oflow>:
 8011360:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011368 <__math_oflow+0x8>
 8011364:	f7ff bfe3 	b.w	801132e <xflow>
 8011368:	00000000 	.word	0x00000000
 801136c:	70000000 	.word	0x70000000

08011370 <__math_divzero>:
 8011370:	b082      	sub	sp, #8
 8011372:	2800      	cmp	r0, #0
 8011374:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011378:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801137c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011380:	ed8d 7b00 	vstr	d7, [sp]
 8011384:	ed9d 0b00 	vldr	d0, [sp]
 8011388:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011398 <__math_divzero+0x28>
 801138c:	2022      	movs	r0, #34	; 0x22
 801138e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011392:	b002      	add	sp, #8
 8011394:	f7ff bfc0 	b.w	8011318 <with_errno>
	...

080113a0 <__math_invalid>:
 80113a0:	eeb0 7b40 	vmov.f64	d7, d0
 80113a4:	eeb4 7b47 	vcmp.f64	d7, d7
 80113a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ac:	ee30 6b40 	vsub.f64	d6, d0, d0
 80113b0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80113b4:	d602      	bvs.n	80113bc <__math_invalid+0x1c>
 80113b6:	2021      	movs	r0, #33	; 0x21
 80113b8:	f7ff bfae 	b.w	8011318 <with_errno>
 80113bc:	4770      	bx	lr

080113be <__math_check_uflow>:
 80113be:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80113c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c6:	d102      	bne.n	80113ce <__math_check_uflow+0x10>
 80113c8:	2022      	movs	r0, #34	; 0x22
 80113ca:	f7ff bfa5 	b.w	8011318 <with_errno>
 80113ce:	4770      	bx	lr

080113d0 <__math_check_oflow>:
 80113d0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80113f0 <__math_check_oflow+0x20>
 80113d4:	eeb0 7bc0 	vabs.f64	d7, d0
 80113d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80113dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e0:	dd02      	ble.n	80113e8 <__math_check_oflow+0x18>
 80113e2:	2022      	movs	r0, #34	; 0x22
 80113e4:	f7ff bf98 	b.w	8011318 <with_errno>
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	f3af 8000 	nop.w
 80113f0:	ffffffff 	.word	0xffffffff
 80113f4:	7fefffff 	.word	0x7fefffff

080113f8 <with_errnof>:
 80113f8:	b513      	push	{r0, r1, r4, lr}
 80113fa:	4604      	mov	r4, r0
 80113fc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011400:	f7fe f812 	bl	800f428 <__errno>
 8011404:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011408:	6004      	str	r4, [r0, #0]
 801140a:	b002      	add	sp, #8
 801140c:	bd10      	pop	{r4, pc}

0801140e <xflowf>:
 801140e:	b130      	cbz	r0, 801141e <xflowf+0x10>
 8011410:	eef1 7a40 	vneg.f32	s15, s0
 8011414:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011418:	2022      	movs	r0, #34	; 0x22
 801141a:	f7ff bfed 	b.w	80113f8 <with_errnof>
 801141e:	eef0 7a40 	vmov.f32	s15, s0
 8011422:	e7f7      	b.n	8011414 <xflowf+0x6>

08011424 <__math_uflowf>:
 8011424:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801142c <__math_uflowf+0x8>
 8011428:	f7ff bff1 	b.w	801140e <xflowf>
 801142c:	10000000 	.word	0x10000000

08011430 <__math_may_uflowf>:
 8011430:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011438 <__math_may_uflowf+0x8>
 8011434:	f7ff bfeb 	b.w	801140e <xflowf>
 8011438:	1a200000 	.word	0x1a200000

0801143c <__math_oflowf>:
 801143c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011444 <__math_oflowf+0x8>
 8011440:	f7ff bfe5 	b.w	801140e <xflowf>
 8011444:	70000000 	.word	0x70000000

08011448 <__math_divzerof>:
 8011448:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801144c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011450:	2800      	cmp	r0, #0
 8011452:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8011456:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011464 <__math_divzerof+0x1c>
 801145a:	2022      	movs	r0, #34	; 0x22
 801145c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011460:	f7ff bfca 	b.w	80113f8 <with_errnof>
 8011464:	00000000 	.word	0x00000000

08011468 <__math_invalidf>:
 8011468:	eef0 7a40 	vmov.f32	s15, s0
 801146c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011470:	eef4 7a67 	vcmp.f32	s15, s15
 8011474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011478:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801147c:	d602      	bvs.n	8011484 <__math_invalidf+0x1c>
 801147e:	2021      	movs	r0, #33	; 0x21
 8011480:	f7ff bfba 	b.w	80113f8 <with_errnof>
 8011484:	4770      	bx	lr

08011486 <fabs>:
 8011486:	ec51 0b10 	vmov	r0, r1, d0
 801148a:	ee10 2a10 	vmov	r2, s0
 801148e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011492:	ec43 2b10 	vmov	d0, r2, r3
 8011496:	4770      	bx	lr

08011498 <floor>:
 8011498:	ee10 1a90 	vmov	r1, s1
 801149c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80114a0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80114a4:	2b13      	cmp	r3, #19
 80114a6:	b530      	push	{r4, r5, lr}
 80114a8:	ee10 0a10 	vmov	r0, s0
 80114ac:	ee10 5a10 	vmov	r5, s0
 80114b0:	dc31      	bgt.n	8011516 <floor+0x7e>
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	da15      	bge.n	80114e2 <floor+0x4a>
 80114b6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011570 <floor+0xd8>
 80114ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 80114be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80114c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c6:	dd07      	ble.n	80114d8 <floor+0x40>
 80114c8:	2900      	cmp	r1, #0
 80114ca:	da4e      	bge.n	801156a <floor+0xd2>
 80114cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80114d0:	4318      	orrs	r0, r3
 80114d2:	d001      	beq.n	80114d8 <floor+0x40>
 80114d4:	4928      	ldr	r1, [pc, #160]	; (8011578 <floor+0xe0>)
 80114d6:	2000      	movs	r0, #0
 80114d8:	460b      	mov	r3, r1
 80114da:	4602      	mov	r2, r0
 80114dc:	ec43 2b10 	vmov	d0, r2, r3
 80114e0:	e020      	b.n	8011524 <floor+0x8c>
 80114e2:	4a26      	ldr	r2, [pc, #152]	; (801157c <floor+0xe4>)
 80114e4:	411a      	asrs	r2, r3
 80114e6:	ea01 0402 	and.w	r4, r1, r2
 80114ea:	4304      	orrs	r4, r0
 80114ec:	d01a      	beq.n	8011524 <floor+0x8c>
 80114ee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011570 <floor+0xd8>
 80114f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80114f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80114fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114fe:	ddeb      	ble.n	80114d8 <floor+0x40>
 8011500:	2900      	cmp	r1, #0
 8011502:	bfbe      	ittt	lt
 8011504:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011508:	fa40 f303 	asrlt.w	r3, r0, r3
 801150c:	18c9      	addlt	r1, r1, r3
 801150e:	ea21 0102 	bic.w	r1, r1, r2
 8011512:	2000      	movs	r0, #0
 8011514:	e7e0      	b.n	80114d8 <floor+0x40>
 8011516:	2b33      	cmp	r3, #51	; 0x33
 8011518:	dd05      	ble.n	8011526 <floor+0x8e>
 801151a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801151e:	d101      	bne.n	8011524 <floor+0x8c>
 8011520:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011524:	bd30      	pop	{r4, r5, pc}
 8011526:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801152a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801152e:	40e2      	lsrs	r2, r4
 8011530:	4202      	tst	r2, r0
 8011532:	d0f7      	beq.n	8011524 <floor+0x8c>
 8011534:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011570 <floor+0xd8>
 8011538:	ee30 0b07 	vadd.f64	d0, d0, d7
 801153c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011544:	ddc8      	ble.n	80114d8 <floor+0x40>
 8011546:	2900      	cmp	r1, #0
 8011548:	da02      	bge.n	8011550 <floor+0xb8>
 801154a:	2b14      	cmp	r3, #20
 801154c:	d103      	bne.n	8011556 <floor+0xbe>
 801154e:	3101      	adds	r1, #1
 8011550:	ea20 0002 	bic.w	r0, r0, r2
 8011554:	e7c0      	b.n	80114d8 <floor+0x40>
 8011556:	2401      	movs	r4, #1
 8011558:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801155c:	fa04 f303 	lsl.w	r3, r4, r3
 8011560:	4418      	add	r0, r3
 8011562:	42a8      	cmp	r0, r5
 8011564:	bf38      	it	cc
 8011566:	1909      	addcc	r1, r1, r4
 8011568:	e7f2      	b.n	8011550 <floor+0xb8>
 801156a:	2000      	movs	r0, #0
 801156c:	4601      	mov	r1, r0
 801156e:	e7b3      	b.n	80114d8 <floor+0x40>
 8011570:	8800759c 	.word	0x8800759c
 8011574:	7e37e43c 	.word	0x7e37e43c
 8011578:	bff00000 	.word	0xbff00000
 801157c:	000fffff 	.word	0x000fffff

08011580 <nan>:
 8011580:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011588 <nan+0x8>
 8011584:	4770      	bx	lr
 8011586:	bf00      	nop
 8011588:	00000000 	.word	0x00000000
 801158c:	7ff80000 	.word	0x7ff80000

08011590 <scalbn>:
 8011590:	ee10 1a90 	vmov	r1, s1
 8011594:	b510      	push	{r4, lr}
 8011596:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801159a:	b98c      	cbnz	r4, 80115c0 <scalbn+0x30>
 801159c:	ee10 3a10 	vmov	r3, s0
 80115a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80115a4:	430b      	orrs	r3, r1
 80115a6:	d011      	beq.n	80115cc <scalbn+0x3c>
 80115a8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8011670 <scalbn+0xe0>
 80115ac:	4b3c      	ldr	r3, [pc, #240]	; (80116a0 <scalbn+0x110>)
 80115ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 80115b2:	4298      	cmp	r0, r3
 80115b4:	da0b      	bge.n	80115ce <scalbn+0x3e>
 80115b6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011678 <scalbn+0xe8>
 80115ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 80115be:	e005      	b.n	80115cc <scalbn+0x3c>
 80115c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80115c4:	429c      	cmp	r4, r3
 80115c6:	d107      	bne.n	80115d8 <scalbn+0x48>
 80115c8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80115cc:	bd10      	pop	{r4, pc}
 80115ce:	ee10 1a90 	vmov	r1, s1
 80115d2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80115d6:	3c36      	subs	r4, #54	; 0x36
 80115d8:	4404      	add	r4, r0
 80115da:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80115de:	429c      	cmp	r4, r3
 80115e0:	dd0d      	ble.n	80115fe <scalbn+0x6e>
 80115e2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011680 <scalbn+0xf0>
 80115e6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011688 <scalbn+0xf8>
 80115ea:	eeb0 6b47 	vmov.f64	d6, d7
 80115ee:	ee10 3a90 	vmov	r3, s1
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	fe27 7b05 	vselge.f64	d7, d7, d5
 80115f8:	ee27 0b06 	vmul.f64	d0, d7, d6
 80115fc:	e7e6      	b.n	80115cc <scalbn+0x3c>
 80115fe:	2c00      	cmp	r4, #0
 8011600:	dd0a      	ble.n	8011618 <scalbn+0x88>
 8011602:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011606:	ec53 2b10 	vmov	r2, r3, d0
 801160a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801160e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011612:	ec43 2b10 	vmov	d0, r2, r3
 8011616:	e7d9      	b.n	80115cc <scalbn+0x3c>
 8011618:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801161c:	da19      	bge.n	8011652 <scalbn+0xc2>
 801161e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011622:	4298      	cmp	r0, r3
 8011624:	ee10 3a90 	vmov	r3, s1
 8011628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801162c:	dd09      	ble.n	8011642 <scalbn+0xb2>
 801162e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8011680 <scalbn+0xf0>
 8011632:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011688 <scalbn+0xf8>
 8011636:	eeb0 7b40 	vmov.f64	d7, d0
 801163a:	2b00      	cmp	r3, #0
 801163c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8011640:	e7bb      	b.n	80115ba <scalbn+0x2a>
 8011642:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8011678 <scalbn+0xe8>
 8011646:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8011690 <scalbn+0x100>
 801164a:	eeb0 7b40 	vmov.f64	d7, d0
 801164e:	2b00      	cmp	r3, #0
 8011650:	e7f4      	b.n	801163c <scalbn+0xac>
 8011652:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011656:	ec53 2b10 	vmov	r2, r3, d0
 801165a:	3436      	adds	r4, #54	; 0x36
 801165c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011660:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011664:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011698 <scalbn+0x108>
 8011668:	ec43 2b10 	vmov	d0, r2, r3
 801166c:	e7a5      	b.n	80115ba <scalbn+0x2a>
 801166e:	bf00      	nop
 8011670:	00000000 	.word	0x00000000
 8011674:	43500000 	.word	0x43500000
 8011678:	c2f8f359 	.word	0xc2f8f359
 801167c:	01a56e1f 	.word	0x01a56e1f
 8011680:	8800759c 	.word	0x8800759c
 8011684:	7e37e43c 	.word	0x7e37e43c
 8011688:	8800759c 	.word	0x8800759c
 801168c:	fe37e43c 	.word	0xfe37e43c
 8011690:	c2f8f359 	.word	0xc2f8f359
 8011694:	81a56e1f 	.word	0x81a56e1f
 8011698:	00000000 	.word	0x00000000
 801169c:	3c900000 	.word	0x3c900000
 80116a0:	ffff3cb0 	.word	0xffff3cb0

080116a4 <_init>:
 80116a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a6:	bf00      	nop
 80116a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116aa:	bc08      	pop	{r3}
 80116ac:	469e      	mov	lr, r3
 80116ae:	4770      	bx	lr

080116b0 <_fini>:
 80116b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116b2:	bf00      	nop
 80116b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116b6:	bc08      	pop	{r3}
 80116b8:	469e      	mov	lr, r3
 80116ba:	4770      	bx	lr
