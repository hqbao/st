
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c988  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800cc28  0800cc28  0001cc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cdac  0800cdac  0001cdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cdb4  0800cdb4  0001cdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800cdbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000013ec  24000084  0800ce40  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001470  0800ce40  00021470  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bd54  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c71  00000000  00000000  0003be06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001460  00000000  00000000  0003ea78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001388  00000000  00000000  0003fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038279  00000000  00000000  00041260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c218  00000000  00000000  000794d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166fd3  00000000  00000000  000956f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fc6c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b80  00000000  00000000  001fc714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cc10 	.word	0x0800cc10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	0800cc10 	.word	0x0800cc10

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <average_filter_init>:
  filter->_last_estimate=filter->_current_estimate;

  return filter->_current_estimate;
}

void average_filter_init(average_filter_t* filter, int width) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  filter->width = width;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f04f 0200 	mov.w	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f103 0008 	add.w	r0, r3, #8
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	461a      	mov	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f00b fdb0 	bl	800c228 <memset>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80006e2:	3301      	adds	r3, #1
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80006ec:	fb01 f202 	mul.w	r2, r1, r2
 80006f0:	1a9a      	subs	r2, r3, r2
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	3302      	adds	r3, #2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000720:	edd7 7a00 	vldr	s15, [r7]
 8000724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	3302      	adds	r3, #2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	ed93 7a01 	vldr	s14, [r3, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	ee07 3a90 	vmov	s15, r3
 800074e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000752:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000756:	eef0 7a66 	vmov.f32	s15, s13
}
 800075a:	eeb0 0a67 	vmov.f32	s0, s15
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void flash(uint8_t count) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e010      	b.n	800079a <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000778:	2102      	movs	r1, #2
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <flash+0x48>)
 800077c:	f005 f8cb 	bl	8005916 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000780:	2032      	movs	r0, #50	; 0x32
 8000782:	f001 ff6b 	bl	800265c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000786:	2102      	movs	r1, #2
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <flash+0x48>)
 800078a:	f005 f8c4 	bl	8005916 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800078e:	2032      	movs	r0, #50	; 0x32
 8000790:	f001 ff64 	bl	800265c <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	429a      	cmp	r2, r3
 80007a0:	dbea      	blt.n	8000778 <flash+0x10>
  }

  HAL_Delay(100);
 80007a2:	2064      	movs	r0, #100	; 0x64
 80007a4:	f001 ff5a 	bl	800265c <HAL_Delay>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58020000 	.word	0x58020000

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f001 febe 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f886 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 fd02 	bl	80011c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c4:	f000 f900 	bl	80009c8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007c8:	f000 fc7a 	bl	80010c0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80007cc:	f000 fada 	bl	8000d84 <MX_TIM6_Init>
  MX_TIM2_Init();
 80007d0:	f000 f93a 	bl	8000a48 <MX_TIM2_Init>
  MX_TIM4_Init();
 80007d4:	f000 f9d0 	bl	8000b78 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007d8:	f000 fa62 	bl	8000ca0 <MX_TIM5_Init>
  MX_TIM7_Init();
 80007dc:	f000 fb08 	bl	8000df0 <MX_TIM7_Init>
  MX_DMA_Init();
 80007e0:	f000 fcba 	bl	8001158 <MX_DMA_Init>
  MX_UART4_Init();
 80007e4:	f000 fb3c 	bl	8000e60 <MX_UART4_Init>
  MX_UART5_Init();
 80007e8:	f000 fb86 	bl	8000ef8 <MX_UART5_Init>
  MX_UART7_Init();
 80007ec:	f000 fbd0 	bl	8000f90 <MX_UART7_Init>
  MX_UART8_Init();
 80007f0:	f000 fc1a 	bl	8001028 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2102      	movs	r1, #2
 80007f8:	4826      	ldr	r0, [pc, #152]	; (8000894 <main+0xe0>)
 80007fa:	f005 f873 	bl	80058e4 <HAL_GPIO_WritePin>

  flash(5);
 80007fe:	2005      	movs	r0, #5
 8000800:	f7ff ffb2 	bl	8000768 <flash>

  // Initialise filters for remote control
  init_filters();
 8000804:	f001 fd8a 	bl	800231c <init_filters>

  // Init sensors
//  init_sensors();

  flash(5);
 8000808:	2005      	movs	r0, #5
 800080a:	f7ff ffad 	bl	8000768 <flash>

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800080e:	2100      	movs	r1, #0
 8000810:	4821      	ldr	r0, [pc, #132]	; (8000898 <main+0xe4>)
 8000812:	f007 ffc1 	bl	8008798 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000816:	2104      	movs	r1, #4
 8000818:	481f      	ldr	r0, [pc, #124]	; (8000898 <main+0xe4>)
 800081a:	f007 ffbd 	bl	8008798 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 800081e:	2108      	movs	r1, #8
 8000820:	481d      	ldr	r0, [pc, #116]	; (8000898 <main+0xe4>)
 8000822:	f007 ffb9 	bl	8008798 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000826:	210c      	movs	r1, #12
 8000828:	481b      	ldr	r0, [pc, #108]	; (8000898 <main+0xe4>)
 800082a:	f007 ffb5 	bl	8008798 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800082e:	2100      	movs	r1, #0
 8000830:	481a      	ldr	r0, [pc, #104]	; (800089c <main+0xe8>)
 8000832:	f007 ffb1 	bl	8008798 <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000836:	2100      	movs	r1, #0
 8000838:	4819      	ldr	r0, [pc, #100]	; (80008a0 <main+0xec>)
 800083a:	f007 fe3d 	bl	80084b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800083e:	2104      	movs	r1, #4
 8000840:	4817      	ldr	r0, [pc, #92]	; (80008a0 <main+0xec>)
 8000842:	f007 fe39 	bl	80084b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000846:	2108      	movs	r1, #8
 8000848:	4815      	ldr	r0, [pc, #84]	; (80008a0 <main+0xec>)
 800084a:	f007 fe35 	bl	80084b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800084e:	210c      	movs	r1, #12
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <main+0xec>)
 8000852:	f007 fe31 	bl	80084b8 <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim6);
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <main+0xf0>)
 8000858:	f007 fd54 	bl	8008304 <HAL_TIM_Base_Start_IT>

  // Monitor timer
  HAL_TIM_Base_Start_IT(&htim7);
 800085c:	4812      	ldr	r0, [pc, #72]	; (80008a8 <main+0xf4>)
 800085e:	f007 fd51 	bl	8008304 <HAL_TIM_Base_Start_IT>

  // Call receive in circlar mode, don't have to repeat the call to activate callback
  HAL_UART_Receive_DMA(&huart4, g_uart_rx_buffer1, UART_BUF_SIZE);
 8000862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000866:	4911      	ldr	r1, [pc, #68]	; (80008ac <main+0xf8>)
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <main+0xfc>)
 800086a:	f009 fc23 	bl	800a0b4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, g_uart_rx_buffer2, UART_BUF_SIZE);
 800086e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000872:	4910      	ldr	r1, [pc, #64]	; (80008b4 <main+0x100>)
 8000874:	4810      	ldr	r0, [pc, #64]	; (80008b8 <main+0x104>)
 8000876:	f009 fc1d 	bl	800a0b4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart7, g_uart_rx_buffer3, UART_BUF_SIZE);
 800087a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087e:	490f      	ldr	r1, [pc, #60]	; (80008bc <main+0x108>)
 8000880:	480f      	ldr	r0, [pc, #60]	; (80008c0 <main+0x10c>)
 8000882:	f009 fc17 	bl	800a0b4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart8, g_uart_rx_buffer4, UART_BUF_SIZE);
 8000886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088a:	490e      	ldr	r1, [pc, #56]	; (80008c4 <main+0x110>)
 800088c:	480e      	ldr	r0, [pc, #56]	; (80008c8 <main+0x114>)
 800088e:	f009 fc11 	bl	800a0b4 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000892:	e7fe      	b.n	8000892 <main+0xde>
 8000894:	58020000 	.word	0x58020000
 8000898:	24000138 	.word	0x24000138
 800089c:	24000184 	.word	0x24000184
 80008a0:	240000ec 	.word	0x240000ec
 80008a4:	240001d0 	.word	0x240001d0
 80008a8:	2400021c 	.word	0x2400021c
 80008ac:	24001048 	.word	0x24001048
 80008b0:	24000268 	.word	0x24000268
 80008b4:	24001148 	.word	0x24001148
 80008b8:	240002f8 	.word	0x240002f8
 80008bc:	24001248 	.word	0x24001248
 80008c0:	24000388 	.word	0x24000388
 80008c4:	24001348 	.word	0x24001348
 80008c8:	24000418 	.word	0x24000418

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b09c      	sub	sp, #112	; 0x70
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	224c      	movs	r2, #76	; 0x4c
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f00b fca4 	bl	800c228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2220      	movs	r2, #32
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00b fc9e 	bl	800c228 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008ec:	2002      	movs	r0, #2
 80008ee:	f005 f955 	bl	8005b9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b32      	ldr	r3, [pc, #200]	; (80009c0 <SystemClock_Config+0xf4>)
 80008f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fa:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <SystemClock_Config+0xf4>)
 80008fc:	f023 0301 	bic.w	r3, r3, #1
 8000900:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <SystemClock_Config+0xf4>)
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <SystemClock_Config+0xf8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a2c      	ldr	r2, [pc, #176]	; (80009c4 <SystemClock_Config+0xf8>)
 8000912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <SystemClock_Config+0xf8>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000924:	bf00      	nop
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <SystemClock_Config+0xf8>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800092e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000932:	d1f8      	bne.n	8000926 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000934:	2303      	movs	r3, #3
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800093e:	2301      	movs	r3, #1
 8000940:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	2302      	movs	r3, #2
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 800094e:	230a      	movs	r3, #10
 8000950:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000952:	2364      	movs	r3, #100	; 0x64
 8000954:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000956:	2304      	movs	r3, #4
 8000958:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000962:	2308      	movs	r3, #8
 8000964:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000966:	2302      	movs	r3, #2
 8000968:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4618      	mov	r0, r3
 8000974:	f005 f94c 	bl	8005c10 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800097e:	f000 fc95 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	233f      	movs	r3, #63	; 0x3f
 8000984:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2303      	movs	r3, #3
 8000988:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 fd60 	bl	800646c <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009b2:	f000 fc7b 	bl	80012ac <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3770      	adds	r7, #112	; 0x70
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	58000400 	.word	0x58000400
 80009c4:	58024800 	.word	0x58024800

080009c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009ce:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <MX_I2C1_Init+0x78>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <MX_I2C1_Init+0x7c>)
 80009d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <MX_I2C1_Init+0x74>)
 8000a04:	f004 ffa2 	bl	800594c <HAL_I2C_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a0e:	f000 fc4d 	bl	80012ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <MX_I2C1_Init+0x74>)
 8000a16:	f005 f829 	bl	8005a6c <HAL_I2CEx_ConfigAnalogFilter>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a20:	f000 fc44 	bl	80012ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_I2C1_Init+0x74>)
 8000a28:	f005 f86b 	bl	8005b02 <HAL_I2CEx_ConfigDigitalFilter>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f000 fc3b 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	240000a0 	.word	0x240000a0
 8000a40:	40005400 	.word	0x40005400
 8000a44:	10c0ecff 	.word	0x10c0ecff

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	; 0x38
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7a:	4b3e      	ldr	r3, [pc, #248]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000a7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 250;
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000a84:	22fa      	movs	r2, #250	; 0xfa
 8000a86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa2:	4834      	ldr	r0, [pc, #208]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000aa4:	f007 fbd6 	bl	8008254 <HAL_TIM_Base_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f000 fbfd 	bl	80012ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abc:	4619      	mov	r1, r3
 8000abe:	482d      	ldr	r0, [pc, #180]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000ac0:	f008 fa8a 	bl	8008fd8 <HAL_TIM_ConfigClockSource>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000aca:	f000 fbef 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ace:	4829      	ldr	r0, [pc, #164]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000ad0:	f007 fc90 	bl	80083f4 <HAL_TIM_PWM_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ada:	f000 fbe7 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4821      	ldr	r0, [pc, #132]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000aee:	f009 f935 	bl	8009d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000af8:	f000 fbd8 	bl	80012ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afc:	2360      	movs	r3, #96	; 0x60
 8000afe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000b14:	f008 f94c 	bl	8008db0 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b1e:	f000 fbc5 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	2204      	movs	r2, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000b2a:	f008 f941 	bl	8008db0 <HAL_TIM_PWM_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b34:	f000 fbba 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000b40:	f008 f936 	bl	8008db0 <HAL_TIM_PWM_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b4a:	f000 fbaf 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	220c      	movs	r2, #12
 8000b52:	4619      	mov	r1, r3
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000b56:	f008 f92b 	bl	8008db0 <HAL_TIM_PWM_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000b60:	f000 fba4 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <MX_TIM2_Init+0x12c>)
 8000b66:	f000 fd0b 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8000b6a:	bf00      	nop
 8000b6c:	3738      	adds	r7, #56	; 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	240000ec 	.word	0x240000ec

08000b78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ba4:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000ba6:	4a3d      	ldr	r2, [pc, #244]	; (8000c9c <MX_TIM4_Init+0x124>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 8000baa:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000bb8:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000bba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bcc:	4832      	ldr	r0, [pc, #200]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000bce:	f007 fb41 	bl	8008254 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000bd8:	f000 fb68 	bl	80012ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	4619      	mov	r1, r3
 8000be8:	482b      	ldr	r0, [pc, #172]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000bea:	f008 f9f5 	bl	8008fd8 <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000bf4:	f000 fb5a 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000bf8:	4827      	ldr	r0, [pc, #156]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000bfa:	f007 fd6b 	bl	80086d4 <HAL_TIM_IC_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000c04:	f000 fb52 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4820      	ldr	r0, [pc, #128]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000c18:	f009 f8a0 	bl	8009d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000c22:	f000 fb43 	bl	80012ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4816      	ldr	r0, [pc, #88]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000c3e:	f008 f81a 	bl	8008c76 <HAL_TIM_IC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000c48:	f000 fb30 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4811      	ldr	r0, [pc, #68]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000c54:	f008 f80f 	bl	8008c76 <HAL_TIM_IC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000c5e:	f000 fb25 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2208      	movs	r2, #8
 8000c66:	4619      	mov	r1, r3
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000c6a:	f008 f804 	bl	8008c76 <HAL_TIM_IC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000c74:	f000 fb1a 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <MX_TIM4_Init+0x120>)
 8000c80:	f007 fff9 	bl	8008c76 <HAL_TIM_IC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8000c8a:	f000 fb0f 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	; 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	24000138 	.word	0x24000138
 8000c9c:	40000800 	.word	0x40000800

08000ca0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	; 0x30
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000cce:	4a2c      	ldr	r2, [pc, #176]	; (8000d80 <MX_TIM5_Init+0xe0>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000;
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000ce2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ce6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cf4:	4821      	ldr	r0, [pc, #132]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000cf6:	f007 faad 	bl	8008254 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000d00:	f000 fad4 	bl	80012ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	4619      	mov	r1, r3
 8000d10:	481a      	ldr	r0, [pc, #104]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000d12:	f008 f961 	bl	8008fd8 <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000d1c:	f000 fac6 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000d22:	f007 fcd7 	bl	80086d4 <HAL_TIM_IC_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000d2c:	f000 fabe 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480f      	ldr	r0, [pc, #60]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000d40:	f009 f80c 	bl	8009d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000d4a:	f000 faaf 	bl	80012ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d52:	2301      	movs	r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_TIM5_Init+0xdc>)
 8000d66:	f007 ff86 	bl	8008c76 <HAL_TIM_IC_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000d70:	f000 fa9c 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	24000184 	.word	0x24000184
 8000d80:	40000c00 	.word	0x40000c00

08000d84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_TIM6_Init+0x64>)
 8000d96:	4a15      	ldr	r2, [pc, #84]	; (8000dec <MX_TIM6_Init+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 250;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_TIM6_Init+0x64>)
 8000d9c:	22fa      	movs	r2, #250	; 0xfa
 8000d9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_TIM6_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_TIM6_Init+0x64>)
 8000da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_TIM6_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MX_TIM6_Init+0x64>)
 8000db6:	f007 fa4d 	bl	8008254 <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000dc0:	f000 fa74 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_TIM6_Init+0x64>)
 8000dd2:	f008 ffc3 	bl	8009d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ddc:	f000 fa66 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	240001d0 	.word	0x240001d0
 8000dec:	40001000 	.word	0x40001000

08000df0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_TIM7_Init+0x68>)
 8000e02:	4a16      	ldr	r2, [pc, #88]	; (8000e5c <MX_TIM7_Init+0x6c>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_TIM7_Init+0x68>)
 8000e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_TIM7_Init+0x68>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <MX_TIM7_Init+0x68>)
 8000e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_TIM7_Init+0x68>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_TIM7_Init+0x68>)
 8000e24:	f007 fa16 	bl	8008254 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000e2e:	f000 fa3d 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_TIM7_Init+0x68>)
 8000e40:	f008 ff8c 	bl	8009d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000e4a:	f000 fa2f 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2400021c 	.word	0x2400021c
 8000e5c:	40001400 	.word	0x40001400

08000e60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <MX_UART4_Init+0x94>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000eaa:	f009 f803 	bl	8009eb4 <HAL_HalfDuplex_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000eb4:	f000 f9fa 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000ebc:	f00b f8ad 	bl	800c01a <HAL_UARTEx_SetTxFifoThreshold>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ec6:	f000 f9f1 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000ece:	f00b f8e2 	bl	800c096 <HAL_UARTEx_SetRxFifoThreshold>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ed8:	f000 f9e8 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_UART4_Init+0x90>)
 8000ede:	f00b f863 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f000 f9e0 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24000268 	.word	0x24000268
 8000ef4:	40004c00 	.word	0x40004c00

08000ef8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_UART5_Init+0x90>)
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <MX_UART5_Init+0x94>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f08:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f42:	f008 ffb7 	bl	8009eb4 <HAL_HalfDuplex_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000f4c:	f000 f9ae 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f50:	2100      	movs	r1, #0
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f54:	f00b f861 	bl	800c01a <HAL_UARTEx_SetTxFifoThreshold>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000f5e:	f000 f9a5 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f66:	f00b f896 	bl	800c096 <HAL_UARTEx_SetRxFifoThreshold>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000f70:	f000 f99c 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_UART5_Init+0x90>)
 8000f76:	f00b f817 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000f80:	f000 f994 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	240002f8 	.word	0x240002f8
 8000f8c:	40005000 	.word	0x40005000

08000f90 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <MX_UART7_Init+0x90>)
 8000f96:	4a23      	ldr	r2, [pc, #140]	; (8001024 <MX_UART7_Init+0x94>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_UART7_Init+0x90>)
 8000f9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fa0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_UART7_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_UART7_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <MX_UART7_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_RX;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_UART7_Init+0x90>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_UART7_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_UART7_Init+0x90>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_UART7_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_UART7_Init+0x90>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_UART7_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 8000fd8:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_UART7_Init+0x90>)
 8000fda:	f008 ff6b 	bl	8009eb4 <HAL_HalfDuplex_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000fe4:	f000 f962 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_UART7_Init+0x90>)
 8000fec:	f00b f815 	bl	800c01a <HAL_UARTEx_SetTxFifoThreshold>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000ff6:	f000 f959 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4808      	ldr	r0, [pc, #32]	; (8001020 <MX_UART7_Init+0x90>)
 8000ffe:	f00b f84a 	bl	800c096 <HAL_UARTEx_SetRxFifoThreshold>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001008:	f000 f950 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_UART7_Init+0x90>)
 800100e:	f00a ffcb 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001018:	f000 f948 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	24000388 	.word	0x24000388
 8001024:	40007800 	.word	0x40007800

08001028 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <MX_UART8_Init+0x90>)
 800102e:	4a23      	ldr	r2, [pc, #140]	; (80010bc <MX_UART8_Init+0x94>)
 8001030:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_UART8_Init+0x90>)
 8001034:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001038:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_UART8_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_UART8_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_UART8_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_RX;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_UART8_Init+0x90>)
 800104e:	2204      	movs	r2, #4
 8001050:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_UART8_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_UART8_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_UART8_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_UART8_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_UART8_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <MX_UART8_Init+0x90>)
 8001072:	f008 ff1f 	bl	8009eb4 <HAL_HalfDuplex_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800107c:	f000 f916 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_UART8_Init+0x90>)
 8001084:	f00a ffc9 	bl	800c01a <HAL_UARTEx_SetTxFifoThreshold>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800108e:	f000 f90d 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001092:	2100      	movs	r1, #0
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <MX_UART8_Init+0x90>)
 8001096:	f00a fffe 	bl	800c096 <HAL_UARTEx_SetRxFifoThreshold>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80010a0:	f000 f904 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_UART8_Init+0x90>)
 80010a6:	f00a ff7f 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80010b0:	f000 f8fc 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	24000418 	.word	0x24000418
 80010bc:	40007c00 	.word	0x40007c00

080010c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <MX_USART1_UART_Init+0x94>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010e6:	2208      	movs	r2, #8
 80010e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_USART1_UART_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_USART1_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_USART1_UART_Init+0x90>)
 800110a:	f008 fed3 	bl	8009eb4 <HAL_HalfDuplex_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001114:	f000 f8ca 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_USART1_UART_Init+0x90>)
 800111c:	f00a ff7d 	bl	800c01a <HAL_UARTEx_SetTxFifoThreshold>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001126:	f000 f8c1 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <MX_USART1_UART_Init+0x90>)
 800112e:	f00a ffb2 	bl	800c096 <HAL_UARTEx_SetRxFifoThreshold>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001138:	f000 f8b8 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_USART1_UART_Init+0x90>)
 800113e:	f00a ff33 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001148:	f000 f8b0 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	240004a8 	.word	0x240004a8
 8001154:	40011000 	.word	0x40011000

08001158 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_DMA_Init+0x6c>)
 8001160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001164:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <MX_DMA_Init+0x6c>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_DMA_Init+0x6c>)
 8001170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	200b      	movs	r0, #11
 8001182:	f001 fb76 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001186:	200b      	movs	r0, #11
 8001188:	f001 fb8d 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	200c      	movs	r0, #12
 8001192:	f001 fb6e 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001196:	200c      	movs	r0, #12
 8001198:	f001 fb85 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	200d      	movs	r0, #13
 80011a2:	f001 fb66 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011a6:	200d      	movs	r0, #13
 80011a8:	f001 fb7d 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	200e      	movs	r0, #14
 80011b2:	f001 fb5e 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011b6:	200e      	movs	r0, #14
 80011b8:	f001 fb75 	bl	80028a6 <HAL_NVIC_EnableIRQ>

}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	58024400 	.word	0x58024400

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <MX_GPIO_Init+0xdc>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <MX_GPIO_Init+0xdc>)
 80011e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <MX_GPIO_Init+0xdc>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <MX_GPIO_Init+0xdc>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <MX_GPIO_Init+0xdc>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <MX_GPIO_Init+0xdc>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_GPIO_Init+0xdc>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <MX_GPIO_Init+0xdc>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_GPIO_Init+0xdc>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_GPIO_Init+0xdc>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <MX_GPIO_Init+0xdc>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_GPIO_Init+0xdc>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_GPIO_Init+0xdc>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <MX_GPIO_Init+0xdc>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_GPIO_Init+0xdc>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2102      	movs	r1, #2
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <MX_GPIO_Init+0xe0>)
 800127a:	f004 fb33 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800127e:	2302      	movs	r3, #2
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_GPIO_Init+0xe0>)
 8001296:	f004 f95d 	bl	8005554 <HAL_GPIO_Init>

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020000 	.word	0x58020000

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_MspInit+0x30>)
 80012c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c4:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x30>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x30>)
 80012d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	58024400 	.word	0x58024400

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0b8      	sub	sp, #224	; 0xe0
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	22bc      	movs	r2, #188	; 0xbc
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f00a ff8b 	bl	800c228 <memset>
  if(hi2c->Instance==I2C1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <HAL_I2C_MspInit+0xbc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d141      	bne.n	80013a0 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800131c:	2308      	movs	r3, #8
 800131e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4618      	mov	r0, r3
 800132c:	f005 fc2a 	bl	8006b84 <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001336:	f7ff ffb9 	bl	80012ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_I2C_MspInit+0xc0>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_I2C_MspInit+0xc0>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_I2C_MspInit+0xc0>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001358:	23c0      	movs	r3, #192	; 0xc0
 800135a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001370:	2304      	movs	r3, #4
 8001372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800137a:	4619      	mov	r1, r3
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <HAL_I2C_MspInit+0xc4>)
 800137e:	f004 f8e9 	bl	8005554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_I2C_MspInit+0xc0>)
 8001384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001388:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_I2C_MspInit+0xc0>)
 800138a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_I2C_MspInit+0xc0>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	37e0      	adds	r7, #224	; 0xe0
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40005400 	.word	0x40005400
 80013ac:	58024400 	.word	0x58024400
 80013b0:	58020400 	.word	0x58020400

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d4:	d10f      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d6:	4b63      	ldr	r3, [pc, #396]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 80013d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013dc:	4a61      	ldr	r2, [pc, #388]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 80013e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	623b      	str	r3, [r7, #32]
 80013f2:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013f4:	e0b1      	b.n	800155a <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM4)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a5b      	ldr	r2, [pc, #364]	; (8001568 <HAL_TIM_Base_MspInit+0x1b4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d137      	bne.n	8001470 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001400:	4b58      	ldr	r3, [pc, #352]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 8001402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001406:	4a57      	ldr	r2, [pc, #348]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001410:	4b54      	ldr	r3, [pc, #336]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 8001412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	4b51      	ldr	r3, [pc, #324]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	4a4f      	ldr	r2, [pc, #316]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142e:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800143c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800144e:	2302      	movs	r3, #2
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4844      	ldr	r0, [pc, #272]	; (800156c <HAL_TIM_Base_MspInit+0x1b8>)
 800145a:	f004 f87b 	bl	8005554 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	201e      	movs	r0, #30
 8001464:	f001 fa05 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001468:	201e      	movs	r0, #30
 800146a:	f001 fa1c 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 800146e:	e074      	b.n	800155a <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM5)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a3e      	ldr	r2, [pc, #248]	; (8001570 <HAL_TIM_Base_MspInit+0x1bc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d136      	bne.n	80014e8 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 800147c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001480:	4a38      	ldr	r2, [pc, #224]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 800148c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b32      	ldr	r3, [pc, #200]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	4a31      	ldr	r2, [pc, #196]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b6:	2301      	movs	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80014c6:	2302      	movs	r3, #2
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	4828      	ldr	r0, [pc, #160]	; (8001574 <HAL_TIM_Base_MspInit+0x1c0>)
 80014d2:	f004 f83f 	bl	8005554 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2032      	movs	r0, #50	; 0x32
 80014dc:	f001 f9c9 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80014e0:	2032      	movs	r0, #50	; 0x32
 80014e2:	f001 f9e0 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 80014e6:	e038      	b.n	800155a <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM6)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a22      	ldr	r2, [pc, #136]	; (8001578 <HAL_TIM_Base_MspInit+0x1c4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d117      	bne.n	8001522 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 80014f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 8001504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2036      	movs	r0, #54	; 0x36
 8001516:	f001 f9ac 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800151a:	2036      	movs	r0, #54	; 0x36
 800151c:	f001 f9c3 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 8001520:	e01b      	b.n	800155a <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM7)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a15      	ldr	r2, [pc, #84]	; (800157c <HAL_TIM_Base_MspInit+0x1c8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d116      	bne.n	800155a <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 800152e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001532:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 8001534:	f043 0320 	orr.w	r3, r3, #32
 8001538:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_TIM_Base_MspInit+0x1b0>)
 800153e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2037      	movs	r0, #55	; 0x37
 8001550:	f001 f98f 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001554:	2037      	movs	r0, #55	; 0x37
 8001556:	f001 f9a6 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 800155a:	bf00      	nop
 800155c:	3738      	adds	r7, #56	; 0x38
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	58024400 	.word	0x58024400
 8001568:	40000800 	.word	0x40000800
 800156c:	58020c00 	.word	0x58020c00
 8001570:	40000c00 	.word	0x40000c00
 8001574:	58020000 	.word	0x58020000
 8001578:	40001000 	.word	0x40001000
 800157c:	40001400 	.word	0x40001400

08001580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a0:	d13d      	bne.n	800161e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_TIM_MspPostInit+0xa8>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_TIM_MspPostInit+0xa8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_TIM_MspPostInit+0xa8>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_TIM_MspPostInit+0xa8>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <HAL_TIM_MspPostInit+0xa8>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_TIM_MspPostInit+0xa8>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80015de:	232c      	movs	r3, #44	; 0x2c
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ee:	2301      	movs	r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <HAL_TIM_MspPostInit+0xac>)
 80015fa:	f003 ffab 	bl	8005554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015fe:	2308      	movs	r3, #8
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800160e:	2301      	movs	r3, #1
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_TIM_MspPostInit+0xb0>)
 800161a:	f003 ff9b 	bl	8005554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	58024400 	.word	0x58024400
 800162c:	58020000 	.word	0x58020000
 8001630:	58020400 	.word	0x58020400

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0c0      	sub	sp, #256	; 0x100
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800164c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001650:	22bc      	movs	r2, #188	; 0xbc
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f00a fde7 	bl	800c228 <memset>
  if(huart->Instance==UART4)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <HAL_UART_MspInit+0x224>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d179      	bne.n	8001758 <HAL_UART_MspInit+0x124>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001664:	2302      	movs	r3, #2
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8001668:	2303      	movs	r3, #3
 800166a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001672:	4618      	mov	r0, r3
 8001674:	f005 fa86 	bl	8006b84 <HAL_RCCEx_PeriphCLKConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800167e:	f7ff fe15 	bl	80012ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <HAL_UART_MspInit+0x228>)
 8001684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001688:	4a74      	ldr	r2, [pc, #464]	; (800185c <HAL_UART_MspInit+0x228>)
 800168a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800168e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001692:	4b72      	ldr	r3, [pc, #456]	; (800185c <HAL_UART_MspInit+0x228>)
 8001694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b6e      	ldr	r3, [pc, #440]	; (800185c <HAL_UART_MspInit+0x228>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a6:	4a6d      	ldr	r2, [pc, #436]	; (800185c <HAL_UART_MspInit+0x228>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b0:	4b6a      	ldr	r3, [pc, #424]	; (800185c <HAL_UART_MspInit+0x228>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c6:	2312      	movs	r3, #18
 80016c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80016d8:	2306      	movs	r3, #6
 80016da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016e2:	4619      	mov	r1, r3
 80016e4:	485e      	ldr	r0, [pc, #376]	; (8001860 <HAL_UART_MspInit+0x22c>)
 80016e6:	f003 ff35 	bl	8005554 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream0;
 80016ea:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_UART_MspInit+0x230>)
 80016ec:	4a5e      	ldr	r2, [pc, #376]	; (8001868 <HAL_UART_MspInit+0x234>)
 80016ee:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80016f0:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <HAL_UART_MspInit+0x230>)
 80016f2:	223f      	movs	r2, #63	; 0x3f
 80016f4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f6:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <HAL_UART_MspInit+0x230>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <HAL_UART_MspInit+0x230>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001702:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_UART_MspInit+0x230>)
 8001704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001708:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800170a:	4b56      	ldr	r3, [pc, #344]	; (8001864 <HAL_UART_MspInit+0x230>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001710:	4b54      	ldr	r3, [pc, #336]	; (8001864 <HAL_UART_MspInit+0x230>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001716:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_UART_MspInit+0x230>)
 8001718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800171e:	4b51      	ldr	r3, [pc, #324]	; (8001864 <HAL_UART_MspInit+0x230>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_UART_MspInit+0x230>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800172a:	484e      	ldr	r0, [pc, #312]	; (8001864 <HAL_UART_MspInit+0x230>)
 800172c:	f001 f8d6 	bl	80028dc <HAL_DMA_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001736:	f7ff fdb9 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a49      	ldr	r2, [pc, #292]	; (8001864 <HAL_UART_MspInit+0x230>)
 800173e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001740:	4a48      	ldr	r2, [pc, #288]	; (8001864 <HAL_UART_MspInit+0x230>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2034      	movs	r0, #52	; 0x34
 800174c:	f001 f891 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001750:	2034      	movs	r0, #52	; 0x34
 8001752:	f001 f8a8 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001756:	e1de      	b.n	8001b16 <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART5)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a43      	ldr	r2, [pc, #268]	; (800186c <HAL_UART_MspInit+0x238>)
 800175e:	4293      	cmp	r3, r2
 8001760:	f040 808c 	bne.w	800187c <HAL_UART_MspInit+0x248>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001764:	2302      	movs	r3, #2
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8001768:	2303      	movs	r3, #3
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001772:	4618      	mov	r0, r3
 8001774:	f005 fa06 	bl	8006b84 <HAL_RCCEx_PeriphCLKConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 800177e:	f7ff fd95 	bl	80012ac <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <HAL_UART_MspInit+0x228>)
 8001784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001788:	4a34      	ldr	r2, [pc, #208]	; (800185c <HAL_UART_MspInit+0x228>)
 800178a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800178e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_UART_MspInit+0x228>)
 8001794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_UART_MspInit+0x228>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	4a2d      	ldr	r2, [pc, #180]	; (800185c <HAL_UART_MspInit+0x228>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_UART_MspInit+0x228>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	623b      	str	r3, [r7, #32]
 80017bc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c6:	2312      	movs	r3, #18
 80017c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80017d8:	230e      	movs	r3, #14
 80017da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017e2:	4619      	mov	r1, r3
 80017e4:	4822      	ldr	r0, [pc, #136]	; (8001870 <HAL_UART_MspInit+0x23c>)
 80017e6:	f003 feb5 	bl	8005554 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream1;
 80017ea:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_UART_MspInit+0x240>)
 80017ec:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_UART_MspInit+0x244>)
 80017ee:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_UART_MspInit+0x240>)
 80017f2:	2241      	movs	r2, #65	; 0x41
 80017f4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_UART_MspInit+0x240>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_UART_MspInit+0x240>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_UART_MspInit+0x240>)
 8001804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001808:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_UART_MspInit+0x240>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_UART_MspInit+0x240>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_UART_MspInit+0x240>)
 8001818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_UART_MspInit+0x240>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_UART_MspInit+0x240>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <HAL_UART_MspInit+0x240>)
 800182c:	f001 f856 	bl	80028dc <HAL_DMA_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_UART_MspInit+0x206>
      Error_Handler();
 8001836:	f7ff fd39 	bl	80012ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_UART_MspInit+0x240>)
 800183e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_UART_MspInit+0x240>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2035      	movs	r0, #53	; 0x35
 800184c:	f001 f811 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001850:	2035      	movs	r0, #53	; 0x35
 8001852:	f001 f828 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 8001856:	e15e      	b.n	8001b16 <HAL_UART_MspInit+0x4e2>
 8001858:	40004c00 	.word	0x40004c00
 800185c:	58024400 	.word	0x58024400
 8001860:	58020000 	.word	0x58020000
 8001864:	24000538 	.word	0x24000538
 8001868:	40020010 	.word	0x40020010
 800186c:	40005000 	.word	0x40005000
 8001870:	58020400 	.word	0x58020400
 8001874:	240005b0 	.word	0x240005b0
 8001878:	40020028 	.word	0x40020028
  else if(huart->Instance==UART7)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4aa7      	ldr	r2, [pc, #668]	; (8001b20 <HAL_UART_MspInit+0x4ec>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d179      	bne.n	800197a <HAL_UART_MspInit+0x346>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001886:	2302      	movs	r3, #2
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 800188a:	2303      	movs	r3, #3
 800188c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001894:	4618      	mov	r0, r3
 8001896:	f005 f975 	bl	8006b84 <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_UART_MspInit+0x270>
      Error_Handler();
 80018a0:	f7ff fd04 	bl	80012ac <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80018a4:	4b9f      	ldr	r3, [pc, #636]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80018a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018aa:	4a9e      	ldr	r2, [pc, #632]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80018ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018b4:	4b9b      	ldr	r3, [pc, #620]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80018b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c2:	4b98      	ldr	r3, [pc, #608]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c8:	4a96      	ldr	r2, [pc, #600]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80018ca:	f043 0310 	orr.w	r3, r3, #16
 80018ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d2:	4b94      	ldr	r3, [pc, #592]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e8:	2312      	movs	r3, #18
 80018ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80018fa:	2307      	movs	r3, #7
 80018fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001900:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001904:	4619      	mov	r1, r3
 8001906:	4888      	ldr	r0, [pc, #544]	; (8001b28 <HAL_UART_MspInit+0x4f4>)
 8001908:	f003 fe24 	bl	8005554 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 800190c:	4b87      	ldr	r3, [pc, #540]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 800190e:	4a88      	ldr	r2, [pc, #544]	; (8001b30 <HAL_UART_MspInit+0x4fc>)
 8001910:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001912:	4b86      	ldr	r3, [pc, #536]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 8001914:	224f      	movs	r2, #79	; 0x4f
 8001916:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001918:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191e:	4b83      	ldr	r3, [pc, #524]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001924:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 8001926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192c:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001932:	4b7e      	ldr	r3, [pc, #504]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8001938:	4b7c      	ldr	r3, [pc, #496]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 800193a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001940:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 8001942:	2200      	movs	r2, #0
 8001944:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001946:	4b79      	ldr	r3, [pc, #484]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800194c:	4877      	ldr	r0, [pc, #476]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 800194e:	f000 ffc5 	bl	80028dc <HAL_DMA_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_UART_MspInit+0x328>
      Error_Handler();
 8001958:	f7ff fca8 	bl	80012ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a73      	ldr	r2, [pc, #460]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 8001960:	67da      	str	r2, [r3, #124]	; 0x7c
 8001962:	4a72      	ldr	r2, [pc, #456]	; (8001b2c <HAL_UART_MspInit+0x4f8>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	2052      	movs	r0, #82	; 0x52
 800196e:	f000 ff80 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001972:	2052      	movs	r0, #82	; 0x52
 8001974:	f000 ff97 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 8001978:	e0cd      	b.n	8001b16 <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART8)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6d      	ldr	r2, [pc, #436]	; (8001b34 <HAL_UART_MspInit+0x500>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d178      	bne.n	8001a76 <HAL_UART_MspInit+0x442>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001984:	2302      	movs	r3, #2
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8001988:	2303      	movs	r3, #3
 800198a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001992:	4618      	mov	r0, r3
 8001994:	f005 f8f6 	bl	8006b84 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_UART_MspInit+0x36e>
      Error_Handler();
 800199e:	f7ff fc85 	bl	80012ac <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80019a2:	4b60      	ldr	r3, [pc, #384]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80019a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a8:	4a5e      	ldr	r2, [pc, #376]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80019aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80019b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019c0:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	4a57      	ldr	r2, [pc, #348]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d0:	4b54      	ldr	r3, [pc, #336]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e4:	2312      	movs	r3, #18
 80019e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80019f6:	2308      	movs	r3, #8
 80019f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a00:	4619      	mov	r1, r3
 8001a02:	4849      	ldr	r0, [pc, #292]	; (8001b28 <HAL_UART_MspInit+0x4f4>)
 8001a04:	f003 fda6 	bl	8005554 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream3;
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a0a:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <HAL_UART_MspInit+0x508>)
 8001a0c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a10:	2251      	movs	r2, #81	; 0x51
 8001a12:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a14:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a20:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a26:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a28:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a3c:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001a48:	483b      	ldr	r0, [pc, #236]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a4a:	f000 ff47 	bl	80028dc <HAL_DMA_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_MspInit+0x424>
      Error_Handler();
 8001a54:	f7ff fc2a 	bl	80012ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a37      	ldr	r2, [pc, #220]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a5c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a5e:	4a36      	ldr	r2, [pc, #216]	; (8001b38 <HAL_UART_MspInit+0x504>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	2053      	movs	r0, #83	; 0x53
 8001a6a:	f000 ff02 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001a6e:	2053      	movs	r0, #83	; 0x53
 8001a70:	f000 ff19 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 8001a74:	e04f      	b.n	8001b16 <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==USART1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a31      	ldr	r2, [pc, #196]	; (8001b40 <HAL_UART_MspInit+0x50c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d14a      	bne.n	8001b16 <HAL_UART_MspInit+0x4e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8001a84:	2318      	movs	r3, #24
 8001a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 f878 	bl	8006b84 <HAL_RCCEx_PeriphCLKConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_UART_MspInit+0x46a>
      Error_Handler();
 8001a9a:	f7ff fc07 	bl	80012ac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 8001aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa4:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 8001ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac2:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_UART_MspInit+0x4f0>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ade:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae2:	2312      	movs	r3, #18
 8001ae4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001af4:	2304      	movs	r3, #4
 8001af6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001afe:	4619      	mov	r1, r3
 8001b00:	4810      	ldr	r0, [pc, #64]	; (8001b44 <HAL_UART_MspInit+0x510>)
 8001b02:	f003 fd27 	bl	8005554 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2025      	movs	r0, #37	; 0x25
 8001b0c:	f000 feb1 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b10:	2025      	movs	r0, #37	; 0x25
 8001b12:	f000 fec8 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40007800 	.word	0x40007800
 8001b24:	58024400 	.word	0x58024400
 8001b28:	58021000 	.word	0x58021000
 8001b2c:	24000628 	.word	0x24000628
 8001b30:	40020040 	.word	0x40020040
 8001b34:	40007c00 	.word	0x40007c00
 8001b38:	240006a0 	.word	0x240006a0
 8001b3c:	40020058 	.word	0x40020058
 8001b40:	40011000 	.word	0x40011000
 8001b44:	58020400 	.word	0x58020400

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <NMI_Handler+0x4>

08001b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <HardFault_Handler+0x4>

08001b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <MemManage_Handler+0x4>

08001b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <BusFault_Handler+0x4>

08001b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <UsageFault_Handler+0x4>

08001b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b94:	f000 fd42 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <DMA1_Stream0_IRQHandler+0x10>)
 8001ba2:	f002 f9c5 	bl	8003f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	24000538 	.word	0x24000538

08001bb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <DMA1_Stream1_IRQHandler+0x10>)
 8001bb6:	f002 f9bb 	bl	8003f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	240005b0 	.word	0x240005b0

08001bc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <DMA1_Stream2_IRQHandler+0x10>)
 8001bca:	f002 f9b1 	bl	8003f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	24000628 	.word	0x24000628

08001bd8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <DMA1_Stream3_IRQHandler+0x10>)
 8001bde:	f002 f9a7 	bl	8003f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	240006a0 	.word	0x240006a0

08001bec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <TIM4_IRQHandler+0x10>)
 8001bf2:	f006 ff21 	bl	8008a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	24000138 	.word	0x24000138

08001c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <USART1_IRQHandler+0x10>)
 8001c06:	f008 faab 	bl	800a160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	240004a8 	.word	0x240004a8

08001c14 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM5_IRQHandler+0x10>)
 8001c1a:	f006 ff0d 	bl	8008a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	24000184 	.word	0x24000184

08001c28 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <UART4_IRQHandler+0x10>)
 8001c2e:	f008 fa97 	bl	800a160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	24000268 	.word	0x24000268

08001c3c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <UART5_IRQHandler+0x10>)
 8001c42:	f008 fa8d 	bl	800a160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	240002f8 	.word	0x240002f8

08001c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  schedule_400hz();
 8001c54:	f000 f9e4 	bl	8002020 <schedule_400hz>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <TIM6_DAC_IRQHandler+0x14>)
 8001c5a:	f006 feed 	bl	8008a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	240001d0 	.word	0x240001d0

08001c68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  schedule_20hz();
 8001c6c:	f000 f9ee 	bl	800204c <schedule_20hz>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM7_IRQHandler+0x14>)
 8001c72:	f006 fee1 	bl	8008a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2400021c 	.word	0x2400021c

08001c80 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <UART7_IRQHandler+0x10>)
 8001c86:	f008 fa6b 	bl	800a160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	24000388 	.word	0x24000388

08001c94 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <UART8_IRQHandler+0x10>)
 8001c9a:	f008 fa61 	bl	800a160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	24000418 	.word	0x24000418

08001ca8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a7a      	ldr	r2, [pc, #488]	; (8001ea0 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	f040 8143 	bne.w	8001f42 <HAL_TIM_IC_CaptureCallback+0x29a>
    switch (htim->Channel) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7f1b      	ldrb	r3, [r3, #28]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	2b07      	cmp	r3, #7
 8001cc4:	f200 80e4 	bhi.w	8001e90 <HAL_TIM_IC_CaptureCallback+0x1e8>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001cf1 	.word	0x08001cf1
 8001cd4:	08001d5d 	.word	0x08001d5d
 8001cd8:	08001e91 	.word	0x08001e91
 8001cdc:	08001dc5 	.word	0x08001dc5
 8001ce0:	08001e91 	.word	0x08001e91
 8001ce4:	08001e91 	.word	0x08001e91
 8001ce8:	08001e91 	.word	0x08001e91
 8001cec:	08001e2b 	.word	0x08001e2b
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	486b      	ldr	r0, [pc, #428]	; (8001ea4 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001cf6:	f003 fddd 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d107      	bne.n	8001d10 <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001d00:	2100      	movs	r1, #0
 8001d02:	4869      	ldr	r0, [pc, #420]	; (8001ea8 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001d04:	f007 fa60 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b67      	ldr	r3, [pc, #412]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001d0e:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8001d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d14:	4863      	ldr	r0, [pc, #396]	; (8001ea4 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001d16:	f003 fdcd 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 80b9 	bne.w	8001e94 <HAL_TIM_IC_CaptureCallback+0x1ec>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001d22:	2100      	movs	r1, #0
 8001d24:	4860      	ldr	r0, [pc, #384]	; (8001ea8 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001d26:	f007 fa4f 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001d30:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 8001d32:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	613b      	str	r3, [r7, #16]
          if (value >= 350 && value <= 850) { // [400, 798]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001d44:	f2c0 80a6 	blt.w	8001e94 <HAL_TIM_IC_CaptureCallback+0x1ec>
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f240 3252 	movw	r2, #850	; 0x352
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	f300 80a0 	bgt.w	8001e94 <HAL_TIM_IC_CaptureCallback+0x1ec>
            pwm_in[2] = value;
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 8001d5a:	e09b      	b.n	8001e94 <HAL_TIM_IC_CaptureCallback+0x1ec>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8001d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d60:	4850      	ldr	r0, [pc, #320]	; (8001ea4 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001d62:	f003 fda7 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_TIM_IC_CaptureCallback+0xd4>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	484e      	ldr	r0, [pc, #312]	; (8001ea8 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001d70:	f007 fa2a 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001d7a:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8001d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d80:	4848      	ldr	r0, [pc, #288]	; (8001ea4 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001d82:	f003 fd97 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 8085 	bne.w	8001e98 <HAL_TIM_IC_CaptureCallback+0x1f0>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8001d8e:	2104      	movs	r1, #4
 8001d90:	4845      	ldr	r0, [pc, #276]	; (8001ea8 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001d92:	f007 fa19 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b44      	ldr	r3, [pc, #272]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001d9c:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 8001d9e:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	4b42      	ldr	r3, [pc, #264]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
          if (value >= 350 && value <= 850) {
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001db0:	db72      	blt.n	8001e98 <HAL_TIM_IC_CaptureCallback+0x1f0>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f240 3252 	movw	r2, #850	; 0x352
 8001db8:	4293      	cmp	r3, r2
 8001dba:	dc6d      	bgt.n	8001e98 <HAL_TIM_IC_CaptureCallback+0x1f0>
            pwm_in[5] = value;
 8001dbc:	4a3b      	ldr	r2, [pc, #236]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 8001dc2:	e069      	b.n	8001e98 <HAL_TIM_IC_CaptureCallback+0x1f0>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8001dc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc8:	4836      	ldr	r0, [pc, #216]	; (8001ea4 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001dca:	f003 fd73 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_TIM_IC_CaptureCallback+0x13c>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	4834      	ldr	r0, [pc, #208]	; (8001ea8 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001dd8:	f007 f9f6 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001de2:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8001de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de8:	482e      	ldr	r0, [pc, #184]	; (8001ea4 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001dea:	f003 fd63 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d153      	bne.n	8001e9c <HAL_TIM_IC_CaptureCallback+0x1f4>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8001df4:	2108      	movs	r1, #8
 8001df6:	482c      	ldr	r0, [pc, #176]	; (8001ea8 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001df8:	f007 f9e6 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001e02:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001e06:	69da      	ldr	r2, [r3, #28]
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	61bb      	str	r3, [r7, #24]
          if (value >= 350 && value <= 850) {
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001e16:	db41      	blt.n	8001e9c <HAL_TIM_IC_CaptureCallback+0x1f4>
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f240 3252 	movw	r2, #850	; 0x352
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	dc3c      	bgt.n	8001e9c <HAL_TIM_IC_CaptureCallback+0x1f4>
            pwm_in[8] = value;
 8001e22:	4a22      	ldr	r2, [pc, #136]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 8001e28:	e038      	b.n	8001e9c <HAL_TIM_IC_CaptureCallback+0x1f4>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e2e:	481d      	ldr	r0, [pc, #116]	; (8001ea4 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001e30:	f003 fd40 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_TIM_IC_CaptureCallback+0x1a2>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8001e3a:	210c      	movs	r1, #12
 8001e3c:	481a      	ldr	r0, [pc, #104]	; (8001ea8 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001e3e:	f007 f9c3 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8001e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4e:	4815      	ldr	r0, [pc, #84]	; (8001ea4 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001e50:	f003 fd30 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d12a      	bne.n	8001eb0 <HAL_TIM_IC_CaptureCallback+0x208>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8001e5a:	210c      	movs	r1, #12
 8001e5c:	4812      	ldr	r0, [pc, #72]	; (8001ea8 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001e5e:	f007 f9b3 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	61fb      	str	r3, [r7, #28]
          if (value >= 350 && value <= 850) {
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001e7c:	db18      	blt.n	8001eb0 <HAL_TIM_IC_CaptureCallback+0x208>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f240 3252 	movw	r2, #850	; 0x352
 8001e84:	4293      	cmp	r3, r2
 8001e86:	dc13      	bgt.n	8001eb0 <HAL_TIM_IC_CaptureCallback+0x208>
            pwm_in[11] = value;
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x204>)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 8001e8e:	e00f      	b.n	8001eb0 <HAL_TIM_IC_CaptureCallback+0x208>
      default:
        break;
 8001e90:	bf00      	nop
 8001e92:	e00e      	b.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0x20a>
        break;
 8001e94:	bf00      	nop
 8001e96:	e00c      	b.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0x20a>
        break;
 8001e98:	bf00      	nop
 8001e9a:	e00a      	b.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0x20a>
        break;
 8001e9c:	bf00      	nop
 8001e9e:	e008      	b.n	8001eb2 <HAL_TIM_IC_CaptureCallback+0x20a>
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	58020c00 	.word	0x58020c00
 8001ea8:	24000138 	.word	0x24000138
 8001eac:	24000718 	.word	0x24000718
        break;
 8001eb0:	bf00      	nop
    }

    g_throttle = average_filter_update(&g_af[0], pwm_in[2] - 400);
 8001eb2:	4b4d      	ldr	r3, [pc, #308]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	4849      	ldr	r0, [pc, #292]	; (8001fec <HAL_TIM_IC_CaptureCallback+0x344>)
 8001ec8:	f7fe fc02 	bl	80006d0 <average_filter_update>
 8001ecc:	eef0 7a40 	vmov.f32	s15, s0
 8001ed0:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_TIM_IC_CaptureCallback+0x348>)
 8001ed2:	edc3 7a00 	vstr	s15, [r3]
    g_yaw = average_filter_update(&g_af[1], pwm_in[11] - 600);
 8001ed6:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	4842      	ldr	r0, [pc, #264]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001eec:	f7fe fbf0 	bl	80006d0 <average_filter_update>
 8001ef0:	eef0 7a40 	vmov.f32	s15, s0
 8001ef4:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <HAL_TIM_IC_CaptureCallback+0x350>)
 8001ef6:	edc3 7a00 	vstr	s15, [r3]
    g_pitch = average_filter_update(&g_af[2], pwm_in[8] - 600);
 8001efa:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	483b      	ldr	r0, [pc, #236]	; (8001ffc <HAL_TIM_IC_CaptureCallback+0x354>)
 8001f10:	f7fe fbde 	bl	80006d0 <average_filter_update>
 8001f14:	eef0 7a40 	vmov.f32	s15, s0
 8001f18:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_TIM_IC_CaptureCallback+0x358>)
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
    g_roll = average_filter_update(&g_af[3], pwm_in[5] - 600);
 8001f1e:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f32:	4834      	ldr	r0, [pc, #208]	; (8002004 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001f34:	f7fe fbcc 	bl	80006d0 <average_filter_update>
 8001f38:	eef0 7a40 	vmov.f32	s15, s0
 8001f3c:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_TIM_IC_CaptureCallback+0x360>)
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM5) {
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a31      	ldr	r2, [pc, #196]	; (800200c <HAL_TIM_IC_CaptureCallback+0x364>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d149      	bne.n	8001fe0 <HAL_TIM_IC_CaptureCallback+0x338>
    switch (htim->Channel) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7f1b      	ldrb	r3, [r3, #28]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d130      	bne.n	8001fb6 <HAL_TIM_IC_CaptureCallback+0x30e>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001f54:	2101      	movs	r1, #1
 8001f56:	482e      	ldr	r0, [pc, #184]	; (8002010 <HAL_TIM_IC_CaptureCallback+0x368>)
 8001f58:	f003 fcac 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_TIM_IC_CaptureCallback+0x2ca>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8001f62:	2100      	movs	r1, #0
 8001f64:	482b      	ldr	r0, [pc, #172]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x36c>)
 8001f66:	f007 f92f 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001f72:	2101      	movs	r1, #1
 8001f74:	4826      	ldr	r0, [pc, #152]	; (8002010 <HAL_TIM_IC_CaptureCallback+0x368>)
 8001f76:	f003 fc9d 	bl	80058b4 <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d11c      	bne.n	8001fba <HAL_TIM_IC_CaptureCallback+0x312>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 8001f80:	2108      	movs	r1, #8
 8001f82:	4824      	ldr	r0, [pc, #144]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x36c>)
 8001f84:	f007 f920 	bl	80091c8 <HAL_TIM_ReadCapturedValue>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	60fb      	str	r3, [r7, #12]
          if (value >= 350 && value <= 850) { // [399, 799]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001fa2:	db0a      	blt.n	8001fba <HAL_TIM_IC_CaptureCallback+0x312>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f240 3252 	movw	r2, #850	; 0x352
 8001faa:	4293      	cmp	r3, r2
 8001fac:	dc05      	bgt.n	8001fba <HAL_TIM_IC_CaptureCallback+0x312>
            pwm_in[14] = value;
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6393      	str	r3, [r2, #56]	; 0x38
          }
        }
        break;
 8001fb4:	e001      	b.n	8001fba <HAL_TIM_IC_CaptureCallback+0x312>
      default:
        break;
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <HAL_TIM_IC_CaptureCallback+0x314>
        break;
 8001fba:	bf00      	nop
    }

    g_stick1 = average_filter_update(&g_af[4], pwm_in[14] - 400);
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd0:	4811      	ldr	r0, [pc, #68]	; (8002018 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001fd2:	f7fe fb7d 	bl	80006d0 <average_filter_update>
 8001fd6:	eef0 7a40 	vmov.f32	s15, s0
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_TIM_IC_CaptureCallback+0x374>)
 8001fdc:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000718 	.word	0x24000718
 8001fec:	2400083c 	.word	0x2400083c
 8001ff0:	24000790 	.word	0x24000790
 8001ff4:	240009d8 	.word	0x240009d8
 8001ff8:	2400079c 	.word	0x2400079c
 8001ffc:	24000b74 	.word	0x24000b74
 8002000:	24000794 	.word	0x24000794
 8002004:	24000d10 	.word	0x24000d10
 8002008:	24000798 	.word	0x24000798
 800200c:	40000c00 	.word	0x40000c00
 8002010:	58020000 	.word	0x58020000
 8002014:	24000184 	.word	0x24000184
 8002018:	24000eac 	.word	0x24000eac
 800201c:	240007a0 	.word	0x240007a0

08002020 <schedule_400hz>:

void schedule_400hz(void) {
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  // Update from sensors
//  MPU6050_update(&g_mpu6050);
//  MS5611_update(&g_ms5611);
//  fly();
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002038:	2102      	movs	r1, #2
 800203a:	4803      	ldr	r0, [pc, #12]	; (8002048 <HAL_UART_RxCpltCallback+0x18>)
 800203c:	f003 fc6b 	bl	8005916 <HAL_GPIO_TogglePin>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	58020000 	.word	0x58020000

0800204c <schedule_20hz>:

void schedule_20hz(void) {
 800204c:	b5b0      	push	{r4, r5, r7, lr}
 800204e:	b08e      	sub	sp, #56	; 0x38
 8002050:	af04      	add	r7, sp, #16
  static char msg[16];
  static int starts[4] = {-1, -1, -1, -1};

  for (int t = 0; t < 4; t += 1) {
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	e10d      	b.n	8002274 <schedule_20hz+0x228>
    int start = starts[t];
 8002058:	4a9c      	ldr	r2, [pc, #624]	; (80022cc <schedule_20hz+0x280>)
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	623b      	str	r3, [r7, #32]
    int end = -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002066:	61fb      	str	r3, [r7, #28]
    uint8_t *p;
    switch (t) {
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	2b03      	cmp	r3, #3
 800206c:	d816      	bhi.n	800209c <schedule_20hz+0x50>
 800206e:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <schedule_20hz+0x28>)
 8002070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002074:	08002085 	.word	0x08002085
 8002078:	0800208b 	.word	0x0800208b
 800207c:	08002091 	.word	0x08002091
 8002080:	08002097 	.word	0x08002097
    case 0: p = g_uart_rx_buffer1; break;
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <schedule_20hz+0x284>)
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e008      	b.n	800209c <schedule_20hz+0x50>
    case 1: p = g_uart_rx_buffer2; break;
 800208a:	4b92      	ldr	r3, [pc, #584]	; (80022d4 <schedule_20hz+0x288>)
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e005      	b.n	800209c <schedule_20hz+0x50>
    case 2: p = g_uart_rx_buffer3; break;
 8002090:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <schedule_20hz+0x28c>)
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e002      	b.n	800209c <schedule_20hz+0x50>
    case 3: p = g_uart_rx_buffer4; break;
 8002096:	4b91      	ldr	r3, [pc, #580]	; (80022dc <schedule_20hz+0x290>)
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	bf00      	nop
    }

    if (start == -1) {
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a2:	d111      	bne.n	80020c8 <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00b      	b.n	80020c2 <schedule_20hz+0x76>
        if (p[i] == '$') {
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b24      	cmp	r3, #36	; 0x24
 80020b4:	d102      	bne.n	80020bc <schedule_20hz+0x70>
          start = i;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	623b      	str	r3, [r7, #32]
          break;
 80020ba:	e005      	b.n	80020c8 <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2bff      	cmp	r3, #255	; 0xff
 80020c6:	ddf0      	ble.n	80020aa <schedule_20hz+0x5e>
        }
      }
    }

    if (start > -1) {
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	db2b      	blt.n	8002126 <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	e025      	b.n	8002120 <schedule_20hz+0xd4>
        if (p[(start+i)%UART_BUF_SIZE] == 0) {
 80020d4:	6a3a      	ldr	r2, [r7, #32]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	425a      	negs	r2, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	bf58      	it	pl
 80020e2:	4253      	negpl	r3, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <schedule_20hz+0xac>
          start = -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e016      	b.n	8002126 <schedule_20hz+0xda>
        }

        if (p[(start+i)%UART_BUF_SIZE] == '\n') {
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	425a      	negs	r2, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	bf58      	it	pl
 8002106:	4253      	negpl	r3, r2
 8002108:	461a      	mov	r2, r3
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b0a      	cmp	r3, #10
 8002112:	d102      	bne.n	800211a <schedule_20hz+0xce>
          end = i;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	61fb      	str	r3, [r7, #28]
          break;
 8002118:	e005      	b.n	8002126 <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	3301      	adds	r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2bff      	cmp	r3, #255	; 0xff
 8002124:	ddd6      	ble.n	80020d4 <schedule_20hz+0x88>
        }
      }
    }

    if (start > -1 && end > -1) {
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	f2c0 809f 	blt.w	800226c <schedule_20hz+0x220>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f2c0 809b 	blt.w	800226c <schedule_20hz+0x220>
      memset(msg, 0, 16);
 8002136:	2210      	movs	r2, #16
 8002138:	2100      	movs	r1, #0
 800213a:	4869      	ldr	r0, [pc, #420]	; (80022e0 <schedule_20hz+0x294>)
 800213c:	f00a f874 	bl	800c228 <memset>

      if (start < end) {
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	429a      	cmp	r2, r3
 8002146:	da14      	bge.n	8002172 <schedule_20hz+0x126>
        memcpy(msg, &p[start], end - start);
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	18d1      	adds	r1, r2, r3
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	461a      	mov	r2, r3
 8002156:	4862      	ldr	r0, [pc, #392]	; (80022e0 <schedule_20hz+0x294>)
 8002158:	f00a f858 	bl	800c20c <memcpy>
        memset(&p[start], 0, end - start);
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	18d0      	adds	r0, r2, r3
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	461a      	mov	r2, r3
 800216a:	2100      	movs	r1, #0
 800216c:	f00a f85c 	bl	800c228 <memset>
 8002170:	e027      	b.n	80021c2 <schedule_20hz+0x176>
      }
      else if (start > end) {
 8002172:	6a3a      	ldr	r2, [r7, #32]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	429a      	cmp	r2, r3
 8002178:	dd23      	ble.n	80021c2 <schedule_20hz+0x176>
        memcpy(msg, &p[start], UART_BUF_SIZE - start);
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	18d1      	adds	r1, r2, r3
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002186:	461a      	mov	r2, r3
 8002188:	4855      	ldr	r0, [pc, #340]	; (80022e0 <schedule_20hz+0x294>)
 800218a:	f00a f83f 	bl	800c20c <memcpy>
        memset(&p[start], 0, UART_BUF_SIZE - start);
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	18d0      	adds	r0, r2, r3
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800219a:	461a      	mov	r2, r3
 800219c:	2100      	movs	r1, #0
 800219e:	f00a f843 	bl	800c228 <memset>
        memcpy(&msg[UART_BUF_SIZE - start], p, end);
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80021a8:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <schedule_20hz+0x294>)
 80021aa:	4413      	add	r3, r2
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	69b9      	ldr	r1, [r7, #24]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00a f82b 	bl	800c20c <memcpy>
        memset(p, 0, end);
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	461a      	mov	r2, r3
 80021ba:	2100      	movs	r1, #0
 80021bc:	69b8      	ldr	r0, [r7, #24]
 80021be:	f00a f833 	bl	800c228 <memset>
      }

      starts[t] = -1;
 80021c2:	4a42      	ldr	r2, [pc, #264]	; (80022cc <schedule_20hz+0x280>)
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      int idx = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
      for (int idx = 0; idx < 16; idx += 1) {
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e008      	b.n	80021ea <schedule_20hz+0x19e>
        if (msg[idx] == ',') {
 80021d8:	4a41      	ldr	r2, [pc, #260]	; (80022e0 <schedule_20hz+0x294>)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b2c      	cmp	r3, #44	; 0x2c
 80021e2:	d006      	beq.n	80021f2 <schedule_20hz+0x1a6>
      for (int idx = 0; idx < 16; idx += 1) {
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	ddf3      	ble.n	80021d8 <schedule_20hz+0x18c>
 80021f0:	e000      	b.n	80021f4 <schedule_20hz+0x1a8>
          break;
 80021f2:	bf00      	nop
        }
      }
      msg[idx] = 0;
 80021f4:	4a3a      	ldr	r2, [pc, #232]	; (80022e0 <schedule_20hz+0x294>)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4413      	add	r3, r2
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
      int dy = atoi(&msg[1]);
 80021fe:	4839      	ldr	r0, [pc, #228]	; (80022e4 <schedule_20hz+0x298>)
 8002200:	f009 ffd6 	bl	800c1b0 <atoi>
 8002204:	6078      	str	r0, [r7, #4]
      int dx = atoi(&msg[idx+1]);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3301      	adds	r3, #1
 800220a:	4a35      	ldr	r2, [pc, #212]	; (80022e0 <schedule_20hz+0x294>)
 800220c:	4413      	add	r3, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f009 ffce 	bl	800c1b0 <atoi>
 8002214:	6038      	str	r0, [r7, #0]
      switch (t) {
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	2b03      	cmp	r3, #3
 800221a:	d828      	bhi.n	800226e <schedule_20hz+0x222>
 800221c:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <schedule_20hz+0x1d8>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	08002235 	.word	0x08002235
 8002228:	08002243 	.word	0x08002243
 800222c:	08002251 	.word	0x08002251
 8002230:	0800225f 	.word	0x0800225f
      case 0: drift.lf = dx;drift.v1 = dy; break;
 8002234:	4a2c      	ldr	r2, [pc, #176]	; (80022e8 <schedule_20hz+0x29c>)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4a2b      	ldr	r2, [pc, #172]	; (80022e8 <schedule_20hz+0x29c>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6113      	str	r3, [r2, #16]
 8002240:	e015      	b.n	800226e <schedule_20hz+0x222>
      case 1: drift.rf = dx;drift.v2 = dy; break;
 8002242:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <schedule_20hz+0x29c>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6053      	str	r3, [r2, #4]
 8002248:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <schedule_20hz+0x29c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6153      	str	r3, [r2, #20]
 800224e:	e00e      	b.n	800226e <schedule_20hz+0x222>
      case 2: drift.rb = dx;drift.v3 = dy; break;
 8002250:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <schedule_20hz+0x29c>)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	60d3      	str	r3, [r2, #12]
 8002256:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <schedule_20hz+0x29c>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	e007      	b.n	800226e <schedule_20hz+0x222>
      case 3: drift.lb = dx;drift.v4 = dy; break;
 800225e:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <schedule_20hz+0x29c>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6093      	str	r3, [r2, #8]
 8002264:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <schedule_20hz+0x29c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	61d3      	str	r3, [r2, #28]
 800226a:	e000      	b.n	800226e <schedule_20hz+0x222>
      }
    }
 800226c:	bf00      	nop
  for (int t = 0; t < 4; t += 1) {
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	3301      	adds	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	2b03      	cmp	r3, #3
 8002278:	f77f aeee 	ble.w	8002058 <schedule_20hz+0xc>
  }

  memset(monitor, 0, 64);
 800227c:	2240      	movs	r2, #64	; 0x40
 800227e:	2100      	movs	r1, #0
 8002280:	481a      	ldr	r0, [pc, #104]	; (80022ec <schedule_20hz+0x2a0>)
 8002282:	f009 ffd1 	bl	800c228 <memset>
  sprintf(monitor, "%d,%d,%d,%d,%d\n",
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <schedule_20hz+0x29c>)
 8002288:	681c      	ldr	r4, [r3, #0]
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <schedule_20hz+0x29c>)
 800228c:	685d      	ldr	r5, [r3, #4]
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <schedule_20hz+0x29c>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <schedule_20hz+0x29c>)
 8002294:	68d2      	ldr	r2, [r2, #12]
      drift.lf, drift.rf, drift.lb, drift.rb,
      drift.v1 + drift.v2 + drift.v3 + drift.v4);
 8002296:	4914      	ldr	r1, [pc, #80]	; (80022e8 <schedule_20hz+0x29c>)
 8002298:	6908      	ldr	r0, [r1, #16]
 800229a:	4913      	ldr	r1, [pc, #76]	; (80022e8 <schedule_20hz+0x29c>)
 800229c:	6949      	ldr	r1, [r1, #20]
 800229e:	4408      	add	r0, r1
 80022a0:	4911      	ldr	r1, [pc, #68]	; (80022e8 <schedule_20hz+0x29c>)
 80022a2:	6989      	ldr	r1, [r1, #24]
 80022a4:	4408      	add	r0, r1
 80022a6:	4910      	ldr	r1, [pc, #64]	; (80022e8 <schedule_20hz+0x29c>)
 80022a8:	69c9      	ldr	r1, [r1, #28]
  sprintf(monitor, "%d,%d,%d,%d,%d\n",
 80022aa:	4401      	add	r1, r0
 80022ac:	9102      	str	r1, [sp, #8]
 80022ae:	9201      	str	r2, [sp, #4]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	462b      	mov	r3, r5
 80022b4:	4622      	mov	r2, r4
 80022b6:	490e      	ldr	r1, [pc, #56]	; (80022f0 <schedule_20hz+0x2a4>)
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <schedule_20hz+0x2a0>)
 80022ba:	f009 ffbd 	bl	800c238 <siprintf>
  console(monitor);
 80022be:	480b      	ldr	r0, [pc, #44]	; (80022ec <schedule_20hz+0x2a0>)
 80022c0:	f000 f818 	bl	80022f4 <console>
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	; 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bdb0      	pop	{r4, r5, r7, pc}
 80022cc:	24000000 	.word	0x24000000
 80022d0:	24001048 	.word	0x24001048
 80022d4:	24001148 	.word	0x24001148
 80022d8:	24001248 	.word	0x24001248
 80022dc:	24001348 	.word	0x24001348
 80022e0:	24001448 	.word	0x24001448
 80022e4:	24001449 	.word	0x24001449
 80022e8:	240007a4 	.word	0x240007a4
 80022ec:	240007c4 	.word	0x240007c4
 80022f0:	0800cc28 	.word	0x0800cc28

080022f4 <console>:
      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
      break;
  }
}

void console(const char *str) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7fd ffef 	bl	80002e0 <strlen>
 8002302:	4603      	mov	r3, r0
 8002304:	b29b      	uxth	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4803      	ldr	r0, [pc, #12]	; (8002318 <console+0x24>)
 800230c:	f007 fe2a 	bl	8009f64 <HAL_UART_Transmit_IT>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	240004a8 	.word	0x240004a8

0800231c <init_filters>:
  TIM2->CCR2 = m2;
  TIM2->CCR3 = m3;
  TIM2->CCR4 = m4;
}

void init_filters() {
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  average_filter_init(&g_af[0], 5); // Thrust
 8002320:	2105      	movs	r1, #5
 8002322:	480a      	ldr	r0, [pc, #40]	; (800234c <init_filters+0x30>)
 8002324:	f7fe f9b6 	bl	8000694 <average_filter_init>
  average_filter_init(&g_af[1], 5); // Yaw
 8002328:	2105      	movs	r1, #5
 800232a:	4809      	ldr	r0, [pc, #36]	; (8002350 <init_filters+0x34>)
 800232c:	f7fe f9b2 	bl	8000694 <average_filter_init>
  average_filter_init(&g_af[2], 5); // Pitch
 8002330:	2105      	movs	r1, #5
 8002332:	4808      	ldr	r0, [pc, #32]	; (8002354 <init_filters+0x38>)
 8002334:	f7fe f9ae 	bl	8000694 <average_filter_init>
  average_filter_init(&g_af[3], 5); // Roll
 8002338:	2105      	movs	r1, #5
 800233a:	4807      	ldr	r0, [pc, #28]	; (8002358 <init_filters+0x3c>)
 800233c:	f7fe f9aa 	bl	8000694 <average_filter_init>
  average_filter_init(&g_af[4], 5); // Stick 1
 8002340:	2105      	movs	r1, #5
 8002342:	4806      	ldr	r0, [pc, #24]	; (800235c <init_filters+0x40>)
 8002344:	f7fe f9a6 	bl	8000694 <average_filter_init>
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2400083c 	.word	0x2400083c
 8002350:	240009d8 	.word	0x240009d8
 8002354:	24000b74 	.word	0x24000b74
 8002358:	24000d10 	.word	0x24000d10
 800235c:	24000eac 	.word	0x24000eac

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <_sbrk+0x5c>)
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <_sbrk+0x60>)
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <_sbrk+0x64>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <_sbrk+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002390:	f009 ff12 	bl	800c1b8 <__errno>
 8002394:	4603      	mov	r3, r0
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239e:	e009      	b.n	80023b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <_sbrk+0x64>)
 80023b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	24080000 	.word	0x24080000
 80023c0:	00000400 	.word	0x00000400
 80023c4:	24001458 	.word	0x24001458
 80023c8:	24001470 	.word	0x24001470

080023cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023d0:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <SystemInit+0xec>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	4a38      	ldr	r2, [pc, #224]	; (80024b8 <SystemInit+0xec>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <SystemInit+0xf0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	2b06      	cmp	r3, #6
 80023ea:	d807      	bhi.n	80023fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023ec:	4b33      	ldr	r3, [pc, #204]	; (80024bc <SystemInit+0xf0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 030f 	bic.w	r3, r3, #15
 80023f4:	4a31      	ldr	r2, [pc, #196]	; (80024bc <SystemInit+0xf0>)
 80023f6:	f043 0307 	orr.w	r3, r3, #7
 80023fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <SystemInit+0xf4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <SystemInit+0xf4>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002408:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <SystemInit+0xf4>)
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800240e:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <SystemInit+0xf4>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	492b      	ldr	r1, [pc, #172]	; (80024c0 <SystemInit+0xf4>)
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <SystemInit+0xf8>)
 8002416:	4013      	ands	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <SystemInit+0xf0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <SystemInit+0xf0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 030f 	bic.w	r3, r3, #15
 800242e:	4a23      	ldr	r2, [pc, #140]	; (80024bc <SystemInit+0xf0>)
 8002430:	f043 0307 	orr.w	r3, r3, #7
 8002434:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <SystemInit+0xf4>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <SystemInit+0xf4>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <SystemInit+0xf4>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <SystemInit+0xf4>)
 800244a:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <SystemInit+0xfc>)
 800244c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <SystemInit+0xf4>)
 8002450:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <SystemInit+0x100>)
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <SystemInit+0xf4>)
 8002456:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <SystemInit+0x104>)
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <SystemInit+0xf4>)
 800245c:	2200      	movs	r2, #0
 800245e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <SystemInit+0xf4>)
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <SystemInit+0x104>)
 8002464:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <SystemInit+0xf4>)
 8002468:	2200      	movs	r2, #0
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <SystemInit+0xf4>)
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <SystemInit+0x104>)
 8002470:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <SystemInit+0xf4>)
 8002474:	2200      	movs	r2, #0
 8002476:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <SystemInit+0xf4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <SystemInit+0xf4>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002482:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <SystemInit+0xf4>)
 8002486:	2200      	movs	r2, #0
 8002488:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <SystemInit+0x108>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <SystemInit+0x10c>)
 8002490:	4013      	ands	r3, r2
 8002492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002496:	d202      	bcs.n	800249e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <SystemInit+0x110>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <SystemInit+0x114>)
 80024a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80024a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SystemInit+0xec>)
 80024a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00
 80024bc:	52002000 	.word	0x52002000
 80024c0:	58024400 	.word	0x58024400
 80024c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80024c8:	02020200 	.word	0x02020200
 80024cc:	01ff0000 	.word	0x01ff0000
 80024d0:	01010280 	.word	0x01010280
 80024d4:	5c001000 	.word	0x5c001000
 80024d8:	ffff0000 	.word	0xffff0000
 80024dc:	51008108 	.word	0x51008108
 80024e0:	52004000 	.word	0x52004000

080024e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800251c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024e8:	f7ff ff70 	bl	80023cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024ee:	e003      	b.n	80024f8 <LoopCopyDataInit>

080024f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80024f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024f6:	3104      	adds	r1, #4

080024f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024f8:	480a      	ldr	r0, [pc, #40]	; (8002524 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80024fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002500:	d3f6      	bcc.n	80024f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002504:	e002      	b.n	800250c <LoopFillZerobss>

08002506 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002506:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002508:	f842 3b04 	str.w	r3, [r2], #4

0800250c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800250e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002510:	d3f9      	bcc.n	8002506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002512:	f009 fe57 	bl	800c1c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002516:	f7fe f94d 	bl	80007b4 <main>
  bx  lr    
 800251a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800251c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002520:	0800cdbc 	.word	0x0800cdbc
  ldr  r0, =_sdata
 8002524:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002528:	24000084 	.word	0x24000084
  ldr  r2, =_sbss
 800252c:	24000084 	.word	0x24000084
  ldr  r3, = _ebss
 8002530:	24001470 	.word	0x24001470

08002534 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC3_IRQHandler>
	...

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253e:	2003      	movs	r0, #3
 8002540:	f000 f98c 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002544:	f004 f948 	bl	80067d8 <HAL_RCC_GetSysClockFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_Init+0x68>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	4913      	ldr	r1, [pc, #76]	; (80025a4 <HAL_Init+0x6c>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
 8002560:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <HAL_Init+0x68>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <HAL_Init+0x6c>)
 800256c:	5cd3      	ldrb	r3, [r2, r3]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <HAL_Init+0x70>)
 800257a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <HAL_Init+0x74>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002582:	2000      	movs	r0, #0
 8002584:	f000 f814 	bl	80025b0 <HAL_InitTick>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e002      	b.n	8002598 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002592:	f7fe fe91 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	58024400 	.word	0x58024400
 80025a4:	0800cc38 	.word	0x0800cc38
 80025a8:	24000014 	.word	0x24000014
 80025ac:	24000010 	.word	0x24000010

080025b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_InitTick+0x60>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e021      	b.n	8002608 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <HAL_InitTick+0x64>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_InitTick+0x60>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f971 	bl	80028c2 <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f8:	f000 f93b 	bl	8002872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <HAL_InitTick+0x68>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	2400001c 	.word	0x2400001c
 8002614:	24000010 	.word	0x24000010
 8002618:	24000018 	.word	0x24000018

0800261c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_IncTick+0x20>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_IncTick+0x24>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	2400001c 	.word	0x2400001c
 8002640:	2400145c 	.word	0x2400145c

08002644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	2400145c 	.word	0x2400145c

0800265c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff ffee 	bl	8002644 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002674:	d005      	beq.n	8002682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_Delay+0x44>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002682:	bf00      	nop
 8002684:	f7ff ffde 	bl	8002644 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d8f7      	bhi.n	8002684 <HAL_Delay+0x28>
  {
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2400001c 	.word	0x2400001c

080026a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_GetREVID+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0c1b      	lsrs	r3, r3, #16
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	5c001000 	.word	0x5c001000

080026bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <__NVIC_SetPriorityGrouping+0x40>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <__NVIC_SetPriorityGrouping+0x40>)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	60d3      	str	r3, [r2, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00
 8002700:	05fa0000 	.word	0x05fa0000

08002704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4907      	ldr	r1, [pc, #28]	; (8002758 <__NVIC_EnableIRQ+0x38>)
 800273a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e100 	.word	0xe000e100

0800275c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
         );
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800283c:	f7ff ff8e 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff29 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002880:	f7ff ff40 	bl	8002704 <__NVIC_GetPriorityGrouping>
 8002884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f7ff ff90 	bl	80027b0 <NVIC_EncodePriority>
 8002890:	4602      	mov	r2, r0
 8002892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff5f 	bl	800275c <__NVIC_SetPriority>
}
 800289e:	bf00      	nop
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff33 	bl	8002720 <__NVIC_EnableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffa4 	bl	8002818 <SysTick_Config>
 80028d0:	4603      	mov	r3, r0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff feae 	bl	8002644 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e316      	b.n	8002f22 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a66      	ldr	r2, [pc, #408]	; (8002a94 <HAL_DMA_Init+0x1b8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d04a      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a65      	ldr	r2, [pc, #404]	; (8002a98 <HAL_DMA_Init+0x1bc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d045      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a63      	ldr	r2, [pc, #396]	; (8002a9c <HAL_DMA_Init+0x1c0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d040      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a62      	ldr	r2, [pc, #392]	; (8002aa0 <HAL_DMA_Init+0x1c4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d03b      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a60      	ldr	r2, [pc, #384]	; (8002aa4 <HAL_DMA_Init+0x1c8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d036      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5f      	ldr	r2, [pc, #380]	; (8002aa8 <HAL_DMA_Init+0x1cc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d031      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5d      	ldr	r2, [pc, #372]	; (8002aac <HAL_DMA_Init+0x1d0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d02c      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5c      	ldr	r2, [pc, #368]	; (8002ab0 <HAL_DMA_Init+0x1d4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d027      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5a      	ldr	r2, [pc, #360]	; (8002ab4 <HAL_DMA_Init+0x1d8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d022      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a59      	ldr	r2, [pc, #356]	; (8002ab8 <HAL_DMA_Init+0x1dc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d01d      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a57      	ldr	r2, [pc, #348]	; (8002abc <HAL_DMA_Init+0x1e0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d018      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <HAL_DMA_Init+0x1e4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_DMA_Init+0x1e8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00e      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a53      	ldr	r2, [pc, #332]	; (8002ac8 <HAL_DMA_Init+0x1ec>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a51      	ldr	r2, [pc, #324]	; (8002acc <HAL_DMA_Init+0x1f0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_DMA_Init+0xb8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <HAL_DMA_Init+0x1f4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Init+0xbc>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_DMA_Init+0xbe>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 813b 	beq.w	8002c16 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a37      	ldr	r2, [pc, #220]	; (8002a94 <HAL_DMA_Init+0x1b8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d04a      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a36      	ldr	r2, [pc, #216]	; (8002a98 <HAL_DMA_Init+0x1bc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d045      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <HAL_DMA_Init+0x1c0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d040      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_DMA_Init+0x1c4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d03b      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a31      	ldr	r2, [pc, #196]	; (8002aa4 <HAL_DMA_Init+0x1c8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d036      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a30      	ldr	r2, [pc, #192]	; (8002aa8 <HAL_DMA_Init+0x1cc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d031      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2e      	ldr	r2, [pc, #184]	; (8002aac <HAL_DMA_Init+0x1d0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02c      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2d      	ldr	r2, [pc, #180]	; (8002ab0 <HAL_DMA_Init+0x1d4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d027      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a2b      	ldr	r2, [pc, #172]	; (8002ab4 <HAL_DMA_Init+0x1d8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d022      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	; (8002ab8 <HAL_DMA_Init+0x1dc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d01d      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a28      	ldr	r2, [pc, #160]	; (8002abc <HAL_DMA_Init+0x1e0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d018      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <HAL_DMA_Init+0x1e4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d013      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <HAL_DMA_Init+0x1e8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00e      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a24      	ldr	r2, [pc, #144]	; (8002ac8 <HAL_DMA_Init+0x1ec>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d009      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a22      	ldr	r2, [pc, #136]	; (8002acc <HAL_DMA_Init+0x1f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_DMA_Init+0x174>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a21      	ldr	r2, [pc, #132]	; (8002ad0 <HAL_DMA_Init+0x1f4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d108      	bne.n	8002a62 <HAL_DMA_Init+0x186>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e007      	b.n	8002a72 <HAL_DMA_Init+0x196>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a72:	e02f      	b.n	8002ad4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a74:	f7ff fde6 	bl	8002644 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d928      	bls.n	8002ad4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e246      	b.n	8002f22 <HAL_DMA_Init+0x646>
 8002a94:	40020010 	.word	0x40020010
 8002a98:	40020028 	.word	0x40020028
 8002a9c:	40020040 	.word	0x40020040
 8002aa0:	40020058 	.word	0x40020058
 8002aa4:	40020070 	.word	0x40020070
 8002aa8:	40020088 	.word	0x40020088
 8002aac:	400200a0 	.word	0x400200a0
 8002ab0:	400200b8 	.word	0x400200b8
 8002ab4:	40020410 	.word	0x40020410
 8002ab8:	40020428 	.word	0x40020428
 8002abc:	40020440 	.word	0x40020440
 8002ac0:	40020458 	.word	0x40020458
 8002ac4:	40020470 	.word	0x40020470
 8002ac8:	40020488 	.word	0x40020488
 8002acc:	400204a0 	.word	0x400204a0
 8002ad0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1c8      	bne.n	8002a74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_DMA_Init+0x420>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002afa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	4313      	orrs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b38:	4b71      	ldr	r3, [pc, #452]	; (8002d00 <HAL_DMA_Init+0x424>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b71      	ldr	r3, [pc, #452]	; (8002d04 <HAL_DMA_Init+0x428>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b44:	d328      	bcc.n	8002b98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b28      	cmp	r3, #40	; 0x28
 8002b4c:	d903      	bls.n	8002b56 <HAL_DMA_Init+0x27a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b2e      	cmp	r3, #46	; 0x2e
 8002b54:	d917      	bls.n	8002b86 <HAL_DMA_Init+0x2aa>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b5c:	d903      	bls.n	8002b66 <HAL_DMA_Init+0x28a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b42      	cmp	r3, #66	; 0x42
 8002b64:	d90f      	bls.n	8002b86 <HAL_DMA_Init+0x2aa>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b46      	cmp	r3, #70	; 0x46
 8002b6c:	d903      	bls.n	8002b76 <HAL_DMA_Init+0x29a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b48      	cmp	r3, #72	; 0x48
 8002b74:	d907      	bls.n	8002b86 <HAL_DMA_Init+0x2aa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b4e      	cmp	r3, #78	; 0x4e
 8002b7c:	d905      	bls.n	8002b8a <HAL_DMA_Init+0x2ae>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b52      	cmp	r3, #82	; 0x52
 8002b84:	d801      	bhi.n	8002b8a <HAL_DMA_Init+0x2ae>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_DMA_Init+0x2b0>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0307 	bic.w	r3, r3, #7
 8002bae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d117      	bne.n	8002bf2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f002 fb33 	bl	8005240 <DMA_CheckFifoParam>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2240      	movs	r2, #64	; 0x40
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e197      	b.n	8002f22 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f002 fa6e 	bl	80050dc <DMA_CalcBaseAndBitshift>
 8002c00:	4603      	mov	r3, r0
 8002c02:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	223f      	movs	r2, #63	; 0x3f
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	e0cd      	b.n	8002db2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a3b      	ldr	r2, [pc, #236]	; (8002d08 <HAL_DMA_Init+0x42c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d022      	beq.n	8002c66 <HAL_DMA_Init+0x38a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a39      	ldr	r2, [pc, #228]	; (8002d0c <HAL_DMA_Init+0x430>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01d      	beq.n	8002c66 <HAL_DMA_Init+0x38a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a38      	ldr	r2, [pc, #224]	; (8002d10 <HAL_DMA_Init+0x434>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d018      	beq.n	8002c66 <HAL_DMA_Init+0x38a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a36      	ldr	r2, [pc, #216]	; (8002d14 <HAL_DMA_Init+0x438>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_DMA_Init+0x38a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a35      	ldr	r2, [pc, #212]	; (8002d18 <HAL_DMA_Init+0x43c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_DMA_Init+0x38a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a33      	ldr	r2, [pc, #204]	; (8002d1c <HAL_DMA_Init+0x440>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_DMA_Init+0x38a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a32      	ldr	r2, [pc, #200]	; (8002d20 <HAL_DMA_Init+0x444>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_DMA_Init+0x38a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a30      	ldr	r2, [pc, #192]	; (8002d24 <HAL_DMA_Init+0x448>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA_Init+0x38e>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_DMA_Init+0x390>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8097 	beq.w	8002da0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <HAL_DMA_Init+0x42c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d021      	beq.n	8002cc0 <HAL_DMA_Init+0x3e4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <HAL_DMA_Init+0x430>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d01c      	beq.n	8002cc0 <HAL_DMA_Init+0x3e4>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a21      	ldr	r2, [pc, #132]	; (8002d10 <HAL_DMA_Init+0x434>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d017      	beq.n	8002cc0 <HAL_DMA_Init+0x3e4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <HAL_DMA_Init+0x438>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d012      	beq.n	8002cc0 <HAL_DMA_Init+0x3e4>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <HAL_DMA_Init+0x43c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_DMA_Init+0x3e4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <HAL_DMA_Init+0x440>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d008      	beq.n	8002cc0 <HAL_DMA_Init+0x3e4>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_DMA_Init+0x444>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <HAL_DMA_Init+0x3e4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_DMA_Init+0x448>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_DMA_Init+0x44c>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d020      	beq.n	8002d2c <HAL_DMA_Init+0x450>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d102      	bne.n	8002cf8 <HAL_DMA_Init+0x41c>
 8002cf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cf6:	e01a      	b.n	8002d2e <HAL_DMA_Init+0x452>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e018      	b.n	8002d2e <HAL_DMA_Init+0x452>
 8002cfc:	fe10803f 	.word	0xfe10803f
 8002d00:	5c001000 	.word	0x5c001000
 8002d04:	ffff0000 	.word	0xffff0000
 8002d08:	58025408 	.word	0x58025408
 8002d0c:	5802541c 	.word	0x5802541c
 8002d10:	58025430 	.word	0x58025430
 8002d14:	58025444 	.word	0x58025444
 8002d18:	58025458 	.word	0x58025458
 8002d1c:	5802546c 	.word	0x5802546c
 8002d20:	58025480 	.word	0x58025480
 8002d24:	58025494 	.word	0x58025494
 8002d28:	fffe000f 	.word	0xfffe000f
 8002d2c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68d2      	ldr	r2, [r2, #12]
 8002d32:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d5c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b6e      	ldr	r3, [pc, #440]	; (8002f2c <HAL_DMA_Init+0x650>)
 8002d74:	4413      	add	r3, r2
 8002d76:	4a6e      	ldr	r2, [pc, #440]	; (8002f30 <HAL_DMA_Init+0x654>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	009a      	lsls	r2, r3, #2
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f002 f9a9 	bl	80050dc <DMA_CalcBaseAndBitshift>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2201      	movs	r2, #1
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	e008      	b.n	8002db2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2203      	movs	r2, #3
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0b7      	b.n	8002f22 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5f      	ldr	r2, [pc, #380]	; (8002f34 <HAL_DMA_Init+0x658>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d072      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a5d      	ldr	r2, [pc, #372]	; (8002f38 <HAL_DMA_Init+0x65c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d06d      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a5c      	ldr	r2, [pc, #368]	; (8002f3c <HAL_DMA_Init+0x660>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d068      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5a      	ldr	r2, [pc, #360]	; (8002f40 <HAL_DMA_Init+0x664>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d063      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a59      	ldr	r2, [pc, #356]	; (8002f44 <HAL_DMA_Init+0x668>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d05e      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_DMA_Init+0x66c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d059      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a56      	ldr	r2, [pc, #344]	; (8002f4c <HAL_DMA_Init+0x670>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d054      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a54      	ldr	r2, [pc, #336]	; (8002f50 <HAL_DMA_Init+0x674>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d04f      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a53      	ldr	r2, [pc, #332]	; (8002f54 <HAL_DMA_Init+0x678>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04a      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a51      	ldr	r2, [pc, #324]	; (8002f58 <HAL_DMA_Init+0x67c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d045      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <HAL_DMA_Init+0x680>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d040      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a4e      	ldr	r2, [pc, #312]	; (8002f60 <HAL_DMA_Init+0x684>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d03b      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a4d      	ldr	r2, [pc, #308]	; (8002f64 <HAL_DMA_Init+0x688>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d036      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a4b      	ldr	r2, [pc, #300]	; (8002f68 <HAL_DMA_Init+0x68c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a4a      	ldr	r2, [pc, #296]	; (8002f6c <HAL_DMA_Init+0x690>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d02c      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a48      	ldr	r2, [pc, #288]	; (8002f70 <HAL_DMA_Init+0x694>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d027      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <HAL_DMA_Init+0x698>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a45      	ldr	r2, [pc, #276]	; (8002f78 <HAL_DMA_Init+0x69c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a44      	ldr	r2, [pc, #272]	; (8002f7c <HAL_DMA_Init+0x6a0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d018      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a42      	ldr	r2, [pc, #264]	; (8002f80 <HAL_DMA_Init+0x6a4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a41      	ldr	r2, [pc, #260]	; (8002f84 <HAL_DMA_Init+0x6a8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3f      	ldr	r2, [pc, #252]	; (8002f88 <HAL_DMA_Init+0x6ac>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3e      	ldr	r2, [pc, #248]	; (8002f8c <HAL_DMA_Init+0x6b0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_Init+0x5c6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a3c      	ldr	r2, [pc, #240]	; (8002f90 <HAL_DMA_Init+0x6b4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DMA_Init+0x5ca>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_DMA_Init+0x5cc>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d032      	beq.n	8002f12 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f002 fa43 	bl	8005338 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b80      	cmp	r3, #128	; 0x80
 8002eb8:	d102      	bne.n	8002ec0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ed4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_DMA_Init+0x624>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d80c      	bhi.n	8002f00 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f002 fac0 	bl	800546c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e008      	b.n	8002f12 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	a7fdabf8 	.word	0xa7fdabf8
 8002f30:	cccccccd 	.word	0xcccccccd
 8002f34:	40020010 	.word	0x40020010
 8002f38:	40020028 	.word	0x40020028
 8002f3c:	40020040 	.word	0x40020040
 8002f40:	40020058 	.word	0x40020058
 8002f44:	40020070 	.word	0x40020070
 8002f48:	40020088 	.word	0x40020088
 8002f4c:	400200a0 	.word	0x400200a0
 8002f50:	400200b8 	.word	0x400200b8
 8002f54:	40020410 	.word	0x40020410
 8002f58:	40020428 	.word	0x40020428
 8002f5c:	40020440 	.word	0x40020440
 8002f60:	40020458 	.word	0x40020458
 8002f64:	40020470 	.word	0x40020470
 8002f68:	40020488 	.word	0x40020488
 8002f6c:	400204a0 	.word	0x400204a0
 8002f70:	400204b8 	.word	0x400204b8
 8002f74:	58025408 	.word	0x58025408
 8002f78:	5802541c 	.word	0x5802541c
 8002f7c:	58025430 	.word	0x58025430
 8002f80:	58025444 	.word	0x58025444
 8002f84:	58025458 	.word	0x58025458
 8002f88:	5802546c 	.word	0x5802546c
 8002f8c:	58025480 	.word	0x58025480
 8002f90:	58025494 	.word	0x58025494

08002f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e226      	b.n	80033fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_DMA_Start_IT+0x2a>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e21f      	b.n	80033fe <HAL_DMA_Start_IT+0x46a>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 820a 	bne.w	80033e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a68      	ldr	r2, [pc, #416]	; (8003188 <HAL_DMA_Start_IT+0x1f4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d04a      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a66      	ldr	r2, [pc, #408]	; (800318c <HAL_DMA_Start_IT+0x1f8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d045      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a65      	ldr	r2, [pc, #404]	; (8003190 <HAL_DMA_Start_IT+0x1fc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d040      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a63      	ldr	r2, [pc, #396]	; (8003194 <HAL_DMA_Start_IT+0x200>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d03b      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a62      	ldr	r2, [pc, #392]	; (8003198 <HAL_DMA_Start_IT+0x204>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d036      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a60      	ldr	r2, [pc, #384]	; (800319c <HAL_DMA_Start_IT+0x208>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d031      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5f      	ldr	r2, [pc, #380]	; (80031a0 <HAL_DMA_Start_IT+0x20c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d02c      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <HAL_DMA_Start_IT+0x210>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d027      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_DMA_Start_IT+0x214>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5a      	ldr	r2, [pc, #360]	; (80031ac <HAL_DMA_Start_IT+0x218>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01d      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a59      	ldr	r2, [pc, #356]	; (80031b0 <HAL_DMA_Start_IT+0x21c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d018      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_DMA_Start_IT+0x220>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_DMA_Start_IT+0x224>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00e      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_DMA_Start_IT+0x228>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d009      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a53      	ldr	r2, [pc, #332]	; (80031c0 <HAL_DMA_Start_IT+0x22c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d004      	beq.n	8003082 <HAL_DMA_Start_IT+0xee>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a51      	ldr	r2, [pc, #324]	; (80031c4 <HAL_DMA_Start_IT+0x230>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d108      	bne.n	8003094 <HAL_DMA_Start_IT+0x100>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e007      	b.n	80030a4 <HAL_DMA_Start_IT+0x110>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f001 fe6a 	bl	8004d84 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a34      	ldr	r2, [pc, #208]	; (8003188 <HAL_DMA_Start_IT+0x1f4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d04a      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a33      	ldr	r2, [pc, #204]	; (800318c <HAL_DMA_Start_IT+0x1f8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d045      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a31      	ldr	r2, [pc, #196]	; (8003190 <HAL_DMA_Start_IT+0x1fc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d040      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a30      	ldr	r2, [pc, #192]	; (8003194 <HAL_DMA_Start_IT+0x200>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d03b      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2e      	ldr	r2, [pc, #184]	; (8003198 <HAL_DMA_Start_IT+0x204>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d036      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2d      	ldr	r2, [pc, #180]	; (800319c <HAL_DMA_Start_IT+0x208>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d031      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <HAL_DMA_Start_IT+0x20c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d02c      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <HAL_DMA_Start_IT+0x210>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d027      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a28      	ldr	r2, [pc, #160]	; (80031a8 <HAL_DMA_Start_IT+0x214>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d022      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a27      	ldr	r2, [pc, #156]	; (80031ac <HAL_DMA_Start_IT+0x218>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d01d      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <HAL_DMA_Start_IT+0x21c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d018      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <HAL_DMA_Start_IT+0x220>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d013      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <HAL_DMA_Start_IT+0x224>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00e      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a21      	ldr	r2, [pc, #132]	; (80031bc <HAL_DMA_Start_IT+0x228>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_DMA_Start_IT+0x22c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_DMA_Start_IT+0x1bc>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <HAL_DMA_Start_IT+0x230>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_DMA_Start_IT+0x1c0>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_DMA_Start_IT+0x1c2>
 8003154:	2300      	movs	r3, #0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d036      	beq.n	80031c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 021e 	bic.w	r2, r3, #30
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0216 	orr.w	r2, r2, #22
 800316c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03e      	beq.n	80031f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0208 	orr.w	r2, r2, #8
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e035      	b.n	80031f4 <HAL_DMA_Start_IT+0x260>
 8003188:	40020010 	.word	0x40020010
 800318c:	40020028 	.word	0x40020028
 8003190:	40020040 	.word	0x40020040
 8003194:	40020058 	.word	0x40020058
 8003198:	40020070 	.word	0x40020070
 800319c:	40020088 	.word	0x40020088
 80031a0:	400200a0 	.word	0x400200a0
 80031a4:	400200b8 	.word	0x400200b8
 80031a8:	40020410 	.word	0x40020410
 80031ac:	40020428 	.word	0x40020428
 80031b0:	40020440 	.word	0x40020440
 80031b4:	40020458 	.word	0x40020458
 80031b8:	40020470 	.word	0x40020470
 80031bc:	40020488 	.word	0x40020488
 80031c0:	400204a0 	.word	0x400204a0
 80031c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 020e 	bic.w	r2, r3, #14
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 020a 	orr.w	r2, r2, #10
 80031da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0204 	orr.w	r2, r2, #4
 80031f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a83      	ldr	r2, [pc, #524]	; (8003408 <HAL_DMA_Start_IT+0x474>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d072      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a82      	ldr	r2, [pc, #520]	; (800340c <HAL_DMA_Start_IT+0x478>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d06d      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a80      	ldr	r2, [pc, #512]	; (8003410 <HAL_DMA_Start_IT+0x47c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d068      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7f      	ldr	r2, [pc, #508]	; (8003414 <HAL_DMA_Start_IT+0x480>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d063      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a7d      	ldr	r2, [pc, #500]	; (8003418 <HAL_DMA_Start_IT+0x484>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d05e      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7c      	ldr	r2, [pc, #496]	; (800341c <HAL_DMA_Start_IT+0x488>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d059      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a7a      	ldr	r2, [pc, #488]	; (8003420 <HAL_DMA_Start_IT+0x48c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d054      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a79      	ldr	r2, [pc, #484]	; (8003424 <HAL_DMA_Start_IT+0x490>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04f      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a77      	ldr	r2, [pc, #476]	; (8003428 <HAL_DMA_Start_IT+0x494>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d04a      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a76      	ldr	r2, [pc, #472]	; (800342c <HAL_DMA_Start_IT+0x498>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d045      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a74      	ldr	r2, [pc, #464]	; (8003430 <HAL_DMA_Start_IT+0x49c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d040      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a73      	ldr	r2, [pc, #460]	; (8003434 <HAL_DMA_Start_IT+0x4a0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d03b      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a71      	ldr	r2, [pc, #452]	; (8003438 <HAL_DMA_Start_IT+0x4a4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d036      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a70      	ldr	r2, [pc, #448]	; (800343c <HAL_DMA_Start_IT+0x4a8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d031      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6e      	ldr	r2, [pc, #440]	; (8003440 <HAL_DMA_Start_IT+0x4ac>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d02c      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6d      	ldr	r2, [pc, #436]	; (8003444 <HAL_DMA_Start_IT+0x4b0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d027      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6b      	ldr	r2, [pc, #428]	; (8003448 <HAL_DMA_Start_IT+0x4b4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d022      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6a      	ldr	r2, [pc, #424]	; (800344c <HAL_DMA_Start_IT+0x4b8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d01d      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a68      	ldr	r2, [pc, #416]	; (8003450 <HAL_DMA_Start_IT+0x4bc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d018      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a67      	ldr	r2, [pc, #412]	; (8003454 <HAL_DMA_Start_IT+0x4c0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d013      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a65      	ldr	r2, [pc, #404]	; (8003458 <HAL_DMA_Start_IT+0x4c4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00e      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a64      	ldr	r2, [pc, #400]	; (800345c <HAL_DMA_Start_IT+0x4c8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d009      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a62      	ldr	r2, [pc, #392]	; (8003460 <HAL_DMA_Start_IT+0x4cc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_DMA_Start_IT+0x350>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a61      	ldr	r2, [pc, #388]	; (8003464 <HAL_DMA_Start_IT+0x4d0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_DMA_Start_IT+0x354>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_DMA_Start_IT+0x356>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01a      	beq.n	8003324 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800330a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003322:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a37      	ldr	r2, [pc, #220]	; (8003408 <HAL_DMA_Start_IT+0x474>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d04a      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a36      	ldr	r2, [pc, #216]	; (800340c <HAL_DMA_Start_IT+0x478>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d045      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a34      	ldr	r2, [pc, #208]	; (8003410 <HAL_DMA_Start_IT+0x47c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d040      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a33      	ldr	r2, [pc, #204]	; (8003414 <HAL_DMA_Start_IT+0x480>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d03b      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a31      	ldr	r2, [pc, #196]	; (8003418 <HAL_DMA_Start_IT+0x484>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d036      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a30      	ldr	r2, [pc, #192]	; (800341c <HAL_DMA_Start_IT+0x488>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d031      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a2e      	ldr	r2, [pc, #184]	; (8003420 <HAL_DMA_Start_IT+0x48c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02c      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <HAL_DMA_Start_IT+0x490>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d027      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <HAL_DMA_Start_IT+0x494>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d022      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2a      	ldr	r2, [pc, #168]	; (800342c <HAL_DMA_Start_IT+0x498>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d01d      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a28      	ldr	r2, [pc, #160]	; (8003430 <HAL_DMA_Start_IT+0x49c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d018      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a27      	ldr	r2, [pc, #156]	; (8003434 <HAL_DMA_Start_IT+0x4a0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a25      	ldr	r2, [pc, #148]	; (8003438 <HAL_DMA_Start_IT+0x4a4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00e      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a24      	ldr	r2, [pc, #144]	; (800343c <HAL_DMA_Start_IT+0x4a8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a22      	ldr	r2, [pc, #136]	; (8003440 <HAL_DMA_Start_IT+0x4ac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <HAL_DMA_Start_IT+0x430>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a21      	ldr	r2, [pc, #132]	; (8003444 <HAL_DMA_Start_IT+0x4b0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d108      	bne.n	80033d6 <HAL_DMA_Start_IT+0x442>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e012      	b.n	80033fc <HAL_DMA_Start_IT+0x468>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e009      	b.n	80033fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40020010 	.word	0x40020010
 800340c:	40020028 	.word	0x40020028
 8003410:	40020040 	.word	0x40020040
 8003414:	40020058 	.word	0x40020058
 8003418:	40020070 	.word	0x40020070
 800341c:	40020088 	.word	0x40020088
 8003420:	400200a0 	.word	0x400200a0
 8003424:	400200b8 	.word	0x400200b8
 8003428:	40020410 	.word	0x40020410
 800342c:	40020428 	.word	0x40020428
 8003430:	40020440 	.word	0x40020440
 8003434:	40020458 	.word	0x40020458
 8003438:	40020470 	.word	0x40020470
 800343c:	40020488 	.word	0x40020488
 8003440:	400204a0 	.word	0x400204a0
 8003444:	400204b8 	.word	0x400204b8
 8003448:	58025408 	.word	0x58025408
 800344c:	5802541c 	.word	0x5802541c
 8003450:	58025430 	.word	0x58025430
 8003454:	58025444 	.word	0x58025444
 8003458:	58025458 	.word	0x58025458
 800345c:	5802546c 	.word	0x5802546c
 8003460:	58025480 	.word	0x58025480
 8003464:	58025494 	.word	0x58025494

08003468 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff f8e8 	bl	8002644 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e2dc      	b.n	8003a3a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d008      	beq.n	800349e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e2cd      	b.n	8003a3a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a76      	ldr	r2, [pc, #472]	; (800367c <HAL_DMA_Abort+0x214>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d04a      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a74      	ldr	r2, [pc, #464]	; (8003680 <HAL_DMA_Abort+0x218>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d045      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a73      	ldr	r2, [pc, #460]	; (8003684 <HAL_DMA_Abort+0x21c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d040      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a71      	ldr	r2, [pc, #452]	; (8003688 <HAL_DMA_Abort+0x220>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d03b      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a70      	ldr	r2, [pc, #448]	; (800368c <HAL_DMA_Abort+0x224>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d036      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <HAL_DMA_Abort+0x228>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d031      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6d      	ldr	r2, [pc, #436]	; (8003694 <HAL_DMA_Abort+0x22c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d02c      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6b      	ldr	r2, [pc, #428]	; (8003698 <HAL_DMA_Abort+0x230>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d027      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6a      	ldr	r2, [pc, #424]	; (800369c <HAL_DMA_Abort+0x234>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a68      	ldr	r2, [pc, #416]	; (80036a0 <HAL_DMA_Abort+0x238>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01d      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a67      	ldr	r2, [pc, #412]	; (80036a4 <HAL_DMA_Abort+0x23c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d018      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_DMA_Abort+0x240>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a64      	ldr	r2, [pc, #400]	; (80036ac <HAL_DMA_Abort+0x244>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a62      	ldr	r2, [pc, #392]	; (80036b0 <HAL_DMA_Abort+0x248>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a61      	ldr	r2, [pc, #388]	; (80036b4 <HAL_DMA_Abort+0x24c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_DMA_Abort+0xd6>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5f      	ldr	r2, [pc, #380]	; (80036b8 <HAL_DMA_Abort+0x250>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_DMA_Abort+0xda>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_DMA_Abort+0xdc>
 8003542:	2300      	movs	r3, #0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 021e 	bic.w	r2, r2, #30
 8003556:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003566:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e00a      	b.n	8003586 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 020e 	bic.w	r2, r2, #14
 800357e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a3c      	ldr	r2, [pc, #240]	; (800367c <HAL_DMA_Abort+0x214>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d072      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3a      	ldr	r2, [pc, #232]	; (8003680 <HAL_DMA_Abort+0x218>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d06d      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a39      	ldr	r2, [pc, #228]	; (8003684 <HAL_DMA_Abort+0x21c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d068      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a37      	ldr	r2, [pc, #220]	; (8003688 <HAL_DMA_Abort+0x220>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d063      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a36      	ldr	r2, [pc, #216]	; (800368c <HAL_DMA_Abort+0x224>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d05e      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a34      	ldr	r2, [pc, #208]	; (8003690 <HAL_DMA_Abort+0x228>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d059      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a33      	ldr	r2, [pc, #204]	; (8003694 <HAL_DMA_Abort+0x22c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d054      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a31      	ldr	r2, [pc, #196]	; (8003698 <HAL_DMA_Abort+0x230>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d04f      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a30      	ldr	r2, [pc, #192]	; (800369c <HAL_DMA_Abort+0x234>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d04a      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2e      	ldr	r2, [pc, #184]	; (80036a0 <HAL_DMA_Abort+0x238>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d045      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2d      	ldr	r2, [pc, #180]	; (80036a4 <HAL_DMA_Abort+0x23c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d040      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <HAL_DMA_Abort+0x240>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d03b      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_DMA_Abort+0x244>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d036      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <HAL_DMA_Abort+0x248>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d031      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <HAL_DMA_Abort+0x24c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d02c      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a25      	ldr	r2, [pc, #148]	; (80036b8 <HAL_DMA_Abort+0x250>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d027      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a24      	ldr	r2, [pc, #144]	; (80036bc <HAL_DMA_Abort+0x254>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d022      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <HAL_DMA_Abort+0x258>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01d      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <HAL_DMA_Abort+0x25c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d018      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <HAL_DMA_Abort+0x260>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <HAL_DMA_Abort+0x264>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00e      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <HAL_DMA_Abort+0x268>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_DMA_Abort+0x26c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_DMA_Abort+0x20e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <HAL_DMA_Abort+0x270>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d132      	bne.n	80036dc <HAL_DMA_Abort+0x274>
 8003676:	2301      	movs	r3, #1
 8003678:	e031      	b.n	80036de <HAL_DMA_Abort+0x276>
 800367a:	bf00      	nop
 800367c:	40020010 	.word	0x40020010
 8003680:	40020028 	.word	0x40020028
 8003684:	40020040 	.word	0x40020040
 8003688:	40020058 	.word	0x40020058
 800368c:	40020070 	.word	0x40020070
 8003690:	40020088 	.word	0x40020088
 8003694:	400200a0 	.word	0x400200a0
 8003698:	400200b8 	.word	0x400200b8
 800369c:	40020410 	.word	0x40020410
 80036a0:	40020428 	.word	0x40020428
 80036a4:	40020440 	.word	0x40020440
 80036a8:	40020458 	.word	0x40020458
 80036ac:	40020470 	.word	0x40020470
 80036b0:	40020488 	.word	0x40020488
 80036b4:	400204a0 	.word	0x400204a0
 80036b8:	400204b8 	.word	0x400204b8
 80036bc:	58025408 	.word	0x58025408
 80036c0:	5802541c 	.word	0x5802541c
 80036c4:	58025430 	.word	0x58025430
 80036c8:	58025444 	.word	0x58025444
 80036cc:	58025458 	.word	0x58025458
 80036d0:	5802546c 	.word	0x5802546c
 80036d4:	58025480 	.word	0x58025480
 80036d8:	58025494 	.word	0x58025494
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a6d      	ldr	r2, [pc, #436]	; (80038ac <HAL_DMA_Abort+0x444>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d04a      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a6b      	ldr	r2, [pc, #428]	; (80038b0 <HAL_DMA_Abort+0x448>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d045      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6a      	ldr	r2, [pc, #424]	; (80038b4 <HAL_DMA_Abort+0x44c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d040      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a68      	ldr	r2, [pc, #416]	; (80038b8 <HAL_DMA_Abort+0x450>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d03b      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a67      	ldr	r2, [pc, #412]	; (80038bc <HAL_DMA_Abort+0x454>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d036      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a65      	ldr	r2, [pc, #404]	; (80038c0 <HAL_DMA_Abort+0x458>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d031      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a64      	ldr	r2, [pc, #400]	; (80038c4 <HAL_DMA_Abort+0x45c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d02c      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a62      	ldr	r2, [pc, #392]	; (80038c8 <HAL_DMA_Abort+0x460>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d027      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a61      	ldr	r2, [pc, #388]	; (80038cc <HAL_DMA_Abort+0x464>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a5f      	ldr	r2, [pc, #380]	; (80038d0 <HAL_DMA_Abort+0x468>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d01d      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a5e      	ldr	r2, [pc, #376]	; (80038d4 <HAL_DMA_Abort+0x46c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d018      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a5c      	ldr	r2, [pc, #368]	; (80038d8 <HAL_DMA_Abort+0x470>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a5b      	ldr	r2, [pc, #364]	; (80038dc <HAL_DMA_Abort+0x474>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a59      	ldr	r2, [pc, #356]	; (80038e0 <HAL_DMA_Abort+0x478>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_DMA_Abort+0x47c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_DMA_Abort+0x32a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a56      	ldr	r2, [pc, #344]	; (80038e8 <HAL_DMA_Abort+0x480>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <HAL_DMA_Abort+0x33c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e007      	b.n	80037b4 <HAL_DMA_Abort+0x34c>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037b4:	e013      	b.n	80037de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037b6:	f7fe ff45 	bl	8002644 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d90c      	bls.n	80037de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e12d      	b.n	8003a3a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e5      	bne.n	80037b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <HAL_DMA_Abort+0x444>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d04a      	beq.n	800388a <HAL_DMA_Abort+0x422>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2d      	ldr	r2, [pc, #180]	; (80038b0 <HAL_DMA_Abort+0x448>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d045      	beq.n	800388a <HAL_DMA_Abort+0x422>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2c      	ldr	r2, [pc, #176]	; (80038b4 <HAL_DMA_Abort+0x44c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d040      	beq.n	800388a <HAL_DMA_Abort+0x422>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <HAL_DMA_Abort+0x450>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d03b      	beq.n	800388a <HAL_DMA_Abort+0x422>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <HAL_DMA_Abort+0x454>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d036      	beq.n	800388a <HAL_DMA_Abort+0x422>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <HAL_DMA_Abort+0x458>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d031      	beq.n	800388a <HAL_DMA_Abort+0x422>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a26      	ldr	r2, [pc, #152]	; (80038c4 <HAL_DMA_Abort+0x45c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d02c      	beq.n	800388a <HAL_DMA_Abort+0x422>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <HAL_DMA_Abort+0x460>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d027      	beq.n	800388a <HAL_DMA_Abort+0x422>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a23      	ldr	r2, [pc, #140]	; (80038cc <HAL_DMA_Abort+0x464>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_DMA_Abort+0x422>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <HAL_DMA_Abort+0x468>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01d      	beq.n	800388a <HAL_DMA_Abort+0x422>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a20      	ldr	r2, [pc, #128]	; (80038d4 <HAL_DMA_Abort+0x46c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d018      	beq.n	800388a <HAL_DMA_Abort+0x422>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <HAL_DMA_Abort+0x470>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_DMA_Abort+0x422>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_DMA_Abort+0x474>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00e      	beq.n	800388a <HAL_DMA_Abort+0x422>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_DMA_Abort+0x478>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_DMA_Abort+0x422>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1a      	ldr	r2, [pc, #104]	; (80038e4 <HAL_DMA_Abort+0x47c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_DMA_Abort+0x422>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <HAL_DMA_Abort+0x480>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_DMA_Abort+0x426>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_DMA_Abort+0x428>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02b      	beq.n	80038ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	223f      	movs	r2, #63	; 0x3f
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	e02a      	b.n	8003902 <HAL_DMA_Abort+0x49a>
 80038ac:	40020010 	.word	0x40020010
 80038b0:	40020028 	.word	0x40020028
 80038b4:	40020040 	.word	0x40020040
 80038b8:	40020058 	.word	0x40020058
 80038bc:	40020070 	.word	0x40020070
 80038c0:	40020088 	.word	0x40020088
 80038c4:	400200a0 	.word	0x400200a0
 80038c8:	400200b8 	.word	0x400200b8
 80038cc:	40020410 	.word	0x40020410
 80038d0:	40020428 	.word	0x40020428
 80038d4:	40020440 	.word	0x40020440
 80038d8:	40020458 	.word	0x40020458
 80038dc:	40020470 	.word	0x40020470
 80038e0:	40020488 	.word	0x40020488
 80038e4:	400204a0 	.word	0x400204a0
 80038e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2201      	movs	r2, #1
 80038fc:	409a      	lsls	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a4f      	ldr	r2, [pc, #316]	; (8003a44 <HAL_DMA_Abort+0x5dc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d072      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a4d      	ldr	r2, [pc, #308]	; (8003a48 <HAL_DMA_Abort+0x5e0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d06d      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a4c      	ldr	r2, [pc, #304]	; (8003a4c <HAL_DMA_Abort+0x5e4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d068      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <HAL_DMA_Abort+0x5e8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d063      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a49      	ldr	r2, [pc, #292]	; (8003a54 <HAL_DMA_Abort+0x5ec>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d05e      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a47      	ldr	r2, [pc, #284]	; (8003a58 <HAL_DMA_Abort+0x5f0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d059      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a46      	ldr	r2, [pc, #280]	; (8003a5c <HAL_DMA_Abort+0x5f4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d054      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a44      	ldr	r2, [pc, #272]	; (8003a60 <HAL_DMA_Abort+0x5f8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d04f      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a43      	ldr	r2, [pc, #268]	; (8003a64 <HAL_DMA_Abort+0x5fc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d04a      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a41      	ldr	r2, [pc, #260]	; (8003a68 <HAL_DMA_Abort+0x600>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d045      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a40      	ldr	r2, [pc, #256]	; (8003a6c <HAL_DMA_Abort+0x604>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d040      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a3e      	ldr	r2, [pc, #248]	; (8003a70 <HAL_DMA_Abort+0x608>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d03b      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a3d      	ldr	r2, [pc, #244]	; (8003a74 <HAL_DMA_Abort+0x60c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d036      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a3b      	ldr	r2, [pc, #236]	; (8003a78 <HAL_DMA_Abort+0x610>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d031      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a3a      	ldr	r2, [pc, #232]	; (8003a7c <HAL_DMA_Abort+0x614>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d02c      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a38      	ldr	r2, [pc, #224]	; (8003a80 <HAL_DMA_Abort+0x618>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d027      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a37      	ldr	r2, [pc, #220]	; (8003a84 <HAL_DMA_Abort+0x61c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a35      	ldr	r2, [pc, #212]	; (8003a88 <HAL_DMA_Abort+0x620>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01d      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <HAL_DMA_Abort+0x624>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d018      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a32      	ldr	r2, [pc, #200]	; (8003a90 <HAL_DMA_Abort+0x628>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a31      	ldr	r2, [pc, #196]	; (8003a94 <HAL_DMA_Abort+0x62c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2f      	ldr	r2, [pc, #188]	; (8003a98 <HAL_DMA_Abort+0x630>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2e      	ldr	r2, [pc, #184]	; (8003a9c <HAL_DMA_Abort+0x634>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_DMA_Abort+0x58a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <HAL_DMA_Abort+0x638>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_DMA_Abort+0x58e>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_DMA_Abort+0x590>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a04:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00c      	beq.n	8003a28 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a26:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40020010 	.word	0x40020010
 8003a48:	40020028 	.word	0x40020028
 8003a4c:	40020040 	.word	0x40020040
 8003a50:	40020058 	.word	0x40020058
 8003a54:	40020070 	.word	0x40020070
 8003a58:	40020088 	.word	0x40020088
 8003a5c:	400200a0 	.word	0x400200a0
 8003a60:	400200b8 	.word	0x400200b8
 8003a64:	40020410 	.word	0x40020410
 8003a68:	40020428 	.word	0x40020428
 8003a6c:	40020440 	.word	0x40020440
 8003a70:	40020458 	.word	0x40020458
 8003a74:	40020470 	.word	0x40020470
 8003a78:	40020488 	.word	0x40020488
 8003a7c:	400204a0 	.word	0x400204a0
 8003a80:	400204b8 	.word	0x400204b8
 8003a84:	58025408 	.word	0x58025408
 8003a88:	5802541c 	.word	0x5802541c
 8003a8c:	58025430 	.word	0x58025430
 8003a90:	58025444 	.word	0x58025444
 8003a94:	58025458 	.word	0x58025458
 8003a98:	5802546c 	.word	0x5802546c
 8003a9c:	58025480 	.word	0x58025480
 8003aa0:	58025494 	.word	0x58025494

08003aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e237      	b.n	8003f26 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d004      	beq.n	8003acc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e22c      	b.n	8003f26 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5c      	ldr	r2, [pc, #368]	; (8003c44 <HAL_DMA_Abort_IT+0x1a0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d04a      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a5b      	ldr	r2, [pc, #364]	; (8003c48 <HAL_DMA_Abort_IT+0x1a4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d045      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a59      	ldr	r2, [pc, #356]	; (8003c4c <HAL_DMA_Abort_IT+0x1a8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d040      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a58      	ldr	r2, [pc, #352]	; (8003c50 <HAL_DMA_Abort_IT+0x1ac>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d03b      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a56      	ldr	r2, [pc, #344]	; (8003c54 <HAL_DMA_Abort_IT+0x1b0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d036      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a55      	ldr	r2, [pc, #340]	; (8003c58 <HAL_DMA_Abort_IT+0x1b4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d031      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a53      	ldr	r2, [pc, #332]	; (8003c5c <HAL_DMA_Abort_IT+0x1b8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d02c      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a52      	ldr	r2, [pc, #328]	; (8003c60 <HAL_DMA_Abort_IT+0x1bc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d027      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a50      	ldr	r2, [pc, #320]	; (8003c64 <HAL_DMA_Abort_IT+0x1c0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d022      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4f      	ldr	r2, [pc, #316]	; (8003c68 <HAL_DMA_Abort_IT+0x1c4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d01d      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a4d      	ldr	r2, [pc, #308]	; (8003c6c <HAL_DMA_Abort_IT+0x1c8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d018      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a4c      	ldr	r2, [pc, #304]	; (8003c70 <HAL_DMA_Abort_IT+0x1cc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d013      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a4a      	ldr	r2, [pc, #296]	; (8003c74 <HAL_DMA_Abort_IT+0x1d0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00e      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a49      	ldr	r2, [pc, #292]	; (8003c78 <HAL_DMA_Abort_IT+0x1d4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d009      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a47      	ldr	r2, [pc, #284]	; (8003c7c <HAL_DMA_Abort_IT+0x1d8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a46      	ldr	r2, [pc, #280]	; (8003c80 <HAL_DMA_Abort_IT+0x1dc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <HAL_DMA_Abort_IT+0xcc>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_DMA_Abort_IT+0xce>
 8003b70:	2300      	movs	r3, #0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8086 	beq.w	8003c84 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2f      	ldr	r2, [pc, #188]	; (8003c44 <HAL_DMA_Abort_IT+0x1a0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d04a      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2e      	ldr	r2, [pc, #184]	; (8003c48 <HAL_DMA_Abort_IT+0x1a4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d045      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <HAL_DMA_Abort_IT+0x1a8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d040      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <HAL_DMA_Abort_IT+0x1ac>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d03b      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a29      	ldr	r2, [pc, #164]	; (8003c54 <HAL_DMA_Abort_IT+0x1b0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d036      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <HAL_DMA_Abort_IT+0x1b4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d031      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_DMA_Abort_IT+0x1b8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02c      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a25      	ldr	r2, [pc, #148]	; (8003c60 <HAL_DMA_Abort_IT+0x1bc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d027      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a23      	ldr	r2, [pc, #140]	; (8003c64 <HAL_DMA_Abort_IT+0x1c0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d022      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a22      	ldr	r2, [pc, #136]	; (8003c68 <HAL_DMA_Abort_IT+0x1c4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d01d      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <HAL_DMA_Abort_IT+0x1c8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d018      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <HAL_DMA_Abort_IT+0x1cc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <HAL_DMA_Abort_IT+0x1d0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00e      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1c      	ldr	r2, [pc, #112]	; (8003c78 <HAL_DMA_Abort_IT+0x1d4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d009      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_DMA_Abort_IT+0x1d8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x17c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <HAL_DMA_Abort_IT+0x1dc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d108      	bne.n	8003c32 <HAL_DMA_Abort_IT+0x18e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e178      	b.n	8003f24 <HAL_DMA_Abort_IT+0x480>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e16f      	b.n	8003f24 <HAL_DMA_Abort_IT+0x480>
 8003c44:	40020010 	.word	0x40020010
 8003c48:	40020028 	.word	0x40020028
 8003c4c:	40020040 	.word	0x40020040
 8003c50:	40020058 	.word	0x40020058
 8003c54:	40020070 	.word	0x40020070
 8003c58:	40020088 	.word	0x40020088
 8003c5c:	400200a0 	.word	0x400200a0
 8003c60:	400200b8 	.word	0x400200b8
 8003c64:	40020410 	.word	0x40020410
 8003c68:	40020428 	.word	0x40020428
 8003c6c:	40020440 	.word	0x40020440
 8003c70:	40020458 	.word	0x40020458
 8003c74:	40020470 	.word	0x40020470
 8003c78:	40020488 	.word	0x40020488
 8003c7c:	400204a0 	.word	0x400204a0
 8003c80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 020e 	bic.w	r2, r2, #14
 8003c92:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a6c      	ldr	r2, [pc, #432]	; (8003e4c <HAL_DMA_Abort_IT+0x3a8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04a      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a6b      	ldr	r2, [pc, #428]	; (8003e50 <HAL_DMA_Abort_IT+0x3ac>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d045      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a69      	ldr	r2, [pc, #420]	; (8003e54 <HAL_DMA_Abort_IT+0x3b0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d040      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a68      	ldr	r2, [pc, #416]	; (8003e58 <HAL_DMA_Abort_IT+0x3b4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03b      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a66      	ldr	r2, [pc, #408]	; (8003e5c <HAL_DMA_Abort_IT+0x3b8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d036      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a65      	ldr	r2, [pc, #404]	; (8003e60 <HAL_DMA_Abort_IT+0x3bc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d031      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a63      	ldr	r2, [pc, #396]	; (8003e64 <HAL_DMA_Abort_IT+0x3c0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02c      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a62      	ldr	r2, [pc, #392]	; (8003e68 <HAL_DMA_Abort_IT+0x3c4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d027      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a60      	ldr	r2, [pc, #384]	; (8003e6c <HAL_DMA_Abort_IT+0x3c8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5f      	ldr	r2, [pc, #380]	; (8003e70 <HAL_DMA_Abort_IT+0x3cc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01d      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5d      	ldr	r2, [pc, #372]	; (8003e74 <HAL_DMA_Abort_IT+0x3d0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a5c      	ldr	r2, [pc, #368]	; (8003e78 <HAL_DMA_Abort_IT+0x3d4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5a      	ldr	r2, [pc, #360]	; (8003e7c <HAL_DMA_Abort_IT+0x3d8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a59      	ldr	r2, [pc, #356]	; (8003e80 <HAL_DMA_Abort_IT+0x3dc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a57      	ldr	r2, [pc, #348]	; (8003e84 <HAL_DMA_Abort_IT+0x3e0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x290>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a56      	ldr	r2, [pc, #344]	; (8003e88 <HAL_DMA_Abort_IT+0x3e4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <HAL_DMA_Abort_IT+0x2a2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e007      	b.n	8003d56 <HAL_DMA_Abort_IT+0x2b2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0201 	bic.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3c      	ldr	r2, [pc, #240]	; (8003e4c <HAL_DMA_Abort_IT+0x3a8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d072      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3a      	ldr	r2, [pc, #232]	; (8003e50 <HAL_DMA_Abort_IT+0x3ac>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d06d      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a39      	ldr	r2, [pc, #228]	; (8003e54 <HAL_DMA_Abort_IT+0x3b0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d068      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a37      	ldr	r2, [pc, #220]	; (8003e58 <HAL_DMA_Abort_IT+0x3b4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d063      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a36      	ldr	r2, [pc, #216]	; (8003e5c <HAL_DMA_Abort_IT+0x3b8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d05e      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a34      	ldr	r2, [pc, #208]	; (8003e60 <HAL_DMA_Abort_IT+0x3bc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d059      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a33      	ldr	r2, [pc, #204]	; (8003e64 <HAL_DMA_Abort_IT+0x3c0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d054      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a31      	ldr	r2, [pc, #196]	; (8003e68 <HAL_DMA_Abort_IT+0x3c4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d04f      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a30      	ldr	r2, [pc, #192]	; (8003e6c <HAL_DMA_Abort_IT+0x3c8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d04a      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2e      	ldr	r2, [pc, #184]	; (8003e70 <HAL_DMA_Abort_IT+0x3cc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d045      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2d      	ldr	r2, [pc, #180]	; (8003e74 <HAL_DMA_Abort_IT+0x3d0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d040      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a2b      	ldr	r2, [pc, #172]	; (8003e78 <HAL_DMA_Abort_IT+0x3d4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d03b      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <HAL_DMA_Abort_IT+0x3d8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d036      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a28      	ldr	r2, [pc, #160]	; (8003e80 <HAL_DMA_Abort_IT+0x3dc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d031      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <HAL_DMA_Abort_IT+0x3e0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d02c      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <HAL_DMA_Abort_IT+0x3e4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d027      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <HAL_DMA_Abort_IT+0x3e8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d022      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <HAL_DMA_Abort_IT+0x3ec>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01d      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <HAL_DMA_Abort_IT+0x3f0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d018      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <HAL_DMA_Abort_IT+0x3f4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <HAL_DMA_Abort_IT+0x3f8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <HAL_DMA_Abort_IT+0x3fc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <HAL_DMA_Abort_IT+0x400>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x3a2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <HAL_DMA_Abort_IT+0x404>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d132      	bne.n	8003eac <HAL_DMA_Abort_IT+0x408>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e031      	b.n	8003eae <HAL_DMA_Abort_IT+0x40a>
 8003e4a:	bf00      	nop
 8003e4c:	40020010 	.word	0x40020010
 8003e50:	40020028 	.word	0x40020028
 8003e54:	40020040 	.word	0x40020040
 8003e58:	40020058 	.word	0x40020058
 8003e5c:	40020070 	.word	0x40020070
 8003e60:	40020088 	.word	0x40020088
 8003e64:	400200a0 	.word	0x400200a0
 8003e68:	400200b8 	.word	0x400200b8
 8003e6c:	40020410 	.word	0x40020410
 8003e70:	40020428 	.word	0x40020428
 8003e74:	40020440 	.word	0x40020440
 8003e78:	40020458 	.word	0x40020458
 8003e7c:	40020470 	.word	0x40020470
 8003e80:	40020488 	.word	0x40020488
 8003e84:	400204a0 	.word	0x400204a0
 8003e88:	400204b8 	.word	0x400204b8
 8003e8c:	58025408 	.word	0x58025408
 8003e90:	5802541c 	.word	0x5802541c
 8003e94:	58025430 	.word	0x58025430
 8003e98:	58025444 	.word	0x58025444
 8003e9c:	58025458 	.word	0x58025458
 8003ea0:	5802546c 	.word	0x5802546c
 8003ea4:	58025480 	.word	0x58025480
 8003ea8:	58025494 	.word	0x58025494
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d028      	beq.n	8003f04 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ee0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00c      	beq.n	8003f04 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ef8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop

08003f30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f3c:	4b67      	ldr	r3, [pc, #412]	; (80040dc <HAL_DMA_IRQHandler+0x1ac>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a67      	ldr	r2, [pc, #412]	; (80040e0 <HAL_DMA_IRQHandler+0x1b0>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	0a9b      	lsrs	r3, r3, #10
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a5f      	ldr	r2, [pc, #380]	; (80040e4 <HAL_DMA_IRQHandler+0x1b4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d04a      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5d      	ldr	r2, [pc, #372]	; (80040e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d045      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5c      	ldr	r2, [pc, #368]	; (80040ec <HAL_DMA_IRQHandler+0x1bc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d040      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a5a      	ldr	r2, [pc, #360]	; (80040f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d03b      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a59      	ldr	r2, [pc, #356]	; (80040f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d036      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <HAL_DMA_IRQHandler+0x1c8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d031      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a56      	ldr	r2, [pc, #344]	; (80040fc <HAL_DMA_IRQHandler+0x1cc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d02c      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a54      	ldr	r2, [pc, #336]	; (8004100 <HAL_DMA_IRQHandler+0x1d0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d027      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a53      	ldr	r2, [pc, #332]	; (8004104 <HAL_DMA_IRQHandler+0x1d4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a51      	ldr	r2, [pc, #324]	; (8004108 <HAL_DMA_IRQHandler+0x1d8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a50      	ldr	r2, [pc, #320]	; (800410c <HAL_DMA_IRQHandler+0x1dc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d018      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a4e      	ldr	r2, [pc, #312]	; (8004110 <HAL_DMA_IRQHandler+0x1e0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a4d      	ldr	r2, [pc, #308]	; (8004114 <HAL_DMA_IRQHandler+0x1e4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <HAL_DMA_IRQHandler+0x1e8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_DMA_IRQHandler+0x1ec>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_DMA_IRQHandler+0xd2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a48      	ldr	r2, [pc, #288]	; (8004120 <HAL_DMA_IRQHandler+0x1f0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d101      	bne.n	8004006 <HAL_DMA_IRQHandler+0xd6>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_DMA_IRQHandler+0xd8>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 842b 	beq.w	8004864 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	2208      	movs	r2, #8
 8004018:	409a      	lsls	r2, r3
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80a2 	beq.w	8004168 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2e      	ldr	r2, [pc, #184]	; (80040e4 <HAL_DMA_IRQHandler+0x1b4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d04a      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <HAL_DMA_IRQHandler+0x1b8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d045      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <HAL_DMA_IRQHandler+0x1bc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d040      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <HAL_DMA_IRQHandler+0x1c0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d03b      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <HAL_DMA_IRQHandler+0x1c4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d036      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <HAL_DMA_IRQHandler+0x1c8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d031      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <HAL_DMA_IRQHandler+0x1cc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d02c      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a24      	ldr	r2, [pc, #144]	; (8004100 <HAL_DMA_IRQHandler+0x1d0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d027      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a22      	ldr	r2, [pc, #136]	; (8004104 <HAL_DMA_IRQHandler+0x1d4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d022      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a21      	ldr	r2, [pc, #132]	; (8004108 <HAL_DMA_IRQHandler+0x1d8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d01d      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1f      	ldr	r2, [pc, #124]	; (800410c <HAL_DMA_IRQHandler+0x1dc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d018      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_DMA_IRQHandler+0x1e0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <HAL_DMA_IRQHandler+0x1e4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00e      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1b      	ldr	r2, [pc, #108]	; (8004118 <HAL_DMA_IRQHandler+0x1e8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d009      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a19      	ldr	r2, [pc, #100]	; (800411c <HAL_DMA_IRQHandler+0x1ec>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x194>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a18      	ldr	r2, [pc, #96]	; (8004120 <HAL_DMA_IRQHandler+0x1f0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d12f      	bne.n	8004124 <HAL_DMA_IRQHandler+0x1f4>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bf14      	ite	ne
 80040d2:	2301      	movne	r3, #1
 80040d4:	2300      	moveq	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	e02e      	b.n	8004138 <HAL_DMA_IRQHandler+0x208>
 80040da:	bf00      	nop
 80040dc:	24000010 	.word	0x24000010
 80040e0:	1b4e81b5 	.word	0x1b4e81b5
 80040e4:	40020010 	.word	0x40020010
 80040e8:	40020028 	.word	0x40020028
 80040ec:	40020040 	.word	0x40020040
 80040f0:	40020058 	.word	0x40020058
 80040f4:	40020070 	.word	0x40020070
 80040f8:	40020088 	.word	0x40020088
 80040fc:	400200a0 	.word	0x400200a0
 8004100:	400200b8 	.word	0x400200b8
 8004104:	40020410 	.word	0x40020410
 8004108:	40020428 	.word	0x40020428
 800410c:	40020440 	.word	0x40020440
 8004110:	40020458 	.word	0x40020458
 8004114:	40020470 	.word	0x40020470
 8004118:	40020488 	.word	0x40020488
 800411c:	400204a0 	.word	0x400204a0
 8004120:	400204b8 	.word	0x400204b8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d015      	beq.n	8004168 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0204 	bic.w	r2, r2, #4
 800414a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2208      	movs	r2, #8
 8004156:	409a      	lsls	r2, r3
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f043 0201 	orr.w	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d06e      	beq.n	800425c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a69      	ldr	r2, [pc, #420]	; (8004328 <HAL_DMA_IRQHandler+0x3f8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d04a      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a67      	ldr	r2, [pc, #412]	; (800432c <HAL_DMA_IRQHandler+0x3fc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d045      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a66      	ldr	r2, [pc, #408]	; (8004330 <HAL_DMA_IRQHandler+0x400>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d040      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a64      	ldr	r2, [pc, #400]	; (8004334 <HAL_DMA_IRQHandler+0x404>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d03b      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a63      	ldr	r2, [pc, #396]	; (8004338 <HAL_DMA_IRQHandler+0x408>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d036      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a61      	ldr	r2, [pc, #388]	; (800433c <HAL_DMA_IRQHandler+0x40c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d031      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a60      	ldr	r2, [pc, #384]	; (8004340 <HAL_DMA_IRQHandler+0x410>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d02c      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5e      	ldr	r2, [pc, #376]	; (8004344 <HAL_DMA_IRQHandler+0x414>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d027      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a5d      	ldr	r2, [pc, #372]	; (8004348 <HAL_DMA_IRQHandler+0x418>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5b      	ldr	r2, [pc, #364]	; (800434c <HAL_DMA_IRQHandler+0x41c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01d      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a5a      	ldr	r2, [pc, #360]	; (8004350 <HAL_DMA_IRQHandler+0x420>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d018      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a58      	ldr	r2, [pc, #352]	; (8004354 <HAL_DMA_IRQHandler+0x424>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a57      	ldr	r2, [pc, #348]	; (8004358 <HAL_DMA_IRQHandler+0x428>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a55      	ldr	r2, [pc, #340]	; (800435c <HAL_DMA_IRQHandler+0x42c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a54      	ldr	r2, [pc, #336]	; (8004360 <HAL_DMA_IRQHandler+0x430>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_DMA_IRQHandler+0x2ee>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a52      	ldr	r2, [pc, #328]	; (8004364 <HAL_DMA_IRQHandler+0x434>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d10a      	bne.n	8004234 <HAL_DMA_IRQHandler+0x304>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	e003      	b.n	800423c <HAL_DMA_IRQHandler+0x30c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	2201      	movs	r2, #1
 800424a:	409a      	lsls	r2, r3
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f043 0202 	orr.w	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2204      	movs	r2, #4
 8004266:	409a      	lsls	r2, r3
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 808f 	beq.w	8004390 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <HAL_DMA_IRQHandler+0x3f8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d04a      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2a      	ldr	r2, [pc, #168]	; (800432c <HAL_DMA_IRQHandler+0x3fc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d045      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a29      	ldr	r2, [pc, #164]	; (8004330 <HAL_DMA_IRQHandler+0x400>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d040      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a27      	ldr	r2, [pc, #156]	; (8004334 <HAL_DMA_IRQHandler+0x404>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d03b      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a26      	ldr	r2, [pc, #152]	; (8004338 <HAL_DMA_IRQHandler+0x408>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d036      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a24      	ldr	r2, [pc, #144]	; (800433c <HAL_DMA_IRQHandler+0x40c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d031      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a23      	ldr	r2, [pc, #140]	; (8004340 <HAL_DMA_IRQHandler+0x410>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d02c      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a21      	ldr	r2, [pc, #132]	; (8004344 <HAL_DMA_IRQHandler+0x414>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d027      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a20      	ldr	r2, [pc, #128]	; (8004348 <HAL_DMA_IRQHandler+0x418>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d022      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1e      	ldr	r2, [pc, #120]	; (800434c <HAL_DMA_IRQHandler+0x41c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01d      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_DMA_IRQHandler+0x420>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d018      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <HAL_DMA_IRQHandler+0x424>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <HAL_DMA_IRQHandler+0x428>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a18      	ldr	r2, [pc, #96]	; (800435c <HAL_DMA_IRQHandler+0x42c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a17      	ldr	r2, [pc, #92]	; (8004360 <HAL_DMA_IRQHandler+0x430>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_DMA_IRQHandler+0x3e2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <HAL_DMA_IRQHandler+0x434>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d12a      	bne.n	8004368 <HAL_DMA_IRQHandler+0x438>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e023      	b.n	8004370 <HAL_DMA_IRQHandler+0x440>
 8004328:	40020010 	.word	0x40020010
 800432c:	40020028 	.word	0x40020028
 8004330:	40020040 	.word	0x40020040
 8004334:	40020058 	.word	0x40020058
 8004338:	40020070 	.word	0x40020070
 800433c:	40020088 	.word	0x40020088
 8004340:	400200a0 	.word	0x400200a0
 8004344:	400200b8 	.word	0x400200b8
 8004348:	40020410 	.word	0x40020410
 800434c:	40020428 	.word	0x40020428
 8004350:	40020440 	.word	0x40020440
 8004354:	40020458 	.word	0x40020458
 8004358:	40020470 	.word	0x40020470
 800435c:	40020488 	.word	0x40020488
 8004360:	400204a0 	.word	0x400204a0
 8004364:	400204b8 	.word	0x400204b8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	2204      	movs	r2, #4
 800437e:	409a      	lsls	r2, r3
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	f043 0204 	orr.w	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2210      	movs	r2, #16
 800439a:	409a      	lsls	r2, r3
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80a6 	beq.w	80044f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a85      	ldr	r2, [pc, #532]	; (80045c0 <HAL_DMA_IRQHandler+0x690>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d04a      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a83      	ldr	r2, [pc, #524]	; (80045c4 <HAL_DMA_IRQHandler+0x694>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d045      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a82      	ldr	r2, [pc, #520]	; (80045c8 <HAL_DMA_IRQHandler+0x698>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d040      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a80      	ldr	r2, [pc, #512]	; (80045cc <HAL_DMA_IRQHandler+0x69c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d03b      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a7f      	ldr	r2, [pc, #508]	; (80045d0 <HAL_DMA_IRQHandler+0x6a0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d036      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a7d      	ldr	r2, [pc, #500]	; (80045d4 <HAL_DMA_IRQHandler+0x6a4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d031      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7c      	ldr	r2, [pc, #496]	; (80045d8 <HAL_DMA_IRQHandler+0x6a8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d02c      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7a      	ldr	r2, [pc, #488]	; (80045dc <HAL_DMA_IRQHandler+0x6ac>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d027      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a79      	ldr	r2, [pc, #484]	; (80045e0 <HAL_DMA_IRQHandler+0x6b0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d022      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a77      	ldr	r2, [pc, #476]	; (80045e4 <HAL_DMA_IRQHandler+0x6b4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01d      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a76      	ldr	r2, [pc, #472]	; (80045e8 <HAL_DMA_IRQHandler+0x6b8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d018      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a74      	ldr	r2, [pc, #464]	; (80045ec <HAL_DMA_IRQHandler+0x6bc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a73      	ldr	r2, [pc, #460]	; (80045f0 <HAL_DMA_IRQHandler+0x6c0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00e      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a71      	ldr	r2, [pc, #452]	; (80045f4 <HAL_DMA_IRQHandler+0x6c4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a70      	ldr	r2, [pc, #448]	; (80045f8 <HAL_DMA_IRQHandler+0x6c8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_DMA_IRQHandler+0x516>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6e      	ldr	r2, [pc, #440]	; (80045fc <HAL_DMA_IRQHandler+0x6cc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10a      	bne.n	800445c <HAL_DMA_IRQHandler+0x52c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	e009      	b.n	8004470 <HAL_DMA_IRQHandler+0x540>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf14      	ite	ne
 800446a:	2301      	movne	r3, #1
 800446c:	2300      	moveq	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03e      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2210      	movs	r2, #16
 800447e:	409a      	lsls	r2, r3
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d108      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d024      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
 80044b0:	e01f      	b.n	80044f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01b      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
 80044c2:	e016      	b.n	80044f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d107      	bne.n	80044e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0208 	bic.w	r2, r2, #8
 80044e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	2220      	movs	r2, #32
 80044fc:	409a      	lsls	r2, r3
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8110 	beq.w	8004728 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <HAL_DMA_IRQHandler+0x690>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d04a      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <HAL_DMA_IRQHandler+0x694>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d045      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a29      	ldr	r2, [pc, #164]	; (80045c8 <HAL_DMA_IRQHandler+0x698>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d040      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a28      	ldr	r2, [pc, #160]	; (80045cc <HAL_DMA_IRQHandler+0x69c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d03b      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <HAL_DMA_IRQHandler+0x6a0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d036      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a25      	ldr	r2, [pc, #148]	; (80045d4 <HAL_DMA_IRQHandler+0x6a4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d031      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a23      	ldr	r2, [pc, #140]	; (80045d8 <HAL_DMA_IRQHandler+0x6a8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d02c      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a22      	ldr	r2, [pc, #136]	; (80045dc <HAL_DMA_IRQHandler+0x6ac>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d027      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <HAL_DMA_IRQHandler+0x6b0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d022      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <HAL_DMA_IRQHandler+0x6b4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d01d      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <HAL_DMA_IRQHandler+0x6b8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <HAL_DMA_IRQHandler+0x6bc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_DMA_IRQHandler+0x6c0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_DMA_IRQHandler+0x6c4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <HAL_DMA_IRQHandler+0x6c8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x678>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_DMA_IRQHandler+0x6cc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d12b      	bne.n	8004600 <HAL_DMA_IRQHandler+0x6d0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e02a      	b.n	8004614 <HAL_DMA_IRQHandler+0x6e4>
 80045be:	bf00      	nop
 80045c0:	40020010 	.word	0x40020010
 80045c4:	40020028 	.word	0x40020028
 80045c8:	40020040 	.word	0x40020040
 80045cc:	40020058 	.word	0x40020058
 80045d0:	40020070 	.word	0x40020070
 80045d4:	40020088 	.word	0x40020088
 80045d8:	400200a0 	.word	0x400200a0
 80045dc:	400200b8 	.word	0x400200b8
 80045e0:	40020410 	.word	0x40020410
 80045e4:	40020428 	.word	0x40020428
 80045e8:	40020440 	.word	0x40020440
 80045ec:	40020458 	.word	0x40020458
 80045f0:	40020470 	.word	0x40020470
 80045f4:	40020488 	.word	0x40020488
 80045f8:	400204a0 	.word	0x400204a0
 80045fc:	400204b8 	.word	0x400204b8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf14      	ite	ne
 800460e:	2301      	movne	r3, #1
 8004610:	2300      	moveq	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 8087 	beq.w	8004728 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	2220      	movs	r2, #32
 8004624:	409a      	lsls	r2, r3
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b04      	cmp	r3, #4
 8004634:	d139      	bne.n	80046aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0216 	bic.w	r2, r2, #22
 8004644:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004654:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <HAL_DMA_IRQHandler+0x736>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0208 	bic.w	r2, r2, #8
 8004674:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	223f      	movs	r2, #63	; 0x3f
 8004680:	409a      	lsls	r2, r3
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 834a 	beq.w	8004d34 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	4798      	blx	r3
          }
          return;
 80046a8:	e344      	b.n	8004d34 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d018      	beq.n	80046ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d108      	bne.n	80046d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02c      	beq.n	8004728 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
 80046d6:	e027      	b.n	8004728 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d023      	beq.n	8004728 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	4798      	blx	r3
 80046e8:	e01e      	b.n	8004728 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10f      	bne.n	8004718 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0210 	bic.w	r2, r2, #16
 8004706:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8306 	beq.w	8004d3e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8088 	beq.w	8004850 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2204      	movs	r2, #4
 8004744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7a      	ldr	r2, [pc, #488]	; (8004938 <HAL_DMA_IRQHandler+0xa08>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d04a      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a79      	ldr	r2, [pc, #484]	; (800493c <HAL_DMA_IRQHandler+0xa0c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d045      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a77      	ldr	r2, [pc, #476]	; (8004940 <HAL_DMA_IRQHandler+0xa10>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d040      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a76      	ldr	r2, [pc, #472]	; (8004944 <HAL_DMA_IRQHandler+0xa14>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d03b      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a74      	ldr	r2, [pc, #464]	; (8004948 <HAL_DMA_IRQHandler+0xa18>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d036      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a73      	ldr	r2, [pc, #460]	; (800494c <HAL_DMA_IRQHandler+0xa1c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d031      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a71      	ldr	r2, [pc, #452]	; (8004950 <HAL_DMA_IRQHandler+0xa20>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d02c      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a70      	ldr	r2, [pc, #448]	; (8004954 <HAL_DMA_IRQHandler+0xa24>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d027      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6e      	ldr	r2, [pc, #440]	; (8004958 <HAL_DMA_IRQHandler+0xa28>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d022      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6d      	ldr	r2, [pc, #436]	; (800495c <HAL_DMA_IRQHandler+0xa2c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d01d      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6b      	ldr	r2, [pc, #428]	; (8004960 <HAL_DMA_IRQHandler+0xa30>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d018      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6a      	ldr	r2, [pc, #424]	; (8004964 <HAL_DMA_IRQHandler+0xa34>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a68      	ldr	r2, [pc, #416]	; (8004968 <HAL_DMA_IRQHandler+0xa38>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a67      	ldr	r2, [pc, #412]	; (800496c <HAL_DMA_IRQHandler+0xa3c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a65      	ldr	r2, [pc, #404]	; (8004970 <HAL_DMA_IRQHandler+0xa40>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x8b8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a64      	ldr	r2, [pc, #400]	; (8004974 <HAL_DMA_IRQHandler+0xa44>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d108      	bne.n	80047fa <HAL_DMA_IRQHandler+0x8ca>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e007      	b.n	800480a <HAL_DMA_IRQHandler+0x8da>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	429a      	cmp	r2, r3
 8004814:	d307      	bcc.n	8004826 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f2      	bne.n	800480a <HAL_DMA_IRQHandler+0x8da>
 8004824:	e000      	b.n	8004828 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004826:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d004      	beq.n	8004840 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2203      	movs	r2, #3
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800483e:	e003      	b.n	8004848 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8272 	beq.w	8004d3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
 8004862:	e26c      	b.n	8004d3e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a43      	ldr	r2, [pc, #268]	; (8004978 <HAL_DMA_IRQHandler+0xa48>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d022      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x984>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a42      	ldr	r2, [pc, #264]	; (800497c <HAL_DMA_IRQHandler+0xa4c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d01d      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x984>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a40      	ldr	r2, [pc, #256]	; (8004980 <HAL_DMA_IRQHandler+0xa50>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d018      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x984>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3f      	ldr	r2, [pc, #252]	; (8004984 <HAL_DMA_IRQHandler+0xa54>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d013      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x984>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a3d      	ldr	r2, [pc, #244]	; (8004988 <HAL_DMA_IRQHandler+0xa58>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00e      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x984>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a3c      	ldr	r2, [pc, #240]	; (800498c <HAL_DMA_IRQHandler+0xa5c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d009      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x984>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a3a      	ldr	r2, [pc, #232]	; (8004990 <HAL_DMA_IRQHandler+0xa60>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x984>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a39      	ldr	r2, [pc, #228]	; (8004994 <HAL_DMA_IRQHandler+0xa64>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d101      	bne.n	80048b8 <HAL_DMA_IRQHandler+0x988>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_DMA_IRQHandler+0x98a>
 80048b8:	2300      	movs	r3, #0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 823f 	beq.w	8004d3e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	2204      	movs	r2, #4
 80048d2:	409a      	lsls	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80cd 	beq.w	8004a78 <HAL_DMA_IRQHandler+0xb48>
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80c7 	beq.w	8004a78 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	2204      	movs	r2, #4
 80048f4:	409a      	lsls	r2, r3
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d049      	beq.n	8004998 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 8210 	beq.w	8004d38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004920:	e20a      	b.n	8004d38 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8206 	beq.w	8004d38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004934:	e200      	b.n	8004d38 <HAL_DMA_IRQHandler+0xe08>
 8004936:	bf00      	nop
 8004938:	40020010 	.word	0x40020010
 800493c:	40020028 	.word	0x40020028
 8004940:	40020040 	.word	0x40020040
 8004944:	40020058 	.word	0x40020058
 8004948:	40020070 	.word	0x40020070
 800494c:	40020088 	.word	0x40020088
 8004950:	400200a0 	.word	0x400200a0
 8004954:	400200b8 	.word	0x400200b8
 8004958:	40020410 	.word	0x40020410
 800495c:	40020428 	.word	0x40020428
 8004960:	40020440 	.word	0x40020440
 8004964:	40020458 	.word	0x40020458
 8004968:	40020470 	.word	0x40020470
 800496c:	40020488 	.word	0x40020488
 8004970:	400204a0 	.word	0x400204a0
 8004974:	400204b8 	.word	0x400204b8
 8004978:	58025408 	.word	0x58025408
 800497c:	5802541c 	.word	0x5802541c
 8004980:	58025430 	.word	0x58025430
 8004984:	58025444 	.word	0x58025444
 8004988:	58025458 	.word	0x58025458
 800498c:	5802546c 	.word	0x5802546c
 8004990:	58025480 	.word	0x58025480
 8004994:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d160      	bne.n	8004a64 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7f      	ldr	r2, [pc, #508]	; (8004ba4 <HAL_DMA_IRQHandler+0xc74>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d04a      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a7d      	ldr	r2, [pc, #500]	; (8004ba8 <HAL_DMA_IRQHandler+0xc78>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d045      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a7c      	ldr	r2, [pc, #496]	; (8004bac <HAL_DMA_IRQHandler+0xc7c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d040      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a7a      	ldr	r2, [pc, #488]	; (8004bb0 <HAL_DMA_IRQHandler+0xc80>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d03b      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a79      	ldr	r2, [pc, #484]	; (8004bb4 <HAL_DMA_IRQHandler+0xc84>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d036      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a77      	ldr	r2, [pc, #476]	; (8004bb8 <HAL_DMA_IRQHandler+0xc88>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a76      	ldr	r2, [pc, #472]	; (8004bbc <HAL_DMA_IRQHandler+0xc8c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d02c      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a74      	ldr	r2, [pc, #464]	; (8004bc0 <HAL_DMA_IRQHandler+0xc90>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a73      	ldr	r2, [pc, #460]	; (8004bc4 <HAL_DMA_IRQHandler+0xc94>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a71      	ldr	r2, [pc, #452]	; (8004bc8 <HAL_DMA_IRQHandler+0xc98>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a70      	ldr	r2, [pc, #448]	; (8004bcc <HAL_DMA_IRQHandler+0xc9c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a6e      	ldr	r2, [pc, #440]	; (8004bd0 <HAL_DMA_IRQHandler+0xca0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a6d      	ldr	r2, [pc, #436]	; (8004bd4 <HAL_DMA_IRQHandler+0xca4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a6b      	ldr	r2, [pc, #428]	; (8004bd8 <HAL_DMA_IRQHandler+0xca8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a6a      	ldr	r2, [pc, #424]	; (8004bdc <HAL_DMA_IRQHandler+0xcac>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xb12>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a68      	ldr	r2, [pc, #416]	; (8004be0 <HAL_DMA_IRQHandler+0xcb0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <HAL_DMA_IRQHandler+0xb24>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0208 	bic.w	r2, r2, #8
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e007      	b.n	8004a64 <HAL_DMA_IRQHandler+0xb34>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0204 	bic.w	r2, r2, #4
 8004a62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8165 	beq.w	8004d38 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a76:	e15f      	b.n	8004d38 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2202      	movs	r2, #2
 8004a82:	409a      	lsls	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80c5 	beq.w	8004c18 <HAL_DMA_IRQHandler+0xce8>
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80bf 	beq.w	8004c18 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d018      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 813a 	beq.w	8004d3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ad0:	e134      	b.n	8004d3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8130 	beq.w	8004d3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ae4:	e12a      	b.n	8004d3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 8089 	bne.w	8004c04 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2b      	ldr	r2, [pc, #172]	; (8004ba4 <HAL_DMA_IRQHandler+0xc74>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d04a      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <HAL_DMA_IRQHandler+0xc78>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d045      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a28      	ldr	r2, [pc, #160]	; (8004bac <HAL_DMA_IRQHandler+0xc7c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d040      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <HAL_DMA_IRQHandler+0xc80>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d03b      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a25      	ldr	r2, [pc, #148]	; (8004bb4 <HAL_DMA_IRQHandler+0xc84>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d036      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <HAL_DMA_IRQHandler+0xc88>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d031      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <HAL_DMA_IRQHandler+0xc8c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d02c      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <HAL_DMA_IRQHandler+0xc90>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d027      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <HAL_DMA_IRQHandler+0xc94>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d022      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <HAL_DMA_IRQHandler+0xc98>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d01d      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <HAL_DMA_IRQHandler+0xc9c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d018      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1a      	ldr	r2, [pc, #104]	; (8004bd0 <HAL_DMA_IRQHandler+0xca0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <HAL_DMA_IRQHandler+0xca4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00e      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <HAL_DMA_IRQHandler+0xca8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <HAL_DMA_IRQHandler+0xcac>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d004      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xc62>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a14      	ldr	r2, [pc, #80]	; (8004be0 <HAL_DMA_IRQHandler+0xcb0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d128      	bne.n	8004be4 <HAL_DMA_IRQHandler+0xcb4>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0214 	bic.w	r2, r2, #20
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e027      	b.n	8004bf4 <HAL_DMA_IRQHandler+0xcc4>
 8004ba4:	40020010 	.word	0x40020010
 8004ba8:	40020028 	.word	0x40020028
 8004bac:	40020040 	.word	0x40020040
 8004bb0:	40020058 	.word	0x40020058
 8004bb4:	40020070 	.word	0x40020070
 8004bb8:	40020088 	.word	0x40020088
 8004bbc:	400200a0 	.word	0x400200a0
 8004bc0:	400200b8 	.word	0x400200b8
 8004bc4:	40020410 	.word	0x40020410
 8004bc8:	40020428 	.word	0x40020428
 8004bcc:	40020440 	.word	0x40020440
 8004bd0:	40020458 	.word	0x40020458
 8004bd4:	40020470 	.word	0x40020470
 8004bd8:	40020488 	.word	0x40020488
 8004bdc:	400204a0 	.word	0x400204a0
 8004be0:	400204b8 	.word	0x400204b8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 020a 	bic.w	r2, r2, #10
 8004bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8097 	beq.w	8004d3c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c16:	e091      	b.n	8004d3c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2208      	movs	r2, #8
 8004c22:	409a      	lsls	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8088 	beq.w	8004d3e <HAL_DMA_IRQHandler+0xe0e>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8082 	beq.w	8004d3e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a41      	ldr	r2, [pc, #260]	; (8004d44 <HAL_DMA_IRQHandler+0xe14>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d04a      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a3f      	ldr	r2, [pc, #252]	; (8004d48 <HAL_DMA_IRQHandler+0xe18>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d045      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3e      	ldr	r2, [pc, #248]	; (8004d4c <HAL_DMA_IRQHandler+0xe1c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d040      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3c      	ldr	r2, [pc, #240]	; (8004d50 <HAL_DMA_IRQHandler+0xe20>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d03b      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3b      	ldr	r2, [pc, #236]	; (8004d54 <HAL_DMA_IRQHandler+0xe24>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d036      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a39      	ldr	r2, [pc, #228]	; (8004d58 <HAL_DMA_IRQHandler+0xe28>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d031      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a38      	ldr	r2, [pc, #224]	; (8004d5c <HAL_DMA_IRQHandler+0xe2c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d02c      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a36      	ldr	r2, [pc, #216]	; (8004d60 <HAL_DMA_IRQHandler+0xe30>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d027      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a35      	ldr	r2, [pc, #212]	; (8004d64 <HAL_DMA_IRQHandler+0xe34>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a33      	ldr	r2, [pc, #204]	; (8004d68 <HAL_DMA_IRQHandler+0xe38>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01d      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a32      	ldr	r2, [pc, #200]	; (8004d6c <HAL_DMA_IRQHandler+0xe3c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d018      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a30      	ldr	r2, [pc, #192]	; (8004d70 <HAL_DMA_IRQHandler+0xe40>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <HAL_DMA_IRQHandler+0xe44>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00e      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2d      	ldr	r2, [pc, #180]	; (8004d78 <HAL_DMA_IRQHandler+0xe48>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d009      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2c      	ldr	r2, [pc, #176]	; (8004d7c <HAL_DMA_IRQHandler+0xe4c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d004      	beq.n	8004cda <HAL_DMA_IRQHandler+0xdaa>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <HAL_DMA_IRQHandler+0xe50>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d108      	bne.n	8004cec <HAL_DMA_IRQHandler+0xdbc>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 021c 	bic.w	r2, r2, #28
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e007      	b.n	8004cfc <HAL_DMA_IRQHandler+0xdcc>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 020e 	bic.w	r2, r2, #14
 8004cfa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2201      	movs	r2, #1
 8004d06:	409a      	lsls	r2, r3
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
 8004d32:	e004      	b.n	8004d3e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004d34:	bf00      	nop
 8004d36:	e002      	b.n	8004d3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d3c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d3e:	3728      	adds	r7, #40	; 0x28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40020010 	.word	0x40020010
 8004d48:	40020028 	.word	0x40020028
 8004d4c:	40020040 	.word	0x40020040
 8004d50:	40020058 	.word	0x40020058
 8004d54:	40020070 	.word	0x40020070
 8004d58:	40020088 	.word	0x40020088
 8004d5c:	400200a0 	.word	0x400200a0
 8004d60:	400200b8 	.word	0x400200b8
 8004d64:	40020410 	.word	0x40020410
 8004d68:	40020428 	.word	0x40020428
 8004d6c:	40020440 	.word	0x40020440
 8004d70:	40020458 	.word	0x40020458
 8004d74:	40020470 	.word	0x40020470
 8004d78:	40020488 	.word	0x40020488
 8004d7c:	400204a0 	.word	0x400204a0
 8004d80:	400204b8 	.word	0x400204b8

08004d84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d96:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a7f      	ldr	r2, [pc, #508]	; (8004fa0 <DMA_SetConfig+0x21c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d072      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a7d      	ldr	r2, [pc, #500]	; (8004fa4 <DMA_SetConfig+0x220>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d06d      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a7c      	ldr	r2, [pc, #496]	; (8004fa8 <DMA_SetConfig+0x224>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d068      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a7a      	ldr	r2, [pc, #488]	; (8004fac <DMA_SetConfig+0x228>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d063      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a79      	ldr	r2, [pc, #484]	; (8004fb0 <DMA_SetConfig+0x22c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d05e      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a77      	ldr	r2, [pc, #476]	; (8004fb4 <DMA_SetConfig+0x230>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d059      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a76      	ldr	r2, [pc, #472]	; (8004fb8 <DMA_SetConfig+0x234>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d054      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a74      	ldr	r2, [pc, #464]	; (8004fbc <DMA_SetConfig+0x238>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d04f      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a73      	ldr	r2, [pc, #460]	; (8004fc0 <DMA_SetConfig+0x23c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d04a      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a71      	ldr	r2, [pc, #452]	; (8004fc4 <DMA_SetConfig+0x240>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d045      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a70      	ldr	r2, [pc, #448]	; (8004fc8 <DMA_SetConfig+0x244>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d040      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6e      	ldr	r2, [pc, #440]	; (8004fcc <DMA_SetConfig+0x248>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d03b      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a6d      	ldr	r2, [pc, #436]	; (8004fd0 <DMA_SetConfig+0x24c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d036      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a6b      	ldr	r2, [pc, #428]	; (8004fd4 <DMA_SetConfig+0x250>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d031      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a6a      	ldr	r2, [pc, #424]	; (8004fd8 <DMA_SetConfig+0x254>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d02c      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a68      	ldr	r2, [pc, #416]	; (8004fdc <DMA_SetConfig+0x258>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d027      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a67      	ldr	r2, [pc, #412]	; (8004fe0 <DMA_SetConfig+0x25c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d022      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a65      	ldr	r2, [pc, #404]	; (8004fe4 <DMA_SetConfig+0x260>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01d      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a64      	ldr	r2, [pc, #400]	; (8004fe8 <DMA_SetConfig+0x264>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d018      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a62      	ldr	r2, [pc, #392]	; (8004fec <DMA_SetConfig+0x268>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a61      	ldr	r2, [pc, #388]	; (8004ff0 <DMA_SetConfig+0x26c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5f      	ldr	r2, [pc, #380]	; (8004ff4 <DMA_SetConfig+0x270>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5e      	ldr	r2, [pc, #376]	; (8004ff8 <DMA_SetConfig+0x274>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <DMA_SetConfig+0x10a>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a5c      	ldr	r2, [pc, #368]	; (8004ffc <DMA_SetConfig+0x278>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <DMA_SetConfig+0x10e>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <DMA_SetConfig+0x110>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ea0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d004      	beq.n	8004eb4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004eb2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a39      	ldr	r2, [pc, #228]	; (8004fa0 <DMA_SetConfig+0x21c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d04a      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a38      	ldr	r2, [pc, #224]	; (8004fa4 <DMA_SetConfig+0x220>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d045      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a36      	ldr	r2, [pc, #216]	; (8004fa8 <DMA_SetConfig+0x224>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d040      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a35      	ldr	r2, [pc, #212]	; (8004fac <DMA_SetConfig+0x228>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d03b      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a33      	ldr	r2, [pc, #204]	; (8004fb0 <DMA_SetConfig+0x22c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d036      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a32      	ldr	r2, [pc, #200]	; (8004fb4 <DMA_SetConfig+0x230>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d031      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a30      	ldr	r2, [pc, #192]	; (8004fb8 <DMA_SetConfig+0x234>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d02c      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2f      	ldr	r2, [pc, #188]	; (8004fbc <DMA_SetConfig+0x238>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d027      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2d      	ldr	r2, [pc, #180]	; (8004fc0 <DMA_SetConfig+0x23c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d022      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <DMA_SetConfig+0x240>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d01d      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <DMA_SetConfig+0x244>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d018      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <DMA_SetConfig+0x248>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d013      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <DMA_SetConfig+0x24c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00e      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a26      	ldr	r2, [pc, #152]	; (8004fd4 <DMA_SetConfig+0x250>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d009      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a24      	ldr	r2, [pc, #144]	; (8004fd8 <DMA_SetConfig+0x254>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <DMA_SetConfig+0x1d0>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <DMA_SetConfig+0x258>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d101      	bne.n	8004f58 <DMA_SetConfig+0x1d4>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <DMA_SetConfig+0x1d6>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d059      	beq.n	8005012 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	223f      	movs	r2, #63	; 0x3f
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f7c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d138      	bne.n	8005000 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f9e:	e086      	b.n	80050ae <DMA_SetConfig+0x32a>
 8004fa0:	40020010 	.word	0x40020010
 8004fa4:	40020028 	.word	0x40020028
 8004fa8:	40020040 	.word	0x40020040
 8004fac:	40020058 	.word	0x40020058
 8004fb0:	40020070 	.word	0x40020070
 8004fb4:	40020088 	.word	0x40020088
 8004fb8:	400200a0 	.word	0x400200a0
 8004fbc:	400200b8 	.word	0x400200b8
 8004fc0:	40020410 	.word	0x40020410
 8004fc4:	40020428 	.word	0x40020428
 8004fc8:	40020440 	.word	0x40020440
 8004fcc:	40020458 	.word	0x40020458
 8004fd0:	40020470 	.word	0x40020470
 8004fd4:	40020488 	.word	0x40020488
 8004fd8:	400204a0 	.word	0x400204a0
 8004fdc:	400204b8 	.word	0x400204b8
 8004fe0:	58025408 	.word	0x58025408
 8004fe4:	5802541c 	.word	0x5802541c
 8004fe8:	58025430 	.word	0x58025430
 8004fec:	58025444 	.word	0x58025444
 8004ff0:	58025458 	.word	0x58025458
 8004ff4:	5802546c 	.word	0x5802546c
 8004ff8:	58025480 	.word	0x58025480
 8004ffc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	60da      	str	r2, [r3, #12]
}
 8005010:	e04d      	b.n	80050ae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a29      	ldr	r2, [pc, #164]	; (80050bc <DMA_SetConfig+0x338>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d022      	beq.n	8005062 <DMA_SetConfig+0x2de>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a27      	ldr	r2, [pc, #156]	; (80050c0 <DMA_SetConfig+0x33c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01d      	beq.n	8005062 <DMA_SetConfig+0x2de>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a26      	ldr	r2, [pc, #152]	; (80050c4 <DMA_SetConfig+0x340>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d018      	beq.n	8005062 <DMA_SetConfig+0x2de>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a24      	ldr	r2, [pc, #144]	; (80050c8 <DMA_SetConfig+0x344>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <DMA_SetConfig+0x2de>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a23      	ldr	r2, [pc, #140]	; (80050cc <DMA_SetConfig+0x348>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <DMA_SetConfig+0x2de>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <DMA_SetConfig+0x34c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <DMA_SetConfig+0x2de>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a20      	ldr	r2, [pc, #128]	; (80050d4 <DMA_SetConfig+0x350>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <DMA_SetConfig+0x2de>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <DMA_SetConfig+0x354>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d101      	bne.n	8005066 <DMA_SetConfig+0x2e2>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <DMA_SetConfig+0x2e4>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d020      	beq.n	80050ae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2201      	movs	r2, #1
 8005076:	409a      	lsls	r2, r3
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d108      	bne.n	800509e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	60da      	str	r2, [r3, #12]
}
 800509c:	e007      	b.n	80050ae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	58025408 	.word	0x58025408
 80050c0:	5802541c 	.word	0x5802541c
 80050c4:	58025430 	.word	0x58025430
 80050c8:	58025444 	.word	0x58025444
 80050cc:	58025458 	.word	0x58025458
 80050d0:	5802546c 	.word	0x5802546c
 80050d4:	58025480 	.word	0x58025480
 80050d8:	58025494 	.word	0x58025494

080050dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a42      	ldr	r2, [pc, #264]	; (80051f4 <DMA_CalcBaseAndBitshift+0x118>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d04a      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a41      	ldr	r2, [pc, #260]	; (80051f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d045      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a3f      	ldr	r2, [pc, #252]	; (80051fc <DMA_CalcBaseAndBitshift+0x120>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d040      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a3e      	ldr	r2, [pc, #248]	; (8005200 <DMA_CalcBaseAndBitshift+0x124>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d03b      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a3c      	ldr	r2, [pc, #240]	; (8005204 <DMA_CalcBaseAndBitshift+0x128>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d036      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3b      	ldr	r2, [pc, #236]	; (8005208 <DMA_CalcBaseAndBitshift+0x12c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d031      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a39      	ldr	r2, [pc, #228]	; (800520c <DMA_CalcBaseAndBitshift+0x130>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d02c      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a38      	ldr	r2, [pc, #224]	; (8005210 <DMA_CalcBaseAndBitshift+0x134>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d027      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a36      	ldr	r2, [pc, #216]	; (8005214 <DMA_CalcBaseAndBitshift+0x138>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d022      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a35      	ldr	r2, [pc, #212]	; (8005218 <DMA_CalcBaseAndBitshift+0x13c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d01d      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a33      	ldr	r2, [pc, #204]	; (800521c <DMA_CalcBaseAndBitshift+0x140>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d018      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a32      	ldr	r2, [pc, #200]	; (8005220 <DMA_CalcBaseAndBitshift+0x144>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d013      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a30      	ldr	r2, [pc, #192]	; (8005224 <DMA_CalcBaseAndBitshift+0x148>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00e      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2f      	ldr	r2, [pc, #188]	; (8005228 <DMA_CalcBaseAndBitshift+0x14c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2d      	ldr	r2, [pc, #180]	; (800522c <DMA_CalcBaseAndBitshift+0x150>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <DMA_CalcBaseAndBitshift+0xa8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2c      	ldr	r2, [pc, #176]	; (8005230 <DMA_CalcBaseAndBitshift+0x154>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d101      	bne.n	8005188 <DMA_CalcBaseAndBitshift+0xac>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <DMA_CalcBaseAndBitshift+0xae>
 8005188:	2300      	movs	r3, #0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d024      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	3b10      	subs	r3, #16
 8005196:	4a27      	ldr	r2, [pc, #156]	; (8005234 <DMA_CalcBaseAndBitshift+0x158>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	4a24      	ldr	r2, [pc, #144]	; (8005238 <DMA_CalcBaseAndBitshift+0x15c>)
 80051a8:	5cd3      	ldrb	r3, [r2, r3]
 80051aa:	461a      	mov	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d908      	bls.n	80051c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b1f      	ldr	r3, [pc, #124]	; (800523c <DMA_CalcBaseAndBitshift+0x160>)
 80051be:	4013      	ands	r3, r2
 80051c0:	1d1a      	adds	r2, r3, #4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	659a      	str	r2, [r3, #88]	; 0x58
 80051c6:	e00d      	b.n	80051e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <DMA_CalcBaseAndBitshift+0x160>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6593      	str	r3, [r2, #88]	; 0x58
 80051d6:	e005      	b.n	80051e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	40020010 	.word	0x40020010
 80051f8:	40020028 	.word	0x40020028
 80051fc:	40020040 	.word	0x40020040
 8005200:	40020058 	.word	0x40020058
 8005204:	40020070 	.word	0x40020070
 8005208:	40020088 	.word	0x40020088
 800520c:	400200a0 	.word	0x400200a0
 8005210:	400200b8 	.word	0x400200b8
 8005214:	40020410 	.word	0x40020410
 8005218:	40020428 	.word	0x40020428
 800521c:	40020440 	.word	0x40020440
 8005220:	40020458 	.word	0x40020458
 8005224:	40020470 	.word	0x40020470
 8005228:	40020488 	.word	0x40020488
 800522c:	400204a0 	.word	0x400204a0
 8005230:	400204b8 	.word	0x400204b8
 8005234:	aaaaaaab 	.word	0xaaaaaaab
 8005238:	0800cc48 	.word	0x0800cc48
 800523c:	fffffc00 	.word	0xfffffc00

08005240 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d120      	bne.n	8005296 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	2b03      	cmp	r3, #3
 800525a:	d858      	bhi.n	800530e <DMA_CheckFifoParam+0xce>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <DMA_CheckFifoParam+0x24>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005275 	.word	0x08005275
 8005268:	08005287 	.word	0x08005287
 800526c:	08005275 	.word	0x08005275
 8005270:	0800530f 	.word	0x0800530f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d048      	beq.n	8005312 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005284:	e045      	b.n	8005312 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800528e:	d142      	bne.n	8005316 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005294:	e03f      	b.n	8005316 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529e:	d123      	bne.n	80052e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d838      	bhi.n	800531a <DMA_CheckFifoParam+0xda>
 80052a8:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <DMA_CheckFifoParam+0x70>)
 80052aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ae:	bf00      	nop
 80052b0:	080052c1 	.word	0x080052c1
 80052b4:	080052c7 	.word	0x080052c7
 80052b8:	080052c1 	.word	0x080052c1
 80052bc:	080052d9 	.word	0x080052d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
        break;
 80052c4:	e030      	b.n	8005328 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d025      	beq.n	800531e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052d6:	e022      	b.n	800531e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052e0:	d11f      	bne.n	8005322 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052e6:	e01c      	b.n	8005322 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d902      	bls.n	80052f6 <DMA_CheckFifoParam+0xb6>
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d003      	beq.n	80052fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80052f4:	e018      	b.n	8005328 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
        break;
 80052fa:	e015      	b.n	8005328 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00e      	beq.n	8005326 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
    break;
 800530c:	e00b      	b.n	8005326 <DMA_CheckFifoParam+0xe6>
        break;
 800530e:	bf00      	nop
 8005310:	e00a      	b.n	8005328 <DMA_CheckFifoParam+0xe8>
        break;
 8005312:	bf00      	nop
 8005314:	e008      	b.n	8005328 <DMA_CheckFifoParam+0xe8>
        break;
 8005316:	bf00      	nop
 8005318:	e006      	b.n	8005328 <DMA_CheckFifoParam+0xe8>
        break;
 800531a:	bf00      	nop
 800531c:	e004      	b.n	8005328 <DMA_CheckFifoParam+0xe8>
        break;
 800531e:	bf00      	nop
 8005320:	e002      	b.n	8005328 <DMA_CheckFifoParam+0xe8>
        break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <DMA_CheckFifoParam+0xe8>
    break;
 8005326:	bf00      	nop
    }
  }

  return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop

08005338 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a38      	ldr	r2, [pc, #224]	; (800542c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d022      	beq.n	8005396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a36      	ldr	r2, [pc, #216]	; (8005430 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01d      	beq.n	8005396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a35      	ldr	r2, [pc, #212]	; (8005434 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a33      	ldr	r2, [pc, #204]	; (8005438 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a32      	ldr	r2, [pc, #200]	; (800543c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a30      	ldr	r2, [pc, #192]	; (8005440 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2f      	ldr	r2, [pc, #188]	; (8005444 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2d      	ldr	r2, [pc, #180]	; (8005448 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d101      	bne.n	800539a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01a      	beq.n	80053d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	3b08      	subs	r3, #8
 80053a8:	4a28      	ldr	r2, [pc, #160]	; (800544c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	091b      	lsrs	r3, r3, #4
 80053b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4b26      	ldr	r3, [pc, #152]	; (8005450 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	461a      	mov	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a24      	ldr	r2, [pc, #144]	; (8005454 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80053c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	2201      	movs	r2, #1
 80053ce:	409a      	lsls	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80053d4:	e024      	b.n	8005420 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	3b10      	subs	r3, #16
 80053de:	4a1e      	ldr	r2, [pc, #120]	; (8005458 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a1c      	ldr	r2, [pc, #112]	; (800545c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d806      	bhi.n	80053fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d902      	bls.n	80053fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3308      	adds	r3, #8
 80053fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4b18      	ldr	r3, [pc, #96]	; (8005464 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	461a      	mov	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a16      	ldr	r2, [pc, #88]	; (8005468 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005410:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	2201      	movs	r2, #1
 800541a:	409a      	lsls	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	58025408 	.word	0x58025408
 8005430:	5802541c 	.word	0x5802541c
 8005434:	58025430 	.word	0x58025430
 8005438:	58025444 	.word	0x58025444
 800543c:	58025458 	.word	0x58025458
 8005440:	5802546c 	.word	0x5802546c
 8005444:	58025480 	.word	0x58025480
 8005448:	58025494 	.word	0x58025494
 800544c:	cccccccd 	.word	0xcccccccd
 8005450:	16009600 	.word	0x16009600
 8005454:	58025880 	.word	0x58025880
 8005458:	aaaaaaab 	.word	0xaaaaaaab
 800545c:	400204b8 	.word	0x400204b8
 8005460:	4002040f 	.word	0x4002040f
 8005464:	10008200 	.word	0x10008200
 8005468:	40020880 	.word	0x40020880

0800546c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d04a      	beq.n	8005518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d847      	bhi.n	8005518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a25      	ldr	r2, [pc, #148]	; (8005524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a24      	ldr	r2, [pc, #144]	; (8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d01d      	beq.n	80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a22      	ldr	r2, [pc, #136]	; (800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a21      	ldr	r2, [pc, #132]	; (8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1f      	ldr	r2, [pc, #124]	; (8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4b17      	ldr	r3, [pc, #92]	; (8005544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	461a      	mov	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80054f4:	671a      	str	r2, [r3, #112]	; 0x70
 80054f6:	e009      	b.n	800550c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4b14      	ldr	r3, [pc, #80]	; (800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	461a      	mov	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a11      	ldr	r2, [pc, #68]	; (8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800550a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3b01      	subs	r3, #1
 8005510:	2201      	movs	r2, #1
 8005512:	409a      	lsls	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	58025408 	.word	0x58025408
 8005528:	5802541c 	.word	0x5802541c
 800552c:	58025430 	.word	0x58025430
 8005530:	58025444 	.word	0x58025444
 8005534:	58025458 	.word	0x58025458
 8005538:	5802546c 	.word	0x5802546c
 800553c:	58025480 	.word	0x58025480
 8005540:	58025494 	.word	0x58025494
 8005544:	1600963f 	.word	0x1600963f
 8005548:	58025940 	.word	0x58025940
 800554c:	1000823f 	.word	0x1000823f
 8005550:	40020940 	.word	0x40020940

08005554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	; 0x24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005562:	4b89      	ldr	r3, [pc, #548]	; (8005788 <HAL_GPIO_Init+0x234>)
 8005564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005566:	e194      	b.n	8005892 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	2101      	movs	r1, #1
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8186 	beq.w	800588c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d005      	beq.n	8005598 <HAL_GPIO_Init+0x44>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d130      	bne.n	80055fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	2203      	movs	r2, #3
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055ce:	2201      	movs	r2, #1
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	f003 0201 	and.w	r2, r3, #1
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b03      	cmp	r3, #3
 8005604:	d017      	beq.n	8005636 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4013      	ands	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4313      	orrs	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d123      	bne.n	800568a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	08da      	lsrs	r2, r3, #3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3208      	adds	r2, #8
 800564a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	220f      	movs	r2, #15
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4313      	orrs	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	08da      	lsrs	r2, r3, #3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3208      	adds	r2, #8
 8005684:	69b9      	ldr	r1, [r7, #24]
 8005686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	2203      	movs	r2, #3
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f003 0203 	and.w	r2, r3, #3
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80e0 	beq.w	800588c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056cc:	4b2f      	ldr	r3, [pc, #188]	; (800578c <HAL_GPIO_Init+0x238>)
 80056ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056d2:	4a2e      	ldr	r2, [pc, #184]	; (800578c <HAL_GPIO_Init+0x238>)
 80056d4:	f043 0302 	orr.w	r3, r3, #2
 80056d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056dc:	4b2b      	ldr	r3, [pc, #172]	; (800578c <HAL_GPIO_Init+0x238>)
 80056de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ea:	4a29      	ldr	r2, [pc, #164]	; (8005790 <HAL_GPIO_Init+0x23c>)
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	3302      	adds	r3, #2
 80056f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	220f      	movs	r2, #15
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a20      	ldr	r2, [pc, #128]	; (8005794 <HAL_GPIO_Init+0x240>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d052      	beq.n	80057bc <HAL_GPIO_Init+0x268>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <HAL_GPIO_Init+0x244>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d031      	beq.n	8005782 <HAL_GPIO_Init+0x22e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1e      	ldr	r2, [pc, #120]	; (800579c <HAL_GPIO_Init+0x248>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d02b      	beq.n	800577e <HAL_GPIO_Init+0x22a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <HAL_GPIO_Init+0x24c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d025      	beq.n	800577a <HAL_GPIO_Init+0x226>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <HAL_GPIO_Init+0x250>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01f      	beq.n	8005776 <HAL_GPIO_Init+0x222>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1b      	ldr	r2, [pc, #108]	; (80057a8 <HAL_GPIO_Init+0x254>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d019      	beq.n	8005772 <HAL_GPIO_Init+0x21e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <HAL_GPIO_Init+0x258>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <HAL_GPIO_Init+0x21a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <HAL_GPIO_Init+0x25c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00d      	beq.n	800576a <HAL_GPIO_Init+0x216>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <HAL_GPIO_Init+0x260>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d007      	beq.n	8005766 <HAL_GPIO_Init+0x212>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <HAL_GPIO_Init+0x264>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d101      	bne.n	8005762 <HAL_GPIO_Init+0x20e>
 800575e:	2309      	movs	r3, #9
 8005760:	e02d      	b.n	80057be <HAL_GPIO_Init+0x26a>
 8005762:	230a      	movs	r3, #10
 8005764:	e02b      	b.n	80057be <HAL_GPIO_Init+0x26a>
 8005766:	2308      	movs	r3, #8
 8005768:	e029      	b.n	80057be <HAL_GPIO_Init+0x26a>
 800576a:	2307      	movs	r3, #7
 800576c:	e027      	b.n	80057be <HAL_GPIO_Init+0x26a>
 800576e:	2306      	movs	r3, #6
 8005770:	e025      	b.n	80057be <HAL_GPIO_Init+0x26a>
 8005772:	2305      	movs	r3, #5
 8005774:	e023      	b.n	80057be <HAL_GPIO_Init+0x26a>
 8005776:	2304      	movs	r3, #4
 8005778:	e021      	b.n	80057be <HAL_GPIO_Init+0x26a>
 800577a:	2303      	movs	r3, #3
 800577c:	e01f      	b.n	80057be <HAL_GPIO_Init+0x26a>
 800577e:	2302      	movs	r3, #2
 8005780:	e01d      	b.n	80057be <HAL_GPIO_Init+0x26a>
 8005782:	2301      	movs	r3, #1
 8005784:	e01b      	b.n	80057be <HAL_GPIO_Init+0x26a>
 8005786:	bf00      	nop
 8005788:	58000080 	.word	0x58000080
 800578c:	58024400 	.word	0x58024400
 8005790:	58000400 	.word	0x58000400
 8005794:	58020000 	.word	0x58020000
 8005798:	58020400 	.word	0x58020400
 800579c:	58020800 	.word	0x58020800
 80057a0:	58020c00 	.word	0x58020c00
 80057a4:	58021000 	.word	0x58021000
 80057a8:	58021400 	.word	0x58021400
 80057ac:	58021800 	.word	0x58021800
 80057b0:	58021c00 	.word	0x58021c00
 80057b4:	58022000 	.word	0x58022000
 80057b8:	58022400 	.word	0x58022400
 80057bc:	2300      	movs	r3, #0
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	f002 0203 	and.w	r2, r2, #3
 80057c4:	0092      	lsls	r2, r2, #2
 80057c6:	4093      	lsls	r3, r2
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057ce:	4938      	ldr	r1, [pc, #224]	; (80058b0 <HAL_GPIO_Init+0x35c>)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	089b      	lsrs	r3, r3, #2
 80057d4:	3302      	adds	r3, #2
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800580a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	43db      	mvns	r3, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4013      	ands	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	3301      	adds	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	f47f ae63 	bne.w	8005568 <HAL_GPIO_Init+0x14>
  }
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	3724      	adds	r7, #36	; 0x24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	58000400 	.word	0x58000400

080058b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
 80058d0:	e001      	b.n	80058d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
 80058f0:	4613      	mov	r3, r2
 80058f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058f4:	787b      	ldrb	r3, [r7, #1]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005900:	e003      	b.n	800590a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005902:	887b      	ldrh	r3, [r7, #2]
 8005904:	041a      	lsls	r2, r3, #16
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	619a      	str	r2, [r3, #24]
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005928:	887a      	ldrh	r2, [r7, #2]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4013      	ands	r3, r2
 800592e:	041a      	lsls	r2, r3, #16
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	43d9      	mvns	r1, r3
 8005934:	887b      	ldrh	r3, [r7, #2]
 8005936:	400b      	ands	r3, r1
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	619a      	str	r2, [r3, #24]
}
 800593e:	bf00      	nop
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e07f      	b.n	8005a5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fb fcba 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800599c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d107      	bne.n	80059c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	e006      	b.n	80059d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d104      	bne.n	80059e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6859      	ldr	r1, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_I2C_Init+0x11c>)
 80059f2:	430b      	orrs	r3, r1
 80059f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69d9      	ldr	r1, [r3, #28]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	02008000 	.word	0x02008000

08005a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d138      	bne.n	8005af4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e032      	b.n	8005af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2224      	movs	r2, #36	; 0x24
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005abe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6819      	ldr	r1, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	e000      	b.n	8005af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005af4:	2302      	movs	r3, #2
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d139      	bne.n	8005b8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e033      	b.n	8005b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2224      	movs	r2, #36	; 0x24
 8005b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0201 	bic.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ba4:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <HAL_PWREx_ConfigSupply+0x70>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d00a      	beq.n	8005bc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005bb0:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <HAL_PWREx_ConfigSupply+0x70>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d001      	beq.n	8005bc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e01f      	b.n	8005c02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e01d      	b.n	8005c02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <HAL_PWREx_ConfigSupply+0x70>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f023 0207 	bic.w	r2, r3, #7
 8005bce:	490f      	ldr	r1, [pc, #60]	; (8005c0c <HAL_PWREx_ConfigSupply+0x70>)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005bd6:	f7fc fd35 	bl	8002644 <HAL_GetTick>
 8005bda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bdc:	e009      	b.n	8005bf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005bde:	f7fc fd31 	bl	8002644 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bec:	d901      	bls.n	8005bf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e007      	b.n	8005c02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bf2:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <HAL_PWREx_ConfigSupply+0x70>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfe:	d1ee      	bne.n	8005bde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	58024800 	.word	0x58024800

08005c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08c      	sub	sp, #48	; 0x30
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f000 bc1d 	b.w	800645e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8087 	beq.w	8005d40 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c32:	4b99      	ldr	r3, [pc, #612]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c3c:	4b96      	ldr	r3, [pc, #600]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d007      	beq.n	8005c58 <HAL_RCC_OscConfig+0x48>
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	2b18      	cmp	r3, #24
 8005c4c:	d110      	bne.n	8005c70 <HAL_RCC_OscConfig+0x60>
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d10b      	bne.n	8005c70 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c58:	4b8f      	ldr	r3, [pc, #572]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d06c      	beq.n	8005d3e <HAL_RCC_OscConfig+0x12e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d168      	bne.n	8005d3e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e3f6      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c78:	d106      	bne.n	8005c88 <HAL_RCC_OscConfig+0x78>
 8005c7a:	4b87      	ldr	r3, [pc, #540]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a86      	ldr	r2, [pc, #536]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	e02e      	b.n	8005ce6 <HAL_RCC_OscConfig+0xd6>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10c      	bne.n	8005caa <HAL_RCC_OscConfig+0x9a>
 8005c90:	4b81      	ldr	r3, [pc, #516]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a80      	ldr	r2, [pc, #512]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	4b7e      	ldr	r3, [pc, #504]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a7d      	ldr	r2, [pc, #500]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e01d      	b.n	8005ce6 <HAL_RCC_OscConfig+0xd6>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb2:	d10c      	bne.n	8005cce <HAL_RCC_OscConfig+0xbe>
 8005cb4:	4b78      	ldr	r3, [pc, #480]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a77      	ldr	r2, [pc, #476]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	4b75      	ldr	r3, [pc, #468]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a74      	ldr	r2, [pc, #464]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	e00b      	b.n	8005ce6 <HAL_RCC_OscConfig+0xd6>
 8005cce:	4b72      	ldr	r3, [pc, #456]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a71      	ldr	r2, [pc, #452]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4b6f      	ldr	r3, [pc, #444]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a6e      	ldr	r2, [pc, #440]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d013      	beq.n	8005d16 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cee:	f7fc fca9 	bl	8002644 <HAL_GetTick>
 8005cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf6:	f7fc fca5 	bl	8002644 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b64      	cmp	r3, #100	; 0x64
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e3aa      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d08:	4b63      	ldr	r3, [pc, #396]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0f0      	beq.n	8005cf6 <HAL_RCC_OscConfig+0xe6>
 8005d14:	e014      	b.n	8005d40 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fc fc95 	bl	8002644 <HAL_GetTick>
 8005d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d1e:	f7fc fc91 	bl	8002644 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b64      	cmp	r3, #100	; 0x64
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e396      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d30:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f0      	bne.n	8005d1e <HAL_RCC_OscConfig+0x10e>
 8005d3c:	e000      	b.n	8005d40 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80cb 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4e:	4b52      	ldr	r3, [pc, #328]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d56:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d58:	4b4f      	ldr	r3, [pc, #316]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_RCC_OscConfig+0x164>
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	2b18      	cmp	r3, #24
 8005d68:	d156      	bne.n	8005e18 <HAL_RCC_OscConfig+0x208>
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d151      	bne.n	8005e18 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d74:	4b48      	ldr	r3, [pc, #288]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCC_OscConfig+0x17c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e368      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d8c:	4b42      	ldr	r3, [pc, #264]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f023 0219 	bic.w	r2, r3, #25
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	493f      	ldr	r1, [pc, #252]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d9e:	f7fc fc51 	bl	8002644 <HAL_GetTick>
 8005da2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da6:	f7fc fc4d 	bl	8002644 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e352      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005db8:	4b37      	ldr	r3, [pc, #220]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0f0      	beq.n	8005da6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc4:	f7fc fc6e 	bl	80026a4 <HAL_GetREVID>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f241 0203 	movw	r2, #4099	; 0x1003
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d817      	bhi.n	8005e02 <HAL_RCC_OscConfig+0x1f2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d108      	bne.n	8005dec <HAL_RCC_OscConfig+0x1dc>
 8005dda:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005de2:	4a2d      	ldr	r2, [pc, #180]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dea:	e07b      	b.n	8005ee4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dec:	4b2a      	ldr	r3, [pc, #168]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	031b      	lsls	r3, r3, #12
 8005dfa:	4927      	ldr	r1, [pc, #156]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e00:	e070      	b.n	8005ee4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e02:	4b25      	ldr	r3, [pc, #148]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	061b      	lsls	r3, r3, #24
 8005e10:	4921      	ldr	r1, [pc, #132]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e16:	e065      	b.n	8005ee4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d048      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e20:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f023 0219 	bic.w	r2, r3, #25
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	491a      	ldr	r1, [pc, #104]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fc fc07 	bl	8002644 <HAL_GetTick>
 8005e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e3a:	f7fc fc03 	bl	8002644 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e308      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e4c:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0f0      	beq.n	8005e3a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e58:	f7fc fc24 	bl	80026a4 <HAL_GetREVID>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d81a      	bhi.n	8005e9c <HAL_RCC_OscConfig+0x28c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b40      	cmp	r3, #64	; 0x40
 8005e6c:	d108      	bne.n	8005e80 <HAL_RCC_OscConfig+0x270>
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e76:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7c:	6053      	str	r3, [r2, #4]
 8005e7e:	e031      	b.n	8005ee4 <HAL_RCC_OscConfig+0x2d4>
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	031b      	lsls	r3, r3, #12
 8005e8e:	4902      	ldr	r1, [pc, #8]	; (8005e98 <HAL_RCC_OscConfig+0x288>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	604b      	str	r3, [r1, #4]
 8005e94:	e026      	b.n	8005ee4 <HAL_RCC_OscConfig+0x2d4>
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
 8005e9c:	4b9a      	ldr	r3, [pc, #616]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	061b      	lsls	r3, r3, #24
 8005eaa:	4997      	ldr	r1, [pc, #604]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	604b      	str	r3, [r1, #4]
 8005eb0:	e018      	b.n	8005ee4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eb2:	4b95      	ldr	r3, [pc, #596]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a94      	ldr	r2, [pc, #592]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005eb8:	f023 0301 	bic.w	r3, r3, #1
 8005ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebe:	f7fc fbc1 	bl	8002644 <HAL_GetTick>
 8005ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec6:	f7fc fbbd 	bl	8002644 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e2c2      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ed8:	4b8b      	ldr	r3, [pc, #556]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f0      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0310 	and.w	r3, r3, #16
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80a9 	beq.w	8006044 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ef2:	4b85      	ldr	r3, [pc, #532]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005efa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005efc:	4b82      	ldr	r3, [pc, #520]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d007      	beq.n	8005f18 <HAL_RCC_OscConfig+0x308>
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	2b18      	cmp	r3, #24
 8005f0c:	d13a      	bne.n	8005f84 <HAL_RCC_OscConfig+0x374>
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d135      	bne.n	8005f84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f18:	4b7b      	ldr	r3, [pc, #492]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_RCC_OscConfig+0x320>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e296      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f30:	f7fc fbb8 	bl	80026a4 <HAL_GetREVID>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d817      	bhi.n	8005f6e <HAL_RCC_OscConfig+0x35e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d108      	bne.n	8005f58 <HAL_RCC_OscConfig+0x348>
 8005f46:	4b70      	ldr	r3, [pc, #448]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005f4e:	4a6e      	ldr	r2, [pc, #440]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f56:	e075      	b.n	8006044 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f58:	4b6b      	ldr	r3, [pc, #428]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	069b      	lsls	r3, r3, #26
 8005f66:	4968      	ldr	r1, [pc, #416]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f6c:	e06a      	b.n	8006044 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f6e:	4b66      	ldr	r3, [pc, #408]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	061b      	lsls	r3, r3, #24
 8005f7c:	4962      	ldr	r1, [pc, #392]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f82:	e05f      	b.n	8006044 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d042      	beq.n	8006012 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f8c:	4b5e      	ldr	r3, [pc, #376]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a5d      	ldr	r2, [pc, #372]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fc fb54 	bl	8002644 <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005fa0:	f7fc fb50 	bl	8002644 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e255      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fb2:	4b55      	ldr	r3, [pc, #340]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fbe:	f7fc fb71 	bl	80026a4 <HAL_GetREVID>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d817      	bhi.n	8005ffc <HAL_RCC_OscConfig+0x3ec>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d108      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x3d6>
 8005fd4:	4b4c      	ldr	r3, [pc, #304]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fdc:	4a4a      	ldr	r2, [pc, #296]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fe2:	6053      	str	r3, [r2, #4]
 8005fe4:	e02e      	b.n	8006044 <HAL_RCC_OscConfig+0x434>
 8005fe6:	4b48      	ldr	r3, [pc, #288]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	069b      	lsls	r3, r3, #26
 8005ff4:	4944      	ldr	r1, [pc, #272]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	604b      	str	r3, [r1, #4]
 8005ffa:	e023      	b.n	8006044 <HAL_RCC_OscConfig+0x434>
 8005ffc:	4b42      	ldr	r3, [pc, #264]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	061b      	lsls	r3, r3, #24
 800600a:	493f      	ldr	r1, [pc, #252]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 800600c:	4313      	orrs	r3, r2
 800600e:	60cb      	str	r3, [r1, #12]
 8006010:	e018      	b.n	8006044 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006012:	4b3d      	ldr	r3, [pc, #244]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a3c      	ldr	r2, [pc, #240]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8006018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601e:	f7fc fb11 	bl	8002644 <HAL_GetTick>
 8006022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006026:	f7fc fb0d 	bl	8002644 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e212      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006038:	4b33      	ldr	r3, [pc, #204]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f0      	bne.n	8006026 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d036      	beq.n	80060be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d019      	beq.n	800608c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006058:	4b2b      	ldr	r3, [pc, #172]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 800605a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605c:	4a2a      	ldr	r2, [pc, #168]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006064:	f7fc faee 	bl	8002644 <HAL_GetTick>
 8006068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800606c:	f7fc faea 	bl	8002644 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e1ef      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800607e:	4b22      	ldr	r3, [pc, #136]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8006080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f0      	beq.n	800606c <HAL_RCC_OscConfig+0x45c>
 800608a:	e018      	b.n	80060be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800608c:	4b1e      	ldr	r3, [pc, #120]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 800608e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006090:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fc fad4 	bl	8002644 <HAL_GetTick>
 800609c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a0:	f7fc fad0 	bl	8002644 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e1d5      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060b2:	4b15      	ldr	r3, [pc, #84]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 80060b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f0      	bne.n	80060a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d039      	beq.n	800613e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01c      	beq.n	800610c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060d2:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a0c      	ldr	r2, [pc, #48]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 80060d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060de:	f7fc fab1 	bl	8002644 <HAL_GetTick>
 80060e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060e6:	f7fc faad 	bl	8002644 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e1b2      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060f8:	4b03      	ldr	r3, [pc, #12]	; (8006108 <HAL_RCC_OscConfig+0x4f8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCC_OscConfig+0x4d6>
 8006104:	e01b      	b.n	800613e <HAL_RCC_OscConfig+0x52e>
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800610c:	4b9b      	ldr	r3, [pc, #620]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a9a      	ldr	r2, [pc, #616]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006116:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006118:	f7fc fa94 	bl	8002644 <HAL_GetTick>
 800611c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006120:	f7fc fa90 	bl	8002644 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e195      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006132:	4b92      	ldr	r3, [pc, #584]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f0      	bne.n	8006120 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 8081 	beq.w	800624e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800614c:	4b8c      	ldr	r3, [pc, #560]	; (8006380 <HAL_RCC_OscConfig+0x770>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a8b      	ldr	r2, [pc, #556]	; (8006380 <HAL_RCC_OscConfig+0x770>)
 8006152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006158:	f7fc fa74 	bl	8002644 <HAL_GetTick>
 800615c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006160:	f7fc fa70 	bl	8002644 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b64      	cmp	r3, #100	; 0x64
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e175      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006172:	4b83      	ldr	r3, [pc, #524]	; (8006380 <HAL_RCC_OscConfig+0x770>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d106      	bne.n	8006194 <HAL_RCC_OscConfig+0x584>
 8006186:	4b7d      	ldr	r3, [pc, #500]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	4a7c      	ldr	r2, [pc, #496]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	6713      	str	r3, [r2, #112]	; 0x70
 8006192:	e02d      	b.n	80061f0 <HAL_RCC_OscConfig+0x5e0>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10c      	bne.n	80061b6 <HAL_RCC_OscConfig+0x5a6>
 800619c:	4b77      	ldr	r3, [pc, #476]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	4a76      	ldr	r2, [pc, #472]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	6713      	str	r3, [r2, #112]	; 0x70
 80061a8:	4b74      	ldr	r3, [pc, #464]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ac:	4a73      	ldr	r2, [pc, #460]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061ae:	f023 0304 	bic.w	r3, r3, #4
 80061b2:	6713      	str	r3, [r2, #112]	; 0x70
 80061b4:	e01c      	b.n	80061f0 <HAL_RCC_OscConfig+0x5e0>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d10c      	bne.n	80061d8 <HAL_RCC_OscConfig+0x5c8>
 80061be:	4b6f      	ldr	r3, [pc, #444]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	4a6e      	ldr	r2, [pc, #440]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061c4:	f043 0304 	orr.w	r3, r3, #4
 80061c8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ca:	4b6c      	ldr	r3, [pc, #432]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ce:	4a6b      	ldr	r2, [pc, #428]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061d0:	f043 0301 	orr.w	r3, r3, #1
 80061d4:	6713      	str	r3, [r2, #112]	; 0x70
 80061d6:	e00b      	b.n	80061f0 <HAL_RCC_OscConfig+0x5e0>
 80061d8:	4b68      	ldr	r3, [pc, #416]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061dc:	4a67      	ldr	r2, [pc, #412]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	6713      	str	r3, [r2, #112]	; 0x70
 80061e4:	4b65      	ldr	r3, [pc, #404]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e8:	4a64      	ldr	r2, [pc, #400]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80061ea:	f023 0304 	bic.w	r3, r3, #4
 80061ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d015      	beq.n	8006224 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f8:	f7fc fa24 	bl	8002644 <HAL_GetTick>
 80061fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061fe:	e00a      	b.n	8006216 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006200:	f7fc fa20 	bl	8002644 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	f241 3288 	movw	r2, #5000	; 0x1388
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e123      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006216:	4b59      	ldr	r3, [pc, #356]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0ee      	beq.n	8006200 <HAL_RCC_OscConfig+0x5f0>
 8006222:	e014      	b.n	800624e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006224:	f7fc fa0e 	bl	8002644 <HAL_GetTick>
 8006228:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800622a:	e00a      	b.n	8006242 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800622c:	f7fc fa0a 	bl	8002644 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	f241 3288 	movw	r2, #5000	; 0x1388
 800623a:	4293      	cmp	r3, r2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e10d      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006242:	4b4e      	ldr	r3, [pc, #312]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1ee      	bne.n	800622c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 8102 	beq.w	800645c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006258:	4b48      	ldr	r3, [pc, #288]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006260:	2b18      	cmp	r3, #24
 8006262:	f000 80bd 	beq.w	80063e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	2b02      	cmp	r3, #2
 800626c:	f040 809e 	bne.w	80063ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006270:	4b42      	ldr	r3, [pc, #264]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a41      	ldr	r2, [pc, #260]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800627a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627c:	f7fc f9e2 	bl	8002644 <HAL_GetTick>
 8006280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006284:	f7fc f9de 	bl	8002644 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e0e3      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006296:	4b39      	ldr	r3, [pc, #228]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062a2:	4b36      	ldr	r3, [pc, #216]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80062a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062a6:	4b37      	ldr	r3, [pc, #220]	; (8006384 <HAL_RCC_OscConfig+0x774>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062b2:	0112      	lsls	r2, r2, #4
 80062b4:	430a      	orrs	r2, r1
 80062b6:	4931      	ldr	r1, [pc, #196]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	628b      	str	r3, [r1, #40]	; 0x28
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	3b01      	subs	r3, #1
 80062c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ca:	3b01      	subs	r3, #1
 80062cc:	025b      	lsls	r3, r3, #9
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	3b01      	subs	r3, #1
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e4:	3b01      	subs	r3, #1
 80062e6:	061b      	lsls	r3, r3, #24
 80062e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062ec:	4923      	ldr	r1, [pc, #140]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80062f2:	4b22      	ldr	r3, [pc, #136]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	4a21      	ldr	r2, [pc, #132]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062fe:	4b1f      	ldr	r3, [pc, #124]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006302:	4b21      	ldr	r3, [pc, #132]	; (8006388 <HAL_RCC_OscConfig+0x778>)
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800630a:	00d2      	lsls	r2, r2, #3
 800630c:	491b      	ldr	r1, [pc, #108]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 800630e:	4313      	orrs	r3, r2
 8006310:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006312:	4b1a      	ldr	r3, [pc, #104]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006316:	f023 020c 	bic.w	r2, r3, #12
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	4917      	ldr	r1, [pc, #92]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006320:	4313      	orrs	r3, r2
 8006322:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006324:	4b15      	ldr	r3, [pc, #84]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	f023 0202 	bic.w	r2, r3, #2
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006330:	4912      	ldr	r1, [pc, #72]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006332:	4313      	orrs	r3, r2
 8006334:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006336:	4b11      	ldr	r3, [pc, #68]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633a:	4a10      	ldr	r2, [pc, #64]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006340:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006342:	4b0e      	ldr	r3, [pc, #56]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	4a0d      	ldr	r2, [pc, #52]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800634c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	4a0a      	ldr	r2, [pc, #40]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006358:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800635a:	4b08      	ldr	r3, [pc, #32]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	4a07      	ldr	r2, [pc, #28]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006360:	f043 0301 	orr.w	r3, r3, #1
 8006364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006366:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a04      	ldr	r2, [pc, #16]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 800636c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006372:	f7fc f967 	bl	8002644 <HAL_GetTick>
 8006376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006378:	e011      	b.n	800639e <HAL_RCC_OscConfig+0x78e>
 800637a:	bf00      	nop
 800637c:	58024400 	.word	0x58024400
 8006380:	58024800 	.word	0x58024800
 8006384:	fffffc0c 	.word	0xfffffc0c
 8006388:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800638c:	f7fc f95a 	bl	8002644 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e05f      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800639e:	4b32      	ldr	r3, [pc, #200]	; (8006468 <HAL_RCC_OscConfig+0x858>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0x77c>
 80063aa:	e057      	b.n	800645c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ac:	4b2e      	ldr	r3, [pc, #184]	; (8006468 <HAL_RCC_OscConfig+0x858>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a2d      	ldr	r2, [pc, #180]	; (8006468 <HAL_RCC_OscConfig+0x858>)
 80063b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fc f944 	bl	8002644 <HAL_GetTick>
 80063bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fc f940 	bl	8002644 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e045      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063d2:	4b25      	ldr	r3, [pc, #148]	; (8006468 <HAL_RCC_OscConfig+0x858>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x7b0>
 80063de:	e03d      	b.n	800645c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80063e0:	4b21      	ldr	r3, [pc, #132]	; (8006468 <HAL_RCC_OscConfig+0x858>)
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80063e6:	4b20      	ldr	r3, [pc, #128]	; (8006468 <HAL_RCC_OscConfig+0x858>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d031      	beq.n	8006458 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f003 0203 	and.w	r2, r3, #3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063fe:	429a      	cmp	r2, r3
 8006400:	d12a      	bne.n	8006458 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640e:	429a      	cmp	r2, r3
 8006410:	d122      	bne.n	8006458 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800641e:	429a      	cmp	r2, r3
 8006420:	d11a      	bne.n	8006458 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	0a5b      	lsrs	r3, r3, #9
 8006426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006430:	429a      	cmp	r2, r3
 8006432:	d111      	bne.n	8006458 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006442:	429a      	cmp	r2, r3
 8006444:	d108      	bne.n	8006458 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	0e1b      	lsrs	r3, r3, #24
 800644a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e000      	b.n	800645e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3730      	adds	r7, #48	; 0x30
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	58024400 	.word	0x58024400

0800646c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e19c      	b.n	80067ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006480:	4b8a      	ldr	r3, [pc, #552]	; (80066ac <HAL_RCC_ClockConfig+0x240>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d910      	bls.n	80064b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648e:	4b87      	ldr	r3, [pc, #540]	; (80066ac <HAL_RCC_ClockConfig+0x240>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f023 020f 	bic.w	r2, r3, #15
 8006496:	4985      	ldr	r1, [pc, #532]	; (80066ac <HAL_RCC_ClockConfig+0x240>)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	4313      	orrs	r3, r2
 800649c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800649e:	4b83      	ldr	r3, [pc, #524]	; (80066ac <HAL_RCC_ClockConfig+0x240>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d001      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e184      	b.n	80067ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d010      	beq.n	80064de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	4b7b      	ldr	r3, [pc, #492]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d908      	bls.n	80064de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064cc:	4b78      	ldr	r3, [pc, #480]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	4975      	ldr	r1, [pc, #468]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d010      	beq.n	800650c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	4b70      	ldr	r3, [pc, #448]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d908      	bls.n	800650c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064fa:	4b6d      	ldr	r3, [pc, #436]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	496a      	ldr	r1, [pc, #424]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 8006508:	4313      	orrs	r3, r2
 800650a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699a      	ldr	r2, [r3, #24]
 800651c:	4b64      	ldr	r3, [pc, #400]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006524:	429a      	cmp	r2, r3
 8006526:	d908      	bls.n	800653a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006528:	4b61      	ldr	r3, [pc, #388]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	495e      	ldr	r1, [pc, #376]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 8006536:	4313      	orrs	r3, r2
 8006538:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d010      	beq.n	8006568 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69da      	ldr	r2, [r3, #28]
 800654a:	4b59      	ldr	r3, [pc, #356]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006552:	429a      	cmp	r2, r3
 8006554:	d908      	bls.n	8006568 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006556:	4b56      	ldr	r3, [pc, #344]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	4953      	ldr	r1, [pc, #332]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 8006564:	4313      	orrs	r3, r2
 8006566:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d010      	beq.n	8006596 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	4b4d      	ldr	r3, [pc, #308]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	429a      	cmp	r2, r3
 8006582:	d908      	bls.n	8006596 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006584:	4b4a      	ldr	r3, [pc, #296]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	f023 020f 	bic.w	r2, r3, #15
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4947      	ldr	r1, [pc, #284]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 8006592:	4313      	orrs	r3, r2
 8006594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d055      	beq.n	800664e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80065a2:	4b43      	ldr	r3, [pc, #268]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	4940      	ldr	r1, [pc, #256]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d107      	bne.n	80065cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065bc:	4b3c      	ldr	r3, [pc, #240]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d121      	bne.n	800660c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0f6      	b.n	80067ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d107      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065d4:	4b36      	ldr	r3, [pc, #216]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d115      	bne.n	800660c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0ea      	b.n	80067ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d107      	bne.n	80065fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065ec:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0de      	b.n	80067ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065fc:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e0d6      	b.n	80067ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800660c:	4b28      	ldr	r3, [pc, #160]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f023 0207 	bic.w	r2, r3, #7
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4925      	ldr	r1, [pc, #148]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 800661a:	4313      	orrs	r3, r2
 800661c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661e:	f7fc f811 	bl	8002644 <HAL_GetTick>
 8006622:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006624:	e00a      	b.n	800663c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006626:	f7fc f80d 	bl	8002644 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	f241 3288 	movw	r2, #5000	; 0x1388
 8006634:	4293      	cmp	r3, r2
 8006636:	d901      	bls.n	800663c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e0be      	b.n	80067ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663c:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	429a      	cmp	r2, r3
 800664c:	d1eb      	bne.n	8006626 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d010      	beq.n	800667c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	429a      	cmp	r2, r3
 8006668:	d208      	bcs.n	800667c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800666a:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f023 020f 	bic.w	r2, r3, #15
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	490e      	ldr	r1, [pc, #56]	; (80066b0 <HAL_RCC_ClockConfig+0x244>)
 8006678:	4313      	orrs	r3, r2
 800667a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <HAL_RCC_ClockConfig+0x240>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d214      	bcs.n	80066b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668a:	4b08      	ldr	r3, [pc, #32]	; (80066ac <HAL_RCC_ClockConfig+0x240>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f023 020f 	bic.w	r2, r3, #15
 8006692:	4906      	ldr	r1, [pc, #24]	; (80066ac <HAL_RCC_ClockConfig+0x240>)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	4313      	orrs	r3, r2
 8006698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800669a:	4b04      	ldr	r3, [pc, #16]	; (80066ac <HAL_RCC_ClockConfig+0x240>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d005      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e086      	b.n	80067ba <HAL_RCC_ClockConfig+0x34e>
 80066ac:	52002000 	.word	0x52002000
 80066b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d010      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	4b3f      	ldr	r3, [pc, #252]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d208      	bcs.n	80066e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066d0:	4b3c      	ldr	r3, [pc, #240]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	4939      	ldr	r1, [pc, #228]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d010      	beq.n	8006710 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	4b34      	ldr	r3, [pc, #208]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d208      	bcs.n	8006710 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066fe:	4b31      	ldr	r3, [pc, #196]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	492e      	ldr	r1, [pc, #184]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 800670c:	4313      	orrs	r3, r2
 800670e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b00      	cmp	r3, #0
 800671a:	d010      	beq.n	800673e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	4b28      	ldr	r3, [pc, #160]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006728:	429a      	cmp	r2, r3
 800672a:	d208      	bcs.n	800673e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800672c:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	4922      	ldr	r1, [pc, #136]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 800673a:	4313      	orrs	r3, r2
 800673c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d010      	beq.n	800676c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69da      	ldr	r2, [r3, #28]
 800674e:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006756:	429a      	cmp	r2, r3
 8006758:	d208      	bcs.n	800676c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800675a:	4b1a      	ldr	r3, [pc, #104]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	4917      	ldr	r1, [pc, #92]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 8006768:	4313      	orrs	r3, r2
 800676a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800676c:	f000 f834 	bl	80067d8 <HAL_RCC_GetSysClockFreq>
 8006770:	4602      	mov	r2, r0
 8006772:	4b14      	ldr	r3, [pc, #80]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	0a1b      	lsrs	r3, r3, #8
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	4912      	ldr	r1, [pc, #72]	; (80067c8 <HAL_RCC_ClockConfig+0x35c>)
 800677e:	5ccb      	ldrb	r3, [r1, r3]
 8006780:	f003 031f 	and.w	r3, r3, #31
 8006784:	fa22 f303 	lsr.w	r3, r2, r3
 8006788:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800678a:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <HAL_RCC_ClockConfig+0x358>)
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	4a0d      	ldr	r2, [pc, #52]	; (80067c8 <HAL_RCC_ClockConfig+0x35c>)
 8006794:	5cd3      	ldrb	r3, [r2, r3]
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
 80067a0:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <HAL_RCC_ClockConfig+0x360>)
 80067a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067a4:	4a0a      	ldr	r2, [pc, #40]	; (80067d0 <HAL_RCC_ClockConfig+0x364>)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80067aa:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <HAL_RCC_ClockConfig+0x368>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fb fefe 	bl	80025b0 <HAL_InitTick>
 80067b4:	4603      	mov	r3, r0
 80067b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	58024400 	.word	0x58024400
 80067c8:	0800cc38 	.word	0x0800cc38
 80067cc:	24000014 	.word	0x24000014
 80067d0:	24000010 	.word	0x24000010
 80067d4:	24000018 	.word	0x24000018

080067d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	b089      	sub	sp, #36	; 0x24
 80067dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067de:	4bb3      	ldr	r3, [pc, #716]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067e6:	2b18      	cmp	r3, #24
 80067e8:	f200 8155 	bhi.w	8006a96 <HAL_RCC_GetSysClockFreq+0x2be>
 80067ec:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006859 	.word	0x08006859
 80067f8:	08006a97 	.word	0x08006a97
 80067fc:	08006a97 	.word	0x08006a97
 8006800:	08006a97 	.word	0x08006a97
 8006804:	08006a97 	.word	0x08006a97
 8006808:	08006a97 	.word	0x08006a97
 800680c:	08006a97 	.word	0x08006a97
 8006810:	08006a97 	.word	0x08006a97
 8006814:	0800687f 	.word	0x0800687f
 8006818:	08006a97 	.word	0x08006a97
 800681c:	08006a97 	.word	0x08006a97
 8006820:	08006a97 	.word	0x08006a97
 8006824:	08006a97 	.word	0x08006a97
 8006828:	08006a97 	.word	0x08006a97
 800682c:	08006a97 	.word	0x08006a97
 8006830:	08006a97 	.word	0x08006a97
 8006834:	08006885 	.word	0x08006885
 8006838:	08006a97 	.word	0x08006a97
 800683c:	08006a97 	.word	0x08006a97
 8006840:	08006a97 	.word	0x08006a97
 8006844:	08006a97 	.word	0x08006a97
 8006848:	08006a97 	.word	0x08006a97
 800684c:	08006a97 	.word	0x08006a97
 8006850:	08006a97 	.word	0x08006a97
 8006854:	0800688b 	.word	0x0800688b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006858:	4b94      	ldr	r3, [pc, #592]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006864:	4b91      	ldr	r3, [pc, #580]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	08db      	lsrs	r3, r3, #3
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	4a90      	ldr	r2, [pc, #576]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
 8006874:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006876:	e111      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006878:	4b8d      	ldr	r3, [pc, #564]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800687a:	61bb      	str	r3, [r7, #24]
    break;
 800687c:	e10e      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800687e:	4b8d      	ldr	r3, [pc, #564]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006880:	61bb      	str	r3, [r7, #24]
    break;
 8006882:	e10b      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006884:	4b8c      	ldr	r3, [pc, #560]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006886:	61bb      	str	r3, [r7, #24]
    break;
 8006888:	e108      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800688a:	4b88      	ldr	r3, [pc, #544]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006894:	4b85      	ldr	r3, [pc, #532]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	091b      	lsrs	r3, r3, #4
 800689a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800689e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80068a0:	4b82      	ldr	r3, [pc, #520]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80068aa:	4b80      	ldr	r3, [pc, #512]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ae:	08db      	lsrs	r3, r3, #3
 80068b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
 80068ba:	ee07 3a90 	vmov	s15, r3
 80068be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80e1 	beq.w	8006a90 <HAL_RCC_GetSysClockFreq+0x2b8>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	f000 8083 	beq.w	80069dc <HAL_RCC_GetSysClockFreq+0x204>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	f200 80a1 	bhi.w	8006a20 <HAL_RCC_GetSysClockFreq+0x248>
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <HAL_RCC_GetSysClockFreq+0x114>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d056      	beq.n	8006998 <HAL_RCC_GetSysClockFreq+0x1c0>
 80068ea:	e099      	b.n	8006a20 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ec:	4b6f      	ldr	r3, [pc, #444]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d02d      	beq.n	8006954 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068f8:	4b6c      	ldr	r3, [pc, #432]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	08db      	lsrs	r3, r3, #3
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	4a6b      	ldr	r2, [pc, #428]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	ee07 3a90 	vmov	s15, r3
 8006910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006922:	4b62      	ldr	r3, [pc, #392]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006932:	ed97 6a02 	vldr	s12, [r7, #8]
 8006936:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006abc <HAL_RCC_GetSysClockFreq+0x2e4>
 800693a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800694a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006952:	e087      	b.n	8006a64 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006ac0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006966:	4b51      	ldr	r3, [pc, #324]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006976:	ed97 6a02 	vldr	s12, [r7, #8]
 800697a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006abc <HAL_RCC_GetSysClockFreq+0x2e4>
 800697e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800698a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006996:	e065      	b.n	8006a64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ac4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069aa:	4b40      	ldr	r3, [pc, #256]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80069be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006abc <HAL_RCC_GetSysClockFreq+0x2e4>
 80069c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069da:	e043      	b.n	8006a64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006ac8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80069ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ee:	4b2f      	ldr	r3, [pc, #188]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006abc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a1e:	e021      	b.n	8006a64 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006ac4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a32:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006abc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a62:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a64:	4b11      	ldr	r3, [pc, #68]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	0a5b      	lsrs	r3, r3, #9
 8006a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6e:	3301      	adds	r3, #1
 8006a70:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a88:	ee17 3a90 	vmov	r3, s15
 8006a8c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006a8e:	e005      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	61bb      	str	r3, [r7, #24]
    break;
 8006a94:	e002      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006a96:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a98:	61bb      	str	r3, [r7, #24]
    break;
 8006a9a:	bf00      	nop
  }

  return sysclockfreq;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3724      	adds	r7, #36	; 0x24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	03d09000 	.word	0x03d09000
 8006ab4:	003d0900 	.word	0x003d0900
 8006ab8:	02625a00 	.word	0x02625a00
 8006abc:	46000000 	.word	0x46000000
 8006ac0:	4c742400 	.word	0x4c742400
 8006ac4:	4a742400 	.word	0x4a742400
 8006ac8:	4c189680 	.word	0x4c189680

08006acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ad2:	f7ff fe81 	bl	80067d8 <HAL_RCC_GetSysClockFreq>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <HAL_RCC_GetHCLKFreq+0x50>)
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	0a1b      	lsrs	r3, r3, #8
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	490f      	ldr	r1, [pc, #60]	; (8006b20 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ae4:	5ccb      	ldrb	r3, [r1, r3]
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	fa22 f303 	lsr.w	r3, r2, r3
 8006aee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006af0:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <HAL_RCC_GetHCLKFreq+0x50>)
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <HAL_RCC_GetHCLKFreq+0x54>)
 8006afa:	5cd3      	ldrb	r3, [r2, r3]
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	fa22 f303 	lsr.w	r3, r2, r3
 8006b06:	4a07      	ldr	r2, [pc, #28]	; (8006b24 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b0a:	4a07      	ldr	r2, [pc, #28]	; (8006b28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b10:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b12:	681b      	ldr	r3, [r3, #0]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	58024400 	.word	0x58024400
 8006b20:	0800cc38 	.word	0x0800cc38
 8006b24:	24000014 	.word	0x24000014
 8006b28:	24000010 	.word	0x24000010

08006b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b30:	f7ff ffcc 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006b34:	4602      	mov	r2, r0
 8006b36:	4b06      	ldr	r3, [pc, #24]	; (8006b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	091b      	lsrs	r3, r3, #4
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	4904      	ldr	r1, [pc, #16]	; (8006b54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b42:	5ccb      	ldrb	r3, [r1, r3]
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	58024400 	.word	0x58024400
 8006b54:	0800cc38 	.word	0x0800cc38

08006b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b5c:	f7ff ffb6 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006b60:	4602      	mov	r2, r0
 8006b62:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	4904      	ldr	r1, [pc, #16]	; (8006b80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b6e:	5ccb      	ldrb	r3, [r1, r3]
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	0800cc38 	.word	0x0800cc38

08006b84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b90:	2300      	movs	r3, #0
 8006b92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d03f      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ba8:	d02a      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006baa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bae:	d824      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bb4:	d018      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bba:	d81e      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc4:	d007      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006bc6:	e018      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc8:	4ba3      	ldr	r3, [pc, #652]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	4aa2      	ldr	r2, [pc, #648]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bd4:	e015      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	2102      	movs	r1, #2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 f9d5 	bl	8007f8c <RCCEx_PLL2_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006be6:	e00c      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3324      	adds	r3, #36	; 0x24
 8006bec:	2102      	movs	r1, #2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 fa7e 	bl	80080f0 <RCCEx_PLL3_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bf8:	e003      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfe:	e000      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d109      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c08:	4b93      	ldr	r3, [pc, #588]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c14:	4990      	ldr	r1, [pc, #576]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	650b      	str	r3, [r1, #80]	; 0x50
 8006c1a:	e001      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d03d      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d826      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c51 	.word	0x08006c51
 8006c40:	08006c5f 	.word	0x08006c5f
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	08006c89 	.word	0x08006c89
 8006c4c:	08006c89 	.word	0x08006c89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c50:	4b81      	ldr	r3, [pc, #516]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	4a80      	ldr	r2, [pc, #512]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c5c:	e015      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3304      	adds	r3, #4
 8006c62:	2100      	movs	r1, #0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 f991 	bl	8007f8c <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c6e:	e00c      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3324      	adds	r3, #36	; 0x24
 8006c74:	2100      	movs	r1, #0
 8006c76:	4618      	mov	r0, r3
 8006c78:	f001 fa3a 	bl	80080f0 <RCCEx_PLL3_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
      break;
 8006c86:	e000      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c90:	4b71      	ldr	r3, [pc, #452]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c94:	f023 0207 	bic.w	r2, r3, #7
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	496e      	ldr	r1, [pc, #440]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	650b      	str	r3, [r1, #80]	; 0x50
 8006ca2:	e001      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d042      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbc:	d02b      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc2:	d825      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006cc4:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc6:	d028      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006cc8:	2bc0      	cmp	r3, #192	; 0xc0
 8006cca:	d821      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ccc:	2b80      	cmp	r3, #128	; 0x80
 8006cce:	d016      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006cd0:	2b80      	cmp	r3, #128	; 0x80
 8006cd2:	d81d      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006cd8:	2b40      	cmp	r3, #64	; 0x40
 8006cda:	d007      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006cdc:	e018      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cde:	4b5e      	ldr	r3, [pc, #376]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	4a5d      	ldr	r2, [pc, #372]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cea:	e017      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 f94a 	bl	8007f8c <RCCEx_PLL2_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cfc:	e00e      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3324      	adds	r3, #36	; 0x24
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 f9f3 	bl	80080f0 <RCCEx_PLL3_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d0e:	e005      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	75fb      	strb	r3, [r7, #23]
      break;
 8006d14:	e002      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d16:	bf00      	nop
 8006d18:	e000      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d22:	4b4d      	ldr	r3, [pc, #308]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2e:	494a      	ldr	r1, [pc, #296]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	650b      	str	r3, [r1, #80]	; 0x50
 8006d34:	e001      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d049      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d50:	d030      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006d52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d56:	d82a      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d5c:	d02c      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006d5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d62:	d824      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d68:	d018      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d6e:	d81e      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d78:	d007      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006d7a:	e018      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7c:	4b36      	ldr	r3, [pc, #216]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	4a35      	ldr	r2, [pc, #212]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d88:	e017      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 f8fb 	bl	8007f8c <RCCEx_PLL2_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006d9a:	e00e      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3324      	adds	r3, #36	; 0x24
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f9a4 	bl	80080f0 <RCCEx_PLL3_Config>
 8006da8:	4603      	mov	r3, r0
 8006daa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dac:	e005      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	75fb      	strb	r3, [r7, #23]
      break;
 8006db2:	e002      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006db4:	bf00      	nop
 8006db6:	e000      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dce:	4922      	ldr	r1, [pc, #136]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	658b      	str	r3, [r1, #88]	; 0x58
 8006dd4:	e001      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d04b      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006df0:	d030      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006df2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006df6:	d82a      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006df8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dfc:	d02e      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006dfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e02:	d824      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e08:	d018      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e0e:	d81e      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e18:	d007      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006e1a:	e018      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a0d      	ldr	r2, [pc, #52]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e28:	e019      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	2100      	movs	r1, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 f8ab 	bl	8007f8c <RCCEx_PLL2_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e3a:	e010      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3324      	adds	r3, #36	; 0x24
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 f954 	bl	80080f0 <RCCEx_PLL3_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e4c:	e007      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	75fb      	strb	r3, [r7, #23]
      break;
 8006e52:	e004      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006e54:	bf00      	nop
 8006e56:	e002      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006e58:	58024400 	.word	0x58024400
      break;
 8006e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e64:	4b99      	ldr	r3, [pc, #612]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e68:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e72:	4996      	ldr	r1, [pc, #600]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	658b      	str	r3, [r1, #88]	; 0x58
 8006e78:	e001      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d032      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8e:	2b30      	cmp	r3, #48	; 0x30
 8006e90:	d01c      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006e92:	2b30      	cmp	r3, #48	; 0x30
 8006e94:	d817      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d00c      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d813      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d016      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006ea2:	2b10      	cmp	r3, #16
 8006ea4:	d10f      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea6:	4b89      	ldr	r3, [pc, #548]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	4a88      	ldr	r2, [pc, #544]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006eb2:	e00e      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	2102      	movs	r1, #2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 f866 	bl	8007f8c <RCCEx_PLL2_Config>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ec4:	e005      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eca:	e002      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006ecc:	bf00      	nop
 8006ece:	e000      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ed8:	4b7c      	ldr	r3, [pc, #496]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006edc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee4:	4979      	ldr	r1, [pc, #484]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006eea:	e001      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d047      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f04:	d030      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f0a:	d82a      	bhi.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006f0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f10:	d02c      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006f12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f16:	d824      	bhi.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1c:	d018      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f22:	d81e      	bhi.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2c:	d007      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006f2e:	e018      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f30:	4b66      	ldr	r3, [pc, #408]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	4a65      	ldr	r2, [pc, #404]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f3c:	e017      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3304      	adds	r3, #4
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f001 f821 	bl	8007f8c <RCCEx_PLL2_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f4e:	e00e      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3324      	adds	r3, #36	; 0x24
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 f8ca 	bl	80080f0 <RCCEx_PLL3_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f60:	e005      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	75fb      	strb	r3, [r7, #23]
      break;
 8006f66:	e002      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006f68:	bf00      	nop
 8006f6a:	e000      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f74:	4b55      	ldr	r3, [pc, #340]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f78:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f80:	4952      	ldr	r1, [pc, #328]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	650b      	str	r3, [r1, #80]	; 0x50
 8006f86:	e001      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d049      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa0:	d02e      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa6:	d828      	bhi.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fac:	d02a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fb2:	d822      	bhi.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fb8:	d026      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006fba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fbe:	d81c      	bhi.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc4:	d010      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fca:	d816      	bhi.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01d      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd4:	d111      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 ffd5 	bl	8007f8c <RCCEx_PLL2_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006fe6:	e012      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3324      	adds	r3, #36	; 0x24
 8006fec:	2101      	movs	r1, #1
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 f87e 	bl	80080f0 <RCCEx_PLL3_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ff8:	e009      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffe:	e006      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007000:	bf00      	nop
 8007002:	e004      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007004:	bf00      	nop
 8007006:	e002      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007008:	bf00      	nop
 800700a:	e000      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800700c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007014:	4b2d      	ldr	r3, [pc, #180]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007018:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007020:	492a      	ldr	r1, [pc, #168]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007022:	4313      	orrs	r3, r2
 8007024:	650b      	str	r3, [r1, #80]	; 0x50
 8007026:	e001      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d04d      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800703e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007042:	d02e      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007048:	d828      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800704a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704e:	d02a      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007054:	d822      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007056:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800705a:	d026      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x526>
 800705c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007060:	d81c      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007066:	d010      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706c:	d816      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01d      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007076:	d111      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	2101      	movs	r1, #1
 800707e:	4618      	mov	r0, r3
 8007080:	f000 ff84 	bl	8007f8c <RCCEx_PLL2_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007088:	e012      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3324      	adds	r3, #36	; 0x24
 800708e:	2101      	movs	r1, #1
 8007090:	4618      	mov	r0, r3
 8007092:	f001 f82d 	bl	80080f0 <RCCEx_PLL3_Config>
 8007096:	4603      	mov	r3, r0
 8007098:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800709a:	e009      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]
      break;
 80070a0:	e006      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80070a2:	bf00      	nop
 80070a4:	e004      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80070a6:	bf00      	nop
 80070a8:	e002      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80070ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10c      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070b6:	4b05      	ldr	r3, [pc, #20]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070c4:	4901      	ldr	r1, [pc, #4]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	658b      	str	r3, [r1, #88]	; 0x58
 80070ca:	e003      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80070cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d02f      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e8:	d00e      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80070ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ee:	d814      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d015      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80070f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070f8:	d10f      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070fa:	4baf      	ldr	r3, [pc, #700]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	4aae      	ldr	r2, [pc, #696]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007106:	e00c      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	2101      	movs	r1, #1
 800710e:	4618      	mov	r0, r3
 8007110:	f000 ff3c 	bl	8007f8c <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007118:	e003      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
      break;
 800711e:	e000      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007128:	4ba3      	ldr	r3, [pc, #652]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800712a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007134:	49a0      	ldr	r1, [pc, #640]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007136:	4313      	orrs	r3, r2
 8007138:	650b      	str	r3, [r1, #80]	; 0x50
 800713a:	e001      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d032      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007150:	2b03      	cmp	r3, #3
 8007152:	d81b      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	08007193 	.word	0x08007193
 8007160:	0800716d 	.word	0x0800716d
 8007164:	0800717b 	.word	0x0800717b
 8007168:	08007193 	.word	0x08007193
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800716c:	4b92      	ldr	r3, [pc, #584]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	4a91      	ldr	r2, [pc, #580]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007176:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007178:	e00c      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3304      	adds	r3, #4
 800717e:	2102      	movs	r1, #2
 8007180:	4618      	mov	r0, r3
 8007182:	f000 ff03 	bl	8007f8c <RCCEx_PLL2_Config>
 8007186:	4603      	mov	r3, r0
 8007188:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800718a:	e003      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
      break;
 8007190:	e000      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800719a:	4b87      	ldr	r3, [pc, #540]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800719c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719e:	f023 0203 	bic.w	r2, r3, #3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a6:	4984      	ldr	r1, [pc, #528]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071ac:	e001      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 8086 	beq.w	80072cc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071c0:	4b7e      	ldr	r3, [pc, #504]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a7d      	ldr	r2, [pc, #500]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80071c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071cc:	f7fb fa3a 	bl	8002644 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071d2:	e009      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071d4:	f7fb fa36 	bl	8002644 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b64      	cmp	r3, #100	; 0x64
 80071e0:	d902      	bls.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	75fb      	strb	r3, [r7, #23]
        break;
 80071e6:	e005      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071e8:	4b74      	ldr	r3, [pc, #464]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0ef      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d166      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071fa:	4b6f      	ldr	r3, [pc, #444]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007204:	4053      	eors	r3, r2
 8007206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720a:	2b00      	cmp	r3, #0
 800720c:	d013      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800720e:	4b6a      	ldr	r3, [pc, #424]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007216:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007218:	4b67      	ldr	r3, [pc, #412]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	4a66      	ldr	r2, [pc, #408]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800721e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007222:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007224:	4b64      	ldr	r3, [pc, #400]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007228:	4a63      	ldr	r2, [pc, #396]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800722a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007230:	4a61      	ldr	r2, [pc, #388]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800723c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007240:	d115      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007242:	f7fb f9ff 	bl	8002644 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007248:	e00b      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724a:	f7fb f9fb 	bl	8002644 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	f241 3288 	movw	r2, #5000	; 0x1388
 8007258:	4293      	cmp	r3, r2
 800725a:	d902      	bls.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	75fb      	strb	r3, [r7, #23]
            break;
 8007260:	e005      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007262:	4b55      	ldr	r3, [pc, #340]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0ed      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d126      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800727a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007282:	d10d      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007284:	4b4c      	ldr	r3, [pc, #304]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007292:	0919      	lsrs	r1, r3, #4
 8007294:	4b4a      	ldr	r3, [pc, #296]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007296:	400b      	ands	r3, r1
 8007298:	4947      	ldr	r1, [pc, #284]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800729a:	4313      	orrs	r3, r2
 800729c:	610b      	str	r3, [r1, #16]
 800729e:	e005      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x728>
 80072a0:	4b45      	ldr	r3, [pc, #276]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	4a44      	ldr	r2, [pc, #272]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80072aa:	6113      	str	r3, [r2, #16]
 80072ac:	4b42      	ldr	r3, [pc, #264]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ba:	493f      	ldr	r1, [pc, #252]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	670b      	str	r3, [r1, #112]	; 0x70
 80072c0:	e004      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	75bb      	strb	r3, [r7, #22]
 80072c6:	e001      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8085 	beq.w	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072de:	2b28      	cmp	r3, #40	; 0x28
 80072e0:	d866      	bhi.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	080073c5 	.word	0x080073c5
 80072ec:	080073b1 	.word	0x080073b1
 80072f0:	080073b1 	.word	0x080073b1
 80072f4:	080073b1 	.word	0x080073b1
 80072f8:	080073b1 	.word	0x080073b1
 80072fc:	080073b1 	.word	0x080073b1
 8007300:	080073b1 	.word	0x080073b1
 8007304:	080073b1 	.word	0x080073b1
 8007308:	0800738d 	.word	0x0800738d
 800730c:	080073b1 	.word	0x080073b1
 8007310:	080073b1 	.word	0x080073b1
 8007314:	080073b1 	.word	0x080073b1
 8007318:	080073b1 	.word	0x080073b1
 800731c:	080073b1 	.word	0x080073b1
 8007320:	080073b1 	.word	0x080073b1
 8007324:	080073b1 	.word	0x080073b1
 8007328:	0800739f 	.word	0x0800739f
 800732c:	080073b1 	.word	0x080073b1
 8007330:	080073b1 	.word	0x080073b1
 8007334:	080073b1 	.word	0x080073b1
 8007338:	080073b1 	.word	0x080073b1
 800733c:	080073b1 	.word	0x080073b1
 8007340:	080073b1 	.word	0x080073b1
 8007344:	080073b1 	.word	0x080073b1
 8007348:	080073c5 	.word	0x080073c5
 800734c:	080073b1 	.word	0x080073b1
 8007350:	080073b1 	.word	0x080073b1
 8007354:	080073b1 	.word	0x080073b1
 8007358:	080073b1 	.word	0x080073b1
 800735c:	080073b1 	.word	0x080073b1
 8007360:	080073b1 	.word	0x080073b1
 8007364:	080073b1 	.word	0x080073b1
 8007368:	080073c5 	.word	0x080073c5
 800736c:	080073b1 	.word	0x080073b1
 8007370:	080073b1 	.word	0x080073b1
 8007374:	080073b1 	.word	0x080073b1
 8007378:	080073b1 	.word	0x080073b1
 800737c:	080073b1 	.word	0x080073b1
 8007380:	080073b1 	.word	0x080073b1
 8007384:	080073b1 	.word	0x080073b1
 8007388:	080073c5 	.word	0x080073c5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3304      	adds	r3, #4
 8007390:	2101      	movs	r1, #1
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fdfa 	bl	8007f8c <RCCEx_PLL2_Config>
 8007398:	4603      	mov	r3, r0
 800739a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800739c:	e013      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3324      	adds	r3, #36	; 0x24
 80073a2:	2101      	movs	r1, #1
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fea3 	bl	80080f0 <RCCEx_PLL3_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073ae:	e00a      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	75fb      	strb	r3, [r7, #23]
      break;
 80073b4:	e007      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80073b6:	bf00      	nop
 80073b8:	58024400 	.word	0x58024400
 80073bc:	58024800 	.word	0x58024800
 80073c0:	00ffffcf 	.word	0x00ffffcf
      break;
 80073c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d109      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073cc:	4b96      	ldr	r3, [pc, #600]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80073ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073d8:	4993      	ldr	r1, [pc, #588]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	654b      	str	r3, [r1, #84]	; 0x54
 80073de:	e001      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d038      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	d821      	bhi.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007443 	.word	0x08007443
 8007404:	08007419 	.word	0x08007419
 8007408:	0800742b 	.word	0x0800742b
 800740c:	08007443 	.word	0x08007443
 8007410:	08007443 	.word	0x08007443
 8007414:	08007443 	.word	0x08007443
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	2101      	movs	r1, #1
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fdb4 	bl	8007f8c <RCCEx_PLL2_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007428:	e00c      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3324      	adds	r3, #36	; 0x24
 800742e:	2101      	movs	r1, #1
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fe5d 	bl	80080f0 <RCCEx_PLL3_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800743a:	e003      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	75fb      	strb	r3, [r7, #23]
      break;
 8007440:	e000      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d109      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800744a:	4b77      	ldr	r3, [pc, #476]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	f023 0207 	bic.w	r2, r3, #7
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007456:	4974      	ldr	r1, [pc, #464]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007458:	4313      	orrs	r3, r2
 800745a:	654b      	str	r3, [r1, #84]	; 0x54
 800745c:	e001      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d03a      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	2b05      	cmp	r3, #5
 8007476:	d821      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007478:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	080074c3 	.word	0x080074c3
 8007484:	08007499 	.word	0x08007499
 8007488:	080074ab 	.word	0x080074ab
 800748c:	080074c3 	.word	0x080074c3
 8007490:	080074c3 	.word	0x080074c3
 8007494:	080074c3 	.word	0x080074c3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3304      	adds	r3, #4
 800749c:	2101      	movs	r1, #1
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fd74 	bl	8007f8c <RCCEx_PLL2_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074a8:	e00c      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3324      	adds	r3, #36	; 0x24
 80074ae:	2101      	movs	r1, #1
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fe1d 	bl	80080f0 <RCCEx_PLL3_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074ba:	e003      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	75fb      	strb	r3, [r7, #23]
      break;
 80074c0:	e000      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80074c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074ca:	4b57      	ldr	r3, [pc, #348]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80074cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ce:	f023 0207 	bic.w	r2, r3, #7
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d8:	4953      	ldr	r1, [pc, #332]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	658b      	str	r3, [r1, #88]	; 0x58
 80074de:	e001      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d04b      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074fa:	d02e      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80074fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007500:	d828      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d02a      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750c:	d822      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800750e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007512:	d026      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007514:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007518:	d81c      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800751a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800751e:	d010      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007524:	d816      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01d      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800752a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800752e:	d111      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3304      	adds	r3, #4
 8007534:	2100      	movs	r1, #0
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fd28 	bl	8007f8c <RCCEx_PLL2_Config>
 800753c:	4603      	mov	r3, r0
 800753e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007540:	e012      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3324      	adds	r3, #36	; 0x24
 8007546:	2102      	movs	r1, #2
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fdd1 	bl	80080f0 <RCCEx_PLL3_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007552:	e009      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	75fb      	strb	r3, [r7, #23]
      break;
 8007558:	e006      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800755a:	bf00      	nop
 800755c:	e004      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800755e:	bf00      	nop
 8007560:	e002      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800756e:	4b2e      	ldr	r3, [pc, #184]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007572:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800757c:	492a      	ldr	r1, [pc, #168]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800757e:	4313      	orrs	r3, r2
 8007580:	654b      	str	r3, [r1, #84]	; 0x54
 8007582:	e001      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d04d      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800759a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800759e:	d02e      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80075a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075a4:	d828      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075aa:	d02a      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80075ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b0:	d822      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80075b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075b6:	d026      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80075b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075bc:	d81c      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80075be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c2:	d010      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80075c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c8:	d816      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d01d      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80075ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d2:	d111      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3304      	adds	r3, #4
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fcd6 	bl	8007f8c <RCCEx_PLL2_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075e4:	e012      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3324      	adds	r3, #36	; 0x24
 80075ea:	2102      	movs	r1, #2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fd7f 	bl	80080f0 <RCCEx_PLL3_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075f6:	e009      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
      break;
 80075fc:	e006      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80075fe:	bf00      	nop
 8007600:	e004      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007602:	bf00      	nop
 8007604:	e002      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007606:	bf00      	nop
 8007608:	e000      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800760a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10c      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007612:	4b05      	ldr	r3, [pc, #20]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007616:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007620:	4901      	ldr	r1, [pc, #4]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007622:	4313      	orrs	r3, r2
 8007624:	658b      	str	r3, [r1, #88]	; 0x58
 8007626:	e003      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007638:	2b00      	cmp	r3, #0
 800763a:	d04b      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007642:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007646:	d02e      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007648:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800764c:	d828      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800764e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007652:	d02a      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007658:	d822      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800765a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800765e:	d026      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007660:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007664:	d81c      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800766a:	d010      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800766c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007670:	d816      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01d      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767a:	d111      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fc82 	bl	8007f8c <RCCEx_PLL2_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800768c:	e012      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3324      	adds	r3, #36	; 0x24
 8007692:	2102      	movs	r1, #2
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fd2b 	bl	80080f0 <RCCEx_PLL3_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800769e:	e009      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	75fb      	strb	r3, [r7, #23]
      break;
 80076a4:	e006      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80076a6:	bf00      	nop
 80076a8:	e004      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80076aa:	bf00      	nop
 80076ac:	e002      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80076ae:	bf00      	nop
 80076b0:	e000      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80076b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076ba:	4b9d      	ldr	r3, [pc, #628]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076c8:	4999      	ldr	r1, [pc, #612]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	658b      	str	r3, [r1, #88]	; 0x58
 80076ce:	e001      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01a      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ea:	d10a      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3324      	adds	r3, #36	; 0x24
 80076f0:	2102      	movs	r1, #2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fcfc 	bl	80080f0 <RCCEx_PLL3_Config>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007702:	4b8b      	ldr	r3, [pc, #556]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007710:	4987      	ldr	r1, [pc, #540]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007712:	4313      	orrs	r3, r2
 8007714:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0310 	and.w	r3, r3, #16
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01a      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772c:	d10a      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3324      	adds	r3, #36	; 0x24
 8007732:	2102      	movs	r1, #2
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fcdb 	bl	80080f0 <RCCEx_PLL3_Config>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007744:	4b7a      	ldr	r3, [pc, #488]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007752:	4977      	ldr	r1, [pc, #476]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007754:	4313      	orrs	r3, r2
 8007756:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d034      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800776a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800776e:	d01d      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007774:	d817      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800777a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777e:	d009      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007780:	e011      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3304      	adds	r3, #4
 8007786:	2100      	movs	r1, #0
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fbff 	bl	8007f8c <RCCEx_PLL2_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007792:	e00c      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3324      	adds	r3, #36	; 0x24
 8007798:	2102      	movs	r1, #2
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fca8 	bl	80080f0 <RCCEx_PLL3_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077a4:	e003      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	75fb      	strb	r3, [r7, #23]
      break;
 80077aa:	e000      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80077ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077b4:	4b5e      	ldr	r3, [pc, #376]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077c2:	495b      	ldr	r1, [pc, #364]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	658b      	str	r3, [r1, #88]	; 0x58
 80077c8:	e001      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d033      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077e4:	d01c      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80077e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077ea:	d816      	bhi.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80077ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f0:	d003      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80077f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077f6:	d007      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077fa:	4b4d      	ldr	r3, [pc, #308]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	4a4c      	ldr	r2, [pc, #304]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007806:	e00c      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3324      	adds	r3, #36	; 0x24
 800780c:	2101      	movs	r1, #1
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fc6e 	bl	80080f0 <RCCEx_PLL3_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007818:	e003      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	75fb      	strb	r3, [r7, #23]
      break;
 800781e:	e000      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007828:	4b41      	ldr	r3, [pc, #260]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800782a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007836:	493e      	ldr	r1, [pc, #248]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007838:	4313      	orrs	r3, r2
 800783a:	654b      	str	r3, [r1, #84]	; 0x54
 800783c:	e001      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d029      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800785a:	d007      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800785c:	e00f      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800785e:	4b34      	ldr	r3, [pc, #208]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007862:	4a33      	ldr	r2, [pc, #204]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800786a:	e00b      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	2102      	movs	r1, #2
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fb8a 	bl	8007f8c <RCCEx_PLL2_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800787c:	e002      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	75fb      	strb	r3, [r7, #23]
      break;
 8007882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800788a:	4b29      	ldr	r3, [pc, #164]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800788c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007896:	4926      	ldr	r1, [pc, #152]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007898:	4313      	orrs	r3, r2
 800789a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800789c:	e001      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3324      	adds	r3, #36	; 0x24
 80078b2:	2102      	movs	r1, #2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fc1b 	bl	80080f0 <RCCEx_PLL3_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d033      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d8:	d017      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80078da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078de:	d811      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80078e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e4:	d013      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80078e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ea:	d80b      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d010      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80078f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f4:	d106      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f6:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	4a0d      	ldr	r2, [pc, #52]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007900:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007902:	e007      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	e004      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800790a:	bf00      	nop
 800790c:	e002      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800790e:	bf00      	nop
 8007910:	e000      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10c      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800791a:	4b05      	ldr	r3, [pc, #20]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007926:	4902      	ldr	r1, [pc, #8]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007928:	4313      	orrs	r3, r2
 800792a:	654b      	str	r3, [r1, #84]	; 0x54
 800792c:	e004      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800792e:	bf00      	nop
 8007930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007944:	4b31      	ldr	r3, [pc, #196]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	492e      	ldr	r1, [pc, #184]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007952:	4313      	orrs	r3, r2
 8007954:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007962:	4b2a      	ldr	r3, [pc, #168]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007970:	4926      	ldr	r1, [pc, #152]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007972:	4313      	orrs	r3, r2
 8007974:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d008      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007982:	4b22      	ldr	r3, [pc, #136]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007986:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800798e:	491f      	ldr	r1, [pc, #124]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007990:	4313      	orrs	r3, r2
 8007992:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00d      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079a0:	4b1a      	ldr	r3, [pc, #104]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	4a19      	ldr	r2, [pc, #100]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079aa:	6113      	str	r3, [r2, #16]
 80079ac:	4b17      	ldr	r3, [pc, #92]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80079b6:	4915      	ldr	r1, [pc, #84]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da08      	bge.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079c4:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d0:	490e      	ldr	r1, [pc, #56]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079e2:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f0:	4906      	ldr	r1, [pc, #24]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80079f6:	7dbb      	ldrb	r3, [r7, #22]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	e000      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	58024400 	.word	0x58024400

08007a10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a14:	f7ff f85a 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	091b      	lsrs	r3, r3, #4
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	4904      	ldr	r1, [pc, #16]	; (8007a38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a26:	5ccb      	ldrb	r3, [r1, r3]
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	58024400 	.word	0x58024400
 8007a38:	0800cc38 	.word	0x0800cc38

08007a3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b089      	sub	sp, #36	; 0x24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a44:	4ba1      	ldr	r3, [pc, #644]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007a4e:	4b9f      	ldr	r3, [pc, #636]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a52:	0b1b      	lsrs	r3, r3, #12
 8007a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a5a:	4b9c      	ldr	r3, [pc, #624]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a66:	4b99      	ldr	r3, [pc, #612]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6a:	08db      	lsrs	r3, r3, #3
 8007a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8111 	beq.w	8007cac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	f000 8083 	beq.w	8007b98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	f200 80a1 	bhi.w	8007bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d056      	beq.n	8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007aa6:	e099      	b.n	8007bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aa8:	4b88      	ldr	r3, [pc, #544]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d02d      	beq.n	8007b10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ab4:	4b85      	ldr	r3, [pc, #532]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	08db      	lsrs	r3, r3, #3
 8007aba:	f003 0303 	and.w	r3, r3, #3
 8007abe:	4a84      	ldr	r2, [pc, #528]	; (8007cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ade:	4b7b      	ldr	r3, [pc, #492]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b0e:	e087      	b.n	8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b22:	4b6a      	ldr	r3, [pc, #424]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b52:	e065      	b.n	8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b66:	4b59      	ldr	r3, [pc, #356]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b96:	e043      	b.n	8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007baa:	4b48      	ldr	r3, [pc, #288]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bda:	e021      	b.n	8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bee:	4b37      	ldr	r3, [pc, #220]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007c20:	4b2a      	ldr	r3, [pc, #168]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	0a5b      	lsrs	r3, r3, #9
 8007c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c46:	ee17 2a90 	vmov	r2, s15
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007c4e:	4b1f      	ldr	r3, [pc, #124]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	0c1b      	lsrs	r3, r3, #16
 8007c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c58:	ee07 3a90 	vmov	s15, r3
 8007c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c74:	ee17 2a90 	vmov	r2, s15
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c7c:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	0e1b      	lsrs	r3, r3, #24
 8007c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca2:	ee17 2a90 	vmov	r2, s15
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007caa:	e008      	b.n	8007cbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	609a      	str	r2, [r3, #8]
}
 8007cbe:	bf00      	nop
 8007cc0:	3724      	adds	r7, #36	; 0x24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	58024400 	.word	0x58024400
 8007cd0:	03d09000 	.word	0x03d09000
 8007cd4:	46000000 	.word	0x46000000
 8007cd8:	4c742400 	.word	0x4c742400
 8007cdc:	4a742400 	.word	0x4a742400
 8007ce0:	4c189680 	.word	0x4c189680

08007ce4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b089      	sub	sp, #36	; 0x24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cec:	4ba1      	ldr	r3, [pc, #644]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	f003 0303 	and.w	r3, r3, #3
 8007cf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007cf6:	4b9f      	ldr	r3, [pc, #636]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	0d1b      	lsrs	r3, r3, #20
 8007cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d02:	4b9c      	ldr	r3, [pc, #624]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007d0e:	4b99      	ldr	r3, [pc, #612]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d12:	08db      	lsrs	r3, r3, #3
 8007d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	fb02 f303 	mul.w	r3, r2, r3
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8111 	beq.w	8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	f000 8083 	beq.w	8007e40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	f200 80a1 	bhi.w	8007e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d056      	beq.n	8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007d4e:	e099      	b.n	8007e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d50:	4b88      	ldr	r3, [pc, #544]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d02d      	beq.n	8007db8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d5c:	4b85      	ldr	r3, [pc, #532]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	08db      	lsrs	r3, r3, #3
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	4a84      	ldr	r2, [pc, #528]	; (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d68:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	ee07 3a90 	vmov	s15, r3
 8007d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d86:	4b7b      	ldr	r3, [pc, #492]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007db6:	e087      	b.n	8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dca:	4b6a      	ldr	r3, [pc, #424]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dfa:	e065      	b.n	8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e0e:	4b59      	ldr	r3, [pc, #356]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e16:	ee07 3a90 	vmov	s15, r3
 8007e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e3e:	e043      	b.n	8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e52:	4b48      	ldr	r3, [pc, #288]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e5a:	ee07 3a90 	vmov	s15, r3
 8007e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e82:	e021      	b.n	8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e96:	4b37      	ldr	r3, [pc, #220]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ec6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007ec8:	4b2a      	ldr	r3, [pc, #168]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	0a5b      	lsrs	r3, r3, #9
 8007ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eee:	ee17 2a90 	vmov	r2, s15
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007ef6:	4b1f      	ldr	r3, [pc, #124]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	0c1b      	lsrs	r3, r3, #16
 8007efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f00:	ee07 3a90 	vmov	s15, r3
 8007f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f1c:	ee17 2a90 	vmov	r2, s15
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007f24:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	0e1b      	lsrs	r3, r3, #24
 8007f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f4a:	ee17 2a90 	vmov	r2, s15
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f52:	e008      	b.n	8007f66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	609a      	str	r2, [r3, #8]
}
 8007f66:	bf00      	nop
 8007f68:	3724      	adds	r7, #36	; 0x24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	58024400 	.word	0x58024400
 8007f78:	03d09000 	.word	0x03d09000
 8007f7c:	46000000 	.word	0x46000000
 8007f80:	4c742400 	.word	0x4c742400
 8007f84:	4a742400 	.word	0x4a742400
 8007f88:	4c189680 	.word	0x4c189680

08007f8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f9a:	4b53      	ldr	r3, [pc, #332]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d101      	bne.n	8007faa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e099      	b.n	80080de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007faa:	4b4f      	ldr	r3, [pc, #316]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a4e      	ldr	r2, [pc, #312]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8007fb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fb6:	f7fa fb45 	bl	8002644 <HAL_GetTick>
 8007fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fbc:	e008      	b.n	8007fd0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fbe:	f7fa fb41 	bl	8002644 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d901      	bls.n	8007fd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e086      	b.n	80080de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fd0:	4b45      	ldr	r3, [pc, #276]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1f0      	bne.n	8007fbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007fdc:	4b42      	ldr	r3, [pc, #264]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	031b      	lsls	r3, r3, #12
 8007fea:	493f      	ldr	r1, [pc, #252]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	628b      	str	r3, [r1, #40]	; 0x28
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	025b      	lsls	r3, r3, #9
 8008002:	b29b      	uxth	r3, r3
 8008004:	431a      	orrs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	3b01      	subs	r3, #1
 800800c:	041b      	lsls	r3, r3, #16
 800800e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	3b01      	subs	r3, #1
 800801a:	061b      	lsls	r3, r3, #24
 800801c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008020:	4931      	ldr	r1, [pc, #196]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008022:	4313      	orrs	r3, r2
 8008024:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008026:	4b30      	ldr	r3, [pc, #192]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	492d      	ldr	r1, [pc, #180]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008034:	4313      	orrs	r3, r2
 8008036:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008038:	4b2b      	ldr	r3, [pc, #172]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	f023 0220 	bic.w	r2, r3, #32
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	4928      	ldr	r1, [pc, #160]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008046:	4313      	orrs	r3, r2
 8008048:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800804a:	4b27      	ldr	r3, [pc, #156]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	4a26      	ldr	r2, [pc, #152]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008050:	f023 0310 	bic.w	r3, r3, #16
 8008054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008056:	4b24      	ldr	r3, [pc, #144]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800805a:	4b24      	ldr	r3, [pc, #144]	; (80080ec <RCCEx_PLL2_Config+0x160>)
 800805c:	4013      	ands	r3, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	69d2      	ldr	r2, [r2, #28]
 8008062:	00d2      	lsls	r2, r2, #3
 8008064:	4920      	ldr	r1, [pc, #128]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008066:	4313      	orrs	r3, r2
 8008068:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800806a:	4b1f      	ldr	r3, [pc, #124]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008070:	f043 0310 	orr.w	r3, r3, #16
 8008074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d106      	bne.n	800808a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800807c:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	4a19      	ldr	r2, [pc, #100]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008086:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008088:	e00f      	b.n	80080aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d106      	bne.n	800809e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008090:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	4a14      	ldr	r2, [pc, #80]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 8008096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800809a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800809c:	e005      	b.n	80080aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800809e:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	4a11      	ldr	r2, [pc, #68]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 80080a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080aa:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a0e      	ldr	r2, [pc, #56]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 80080b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b6:	f7fa fac5 	bl	8002644 <HAL_GetTick>
 80080ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080bc:	e008      	b.n	80080d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080be:	f7fa fac1 	bl	8002644 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e006      	b.n	80080de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080d0:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <RCCEx_PLL2_Config+0x15c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0f0      	beq.n	80080be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	58024400 	.word	0x58024400
 80080ec:	ffff0007 	.word	0xffff0007

080080f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080fe:	4b53      	ldr	r3, [pc, #332]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	2b03      	cmp	r3, #3
 8008108:	d101      	bne.n	800810e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e099      	b.n	8008242 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800810e:	4b4f      	ldr	r3, [pc, #316]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a4e      	ldr	r2, [pc, #312]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800811a:	f7fa fa93 	bl	8002644 <HAL_GetTick>
 800811e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008120:	e008      	b.n	8008134 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008122:	f7fa fa8f 	bl	8002644 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d901      	bls.n	8008134 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e086      	b.n	8008242 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008134:	4b45      	ldr	r3, [pc, #276]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1f0      	bne.n	8008122 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008140:	4b42      	ldr	r3, [pc, #264]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	051b      	lsls	r3, r3, #20
 800814e:	493f      	ldr	r1, [pc, #252]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008150:	4313      	orrs	r3, r2
 8008152:	628b      	str	r3, [r1, #40]	; 0x28
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	3b01      	subs	r3, #1
 800815a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	3b01      	subs	r3, #1
 8008164:	025b      	lsls	r3, r3, #9
 8008166:	b29b      	uxth	r3, r3
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	3b01      	subs	r3, #1
 8008170:	041b      	lsls	r3, r3, #16
 8008172:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	3b01      	subs	r3, #1
 800817e:	061b      	lsls	r3, r3, #24
 8008180:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008184:	4931      	ldr	r1, [pc, #196]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008186:	4313      	orrs	r3, r2
 8008188:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800818a:	4b30      	ldr	r3, [pc, #192]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	492d      	ldr	r1, [pc, #180]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008198:	4313      	orrs	r3, r2
 800819a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800819c:	4b2b      	ldr	r3, [pc, #172]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	4928      	ldr	r1, [pc, #160]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081ae:	4b27      	ldr	r3, [pc, #156]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	4a26      	ldr	r2, [pc, #152]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081ba:	4b24      	ldr	r3, [pc, #144]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081be:	4b24      	ldr	r3, [pc, #144]	; (8008250 <RCCEx_PLL3_Config+0x160>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	69d2      	ldr	r2, [r2, #28]
 80081c6:	00d2      	lsls	r2, r2, #3
 80081c8:	4920      	ldr	r1, [pc, #128]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081ce:	4b1f      	ldr	r3, [pc, #124]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	4a1e      	ldr	r2, [pc, #120]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d106      	bne.n	80081ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	4a19      	ldr	r2, [pc, #100]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081ec:	e00f      	b.n	800820e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d106      	bne.n	8008202 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80081f4:	4b15      	ldr	r3, [pc, #84]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	4a14      	ldr	r2, [pc, #80]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 80081fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008200:	e005      	b.n	800820e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008202:	4b12      	ldr	r3, [pc, #72]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	4a11      	ldr	r2, [pc, #68]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800820c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800820e:	4b0f      	ldr	r3, [pc, #60]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a0e      	ldr	r2, [pc, #56]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800821a:	f7fa fa13 	bl	8002644 <HAL_GetTick>
 800821e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008220:	e008      	b.n	8008234 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008222:	f7fa fa0f 	bl	8002644 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d901      	bls.n	8008234 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e006      	b.n	8008242 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008234:	4b05      	ldr	r3, [pc, #20]	; (800824c <RCCEx_PLL3_Config+0x15c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0f0      	beq.n	8008222 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400
 8008250:	ffff0007 	.word	0xffff0007

08008254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e049      	b.n	80082fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7f9 f89a 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f001 f804 	bl	80092a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	d001      	beq.n	800831c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e054      	b.n	80083c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0201 	orr.w	r2, r2, #1
 8008332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a26      	ldr	r2, [pc, #152]	; (80083d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d022      	beq.n	8008384 <HAL_TIM_Base_Start_IT+0x80>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008346:	d01d      	beq.n	8008384 <HAL_TIM_Base_Start_IT+0x80>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a22      	ldr	r2, [pc, #136]	; (80083d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d018      	beq.n	8008384 <HAL_TIM_Base_Start_IT+0x80>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a21      	ldr	r2, [pc, #132]	; (80083dc <HAL_TIM_Base_Start_IT+0xd8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d013      	beq.n	8008384 <HAL_TIM_Base_Start_IT+0x80>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1f      	ldr	r2, [pc, #124]	; (80083e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00e      	beq.n	8008384 <HAL_TIM_Base_Start_IT+0x80>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d009      	beq.n	8008384 <HAL_TIM_Base_Start_IT+0x80>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a1c      	ldr	r2, [pc, #112]	; (80083e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d004      	beq.n	8008384 <HAL_TIM_Base_Start_IT+0x80>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a1b      	ldr	r2, [pc, #108]	; (80083ec <HAL_TIM_Base_Start_IT+0xe8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d115      	bne.n	80083b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689a      	ldr	r2, [r3, #8]
 800838a:	4b19      	ldr	r3, [pc, #100]	; (80083f0 <HAL_TIM_Base_Start_IT+0xec>)
 800838c:	4013      	ands	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b06      	cmp	r3, #6
 8008394:	d015      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0xbe>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800839c:	d011      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f042 0201 	orr.w	r2, r2, #1
 80083ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ae:	e008      	b.n	80083c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	e000      	b.n	80083c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40010000 	.word	0x40010000
 80083d8:	40000400 	.word	0x40000400
 80083dc:	40000800 	.word	0x40000800
 80083e0:	40000c00 	.word	0x40000c00
 80083e4:	40010400 	.word	0x40010400
 80083e8:	40001800 	.word	0x40001800
 80083ec:	40014000 	.word	0x40014000
 80083f0:	00010007 	.word	0x00010007

080083f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e049      	b.n	800849a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f841 	bl	80084a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3304      	adds	r3, #4
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f000 ff34 	bl	80092a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d109      	bne.n	80084dc <HAL_TIM_PWM_Start+0x24>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	bf14      	ite	ne
 80084d4:	2301      	movne	r3, #1
 80084d6:	2300      	moveq	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	e03c      	b.n	8008556 <HAL_TIM_PWM_Start+0x9e>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d109      	bne.n	80084f6 <HAL_TIM_PWM_Start+0x3e>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	bf14      	ite	ne
 80084ee:	2301      	movne	r3, #1
 80084f0:	2300      	moveq	r3, #0
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	e02f      	b.n	8008556 <HAL_TIM_PWM_Start+0x9e>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d109      	bne.n	8008510 <HAL_TIM_PWM_Start+0x58>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b01      	cmp	r3, #1
 8008506:	bf14      	ite	ne
 8008508:	2301      	movne	r3, #1
 800850a:	2300      	moveq	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	e022      	b.n	8008556 <HAL_TIM_PWM_Start+0x9e>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b0c      	cmp	r3, #12
 8008514:	d109      	bne.n	800852a <HAL_TIM_PWM_Start+0x72>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b01      	cmp	r3, #1
 8008520:	bf14      	ite	ne
 8008522:	2301      	movne	r3, #1
 8008524:	2300      	moveq	r3, #0
 8008526:	b2db      	uxtb	r3, r3
 8008528:	e015      	b.n	8008556 <HAL_TIM_PWM_Start+0x9e>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b10      	cmp	r3, #16
 800852e:	d109      	bne.n	8008544 <HAL_TIM_PWM_Start+0x8c>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b01      	cmp	r3, #1
 800853a:	bf14      	ite	ne
 800853c:	2301      	movne	r3, #1
 800853e:	2300      	moveq	r3, #0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	e008      	b.n	8008556 <HAL_TIM_PWM_Start+0x9e>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b01      	cmp	r3, #1
 800854e:	bf14      	ite	ne
 8008550:	2301      	movne	r3, #1
 8008552:	2300      	moveq	r3, #0
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e0a1      	b.n	80086a2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d104      	bne.n	800856e <HAL_TIM_PWM_Start+0xb6>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800856c:	e023      	b.n	80085b6 <HAL_TIM_PWM_Start+0xfe>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b04      	cmp	r3, #4
 8008572:	d104      	bne.n	800857e <HAL_TIM_PWM_Start+0xc6>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800857c:	e01b      	b.n	80085b6 <HAL_TIM_PWM_Start+0xfe>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b08      	cmp	r3, #8
 8008582:	d104      	bne.n	800858e <HAL_TIM_PWM_Start+0xd6>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800858c:	e013      	b.n	80085b6 <HAL_TIM_PWM_Start+0xfe>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b0c      	cmp	r3, #12
 8008592:	d104      	bne.n	800859e <HAL_TIM_PWM_Start+0xe6>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800859c:	e00b      	b.n	80085b6 <HAL_TIM_PWM_Start+0xfe>
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b10      	cmp	r3, #16
 80085a2:	d104      	bne.n	80085ae <HAL_TIM_PWM_Start+0xf6>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085ac:	e003      	b.n	80085b6 <HAL_TIM_PWM_Start+0xfe>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2201      	movs	r2, #1
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f001 fba6 	bl	8009d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a38      	ldr	r2, [pc, #224]	; (80086ac <HAL_TIM_PWM_Start+0x1f4>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d013      	beq.n	80085f6 <HAL_TIM_PWM_Start+0x13e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a37      	ldr	r2, [pc, #220]	; (80086b0 <HAL_TIM_PWM_Start+0x1f8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d00e      	beq.n	80085f6 <HAL_TIM_PWM_Start+0x13e>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a35      	ldr	r2, [pc, #212]	; (80086b4 <HAL_TIM_PWM_Start+0x1fc>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d009      	beq.n	80085f6 <HAL_TIM_PWM_Start+0x13e>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a34      	ldr	r2, [pc, #208]	; (80086b8 <HAL_TIM_PWM_Start+0x200>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d004      	beq.n	80085f6 <HAL_TIM_PWM_Start+0x13e>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a32      	ldr	r2, [pc, #200]	; (80086bc <HAL_TIM_PWM_Start+0x204>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d101      	bne.n	80085fa <HAL_TIM_PWM_Start+0x142>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e000      	b.n	80085fc <HAL_TIM_PWM_Start+0x144>
 80085fa:	2300      	movs	r3, #0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800860e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a25      	ldr	r2, [pc, #148]	; (80086ac <HAL_TIM_PWM_Start+0x1f4>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d022      	beq.n	8008660 <HAL_TIM_PWM_Start+0x1a8>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008622:	d01d      	beq.n	8008660 <HAL_TIM_PWM_Start+0x1a8>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a25      	ldr	r2, [pc, #148]	; (80086c0 <HAL_TIM_PWM_Start+0x208>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d018      	beq.n	8008660 <HAL_TIM_PWM_Start+0x1a8>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a24      	ldr	r2, [pc, #144]	; (80086c4 <HAL_TIM_PWM_Start+0x20c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d013      	beq.n	8008660 <HAL_TIM_PWM_Start+0x1a8>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a22      	ldr	r2, [pc, #136]	; (80086c8 <HAL_TIM_PWM_Start+0x210>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00e      	beq.n	8008660 <HAL_TIM_PWM_Start+0x1a8>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1a      	ldr	r2, [pc, #104]	; (80086b0 <HAL_TIM_PWM_Start+0x1f8>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d009      	beq.n	8008660 <HAL_TIM_PWM_Start+0x1a8>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a1e      	ldr	r2, [pc, #120]	; (80086cc <HAL_TIM_PWM_Start+0x214>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d004      	beq.n	8008660 <HAL_TIM_PWM_Start+0x1a8>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a16      	ldr	r2, [pc, #88]	; (80086b4 <HAL_TIM_PWM_Start+0x1fc>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d115      	bne.n	800868c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689a      	ldr	r2, [r3, #8]
 8008666:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <HAL_TIM_PWM_Start+0x218>)
 8008668:	4013      	ands	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b06      	cmp	r3, #6
 8008670:	d015      	beq.n	800869e <HAL_TIM_PWM_Start+0x1e6>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008678:	d011      	beq.n	800869e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f042 0201 	orr.w	r2, r2, #1
 8008688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868a:	e008      	b.n	800869e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0201 	orr.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	e000      	b.n	80086a0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	40010000 	.word	0x40010000
 80086b0:	40010400 	.word	0x40010400
 80086b4:	40014000 	.word	0x40014000
 80086b8:	40014400 	.word	0x40014400
 80086bc:	40014800 	.word	0x40014800
 80086c0:	40000400 	.word	0x40000400
 80086c4:	40000800 	.word	0x40000800
 80086c8:	40000c00 	.word	0x40000c00
 80086cc:	40001800 	.word	0x40001800
 80086d0:	00010007 	.word	0x00010007

080086d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e049      	b.n	800877a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f841 	bl	8008782 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3304      	adds	r3, #4
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f000 fdc4 	bl	80092a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
	...

08008798 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <HAL_TIM_IC_Start_IT+0x1e>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	e023      	b.n	80087fe <HAL_TIM_IC_Start_IT+0x66>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d104      	bne.n	80087c6 <HAL_TIM_IC_Start_IT+0x2e>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	e01b      	b.n	80087fe <HAL_TIM_IC_Start_IT+0x66>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d104      	bne.n	80087d6 <HAL_TIM_IC_Start_IT+0x3e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	e013      	b.n	80087fe <HAL_TIM_IC_Start_IT+0x66>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b0c      	cmp	r3, #12
 80087da:	d104      	bne.n	80087e6 <HAL_TIM_IC_Start_IT+0x4e>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	e00b      	b.n	80087fe <HAL_TIM_IC_Start_IT+0x66>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b10      	cmp	r3, #16
 80087ea:	d104      	bne.n	80087f6 <HAL_TIM_IC_Start_IT+0x5e>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	e003      	b.n	80087fe <HAL_TIM_IC_Start_IT+0x66>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d104      	bne.n	8008810 <HAL_TIM_IC_Start_IT+0x78>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800880c:	b2db      	uxtb	r3, r3
 800880e:	e013      	b.n	8008838 <HAL_TIM_IC_Start_IT+0xa0>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b04      	cmp	r3, #4
 8008814:	d104      	bne.n	8008820 <HAL_TIM_IC_Start_IT+0x88>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800881c:	b2db      	uxtb	r3, r3
 800881e:	e00b      	b.n	8008838 <HAL_TIM_IC_Start_IT+0xa0>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b08      	cmp	r3, #8
 8008824:	d104      	bne.n	8008830 <HAL_TIM_IC_Start_IT+0x98>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800882c:	b2db      	uxtb	r3, r3
 800882e:	e003      	b.n	8008838 <HAL_TIM_IC_Start_IT+0xa0>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008836:	b2db      	uxtb	r3, r3
 8008838:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d102      	bne.n	8008846 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008840:	7b7b      	ldrb	r3, [r7, #13]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d001      	beq.n	800884a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e0e2      	b.n	8008a10 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <HAL_TIM_IC_Start_IT+0xc2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008858:	e023      	b.n	80088a2 <HAL_TIM_IC_Start_IT+0x10a>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b04      	cmp	r3, #4
 800885e:	d104      	bne.n	800886a <HAL_TIM_IC_Start_IT+0xd2>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008868:	e01b      	b.n	80088a2 <HAL_TIM_IC_Start_IT+0x10a>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b08      	cmp	r3, #8
 800886e:	d104      	bne.n	800887a <HAL_TIM_IC_Start_IT+0xe2>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008878:	e013      	b.n	80088a2 <HAL_TIM_IC_Start_IT+0x10a>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b0c      	cmp	r3, #12
 800887e:	d104      	bne.n	800888a <HAL_TIM_IC_Start_IT+0xf2>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008888:	e00b      	b.n	80088a2 <HAL_TIM_IC_Start_IT+0x10a>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b10      	cmp	r3, #16
 800888e:	d104      	bne.n	800889a <HAL_TIM_IC_Start_IT+0x102>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2202      	movs	r2, #2
 8008894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008898:	e003      	b.n	80088a2 <HAL_TIM_IC_Start_IT+0x10a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2202      	movs	r2, #2
 800889e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d104      	bne.n	80088b2 <HAL_TIM_IC_Start_IT+0x11a>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b0:	e013      	b.n	80088da <HAL_TIM_IC_Start_IT+0x142>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d104      	bne.n	80088c2 <HAL_TIM_IC_Start_IT+0x12a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088c0:	e00b      	b.n	80088da <HAL_TIM_IC_Start_IT+0x142>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d104      	bne.n	80088d2 <HAL_TIM_IC_Start_IT+0x13a>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088d0:	e003      	b.n	80088da <HAL_TIM_IC_Start_IT+0x142>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2202      	movs	r2, #2
 80088d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b0c      	cmp	r3, #12
 80088de:	d841      	bhi.n	8008964 <HAL_TIM_IC_Start_IT+0x1cc>
 80088e0:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <HAL_TIM_IC_Start_IT+0x150>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	0800891d 	.word	0x0800891d
 80088ec:	08008965 	.word	0x08008965
 80088f0:	08008965 	.word	0x08008965
 80088f4:	08008965 	.word	0x08008965
 80088f8:	0800892f 	.word	0x0800892f
 80088fc:	08008965 	.word	0x08008965
 8008900:	08008965 	.word	0x08008965
 8008904:	08008965 	.word	0x08008965
 8008908:	08008941 	.word	0x08008941
 800890c:	08008965 	.word	0x08008965
 8008910:	08008965 	.word	0x08008965
 8008914:	08008965 	.word	0x08008965
 8008918:	08008953 	.word	0x08008953
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0202 	orr.w	r2, r2, #2
 800892a:	60da      	str	r2, [r3, #12]
      break;
 800892c:	e01d      	b.n	800896a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f042 0204 	orr.w	r2, r2, #4
 800893c:	60da      	str	r2, [r3, #12]
      break;
 800893e:	e014      	b.n	800896a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f042 0208 	orr.w	r2, r2, #8
 800894e:	60da      	str	r2, [r3, #12]
      break;
 8008950:	e00b      	b.n	800896a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0210 	orr.w	r2, r2, #16
 8008960:	60da      	str	r2, [r3, #12]
      break;
 8008962:	e002      	b.n	800896a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	73fb      	strb	r3, [r7, #15]
      break;
 8008968:	bf00      	nop
  }

  if (status == HAL_OK)
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d14e      	bne.n	8008a0e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2201      	movs	r2, #1
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	4618      	mov	r0, r3
 800897a:	f001 f9c9 	bl	8009d10 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <HAL_TIM_IC_Start_IT+0x280>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d022      	beq.n	80089ce <HAL_TIM_IC_Start_IT+0x236>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008990:	d01d      	beq.n	80089ce <HAL_TIM_IC_Start_IT+0x236>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a21      	ldr	r2, [pc, #132]	; (8008a1c <HAL_TIM_IC_Start_IT+0x284>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d018      	beq.n	80089ce <HAL_TIM_IC_Start_IT+0x236>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a1f      	ldr	r2, [pc, #124]	; (8008a20 <HAL_TIM_IC_Start_IT+0x288>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d013      	beq.n	80089ce <HAL_TIM_IC_Start_IT+0x236>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a1e      	ldr	r2, [pc, #120]	; (8008a24 <HAL_TIM_IC_Start_IT+0x28c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d00e      	beq.n	80089ce <HAL_TIM_IC_Start_IT+0x236>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1c      	ldr	r2, [pc, #112]	; (8008a28 <HAL_TIM_IC_Start_IT+0x290>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d009      	beq.n	80089ce <HAL_TIM_IC_Start_IT+0x236>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1b      	ldr	r2, [pc, #108]	; (8008a2c <HAL_TIM_IC_Start_IT+0x294>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d004      	beq.n	80089ce <HAL_TIM_IC_Start_IT+0x236>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a19      	ldr	r2, [pc, #100]	; (8008a30 <HAL_TIM_IC_Start_IT+0x298>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d115      	bne.n	80089fa <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	4b17      	ldr	r3, [pc, #92]	; (8008a34 <HAL_TIM_IC_Start_IT+0x29c>)
 80089d6:	4013      	ands	r3, r2
 80089d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b06      	cmp	r3, #6
 80089de:	d015      	beq.n	8008a0c <HAL_TIM_IC_Start_IT+0x274>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e6:	d011      	beq.n	8008a0c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0201 	orr.w	r2, r2, #1
 80089f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089f8:	e008      	b.n	8008a0c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f042 0201 	orr.w	r2, r2, #1
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	e000      	b.n	8008a0e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a0c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	40010000 	.word	0x40010000
 8008a1c:	40000400 	.word	0x40000400
 8008a20:	40000800 	.word	0x40000800
 8008a24:	40000c00 	.word	0x40000c00
 8008a28:	40010400 	.word	0x40010400
 8008a2c:	40001800 	.word	0x40001800
 8008a30:	40014000 	.word	0x40014000
 8008a34:	00010007 	.word	0x00010007

08008a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d122      	bne.n	8008a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d11b      	bne.n	8008a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f06f 0202 	mvn.w	r2, #2
 8008a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7f9 f914 	bl	8001ca8 <HAL_TIM_IC_CaptureCallback>
 8008a80:	e005      	b.n	8008a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fbee 	bl	8009264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fbf5 	bl	8009278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d122      	bne.n	8008ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d11b      	bne.n	8008ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f06f 0204 	mvn.w	r2, #4
 8008ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2202      	movs	r2, #2
 8008abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7f9 f8ea 	bl	8001ca8 <HAL_TIM_IC_CaptureCallback>
 8008ad4:	e005      	b.n	8008ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fbc4 	bl	8009264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fbcb 	bl	8009278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f003 0308 	and.w	r3, r3, #8
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d122      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d11b      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f06f 0208 	mvn.w	r2, #8
 8008b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2204      	movs	r2, #4
 8008b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7f9 f8c0 	bl	8001ca8 <HAL_TIM_IC_CaptureCallback>
 8008b28:	e005      	b.n	8008b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fb9a 	bl	8009264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fba1 	bl	8009278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0310 	and.w	r3, r3, #16
 8008b46:	2b10      	cmp	r3, #16
 8008b48:	d122      	bne.n	8008b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	2b10      	cmp	r3, #16
 8008b56:	d11b      	bne.n	8008b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f06f 0210 	mvn.w	r2, #16
 8008b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2208      	movs	r2, #8
 8008b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7f9 f896 	bl	8001ca8 <HAL_TIM_IC_CaptureCallback>
 8008b7c:	e005      	b.n	8008b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fb70 	bl	8009264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fb77 	bl	8009278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d10e      	bne.n	8008bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d107      	bne.n	8008bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f06f 0201 	mvn.w	r2, #1
 8008bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fb4a 	bl	8009250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc6:	2b80      	cmp	r3, #128	; 0x80
 8008bc8:	d10e      	bne.n	8008be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd4:	2b80      	cmp	r3, #128	; 0x80
 8008bd6:	d107      	bne.n	8008be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f001 f952 	bl	8009e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf6:	d10e      	bne.n	8008c16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	d107      	bne.n	8008c16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f945 	bl	8009ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c20:	2b40      	cmp	r3, #64	; 0x40
 8008c22:	d10e      	bne.n	8008c42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2e:	2b40      	cmp	r3, #64	; 0x40
 8008c30:	d107      	bne.n	8008c42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fb25 	bl	800928c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	f003 0320 	and.w	r3, r3, #32
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	d10e      	bne.n	8008c6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b20      	cmp	r3, #32
 8008c5c:	d107      	bne.n	8008c6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f06f 0220 	mvn.w	r2, #32
 8008c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 f905 	bl	8009e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b086      	sub	sp, #24
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008c90:	2302      	movs	r3, #2
 8008c92:	e088      	b.n	8008da6 <HAL_TIM_IC_ConfigChannel+0x130>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d11b      	bne.n	8008cda <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6819      	ldr	r1, [r3, #0]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f000 fe65 	bl	8009980 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	699a      	ldr	r2, [r3, #24]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 020c 	bic.w	r2, r2, #12
 8008cc4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6999      	ldr	r1, [r3, #24]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	619a      	str	r2, [r3, #24]
 8008cd8:	e060      	b.n	8008d9c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d11c      	bne.n	8008d1a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6819      	ldr	r1, [r3, #0]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f000 fee9 	bl	8009ac6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699a      	ldr	r2, [r3, #24]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008d02:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6999      	ldr	r1, [r3, #24]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	021a      	lsls	r2, r3, #8
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	619a      	str	r2, [r3, #24]
 8008d18:	e040      	b.n	8008d9c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b08      	cmp	r3, #8
 8008d1e:	d11b      	bne.n	8008d58 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	6819      	ldr	r1, [r3, #0]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f000 ff36 	bl	8009ba0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	69da      	ldr	r2, [r3, #28]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f022 020c 	bic.w	r2, r2, #12
 8008d42:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	69d9      	ldr	r1, [r3, #28]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	61da      	str	r2, [r3, #28]
 8008d56:	e021      	b.n	8008d9c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b0c      	cmp	r3, #12
 8008d5c:	d11c      	bne.n	8008d98 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6819      	ldr	r1, [r3, #0]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f000 ff53 	bl	8009c18 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	69da      	ldr	r2, [r3, #28]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008d80:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69d9      	ldr	r1, [r3, #28]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	021a      	lsls	r2, r3, #8
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	61da      	str	r2, [r3, #28]
 8008d96:	e001      	b.n	8008d9c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d101      	bne.n	8008dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e0ff      	b.n	8008fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b14      	cmp	r3, #20
 8008dda:	f200 80f0 	bhi.w	8008fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008e39 	.word	0x08008e39
 8008de8:	08008fbf 	.word	0x08008fbf
 8008dec:	08008fbf 	.word	0x08008fbf
 8008df0:	08008fbf 	.word	0x08008fbf
 8008df4:	08008e79 	.word	0x08008e79
 8008df8:	08008fbf 	.word	0x08008fbf
 8008dfc:	08008fbf 	.word	0x08008fbf
 8008e00:	08008fbf 	.word	0x08008fbf
 8008e04:	08008ebb 	.word	0x08008ebb
 8008e08:	08008fbf 	.word	0x08008fbf
 8008e0c:	08008fbf 	.word	0x08008fbf
 8008e10:	08008fbf 	.word	0x08008fbf
 8008e14:	08008efb 	.word	0x08008efb
 8008e18:	08008fbf 	.word	0x08008fbf
 8008e1c:	08008fbf 	.word	0x08008fbf
 8008e20:	08008fbf 	.word	0x08008fbf
 8008e24:	08008f3d 	.word	0x08008f3d
 8008e28:	08008fbf 	.word	0x08008fbf
 8008e2c:	08008fbf 	.word	0x08008fbf
 8008e30:	08008fbf 	.word	0x08008fbf
 8008e34:	08008f7d 	.word	0x08008f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fac8 	bl	80093d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699a      	ldr	r2, [r3, #24]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0208 	orr.w	r2, r2, #8
 8008e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0204 	bic.w	r2, r2, #4
 8008e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6999      	ldr	r1, [r3, #24]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	691a      	ldr	r2, [r3, #16]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	619a      	str	r2, [r3, #24]
      break;
 8008e76:	e0a5      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68b9      	ldr	r1, [r7, #8]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fb38 	bl	80094f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	699a      	ldr	r2, [r3, #24]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	699a      	ldr	r2, [r3, #24]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6999      	ldr	r1, [r3, #24]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	021a      	lsls	r2, r3, #8
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	619a      	str	r2, [r3, #24]
      break;
 8008eb8:	e084      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fba1 	bl	8009608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	69da      	ldr	r2, [r3, #28]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0208 	orr.w	r2, r2, #8
 8008ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0204 	bic.w	r2, r2, #4
 8008ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69d9      	ldr	r1, [r3, #28]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	691a      	ldr	r2, [r3, #16]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	61da      	str	r2, [r3, #28]
      break;
 8008ef8:	e064      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fc09 	bl	8009718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	69da      	ldr	r2, [r3, #28]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69da      	ldr	r2, [r3, #28]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69d9      	ldr	r1, [r3, #28]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	021a      	lsls	r2, r3, #8
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	61da      	str	r2, [r3, #28]
      break;
 8008f3a:	e043      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fc52 	bl	80097ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0208 	orr.w	r2, r2, #8
 8008f56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0204 	bic.w	r2, r2, #4
 8008f66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	691a      	ldr	r2, [r3, #16]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f7a:	e023      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68b9      	ldr	r1, [r7, #8]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fc96 	bl	80098b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	021a      	lsls	r2, r3, #8
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008fbc:	e002      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop

08008fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e0dc      	b.n	80091ae <HAL_TIM_ConfigClockSource+0x1d6>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2202      	movs	r2, #2
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	4b6a      	ldr	r3, [pc, #424]	; (80091b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009010:	4013      	ands	r3, r2
 8009012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800901a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a64      	ldr	r2, [pc, #400]	; (80091bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	f000 80a9 	beq.w	8009182 <HAL_TIM_ConfigClockSource+0x1aa>
 8009030:	4a62      	ldr	r2, [pc, #392]	; (80091bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009032:	4293      	cmp	r3, r2
 8009034:	f200 80ae 	bhi.w	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 8009038:	4a61      	ldr	r2, [pc, #388]	; (80091c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800903a:	4293      	cmp	r3, r2
 800903c:	f000 80a1 	beq.w	8009182 <HAL_TIM_ConfigClockSource+0x1aa>
 8009040:	4a5f      	ldr	r2, [pc, #380]	; (80091c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009042:	4293      	cmp	r3, r2
 8009044:	f200 80a6 	bhi.w	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 8009048:	4a5e      	ldr	r2, [pc, #376]	; (80091c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800904a:	4293      	cmp	r3, r2
 800904c:	f000 8099 	beq.w	8009182 <HAL_TIM_ConfigClockSource+0x1aa>
 8009050:	4a5c      	ldr	r2, [pc, #368]	; (80091c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009052:	4293      	cmp	r3, r2
 8009054:	f200 809e 	bhi.w	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 8009058:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800905c:	f000 8091 	beq.w	8009182 <HAL_TIM_ConfigClockSource+0x1aa>
 8009060:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009064:	f200 8096 	bhi.w	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 8009068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800906c:	f000 8089 	beq.w	8009182 <HAL_TIM_ConfigClockSource+0x1aa>
 8009070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009074:	f200 808e 	bhi.w	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 8009078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800907c:	d03e      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x124>
 800907e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009082:	f200 8087 	bhi.w	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 8009086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800908a:	f000 8086 	beq.w	800919a <HAL_TIM_ConfigClockSource+0x1c2>
 800908e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009092:	d87f      	bhi.n	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 8009094:	2b70      	cmp	r3, #112	; 0x70
 8009096:	d01a      	beq.n	80090ce <HAL_TIM_ConfigClockSource+0xf6>
 8009098:	2b70      	cmp	r3, #112	; 0x70
 800909a:	d87b      	bhi.n	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 800909c:	2b60      	cmp	r3, #96	; 0x60
 800909e:	d050      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x16a>
 80090a0:	2b60      	cmp	r3, #96	; 0x60
 80090a2:	d877      	bhi.n	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 80090a4:	2b50      	cmp	r3, #80	; 0x50
 80090a6:	d03c      	beq.n	8009122 <HAL_TIM_ConfigClockSource+0x14a>
 80090a8:	2b50      	cmp	r3, #80	; 0x50
 80090aa:	d873      	bhi.n	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 80090ac:	2b40      	cmp	r3, #64	; 0x40
 80090ae:	d058      	beq.n	8009162 <HAL_TIM_ConfigClockSource+0x18a>
 80090b0:	2b40      	cmp	r3, #64	; 0x40
 80090b2:	d86f      	bhi.n	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 80090b4:	2b30      	cmp	r3, #48	; 0x30
 80090b6:	d064      	beq.n	8009182 <HAL_TIM_ConfigClockSource+0x1aa>
 80090b8:	2b30      	cmp	r3, #48	; 0x30
 80090ba:	d86b      	bhi.n	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 80090bc:	2b20      	cmp	r3, #32
 80090be:	d060      	beq.n	8009182 <HAL_TIM_ConfigClockSource+0x1aa>
 80090c0:	2b20      	cmp	r3, #32
 80090c2:	d867      	bhi.n	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d05c      	beq.n	8009182 <HAL_TIM_ConfigClockSource+0x1aa>
 80090c8:	2b10      	cmp	r3, #16
 80090ca:	d05a      	beq.n	8009182 <HAL_TIM_ConfigClockSource+0x1aa>
 80090cc:	e062      	b.n	8009194 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	6899      	ldr	r1, [r3, #8]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f000 fdf7 	bl	8009cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	609a      	str	r2, [r3, #8]
      break;
 80090fa:	e04f      	b.n	800919c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	6899      	ldr	r1, [r3, #8]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f000 fde0 	bl	8009cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689a      	ldr	r2, [r3, #8]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800911e:	609a      	str	r2, [r3, #8]
      break;
 8009120:	e03c      	b.n	800919c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	6859      	ldr	r1, [r3, #4]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	461a      	mov	r2, r3
 8009130:	f000 fc9a 	bl	8009a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2150      	movs	r1, #80	; 0x50
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fdaa 	bl	8009c94 <TIM_ITRx_SetConfig>
      break;
 8009140:	e02c      	b.n	800919c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6859      	ldr	r1, [r3, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	461a      	mov	r2, r3
 8009150:	f000 fcf6 	bl	8009b40 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2160      	movs	r1, #96	; 0x60
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fd9a 	bl	8009c94 <TIM_ITRx_SetConfig>
      break;
 8009160:	e01c      	b.n	800919c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	6859      	ldr	r1, [r3, #4]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	461a      	mov	r2, r3
 8009170:	f000 fc7a 	bl	8009a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2140      	movs	r1, #64	; 0x40
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fd8a 	bl	8009c94 <TIM_ITRx_SetConfig>
      break;
 8009180:	e00c      	b.n	800919c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4619      	mov	r1, r3
 800918c:	4610      	mov	r0, r2
 800918e:	f000 fd81 	bl	8009c94 <TIM_ITRx_SetConfig>
      break;
 8009192:	e003      	b.n	800919c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	73fb      	strb	r3, [r7, #15]
      break;
 8009198:	e000      	b.n	800919c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800919a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	ffceff88 	.word	0xffceff88
 80091bc:	00100040 	.word	0x00100040
 80091c0:	00100030 	.word	0x00100030
 80091c4:	00100020 	.word	0x00100020

080091c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b0c      	cmp	r3, #12
 80091da:	d831      	bhi.n	8009240 <HAL_TIM_ReadCapturedValue+0x78>
 80091dc:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	08009219 	.word	0x08009219
 80091e8:	08009241 	.word	0x08009241
 80091ec:	08009241 	.word	0x08009241
 80091f0:	08009241 	.word	0x08009241
 80091f4:	08009223 	.word	0x08009223
 80091f8:	08009241 	.word	0x08009241
 80091fc:	08009241 	.word	0x08009241
 8009200:	08009241 	.word	0x08009241
 8009204:	0800922d 	.word	0x0800922d
 8009208:	08009241 	.word	0x08009241
 800920c:	08009241 	.word	0x08009241
 8009210:	08009241 	.word	0x08009241
 8009214:	08009237 	.word	0x08009237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921e:	60fb      	str	r3, [r7, #12]

      break;
 8009220:	e00f      	b.n	8009242 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009228:	60fb      	str	r3, [r7, #12]

      break;
 800922a:	e00a      	b.n	8009242 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009232:	60fb      	str	r3, [r7, #12]

      break;
 8009234:	e005      	b.n	8009242 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923c:	60fb      	str	r3, [r7, #12]

      break;
 800923e:	e000      	b.n	8009242 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009240:	bf00      	nop
  }

  return tmpreg;
 8009242:	68fb      	ldr	r3, [r7, #12]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a40      	ldr	r2, [pc, #256]	; (80093b4 <TIM_Base_SetConfig+0x114>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d013      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092be:	d00f      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a3d      	ldr	r2, [pc, #244]	; (80093b8 <TIM_Base_SetConfig+0x118>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d00b      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a3c      	ldr	r2, [pc, #240]	; (80093bc <TIM_Base_SetConfig+0x11c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d007      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a3b      	ldr	r2, [pc, #236]	; (80093c0 <TIM_Base_SetConfig+0x120>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d003      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a3a      	ldr	r2, [pc, #232]	; (80093c4 <TIM_Base_SetConfig+0x124>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d108      	bne.n	80092f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a2f      	ldr	r2, [pc, #188]	; (80093b4 <TIM_Base_SetConfig+0x114>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d01f      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009300:	d01b      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a2c      	ldr	r2, [pc, #176]	; (80093b8 <TIM_Base_SetConfig+0x118>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d017      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a2b      	ldr	r2, [pc, #172]	; (80093bc <TIM_Base_SetConfig+0x11c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d013      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a2a      	ldr	r2, [pc, #168]	; (80093c0 <TIM_Base_SetConfig+0x120>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00f      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a29      	ldr	r2, [pc, #164]	; (80093c4 <TIM_Base_SetConfig+0x124>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00b      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a28      	ldr	r2, [pc, #160]	; (80093c8 <TIM_Base_SetConfig+0x128>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d007      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a27      	ldr	r2, [pc, #156]	; (80093cc <TIM_Base_SetConfig+0x12c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d003      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a26      	ldr	r2, [pc, #152]	; (80093d0 <TIM_Base_SetConfig+0x130>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d108      	bne.n	800934c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	4313      	orrs	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a10      	ldr	r2, [pc, #64]	; (80093b4 <TIM_Base_SetConfig+0x114>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00f      	beq.n	8009398 <TIM_Base_SetConfig+0xf8>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a12      	ldr	r2, [pc, #72]	; (80093c4 <TIM_Base_SetConfig+0x124>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00b      	beq.n	8009398 <TIM_Base_SetConfig+0xf8>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a11      	ldr	r2, [pc, #68]	; (80093c8 <TIM_Base_SetConfig+0x128>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d007      	beq.n	8009398 <TIM_Base_SetConfig+0xf8>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a10      	ldr	r2, [pc, #64]	; (80093cc <TIM_Base_SetConfig+0x12c>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_Base_SetConfig+0xf8>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <TIM_Base_SetConfig+0x130>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d103      	bne.n	80093a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	691a      	ldr	r2, [r3, #16]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	615a      	str	r2, [r3, #20]
}
 80093a6:	bf00      	nop
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	40010000 	.word	0x40010000
 80093b8:	40000400 	.word	0x40000400
 80093bc:	40000800 	.word	0x40000800
 80093c0:	40000c00 	.word	0x40000c00
 80093c4:	40010400 	.word	0x40010400
 80093c8:	40014000 	.word	0x40014000
 80093cc:	40014400 	.word	0x40014400
 80093d0:	40014800 	.word	0x40014800

080093d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	f023 0201 	bic.w	r2, r3, #1
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	4b37      	ldr	r3, [pc, #220]	; (80094dc <TIM_OC1_SetConfig+0x108>)
 8009400:	4013      	ands	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f023 0303 	bic.w	r3, r3, #3
 800940a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f023 0302 	bic.w	r3, r3, #2
 800941c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4313      	orrs	r3, r2
 8009426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a2d      	ldr	r2, [pc, #180]	; (80094e0 <TIM_OC1_SetConfig+0x10c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00f      	beq.n	8009450 <TIM_OC1_SetConfig+0x7c>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a2c      	ldr	r2, [pc, #176]	; (80094e4 <TIM_OC1_SetConfig+0x110>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00b      	beq.n	8009450 <TIM_OC1_SetConfig+0x7c>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a2b      	ldr	r2, [pc, #172]	; (80094e8 <TIM_OC1_SetConfig+0x114>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d007      	beq.n	8009450 <TIM_OC1_SetConfig+0x7c>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a2a      	ldr	r2, [pc, #168]	; (80094ec <TIM_OC1_SetConfig+0x118>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d003      	beq.n	8009450 <TIM_OC1_SetConfig+0x7c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a29      	ldr	r2, [pc, #164]	; (80094f0 <TIM_OC1_SetConfig+0x11c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d10c      	bne.n	800946a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f023 0308 	bic.w	r3, r3, #8
 8009456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	4313      	orrs	r3, r2
 8009460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f023 0304 	bic.w	r3, r3, #4
 8009468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a1c      	ldr	r2, [pc, #112]	; (80094e0 <TIM_OC1_SetConfig+0x10c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00f      	beq.n	8009492 <TIM_OC1_SetConfig+0xbe>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a1b      	ldr	r2, [pc, #108]	; (80094e4 <TIM_OC1_SetConfig+0x110>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00b      	beq.n	8009492 <TIM_OC1_SetConfig+0xbe>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a1a      	ldr	r2, [pc, #104]	; (80094e8 <TIM_OC1_SetConfig+0x114>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d007      	beq.n	8009492 <TIM_OC1_SetConfig+0xbe>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a19      	ldr	r2, [pc, #100]	; (80094ec <TIM_OC1_SetConfig+0x118>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d003      	beq.n	8009492 <TIM_OC1_SetConfig+0xbe>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a18      	ldr	r2, [pc, #96]	; (80094f0 <TIM_OC1_SetConfig+0x11c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d111      	bne.n	80094b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	621a      	str	r2, [r3, #32]
}
 80094d0:	bf00      	nop
 80094d2:	371c      	adds	r7, #28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	fffeff8f 	.word	0xfffeff8f
 80094e0:	40010000 	.word	0x40010000
 80094e4:	40010400 	.word	0x40010400
 80094e8:	40014000 	.word	0x40014000
 80094ec:	40014400 	.word	0x40014400
 80094f0:	40014800 	.word	0x40014800

080094f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f023 0210 	bic.w	r2, r3, #16
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4b34      	ldr	r3, [pc, #208]	; (80095f0 <TIM_OC2_SetConfig+0xfc>)
 8009520:	4013      	ands	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800952a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	021b      	lsls	r3, r3, #8
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f023 0320 	bic.w	r3, r3, #32
 800953e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	4313      	orrs	r3, r2
 800954a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a29      	ldr	r2, [pc, #164]	; (80095f4 <TIM_OC2_SetConfig+0x100>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d003      	beq.n	800955c <TIM_OC2_SetConfig+0x68>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a28      	ldr	r2, [pc, #160]	; (80095f8 <TIM_OC2_SetConfig+0x104>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d10d      	bne.n	8009578 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	4313      	orrs	r3, r2
 800956e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a1e      	ldr	r2, [pc, #120]	; (80095f4 <TIM_OC2_SetConfig+0x100>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00f      	beq.n	80095a0 <TIM_OC2_SetConfig+0xac>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a1d      	ldr	r2, [pc, #116]	; (80095f8 <TIM_OC2_SetConfig+0x104>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d00b      	beq.n	80095a0 <TIM_OC2_SetConfig+0xac>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a1c      	ldr	r2, [pc, #112]	; (80095fc <TIM_OC2_SetConfig+0x108>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d007      	beq.n	80095a0 <TIM_OC2_SetConfig+0xac>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a1b      	ldr	r2, [pc, #108]	; (8009600 <TIM_OC2_SetConfig+0x10c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d003      	beq.n	80095a0 <TIM_OC2_SetConfig+0xac>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a1a      	ldr	r2, [pc, #104]	; (8009604 <TIM_OC2_SetConfig+0x110>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d113      	bne.n	80095c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685a      	ldr	r2, [r3, #4]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	621a      	str	r2, [r3, #32]
}
 80095e2:	bf00      	nop
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	feff8fff 	.word	0xfeff8fff
 80095f4:	40010000 	.word	0x40010000
 80095f8:	40010400 	.word	0x40010400
 80095fc:	40014000 	.word	0x40014000
 8009600:	40014400 	.word	0x40014400
 8009604:	40014800 	.word	0x40014800

08009608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4b33      	ldr	r3, [pc, #204]	; (8009700 <TIM_OC3_SetConfig+0xf8>)
 8009634:	4013      	ands	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a28      	ldr	r2, [pc, #160]	; (8009704 <TIM_OC3_SetConfig+0xfc>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <TIM_OC3_SetConfig+0x66>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a27      	ldr	r2, [pc, #156]	; (8009708 <TIM_OC3_SetConfig+0x100>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d10d      	bne.n	800968a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	4313      	orrs	r3, r2
 8009680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a1d      	ldr	r2, [pc, #116]	; (8009704 <TIM_OC3_SetConfig+0xfc>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d00f      	beq.n	80096b2 <TIM_OC3_SetConfig+0xaa>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a1c      	ldr	r2, [pc, #112]	; (8009708 <TIM_OC3_SetConfig+0x100>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d00b      	beq.n	80096b2 <TIM_OC3_SetConfig+0xaa>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a1b      	ldr	r2, [pc, #108]	; (800970c <TIM_OC3_SetConfig+0x104>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d007      	beq.n	80096b2 <TIM_OC3_SetConfig+0xaa>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a1a      	ldr	r2, [pc, #104]	; (8009710 <TIM_OC3_SetConfig+0x108>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d003      	beq.n	80096b2 <TIM_OC3_SetConfig+0xaa>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a19      	ldr	r2, [pc, #100]	; (8009714 <TIM_OC3_SetConfig+0x10c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d113      	bne.n	80096da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	011b      	lsls	r3, r3, #4
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	011b      	lsls	r3, r3, #4
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	621a      	str	r2, [r3, #32]
}
 80096f4:	bf00      	nop
 80096f6:	371c      	adds	r7, #28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	fffeff8f 	.word	0xfffeff8f
 8009704:	40010000 	.word	0x40010000
 8009708:	40010400 	.word	0x40010400
 800970c:	40014000 	.word	0x40014000
 8009710:	40014400 	.word	0x40014400
 8009714:	40014800 	.word	0x40014800

08009718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <TIM_OC4_SetConfig+0xbc>)
 8009744:	4013      	ands	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800974e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	021b      	lsls	r3, r3, #8
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	031b      	lsls	r3, r3, #12
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	4313      	orrs	r3, r2
 800976e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a19      	ldr	r2, [pc, #100]	; (80097d8 <TIM_OC4_SetConfig+0xc0>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00f      	beq.n	8009798 <TIM_OC4_SetConfig+0x80>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a18      	ldr	r2, [pc, #96]	; (80097dc <TIM_OC4_SetConfig+0xc4>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00b      	beq.n	8009798 <TIM_OC4_SetConfig+0x80>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a17      	ldr	r2, [pc, #92]	; (80097e0 <TIM_OC4_SetConfig+0xc8>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d007      	beq.n	8009798 <TIM_OC4_SetConfig+0x80>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a16      	ldr	r2, [pc, #88]	; (80097e4 <TIM_OC4_SetConfig+0xcc>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d003      	beq.n	8009798 <TIM_OC4_SetConfig+0x80>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a15      	ldr	r2, [pc, #84]	; (80097e8 <TIM_OC4_SetConfig+0xd0>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d109      	bne.n	80097ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800979e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	019b      	lsls	r3, r3, #6
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	621a      	str	r2, [r3, #32]
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	feff8fff 	.word	0xfeff8fff
 80097d8:	40010000 	.word	0x40010000
 80097dc:	40010400 	.word	0x40010400
 80097e0:	40014000 	.word	0x40014000
 80097e4:	40014400 	.word	0x40014400
 80097e8:	40014800 	.word	0x40014800

080097ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	4b21      	ldr	r3, [pc, #132]	; (800989c <TIM_OC5_SetConfig+0xb0>)
 8009818:	4013      	ands	r3, r2
 800981a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	4313      	orrs	r3, r2
 8009824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800982c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	041b      	lsls	r3, r3, #16
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	4313      	orrs	r3, r2
 8009838:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a18      	ldr	r2, [pc, #96]	; (80098a0 <TIM_OC5_SetConfig+0xb4>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00f      	beq.n	8009862 <TIM_OC5_SetConfig+0x76>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a17      	ldr	r2, [pc, #92]	; (80098a4 <TIM_OC5_SetConfig+0xb8>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00b      	beq.n	8009862 <TIM_OC5_SetConfig+0x76>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a16      	ldr	r2, [pc, #88]	; (80098a8 <TIM_OC5_SetConfig+0xbc>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d007      	beq.n	8009862 <TIM_OC5_SetConfig+0x76>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a15      	ldr	r2, [pc, #84]	; (80098ac <TIM_OC5_SetConfig+0xc0>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d003      	beq.n	8009862 <TIM_OC5_SetConfig+0x76>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a14      	ldr	r2, [pc, #80]	; (80098b0 <TIM_OC5_SetConfig+0xc4>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d109      	bne.n	8009876 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009868:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	021b      	lsls	r3, r3, #8
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	4313      	orrs	r3, r2
 8009874:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	621a      	str	r2, [r3, #32]
}
 8009890:	bf00      	nop
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	fffeff8f 	.word	0xfffeff8f
 80098a0:	40010000 	.word	0x40010000
 80098a4:	40010400 	.word	0x40010400
 80098a8:	40014000 	.word	0x40014000
 80098ac:	40014400 	.word	0x40014400
 80098b0:	40014800 	.word	0x40014800

080098b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4b22      	ldr	r3, [pc, #136]	; (8009968 <TIM_OC6_SetConfig+0xb4>)
 80098e0:	4013      	ands	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	051b      	lsls	r3, r3, #20
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	4313      	orrs	r3, r2
 8009902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a19      	ldr	r2, [pc, #100]	; (800996c <TIM_OC6_SetConfig+0xb8>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d00f      	beq.n	800992c <TIM_OC6_SetConfig+0x78>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a18      	ldr	r2, [pc, #96]	; (8009970 <TIM_OC6_SetConfig+0xbc>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00b      	beq.n	800992c <TIM_OC6_SetConfig+0x78>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a17      	ldr	r2, [pc, #92]	; (8009974 <TIM_OC6_SetConfig+0xc0>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d007      	beq.n	800992c <TIM_OC6_SetConfig+0x78>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a16      	ldr	r2, [pc, #88]	; (8009978 <TIM_OC6_SetConfig+0xc4>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_OC6_SetConfig+0x78>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a15      	ldr	r2, [pc, #84]	; (800997c <TIM_OC6_SetConfig+0xc8>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d109      	bne.n	8009940 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009932:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	029b      	lsls	r3, r3, #10
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	4313      	orrs	r3, r2
 800993e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	621a      	str	r2, [r3, #32]
}
 800995a:	bf00      	nop
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	feff8fff 	.word	0xfeff8fff
 800996c:	40010000 	.word	0x40010000
 8009970:	40010400 	.word	0x40010400
 8009974:	40014000 	.word	0x40014000
 8009978:	40014400 	.word	0x40014400
 800997c:	40014800 	.word	0x40014800

08009980 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	f023 0201 	bic.w	r2, r3, #1
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4a28      	ldr	r2, [pc, #160]	; (8009a4c <TIM_TI1_SetConfig+0xcc>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d01b      	beq.n	80099e6 <TIM_TI1_SetConfig+0x66>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b4:	d017      	beq.n	80099e6 <TIM_TI1_SetConfig+0x66>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	4a25      	ldr	r2, [pc, #148]	; (8009a50 <TIM_TI1_SetConfig+0xd0>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d013      	beq.n	80099e6 <TIM_TI1_SetConfig+0x66>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	4a24      	ldr	r2, [pc, #144]	; (8009a54 <TIM_TI1_SetConfig+0xd4>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d00f      	beq.n	80099e6 <TIM_TI1_SetConfig+0x66>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4a23      	ldr	r2, [pc, #140]	; (8009a58 <TIM_TI1_SetConfig+0xd8>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00b      	beq.n	80099e6 <TIM_TI1_SetConfig+0x66>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	4a22      	ldr	r2, [pc, #136]	; (8009a5c <TIM_TI1_SetConfig+0xdc>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d007      	beq.n	80099e6 <TIM_TI1_SetConfig+0x66>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	4a21      	ldr	r2, [pc, #132]	; (8009a60 <TIM_TI1_SetConfig+0xe0>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d003      	beq.n	80099e6 <TIM_TI1_SetConfig+0x66>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4a20      	ldr	r2, [pc, #128]	; (8009a64 <TIM_TI1_SetConfig+0xe4>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d101      	bne.n	80099ea <TIM_TI1_SetConfig+0x6a>
 80099e6:	2301      	movs	r3, #1
 80099e8:	e000      	b.n	80099ec <TIM_TI1_SetConfig+0x6c>
 80099ea:	2300      	movs	r3, #0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d008      	beq.n	8009a02 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f023 0303 	bic.w	r3, r3, #3
 80099f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	e003      	b.n	8009a0a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f043 0301 	orr.w	r3, r3, #1
 8009a08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	011b      	lsls	r3, r3, #4
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f023 030a 	bic.w	r3, r3, #10
 8009a24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f003 030a 	and.w	r3, r3, #10
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	621a      	str	r2, [r3, #32]
}
 8009a3e:	bf00      	nop
 8009a40:	371c      	adds	r7, #28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	40010000 	.word	0x40010000
 8009a50:	40000400 	.word	0x40000400
 8009a54:	40000800 	.word	0x40000800
 8009a58:	40000c00 	.word	0x40000c00
 8009a5c:	40010400 	.word	0x40010400
 8009a60:	40001800 	.word	0x40001800
 8009a64:	40014000 	.word	0x40014000

08009a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	f023 0201 	bic.w	r2, r3, #1
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f023 030a 	bic.w	r3, r3, #10
 8009aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	621a      	str	r2, [r3, #32]
}
 8009aba:	bf00      	nop
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b087      	sub	sp, #28
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	607a      	str	r2, [r7, #4]
 8009ad2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	f023 0210 	bic.w	r2, r3, #16
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009af2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	031b      	lsls	r3, r3, #12
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	011b      	lsls	r3, r3, #4
 8009b1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	621a      	str	r2, [r3, #32]
}
 8009b34:	bf00      	nop
 8009b36:	371c      	adds	r7, #28
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	f023 0210 	bic.w	r2, r3, #16
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	031b      	lsls	r3, r3, #12
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	621a      	str	r2, [r3, #32]
}
 8009b94:	bf00      	nop
 8009b96:	371c      	adds	r7, #28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
 8009bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f023 0303 	bic.w	r3, r3, #3
 8009bcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	697a      	ldr	r2, [r7, #20]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009bf0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	021b      	lsls	r3, r3, #8
 8009bf6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	621a      	str	r2, [r3, #32]
}
 8009c0c:	bf00      	nop
 8009c0e:	371c      	adds	r7, #28
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
 8009c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	021b      	lsls	r3, r3, #8
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	031b      	lsls	r3, r3, #12
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009c6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	031b      	lsls	r3, r3, #12
 8009c70:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	621a      	str	r2, [r3, #32]
}
 8009c86:	bf00      	nop
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
	...

08009c94 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <TIM_ITRx_SetConfig+0x38>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	f043 0307 	orr.w	r3, r3, #7
 8009cb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	609a      	str	r2, [r3, #8]
}
 8009cbe:	bf00      	nop
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	ffcfff8f 	.word	0xffcfff8f

08009cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	021a      	lsls	r2, r3, #8
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	609a      	str	r2, [r3, #8]
}
 8009d04:	bf00      	nop
 8009d06:	371c      	adds	r7, #28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	f003 031f 	and.w	r3, r3, #31
 8009d22:	2201      	movs	r2, #1
 8009d24:	fa02 f303 	lsl.w	r3, r2, r3
 8009d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a1a      	ldr	r2, [r3, #32]
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	43db      	mvns	r3, r3
 8009d32:	401a      	ands	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6a1a      	ldr	r2, [r3, #32]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f003 031f 	and.w	r3, r3, #31
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	fa01 f303 	lsl.w	r3, r1, r3
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	621a      	str	r2, [r3, #32]
}
 8009d4e:	bf00      	nop
 8009d50:	371c      	adds	r7, #28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
	...

08009d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d101      	bne.n	8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d70:	2302      	movs	r3, #2
 8009d72:	e06d      	b.n	8009e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a30      	ldr	r2, [pc, #192]	; (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d004      	beq.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a2f      	ldr	r2, [pc, #188]	; (8009e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d108      	bne.n	8009dba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009dae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a20      	ldr	r2, [pc, #128]	; (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d022      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de6:	d01d      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a1d      	ldr	r2, [pc, #116]	; (8009e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d018      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a1c      	ldr	r2, [pc, #112]	; (8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d013      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a1a      	ldr	r2, [pc, #104]	; (8009e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d00e      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d009      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a16      	ldr	r2, [pc, #88]	; (8009e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d004      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a15      	ldr	r2, [pc, #84]	; (8009e74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d10c      	bne.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	40010000 	.word	0x40010000
 8009e60:	40010400 	.word	0x40010400
 8009e64:	40000400 	.word	0x40000400
 8009e68:	40000800 	.word	0x40000800
 8009e6c:	40000c00 	.word	0x40000c00
 8009e70:	40001800 	.word	0x40001800
 8009e74:	40014000 	.word	0x40014000

08009e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e04a      	b.n	8009f5c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d106      	bne.n	8009ede <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7f7 fbab 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2224      	movs	r2, #36	; 0x24
 8009ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 0201 	bic.w	r2, r2, #1
 8009ef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fcfa 	bl	800a8f0 <UART_SetConfig>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d101      	bne.n	8009f06 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e02a      	b.n	8009f5c <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 fa56 	bl	800b3c0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009f32:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f042 0208 	orr.w	r2, r2, #8
 8009f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0201 	orr.w	r2, r2, #1
 8009f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 fad5 	bl	800b504 <UART_CheckIdleState>
 8009f5a:	4603      	mov	r3, r0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b091      	sub	sp, #68	; 0x44
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f78:	2b20      	cmp	r3, #32
 8009f7a:	f040 808c 	bne.w	800a096 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <HAL_UART_Transmit_IT+0x26>
 8009f84:	88fb      	ldrh	r3, [r7, #6]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e084      	b.n	800a098 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d101      	bne.n	8009f9c <HAL_UART_Transmit_IT+0x38>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e07d      	b.n	800a098 <HAL_UART_Transmit_IT+0x134>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	88fa      	ldrh	r2, [r7, #6]
 8009fae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	88fa      	ldrh	r2, [r7, #6]
 8009fb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2221      	movs	r2, #33	; 0x21
 8009fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fd8:	d12e      	bne.n	800a038 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fe2:	d107      	bne.n	8009ff4 <HAL_UART_Transmit_IT+0x90>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d103      	bne.n	8009ff4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4a2d      	ldr	r2, [pc, #180]	; (800a0a4 <HAL_UART_Transmit_IT+0x140>)
 8009ff0:	675a      	str	r2, [r3, #116]	; 0x74
 8009ff2:	e002      	b.n	8009ffa <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	4a2c      	ldr	r2, [pc, #176]	; (800a0a8 <HAL_UART_Transmit_IT+0x144>)
 8009ff8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a018:	63bb      	str	r3, [r7, #56]	; 0x38
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3308      	adds	r3, #8
 800a020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a022:	637a      	str	r2, [r7, #52]	; 0x34
 800a024:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e5      	bne.n	800a002 <HAL_UART_Transmit_IT+0x9e>
 800a036:	e02c      	b.n	800a092 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a040:	d107      	bne.n	800a052 <HAL_UART_Transmit_IT+0xee>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d103      	bne.n	800a052 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4a17      	ldr	r2, [pc, #92]	; (800a0ac <HAL_UART_Transmit_IT+0x148>)
 800a04e:	675a      	str	r2, [r3, #116]	; 0x74
 800a050:	e002      	b.n	800a058 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	4a16      	ldr	r2, [pc, #88]	; (800a0b0 <HAL_UART_Transmit_IT+0x14c>)
 800a056:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	613b      	str	r3, [r7, #16]
   return(result);
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a074:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a07e:	623b      	str	r3, [r7, #32]
 800a080:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	69f9      	ldr	r1, [r7, #28]
 800a084:	6a3a      	ldr	r2, [r7, #32]
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e6      	bne.n	800a060 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	e000      	b.n	800a098 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a096:	2302      	movs	r3, #2
  }
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3744      	adds	r7, #68	; 0x44
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	0800be2d 	.word	0x0800be2d
 800a0a8:	0800bd4d 	.word	0x0800bd4d
 800a0ac:	0800bc8b 	.word	0x0800bc8b
 800a0b0:	0800bbd3 	.word	0x0800bbd3

0800a0b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08a      	sub	sp, #40	; 0x28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	d142      	bne.n	800a152 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <HAL_UART_Receive_DMA+0x24>
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e03b      	b.n	800a154 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d101      	bne.n	800a0ea <HAL_UART_Receive_DMA+0x36>
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e034      	b.n	800a154 <HAL_UART_Receive_DMA+0xa0>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a17      	ldr	r2, [pc, #92]	; (800a15c <HAL_UART_Receive_DMA+0xa8>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d01f      	beq.n	800a142 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d018      	beq.n	800a142 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	e853 3f00 	ldrex	r3, [r3]
 800a11c:	613b      	str	r3, [r7, #16]
   return(result);
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a124:	627b      	str	r3, [r7, #36]	; 0x24
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	623b      	str	r3, [r7, #32]
 800a130:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	69f9      	ldr	r1, [r7, #28]
 800a134:	6a3a      	ldr	r2, [r7, #32]
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e6      	bne.n	800a110 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a142:	88fb      	ldrh	r3, [r7, #6]
 800a144:	461a      	mov	r2, r3
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f001 faef 	bl	800b72c <UART_Start_Receive_DMA>
 800a14e:	4603      	mov	r3, r0
 800a150:	e000      	b.n	800a154 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a152:	2302      	movs	r3, #2
  }
}
 800a154:	4618      	mov	r0, r3
 800a156:	3728      	adds	r7, #40	; 0x28
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	58000c00 	.word	0x58000c00

0800a160 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b0ba      	sub	sp, #232	; 0xe8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a186:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a18a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a18e:	4013      	ands	r3, r2
 800a190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d11b      	bne.n	800a1d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1a0:	f003 0320 	and.w	r3, r3, #32
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d015      	beq.n	800a1d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ac:	f003 0320 	and.w	r3, r3, #32
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d105      	bne.n	800a1c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d009      	beq.n	800a1d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 835a 	beq.w	800a87e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	4798      	blx	r3
      }
      return;
 800a1d2:	e354      	b.n	800a87e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a1d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 811f 	beq.w	800a41c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a1de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a1e2:	4b8b      	ldr	r3, [pc, #556]	; (800a410 <HAL_UART_IRQHandler+0x2b0>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d106      	bne.n	800a1f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a1ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a1ee:	4b89      	ldr	r3, [pc, #548]	; (800a414 <HAL_UART_IRQHandler+0x2b4>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 8112 	beq.w	800a41c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d011      	beq.n	800a228 <HAL_UART_IRQHandler+0xc8>
 800a204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00b      	beq.n	800a228 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2201      	movs	r2, #1
 800a216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a21e:	f043 0201 	orr.w	r2, r3, #1
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	d011      	beq.n	800a258 <HAL_UART_IRQHandler+0xf8>
 800a234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00b      	beq.n	800a258 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2202      	movs	r2, #2
 800a246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a24e:	f043 0204 	orr.w	r2, r3, #4
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d011      	beq.n	800a288 <HAL_UART_IRQHandler+0x128>
 800a264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a268:	f003 0301 	and.w	r3, r3, #1
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2204      	movs	r2, #4
 800a276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a27e:	f043 0202 	orr.w	r2, r3, #2
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a28c:	f003 0308 	and.w	r3, r3, #8
 800a290:	2b00      	cmp	r3, #0
 800a292:	d017      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a298:	f003 0320 	and.w	r3, r3, #32
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d105      	bne.n	800a2ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a2a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a2a4:	4b5a      	ldr	r3, [pc, #360]	; (800a410 <HAL_UART_IRQHandler+0x2b0>)
 800a2a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00b      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2ba:	f043 0208 	orr.w	r2, r3, #8
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d012      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x196>
 800a2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00c      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2ec:	f043 0220 	orr.w	r2, r3, #32
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 82c0 	beq.w	800a882 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a306:	f003 0320 	and.w	r3, r3, #32
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d013      	beq.n	800a336 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b00      	cmp	r3, #0
 800a318:	d105      	bne.n	800a326 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a31a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a31e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d007      	beq.n	800a336 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a33c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34a:	2b40      	cmp	r3, #64	; 0x40
 800a34c:	d005      	beq.n	800a35a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a34e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a352:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a356:	2b00      	cmp	r3, #0
 800a358:	d04f      	beq.n	800a3fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f001 fad0 	bl	800b900 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36a:	2b40      	cmp	r3, #64	; 0x40
 800a36c:	d141      	bne.n	800a3f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a38c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3308      	adds	r3, #8
 800a396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a39a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a39e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a3a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a3b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1d9      	bne.n	800a36e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d013      	beq.n	800a3ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3c6:	4a14      	ldr	r2, [pc, #80]	; (800a418 <HAL_UART_IRQHandler+0x2b8>)
 800a3c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f9 fb68 	bl	8003aa4 <HAL_DMA_Abort_IT>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d017      	beq.n	800a40a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e8:	e00f      	b.n	800a40a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa6a 	bl	800a8c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f0:	e00b      	b.n	800a40a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fa66 	bl	800a8c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f8:	e007      	b.n	800a40a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fa62 	bl	800a8c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a408:	e23b      	b.n	800a882 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a40a:	bf00      	nop
    return;
 800a40c:	e239      	b.n	800a882 <HAL_UART_IRQHandler+0x722>
 800a40e:	bf00      	nop
 800a410:	10000001 	.word	0x10000001
 800a414:	04000120 	.word	0x04000120
 800a418:	0800bba7 	.word	0x0800bba7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a420:	2b01      	cmp	r3, #1
 800a422:	f040 81ce 	bne.w	800a7c2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a42a:	f003 0310 	and.w	r3, r3, #16
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 81c7 	beq.w	800a7c2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a438:	f003 0310 	and.w	r3, r3, #16
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 81c0 	beq.w	800a7c2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2210      	movs	r2, #16
 800a448:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a454:	2b40      	cmp	r3, #64	; 0x40
 800a456:	f040 813b 	bne.w	800a6d0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a8b      	ldr	r2, [pc, #556]	; (800a690 <HAL_UART_IRQHandler+0x530>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d059      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a89      	ldr	r2, [pc, #548]	; (800a694 <HAL_UART_IRQHandler+0x534>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d053      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a87      	ldr	r2, [pc, #540]	; (800a698 <HAL_UART_IRQHandler+0x538>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d04d      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a85      	ldr	r2, [pc, #532]	; (800a69c <HAL_UART_IRQHandler+0x53c>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d047      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a83      	ldr	r2, [pc, #524]	; (800a6a0 <HAL_UART_IRQHandler+0x540>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d041      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a81      	ldr	r2, [pc, #516]	; (800a6a4 <HAL_UART_IRQHandler+0x544>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d03b      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a7f      	ldr	r2, [pc, #508]	; (800a6a8 <HAL_UART_IRQHandler+0x548>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d035      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a7d      	ldr	r2, [pc, #500]	; (800a6ac <HAL_UART_IRQHandler+0x54c>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d02f      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a7b      	ldr	r2, [pc, #492]	; (800a6b0 <HAL_UART_IRQHandler+0x550>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d029      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a79      	ldr	r2, [pc, #484]	; (800a6b4 <HAL_UART_IRQHandler+0x554>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d023      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a77      	ldr	r2, [pc, #476]	; (800a6b8 <HAL_UART_IRQHandler+0x558>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d01d      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a75      	ldr	r2, [pc, #468]	; (800a6bc <HAL_UART_IRQHandler+0x55c>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d017      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a73      	ldr	r2, [pc, #460]	; (800a6c0 <HAL_UART_IRQHandler+0x560>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d011      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a71      	ldr	r2, [pc, #452]	; (800a6c4 <HAL_UART_IRQHandler+0x564>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d00b      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a6f      	ldr	r2, [pc, #444]	; (800a6c8 <HAL_UART_IRQHandler+0x568>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d005      	beq.n	800a51a <HAL_UART_IRQHandler+0x3ba>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a6d      	ldr	r2, [pc, #436]	; (800a6cc <HAL_UART_IRQHandler+0x56c>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d105      	bne.n	800a526 <HAL_UART_IRQHandler+0x3c6>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	b29b      	uxth	r3, r3
 800a524:	e004      	b.n	800a530 <HAL_UART_IRQHandler+0x3d0>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	b29b      	uxth	r3, r3
 800a530:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a534:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 81a4 	beq.w	800a886 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a544:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a548:	429a      	cmp	r2, r3
 800a54a:	f080 819c 	bcs.w	800a886 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a554:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a562:	f000 8086 	beq.w	800a672 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a572:	e853 3f00 	ldrex	r3, [r3]
 800a576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a57a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a57e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a582:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a590:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a594:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a59c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a5a0:	e841 2300 	strex	r3, r2, [r1]
 800a5a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a5a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1da      	bne.n	800a566 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5ba:	e853 3f00 	ldrex	r3, [r3]
 800a5be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a5c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5c2:	f023 0301 	bic.w	r3, r3, #1
 800a5c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a5d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a5d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a5dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a5e0:	e841 2300 	strex	r3, r2, [r1]
 800a5e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a5e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1e1      	bne.n	800a5b0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5f6:	e853 3f00 	ldrex	r3, [r3]
 800a5fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a5fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3308      	adds	r3, #8
 800a60c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a610:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a612:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a614:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a616:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a618:	e841 2300 	strex	r3, r2, [r1]
 800a61c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a61e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1e3      	bne.n	800a5ec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2220      	movs	r2, #32
 800a628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a63a:	e853 3f00 	ldrex	r3, [r3]
 800a63e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a642:	f023 0310 	bic.w	r3, r3, #16
 800a646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a654:	65bb      	str	r3, [r7, #88]	; 0x58
 800a656:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a65a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a65c:	e841 2300 	strex	r3, r2, [r1]
 800a660:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e4      	bne.n	800a632 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7f8 fefb 	bl	8003468 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a67e:	b29b      	uxth	r3, r3
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	b29b      	uxth	r3, r3
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f926 	bl	800a8d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a68c:	e0fb      	b.n	800a886 <HAL_UART_IRQHandler+0x726>
 800a68e:	bf00      	nop
 800a690:	40020010 	.word	0x40020010
 800a694:	40020028 	.word	0x40020028
 800a698:	40020040 	.word	0x40020040
 800a69c:	40020058 	.word	0x40020058
 800a6a0:	40020070 	.word	0x40020070
 800a6a4:	40020088 	.word	0x40020088
 800a6a8:	400200a0 	.word	0x400200a0
 800a6ac:	400200b8 	.word	0x400200b8
 800a6b0:	40020410 	.word	0x40020410
 800a6b4:	40020428 	.word	0x40020428
 800a6b8:	40020440 	.word	0x40020440
 800a6bc:	40020458 	.word	0x40020458
 800a6c0:	40020470 	.word	0x40020470
 800a6c4:	40020488 	.word	0x40020488
 800a6c8:	400204a0 	.word	0x400204a0
 800a6cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 80cc 	beq.w	800a88a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a6f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 80c7 	beq.w	800a88a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	461a      	mov	r2, r3
 800a71a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a71e:	647b      	str	r3, [r7, #68]	; 0x44
 800a720:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a726:	e841 2300 	strex	r3, r2, [r1]
 800a72a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1e4      	bne.n	800a6fc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3308      	adds	r3, #8
 800a738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	623b      	str	r3, [r7, #32]
   return(result);
 800a742:	6a3a      	ldr	r2, [r7, #32]
 800a744:	4b54      	ldr	r3, [pc, #336]	; (800a898 <HAL_UART_IRQHandler+0x738>)
 800a746:	4013      	ands	r3, r2
 800a748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3308      	adds	r3, #8
 800a752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a756:	633a      	str	r2, [r7, #48]	; 0x30
 800a758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a75e:	e841 2300 	strex	r3, r2, [r1]
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1e3      	bne.n	800a732 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	e853 3f00 	ldrex	r3, [r3]
 800a78a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f023 0310 	bic.w	r3, r3, #16
 800a792:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a7a0:	61fb      	str	r3, [r7, #28]
 800a7a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	69b9      	ldr	r1, [r7, #24]
 800a7a6:	69fa      	ldr	r2, [r7, #28]
 800a7a8:	e841 2300 	strex	r3, r2, [r1]
 800a7ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e4      	bne.n	800a77e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f88c 	bl	800a8d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7c0:	e063      	b.n	800a88a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00e      	beq.n	800a7ec <HAL_UART_IRQHandler+0x68c>
 800a7ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d008      	beq.n	800a7ec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a7e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f001 fbc1 	bl	800bf6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7ea:	e051      	b.n	800a890 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d014      	beq.n	800a822 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a800:	2b00      	cmp	r3, #0
 800a802:	d105      	bne.n	800a810 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a814:	2b00      	cmp	r3, #0
 800a816:	d03a      	beq.n	800a88e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	4798      	blx	r3
    }
    return;
 800a820:	e035      	b.n	800a88e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d009      	beq.n	800a842 <HAL_UART_IRQHandler+0x6e2>
 800a82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fb6b 	bl	800bf16 <UART_EndTransmit_IT>
    return;
 800a840:	e026      	b.n	800a890 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d009      	beq.n	800a862 <HAL_UART_IRQHandler+0x702>
 800a84e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a852:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d003      	beq.n	800a862 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 fb9a 	bl	800bf94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a860:	e016      	b.n	800a890 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d010      	beq.n	800a890 <HAL_UART_IRQHandler+0x730>
 800a86e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a872:	2b00      	cmp	r3, #0
 800a874:	da0c      	bge.n	800a890 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 fb82 	bl	800bf80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a87c:	e008      	b.n	800a890 <HAL_UART_IRQHandler+0x730>
      return;
 800a87e:	bf00      	nop
 800a880:	e006      	b.n	800a890 <HAL_UART_IRQHandler+0x730>
    return;
 800a882:	bf00      	nop
 800a884:	e004      	b.n	800a890 <HAL_UART_IRQHandler+0x730>
      return;
 800a886:	bf00      	nop
 800a888:	e002      	b.n	800a890 <HAL_UART_IRQHandler+0x730>
      return;
 800a88a:	bf00      	nop
 800a88c:	e000      	b.n	800a890 <HAL_UART_IRQHandler+0x730>
    return;
 800a88e:	bf00      	nop
  }
}
 800a890:	37e8      	adds	r7, #232	; 0xe8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	effffffe 	.word	0xeffffffe

0800a89c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8f4:	b092      	sub	sp, #72	; 0x48
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	431a      	orrs	r2, r3
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	431a      	orrs	r2, r3
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	4313      	orrs	r3, r2
 800a916:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	4bbe      	ldr	r3, [pc, #760]	; (800ac18 <UART_SetConfig+0x328>)
 800a920:	4013      	ands	r3, r2
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	6812      	ldr	r2, [r2, #0]
 800a926:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a928:	430b      	orrs	r3, r1
 800a92a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	68da      	ldr	r2, [r3, #12]
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4ab3      	ldr	r2, [pc, #716]	; (800ac1c <UART_SetConfig+0x32c>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d004      	beq.n	800a95c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a958:	4313      	orrs	r3, r2
 800a95a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	689a      	ldr	r2, [r3, #8]
 800a962:	4baf      	ldr	r3, [pc, #700]	; (800ac20 <UART_SetConfig+0x330>)
 800a964:	4013      	ands	r3, r2
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	6812      	ldr	r2, [r2, #0]
 800a96a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a96c:	430b      	orrs	r3, r1
 800a96e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a976:	f023 010f 	bic.w	r1, r3, #15
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4aa6      	ldr	r2, [pc, #664]	; (800ac24 <UART_SetConfig+0x334>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d177      	bne.n	800aa80 <UART_SetConfig+0x190>
 800a990:	4ba5      	ldr	r3, [pc, #660]	; (800ac28 <UART_SetConfig+0x338>)
 800a992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a994:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a998:	2b28      	cmp	r3, #40	; 0x28
 800a99a:	d86d      	bhi.n	800aa78 <UART_SetConfig+0x188>
 800a99c:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <UART_SetConfig+0xb4>)
 800a99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a2:	bf00      	nop
 800a9a4:	0800aa49 	.word	0x0800aa49
 800a9a8:	0800aa79 	.word	0x0800aa79
 800a9ac:	0800aa79 	.word	0x0800aa79
 800a9b0:	0800aa79 	.word	0x0800aa79
 800a9b4:	0800aa79 	.word	0x0800aa79
 800a9b8:	0800aa79 	.word	0x0800aa79
 800a9bc:	0800aa79 	.word	0x0800aa79
 800a9c0:	0800aa79 	.word	0x0800aa79
 800a9c4:	0800aa51 	.word	0x0800aa51
 800a9c8:	0800aa79 	.word	0x0800aa79
 800a9cc:	0800aa79 	.word	0x0800aa79
 800a9d0:	0800aa79 	.word	0x0800aa79
 800a9d4:	0800aa79 	.word	0x0800aa79
 800a9d8:	0800aa79 	.word	0x0800aa79
 800a9dc:	0800aa79 	.word	0x0800aa79
 800a9e0:	0800aa79 	.word	0x0800aa79
 800a9e4:	0800aa59 	.word	0x0800aa59
 800a9e8:	0800aa79 	.word	0x0800aa79
 800a9ec:	0800aa79 	.word	0x0800aa79
 800a9f0:	0800aa79 	.word	0x0800aa79
 800a9f4:	0800aa79 	.word	0x0800aa79
 800a9f8:	0800aa79 	.word	0x0800aa79
 800a9fc:	0800aa79 	.word	0x0800aa79
 800aa00:	0800aa79 	.word	0x0800aa79
 800aa04:	0800aa61 	.word	0x0800aa61
 800aa08:	0800aa79 	.word	0x0800aa79
 800aa0c:	0800aa79 	.word	0x0800aa79
 800aa10:	0800aa79 	.word	0x0800aa79
 800aa14:	0800aa79 	.word	0x0800aa79
 800aa18:	0800aa79 	.word	0x0800aa79
 800aa1c:	0800aa79 	.word	0x0800aa79
 800aa20:	0800aa79 	.word	0x0800aa79
 800aa24:	0800aa69 	.word	0x0800aa69
 800aa28:	0800aa79 	.word	0x0800aa79
 800aa2c:	0800aa79 	.word	0x0800aa79
 800aa30:	0800aa79 	.word	0x0800aa79
 800aa34:	0800aa79 	.word	0x0800aa79
 800aa38:	0800aa79 	.word	0x0800aa79
 800aa3c:	0800aa79 	.word	0x0800aa79
 800aa40:	0800aa79 	.word	0x0800aa79
 800aa44:	0800aa71 	.word	0x0800aa71
 800aa48:	2301      	movs	r3, #1
 800aa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4e:	e222      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aa50:	2304      	movs	r3, #4
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa56:	e21e      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aa58:	2308      	movs	r3, #8
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5e:	e21a      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aa60:	2310      	movs	r3, #16
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa66:	e216      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aa68:	2320      	movs	r3, #32
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6e:	e212      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aa70:	2340      	movs	r3, #64	; 0x40
 800aa72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa76:	e20e      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aa78:	2380      	movs	r3, #128	; 0x80
 800aa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7e:	e20a      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a69      	ldr	r2, [pc, #420]	; (800ac2c <UART_SetConfig+0x33c>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d130      	bne.n	800aaec <UART_SetConfig+0x1fc>
 800aa8a:	4b67      	ldr	r3, [pc, #412]	; (800ac28 <UART_SetConfig+0x338>)
 800aa8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8e:	f003 0307 	and.w	r3, r3, #7
 800aa92:	2b05      	cmp	r3, #5
 800aa94:	d826      	bhi.n	800aae4 <UART_SetConfig+0x1f4>
 800aa96:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <UART_SetConfig+0x1ac>)
 800aa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9c:	0800aab5 	.word	0x0800aab5
 800aaa0:	0800aabd 	.word	0x0800aabd
 800aaa4:	0800aac5 	.word	0x0800aac5
 800aaa8:	0800aacd 	.word	0x0800aacd
 800aaac:	0800aad5 	.word	0x0800aad5
 800aab0:	0800aadd 	.word	0x0800aadd
 800aab4:	2300      	movs	r3, #0
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaba:	e1ec      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aabc:	2304      	movs	r3, #4
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aac2:	e1e8      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aac4:	2308      	movs	r3, #8
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaca:	e1e4      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aacc:	2310      	movs	r3, #16
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad2:	e1e0      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aad4:	2320      	movs	r3, #32
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aada:	e1dc      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aadc:	2340      	movs	r3, #64	; 0x40
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae2:	e1d8      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aae4:	2380      	movs	r3, #128	; 0x80
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaea:	e1d4      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a4f      	ldr	r2, [pc, #316]	; (800ac30 <UART_SetConfig+0x340>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d130      	bne.n	800ab58 <UART_SetConfig+0x268>
 800aaf6:	4b4c      	ldr	r3, [pc, #304]	; (800ac28 <UART_SetConfig+0x338>)
 800aaf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aafa:	f003 0307 	and.w	r3, r3, #7
 800aafe:	2b05      	cmp	r3, #5
 800ab00:	d826      	bhi.n	800ab50 <UART_SetConfig+0x260>
 800ab02:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <UART_SetConfig+0x218>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab21 	.word	0x0800ab21
 800ab0c:	0800ab29 	.word	0x0800ab29
 800ab10:	0800ab31 	.word	0x0800ab31
 800ab14:	0800ab39 	.word	0x0800ab39
 800ab18:	0800ab41 	.word	0x0800ab41
 800ab1c:	0800ab49 	.word	0x0800ab49
 800ab20:	2300      	movs	r3, #0
 800ab22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab26:	e1b6      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ab28:	2304      	movs	r3, #4
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab2e:	e1b2      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ab30:	2308      	movs	r3, #8
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab36:	e1ae      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ab38:	2310      	movs	r3, #16
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3e:	e1aa      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ab40:	2320      	movs	r3, #32
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab46:	e1a6      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ab48:	2340      	movs	r3, #64	; 0x40
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4e:	e1a2      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ab50:	2380      	movs	r3, #128	; 0x80
 800ab52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab56:	e19e      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a35      	ldr	r2, [pc, #212]	; (800ac34 <UART_SetConfig+0x344>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d130      	bne.n	800abc4 <UART_SetConfig+0x2d4>
 800ab62:	4b31      	ldr	r3, [pc, #196]	; (800ac28 <UART_SetConfig+0x338>)
 800ab64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab66:	f003 0307 	and.w	r3, r3, #7
 800ab6a:	2b05      	cmp	r3, #5
 800ab6c:	d826      	bhi.n	800abbc <UART_SetConfig+0x2cc>
 800ab6e:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <UART_SetConfig+0x284>)
 800ab70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab74:	0800ab8d 	.word	0x0800ab8d
 800ab78:	0800ab95 	.word	0x0800ab95
 800ab7c:	0800ab9d 	.word	0x0800ab9d
 800ab80:	0800aba5 	.word	0x0800aba5
 800ab84:	0800abad 	.word	0x0800abad
 800ab88:	0800abb5 	.word	0x0800abb5
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab92:	e180      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ab94:	2304      	movs	r3, #4
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab9a:	e17c      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ab9c:	2308      	movs	r3, #8
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba2:	e178      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800aba4:	2310      	movs	r3, #16
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abaa:	e174      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800abac:	2320      	movs	r3, #32
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abb2:	e170      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800abb4:	2340      	movs	r3, #64	; 0x40
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abba:	e16c      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800abbc:	2380      	movs	r3, #128	; 0x80
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abc2:	e168      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a1b      	ldr	r2, [pc, #108]	; (800ac38 <UART_SetConfig+0x348>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d142      	bne.n	800ac54 <UART_SetConfig+0x364>
 800abce:	4b16      	ldr	r3, [pc, #88]	; (800ac28 <UART_SetConfig+0x338>)
 800abd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	2b05      	cmp	r3, #5
 800abd8:	d838      	bhi.n	800ac4c <UART_SetConfig+0x35c>
 800abda:	a201      	add	r2, pc, #4	; (adr r2, 800abe0 <UART_SetConfig+0x2f0>)
 800abdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe0:	0800abf9 	.word	0x0800abf9
 800abe4:	0800ac01 	.word	0x0800ac01
 800abe8:	0800ac09 	.word	0x0800ac09
 800abec:	0800ac11 	.word	0x0800ac11
 800abf0:	0800ac3d 	.word	0x0800ac3d
 800abf4:	0800ac45 	.word	0x0800ac45
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abfe:	e14a      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ac00:	2304      	movs	r3, #4
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac06:	e146      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ac08:	2308      	movs	r3, #8
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac0e:	e142      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ac10:	2310      	movs	r3, #16
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac16:	e13e      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ac18:	cfff69f3 	.word	0xcfff69f3
 800ac1c:	58000c00 	.word	0x58000c00
 800ac20:	11fff4ff 	.word	0x11fff4ff
 800ac24:	40011000 	.word	0x40011000
 800ac28:	58024400 	.word	0x58024400
 800ac2c:	40004400 	.word	0x40004400
 800ac30:	40004800 	.word	0x40004800
 800ac34:	40004c00 	.word	0x40004c00
 800ac38:	40005000 	.word	0x40005000
 800ac3c:	2320      	movs	r3, #32
 800ac3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac42:	e128      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ac44:	2340      	movs	r3, #64	; 0x40
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac4a:	e124      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ac4c:	2380      	movs	r3, #128	; 0x80
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac52:	e120      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4acb      	ldr	r2, [pc, #812]	; (800af88 <UART_SetConfig+0x698>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d176      	bne.n	800ad4c <UART_SetConfig+0x45c>
 800ac5e:	4bcb      	ldr	r3, [pc, #812]	; (800af8c <UART_SetConfig+0x69c>)
 800ac60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac66:	2b28      	cmp	r3, #40	; 0x28
 800ac68:	d86c      	bhi.n	800ad44 <UART_SetConfig+0x454>
 800ac6a:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <UART_SetConfig+0x380>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ad15 	.word	0x0800ad15
 800ac74:	0800ad45 	.word	0x0800ad45
 800ac78:	0800ad45 	.word	0x0800ad45
 800ac7c:	0800ad45 	.word	0x0800ad45
 800ac80:	0800ad45 	.word	0x0800ad45
 800ac84:	0800ad45 	.word	0x0800ad45
 800ac88:	0800ad45 	.word	0x0800ad45
 800ac8c:	0800ad45 	.word	0x0800ad45
 800ac90:	0800ad1d 	.word	0x0800ad1d
 800ac94:	0800ad45 	.word	0x0800ad45
 800ac98:	0800ad45 	.word	0x0800ad45
 800ac9c:	0800ad45 	.word	0x0800ad45
 800aca0:	0800ad45 	.word	0x0800ad45
 800aca4:	0800ad45 	.word	0x0800ad45
 800aca8:	0800ad45 	.word	0x0800ad45
 800acac:	0800ad45 	.word	0x0800ad45
 800acb0:	0800ad25 	.word	0x0800ad25
 800acb4:	0800ad45 	.word	0x0800ad45
 800acb8:	0800ad45 	.word	0x0800ad45
 800acbc:	0800ad45 	.word	0x0800ad45
 800acc0:	0800ad45 	.word	0x0800ad45
 800acc4:	0800ad45 	.word	0x0800ad45
 800acc8:	0800ad45 	.word	0x0800ad45
 800accc:	0800ad45 	.word	0x0800ad45
 800acd0:	0800ad2d 	.word	0x0800ad2d
 800acd4:	0800ad45 	.word	0x0800ad45
 800acd8:	0800ad45 	.word	0x0800ad45
 800acdc:	0800ad45 	.word	0x0800ad45
 800ace0:	0800ad45 	.word	0x0800ad45
 800ace4:	0800ad45 	.word	0x0800ad45
 800ace8:	0800ad45 	.word	0x0800ad45
 800acec:	0800ad45 	.word	0x0800ad45
 800acf0:	0800ad35 	.word	0x0800ad35
 800acf4:	0800ad45 	.word	0x0800ad45
 800acf8:	0800ad45 	.word	0x0800ad45
 800acfc:	0800ad45 	.word	0x0800ad45
 800ad00:	0800ad45 	.word	0x0800ad45
 800ad04:	0800ad45 	.word	0x0800ad45
 800ad08:	0800ad45 	.word	0x0800ad45
 800ad0c:	0800ad45 	.word	0x0800ad45
 800ad10:	0800ad3d 	.word	0x0800ad3d
 800ad14:	2301      	movs	r3, #1
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad1a:	e0bc      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad22:	e0b8      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad24:	2308      	movs	r3, #8
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad2a:	e0b4      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad32:	e0b0      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad34:	2320      	movs	r3, #32
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad3a:	e0ac      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad3c:	2340      	movs	r3, #64	; 0x40
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad42:	e0a8      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad44:	2380      	movs	r3, #128	; 0x80
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad4a:	e0a4      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a8f      	ldr	r2, [pc, #572]	; (800af90 <UART_SetConfig+0x6a0>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d130      	bne.n	800adb8 <UART_SetConfig+0x4c8>
 800ad56:	4b8d      	ldr	r3, [pc, #564]	; (800af8c <UART_SetConfig+0x69c>)
 800ad58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	d826      	bhi.n	800adb0 <UART_SetConfig+0x4c0>
 800ad62:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <UART_SetConfig+0x478>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad81 	.word	0x0800ad81
 800ad6c:	0800ad89 	.word	0x0800ad89
 800ad70:	0800ad91 	.word	0x0800ad91
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800ada1 	.word	0x0800ada1
 800ad7c:	0800ada9 	.word	0x0800ada9
 800ad80:	2300      	movs	r3, #0
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad86:	e086      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad88:	2304      	movs	r3, #4
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad8e:	e082      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad90:	2308      	movs	r3, #8
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad96:	e07e      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ad98:	2310      	movs	r3, #16
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad9e:	e07a      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ada0:	2320      	movs	r3, #32
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ada6:	e076      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ada8:	2340      	movs	r3, #64	; 0x40
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adae:	e072      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800adb0:	2380      	movs	r3, #128	; 0x80
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adb6:	e06e      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a75      	ldr	r2, [pc, #468]	; (800af94 <UART_SetConfig+0x6a4>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d130      	bne.n	800ae24 <UART_SetConfig+0x534>
 800adc2:	4b72      	ldr	r3, [pc, #456]	; (800af8c <UART_SetConfig+0x69c>)
 800adc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	2b05      	cmp	r3, #5
 800adcc:	d826      	bhi.n	800ae1c <UART_SetConfig+0x52c>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <UART_SetConfig+0x4e4>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800aded 	.word	0x0800aded
 800add8:	0800adf5 	.word	0x0800adf5
 800addc:	0800adfd 	.word	0x0800adfd
 800ade0:	0800ae05 	.word	0x0800ae05
 800ade4:	0800ae0d 	.word	0x0800ae0d
 800ade8:	0800ae15 	.word	0x0800ae15
 800adec:	2300      	movs	r3, #0
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adf2:	e050      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800adf4:	2304      	movs	r3, #4
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adfa:	e04c      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800adfc:	2308      	movs	r3, #8
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae02:	e048      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae04:	2310      	movs	r3, #16
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae0a:	e044      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae0c:	2320      	movs	r3, #32
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae12:	e040      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae14:	2340      	movs	r3, #64	; 0x40
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae1a:	e03c      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae1c:	2380      	movs	r3, #128	; 0x80
 800ae1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae22:	e038      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a5b      	ldr	r2, [pc, #364]	; (800af98 <UART_SetConfig+0x6a8>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d130      	bne.n	800ae90 <UART_SetConfig+0x5a0>
 800ae2e:	4b57      	ldr	r3, [pc, #348]	; (800af8c <UART_SetConfig+0x69c>)
 800ae30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	d826      	bhi.n	800ae88 <UART_SetConfig+0x598>
 800ae3a:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <UART_SetConfig+0x550>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800ae59 	.word	0x0800ae59
 800ae44:	0800ae61 	.word	0x0800ae61
 800ae48:	0800ae69 	.word	0x0800ae69
 800ae4c:	0800ae71 	.word	0x0800ae71
 800ae50:	0800ae79 	.word	0x0800ae79
 800ae54:	0800ae81 	.word	0x0800ae81
 800ae58:	2302      	movs	r3, #2
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae5e:	e01a      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae60:	2304      	movs	r3, #4
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae66:	e016      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae68:	2308      	movs	r3, #8
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae6e:	e012      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae70:	2310      	movs	r3, #16
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae76:	e00e      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae78:	2320      	movs	r3, #32
 800ae7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae7e:	e00a      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae80:	2340      	movs	r3, #64	; 0x40
 800ae82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae86:	e006      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae88:	2380      	movs	r3, #128	; 0x80
 800ae8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae8e:	e002      	b.n	800ae96 <UART_SetConfig+0x5a6>
 800ae90:	2380      	movs	r3, #128	; 0x80
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a3f      	ldr	r2, [pc, #252]	; (800af98 <UART_SetConfig+0x6a8>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	f040 80f8 	bne.w	800b092 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aea2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	dc46      	bgt.n	800af38 <UART_SetConfig+0x648>
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	f2c0 8082 	blt.w	800afb4 <UART_SetConfig+0x6c4>
 800aeb0:	3b02      	subs	r3, #2
 800aeb2:	2b1e      	cmp	r3, #30
 800aeb4:	d87e      	bhi.n	800afb4 <UART_SetConfig+0x6c4>
 800aeb6:	a201      	add	r2, pc, #4	; (adr r2, 800aebc <UART_SetConfig+0x5cc>)
 800aeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebc:	0800af3f 	.word	0x0800af3f
 800aec0:	0800afb5 	.word	0x0800afb5
 800aec4:	0800af47 	.word	0x0800af47
 800aec8:	0800afb5 	.word	0x0800afb5
 800aecc:	0800afb5 	.word	0x0800afb5
 800aed0:	0800afb5 	.word	0x0800afb5
 800aed4:	0800af57 	.word	0x0800af57
 800aed8:	0800afb5 	.word	0x0800afb5
 800aedc:	0800afb5 	.word	0x0800afb5
 800aee0:	0800afb5 	.word	0x0800afb5
 800aee4:	0800afb5 	.word	0x0800afb5
 800aee8:	0800afb5 	.word	0x0800afb5
 800aeec:	0800afb5 	.word	0x0800afb5
 800aef0:	0800afb5 	.word	0x0800afb5
 800aef4:	0800af67 	.word	0x0800af67
 800aef8:	0800afb5 	.word	0x0800afb5
 800aefc:	0800afb5 	.word	0x0800afb5
 800af00:	0800afb5 	.word	0x0800afb5
 800af04:	0800afb5 	.word	0x0800afb5
 800af08:	0800afb5 	.word	0x0800afb5
 800af0c:	0800afb5 	.word	0x0800afb5
 800af10:	0800afb5 	.word	0x0800afb5
 800af14:	0800afb5 	.word	0x0800afb5
 800af18:	0800afb5 	.word	0x0800afb5
 800af1c:	0800afb5 	.word	0x0800afb5
 800af20:	0800afb5 	.word	0x0800afb5
 800af24:	0800afb5 	.word	0x0800afb5
 800af28:	0800afb5 	.word	0x0800afb5
 800af2c:	0800afb5 	.word	0x0800afb5
 800af30:	0800afb5 	.word	0x0800afb5
 800af34:	0800afa7 	.word	0x0800afa7
 800af38:	2b40      	cmp	r3, #64	; 0x40
 800af3a:	d037      	beq.n	800afac <UART_SetConfig+0x6bc>
 800af3c:	e03a      	b.n	800afb4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800af3e:	f7fc fd67 	bl	8007a10 <HAL_RCCEx_GetD3PCLK1Freq>
 800af42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af44:	e03c      	b.n	800afc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fc fd76 	bl	8007a3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af54:	e034      	b.n	800afc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af56:	f107 0318 	add.w	r3, r7, #24
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fc fec2 	bl	8007ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af64:	e02c      	b.n	800afc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af66:	4b09      	ldr	r3, [pc, #36]	; (800af8c <UART_SetConfig+0x69c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0320 	and.w	r3, r3, #32
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d016      	beq.n	800afa0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af72:	4b06      	ldr	r3, [pc, #24]	; (800af8c <UART_SetConfig+0x69c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	08db      	lsrs	r3, r3, #3
 800af78:	f003 0303 	and.w	r3, r3, #3
 800af7c:	4a07      	ldr	r2, [pc, #28]	; (800af9c <UART_SetConfig+0x6ac>)
 800af7e:	fa22 f303 	lsr.w	r3, r2, r3
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af84:	e01c      	b.n	800afc0 <UART_SetConfig+0x6d0>
 800af86:	bf00      	nop
 800af88:	40011400 	.word	0x40011400
 800af8c:	58024400 	.word	0x58024400
 800af90:	40007800 	.word	0x40007800
 800af94:	40007c00 	.word	0x40007c00
 800af98:	58000c00 	.word	0x58000c00
 800af9c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800afa0:	4b9d      	ldr	r3, [pc, #628]	; (800b218 <UART_SetConfig+0x928>)
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa4:	e00c      	b.n	800afc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afa6:	4b9d      	ldr	r3, [pc, #628]	; (800b21c <UART_SetConfig+0x92c>)
 800afa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afaa:	e009      	b.n	800afc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb2:	e005      	b.n	800afc0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800afb4:	2300      	movs	r3, #0
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800afbe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 81de 	beq.w	800b384 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	4a94      	ldr	r2, [pc, #592]	; (800b220 <UART_SetConfig+0x930>)
 800afce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afd2:	461a      	mov	r2, r3
 800afd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800afda:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	4613      	mov	r3, r2
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	4413      	add	r3, r2
 800afe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe8:	429a      	cmp	r2, r3
 800afea:	d305      	bcc.n	800aff8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d903      	bls.n	800b000 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800affe:	e1c1      	b.n	800b384 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b002:	2200      	movs	r2, #0
 800b004:	60bb      	str	r3, [r7, #8]
 800b006:	60fa      	str	r2, [r7, #12]
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00c:	4a84      	ldr	r2, [pc, #528]	; (800b220 <UART_SetConfig+0x930>)
 800b00e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b012:	b29b      	uxth	r3, r3
 800b014:	2200      	movs	r2, #0
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b01e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b022:	f7f5 f9b5 	bl	8000390 <__aeabi_uldivmod>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4610      	mov	r0, r2
 800b02c:	4619      	mov	r1, r3
 800b02e:	f04f 0200 	mov.w	r2, #0
 800b032:	f04f 0300 	mov.w	r3, #0
 800b036:	020b      	lsls	r3, r1, #8
 800b038:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b03c:	0202      	lsls	r2, r0, #8
 800b03e:	6979      	ldr	r1, [r7, #20]
 800b040:	6849      	ldr	r1, [r1, #4]
 800b042:	0849      	lsrs	r1, r1, #1
 800b044:	2000      	movs	r0, #0
 800b046:	460c      	mov	r4, r1
 800b048:	4605      	mov	r5, r0
 800b04a:	eb12 0804 	adds.w	r8, r2, r4
 800b04e:	eb43 0905 	adc.w	r9, r3, r5
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	469a      	mov	sl, r3
 800b05a:	4693      	mov	fp, r2
 800b05c:	4652      	mov	r2, sl
 800b05e:	465b      	mov	r3, fp
 800b060:	4640      	mov	r0, r8
 800b062:	4649      	mov	r1, r9
 800b064:	f7f5 f994 	bl	8000390 <__aeabi_uldivmod>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4613      	mov	r3, r2
 800b06e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b076:	d308      	bcc.n	800b08a <UART_SetConfig+0x79a>
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b07e:	d204      	bcs.n	800b08a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b086:	60da      	str	r2, [r3, #12]
 800b088:	e17c      	b.n	800b384 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b090:	e178      	b.n	800b384 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b09a:	f040 80c5 	bne.w	800b228 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b09e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b0a2:	2b20      	cmp	r3, #32
 800b0a4:	dc48      	bgt.n	800b138 <UART_SetConfig+0x848>
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	db7b      	blt.n	800b1a2 <UART_SetConfig+0x8b2>
 800b0aa:	2b20      	cmp	r3, #32
 800b0ac:	d879      	bhi.n	800b1a2 <UART_SetConfig+0x8b2>
 800b0ae:	a201      	add	r2, pc, #4	; (adr r2, 800b0b4 <UART_SetConfig+0x7c4>)
 800b0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b4:	0800b13f 	.word	0x0800b13f
 800b0b8:	0800b147 	.word	0x0800b147
 800b0bc:	0800b1a3 	.word	0x0800b1a3
 800b0c0:	0800b1a3 	.word	0x0800b1a3
 800b0c4:	0800b14f 	.word	0x0800b14f
 800b0c8:	0800b1a3 	.word	0x0800b1a3
 800b0cc:	0800b1a3 	.word	0x0800b1a3
 800b0d0:	0800b1a3 	.word	0x0800b1a3
 800b0d4:	0800b15f 	.word	0x0800b15f
 800b0d8:	0800b1a3 	.word	0x0800b1a3
 800b0dc:	0800b1a3 	.word	0x0800b1a3
 800b0e0:	0800b1a3 	.word	0x0800b1a3
 800b0e4:	0800b1a3 	.word	0x0800b1a3
 800b0e8:	0800b1a3 	.word	0x0800b1a3
 800b0ec:	0800b1a3 	.word	0x0800b1a3
 800b0f0:	0800b1a3 	.word	0x0800b1a3
 800b0f4:	0800b16f 	.word	0x0800b16f
 800b0f8:	0800b1a3 	.word	0x0800b1a3
 800b0fc:	0800b1a3 	.word	0x0800b1a3
 800b100:	0800b1a3 	.word	0x0800b1a3
 800b104:	0800b1a3 	.word	0x0800b1a3
 800b108:	0800b1a3 	.word	0x0800b1a3
 800b10c:	0800b1a3 	.word	0x0800b1a3
 800b110:	0800b1a3 	.word	0x0800b1a3
 800b114:	0800b1a3 	.word	0x0800b1a3
 800b118:	0800b1a3 	.word	0x0800b1a3
 800b11c:	0800b1a3 	.word	0x0800b1a3
 800b120:	0800b1a3 	.word	0x0800b1a3
 800b124:	0800b1a3 	.word	0x0800b1a3
 800b128:	0800b1a3 	.word	0x0800b1a3
 800b12c:	0800b1a3 	.word	0x0800b1a3
 800b130:	0800b1a3 	.word	0x0800b1a3
 800b134:	0800b195 	.word	0x0800b195
 800b138:	2b40      	cmp	r3, #64	; 0x40
 800b13a:	d02e      	beq.n	800b19a <UART_SetConfig+0x8aa>
 800b13c:	e031      	b.n	800b1a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b13e:	f7fb fcf5 	bl	8006b2c <HAL_RCC_GetPCLK1Freq>
 800b142:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b144:	e033      	b.n	800b1ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b146:	f7fb fd07 	bl	8006b58 <HAL_RCC_GetPCLK2Freq>
 800b14a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b14c:	e02f      	b.n	800b1ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b152:	4618      	mov	r0, r3
 800b154:	f7fc fc72 	bl	8007a3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b15c:	e027      	b.n	800b1ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b15e:	f107 0318 	add.w	r3, r7, #24
 800b162:	4618      	mov	r0, r3
 800b164:	f7fc fdbe 	bl	8007ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b16c:	e01f      	b.n	800b1ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b16e:	4b2d      	ldr	r3, [pc, #180]	; (800b224 <UART_SetConfig+0x934>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0320 	and.w	r3, r3, #32
 800b176:	2b00      	cmp	r3, #0
 800b178:	d009      	beq.n	800b18e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b17a:	4b2a      	ldr	r3, [pc, #168]	; (800b224 <UART_SetConfig+0x934>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	08db      	lsrs	r3, r3, #3
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	4a24      	ldr	r2, [pc, #144]	; (800b218 <UART_SetConfig+0x928>)
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b18c:	e00f      	b.n	800b1ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b18e:	4b22      	ldr	r3, [pc, #136]	; (800b218 <UART_SetConfig+0x928>)
 800b190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b192:	e00c      	b.n	800b1ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b194:	4b21      	ldr	r3, [pc, #132]	; (800b21c <UART_SetConfig+0x92c>)
 800b196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b198:	e009      	b.n	800b1ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b19a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1a0:	e005      	b.n	800b1ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b1ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 80e7 	beq.w	800b384 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ba:	4a19      	ldr	r2, [pc, #100]	; (800b220 <UART_SetConfig+0x930>)
 800b1bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1c8:	005a      	lsls	r2, r3, #1
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	085b      	lsrs	r3, r3, #1
 800b1d0:	441a      	add	r2, r3
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	2b0f      	cmp	r3, #15
 800b1e0:	d916      	bls.n	800b210 <UART_SetConfig+0x920>
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1e8:	d212      	bcs.n	800b210 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	f023 030f 	bic.w	r3, r3, #15
 800b1f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	085b      	lsrs	r3, r3, #1
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	f003 0307 	and.w	r3, r3, #7
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b202:	4313      	orrs	r3, r2
 800b204:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b20c:	60da      	str	r2, [r3, #12]
 800b20e:	e0b9      	b.n	800b384 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b216:	e0b5      	b.n	800b384 <UART_SetConfig+0xa94>
 800b218:	03d09000 	.word	0x03d09000
 800b21c:	003d0900 	.word	0x003d0900
 800b220:	0800cc50 	.word	0x0800cc50
 800b224:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b228:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b22c:	2b20      	cmp	r3, #32
 800b22e:	dc49      	bgt.n	800b2c4 <UART_SetConfig+0x9d4>
 800b230:	2b00      	cmp	r3, #0
 800b232:	db7c      	blt.n	800b32e <UART_SetConfig+0xa3e>
 800b234:	2b20      	cmp	r3, #32
 800b236:	d87a      	bhi.n	800b32e <UART_SetConfig+0xa3e>
 800b238:	a201      	add	r2, pc, #4	; (adr r2, 800b240 <UART_SetConfig+0x950>)
 800b23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23e:	bf00      	nop
 800b240:	0800b2cb 	.word	0x0800b2cb
 800b244:	0800b2d3 	.word	0x0800b2d3
 800b248:	0800b32f 	.word	0x0800b32f
 800b24c:	0800b32f 	.word	0x0800b32f
 800b250:	0800b2db 	.word	0x0800b2db
 800b254:	0800b32f 	.word	0x0800b32f
 800b258:	0800b32f 	.word	0x0800b32f
 800b25c:	0800b32f 	.word	0x0800b32f
 800b260:	0800b2eb 	.word	0x0800b2eb
 800b264:	0800b32f 	.word	0x0800b32f
 800b268:	0800b32f 	.word	0x0800b32f
 800b26c:	0800b32f 	.word	0x0800b32f
 800b270:	0800b32f 	.word	0x0800b32f
 800b274:	0800b32f 	.word	0x0800b32f
 800b278:	0800b32f 	.word	0x0800b32f
 800b27c:	0800b32f 	.word	0x0800b32f
 800b280:	0800b2fb 	.word	0x0800b2fb
 800b284:	0800b32f 	.word	0x0800b32f
 800b288:	0800b32f 	.word	0x0800b32f
 800b28c:	0800b32f 	.word	0x0800b32f
 800b290:	0800b32f 	.word	0x0800b32f
 800b294:	0800b32f 	.word	0x0800b32f
 800b298:	0800b32f 	.word	0x0800b32f
 800b29c:	0800b32f 	.word	0x0800b32f
 800b2a0:	0800b32f 	.word	0x0800b32f
 800b2a4:	0800b32f 	.word	0x0800b32f
 800b2a8:	0800b32f 	.word	0x0800b32f
 800b2ac:	0800b32f 	.word	0x0800b32f
 800b2b0:	0800b32f 	.word	0x0800b32f
 800b2b4:	0800b32f 	.word	0x0800b32f
 800b2b8:	0800b32f 	.word	0x0800b32f
 800b2bc:	0800b32f 	.word	0x0800b32f
 800b2c0:	0800b321 	.word	0x0800b321
 800b2c4:	2b40      	cmp	r3, #64	; 0x40
 800b2c6:	d02e      	beq.n	800b326 <UART_SetConfig+0xa36>
 800b2c8:	e031      	b.n	800b32e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2ca:	f7fb fc2f 	bl	8006b2c <HAL_RCC_GetPCLK1Freq>
 800b2ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b2d0:	e033      	b.n	800b33a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2d2:	f7fb fc41 	bl	8006b58 <HAL_RCC_GetPCLK2Freq>
 800b2d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b2d8:	e02f      	b.n	800b33a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fc fbac 	bl	8007a3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e8:	e027      	b.n	800b33a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2ea:	f107 0318 	add.w	r3, r7, #24
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fc fcf8 	bl	8007ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2f8:	e01f      	b.n	800b33a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2fa:	4b2d      	ldr	r3, [pc, #180]	; (800b3b0 <UART_SetConfig+0xac0>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0320 	and.w	r3, r3, #32
 800b302:	2b00      	cmp	r3, #0
 800b304:	d009      	beq.n	800b31a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b306:	4b2a      	ldr	r3, [pc, #168]	; (800b3b0 <UART_SetConfig+0xac0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	08db      	lsrs	r3, r3, #3
 800b30c:	f003 0303 	and.w	r3, r3, #3
 800b310:	4a28      	ldr	r2, [pc, #160]	; (800b3b4 <UART_SetConfig+0xac4>)
 800b312:	fa22 f303 	lsr.w	r3, r2, r3
 800b316:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b318:	e00f      	b.n	800b33a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b31a:	4b26      	ldr	r3, [pc, #152]	; (800b3b4 <UART_SetConfig+0xac4>)
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b31e:	e00c      	b.n	800b33a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b320:	4b25      	ldr	r3, [pc, #148]	; (800b3b8 <UART_SetConfig+0xac8>)
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b324:	e009      	b.n	800b33a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32c:	e005      	b.n	800b33a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b32e:	2300      	movs	r3, #0
 800b330:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b338:	bf00      	nop
    }

    if (pclk != 0U)
 800b33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d021      	beq.n	800b384 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b344:	4a1d      	ldr	r2, [pc, #116]	; (800b3bc <UART_SetConfig+0xacc>)
 800b346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b34a:	461a      	mov	r2, r3
 800b34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	085b      	lsrs	r3, r3, #1
 800b358:	441a      	add	r2, r3
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b362:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b366:	2b0f      	cmp	r3, #15
 800b368:	d909      	bls.n	800b37e <UART_SetConfig+0xa8e>
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b370:	d205      	bcs.n	800b37e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b374:	b29a      	uxth	r2, r3
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	60da      	str	r2, [r3, #12]
 800b37c:	e002      	b.n	800b384 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2201      	movs	r2, #1
 800b388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2201      	movs	r2, #1
 800b390:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2200      	movs	r2, #0
 800b398:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2200      	movs	r2, #0
 800b39e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b3a0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3748      	adds	r7, #72	; 0x48
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3ae:	bf00      	nop
 800b3b0:	58024400 	.word	0x58024400
 800b3b4:	03d09000 	.word	0x03d09000
 800b3b8:	003d0900 	.word	0x003d0900
 800b3bc:	0800cc50 	.word	0x0800cc50

0800b3c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00a      	beq.n	800b3ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ee:	f003 0302 	and.w	r3, r3, #2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00a      	beq.n	800b40c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	430a      	orrs	r2, r1
 800b40a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b410:	f003 0304 	and.w	r3, r3, #4
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00a      	beq.n	800b42e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	430a      	orrs	r2, r1
 800b42c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b432:	f003 0308 	and.w	r3, r3, #8
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00a      	beq.n	800b450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	430a      	orrs	r2, r1
 800b44e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b454:	f003 0310 	and.w	r3, r3, #16
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00a      	beq.n	800b472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	430a      	orrs	r2, r1
 800b470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b476:	f003 0320 	and.w	r3, r3, #32
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00a      	beq.n	800b494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	430a      	orrs	r2, r1
 800b492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d01a      	beq.n	800b4d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4be:	d10a      	bne.n	800b4d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00a      	beq.n	800b4f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	605a      	str	r2, [r3, #4]
  }
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af02      	add	r7, sp, #8
 800b50a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b514:	f7f7 f896 	bl	8002644 <HAL_GetTick>
 800b518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0308 	and.w	r3, r3, #8
 800b524:	2b08      	cmp	r3, #8
 800b526:	d10e      	bne.n	800b546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2200      	movs	r2, #0
 800b532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f82f 	bl	800b59a <UART_WaitOnFlagUntilTimeout>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e025      	b.n	800b592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b04      	cmp	r3, #4
 800b552:	d10e      	bne.n	800b572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f819 	bl	800b59a <UART_WaitOnFlagUntilTimeout>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e00f      	b.n	800b592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2220      	movs	r2, #32
 800b576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2220      	movs	r2, #32
 800b57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b09c      	sub	sp, #112	; 0x70
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	60f8      	str	r0, [r7, #12]
 800b5a2:	60b9      	str	r1, [r7, #8]
 800b5a4:	603b      	str	r3, [r7, #0]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5aa:	e0a9      	b.n	800b700 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5b2:	f000 80a5 	beq.w	800b700 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5b6:	f7f7 f845 	bl	8002644 <HAL_GetTick>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d302      	bcc.n	800b5cc <UART_WaitOnFlagUntilTimeout+0x32>
 800b5c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d140      	bne.n	800b64e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d4:	e853 3f00 	ldrex	r3, [r3]
 800b5d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5e0:	667b      	str	r3, [r7, #100]	; 0x64
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b5f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1e6      	bne.n	800b5cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3308      	adds	r3, #8
 800b604:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	f023 0301 	bic.w	r3, r3, #1
 800b614:	663b      	str	r3, [r7, #96]	; 0x60
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3308      	adds	r3, #8
 800b61c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b61e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b620:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b626:	e841 2300 	strex	r3, r2, [r1]
 800b62a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1e5      	bne.n	800b5fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2220      	movs	r2, #32
 800b636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2220      	movs	r2, #32
 800b63e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e069      	b.n	800b722 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 0304 	and.w	r3, r3, #4
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d051      	beq.n	800b700 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b66a:	d149      	bne.n	800b700 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b674:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67e:	e853 3f00 	ldrex	r3, [r3]
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b68a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b694:	637b      	str	r3, [r7, #52]	; 0x34
 800b696:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b69a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b69c:	e841 2300 	strex	r3, r2, [r1]
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1e6      	bne.n	800b676 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	e853 3f00 	ldrex	r3, [r3]
 800b6b6:	613b      	str	r3, [r7, #16]
   return(result);
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	f023 0301 	bic.w	r3, r3, #1
 800b6be:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	3308      	adds	r3, #8
 800b6c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6c8:	623a      	str	r2, [r7, #32]
 800b6ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6cc:	69f9      	ldr	r1, [r7, #28]
 800b6ce:	6a3a      	ldr	r2, [r7, #32]
 800b6d0:	e841 2300 	strex	r3, r2, [r1]
 800b6d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1e5      	bne.n	800b6a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2220      	movs	r2, #32
 800b6e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2220      	movs	r2, #32
 800b6e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2220      	movs	r2, #32
 800b6f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e010      	b.n	800b722 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	69da      	ldr	r2, [r3, #28]
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	4013      	ands	r3, r2
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	bf0c      	ite	eq
 800b710:	2301      	moveq	r3, #1
 800b712:	2300      	movne	r3, #0
 800b714:	b2db      	uxtb	r3, r3
 800b716:	461a      	mov	r2, r3
 800b718:	79fb      	ldrb	r3, [r7, #7]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	f43f af46 	beq.w	800b5ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3770      	adds	r7, #112	; 0x70
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
	...

0800b72c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b096      	sub	sp, #88	; 0x58
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	4613      	mov	r3, r2
 800b738:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	88fa      	ldrh	r2, [r7, #6]
 800b744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2222      	movs	r2, #34	; 0x22
 800b754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d02c      	beq.n	800b7ba <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b764:	4a42      	ldr	r2, [pc, #264]	; (800b870 <UART_Start_Receive_DMA+0x144>)
 800b766:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b76c:	4a41      	ldr	r2, [pc, #260]	; (800b874 <UART_Start_Receive_DMA+0x148>)
 800b76e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b774:	4a40      	ldr	r2, [pc, #256]	; (800b878 <UART_Start_Receive_DMA+0x14c>)
 800b776:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b77c:	2200      	movs	r2, #0
 800b77e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3324      	adds	r3, #36	; 0x24
 800b78a:	4619      	mov	r1, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b790:	461a      	mov	r2, r3
 800b792:	88fb      	ldrh	r3, [r7, #6]
 800b794:	f7f7 fbfe 	bl	8002f94 <HAL_DMA_Start_IT>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00d      	beq.n	800b7ba <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2210      	movs	r2, #16
 800b7a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2220      	movs	r2, #32
 800b7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e055      	b.n	800b866 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d018      	beq.n	800b7fc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d2:	e853 3f00 	ldrex	r3, [r3]
 800b7d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7de:	657b      	str	r3, [r7, #84]	; 0x54
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7ea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7f0:	e841 2300 	strex	r3, r2, [r1]
 800b7f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e6      	bne.n	800b7ca <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3308      	adds	r3, #8
 800b802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	e853 3f00 	ldrex	r3, [r3]
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	f043 0301 	orr.w	r3, r3, #1
 800b812:	653b      	str	r3, [r7, #80]	; 0x50
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3308      	adds	r3, #8
 800b81a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b81c:	637a      	str	r2, [r7, #52]	; 0x34
 800b81e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b824:	e841 2300 	strex	r3, r2, [r1]
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e5      	bne.n	800b7fc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3308      	adds	r3, #8
 800b836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	e853 3f00 	ldrex	r3, [r3]
 800b83e:	613b      	str	r3, [r7, #16]
   return(result);
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b846:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3308      	adds	r3, #8
 800b84e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b850:	623a      	str	r2, [r7, #32]
 800b852:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b854:	69f9      	ldr	r1, [r7, #28]
 800b856:	6a3a      	ldr	r2, [r7, #32]
 800b858:	e841 2300 	strex	r3, r2, [r1]
 800b85c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e5      	bne.n	800b830 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3758      	adds	r7, #88	; 0x58
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	0800b9cd 	.word	0x0800b9cd
 800b874:	0800baef 	.word	0x0800baef
 800b878:	0800bb27 	.word	0x0800bb27

0800b87c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b08f      	sub	sp, #60	; 0x3c
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	e853 3f00 	ldrex	r3, [r3]
 800b890:	61fb      	str	r3, [r7, #28]
   return(result);
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b898:	637b      	str	r3, [r7, #52]	; 0x34
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8aa:	e841 2300 	strex	r3, r2, [r1]
 800b8ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1e6      	bne.n	800b884 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	e853 3f00 	ldrex	r3, [r3]
 800b8c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b8cc:	633b      	str	r3, [r7, #48]	; 0x30
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3308      	adds	r3, #8
 800b8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d6:	61ba      	str	r2, [r7, #24]
 800b8d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	6979      	ldr	r1, [r7, #20]
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	e841 2300 	strex	r3, r2, [r1]
 800b8e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1e5      	bne.n	800b8b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2220      	movs	r2, #32
 800b8ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b8f2:	bf00      	nop
 800b8f4:	373c      	adds	r7, #60	; 0x3c
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
	...

0800b900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b900:	b480      	push	{r7}
 800b902:	b095      	sub	sp, #84	; 0x54
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b910:	e853 3f00 	ldrex	r3, [r3]
 800b914:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b91c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	461a      	mov	r2, r3
 800b924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b926:	643b      	str	r3, [r7, #64]	; 0x40
 800b928:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b92c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b92e:	e841 2300 	strex	r3, r2, [r1]
 800b932:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1e6      	bne.n	800b908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	3308      	adds	r3, #8
 800b940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	e853 3f00 	ldrex	r3, [r3]
 800b948:	61fb      	str	r3, [r7, #28]
   return(result);
 800b94a:	69fa      	ldr	r2, [r7, #28]
 800b94c:	4b1e      	ldr	r3, [pc, #120]	; (800b9c8 <UART_EndRxTransfer+0xc8>)
 800b94e:	4013      	ands	r3, r2
 800b950:	64bb      	str	r3, [r7, #72]	; 0x48
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	3308      	adds	r3, #8
 800b958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b95a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b95c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b962:	e841 2300 	strex	r3, r2, [r1]
 800b966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1e5      	bne.n	800b93a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b972:	2b01      	cmp	r3, #1
 800b974:	d118      	bne.n	800b9a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	e853 3f00 	ldrex	r3, [r3]
 800b982:	60bb      	str	r3, [r7, #8]
   return(result);
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f023 0310 	bic.w	r3, r3, #16
 800b98a:	647b      	str	r3, [r7, #68]	; 0x44
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	461a      	mov	r2, r3
 800b992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b994:	61bb      	str	r3, [r7, #24]
 800b996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b998:	6979      	ldr	r1, [r7, #20]
 800b99a:	69ba      	ldr	r2, [r7, #24]
 800b99c:	e841 2300 	strex	r3, r2, [r1]
 800b9a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1e6      	bne.n	800b976 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2220      	movs	r2, #32
 800b9ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b9bc:	bf00      	nop
 800b9be:	3754      	adds	r7, #84	; 0x54
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	effffffe 	.word	0xeffffffe

0800b9cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b09c      	sub	sp, #112	; 0x70
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	69db      	ldr	r3, [r3, #28]
 800b9de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9e2:	d071      	beq.n	800bac8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b9e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9f4:	e853 3f00 	ldrex	r3, [r3]
 800b9f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba00:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba0a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba12:	e841 2300 	strex	r3, r2, [r1]
 800ba16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1e6      	bne.n	800b9ec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3308      	adds	r3, #8
 800ba24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba28:	e853 3f00 	ldrex	r3, [r3]
 800ba2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba30:	f023 0301 	bic.w	r3, r3, #1
 800ba34:	667b      	str	r3, [r7, #100]	; 0x64
 800ba36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ba3e:	647a      	str	r2, [r7, #68]	; 0x44
 800ba40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1e5      	bne.n	800ba1e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3308      	adds	r3, #8
 800ba58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	e853 3f00 	ldrex	r3, [r3]
 800ba60:	623b      	str	r3, [r7, #32]
   return(result);
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba68:	663b      	str	r3, [r7, #96]	; 0x60
 800ba6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3308      	adds	r3, #8
 800ba70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba72:	633a      	str	r2, [r7, #48]	; 0x30
 800ba74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba7a:	e841 2300 	strex	r3, r2, [r1]
 800ba7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1e5      	bne.n	800ba52 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba88:	2220      	movs	r2, #32
 800ba8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d118      	bne.n	800bac8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	e853 3f00 	ldrex	r3, [r3]
 800baa2:	60fb      	str	r3, [r7, #12]
   return(result);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f023 0310 	bic.w	r3, r3, #16
 800baaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	461a      	mov	r2, r3
 800bab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bab4:	61fb      	str	r3, [r7, #28]
 800bab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab8:	69b9      	ldr	r1, [r7, #24]
 800baba:	69fa      	ldr	r2, [r7, #28]
 800babc:	e841 2300 	strex	r3, r2, [r1]
 800bac0:	617b      	str	r3, [r7, #20]
   return(result);
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e6      	bne.n	800ba96 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d107      	bne.n	800bae0 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bad2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bad6:	4619      	mov	r1, r3
 800bad8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bada:	f7fe fefd 	bl	800a8d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bade:	e002      	b.n	800bae6 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800bae0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bae2:	f7f6 faa5 	bl	8002030 <HAL_UART_RxCpltCallback>
}
 800bae6:	bf00      	nop
 800bae8:	3770      	adds	r7, #112	; 0x70
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d109      	bne.n	800bb18 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb0a:	085b      	lsrs	r3, r3, #1
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	4619      	mov	r1, r3
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f7fe fee1 	bl	800a8d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb16:	e002      	b.n	800bb1e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f7fe fec9 	bl	800a8b0 <HAL_UART_RxHalfCpltCallback>
}
 800bb1e:	bf00      	nop
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b086      	sub	sp, #24
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb4e:	2b80      	cmp	r3, #128	; 0x80
 800bb50:	d109      	bne.n	800bb66 <UART_DMAError+0x40>
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	2b21      	cmp	r3, #33	; 0x21
 800bb56:	d106      	bne.n	800bb66 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bb60:	6978      	ldr	r0, [r7, #20]
 800bb62:	f7ff fe8b 	bl	800b87c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb70:	2b40      	cmp	r3, #64	; 0x40
 800bb72:	d109      	bne.n	800bb88 <UART_DMAError+0x62>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b22      	cmp	r3, #34	; 0x22
 800bb78:	d106      	bne.n	800bb88 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bb82:	6978      	ldr	r0, [r7, #20]
 800bb84:	f7ff febc 	bl	800b900 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb8e:	f043 0210 	orr.w	r2, r3, #16
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb98:	6978      	ldr	r0, [r7, #20]
 800bb9a:	f7fe fe93 	bl	800a8c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb9e:	bf00      	nop
 800bba0:	3718      	adds	r7, #24
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b084      	sub	sp, #16
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f7fe fe7d 	bl	800a8c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbca:	bf00      	nop
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b08f      	sub	sp, #60	; 0x3c
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbe0:	2b21      	cmp	r3, #33	; 0x21
 800bbe2:	d14c      	bne.n	800bc7e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d132      	bne.n	800bc56 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	e853 3f00 	ldrex	r3, [r3]
 800bbfc:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc04:	637b      	str	r3, [r7, #52]	; 0x34
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc10:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc16:	e841 2300 	strex	r3, r2, [r1]
 800bc1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1e6      	bne.n	800bbf0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	e853 3f00 	ldrex	r3, [r3]
 800bc2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc36:	633b      	str	r3, [r7, #48]	; 0x30
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	61bb      	str	r3, [r7, #24]
 800bc42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc44:	6979      	ldr	r1, [r7, #20]
 800bc46:	69ba      	ldr	r2, [r7, #24]
 800bc48:	e841 2300 	strex	r3, r2, [r1]
 800bc4c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1e6      	bne.n	800bc22 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bc54:	e013      	b.n	800bc7e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc5a:	781a      	ldrb	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	3b01      	subs	r3, #1
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800bc7e:	bf00      	nop
 800bc80:	373c      	adds	r7, #60	; 0x3c
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b091      	sub	sp, #68	; 0x44
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc98:	2b21      	cmp	r3, #33	; 0x21
 800bc9a:	d151      	bne.n	800bd40 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d132      	bne.n	800bd0e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	e853 3f00 	ldrex	r3, [r3]
 800bcb4:	623b      	str	r3, [r7, #32]
   return(result);
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcbc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	633b      	str	r3, [r7, #48]	; 0x30
 800bcc8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcce:	e841 2300 	strex	r3, r2, [r1]
 800bcd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1e6      	bne.n	800bca8 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	e853 3f00 	ldrex	r3, [r3]
 800bce6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcee:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf8:	61fb      	str	r3, [r7, #28]
 800bcfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfc:	69b9      	ldr	r1, [r7, #24]
 800bcfe:	69fa      	ldr	r2, [r7, #28]
 800bd00:	e841 2300 	strex	r3, r2, [r1]
 800bd04:	617b      	str	r3, [r7, #20]
   return(result);
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1e6      	bne.n	800bcda <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bd0c:	e018      	b.n	800bd40 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd16:	881b      	ldrh	r3, [r3, #0]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd22:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd28:	1c9a      	adds	r2, r3, #2
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	3b01      	subs	r3, #1
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800bd40:	bf00      	nop
 800bd42:	3744      	adds	r7, #68	; 0x44
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b091      	sub	sp, #68	; 0x44
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd5a:	2b21      	cmp	r3, #33	; 0x21
 800bd5c:	d160      	bne.n	800be20 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd64:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bd66:	e057      	b.n	800be18 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d133      	bne.n	800bddc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3308      	adds	r3, #8
 800bd7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	e853 3f00 	ldrex	r3, [r3]
 800bd82:	623b      	str	r3, [r7, #32]
   return(result);
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bd8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3308      	adds	r3, #8
 800bd92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd94:	633a      	str	r2, [r7, #48]	; 0x30
 800bd96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd9c:	e841 2300 	strex	r3, r2, [r1]
 800bda0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1e5      	bne.n	800bd74 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc6:	61fb      	str	r3, [r7, #28]
 800bdc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdca:	69b9      	ldr	r1, [r7, #24]
 800bdcc:	69fa      	ldr	r2, [r7, #28]
 800bdce:	e841 2300 	strex	r3, r2, [r1]
 800bdd2:	617b      	str	r3, [r7, #20]
   return(result);
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1e6      	bne.n	800bda8 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bdda:	e021      	b.n	800be20 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	69db      	ldr	r3, [r3, #28]
 800bde2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d013      	beq.n	800be12 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdee:	781a      	ldrb	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be06:	b29b      	uxth	r3, r3
 800be08:	3b01      	subs	r3, #1
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800be12:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be14:	3b01      	subs	r3, #1
 800be16:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800be18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1a4      	bne.n	800bd68 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800be1e:	e7ff      	b.n	800be20 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800be20:	bf00      	nop
 800be22:	3744      	adds	r7, #68	; 0x44
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b091      	sub	sp, #68	; 0x44
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be3a:	2b21      	cmp	r3, #33	; 0x21
 800be3c:	d165      	bne.n	800bf0a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be44:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800be46:	e05c      	b.n	800bf02 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be4e:	b29b      	uxth	r3, r3
 800be50:	2b00      	cmp	r3, #0
 800be52:	d133      	bne.n	800bebc <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3308      	adds	r3, #8
 800be5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	e853 3f00 	ldrex	r3, [r3]
 800be62:	61fb      	str	r3, [r7, #28]
   return(result);
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800be6a:	637b      	str	r3, [r7, #52]	; 0x34
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3308      	adds	r3, #8
 800be72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be7c:	e841 2300 	strex	r3, r2, [r1]
 800be80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1e5      	bne.n	800be54 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	e853 3f00 	ldrex	r3, [r3]
 800be94:	60bb      	str	r3, [r7, #8]
   return(result);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be9c:	633b      	str	r3, [r7, #48]	; 0x30
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	61bb      	str	r3, [r7, #24]
 800bea8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	6979      	ldr	r1, [r7, #20]
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	613b      	str	r3, [r7, #16]
   return(result);
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e6      	bne.n	800be88 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800beba:	e026      	b.n	800bf0a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d018      	beq.n	800befc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bece:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed2:	881b      	ldrh	r3, [r3, #0]
 800bed4:	461a      	mov	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bede:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee4:	1c9a      	adds	r2, r3, #2
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	3b01      	subs	r3, #1
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800befc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800befe:	3b01      	subs	r3, #1
 800bf00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bf02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d19f      	bne.n	800be48 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bf08:	e7ff      	b.n	800bf0a <UART_TxISR_16BIT_FIFOEN+0xde>
 800bf0a:	bf00      	nop
 800bf0c:	3744      	adds	r7, #68	; 0x44
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b088      	sub	sp, #32
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	e853 3f00 	ldrex	r3, [r3]
 800bf2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf32:	61fb      	str	r3, [r7, #28]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	61bb      	str	r3, [r7, #24]
 800bf3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf40:	6979      	ldr	r1, [r7, #20]
 800bf42:	69ba      	ldr	r2, [r7, #24]
 800bf44:	e841 2300 	strex	r3, r2, [r1]
 800bf48:	613b      	str	r3, [r7, #16]
   return(result);
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e6      	bne.n	800bf1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2220      	movs	r2, #32
 800bf54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7fe fc9c 	bl	800a89c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf64:	bf00      	nop
 800bf66:	3720      	adds	r7, #32
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d101      	bne.n	800bfbe <HAL_UARTEx_DisableFifoMode+0x16>
 800bfba:	2302      	movs	r3, #2
 800bfbc:	e027      	b.n	800c00e <HAL_UARTEx_DisableFifoMode+0x66>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2224      	movs	r2, #36	; 0x24
 800bfca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f022 0201 	bic.w	r2, r2, #1
 800bfe4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bfec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2220      	movs	r2, #32
 800c000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d101      	bne.n	800c032 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c02e:	2302      	movs	r3, #2
 800c030:	e02d      	b.n	800c08e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2201      	movs	r2, #1
 800c036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2224      	movs	r2, #36	; 0x24
 800c03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f022 0201 	bic.w	r2, r2, #1
 800c058:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	430a      	orrs	r2, r1
 800c06c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f850 	bl	800c114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2220      	movs	r2, #32
 800c080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d101      	bne.n	800c0ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0aa:	2302      	movs	r3, #2
 800c0ac:	e02d      	b.n	800c10a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2224      	movs	r2, #36	; 0x24
 800c0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f022 0201 	bic.w	r2, r2, #1
 800c0d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f812 	bl	800c114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2220      	movs	r2, #32
 800c0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c120:	2b00      	cmp	r3, #0
 800c122:	d108      	bne.n	800c136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c134:	e031      	b.n	800c19a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c136:	2310      	movs	r3, #16
 800c138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c13a:	2310      	movs	r3, #16
 800c13c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	0e5b      	lsrs	r3, r3, #25
 800c146:	b2db      	uxtb	r3, r3
 800c148:	f003 0307 	and.w	r3, r3, #7
 800c14c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	0f5b      	lsrs	r3, r3, #29
 800c156:	b2db      	uxtb	r3, r3
 800c158:	f003 0307 	and.w	r3, r3, #7
 800c15c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	7b3a      	ldrb	r2, [r7, #12]
 800c162:	4911      	ldr	r1, [pc, #68]	; (800c1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c164:	5c8a      	ldrb	r2, [r1, r2]
 800c166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c16a:	7b3a      	ldrb	r2, [r7, #12]
 800c16c:	490f      	ldr	r1, [pc, #60]	; (800c1ac <UARTEx_SetNbDataToProcess+0x98>)
 800c16e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c170:	fb93 f3f2 	sdiv	r3, r3, r2
 800c174:	b29a      	uxth	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	7b7a      	ldrb	r2, [r7, #13]
 800c180:	4909      	ldr	r1, [pc, #36]	; (800c1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c182:	5c8a      	ldrb	r2, [r1, r2]
 800c184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c188:	7b7a      	ldrb	r2, [r7, #13]
 800c18a:	4908      	ldr	r1, [pc, #32]	; (800c1ac <UARTEx_SetNbDataToProcess+0x98>)
 800c18c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c18e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c192:	b29a      	uxth	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c19a:	bf00      	nop
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	0800cc68 	.word	0x0800cc68
 800c1ac:	0800cc70 	.word	0x0800cc70

0800c1b0 <atoi>:
 800c1b0:	220a      	movs	r2, #10
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	f000 b8e2 	b.w	800c37c <strtol>

0800c1b8 <__errno>:
 800c1b8:	4b01      	ldr	r3, [pc, #4]	; (800c1c0 <__errno+0x8>)
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	24000020 	.word	0x24000020

0800c1c4 <__libc_init_array>:
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	4d0d      	ldr	r5, [pc, #52]	; (800c1fc <__libc_init_array+0x38>)
 800c1c8:	4c0d      	ldr	r4, [pc, #52]	; (800c200 <__libc_init_array+0x3c>)
 800c1ca:	1b64      	subs	r4, r4, r5
 800c1cc:	10a4      	asrs	r4, r4, #2
 800c1ce:	2600      	movs	r6, #0
 800c1d0:	42a6      	cmp	r6, r4
 800c1d2:	d109      	bne.n	800c1e8 <__libc_init_array+0x24>
 800c1d4:	4d0b      	ldr	r5, [pc, #44]	; (800c204 <__libc_init_array+0x40>)
 800c1d6:	4c0c      	ldr	r4, [pc, #48]	; (800c208 <__libc_init_array+0x44>)
 800c1d8:	f000 fd1a 	bl	800cc10 <_init>
 800c1dc:	1b64      	subs	r4, r4, r5
 800c1de:	10a4      	asrs	r4, r4, #2
 800c1e0:	2600      	movs	r6, #0
 800c1e2:	42a6      	cmp	r6, r4
 800c1e4:	d105      	bne.n	800c1f2 <__libc_init_array+0x2e>
 800c1e6:	bd70      	pop	{r4, r5, r6, pc}
 800c1e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ec:	4798      	blx	r3
 800c1ee:	3601      	adds	r6, #1
 800c1f0:	e7ee      	b.n	800c1d0 <__libc_init_array+0xc>
 800c1f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1f6:	4798      	blx	r3
 800c1f8:	3601      	adds	r6, #1
 800c1fa:	e7f2      	b.n	800c1e2 <__libc_init_array+0x1e>
 800c1fc:	0800cdb4 	.word	0x0800cdb4
 800c200:	0800cdb4 	.word	0x0800cdb4
 800c204:	0800cdb4 	.word	0x0800cdb4
 800c208:	0800cdb8 	.word	0x0800cdb8

0800c20c <memcpy>:
 800c20c:	440a      	add	r2, r1
 800c20e:	4291      	cmp	r1, r2
 800c210:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c214:	d100      	bne.n	800c218 <memcpy+0xc>
 800c216:	4770      	bx	lr
 800c218:	b510      	push	{r4, lr}
 800c21a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c21e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c222:	4291      	cmp	r1, r2
 800c224:	d1f9      	bne.n	800c21a <memcpy+0xe>
 800c226:	bd10      	pop	{r4, pc}

0800c228 <memset>:
 800c228:	4402      	add	r2, r0
 800c22a:	4603      	mov	r3, r0
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d100      	bne.n	800c232 <memset+0xa>
 800c230:	4770      	bx	lr
 800c232:	f803 1b01 	strb.w	r1, [r3], #1
 800c236:	e7f9      	b.n	800c22c <memset+0x4>

0800c238 <siprintf>:
 800c238:	b40e      	push	{r1, r2, r3}
 800c23a:	b500      	push	{lr}
 800c23c:	b09c      	sub	sp, #112	; 0x70
 800c23e:	ab1d      	add	r3, sp, #116	; 0x74
 800c240:	9002      	str	r0, [sp, #8]
 800c242:	9006      	str	r0, [sp, #24]
 800c244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c248:	4809      	ldr	r0, [pc, #36]	; (800c270 <siprintf+0x38>)
 800c24a:	9107      	str	r1, [sp, #28]
 800c24c:	9104      	str	r1, [sp, #16]
 800c24e:	4909      	ldr	r1, [pc, #36]	; (800c274 <siprintf+0x3c>)
 800c250:	f853 2b04 	ldr.w	r2, [r3], #4
 800c254:	9105      	str	r1, [sp, #20]
 800c256:	6800      	ldr	r0, [r0, #0]
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	a902      	add	r1, sp, #8
 800c25c:	f000 f8f4 	bl	800c448 <_svfiprintf_r>
 800c260:	9b02      	ldr	r3, [sp, #8]
 800c262:	2200      	movs	r2, #0
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	b01c      	add	sp, #112	; 0x70
 800c268:	f85d eb04 	ldr.w	lr, [sp], #4
 800c26c:	b003      	add	sp, #12
 800c26e:	4770      	bx	lr
 800c270:	24000020 	.word	0x24000020
 800c274:	ffff0208 	.word	0xffff0208

0800c278 <_strtol_l.constprop.0>:
 800c278:	2b01      	cmp	r3, #1
 800c27a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c27e:	d001      	beq.n	800c284 <_strtol_l.constprop.0+0xc>
 800c280:	2b24      	cmp	r3, #36	; 0x24
 800c282:	d906      	bls.n	800c292 <_strtol_l.constprop.0+0x1a>
 800c284:	f7ff ff98 	bl	800c1b8 <__errno>
 800c288:	2316      	movs	r3, #22
 800c28a:	6003      	str	r3, [r0, #0]
 800c28c:	2000      	movs	r0, #0
 800c28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c292:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c378 <_strtol_l.constprop.0+0x100>
 800c296:	460d      	mov	r5, r1
 800c298:	462e      	mov	r6, r5
 800c29a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c29e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c2a2:	f017 0708 	ands.w	r7, r7, #8
 800c2a6:	d1f7      	bne.n	800c298 <_strtol_l.constprop.0+0x20>
 800c2a8:	2c2d      	cmp	r4, #45	; 0x2d
 800c2aa:	d132      	bne.n	800c312 <_strtol_l.constprop.0+0x9a>
 800c2ac:	782c      	ldrb	r4, [r5, #0]
 800c2ae:	2701      	movs	r7, #1
 800c2b0:	1cb5      	adds	r5, r6, #2
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d05b      	beq.n	800c36e <_strtol_l.constprop.0+0xf6>
 800c2b6:	2b10      	cmp	r3, #16
 800c2b8:	d109      	bne.n	800c2ce <_strtol_l.constprop.0+0x56>
 800c2ba:	2c30      	cmp	r4, #48	; 0x30
 800c2bc:	d107      	bne.n	800c2ce <_strtol_l.constprop.0+0x56>
 800c2be:	782c      	ldrb	r4, [r5, #0]
 800c2c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c2c4:	2c58      	cmp	r4, #88	; 0x58
 800c2c6:	d14d      	bne.n	800c364 <_strtol_l.constprop.0+0xec>
 800c2c8:	786c      	ldrb	r4, [r5, #1]
 800c2ca:	2310      	movs	r3, #16
 800c2cc:	3502      	adds	r5, #2
 800c2ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c2d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c2d6:	f04f 0c00 	mov.w	ip, #0
 800c2da:	fbb8 f9f3 	udiv	r9, r8, r3
 800c2de:	4666      	mov	r6, ip
 800c2e0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c2e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c2e8:	f1be 0f09 	cmp.w	lr, #9
 800c2ec:	d816      	bhi.n	800c31c <_strtol_l.constprop.0+0xa4>
 800c2ee:	4674      	mov	r4, lr
 800c2f0:	42a3      	cmp	r3, r4
 800c2f2:	dd24      	ble.n	800c33e <_strtol_l.constprop.0+0xc6>
 800c2f4:	f1bc 0f00 	cmp.w	ip, #0
 800c2f8:	db1e      	blt.n	800c338 <_strtol_l.constprop.0+0xc0>
 800c2fa:	45b1      	cmp	r9, r6
 800c2fc:	d31c      	bcc.n	800c338 <_strtol_l.constprop.0+0xc0>
 800c2fe:	d101      	bne.n	800c304 <_strtol_l.constprop.0+0x8c>
 800c300:	45a2      	cmp	sl, r4
 800c302:	db19      	blt.n	800c338 <_strtol_l.constprop.0+0xc0>
 800c304:	fb06 4603 	mla	r6, r6, r3, r4
 800c308:	f04f 0c01 	mov.w	ip, #1
 800c30c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c310:	e7e8      	b.n	800c2e4 <_strtol_l.constprop.0+0x6c>
 800c312:	2c2b      	cmp	r4, #43	; 0x2b
 800c314:	bf04      	itt	eq
 800c316:	782c      	ldrbeq	r4, [r5, #0]
 800c318:	1cb5      	addeq	r5, r6, #2
 800c31a:	e7ca      	b.n	800c2b2 <_strtol_l.constprop.0+0x3a>
 800c31c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c320:	f1be 0f19 	cmp.w	lr, #25
 800c324:	d801      	bhi.n	800c32a <_strtol_l.constprop.0+0xb2>
 800c326:	3c37      	subs	r4, #55	; 0x37
 800c328:	e7e2      	b.n	800c2f0 <_strtol_l.constprop.0+0x78>
 800c32a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c32e:	f1be 0f19 	cmp.w	lr, #25
 800c332:	d804      	bhi.n	800c33e <_strtol_l.constprop.0+0xc6>
 800c334:	3c57      	subs	r4, #87	; 0x57
 800c336:	e7db      	b.n	800c2f0 <_strtol_l.constprop.0+0x78>
 800c338:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c33c:	e7e6      	b.n	800c30c <_strtol_l.constprop.0+0x94>
 800c33e:	f1bc 0f00 	cmp.w	ip, #0
 800c342:	da05      	bge.n	800c350 <_strtol_l.constprop.0+0xd8>
 800c344:	2322      	movs	r3, #34	; 0x22
 800c346:	6003      	str	r3, [r0, #0]
 800c348:	4646      	mov	r6, r8
 800c34a:	b942      	cbnz	r2, 800c35e <_strtol_l.constprop.0+0xe6>
 800c34c:	4630      	mov	r0, r6
 800c34e:	e79e      	b.n	800c28e <_strtol_l.constprop.0+0x16>
 800c350:	b107      	cbz	r7, 800c354 <_strtol_l.constprop.0+0xdc>
 800c352:	4276      	negs	r6, r6
 800c354:	2a00      	cmp	r2, #0
 800c356:	d0f9      	beq.n	800c34c <_strtol_l.constprop.0+0xd4>
 800c358:	f1bc 0f00 	cmp.w	ip, #0
 800c35c:	d000      	beq.n	800c360 <_strtol_l.constprop.0+0xe8>
 800c35e:	1e69      	subs	r1, r5, #1
 800c360:	6011      	str	r1, [r2, #0]
 800c362:	e7f3      	b.n	800c34c <_strtol_l.constprop.0+0xd4>
 800c364:	2430      	movs	r4, #48	; 0x30
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1b1      	bne.n	800c2ce <_strtol_l.constprop.0+0x56>
 800c36a:	2308      	movs	r3, #8
 800c36c:	e7af      	b.n	800c2ce <_strtol_l.constprop.0+0x56>
 800c36e:	2c30      	cmp	r4, #48	; 0x30
 800c370:	d0a5      	beq.n	800c2be <_strtol_l.constprop.0+0x46>
 800c372:	230a      	movs	r3, #10
 800c374:	e7ab      	b.n	800c2ce <_strtol_l.constprop.0+0x56>
 800c376:	bf00      	nop
 800c378:	0800cc79 	.word	0x0800cc79

0800c37c <strtol>:
 800c37c:	4613      	mov	r3, r2
 800c37e:	460a      	mov	r2, r1
 800c380:	4601      	mov	r1, r0
 800c382:	4802      	ldr	r0, [pc, #8]	; (800c38c <strtol+0x10>)
 800c384:	6800      	ldr	r0, [r0, #0]
 800c386:	f7ff bf77 	b.w	800c278 <_strtol_l.constprop.0>
 800c38a:	bf00      	nop
 800c38c:	24000020 	.word	0x24000020

0800c390 <__ssputs_r>:
 800c390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c394:	688e      	ldr	r6, [r1, #8]
 800c396:	429e      	cmp	r6, r3
 800c398:	4682      	mov	sl, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	4690      	mov	r8, r2
 800c39e:	461f      	mov	r7, r3
 800c3a0:	d838      	bhi.n	800c414 <__ssputs_r+0x84>
 800c3a2:	898a      	ldrh	r2, [r1, #12]
 800c3a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3a8:	d032      	beq.n	800c410 <__ssputs_r+0x80>
 800c3aa:	6825      	ldr	r5, [r4, #0]
 800c3ac:	6909      	ldr	r1, [r1, #16]
 800c3ae:	eba5 0901 	sub.w	r9, r5, r1
 800c3b2:	6965      	ldr	r5, [r4, #20]
 800c3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3bc:	3301      	adds	r3, #1
 800c3be:	444b      	add	r3, r9
 800c3c0:	106d      	asrs	r5, r5, #1
 800c3c2:	429d      	cmp	r5, r3
 800c3c4:	bf38      	it	cc
 800c3c6:	461d      	movcc	r5, r3
 800c3c8:	0553      	lsls	r3, r2, #21
 800c3ca:	d531      	bpl.n	800c430 <__ssputs_r+0xa0>
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f000 fb55 	bl	800ca7c <_malloc_r>
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	b950      	cbnz	r0, 800c3ec <__ssputs_r+0x5c>
 800c3d6:	230c      	movs	r3, #12
 800c3d8:	f8ca 3000 	str.w	r3, [sl]
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ec:	6921      	ldr	r1, [r4, #16]
 800c3ee:	464a      	mov	r2, r9
 800c3f0:	f7ff ff0c 	bl	800c20c <memcpy>
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fe:	81a3      	strh	r3, [r4, #12]
 800c400:	6126      	str	r6, [r4, #16]
 800c402:	6165      	str	r5, [r4, #20]
 800c404:	444e      	add	r6, r9
 800c406:	eba5 0509 	sub.w	r5, r5, r9
 800c40a:	6026      	str	r6, [r4, #0]
 800c40c:	60a5      	str	r5, [r4, #8]
 800c40e:	463e      	mov	r6, r7
 800c410:	42be      	cmp	r6, r7
 800c412:	d900      	bls.n	800c416 <__ssputs_r+0x86>
 800c414:	463e      	mov	r6, r7
 800c416:	6820      	ldr	r0, [r4, #0]
 800c418:	4632      	mov	r2, r6
 800c41a:	4641      	mov	r1, r8
 800c41c:	f000 faa8 	bl	800c970 <memmove>
 800c420:	68a3      	ldr	r3, [r4, #8]
 800c422:	1b9b      	subs	r3, r3, r6
 800c424:	60a3      	str	r3, [r4, #8]
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	4433      	add	r3, r6
 800c42a:	6023      	str	r3, [r4, #0]
 800c42c:	2000      	movs	r0, #0
 800c42e:	e7db      	b.n	800c3e8 <__ssputs_r+0x58>
 800c430:	462a      	mov	r2, r5
 800c432:	f000 fb97 	bl	800cb64 <_realloc_r>
 800c436:	4606      	mov	r6, r0
 800c438:	2800      	cmp	r0, #0
 800c43a:	d1e1      	bne.n	800c400 <__ssputs_r+0x70>
 800c43c:	6921      	ldr	r1, [r4, #16]
 800c43e:	4650      	mov	r0, sl
 800c440:	f000 fab0 	bl	800c9a4 <_free_r>
 800c444:	e7c7      	b.n	800c3d6 <__ssputs_r+0x46>
	...

0800c448 <_svfiprintf_r>:
 800c448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44c:	4698      	mov	r8, r3
 800c44e:	898b      	ldrh	r3, [r1, #12]
 800c450:	061b      	lsls	r3, r3, #24
 800c452:	b09d      	sub	sp, #116	; 0x74
 800c454:	4607      	mov	r7, r0
 800c456:	460d      	mov	r5, r1
 800c458:	4614      	mov	r4, r2
 800c45a:	d50e      	bpl.n	800c47a <_svfiprintf_r+0x32>
 800c45c:	690b      	ldr	r3, [r1, #16]
 800c45e:	b963      	cbnz	r3, 800c47a <_svfiprintf_r+0x32>
 800c460:	2140      	movs	r1, #64	; 0x40
 800c462:	f000 fb0b 	bl	800ca7c <_malloc_r>
 800c466:	6028      	str	r0, [r5, #0]
 800c468:	6128      	str	r0, [r5, #16]
 800c46a:	b920      	cbnz	r0, 800c476 <_svfiprintf_r+0x2e>
 800c46c:	230c      	movs	r3, #12
 800c46e:	603b      	str	r3, [r7, #0]
 800c470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c474:	e0d1      	b.n	800c61a <_svfiprintf_r+0x1d2>
 800c476:	2340      	movs	r3, #64	; 0x40
 800c478:	616b      	str	r3, [r5, #20]
 800c47a:	2300      	movs	r3, #0
 800c47c:	9309      	str	r3, [sp, #36]	; 0x24
 800c47e:	2320      	movs	r3, #32
 800c480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c484:	f8cd 800c 	str.w	r8, [sp, #12]
 800c488:	2330      	movs	r3, #48	; 0x30
 800c48a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c634 <_svfiprintf_r+0x1ec>
 800c48e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c492:	f04f 0901 	mov.w	r9, #1
 800c496:	4623      	mov	r3, r4
 800c498:	469a      	mov	sl, r3
 800c49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c49e:	b10a      	cbz	r2, 800c4a4 <_svfiprintf_r+0x5c>
 800c4a0:	2a25      	cmp	r2, #37	; 0x25
 800c4a2:	d1f9      	bne.n	800c498 <_svfiprintf_r+0x50>
 800c4a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4a8:	d00b      	beq.n	800c4c2 <_svfiprintf_r+0x7a>
 800c4aa:	465b      	mov	r3, fp
 800c4ac:	4622      	mov	r2, r4
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7ff ff6d 	bl	800c390 <__ssputs_r>
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	f000 80aa 	beq.w	800c610 <_svfiprintf_r+0x1c8>
 800c4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4be:	445a      	add	r2, fp
 800c4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 80a2 	beq.w	800c610 <_svfiprintf_r+0x1c8>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4d6:	f10a 0a01 	add.w	sl, sl, #1
 800c4da:	9304      	str	r3, [sp, #16]
 800c4dc:	9307      	str	r3, [sp, #28]
 800c4de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4e4:	4654      	mov	r4, sl
 800c4e6:	2205      	movs	r2, #5
 800c4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ec:	4851      	ldr	r0, [pc, #324]	; (800c634 <_svfiprintf_r+0x1ec>)
 800c4ee:	f7f3 feff 	bl	80002f0 <memchr>
 800c4f2:	9a04      	ldr	r2, [sp, #16]
 800c4f4:	b9d8      	cbnz	r0, 800c52e <_svfiprintf_r+0xe6>
 800c4f6:	06d0      	lsls	r0, r2, #27
 800c4f8:	bf44      	itt	mi
 800c4fa:	2320      	movmi	r3, #32
 800c4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c500:	0711      	lsls	r1, r2, #28
 800c502:	bf44      	itt	mi
 800c504:	232b      	movmi	r3, #43	; 0x2b
 800c506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c50a:	f89a 3000 	ldrb.w	r3, [sl]
 800c50e:	2b2a      	cmp	r3, #42	; 0x2a
 800c510:	d015      	beq.n	800c53e <_svfiprintf_r+0xf6>
 800c512:	9a07      	ldr	r2, [sp, #28]
 800c514:	4654      	mov	r4, sl
 800c516:	2000      	movs	r0, #0
 800c518:	f04f 0c0a 	mov.w	ip, #10
 800c51c:	4621      	mov	r1, r4
 800c51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c522:	3b30      	subs	r3, #48	; 0x30
 800c524:	2b09      	cmp	r3, #9
 800c526:	d94e      	bls.n	800c5c6 <_svfiprintf_r+0x17e>
 800c528:	b1b0      	cbz	r0, 800c558 <_svfiprintf_r+0x110>
 800c52a:	9207      	str	r2, [sp, #28]
 800c52c:	e014      	b.n	800c558 <_svfiprintf_r+0x110>
 800c52e:	eba0 0308 	sub.w	r3, r0, r8
 800c532:	fa09 f303 	lsl.w	r3, r9, r3
 800c536:	4313      	orrs	r3, r2
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	46a2      	mov	sl, r4
 800c53c:	e7d2      	b.n	800c4e4 <_svfiprintf_r+0x9c>
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	1d19      	adds	r1, r3, #4
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	9103      	str	r1, [sp, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	bfbb      	ittet	lt
 800c54a:	425b      	neglt	r3, r3
 800c54c:	f042 0202 	orrlt.w	r2, r2, #2
 800c550:	9307      	strge	r3, [sp, #28]
 800c552:	9307      	strlt	r3, [sp, #28]
 800c554:	bfb8      	it	lt
 800c556:	9204      	strlt	r2, [sp, #16]
 800c558:	7823      	ldrb	r3, [r4, #0]
 800c55a:	2b2e      	cmp	r3, #46	; 0x2e
 800c55c:	d10c      	bne.n	800c578 <_svfiprintf_r+0x130>
 800c55e:	7863      	ldrb	r3, [r4, #1]
 800c560:	2b2a      	cmp	r3, #42	; 0x2a
 800c562:	d135      	bne.n	800c5d0 <_svfiprintf_r+0x188>
 800c564:	9b03      	ldr	r3, [sp, #12]
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	9203      	str	r2, [sp, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	bfb8      	it	lt
 800c570:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c574:	3402      	adds	r4, #2
 800c576:	9305      	str	r3, [sp, #20]
 800c578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c644 <_svfiprintf_r+0x1fc>
 800c57c:	7821      	ldrb	r1, [r4, #0]
 800c57e:	2203      	movs	r2, #3
 800c580:	4650      	mov	r0, sl
 800c582:	f7f3 feb5 	bl	80002f0 <memchr>
 800c586:	b140      	cbz	r0, 800c59a <_svfiprintf_r+0x152>
 800c588:	2340      	movs	r3, #64	; 0x40
 800c58a:	eba0 000a 	sub.w	r0, r0, sl
 800c58e:	fa03 f000 	lsl.w	r0, r3, r0
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	4303      	orrs	r3, r0
 800c596:	3401      	adds	r4, #1
 800c598:	9304      	str	r3, [sp, #16]
 800c59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59e:	4826      	ldr	r0, [pc, #152]	; (800c638 <_svfiprintf_r+0x1f0>)
 800c5a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5a4:	2206      	movs	r2, #6
 800c5a6:	f7f3 fea3 	bl	80002f0 <memchr>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d038      	beq.n	800c620 <_svfiprintf_r+0x1d8>
 800c5ae:	4b23      	ldr	r3, [pc, #140]	; (800c63c <_svfiprintf_r+0x1f4>)
 800c5b0:	bb1b      	cbnz	r3, 800c5fa <_svfiprintf_r+0x1b2>
 800c5b2:	9b03      	ldr	r3, [sp, #12]
 800c5b4:	3307      	adds	r3, #7
 800c5b6:	f023 0307 	bic.w	r3, r3, #7
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	9303      	str	r3, [sp, #12]
 800c5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c0:	4433      	add	r3, r6
 800c5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c4:	e767      	b.n	800c496 <_svfiprintf_r+0x4e>
 800c5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	e7a5      	b.n	800c51c <_svfiprintf_r+0xd4>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	3401      	adds	r4, #1
 800c5d4:	9305      	str	r3, [sp, #20]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	f04f 0c0a 	mov.w	ip, #10
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5e2:	3a30      	subs	r2, #48	; 0x30
 800c5e4:	2a09      	cmp	r2, #9
 800c5e6:	d903      	bls.n	800c5f0 <_svfiprintf_r+0x1a8>
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d0c5      	beq.n	800c578 <_svfiprintf_r+0x130>
 800c5ec:	9105      	str	r1, [sp, #20]
 800c5ee:	e7c3      	b.n	800c578 <_svfiprintf_r+0x130>
 800c5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e7f0      	b.n	800c5dc <_svfiprintf_r+0x194>
 800c5fa:	ab03      	add	r3, sp, #12
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	462a      	mov	r2, r5
 800c600:	4b0f      	ldr	r3, [pc, #60]	; (800c640 <_svfiprintf_r+0x1f8>)
 800c602:	a904      	add	r1, sp, #16
 800c604:	4638      	mov	r0, r7
 800c606:	f3af 8000 	nop.w
 800c60a:	1c42      	adds	r2, r0, #1
 800c60c:	4606      	mov	r6, r0
 800c60e:	d1d6      	bne.n	800c5be <_svfiprintf_r+0x176>
 800c610:	89ab      	ldrh	r3, [r5, #12]
 800c612:	065b      	lsls	r3, r3, #25
 800c614:	f53f af2c 	bmi.w	800c470 <_svfiprintf_r+0x28>
 800c618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c61a:	b01d      	add	sp, #116	; 0x74
 800c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c620:	ab03      	add	r3, sp, #12
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	462a      	mov	r2, r5
 800c626:	4b06      	ldr	r3, [pc, #24]	; (800c640 <_svfiprintf_r+0x1f8>)
 800c628:	a904      	add	r1, sp, #16
 800c62a:	4638      	mov	r0, r7
 800c62c:	f000 f87a 	bl	800c724 <_printf_i>
 800c630:	e7eb      	b.n	800c60a <_svfiprintf_r+0x1c2>
 800c632:	bf00      	nop
 800c634:	0800cd79 	.word	0x0800cd79
 800c638:	0800cd83 	.word	0x0800cd83
 800c63c:	00000000 	.word	0x00000000
 800c640:	0800c391 	.word	0x0800c391
 800c644:	0800cd7f 	.word	0x0800cd7f

0800c648 <_printf_common>:
 800c648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c64c:	4616      	mov	r6, r2
 800c64e:	4699      	mov	r9, r3
 800c650:	688a      	ldr	r2, [r1, #8]
 800c652:	690b      	ldr	r3, [r1, #16]
 800c654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c658:	4293      	cmp	r3, r2
 800c65a:	bfb8      	it	lt
 800c65c:	4613      	movlt	r3, r2
 800c65e:	6033      	str	r3, [r6, #0]
 800c660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c664:	4607      	mov	r7, r0
 800c666:	460c      	mov	r4, r1
 800c668:	b10a      	cbz	r2, 800c66e <_printf_common+0x26>
 800c66a:	3301      	adds	r3, #1
 800c66c:	6033      	str	r3, [r6, #0]
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	0699      	lsls	r1, r3, #26
 800c672:	bf42      	ittt	mi
 800c674:	6833      	ldrmi	r3, [r6, #0]
 800c676:	3302      	addmi	r3, #2
 800c678:	6033      	strmi	r3, [r6, #0]
 800c67a:	6825      	ldr	r5, [r4, #0]
 800c67c:	f015 0506 	ands.w	r5, r5, #6
 800c680:	d106      	bne.n	800c690 <_printf_common+0x48>
 800c682:	f104 0a19 	add.w	sl, r4, #25
 800c686:	68e3      	ldr	r3, [r4, #12]
 800c688:	6832      	ldr	r2, [r6, #0]
 800c68a:	1a9b      	subs	r3, r3, r2
 800c68c:	42ab      	cmp	r3, r5
 800c68e:	dc26      	bgt.n	800c6de <_printf_common+0x96>
 800c690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c694:	1e13      	subs	r3, r2, #0
 800c696:	6822      	ldr	r2, [r4, #0]
 800c698:	bf18      	it	ne
 800c69a:	2301      	movne	r3, #1
 800c69c:	0692      	lsls	r2, r2, #26
 800c69e:	d42b      	bmi.n	800c6f8 <_printf_common+0xb0>
 800c6a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6a4:	4649      	mov	r1, r9
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	47c0      	blx	r8
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	d01e      	beq.n	800c6ec <_printf_common+0xa4>
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	68e5      	ldr	r5, [r4, #12]
 800c6b2:	6832      	ldr	r2, [r6, #0]
 800c6b4:	f003 0306 	and.w	r3, r3, #6
 800c6b8:	2b04      	cmp	r3, #4
 800c6ba:	bf08      	it	eq
 800c6bc:	1aad      	subeq	r5, r5, r2
 800c6be:	68a3      	ldr	r3, [r4, #8]
 800c6c0:	6922      	ldr	r2, [r4, #16]
 800c6c2:	bf0c      	ite	eq
 800c6c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6c8:	2500      	movne	r5, #0
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	bfc4      	itt	gt
 800c6ce:	1a9b      	subgt	r3, r3, r2
 800c6d0:	18ed      	addgt	r5, r5, r3
 800c6d2:	2600      	movs	r6, #0
 800c6d4:	341a      	adds	r4, #26
 800c6d6:	42b5      	cmp	r5, r6
 800c6d8:	d11a      	bne.n	800c710 <_printf_common+0xc8>
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e008      	b.n	800c6f0 <_printf_common+0xa8>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4652      	mov	r2, sl
 800c6e2:	4649      	mov	r1, r9
 800c6e4:	4638      	mov	r0, r7
 800c6e6:	47c0      	blx	r8
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d103      	bne.n	800c6f4 <_printf_common+0xac>
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f4:	3501      	adds	r5, #1
 800c6f6:	e7c6      	b.n	800c686 <_printf_common+0x3e>
 800c6f8:	18e1      	adds	r1, r4, r3
 800c6fa:	1c5a      	adds	r2, r3, #1
 800c6fc:	2030      	movs	r0, #48	; 0x30
 800c6fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c702:	4422      	add	r2, r4
 800c704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c70c:	3302      	adds	r3, #2
 800c70e:	e7c7      	b.n	800c6a0 <_printf_common+0x58>
 800c710:	2301      	movs	r3, #1
 800c712:	4622      	mov	r2, r4
 800c714:	4649      	mov	r1, r9
 800c716:	4638      	mov	r0, r7
 800c718:	47c0      	blx	r8
 800c71a:	3001      	adds	r0, #1
 800c71c:	d0e6      	beq.n	800c6ec <_printf_common+0xa4>
 800c71e:	3601      	adds	r6, #1
 800c720:	e7d9      	b.n	800c6d6 <_printf_common+0x8e>
	...

0800c724 <_printf_i>:
 800c724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c728:	7e0f      	ldrb	r7, [r1, #24]
 800c72a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c72c:	2f78      	cmp	r7, #120	; 0x78
 800c72e:	4691      	mov	r9, r2
 800c730:	4680      	mov	r8, r0
 800c732:	460c      	mov	r4, r1
 800c734:	469a      	mov	sl, r3
 800c736:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c73a:	d807      	bhi.n	800c74c <_printf_i+0x28>
 800c73c:	2f62      	cmp	r7, #98	; 0x62
 800c73e:	d80a      	bhi.n	800c756 <_printf_i+0x32>
 800c740:	2f00      	cmp	r7, #0
 800c742:	f000 80d8 	beq.w	800c8f6 <_printf_i+0x1d2>
 800c746:	2f58      	cmp	r7, #88	; 0x58
 800c748:	f000 80a3 	beq.w	800c892 <_printf_i+0x16e>
 800c74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c754:	e03a      	b.n	800c7cc <_printf_i+0xa8>
 800c756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c75a:	2b15      	cmp	r3, #21
 800c75c:	d8f6      	bhi.n	800c74c <_printf_i+0x28>
 800c75e:	a101      	add	r1, pc, #4	; (adr r1, 800c764 <_printf_i+0x40>)
 800c760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c764:	0800c7bd 	.word	0x0800c7bd
 800c768:	0800c7d1 	.word	0x0800c7d1
 800c76c:	0800c74d 	.word	0x0800c74d
 800c770:	0800c74d 	.word	0x0800c74d
 800c774:	0800c74d 	.word	0x0800c74d
 800c778:	0800c74d 	.word	0x0800c74d
 800c77c:	0800c7d1 	.word	0x0800c7d1
 800c780:	0800c74d 	.word	0x0800c74d
 800c784:	0800c74d 	.word	0x0800c74d
 800c788:	0800c74d 	.word	0x0800c74d
 800c78c:	0800c74d 	.word	0x0800c74d
 800c790:	0800c8dd 	.word	0x0800c8dd
 800c794:	0800c801 	.word	0x0800c801
 800c798:	0800c8bf 	.word	0x0800c8bf
 800c79c:	0800c74d 	.word	0x0800c74d
 800c7a0:	0800c74d 	.word	0x0800c74d
 800c7a4:	0800c8ff 	.word	0x0800c8ff
 800c7a8:	0800c74d 	.word	0x0800c74d
 800c7ac:	0800c801 	.word	0x0800c801
 800c7b0:	0800c74d 	.word	0x0800c74d
 800c7b4:	0800c74d 	.word	0x0800c74d
 800c7b8:	0800c8c7 	.word	0x0800c8c7
 800c7bc:	682b      	ldr	r3, [r5, #0]
 800c7be:	1d1a      	adds	r2, r3, #4
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	602a      	str	r2, [r5, #0]
 800c7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e0a3      	b.n	800c918 <_printf_i+0x1f4>
 800c7d0:	6820      	ldr	r0, [r4, #0]
 800c7d2:	6829      	ldr	r1, [r5, #0]
 800c7d4:	0606      	lsls	r6, r0, #24
 800c7d6:	f101 0304 	add.w	r3, r1, #4
 800c7da:	d50a      	bpl.n	800c7f2 <_printf_i+0xce>
 800c7dc:	680e      	ldr	r6, [r1, #0]
 800c7de:	602b      	str	r3, [r5, #0]
 800c7e0:	2e00      	cmp	r6, #0
 800c7e2:	da03      	bge.n	800c7ec <_printf_i+0xc8>
 800c7e4:	232d      	movs	r3, #45	; 0x2d
 800c7e6:	4276      	negs	r6, r6
 800c7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7ec:	485e      	ldr	r0, [pc, #376]	; (800c968 <_printf_i+0x244>)
 800c7ee:	230a      	movs	r3, #10
 800c7f0:	e019      	b.n	800c826 <_printf_i+0x102>
 800c7f2:	680e      	ldr	r6, [r1, #0]
 800c7f4:	602b      	str	r3, [r5, #0]
 800c7f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7fa:	bf18      	it	ne
 800c7fc:	b236      	sxthne	r6, r6
 800c7fe:	e7ef      	b.n	800c7e0 <_printf_i+0xbc>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	6820      	ldr	r0, [r4, #0]
 800c804:	1d19      	adds	r1, r3, #4
 800c806:	6029      	str	r1, [r5, #0]
 800c808:	0601      	lsls	r1, r0, #24
 800c80a:	d501      	bpl.n	800c810 <_printf_i+0xec>
 800c80c:	681e      	ldr	r6, [r3, #0]
 800c80e:	e002      	b.n	800c816 <_printf_i+0xf2>
 800c810:	0646      	lsls	r6, r0, #25
 800c812:	d5fb      	bpl.n	800c80c <_printf_i+0xe8>
 800c814:	881e      	ldrh	r6, [r3, #0]
 800c816:	4854      	ldr	r0, [pc, #336]	; (800c968 <_printf_i+0x244>)
 800c818:	2f6f      	cmp	r7, #111	; 0x6f
 800c81a:	bf0c      	ite	eq
 800c81c:	2308      	moveq	r3, #8
 800c81e:	230a      	movne	r3, #10
 800c820:	2100      	movs	r1, #0
 800c822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c826:	6865      	ldr	r5, [r4, #4]
 800c828:	60a5      	str	r5, [r4, #8]
 800c82a:	2d00      	cmp	r5, #0
 800c82c:	bfa2      	ittt	ge
 800c82e:	6821      	ldrge	r1, [r4, #0]
 800c830:	f021 0104 	bicge.w	r1, r1, #4
 800c834:	6021      	strge	r1, [r4, #0]
 800c836:	b90e      	cbnz	r6, 800c83c <_printf_i+0x118>
 800c838:	2d00      	cmp	r5, #0
 800c83a:	d04d      	beq.n	800c8d8 <_printf_i+0x1b4>
 800c83c:	4615      	mov	r5, r2
 800c83e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c842:	fb03 6711 	mls	r7, r3, r1, r6
 800c846:	5dc7      	ldrb	r7, [r0, r7]
 800c848:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c84c:	4637      	mov	r7, r6
 800c84e:	42bb      	cmp	r3, r7
 800c850:	460e      	mov	r6, r1
 800c852:	d9f4      	bls.n	800c83e <_printf_i+0x11a>
 800c854:	2b08      	cmp	r3, #8
 800c856:	d10b      	bne.n	800c870 <_printf_i+0x14c>
 800c858:	6823      	ldr	r3, [r4, #0]
 800c85a:	07de      	lsls	r6, r3, #31
 800c85c:	d508      	bpl.n	800c870 <_printf_i+0x14c>
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	6861      	ldr	r1, [r4, #4]
 800c862:	4299      	cmp	r1, r3
 800c864:	bfde      	ittt	le
 800c866:	2330      	movle	r3, #48	; 0x30
 800c868:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c86c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c870:	1b52      	subs	r2, r2, r5
 800c872:	6122      	str	r2, [r4, #16]
 800c874:	f8cd a000 	str.w	sl, [sp]
 800c878:	464b      	mov	r3, r9
 800c87a:	aa03      	add	r2, sp, #12
 800c87c:	4621      	mov	r1, r4
 800c87e:	4640      	mov	r0, r8
 800c880:	f7ff fee2 	bl	800c648 <_printf_common>
 800c884:	3001      	adds	r0, #1
 800c886:	d14c      	bne.n	800c922 <_printf_i+0x1fe>
 800c888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c88c:	b004      	add	sp, #16
 800c88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c892:	4835      	ldr	r0, [pc, #212]	; (800c968 <_printf_i+0x244>)
 800c894:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c898:	6829      	ldr	r1, [r5, #0]
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c8a0:	6029      	str	r1, [r5, #0]
 800c8a2:	061d      	lsls	r5, r3, #24
 800c8a4:	d514      	bpl.n	800c8d0 <_printf_i+0x1ac>
 800c8a6:	07df      	lsls	r7, r3, #31
 800c8a8:	bf44      	itt	mi
 800c8aa:	f043 0320 	orrmi.w	r3, r3, #32
 800c8ae:	6023      	strmi	r3, [r4, #0]
 800c8b0:	b91e      	cbnz	r6, 800c8ba <_printf_i+0x196>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	f023 0320 	bic.w	r3, r3, #32
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	2310      	movs	r3, #16
 800c8bc:	e7b0      	b.n	800c820 <_printf_i+0xfc>
 800c8be:	6823      	ldr	r3, [r4, #0]
 800c8c0:	f043 0320 	orr.w	r3, r3, #32
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	2378      	movs	r3, #120	; 0x78
 800c8c8:	4828      	ldr	r0, [pc, #160]	; (800c96c <_printf_i+0x248>)
 800c8ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8ce:	e7e3      	b.n	800c898 <_printf_i+0x174>
 800c8d0:	0659      	lsls	r1, r3, #25
 800c8d2:	bf48      	it	mi
 800c8d4:	b2b6      	uxthmi	r6, r6
 800c8d6:	e7e6      	b.n	800c8a6 <_printf_i+0x182>
 800c8d8:	4615      	mov	r5, r2
 800c8da:	e7bb      	b.n	800c854 <_printf_i+0x130>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	6826      	ldr	r6, [r4, #0]
 800c8e0:	6961      	ldr	r1, [r4, #20]
 800c8e2:	1d18      	adds	r0, r3, #4
 800c8e4:	6028      	str	r0, [r5, #0]
 800c8e6:	0635      	lsls	r5, r6, #24
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	d501      	bpl.n	800c8f0 <_printf_i+0x1cc>
 800c8ec:	6019      	str	r1, [r3, #0]
 800c8ee:	e002      	b.n	800c8f6 <_printf_i+0x1d2>
 800c8f0:	0670      	lsls	r0, r6, #25
 800c8f2:	d5fb      	bpl.n	800c8ec <_printf_i+0x1c8>
 800c8f4:	8019      	strh	r1, [r3, #0]
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	6123      	str	r3, [r4, #16]
 800c8fa:	4615      	mov	r5, r2
 800c8fc:	e7ba      	b.n	800c874 <_printf_i+0x150>
 800c8fe:	682b      	ldr	r3, [r5, #0]
 800c900:	1d1a      	adds	r2, r3, #4
 800c902:	602a      	str	r2, [r5, #0]
 800c904:	681d      	ldr	r5, [r3, #0]
 800c906:	6862      	ldr	r2, [r4, #4]
 800c908:	2100      	movs	r1, #0
 800c90a:	4628      	mov	r0, r5
 800c90c:	f7f3 fcf0 	bl	80002f0 <memchr>
 800c910:	b108      	cbz	r0, 800c916 <_printf_i+0x1f2>
 800c912:	1b40      	subs	r0, r0, r5
 800c914:	6060      	str	r0, [r4, #4]
 800c916:	6863      	ldr	r3, [r4, #4]
 800c918:	6123      	str	r3, [r4, #16]
 800c91a:	2300      	movs	r3, #0
 800c91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c920:	e7a8      	b.n	800c874 <_printf_i+0x150>
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	462a      	mov	r2, r5
 800c926:	4649      	mov	r1, r9
 800c928:	4640      	mov	r0, r8
 800c92a:	47d0      	blx	sl
 800c92c:	3001      	adds	r0, #1
 800c92e:	d0ab      	beq.n	800c888 <_printf_i+0x164>
 800c930:	6823      	ldr	r3, [r4, #0]
 800c932:	079b      	lsls	r3, r3, #30
 800c934:	d413      	bmi.n	800c95e <_printf_i+0x23a>
 800c936:	68e0      	ldr	r0, [r4, #12]
 800c938:	9b03      	ldr	r3, [sp, #12]
 800c93a:	4298      	cmp	r0, r3
 800c93c:	bfb8      	it	lt
 800c93e:	4618      	movlt	r0, r3
 800c940:	e7a4      	b.n	800c88c <_printf_i+0x168>
 800c942:	2301      	movs	r3, #1
 800c944:	4632      	mov	r2, r6
 800c946:	4649      	mov	r1, r9
 800c948:	4640      	mov	r0, r8
 800c94a:	47d0      	blx	sl
 800c94c:	3001      	adds	r0, #1
 800c94e:	d09b      	beq.n	800c888 <_printf_i+0x164>
 800c950:	3501      	adds	r5, #1
 800c952:	68e3      	ldr	r3, [r4, #12]
 800c954:	9903      	ldr	r1, [sp, #12]
 800c956:	1a5b      	subs	r3, r3, r1
 800c958:	42ab      	cmp	r3, r5
 800c95a:	dcf2      	bgt.n	800c942 <_printf_i+0x21e>
 800c95c:	e7eb      	b.n	800c936 <_printf_i+0x212>
 800c95e:	2500      	movs	r5, #0
 800c960:	f104 0619 	add.w	r6, r4, #25
 800c964:	e7f5      	b.n	800c952 <_printf_i+0x22e>
 800c966:	bf00      	nop
 800c968:	0800cd8a 	.word	0x0800cd8a
 800c96c:	0800cd9b 	.word	0x0800cd9b

0800c970 <memmove>:
 800c970:	4288      	cmp	r0, r1
 800c972:	b510      	push	{r4, lr}
 800c974:	eb01 0402 	add.w	r4, r1, r2
 800c978:	d902      	bls.n	800c980 <memmove+0x10>
 800c97a:	4284      	cmp	r4, r0
 800c97c:	4623      	mov	r3, r4
 800c97e:	d807      	bhi.n	800c990 <memmove+0x20>
 800c980:	1e43      	subs	r3, r0, #1
 800c982:	42a1      	cmp	r1, r4
 800c984:	d008      	beq.n	800c998 <memmove+0x28>
 800c986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c98a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c98e:	e7f8      	b.n	800c982 <memmove+0x12>
 800c990:	4402      	add	r2, r0
 800c992:	4601      	mov	r1, r0
 800c994:	428a      	cmp	r2, r1
 800c996:	d100      	bne.n	800c99a <memmove+0x2a>
 800c998:	bd10      	pop	{r4, pc}
 800c99a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c99e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9a2:	e7f7      	b.n	800c994 <memmove+0x24>

0800c9a4 <_free_r>:
 800c9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9a6:	2900      	cmp	r1, #0
 800c9a8:	d044      	beq.n	800ca34 <_free_r+0x90>
 800c9aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ae:	9001      	str	r0, [sp, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f1a1 0404 	sub.w	r4, r1, #4
 800c9b6:	bfb8      	it	lt
 800c9b8:	18e4      	addlt	r4, r4, r3
 800c9ba:	f000 f913 	bl	800cbe4 <__malloc_lock>
 800c9be:	4a1e      	ldr	r2, [pc, #120]	; (800ca38 <_free_r+0x94>)
 800c9c0:	9801      	ldr	r0, [sp, #4]
 800c9c2:	6813      	ldr	r3, [r2, #0]
 800c9c4:	b933      	cbnz	r3, 800c9d4 <_free_r+0x30>
 800c9c6:	6063      	str	r3, [r4, #4]
 800c9c8:	6014      	str	r4, [r2, #0]
 800c9ca:	b003      	add	sp, #12
 800c9cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9d0:	f000 b90e 	b.w	800cbf0 <__malloc_unlock>
 800c9d4:	42a3      	cmp	r3, r4
 800c9d6:	d908      	bls.n	800c9ea <_free_r+0x46>
 800c9d8:	6825      	ldr	r5, [r4, #0]
 800c9da:	1961      	adds	r1, r4, r5
 800c9dc:	428b      	cmp	r3, r1
 800c9de:	bf01      	itttt	eq
 800c9e0:	6819      	ldreq	r1, [r3, #0]
 800c9e2:	685b      	ldreq	r3, [r3, #4]
 800c9e4:	1949      	addeq	r1, r1, r5
 800c9e6:	6021      	streq	r1, [r4, #0]
 800c9e8:	e7ed      	b.n	800c9c6 <_free_r+0x22>
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	b10b      	cbz	r3, 800c9f4 <_free_r+0x50>
 800c9f0:	42a3      	cmp	r3, r4
 800c9f2:	d9fa      	bls.n	800c9ea <_free_r+0x46>
 800c9f4:	6811      	ldr	r1, [r2, #0]
 800c9f6:	1855      	adds	r5, r2, r1
 800c9f8:	42a5      	cmp	r5, r4
 800c9fa:	d10b      	bne.n	800ca14 <_free_r+0x70>
 800c9fc:	6824      	ldr	r4, [r4, #0]
 800c9fe:	4421      	add	r1, r4
 800ca00:	1854      	adds	r4, r2, r1
 800ca02:	42a3      	cmp	r3, r4
 800ca04:	6011      	str	r1, [r2, #0]
 800ca06:	d1e0      	bne.n	800c9ca <_free_r+0x26>
 800ca08:	681c      	ldr	r4, [r3, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	6053      	str	r3, [r2, #4]
 800ca0e:	4421      	add	r1, r4
 800ca10:	6011      	str	r1, [r2, #0]
 800ca12:	e7da      	b.n	800c9ca <_free_r+0x26>
 800ca14:	d902      	bls.n	800ca1c <_free_r+0x78>
 800ca16:	230c      	movs	r3, #12
 800ca18:	6003      	str	r3, [r0, #0]
 800ca1a:	e7d6      	b.n	800c9ca <_free_r+0x26>
 800ca1c:	6825      	ldr	r5, [r4, #0]
 800ca1e:	1961      	adds	r1, r4, r5
 800ca20:	428b      	cmp	r3, r1
 800ca22:	bf04      	itt	eq
 800ca24:	6819      	ldreq	r1, [r3, #0]
 800ca26:	685b      	ldreq	r3, [r3, #4]
 800ca28:	6063      	str	r3, [r4, #4]
 800ca2a:	bf04      	itt	eq
 800ca2c:	1949      	addeq	r1, r1, r5
 800ca2e:	6021      	streq	r1, [r4, #0]
 800ca30:	6054      	str	r4, [r2, #4]
 800ca32:	e7ca      	b.n	800c9ca <_free_r+0x26>
 800ca34:	b003      	add	sp, #12
 800ca36:	bd30      	pop	{r4, r5, pc}
 800ca38:	24001460 	.word	0x24001460

0800ca3c <sbrk_aligned>:
 800ca3c:	b570      	push	{r4, r5, r6, lr}
 800ca3e:	4e0e      	ldr	r6, [pc, #56]	; (800ca78 <sbrk_aligned+0x3c>)
 800ca40:	460c      	mov	r4, r1
 800ca42:	6831      	ldr	r1, [r6, #0]
 800ca44:	4605      	mov	r5, r0
 800ca46:	b911      	cbnz	r1, 800ca4e <sbrk_aligned+0x12>
 800ca48:	f000 f8bc 	bl	800cbc4 <_sbrk_r>
 800ca4c:	6030      	str	r0, [r6, #0]
 800ca4e:	4621      	mov	r1, r4
 800ca50:	4628      	mov	r0, r5
 800ca52:	f000 f8b7 	bl	800cbc4 <_sbrk_r>
 800ca56:	1c43      	adds	r3, r0, #1
 800ca58:	d00a      	beq.n	800ca70 <sbrk_aligned+0x34>
 800ca5a:	1cc4      	adds	r4, r0, #3
 800ca5c:	f024 0403 	bic.w	r4, r4, #3
 800ca60:	42a0      	cmp	r0, r4
 800ca62:	d007      	beq.n	800ca74 <sbrk_aligned+0x38>
 800ca64:	1a21      	subs	r1, r4, r0
 800ca66:	4628      	mov	r0, r5
 800ca68:	f000 f8ac 	bl	800cbc4 <_sbrk_r>
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d101      	bne.n	800ca74 <sbrk_aligned+0x38>
 800ca70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ca74:	4620      	mov	r0, r4
 800ca76:	bd70      	pop	{r4, r5, r6, pc}
 800ca78:	24001464 	.word	0x24001464

0800ca7c <_malloc_r>:
 800ca7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca80:	1ccd      	adds	r5, r1, #3
 800ca82:	f025 0503 	bic.w	r5, r5, #3
 800ca86:	3508      	adds	r5, #8
 800ca88:	2d0c      	cmp	r5, #12
 800ca8a:	bf38      	it	cc
 800ca8c:	250c      	movcc	r5, #12
 800ca8e:	2d00      	cmp	r5, #0
 800ca90:	4607      	mov	r7, r0
 800ca92:	db01      	blt.n	800ca98 <_malloc_r+0x1c>
 800ca94:	42a9      	cmp	r1, r5
 800ca96:	d905      	bls.n	800caa4 <_malloc_r+0x28>
 800ca98:	230c      	movs	r3, #12
 800ca9a:	603b      	str	r3, [r7, #0]
 800ca9c:	2600      	movs	r6, #0
 800ca9e:	4630      	mov	r0, r6
 800caa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa4:	4e2e      	ldr	r6, [pc, #184]	; (800cb60 <_malloc_r+0xe4>)
 800caa6:	f000 f89d 	bl	800cbe4 <__malloc_lock>
 800caaa:	6833      	ldr	r3, [r6, #0]
 800caac:	461c      	mov	r4, r3
 800caae:	bb34      	cbnz	r4, 800cafe <_malloc_r+0x82>
 800cab0:	4629      	mov	r1, r5
 800cab2:	4638      	mov	r0, r7
 800cab4:	f7ff ffc2 	bl	800ca3c <sbrk_aligned>
 800cab8:	1c43      	adds	r3, r0, #1
 800caba:	4604      	mov	r4, r0
 800cabc:	d14d      	bne.n	800cb5a <_malloc_r+0xde>
 800cabe:	6834      	ldr	r4, [r6, #0]
 800cac0:	4626      	mov	r6, r4
 800cac2:	2e00      	cmp	r6, #0
 800cac4:	d140      	bne.n	800cb48 <_malloc_r+0xcc>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	4631      	mov	r1, r6
 800caca:	4638      	mov	r0, r7
 800cacc:	eb04 0803 	add.w	r8, r4, r3
 800cad0:	f000 f878 	bl	800cbc4 <_sbrk_r>
 800cad4:	4580      	cmp	r8, r0
 800cad6:	d13a      	bne.n	800cb4e <_malloc_r+0xd2>
 800cad8:	6821      	ldr	r1, [r4, #0]
 800cada:	3503      	adds	r5, #3
 800cadc:	1a6d      	subs	r5, r5, r1
 800cade:	f025 0503 	bic.w	r5, r5, #3
 800cae2:	3508      	adds	r5, #8
 800cae4:	2d0c      	cmp	r5, #12
 800cae6:	bf38      	it	cc
 800cae8:	250c      	movcc	r5, #12
 800caea:	4629      	mov	r1, r5
 800caec:	4638      	mov	r0, r7
 800caee:	f7ff ffa5 	bl	800ca3c <sbrk_aligned>
 800caf2:	3001      	adds	r0, #1
 800caf4:	d02b      	beq.n	800cb4e <_malloc_r+0xd2>
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	442b      	add	r3, r5
 800cafa:	6023      	str	r3, [r4, #0]
 800cafc:	e00e      	b.n	800cb1c <_malloc_r+0xa0>
 800cafe:	6822      	ldr	r2, [r4, #0]
 800cb00:	1b52      	subs	r2, r2, r5
 800cb02:	d41e      	bmi.n	800cb42 <_malloc_r+0xc6>
 800cb04:	2a0b      	cmp	r2, #11
 800cb06:	d916      	bls.n	800cb36 <_malloc_r+0xba>
 800cb08:	1961      	adds	r1, r4, r5
 800cb0a:	42a3      	cmp	r3, r4
 800cb0c:	6025      	str	r5, [r4, #0]
 800cb0e:	bf18      	it	ne
 800cb10:	6059      	strne	r1, [r3, #4]
 800cb12:	6863      	ldr	r3, [r4, #4]
 800cb14:	bf08      	it	eq
 800cb16:	6031      	streq	r1, [r6, #0]
 800cb18:	5162      	str	r2, [r4, r5]
 800cb1a:	604b      	str	r3, [r1, #4]
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f104 060b 	add.w	r6, r4, #11
 800cb22:	f000 f865 	bl	800cbf0 <__malloc_unlock>
 800cb26:	f026 0607 	bic.w	r6, r6, #7
 800cb2a:	1d23      	adds	r3, r4, #4
 800cb2c:	1af2      	subs	r2, r6, r3
 800cb2e:	d0b6      	beq.n	800ca9e <_malloc_r+0x22>
 800cb30:	1b9b      	subs	r3, r3, r6
 800cb32:	50a3      	str	r3, [r4, r2]
 800cb34:	e7b3      	b.n	800ca9e <_malloc_r+0x22>
 800cb36:	6862      	ldr	r2, [r4, #4]
 800cb38:	42a3      	cmp	r3, r4
 800cb3a:	bf0c      	ite	eq
 800cb3c:	6032      	streq	r2, [r6, #0]
 800cb3e:	605a      	strne	r2, [r3, #4]
 800cb40:	e7ec      	b.n	800cb1c <_malloc_r+0xa0>
 800cb42:	4623      	mov	r3, r4
 800cb44:	6864      	ldr	r4, [r4, #4]
 800cb46:	e7b2      	b.n	800caae <_malloc_r+0x32>
 800cb48:	4634      	mov	r4, r6
 800cb4a:	6876      	ldr	r6, [r6, #4]
 800cb4c:	e7b9      	b.n	800cac2 <_malloc_r+0x46>
 800cb4e:	230c      	movs	r3, #12
 800cb50:	603b      	str	r3, [r7, #0]
 800cb52:	4638      	mov	r0, r7
 800cb54:	f000 f84c 	bl	800cbf0 <__malloc_unlock>
 800cb58:	e7a1      	b.n	800ca9e <_malloc_r+0x22>
 800cb5a:	6025      	str	r5, [r4, #0]
 800cb5c:	e7de      	b.n	800cb1c <_malloc_r+0xa0>
 800cb5e:	bf00      	nop
 800cb60:	24001460 	.word	0x24001460

0800cb64 <_realloc_r>:
 800cb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb68:	4680      	mov	r8, r0
 800cb6a:	4614      	mov	r4, r2
 800cb6c:	460e      	mov	r6, r1
 800cb6e:	b921      	cbnz	r1, 800cb7a <_realloc_r+0x16>
 800cb70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb74:	4611      	mov	r1, r2
 800cb76:	f7ff bf81 	b.w	800ca7c <_malloc_r>
 800cb7a:	b92a      	cbnz	r2, 800cb88 <_realloc_r+0x24>
 800cb7c:	f7ff ff12 	bl	800c9a4 <_free_r>
 800cb80:	4625      	mov	r5, r4
 800cb82:	4628      	mov	r0, r5
 800cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb88:	f000 f838 	bl	800cbfc <_malloc_usable_size_r>
 800cb8c:	4284      	cmp	r4, r0
 800cb8e:	4607      	mov	r7, r0
 800cb90:	d802      	bhi.n	800cb98 <_realloc_r+0x34>
 800cb92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb96:	d812      	bhi.n	800cbbe <_realloc_r+0x5a>
 800cb98:	4621      	mov	r1, r4
 800cb9a:	4640      	mov	r0, r8
 800cb9c:	f7ff ff6e 	bl	800ca7c <_malloc_r>
 800cba0:	4605      	mov	r5, r0
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d0ed      	beq.n	800cb82 <_realloc_r+0x1e>
 800cba6:	42bc      	cmp	r4, r7
 800cba8:	4622      	mov	r2, r4
 800cbaa:	4631      	mov	r1, r6
 800cbac:	bf28      	it	cs
 800cbae:	463a      	movcs	r2, r7
 800cbb0:	f7ff fb2c 	bl	800c20c <memcpy>
 800cbb4:	4631      	mov	r1, r6
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	f7ff fef4 	bl	800c9a4 <_free_r>
 800cbbc:	e7e1      	b.n	800cb82 <_realloc_r+0x1e>
 800cbbe:	4635      	mov	r5, r6
 800cbc0:	e7df      	b.n	800cb82 <_realloc_r+0x1e>
	...

0800cbc4 <_sbrk_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4d06      	ldr	r5, [pc, #24]	; (800cbe0 <_sbrk_r+0x1c>)
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	4608      	mov	r0, r1
 800cbce:	602b      	str	r3, [r5, #0]
 800cbd0:	f7f5 fbc6 	bl	8002360 <_sbrk>
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d102      	bne.n	800cbde <_sbrk_r+0x1a>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	b103      	cbz	r3, 800cbde <_sbrk_r+0x1a>
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	24001468 	.word	0x24001468

0800cbe4 <__malloc_lock>:
 800cbe4:	4801      	ldr	r0, [pc, #4]	; (800cbec <__malloc_lock+0x8>)
 800cbe6:	f000 b811 	b.w	800cc0c <__retarget_lock_acquire_recursive>
 800cbea:	bf00      	nop
 800cbec:	2400146c 	.word	0x2400146c

0800cbf0 <__malloc_unlock>:
 800cbf0:	4801      	ldr	r0, [pc, #4]	; (800cbf8 <__malloc_unlock+0x8>)
 800cbf2:	f000 b80c 	b.w	800cc0e <__retarget_lock_release_recursive>
 800cbf6:	bf00      	nop
 800cbf8:	2400146c 	.word	0x2400146c

0800cbfc <_malloc_usable_size_r>:
 800cbfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc00:	1f18      	subs	r0, r3, #4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	bfbc      	itt	lt
 800cc06:	580b      	ldrlt	r3, [r1, r0]
 800cc08:	18c0      	addlt	r0, r0, r3
 800cc0a:	4770      	bx	lr

0800cc0c <__retarget_lock_acquire_recursive>:
 800cc0c:	4770      	bx	lr

0800cc0e <__retarget_lock_release_recursive>:
 800cc0e:	4770      	bx	lr

0800cc10 <_init>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	bf00      	nop
 800cc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc16:	bc08      	pop	{r3}
 800cc18:	469e      	mov	lr, r3
 800cc1a:	4770      	bx	lr

0800cc1c <_fini>:
 800cc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1e:	bf00      	nop
 800cc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc22:	bc08      	pop	{r3}
 800cc24:	469e      	mov	lr, r3
 800cc26:	4770      	bx	lr
