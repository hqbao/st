
drone-stm32h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011344  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e88  080115e8  080115e8  000215e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013470  08013470  00023470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013478  08013478  00023478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801347c  0801347c  0002347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  08013480  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001780  240000a0  08013520  000300a0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001820  08013520  00031820  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d6c6  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003127  00000000  00000000  0004d794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001520  00000000  00000000  000508c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001428  00000000  00000000  00051de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038a0d  00000000  00000000  00053208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dc94  00000000  00000000  0008bc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001674ed  00000000  00000000  000a98a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00210d96  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006510  00000000  00000000  00210de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080115cc 	.word	0x080115cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	080115cc 	.word	0x080115cc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a18:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a1c:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	609a      	str	r2, [r3, #8]
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <average_filter_init>:
  filter->_last_estimate=filter->_current_estimate;

  return filter->_current_estimate;
}

void average_filter_init(average_filter_t* filter, int width) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  filter->width = width;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f103 0008 	add.w	r0, r3, #8
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f00e fca7 	bl	800f3c0 <memset>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a96:	fb01 f202 	mul.w	r2, r1, r2
 8000a9a:	1a9a      	subs	r2, r3, r2
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000aca:	edd7 7a00 	vldr	s15, [r7]
 8000ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	ed93 7a01 	vldr	s14, [r3, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	ee07 3a90 	vmov	s15, r3
 8000af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000afc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000b00:	eef0 7a66 	vmov.f32	s15, s13
}
 8000b04:	eeb0 0a67 	vmov.f32	s0, s15
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void flash(uint8_t count) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e010      	b.n	8000b46 <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000b24:	2102      	movs	r1, #2
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <flash+0x48>)
 8000b28:	f007 f9e3 	bl	8007ef2 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000b2c:	2032      	movs	r0, #50	; 0x32
 8000b2e:	f004 f883 	bl	8004c38 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000b32:	2102      	movs	r1, #2
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <flash+0x48>)
 8000b36:	f007 f9dc 	bl	8007ef2 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f004 f87c 	bl	8004c38 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3301      	adds	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbea      	blt.n	8000b24 <flash+0x10>
  }

  HAL_Delay(100);
 8000b4e:	2064      	movs	r0, #100	; 0x64
 8000b50:	f004 f872 	bl	8004c38 <HAL_Delay>
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	58020000 	.word	0x58020000

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f003 ffd6 	bl	8004b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b68:	f000 f888 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6c:	f000 fd02 	bl	8001574 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b70:	f000 f902 	bl	8000d78 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fc7a 	bl	800146c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000b78:	f000 fada 	bl	8001130 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000b7c:	f000 f93c 	bl	8000df8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b80:	f000 f9d2 	bl	8000f28 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b84:	f000 fa62 	bl	800104c <MX_TIM5_Init>
  MX_TIM7_Init();
 8000b88:	f000 fb08 	bl	800119c <MX_TIM7_Init>
  MX_UART4_Init();
 8000b8c:	f000 fb3e 	bl	800120c <MX_UART4_Init>
  MX_UART5_Init();
 8000b90:	f000 fb88 	bl	80012a4 <MX_UART5_Init>
  MX_DMA_Init();
 8000b94:	f000 fcb6 	bl	8001504 <MX_DMA_Init>
  MX_UART7_Init();
 8000b98:	f000 fbd0 	bl	800133c <MX_UART7_Init>
  MX_UART8_Init();
 8000b9c:	f000 fc1a 	bl	80013d4 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  // Turn off led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4827      	ldr	r0, [pc, #156]	; (8000c44 <main+0xe4>)
 8000ba6:	f007 f98b 	bl	8007ec0 <HAL_GPIO_WritePin>

  flash(5);
 8000baa:	2005      	movs	r0, #5
 8000bac:	f7ff ffb2 	bl	8000b14 <flash>

  // Initialise filters for remote control
  init_filters();
 8000bb0:	f003 fdae 	bl	8004710 <init_filters>

  // Init sensors
  init_sensors();
 8000bb4:	f003 fdce 	bl	8004754 <init_sensors>

  flash(5);
 8000bb8:	2005      	movs	r0, #5
 8000bba:	f7ff ffab 	bl	8000b14 <flash>

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4821      	ldr	r0, [pc, #132]	; (8000c48 <main+0xe8>)
 8000bc2:	f00a feb5 	bl	800b930 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	481f      	ldr	r0, [pc, #124]	; (8000c48 <main+0xe8>)
 8000bca:	f00a feb1 	bl	800b930 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000bce:	2108      	movs	r1, #8
 8000bd0:	481d      	ldr	r0, [pc, #116]	; (8000c48 <main+0xe8>)
 8000bd2:	f00a fead 	bl	800b930 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000bd6:	210c      	movs	r1, #12
 8000bd8:	481b      	ldr	r0, [pc, #108]	; (8000c48 <main+0xe8>)
 8000bda:	f00a fea9 	bl	800b930 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000bde:	2100      	movs	r1, #0
 8000be0:	481a      	ldr	r0, [pc, #104]	; (8000c4c <main+0xec>)
 8000be2:	f00a fea5 	bl	800b930 <HAL_TIM_IC_Start_IT>

  // For motor PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000be6:	2100      	movs	r1, #0
 8000be8:	4819      	ldr	r0, [pc, #100]	; (8000c50 <main+0xf0>)
 8000bea:	f00a fd31 	bl	800b650 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bee:	2104      	movs	r1, #4
 8000bf0:	4817      	ldr	r0, [pc, #92]	; (8000c50 <main+0xf0>)
 8000bf2:	f00a fd2d 	bl	800b650 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	4815      	ldr	r0, [pc, #84]	; (8000c50 <main+0xf0>)
 8000bfa:	f00a fd29 	bl	800b650 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000bfe:	210c      	movs	r1, #12
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <main+0xf0>)
 8000c02:	f00a fd25 	bl	800b650 <HAL_TIM_PWM_Start>

  // PID timer
  HAL_TIM_Base_Start_IT(&htim6);
 8000c06:	4813      	ldr	r0, [pc, #76]	; (8000c54 <main+0xf4>)
 8000c08:	f00a fc48 	bl	800b49c <HAL_TIM_Base_Start_IT>

  // Monitor timer
  HAL_TIM_Base_Start_IT(&htim7);
 8000c0c:	4812      	ldr	r0, [pc, #72]	; (8000c58 <main+0xf8>)
 8000c0e:	f00a fc45 	bl	800b49c <HAL_TIM_Base_Start_IT>

  // Call receive in circlar mode, don't have to repeat the call to activate callback
  HAL_UART_Receive_DMA(&huart4, g_uart_rx_buffer1, UART_BUF_SIZE);
 8000c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c16:	4911      	ldr	r1, [pc, #68]	; (8000c5c <main+0xfc>)
 8000c18:	4811      	ldr	r0, [pc, #68]	; (8000c60 <main+0x100>)
 8000c1a:	f00c fb17 	bl	800d24c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, g_uart_rx_buffer2, UART_BUF_SIZE);
 8000c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c22:	4910      	ldr	r1, [pc, #64]	; (8000c64 <main+0x104>)
 8000c24:	4810      	ldr	r0, [pc, #64]	; (8000c68 <main+0x108>)
 8000c26:	f00c fb11 	bl	800d24c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart7, g_uart_rx_buffer3, UART_BUF_SIZE);
 8000c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2e:	490f      	ldr	r1, [pc, #60]	; (8000c6c <main+0x10c>)
 8000c30:	480f      	ldr	r0, [pc, #60]	; (8000c70 <main+0x110>)
 8000c32:	f00c fb0b 	bl	800d24c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart8, g_uart_rx_buffer4, UART_BUF_SIZE);
 8000c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <main+0x114>)
 8000c3c:	480e      	ldr	r0, [pc, #56]	; (8000c78 <main+0x118>)
 8000c3e:	f00c fb05 	bl	800d24c <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0xe2>
 8000c44:	58020000 	.word	0x58020000
 8000c48:	24000154 	.word	0x24000154
 8000c4c:	240001a0 	.word	0x240001a0
 8000c50:	24000108 	.word	0x24000108
 8000c54:	240001ec 	.word	0x240001ec
 8000c58:	24000238 	.word	0x24000238
 8000c5c:	240010c0 	.word	0x240010c0
 8000c60:	24000284 	.word	0x24000284
 8000c64:	240011c0 	.word	0x240011c0
 8000c68:	24000314 	.word	0x24000314
 8000c6c:	240012c0 	.word	0x240012c0
 8000c70:	240003a4 	.word	0x240003a4
 8000c74:	240013c0 	.word	0x240013c0
 8000c78:	24000434 	.word	0x24000434

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09c      	sub	sp, #112	; 0x70
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	224c      	movs	r2, #76	; 0x4c
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00e fb98 	bl	800f3c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2220      	movs	r2, #32
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00e fb92 	bl	800f3c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f008 f849 	bl	8008d34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <SystemClock_Config+0xf4>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	4a31      	ldr	r2, [pc, #196]	; (8000d70 <SystemClock_Config+0xf4>)
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <SystemClock_Config+0xf4>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <SystemClock_Config+0xf8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a2c      	ldr	r2, [pc, #176]	; (8000d74 <SystemClock_Config+0xf8>)
 8000cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <SystemClock_Config+0xf8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cd4:	bf00      	nop
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <SystemClock_Config+0xf8>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce2:	d1f8      	bne.n	8000cd6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000cfe:	230a      	movs	r3, #10
 8000d00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000d06:	2304      	movs	r3, #4
 8000d08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d12:	2308      	movs	r3, #8
 8000d14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d16:	2302      	movs	r3, #2
 8000d18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 f840 	bl	8008da8 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d2e:	f000 fc93 	bl	8001658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	233f      	movs	r3, #63	; 0x3f
 8000d34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2303      	movs	r3, #3
 8000d38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2101      	movs	r1, #1
 8000d56:	4618      	mov	r0, r3
 8000d58:	f008 fc54 	bl	8009604 <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d62:	f000 fc79 	bl	8001658 <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3770      	adds	r7, #112	; 0x70
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	58000400 	.word	0x58000400
 8000d74:	58024800 	.word	0x58024800

08000d78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_I2C1_Init+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <MX_I2C1_Init+0x7c>)
 8000d86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_I2C1_Init+0x74>)
 8000db4:	f007 f8b8 	bl	8007f28 <HAL_I2C_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dbe:	f000 fc4b 	bl	8001658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <MX_I2C1_Init+0x74>)
 8000dc6:	f007 ff1d 	bl	8008c04 <HAL_I2CEx_ConfigAnalogFilter>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd0:	f000 fc42 	bl	8001658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_I2C1_Init+0x74>)
 8000dd8:	f007 ff5f 	bl	8008c9a <HAL_I2CEx_ConfigDigitalFilter>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 fc39 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	240000bc 	.word	0x240000bc
 8000df0:	40005400 	.word	0x40005400
 8000df4:	10c0ecff 	.word	0x10c0ecff

08000df8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25;
 8000e32:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e34:	2219      	movs	r2, #25
 8000e36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8000e3e:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e40:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e52:	4834      	ldr	r0, [pc, #208]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e54:	f00a faca 	bl	800b3ec <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e5e:	f000 fbfb 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	482d      	ldr	r0, [pc, #180]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e70:	f00b f97e 	bl	800c170 <HAL_TIM_ConfigClockSource>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e7a:	f000 fbed 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e7e:	4829      	ldr	r0, [pc, #164]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e80:	f00a fb84 	bl	800b58c <HAL_TIM_PWM_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e8a:	f000 fbe5 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4821      	ldr	r0, [pc, #132]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000e9e:	f00c f829 	bl	800cef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ea8:	f000 fbd6 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eac:	2360      	movs	r3, #96	; 0x60
 8000eae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4818      	ldr	r0, [pc, #96]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000ec4:	f00b f840 	bl	800bf48 <HAL_TIM_PWM_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ece:	f000 fbc3 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000eda:	f00b f835 	bl	800bf48 <HAL_TIM_PWM_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ee4:	f000 fbb8 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2208      	movs	r2, #8
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000ef0:	f00b f82a 	bl	800bf48 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000efa:	f000 fbad 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	220c      	movs	r2, #12
 8000f02:	4619      	mov	r1, r3
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000f06:	f00b f81f 	bl	800bf48 <HAL_TIM_PWM_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000f10:	f000 fba2 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <MX_TIM2_Init+0x12c>)
 8000f16:	f001 fe23 	bl	8002b60 <HAL_TIM_MspPostInit>

}
 8000f1a:	bf00      	nop
 8000f1c:	3738      	adds	r7, #56	; 0x38
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000108 	.word	0x24000108

08000f28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f56:	4a3c      	ldr	r2, [pc, #240]	; (8001048 <MX_TIM4_Init+0x120>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 250;
 8000f5a:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f5c:	22fa      	movs	r2, #250	; 0xfa
 8000f5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000f66:	4b37      	ldr	r3, [pc, #220]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f68:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b35      	ldr	r3, [pc, #212]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f7a:	4832      	ldr	r0, [pc, #200]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f7c:	f00a fa36 	bl	800b3ec <HAL_TIM_Base_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000f86:	f000 fb67 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	4619      	mov	r1, r3
 8000f96:	482b      	ldr	r0, [pc, #172]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000f98:	f00b f8ea 	bl	800c170 <HAL_TIM_ConfigClockSource>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000fa2:	f000 fb59 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000fa6:	4827      	ldr	r0, [pc, #156]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000fa8:	f00a fc60 	bl	800b86c <HAL_TIM_IC_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f000 fb51 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481f      	ldr	r0, [pc, #124]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000fc6:	f00b ff95 	bl	800cef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000fd0:	f000 fb42 	bl	8001658 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4816      	ldr	r0, [pc, #88]	; (8001044 <MX_TIM4_Init+0x11c>)
 8000fec:	f00a ff0f 	bl	800be0e <HAL_TIM_IC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000ff6:	f000 fb2f 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <MX_TIM4_Init+0x11c>)
 8001002:	f00a ff04 	bl	800be0e <HAL_TIM_IC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 800100c:	f000 fb24 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2208      	movs	r2, #8
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <MX_TIM4_Init+0x11c>)
 8001018:	f00a fef9 	bl	800be0e <HAL_TIM_IC_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8001022:	f000 fb19 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	220c      	movs	r2, #12
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_TIM4_Init+0x11c>)
 800102e:	f00a feee 	bl	800be0e <HAL_TIM_IC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8001038:	f000 fb0e 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3730      	adds	r7, #48	; 0x30
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	24000154 	.word	0x24000154
 8001048:	40000800 	.word	0x40000800

0800104c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_TIM5_Init+0xdc>)
 800107a:	4a2c      	ldr	r2, [pc, #176]	; (800112c <MX_TIM5_Init+0xe0>)
 800107c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 250;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <MX_TIM5_Init+0xdc>)
 8001080:	22fa      	movs	r2, #250	; 0xfa
 8001082:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_TIM5_Init+0xdc>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <MX_TIM5_Init+0xdc>)
 800108c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001090:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_TIM5_Init+0xdc>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_TIM5_Init+0xdc>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800109e:	4822      	ldr	r0, [pc, #136]	; (8001128 <MX_TIM5_Init+0xdc>)
 80010a0:	f00a f9a4 	bl	800b3ec <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 80010aa:	f000 fad5 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4619      	mov	r1, r3
 80010ba:	481b      	ldr	r0, [pc, #108]	; (8001128 <MX_TIM5_Init+0xdc>)
 80010bc:	f00b f858 	bl	800c170 <HAL_TIM_ConfigClockSource>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80010c6:	f000 fac7 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80010ca:	4817      	ldr	r0, [pc, #92]	; (8001128 <MX_TIM5_Init+0xdc>)
 80010cc:	f00a fbce 	bl	800b86c <HAL_TIM_IC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80010d6:	f000 fabf 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <MX_TIM5_Init+0xdc>)
 80010ea:	f00b ff03 	bl	800cef4 <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80010f4:	f000 fab0 	bl	8001658 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010f8:	230a      	movs	r3, #10
 80010fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_TIM5_Init+0xdc>)
 8001110:	f00a fe7d 	bl	800be0e <HAL_TIM_IC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 800111a:	f000 fa9d 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3730      	adds	r7, #48	; 0x30
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	240001a0 	.word	0x240001a0
 800112c:	40000c00 	.word	0x40000c00

08001130 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_TIM6_Init+0x64>)
 8001142:	4a15      	ldr	r2, [pc, #84]	; (8001198 <MX_TIM6_Init+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 250;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_TIM6_Init+0x64>)
 8001148:	22fa      	movs	r2, #250	; 0xfa
 800114a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_TIM6_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_TIM6_Init+0x64>)
 8001154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001158:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_TIM6_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_TIM6_Init+0x64>)
 8001162:	f00a f943 	bl	800b3ec <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800116c:	f000 fa74 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_TIM6_Init+0x64>)
 800117e:	f00b feb9 	bl	800cef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001188:	f000 fa66 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	240001ec 	.word	0x240001ec
 8001198:	40001000 	.word	0x40001000

0800119c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_TIM7_Init+0x68>)
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <MX_TIM7_Init+0x6c>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_TIM7_Init+0x68>)
 80011b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_TIM7_Init+0x68>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_TIM7_Init+0x68>)
 80011c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_TIM7_Init+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_TIM7_Init+0x68>)
 80011d0:	f00a f90c 	bl	800b3ec <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80011da:	f000 fa3d 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_TIM7_Init+0x68>)
 80011ec:	f00b fe82 	bl	800cef4 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80011f6:	f000 fa2f 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	24000238 	.word	0x24000238
 8001208:	40001400 	.word	0x40001400

0800120c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_UART4_Init+0x90>)
 8001212:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <MX_UART4_Init+0x94>)
 8001214:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_UART4_Init+0x90>)
 8001218:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800121c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_UART4_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_UART4_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_UART4_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_UART4_Init+0x90>)
 8001232:	2204      	movs	r2, #4
 8001234:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_UART4_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_UART4_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_UART4_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_UART4_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_UART4_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_UART4_Init+0x90>)
 8001256:	f00b fef9 	bl	800d04c <HAL_HalfDuplex_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001260:	f000 f9fa 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_UART4_Init+0x90>)
 8001268:	f00d ffa3 	bl	800f1b2 <HAL_UARTEx_SetTxFifoThreshold>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001272:	f000 f9f1 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <MX_UART4_Init+0x90>)
 800127a:	f00d ffd8 	bl	800f22e <HAL_UARTEx_SetRxFifoThreshold>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001284:	f000 f9e8 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_UART4_Init+0x90>)
 800128a:	f00d ff59 	bl	800f140 <HAL_UARTEx_DisableFifoMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001294:	f000 f9e0 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	24000284 	.word	0x24000284
 80012a0:	40004c00 	.word	0x40004c00

080012a4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <MX_UART5_Init+0x90>)
 80012aa:	4a23      	ldr	r2, [pc, #140]	; (8001338 <MX_UART5_Init+0x94>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_UART5_Init+0x90>)
 80012b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_UART5_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_UART5_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_UART5_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_UART5_Init+0x90>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_UART5_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_UART5_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_UART5_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_UART5_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_UART5_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 80012ec:	4811      	ldr	r0, [pc, #68]	; (8001334 <MX_UART5_Init+0x90>)
 80012ee:	f00b fead 	bl	800d04c <HAL_HalfDuplex_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80012f8:	f000 f9ae 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_UART5_Init+0x90>)
 8001300:	f00d ff57 	bl	800f1b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800130a:	f000 f9a5 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <MX_UART5_Init+0x90>)
 8001312:	f00d ff8c 	bl	800f22e <HAL_UARTEx_SetRxFifoThreshold>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800131c:	f000 f99c 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_UART5_Init+0x90>)
 8001322:	f00d ff0d 	bl	800f140 <HAL_UARTEx_DisableFifoMode>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800132c:	f000 f994 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	24000314 	.word	0x24000314
 8001338:	40005000 	.word	0x40005000

0800133c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_UART7_Init+0x90>)
 8001342:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <MX_UART7_Init+0x94>)
 8001344:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_UART7_Init+0x90>)
 8001348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800134c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_UART7_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_UART7_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_UART7_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_RX;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_UART7_Init+0x90>)
 8001362:	2204      	movs	r2, #4
 8001364:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_UART7_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_UART7_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_UART7_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_UART7_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_UART7_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_UART7_Init+0x90>)
 8001386:	f00b fe61 	bl	800d04c <HAL_HalfDuplex_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 f962 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_UART7_Init+0x90>)
 8001398:	f00d ff0b 	bl	800f1b2 <HAL_UARTEx_SetTxFifoThreshold>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80013a2:	f000 f959 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_UART7_Init+0x90>)
 80013aa:	f00d ff40 	bl	800f22e <HAL_UARTEx_SetRxFifoThreshold>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 f950 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_UART7_Init+0x90>)
 80013ba:	f00d fec1 	bl	800f140 <HAL_UARTEx_DisableFifoMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 f948 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	240003a4 	.word	0x240003a4
 80013d0:	40007800 	.word	0x40007800

080013d4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_UART8_Init+0x90>)
 80013da:	4a23      	ldr	r2, [pc, #140]	; (8001468 <MX_UART8_Init+0x94>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_UART8_Init+0x90>)
 80013e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013e4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_UART8_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_UART8_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_UART8_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_RX;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_UART8_Init+0x90>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_UART8_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_UART8_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_UART8_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_UART8_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_UART8_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 800141c:	4811      	ldr	r0, [pc, #68]	; (8001464 <MX_UART8_Init+0x90>)
 800141e:	f00b fe15 	bl	800d04c <HAL_HalfDuplex_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001428:	f000 f916 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_UART8_Init+0x90>)
 8001430:	f00d febf 	bl	800f1b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800143a:	f000 f90d 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <MX_UART8_Init+0x90>)
 8001442:	f00d fef4 	bl	800f22e <HAL_UARTEx_SetRxFifoThreshold>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800144c:	f000 f904 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_UART8_Init+0x90>)
 8001452:	f00d fe75 	bl	800f140 <HAL_UARTEx_DisableFifoMode>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800145c:	f000 f8fc 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	24000434 	.word	0x24000434
 8001468:	40007c00 	.word	0x40007c00

0800146c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <MX_USART1_UART_Init+0x94>)
 8001474:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001478:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800147c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_USART1_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001492:	2208      	movs	r2, #8
 8001494:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_USART1_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_USART1_UART_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80014b4:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014b6:	f00b fdc9 	bl	800d04c <HAL_HalfDuplex_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014c0:	f000 f8ca 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014c8:	f00d fe73 	bl	800f1b2 <HAL_UARTEx_SetTxFifoThreshold>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014d2:	f000 f8c1 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014da:	f00d fea8 	bl	800f22e <HAL_UARTEx_SetRxFifoThreshold>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f000 f8b8 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_USART1_UART_Init+0x90>)
 80014ea:	f00d fe29 	bl	800f140 <HAL_UARTEx_DisableFifoMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f000 f8b0 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	240004c4 	.word	0x240004c4
 8001500:	40011000 	.word	0x40011000

08001504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_DMA_Init+0x6c>)
 800150c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <MX_DMA_Init+0x6c>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_DMA_Init+0x6c>)
 800151c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	200b      	movs	r0, #11
 800152e:	f003 fc8e 	bl	8004e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001532:	200b      	movs	r0, #11
 8001534:	f003 fca5 	bl	8004e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	200c      	movs	r0, #12
 800153e:	f003 fc86 	bl	8004e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001542:	200c      	movs	r0, #12
 8001544:	f003 fc9d 	bl	8004e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	200d      	movs	r0, #13
 800154e:	f003 fc7e 	bl	8004e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001552:	200d      	movs	r0, #13
 8001554:	f003 fc95 	bl	8004e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	200e      	movs	r0, #14
 800155e:	f003 fc76 	bl	8004e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001562:	200e      	movs	r0, #14
 8001564:	f003 fc8d 	bl	8004e82 <HAL_NVIC_EnableIRQ>

}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58024400 	.word	0x58024400

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <MX_GPIO_Init+0xdc>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <MX_GPIO_Init+0xdc>)
 8001592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <MX_GPIO_Init+0xdc>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <MX_GPIO_Init+0xdc>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	4a28      	ldr	r2, [pc, #160]	; (8001650 <MX_GPIO_Init+0xdc>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <MX_GPIO_Init+0xdc>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_GPIO_Init+0xdc>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015cc:	4a20      	ldr	r2, [pc, #128]	; (8001650 <MX_GPIO_Init+0xdc>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_GPIO_Init+0xdc>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_GPIO_Init+0xdc>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ea:	4a19      	ldr	r2, [pc, #100]	; (8001650 <MX_GPIO_Init+0xdc>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_GPIO_Init+0xdc>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_GPIO_Init+0xdc>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <MX_GPIO_Init+0xdc>)
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_GPIO_Init+0xdc>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2102      	movs	r1, #2
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <MX_GPIO_Init+0xe0>)
 8001626:	f006 fc4b 	bl	8007ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800162a:	2302      	movs	r3, #2
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_GPIO_Init+0xe0>)
 8001642:	f006 fa75 	bl	8007b30 <HAL_GPIO_Init>

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	58024400 	.word	0x58024400
 8001654:	58020000 	.word	0x58020000

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
 8001662:	0000      	movs	r0, r0
 8001664:	0000      	movs	r0, r0
	...

08001668 <calc_angles>:
#define YAW 0
#define PITCH 1
#define ROLL 2

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 8001668:	b580      	push	{r7, lr}
 800166a:	ed2d 8b04 	vpush	{d8-d9}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gyro_x / FREQ;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001680:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 80019d0 <calc_angles+0x368>
 8001684:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  mpu6050->gyro_angle[Y] += -mpu6050->gyro_y / FREQ; // Change sign to match the accelerometer's one
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800169e:	eef1 6a67 	vneg.f32	s13, s15
 80016a2:	ed9f 6acb 	vldr	s12, [pc, #812]	; 80019d0 <calc_angles+0x368>
 80016a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80016ba:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016c4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80016ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d2:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80019a8 <calc_angles+0x340>
 80016d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016da:	eeb0 0b47 	vmov.f64	d0, d7
 80016de:	f00e fdeb 	bl	80102b8 <sin>
 80016e2:	eeb0 7b40 	vmov.f64	d7, d0
 80016e6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80016ea:	ee38 7b07 	vadd.f64	d7, d8, d7
 80016ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016fe:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001708:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001716:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80019a8 <calc_angles+0x340>
 800171a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800171e:	eeb0 0b47 	vmov.f64	d0, d7
 8001722:	f00e fdc9 	bl	80102b8 <sin>
 8001726:	eeb0 7b40 	vmov.f64	d7, d0
 800172a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800172e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001732:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001746:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800174a:	eeb0 0b47 	vmov.f64	d0, d7
 800174e:	f00e fb5f 	bl	800fe10 <pow>
 8001752:	eeb0 8b40 	vmov.f64	d8, d0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a03 	vldr	s15, [r3, #12]
 800175c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001760:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001764:	eeb0 0b47 	vmov.f64	d0, d7
 8001768:	f00e fb52 	bl	800fe10 <pow>
 800176c:	eeb0 7b40 	vmov.f64	d7, d0
 8001770:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	edd3 7a04 	vldr	s15, [r3, #16]
 800177a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800177e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001782:	eeb0 0b47 	vmov.f64	d0, d7
 8001786:	f00e fb43 	bl	800fe10 <pow>
 800178a:	eeb0 7b40 	vmov.f64	d7, d0
 800178e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001792:	eeb0 0b47 	vmov.f64	d0, d7
 8001796:	f00e ff7f 	bl	8010698 <sqrt>
 800179a:	eeb0 7b40 	vmov.f64	d7, d0
 800179e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80017a2:	ee17 2a90 	vmov	r2, s15
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	679a      	str	r2, [r3, #120]	; 0x78

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80017b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b4:	ee17 3a90 	vmov	r3, s15
 80017b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017bc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017c4:	429a      	cmp	r2, r3
 80017c6:	da1b      	bge.n	8001800 <calc_angles+0x198>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017e2:	eeb0 0b47 	vmov.f64	d0, d7
 80017e6:	f00e ff2b 	bl	8010640 <asin>
 80017ea:	eeb0 7b40 	vmov.f64	d7, d0
 80017ee:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80019b0 <calc_angles+0x348>
 80017f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	edd3 7a03 	vldr	s15, [r3, #12]
 8001806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180a:	ee17 3a90 	vmov	r3, s15
 800180e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001812:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800181a:	429a      	cmp	r2, r3
 800181c:	da1b      	bge.n	8001856 <calc_angles+0x1ee>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edd3 6a02 	vldr	s13, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001838:	eeb0 0b47 	vmov.f64	d0, d7
 800183c:	f00e ff00 	bl	8010640 <asin>
 8001840:	eeb0 7b40 	vmov.f64	d7, d0
 8001844:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80019b0 <calc_angles+0x348>
 8001848:	ee27 7b06 	vmul.f64	d7, d7, d6
 800184c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  }

  if (mpu6050->initialized == 1) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800185c:	2b01      	cmp	r3, #1
 800185e:	d132      	bne.n	80018c6 <calc_angles+0x25e>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001866:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800186a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800186e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001878:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800187c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8001880:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001884:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001888:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800189c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80018a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80018aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80018b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80018b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 80018c4:	e00b      	b.n	80018de <calc_angles+0x276>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	659a      	str	r2, [r3, #88]	; 0x58

    mpu6050->initialized = 1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80018e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018e8:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80019b8 <calc_angles+0x350>
 80018ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80018f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018fa:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80019c0 <calc_angles+0x358>
 80018fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001902:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001906:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800191a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80019b8 <calc_angles+0x350>
 800191e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001928:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800192c:	ed9f 5b24 	vldr	d5, [pc, #144]	; 80019c0 <calc_angles+0x358>
 8001930:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001934:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001938:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  mpu6050->measures[YAW] = -mpu6050->gyro_z; // Store the angular motion for this axis
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001948:	eef1 7a67 	vneg.f32	s15, s15
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001958:	eef1 7a67 	vneg.f32	s15, s15
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001968:	eef1 7a67 	vneg.f32	s15, s15
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001978:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001982:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001986:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80019c8 <calc_angles+0x360>
 800198a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800198e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001992:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	ecbd 8b04 	vpop	{d8-d9}
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	695f8190 	.word	0x695f8190
 80019ac:	3f06e05a 	.word	0x3f06e05a
 80019b0:	1a63c1f8 	.word	0x1a63c1f8
 80019b4:	404ca5dc 	.word	0x404ca5dc
 80019b8:	cccccccd 	.word	0xcccccccd
 80019bc:	3feccccc 	.word	0x3feccccc
 80019c0:	9999999a 	.word	0x9999999a
 80019c4:	3fb99999 	.word	0x3fb99999
 80019c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019cc:	3f50624d 	.word	0x3f50624d
 80019d0:	43c80000 	.word	0x43c80000

080019d4 <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	4611      	mov	r1, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	460b      	mov	r3, r1
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	4613      	mov	r3, r2
 80019e8:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	22d0      	movs	r2, #208	; 0xd0
 80019f4:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e00a      	b.n	8001a12 <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f006 fe25 	bl	8008650 <HAL_I2C_GetState>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	d006      	beq.n	8001a1a <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	ddf1      	ble.n	80019fc <MPU6050_init+0x28>
 8001a18:	e000      	b.n	8001a1c <MPU6050_init+0x48>
      break;
 8001a1a:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	dd01      	ble.n	8001a26 <MPU6050_init+0x52>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e1e1      	b.n	8001dea <MPU6050_init+0x416>

  // Check MPU id
  uint8_t whoiam = 0x75;
 8001a26:	2375      	movs	r3, #117	; 0x75
 8001a28:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e011      	b.n	8001a54 <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	791b      	ldrb	r3, [r3, #4]
 8001a38:	b299      	uxth	r1, r3
 8001a3a:	f107 021b 	add.w	r2, r7, #27
 8001a3e:	2364      	movs	r3, #100	; 0x64
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	f006 fb00 	bl	8008048 <HAL_I2C_Master_Transmit>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	ddea      	ble.n	8001a30 <MPU6050_init+0x5c>
 8001a5a:	e000      	b.n	8001a5e <MPU6050_init+0x8a>
      break;
 8001a5c:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	dd01      	ble.n	8001a68 <MPU6050_init+0x94>
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1c0      	b.n	8001dea <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	e011      	b.n	8001a92 <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	791b      	ldrb	r3, [r3, #4]
 8001a76:	b299      	uxth	r1, r3
 8001a78:	f107 021a 	add.w	r2, r7, #26
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	f006 fbd5 	bl	8008230 <HAL_I2C_Master_Receive>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	ddea      	ble.n	8001a6e <MPU6050_init+0x9a>
 8001a98:	e000      	b.n	8001a9c <MPU6050_init+0xc8>
      break;
 8001a9a:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	dd01      	ble.n	8001aa6 <MPU6050_init+0xd2>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e1a1      	b.n	8001dea <MPU6050_init+0x416>

  if (whoiam_res != 0x68) return 5;
 8001aa6:	7ebb      	ldrb	r3, [r7, #26]
 8001aa8:	2b68      	cmp	r3, #104	; 0x68
 8001aaa:	d001      	beq.n	8001ab0 <MPU6050_init+0xdc>
 8001aac:	2305      	movs	r3, #5
 8001aae:	e19c      	b.n	8001dea <MPU6050_init+0x416>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001ab0:	236b      	movs	r3, #107	; 0x6b
 8001ab2:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	e011      	b.n	8001ade <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	791b      	ldrb	r3, [r3, #4]
 8001ac2:	b299      	uxth	r1, r3
 8001ac4:	f107 0218 	add.w	r2, r7, #24
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2302      	movs	r3, #2
 8001ace:	f006 fabb 	bl	8008048 <HAL_I2C_Master_Transmit>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	3301      	adds	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	ddea      	ble.n	8001aba <MPU6050_init+0xe6>
 8001ae4:	e000      	b.n	8001ae8 <MPU6050_init+0x114>
      break;
 8001ae6:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	dd01      	ble.n	8001af2 <MPU6050_init+0x11e>
 8001aee:	2306      	movs	r3, #6
 8001af0:	e17b      	b.n	8001dea <MPU6050_init+0x416>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 8001af2:	2319      	movs	r3, #25
 8001af4:	753b      	strb	r3, [r7, #20]
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e011      	b.n	8001b24 <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	791b      	ldrb	r3, [r3, #4]
 8001b08:	b299      	uxth	r1, r3
 8001b0a:	f107 0214 	add.w	r2, r7, #20
 8001b0e:	2364      	movs	r3, #100	; 0x64
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2302      	movs	r3, #2
 8001b14:	f006 fa98 	bl	8008048 <HAL_I2C_Master_Transmit>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3301      	adds	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	ddea      	ble.n	8001b00 <MPU6050_init+0x12c>
 8001b2a:	e000      	b.n	8001b2e <MPU6050_init+0x15a>
      break;
 8001b2c:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	dd01      	ble.n	8001b38 <MPU6050_init+0x164>
 8001b34:	2307      	movs	r3, #7
 8001b36:	e158      	b.n	8001dea <MPU6050_init+0x416>

  // Set accel config
  uint8_t accel_config = 0x1C;
 8001b38:	231c      	movs	r3, #28
 8001b3a:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	e011      	b.n	8001b66 <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	791b      	ldrb	r3, [r3, #4]
 8001b4a:	b299      	uxth	r1, r3
 8001b4c:	f107 0213 	add.w	r2, r7, #19
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2301      	movs	r3, #1
 8001b56:	f006 fa77 	bl	8008048 <HAL_I2C_Master_Transmit>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	3301      	adds	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	ddea      	ble.n	8001b42 <MPU6050_init+0x16e>
 8001b6c:	e000      	b.n	8001b70 <MPU6050_init+0x19c>
      break;
 8001b6e:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	dd01      	ble.n	8001b7a <MPU6050_init+0x1a6>
 8001b76:	2308      	movs	r3, #8
 8001b78:	e137      	b.n	8001dea <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e011      	b.n	8001ba4 <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	791b      	ldrb	r3, [r3, #4]
 8001b88:	b299      	uxth	r1, r3
 8001b8a:	f107 0213 	add.w	r2, r7, #19
 8001b8e:	2364      	movs	r3, #100	; 0x64
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2301      	movs	r3, #1
 8001b94:	f006 fb4c 	bl	8008230 <HAL_I2C_Master_Receive>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	ddea      	ble.n	8001b80 <MPU6050_init+0x1ac>
 8001baa:	e000      	b.n	8001bae <MPU6050_init+0x1da>
      break;
 8001bac:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	dd01      	ble.n	8001bb8 <MPU6050_init+0x1e4>
 8001bb4:	2309      	movs	r3, #9
 8001bb6:	e118      	b.n	8001dea <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	f023 0318 	bic.w	r3, r3, #24
 8001bc0:	b25a      	sxtb	r2, r3
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	b25b      	sxtb	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b25b      	sxtb	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	e011      	b.n	8001bfa <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	791b      	ldrb	r3, [r3, #4]
 8001bde:	b299      	uxth	r1, r3
 8001be0:	f107 0213 	add.w	r2, r7, #19
 8001be4:	2364      	movs	r3, #100	; 0x64
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2301      	movs	r3, #1
 8001bea:	f006 fa2d 	bl	8008048 <HAL_I2C_Master_Transmit>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	ddea      	ble.n	8001bd6 <MPU6050_init+0x202>
 8001c00:	e000      	b.n	8001c04 <MPU6050_init+0x230>
      break;
 8001c02:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	dd01      	ble.n	8001c0e <MPU6050_init+0x23a>
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	e0ed      	b.n	8001dea <MPU6050_init+0x416>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8001c0e:	231b      	movs	r3, #27
 8001c10:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e011      	b.n	8001c3c <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	791b      	ldrb	r3, [r3, #4]
 8001c20:	b299      	uxth	r1, r3
 8001c22:	f107 0212 	add.w	r2, r7, #18
 8001c26:	2364      	movs	r3, #100	; 0x64
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f006 fa0c 	bl	8008048 <HAL_I2C_Master_Transmit>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	ddea      	ble.n	8001c18 <MPU6050_init+0x244>
 8001c42:	e000      	b.n	8001c46 <MPU6050_init+0x272>
      break;
 8001c44:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	dd01      	ble.n	8001c50 <MPU6050_init+0x27c>
 8001c4c:	230b      	movs	r3, #11
 8001c4e:	e0cc      	b.n	8001dea <MPU6050_init+0x416>

  for (counter = 0; counter < 5; counter += 1) {
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	e011      	b.n	8001c7a <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	791b      	ldrb	r3, [r3, #4]
 8001c5e:	b299      	uxth	r1, r3
 8001c60:	f107 0212 	add.w	r2, r7, #18
 8001c64:	2364      	movs	r3, #100	; 0x64
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f006 fae1 	bl	8008230 <HAL_I2C_Master_Receive>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3301      	adds	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	ddea      	ble.n	8001c56 <MPU6050_init+0x282>
 8001c80:	e000      	b.n	8001c84 <MPU6050_init+0x2b0>
      break;
 8001c82:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	dd01      	ble.n	8001c8e <MPU6050_init+0x2ba>
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	e0ad      	b.n	8001dea <MPU6050_init+0x416>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8001c8e:	7cfb      	ldrb	r3, [r7, #19]
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	f023 0318 	bic.w	r3, r3, #24
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	e011      	b.n	8001cd2 <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	791b      	ldrb	r3, [r3, #4]
 8001cb6:	b299      	uxth	r1, r3
 8001cb8:	f107 0212 	add.w	r2, r7, #18
 8001cbc:	2364      	movs	r3, #100	; 0x64
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f006 f9c1 	bl	8008048 <HAL_I2C_Master_Transmit>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	ddea      	ble.n	8001cae <MPU6050_init+0x2da>
 8001cd8:	e000      	b.n	8001cdc <MPU6050_init+0x308>
      break;
 8001cda:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	dd01      	ble.n	8001ce6 <MPU6050_init+0x312>
 8001ce2:	230d      	movs	r3, #13
 8001ce4:	e081      	b.n	8001dea <MPU6050_init+0x416>
  #define MPU6050_DLPF_BW_94          0x02
  #define MPU6050_DLPF_BW_44          0x03
  #define MPU6050_DLPF_BW_21          0x04
  #define MPU6050_DLPF_BW_10          0x05
  #define MPU6050_DLPF_BW_5           0x06
  uint8_t lpf[2] = {0x1A, MPU6050_DLPF_BW_94};
 8001ce6:	f240 231a 	movw	r3, #538	; 0x21a
 8001cea:	823b      	strh	r3, [r7, #16]
  for (counter = 0; counter < 5; counter += 1) {
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	e011      	b.n	8001d16 <MPU6050_init+0x342>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, lpf, 2, 100) == HAL_OK) {
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	791b      	ldrb	r3, [r3, #4]
 8001cfa:	b299      	uxth	r1, r3
 8001cfc:	f107 0210 	add.w	r2, r7, #16
 8001d00:	2364      	movs	r3, #100	; 0x64
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2302      	movs	r3, #2
 8001d06:	f006 f99f 	bl	8008048 <HAL_I2C_Master_Transmit>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <MPU6050_init+0x34a>
  for (counter = 0; counter < 5; counter += 1) {
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	ddea      	ble.n	8001cf2 <MPU6050_init+0x31e>
 8001d1c:	e000      	b.n	8001d20 <MPU6050_init+0x34c>
      break;
 8001d1e:	bf00      	nop
    }
  }
  if (counter >= 5) return 14;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	dd01      	ble.n	8001d2a <MPU6050_init+0x356>
 8001d26:	230e      	movs	r3, #14
 8001d28:	e05f      	b.n	8001dea <MPU6050_init+0x416>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3380      	adds	r3, #128	; 0x80
 8001d2e:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001df4 <MPU6050_init+0x420>
 8001d32:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d36:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fe66 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3398      	adds	r3, #152	; 0x98
 8001d44:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001df4 <MPU6050_init+0x420>
 8001d48:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d4c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fe5b 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	33b0      	adds	r3, #176	; 0xb0
 8001d5a:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001df4 <MPU6050_init+0x420>
 8001d5e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d62:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fe50 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 1.0); // Gyro x
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	33c8      	adds	r3, #200	; 0xc8
 8001d70:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001d74:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d78:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fe45 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 1.0); // Gyro y
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	33e0      	adds	r3, #224	; 0xe0
 8001d86:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001d8a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d8e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fe3a 	bl	8000a0c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 1.0); // Gyro z
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	33f8      	adds	r3, #248	; 0xf8
 8001d9c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001da0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001da4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fe2f 	bl	8000a0c <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3354      	adds	r3, #84	; 0x54
 8001db2:	220c      	movs	r2, #12
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00d fb02 	bl	800f3c0 <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3360      	adds	r3, #96	; 0x60
 8001dc0:	220c      	movs	r2, #12
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00d fafb 	bl	800f3c0 <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	336c      	adds	r3, #108	; 0x6c
 8001dce:	220c      	movs	r2, #12
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00d faf4 	bl	800f3c0 <memset>
  mpu6050->initialized = 0;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  mpu6050->angle_z = 0;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	3dcccccd 	.word	0x3dcccccd

08001df8 <MPU6050_set_offset>:

void MPU6050_set_offset(mpu6050_t *mpu6050,
    float ax_offset, float ay_offset, float az_offset,
    float gx_offset, float gy_offset, float gz_offset) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	61f8      	str	r0, [r7, #28]
 8001e00:	ed87 0a06 	vstr	s0, [r7, #24]
 8001e04:	edc7 0a05 	vstr	s1, [r7, #20]
 8001e08:	ed87 1a04 	vstr	s2, [r7, #16]
 8001e0c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001e10:	ed87 2a02 	vstr	s4, [r7, #8]
 8001e14:	edc7 2a01 	vstr	s5, [r7, #4]
  mpu6050->ax_offset = ax_offset;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
  mpu6050->ay_offset = ay_offset;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
  mpu6050->az_offset = az_offset;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
  mpu6050->gx_offset = gx_offset;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
  mpu6050->gy_offset = gy_offset;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34
  mpu6050->gz_offset = gz_offset;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e3c:	bf00      	nop
 8001e3e:	3724      	adds	r7, #36	; 0x24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af04      	add	r7, sp, #16
 8001e4e:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, mpu6050->rx_buffer, 14, 10);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001e60:	220a      	movs	r2, #10
 8001e62:	9202      	str	r2, [sp, #8]
 8001e64:	220e      	movs	r2, #14
 8001e66:	9201      	str	r2, [sp, #4]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	223b      	movs	r2, #59	; 0x3b
 8001e6e:	f006 fad5 	bl	800841c <HAL_I2C_Mem_Read>
  MPU6050_parse_6axis(mpu6050);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f804 	bl	8001e80 <MPU6050_parse_6axis>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(mpu6050->rx_buffer[0] << 8 | mpu6050->rx_buffer[1]);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(mpu6050->rx_buffer[2] << 8 | mpu6050->rx_buffer[3]);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(mpu6050->rx_buffer[4] << 8 | mpu6050->rx_buffer[5]);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	edc3 7a04 	vstr	s15, [r3, #16]

//  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax);
//  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay);
//  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az);

  mpu6050->ax = mpu6050->ax + mpu6050->ax_offset;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = mpu6050->ay + mpu6050->ay_offset;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = mpu6050->az + mpu6050->az_offset;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (mpu6050->rx_buffer[6] << 8 | mpu6050->rx_buffer[7]);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001f4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f58:	eddf 6a44 	vldr	s13, [pc, #272]	; 800206c <MPU6050_parse_6axis+0x1ec>
 8001f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f60:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002070 <MPU6050_parse_6axis+0x1f0>
 8001f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(mpu6050->rx_buffer[8] << 8 | mpu6050->rx_buffer[9]);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	425b      	negs	r3, r3
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(mpu6050->rx_buffer[10] << 8 | mpu6050->rx_buffer[11]);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	b21a      	sxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(mpu6050->rx_buffer[12] << 8 | mpu6050->rx_buffer[13]);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	425b      	negs	r3, r3
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	edc3 7a08 	vstr	s15, [r3, #32]

//  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx);
//  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy);
//  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz);

  mpu6050->gx = mpu6050->gx + mpu6050->gx_offset;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy + mpu6050->gy_offset;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz + mpu6050->gz_offset;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gyro_x = mpu6050->gx / SSF_GYRO;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	ed93 7a06 	vldr	s14, [r3, #24]
 8002026:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002074 <MPU6050_parse_6axis+0x1f4>
 800202a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_y = mpu6050->gy / SSF_GYRO;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	ed93 7a07 	vldr	s14, [r3, #28]
 800203a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002074 <MPU6050_parse_6axis+0x1f4>
 800203e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  mpu6050->gyro_z = mpu6050->gz / SSF_GYRO;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	ed93 7a08 	vldr	s14, [r3, #32]
 800204e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002074 <MPU6050_parse_6axis+0x1f4>
 8002052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  calc_angles(mpu6050);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff fb03 	bl	8001668 <calc_angles>
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	43aa0000 	.word	0x43aa0000
 8002070:	42121eb8 	.word	0x42121eb8
 8002074:	42830000 	.word	0x42830000

08002078 <_reset>:
#define TEMP_OSR_2048 0x56
#define TEMP_OSR_4096 0x58

#define LIMIT(number, min, max) (number < min ? min : (number > max ? max : number))

void _reset(ms5611_t *ms5611) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af02      	add	r7, sp, #8
 800207e:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_RESET;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	221e      	movs	r2, #30
 8002084:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1 , &ms5611->tx, 1, 100);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 0216 	add.w	r2, r3, #22
 8002090:	2364      	movs	r3, #100	; 0x64
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2301      	movs	r3, #1
 8002096:	21ee      	movs	r1, #238	; 0xee
 8002098:	f005 ffd6 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 800209c:	200a      	movs	r0, #10
 800209e:	f002 fdcb 	bl	8004c38 <HAL_Delay>

  // For Temperature > 20 Celsius
  ms5611->T2 = 0;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  ms5611->OFF2 = 0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  ms5611->SENS2 = 0;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

  average_filter_init(&ms5611->af, 20);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	334c      	adds	r3, #76	; 0x4c
 80020be:	2114      	movs	r1, #20
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fcbc 	bl	8000a3e <average_filter_init>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_read_PROM>:

void _read_PROM(ms5611_t *ms5611) {
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af02      	add	r7, sp, #8
 80020d4:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_PROM_C0;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	22a0      	movs	r2, #160	; 0xa0
 80020da:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f103 0216 	add.w	r2, r3, #22
 80020e6:	2364      	movs	r3, #100	; 0x64
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2301      	movs	r3, #1
 80020ec:	21ee      	movs	r1, #238	; 0xee
 80020ee:	f005 ffab 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1d1a      	adds	r2, r3, #4
 80020fa:	2364      	movs	r3, #100	; 0x64
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2302      	movs	r3, #2
 8002100:	21ee      	movs	r1, #238	; 0xee
 8002102:	f006 f895 	bl	8008230 <HAL_I2C_Master_Receive>
  ms5611->C[0] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	791b      	ldrb	r3, [r3, #4]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	b21a      	sxth	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	795b      	ldrb	r3, [r3, #5]
 8002112:	b21b      	sxth	r3, r3
 8002114:	4313      	orrs	r3, r2
 8002116:	b21b      	sxth	r3, r3
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	831a      	strh	r2, [r3, #24]
  HAL_Delay(10);
 800211e:	200a      	movs	r0, #10
 8002120:	f002 fd8a 	bl	8004c38 <HAL_Delay>

  ms5611->tx = CMD_PROM_C1;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	22a2      	movs	r2, #162	; 0xa2
 8002128:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f103 0216 	add.w	r2, r3, #22
 8002134:	2364      	movs	r3, #100	; 0x64
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2301      	movs	r3, #1
 800213a:	21ee      	movs	r1, #238	; 0xee
 800213c:	f005 ff84 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	1d1a      	adds	r2, r3, #4
 8002148:	2364      	movs	r3, #100	; 0x64
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2302      	movs	r3, #2
 800214e:	21ee      	movs	r1, #238	; 0xee
 8002150:	f006 f86e 	bl	8008230 <HAL_I2C_Master_Receive>
  ms5611->C[1] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	791b      	ldrb	r3, [r3, #4]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	b21a      	sxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	795b      	ldrb	r3, [r3, #5]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	835a      	strh	r2, [r3, #26]
  HAL_Delay(10);
 800216c:	200a      	movs	r0, #10
 800216e:	f002 fd63 	bl	8004c38 <HAL_Delay>

  ms5611->tx = CMD_PROM_C2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	22a4      	movs	r2, #164	; 0xa4
 8002176:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f103 0216 	add.w	r2, r3, #22
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	21ee      	movs	r1, #238	; 0xee
 800218a:	f005 ff5d 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1d1a      	adds	r2, r3, #4
 8002196:	2364      	movs	r3, #100	; 0x64
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2302      	movs	r3, #2
 800219c:	21ee      	movs	r1, #238	; 0xee
 800219e:	f006 f847 	bl	8008230 <HAL_I2C_Master_Receive>
  ms5611->C[2] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	791b      	ldrb	r3, [r3, #4]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	795b      	ldrb	r3, [r3, #5]
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	839a      	strh	r2, [r3, #28]
  HAL_Delay(10);
 80021ba:	200a      	movs	r0, #10
 80021bc:	f002 fd3c 	bl	8004c38 <HAL_Delay>

  ms5611->tx = CMD_PROM_C3;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	22a6      	movs	r2, #166	; 0xa6
 80021c4:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f103 0216 	add.w	r2, r3, #22
 80021d0:	2364      	movs	r3, #100	; 0x64
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	21ee      	movs	r1, #238	; 0xee
 80021d8:	f005 ff36 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	1d1a      	adds	r2, r3, #4
 80021e4:	2364      	movs	r3, #100	; 0x64
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2302      	movs	r3, #2
 80021ea:	21ee      	movs	r1, #238	; 0xee
 80021ec:	f006 f820 	bl	8008230 <HAL_I2C_Master_Receive>
  ms5611->C[3] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	791b      	ldrb	r3, [r3, #4]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	795b      	ldrb	r3, [r3, #5]
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	4313      	orrs	r3, r2
 8002200:	b21b      	sxth	r3, r3
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	83da      	strh	r2, [r3, #30]
  HAL_Delay(10);
 8002208:	200a      	movs	r0, #10
 800220a:	f002 fd15 	bl	8004c38 <HAL_Delay>

  ms5611->tx = CMD_PROM_C4;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	22a8      	movs	r2, #168	; 0xa8
 8002212:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f103 0216 	add.w	r2, r3, #22
 800221e:	2364      	movs	r3, #100	; 0x64
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2301      	movs	r3, #1
 8002224:	21ee      	movs	r1, #238	; 0xee
 8002226:	f005 ff0f 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	1d1a      	adds	r2, r3, #4
 8002232:	2364      	movs	r3, #100	; 0x64
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2302      	movs	r3, #2
 8002238:	21ee      	movs	r1, #238	; 0xee
 800223a:	f005 fff9 	bl	8008230 <HAL_I2C_Master_Receive>
  ms5611->C[4] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	791b      	ldrb	r3, [r3, #4]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b21a      	sxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	795b      	ldrb	r3, [r3, #5]
 800224a:	b21b      	sxth	r3, r3
 800224c:	4313      	orrs	r3, r2
 800224e:	b21b      	sxth	r3, r3
 8002250:	b29a      	uxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	841a      	strh	r2, [r3, #32]
  HAL_Delay(10);
 8002256:	200a      	movs	r0, #10
 8002258:	f002 fcee 	bl	8004c38 <HAL_Delay>

  ms5611->tx = CMD_PROM_C5;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	22aa      	movs	r2, #170	; 0xaa
 8002260:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f103 0216 	add.w	r2, r3, #22
 800226c:	2364      	movs	r3, #100	; 0x64
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	21ee      	movs	r1, #238	; 0xee
 8002274:	f005 fee8 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	2364      	movs	r3, #100	; 0x64
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2302      	movs	r3, #2
 8002286:	21ee      	movs	r1, #238	; 0xee
 8002288:	f005 ffd2 	bl	8008230 <HAL_I2C_Master_Receive>
  ms5611->C[5] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	791b      	ldrb	r3, [r3, #4]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b21a      	sxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	795b      	ldrb	r3, [r3, #5]
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21b      	sxth	r3, r3
 800229e:	b29a      	uxth	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	845a      	strh	r2, [r3, #34]	; 0x22
  HAL_Delay(10);
 80022a4:	200a      	movs	r0, #10
 80022a6:	f002 fcc7 	bl	8004c38 <HAL_Delay>

  ms5611->tx = CMD_PROM_C6;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	22ac      	movs	r2, #172	; 0xac
 80022ae:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f103 0216 	add.w	r2, r3, #22
 80022ba:	2364      	movs	r3, #100	; 0x64
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2301      	movs	r3, #1
 80022c0:	21ee      	movs	r1, #238	; 0xee
 80022c2:	f005 fec1 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	1d1a      	adds	r2, r3, #4
 80022ce:	2364      	movs	r3, #100	; 0x64
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2302      	movs	r3, #2
 80022d4:	21ee      	movs	r1, #238	; 0xee
 80022d6:	f005 ffab 	bl	8008230 <HAL_I2C_Master_Receive>
  ms5611->C[6] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	791b      	ldrb	r3, [r3, #4]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	795b      	ldrb	r3, [r3, #5]
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	849a      	strh	r2, [r3, #36]	; 0x24
  HAL_Delay(10);
 80022f2:	200a      	movs	r0, #10
 80022f4:	f002 fca0 	bl	8004c38 <HAL_Delay>

  ms5611->tx = CMD_PROM_C7;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	22ae      	movs	r2, #174	; 0xae
 80022fc:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f103 0216 	add.w	r2, r3, #22
 8002308:	2364      	movs	r3, #100	; 0x64
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2301      	movs	r3, #1
 800230e:	21ee      	movs	r1, #238	; 0xee
 8002310:	f005 fe9a 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1d1a      	adds	r2, r3, #4
 800231c:	2364      	movs	r3, #100	; 0x64
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2302      	movs	r3, #2
 8002322:	21ee      	movs	r1, #238	; 0xee
 8002324:	f005 ff84 	bl	8008230 <HAL_I2C_Master_Receive>
  ms5611->C[7] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	791b      	ldrb	r3, [r3, #4]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	b21a      	sxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	795b      	ldrb	r3, [r3, #5]
 8002334:	b21b      	sxth	r3, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	b21b      	sxth	r3, r3
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_Delay(10);
 8002340:	200a      	movs	r0, #10
 8002342:	f002 fc79 	bl	8004c38 <HAL_Delay>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <MS5611_init>:

int MS5611_init(ms5611_t *ms5611, I2C_HandleTypeDef *i2c) {
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  ms5611->i2c = i2c;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]

  _reset(ms5611);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fe8a 	bl	8002078 <_reset>
  _read_PROM(ms5611);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff feb2 	bl	80020ce <_read_PROM>

  return 0;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <MS5611_req_temperature>:

void MS5611_req_temperature(ms5611_t *ms5611, OSR osr) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af02      	add	r7, sp, #8
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = TEMP_OSR_256 + (2 * osr);
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	3328      	adds	r3, #40	; 0x28
 8002384:	b2db      	uxtb	r3, r3
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f103 0216 	add.w	r2, r3, #22
 8002398:	2364      	movs	r3, #100	; 0x64
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2301      	movs	r3, #1
 800239e:	21ee      	movs	r1, #238	; 0xee
 80023a0:	f005 fe52 	bl	8008048 <HAL_I2C_Master_Transmit>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <MS5611_req_pressure>:

void MS5611_req_pressure(ms5611_t *ms5611, OSR osr) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = PRESSURE_OSR_256 + (2 * osr);
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	3320      	adds	r3, #32
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f103 0216 	add.w	r2, r3, #22
 80023d0:	2364      	movs	r3, #100	; 0x64
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2301      	movs	r3, #1
 80023d6:	21ee      	movs	r1, #238	; 0xee
 80023d8:	f005 fe36 	bl	8008048 <HAL_I2C_Master_Transmit>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <MS5611_read_temperature>:

void MS5611_read_temperature(ms5611_t *ms5611) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f103 0216 	add.w	r2, r3, #22
 80023fc:	2364      	movs	r3, #100	; 0x64
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2301      	movs	r3, #1
 8002402:	21ee      	movs	r1, #238	; 0xee
 8002404:	f005 fe20 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_temp, 3, 100);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f103 0210 	add.w	r2, r3, #16
 8002412:	2364      	movs	r3, #100	; 0x64
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2303      	movs	r3, #3
 8002418:	21ef      	movs	r1, #239	; 0xef
 800241a:	f005 ff09 	bl	8008230 <HAL_I2C_Master_Receive>
//  HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1 , 0x00, 1, ms5611->rx_temp, 3, 100);

  ms5611->digi_tem_D2 = (ms5611->rx_temp[0] << 16) | (ms5611->rx_temp[1] << 8) | ms5611->rx_temp[2];
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7c1b      	ldrb	r3, [r3, #16]
 8002422:	041a      	lsls	r2, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7c5b      	ldrb	r3, [r3, #17]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	4313      	orrs	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	7c92      	ldrb	r2, [r2, #18]
 8002430:	4313      	orrs	r3, r2
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <MS5611_read_pressure>:

void MS5611_read_pressure(ms5611_t *ms5611) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af02      	add	r7, sp, #8
 8002446:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f103 0216 	add.w	r2, r3, #22
 8002458:	2364      	movs	r3, #100	; 0x64
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2301      	movs	r3, #1
 800245e:	21ee      	movs	r1, #238	; 0xee
 8002460:	f005 fdf2 	bl	8008048 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_press, 3, 100);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f103 0213 	add.w	r2, r3, #19
 800246e:	2364      	movs	r3, #100	; 0x64
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2303      	movs	r3, #3
 8002474:	21ef      	movs	r1, #239	; 0xef
 8002476:	f005 fedb 	bl	8008230 <HAL_I2C_Master_Receive>
  //HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1, 0x00, 1, ms5611->rx_press, 3, 100);

  ms5611->digi_psr_D1 = ms5611->rx_press[0] << 16 | ms5611->rx_press[1] << 8 | ms5611->rx_press[2];
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7cdb      	ldrb	r3, [r3, #19]
 800247e:	041a      	lsls	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7d1b      	ldrb	r3, [r3, #20]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	4313      	orrs	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	7d52      	ldrb	r2, [r2, #21]
 800248c:	4313      	orrs	r3, r2
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <MS5611_calc_temperature>:

void MS5611_calc_temperature(ms5611_t *ms5611) {
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  ms5611->dT = ms5611->C[5];
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT <<= 8; // Calculated up to C5 * 2^8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	021a      	lsls	r2, r3, #8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT *= -1; // Apply negative sign
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	425a      	negs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT += ms5611->digi_tem_D2; // = D2 - C5 * 2^8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	461a      	mov	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	4413      	add	r3, r2
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30

  ms5611->TEMP = ms5611->dT * ms5611->C[6];
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80024dc:	fb03 f202 	mul.w	r2, r3, r2
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP >>= 23; // Calculated up to dT * C6 / 2^23
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	15da      	asrs	r2, r3, #23
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP += 2000;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f2:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <MS5611_calc_pressure>:

void MS5611_calc_pressure(ms5611_t *ms5611) {
 8002508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800250c:	ed2d 8b02 	vpush	{d8}
 8002510:	b08c      	sub	sp, #48	; 0x30
 8002512:	af00      	add	r7, sp, #0
 8002514:	62f8      	str	r0, [r7, #44]	; 0x2c
  ms5611->OFF = ms5611->C[2];
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	8b9b      	ldrh	r3, [r3, #28]
 800251a:	b29b      	uxth	r3, r3
 800251c:	2200      	movs	r2, #0
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	61fa      	str	r2, [r7, #28]
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002528:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
  ms5611->OFF <<= 16; // Calculated up to C2 * 2^16
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	0419      	lsls	r1, r3, #16
 800253c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002540:	0410      	lsls	r0, r2, #16
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
  ms5611->OFF += (ms5611->C[4] * ms5611->dT) >> 7;
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	8c1b      	ldrh	r3, [r3, #32]
 8002552:	461a      	mov	r2, r3
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	11db      	asrs	r3, r3, #7
 800255e:	17da      	asrs	r2, r3, #31
 8002560:	623b      	str	r3, [r7, #32]
 8002562:	627a      	str	r2, [r7, #36]	; 0x24
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	18c3      	adds	r3, r0, r3
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	eb41 0303 	adc.w	r3, r1, r3
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002578:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38


  ms5611->SENS = ms5611->C[1];
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	8b5b      	ldrh	r3, [r3, #26]
 8002580:	b29b      	uxth	r3, r3
 8002582:	2200      	movs	r2, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	60fa      	str	r2, [r7, #12]
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800258e:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40
  ms5611->SENS <<= 15; // Calculated up to C1 * 2^15
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	03cb      	lsls	r3, r1, #15
 80025a2:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 80025a6:	03c2      	lsls	r2, r0, #15
 80025a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  ms5611->SENS += (ms5611->C[3] * ms5611->dT) >>8;
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80025b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025b6:	8bc9      	ldrh	r1, [r1, #30]
 80025b8:	4608      	mov	r0, r1
 80025ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025bc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80025be:	fb00 f101 	mul.w	r1, r0, r1
 80025c2:	1209      	asrs	r1, r1, #8
 80025c4:	17c8      	asrs	r0, r1, #31
 80025c6:	468a      	mov	sl, r1
 80025c8:	4683      	mov	fp, r0
 80025ca:	eb12 010a 	adds.w	r1, r2, sl
 80025ce:	6039      	str	r1, [r7, #0]
 80025d0:	eb43 030b 	adc.w	r3, r3, fp
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80025dc:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

  ms5611->P = ((ms5611->digi_psr_D1 * ms5611->SENS) / pow(2, 21) - ms5611->OFF) / pow(2, 15);
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	2200      	movs	r2, #0
 80025e6:	4698      	mov	r8, r3
 80025e8:	4691      	mov	r9, r2
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80025f0:	fb02 f009 	mul.w	r0, r2, r9
 80025f4:	fb08 f103 	mul.w	r1, r8, r3
 80025f8:	4401      	add	r1, r0
 80025fa:	fba8 4502 	umull	r4, r5, r8, r2
 80025fe:	194b      	adds	r3, r1, r5
 8002600:	461d      	mov	r5, r3
 8002602:	4620      	mov	r0, r4
 8002604:	4629      	mov	r1, r5
 8002606:	f7fe f851 	bl	80006ac <__aeabi_l2d>
 800260a:	ec41 0b16 	vmov	d6, r0, r1
 800260e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002650 <MS5611_calc_pressure+0x148>
 8002612:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe f844 	bl	80006ac <__aeabi_l2d>
 8002624:	ec41 0b17 	vmov	d7, r0, r1
 8002628:	ee38 6b47 	vsub.f64	d6, d8, d7
 800262c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8002658 <MS5611_calc_pressure+0x150>
 8002630:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002634:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002638:	ee17 2a90 	vmov	r2, s15
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002640:	bf00      	nop
 8002642:	3730      	adds	r7, #48	; 0x30
 8002644:	46bd      	mov	sp, r7
 8002646:	ecbd 8b02 	vpop	{d8}
 800264a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264e:	bf00      	nop
 8002650:	00000000 	.word	0x00000000
 8002654:	41400000 	.word	0x41400000
 8002658:	00000000 	.word	0x00000000
 800265c:	40e00000 	.word	0x40e00000

08002660 <MS5611_calc_altitude>:

#define SEA_PRESSURE 1013.25f
void MS5611_calc_altitude(ms5611_t *ms5611) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  float temperature = (float)ms5611->TEMP/100.f;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002674:	eddf 6a66 	vldr	s13, [pc, #408]	; 8002810 <MS5611_calc_altitude+0x1b0>
 8002678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800267c:	edc7 7a05 	vstr	s15, [r7, #20]
  float pressure = (float)ms5611->P/100.f;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800268c:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002810 <MS5611_calc_altitude+0x1b0>
 8002690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002694:	edc7 7a04 	vstr	s15, [r7, #16]

  // Apply average filter for altitude
  ms5611->fast_pressure = average_filter_update(&ms5611->af, pressure);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	334c      	adds	r3, #76	; 0x4c
 800269c:	ed97 0a04 	vldr	s0, [r7, #16]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe f9ea 	bl	8000a7a <average_filter_update>
 80026a6:	eef0 7a40 	vmov.f32	s15, s0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	edc3 7a7a 	vstr	s15, [r3, #488]	; 0x1e8

  // Apply complementary filter
  ms5611->slow_pressure = ms5611->slow_pressure*0.99 + ms5611->fast_pressure*0.01;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80026b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026ba:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80027e8 <MS5611_calc_altitude+0x188>
 80026be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 80026c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026cc:	ed9f 5b48 	vldr	d5, [pc, #288]	; 80027f0 <MS5611_calc_altitude+0x190>
 80026d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80026d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

  // Fix slow response problem
  float diff = LIMIT(ms5611->fast_pressure - ms5611->slow_pressure, -8, 8);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80026ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f2:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80026f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	d502      	bpl.n	8002706 <MS5611_calc_altitude+0xa6>
 8002700:	eefa 7a00 	vmov.f32	s15, #160	; 0xc1000000 -8.0
 8002704:	e019      	b.n	800273a <MS5611_calc_altitude+0xda>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8002712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002716:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800271a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	dd02      	ble.n	800272a <MS5611_calc_altitude+0xca>
 8002724:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8002728:	e007      	b.n	800273a <MS5611_calc_altitude+0xda>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8002736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273a:	edc7 7a03 	vstr	s15, [r7, #12]
  if (diff < -0.012 || diff > 0.012)
 800273e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002746:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80027f8 <MS5611_calc_altitude+0x198>
 800274a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	d40a      	bmi.n	800276a <MS5611_calc_altitude+0x10a>
 8002754:	edd7 7a03 	vldr	s15, [r7, #12]
 8002758:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800275c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002800 <MS5611_calc_altitude+0x1a0>
 8002760:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	dd13      	ble.n	8002792 <MS5611_calc_altitude+0x132>
    ms5611->slow_pressure += 0.2*diff;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8002770:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002774:	edd7 7a03 	vldr	s15, [r7, #12]
 8002778:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800277c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002808 <MS5611_calc_altitude+0x1a8>
 8002780:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002784:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002788:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

  pressure = ms5611->slow_pressure;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8002798:	613b      	str	r3, [r7, #16]

  ms5611->altitude = (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 800279a:	edd7 7a04 	vldr	s15, [r7, #16]
 800279e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002814 <MS5611_calc_altitude+0x1b4>
 80027a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027a6:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8002818 <MS5611_calc_altitude+0x1b8>
 80027aa:	eeb0 0a47 	vmov.f32	s0, s14
 80027ae:	f00d fde7 	bl	8010380 <powf>
 80027b2:	eef0 7a40 	vmov.f32	s15, s0
 80027b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027be:	edd7 7a05 	vldr	s15, [r7, #20]
 80027c2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800281c <MS5611_calc_altitude+0x1bc>
 80027c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ce:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002820 <MS5611_calc_altitude+0x1c0>
 80027d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	f3af 8000 	nop.w
 80027e8:	7ae147ae 	.word	0x7ae147ae
 80027ec:	3fefae14 	.word	0x3fefae14
 80027f0:	47ae147b 	.word	0x47ae147b
 80027f4:	3f847ae1 	.word	0x3f847ae1
 80027f8:	bc6a7efa 	.word	0xbc6a7efa
 80027fc:	bf889374 	.word	0xbf889374
 8002800:	bc6a7efa 	.word	0xbc6a7efa
 8002804:	3f889374 	.word	0x3f889374
 8002808:	9999999a 	.word	0x9999999a
 800280c:	3fc99999 	.word	0x3fc99999
 8002810:	42c80000 	.word	0x42c80000
 8002814:	447d5000 	.word	0x447d5000
 8002818:	3e42c9b7 	.word	0x3e42c9b7
 800281c:	43889333 	.word	0x43889333
 8002820:	3bd4fdf4 	.word	0x3bd4fdf4

08002824 <MS5611_update>:
// Counter checks depend on timer frequency
#define STEP_1 0
#define STEP_2 7
#define STEP_3 14
#define STEP_END 21
void MS5611_update(ms5611_t *ms5611) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  static int counter = 0;

  if (counter == STEP_1) {
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <MS5611_update+0x70>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <MS5611_update+0x18>
    MS5611_req_temperature(ms5611, OSR_4096);
 8002834:	2104      	movs	r1, #4
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fd9c 	bl	8002374 <MS5611_req_temperature>
  }

  if (counter == STEP_2) {
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <MS5611_update+0x70>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b07      	cmp	r3, #7
 8002842:	d109      	bne.n	8002858 <MS5611_update+0x34>
    MS5611_read_temperature(ms5611);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff fdcd 	bl	80023e4 <MS5611_read_temperature>
    MS5611_calc_temperature(ms5611);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fe26 	bl	800249c <MS5611_calc_temperature>
    MS5611_req_pressure(ms5611, OSR_4096);
 8002850:	2104      	movs	r1, #4
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fdaa 	bl	80023ac <MS5611_req_pressure>
  }

  if (counter == STEP_3) {
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <MS5611_update+0x70>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b0e      	cmp	r3, #14
 800285e:	d108      	bne.n	8002872 <MS5611_update+0x4e>
    MS5611_read_pressure(ms5611);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff fded 	bl	8002440 <MS5611_read_pressure>
    MS5611_calc_pressure(ms5611);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fe4e 	bl	8002508 <MS5611_calc_pressure>
    MS5611_calc_altitude(ms5611);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fef7 	bl	8002660 <MS5611_calc_altitude>
  }

  counter += 1;
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <MS5611_update+0x70>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	4a06      	ldr	r2, [pc, #24]	; (8002894 <MS5611_update+0x70>)
 800287a:	6013      	str	r3, [r2, #0]
  if (counter >= STEP_END)
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <MS5611_update+0x70>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b14      	cmp	r3, #20
 8002882:	dd02      	ble.n	800288a <MS5611_update+0x66>
    counter = 0;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <MS5611_update+0x70>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	24000734 	.word	0x24000734

08002898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_MspInit+0x30>)
 80028a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_MspInit+0x30>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_MspInit+0x30>)
 80028b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	58024400 	.word	0x58024400

080028cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b0b8      	sub	sp, #224	; 0xe0
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	22bc      	movs	r2, #188	; 0xbc
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f00c fd67 	bl	800f3c0 <memset>
  if(hi2c->Instance==I2C1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a24      	ldr	r2, [pc, #144]	; (8002988 <HAL_I2C_MspInit+0xbc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d141      	bne.n	8002980 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028fc:	2308      	movs	r3, #8
 80028fe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f007 fa06 	bl	8009d1c <HAL_RCCEx_PeriphCLKConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002916:	f7fe fe9f 	bl	8001658 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_I2C_MspInit+0xc0>)
 800291c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002920:	4a1a      	ldr	r2, [pc, #104]	; (800298c <HAL_I2C_MspInit+0xc0>)
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_I2C_MspInit+0xc0>)
 800292c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002938:	23c0      	movs	r3, #192	; 0xc0
 800293a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293e:	2312      	movs	r3, #18
 8002940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002950:	2304      	movs	r3, #4
 8002952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800295a:	4619      	mov	r1, r3
 800295c:	480c      	ldr	r0, [pc, #48]	; (8002990 <HAL_I2C_MspInit+0xc4>)
 800295e:	f005 f8e7 	bl	8007b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_I2C_MspInit+0xc0>)
 8002964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002968:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_I2C_MspInit+0xc0>)
 800296a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800296e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_I2C_MspInit+0xc0>)
 8002974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002980:	bf00      	nop
 8002982:	37e0      	adds	r7, #224	; 0xe0
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40005400 	.word	0x40005400
 800298c:	58024400 	.word	0x58024400
 8002990:	58020400 	.word	0x58020400

08002994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	; 0x38
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d10f      	bne.n	80029d6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 80029b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029bc:	4a61      	ldr	r2, [pc, #388]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029c6:	4b5f      	ldr	r3, [pc, #380]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 80029c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80029d4:	e0b1      	b.n	8002b3a <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM4)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a5b      	ldr	r2, [pc, #364]	; (8002b48 <HAL_TIM_Base_MspInit+0x1b4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d137      	bne.n	8002a50 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029e0:	4b58      	ldr	r3, [pc, #352]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 80029e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029e6:	4a57      	ldr	r2, [pc, #348]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029f0:	4b54      	ldr	r3, [pc, #336]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 80029f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fe:	4b51      	ldr	r3, [pc, #324]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a04:	4a4f      	ldr	r2, [pc, #316]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a06:	f043 0308 	orr.w	r3, r3, #8
 8002a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a0e:	4b4d      	ldr	r3, [pc, #308]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a1c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a36:	4619      	mov	r1, r3
 8002a38:	4844      	ldr	r0, [pc, #272]	; (8002b4c <HAL_TIM_Base_MspInit+0x1b8>)
 8002a3a:	f005 f879 	bl	8007b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2101      	movs	r1, #1
 8002a42:	201e      	movs	r0, #30
 8002a44:	f002 fa03 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a48:	201e      	movs	r0, #30
 8002a4a:	f002 fa1a 	bl	8004e82 <HAL_NVIC_EnableIRQ>
}
 8002a4e:	e074      	b.n	8002b3a <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM5)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3e      	ldr	r2, [pc, #248]	; (8002b50 <HAL_TIM_Base_MspInit+0x1bc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d136      	bne.n	8002ac8 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a5a:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a60:	4a38      	ldr	r2, [pc, #224]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a62:	f043 0308 	orr.w	r3, r3, #8
 8002a66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a78:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7e:	4a31      	ldr	r2, [pc, #196]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a88:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a96:	2301      	movs	r3, #1
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4828      	ldr	r0, [pc, #160]	; (8002b54 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ab2:	f005 f83d 	bl	8007b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2101      	movs	r1, #1
 8002aba:	2032      	movs	r0, #50	; 0x32
 8002abc:	f002 f9c7 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ac0:	2032      	movs	r0, #50	; 0x32
 8002ac2:	f002 f9de 	bl	8004e82 <HAL_NVIC_EnableIRQ>
}
 8002ac6:	e038      	b.n	8002b3a <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM6)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <HAL_TIM_Base_MspInit+0x1c4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d117      	bne.n	8002b02 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002ada:	f043 0310 	orr.w	r3, r3, #16
 8002ade:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	2036      	movs	r0, #54	; 0x36
 8002af6:	f002 f9aa 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002afa:	2036      	movs	r0, #54	; 0x36
 8002afc:	f002 f9c1 	bl	8004e82 <HAL_NVIC_EnableIRQ>
}
 8002b00:	e01b      	b.n	8002b3a <HAL_TIM_Base_MspInit+0x1a6>
  else if(htim_base->Instance==TIM7)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <HAL_TIM_Base_MspInit+0x1c8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d116      	bne.n	8002b3a <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002b14:	f043 0320 	orr.w	r3, r3, #32
 8002b18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_TIM_Base_MspInit+0x1b0>)
 8002b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	2037      	movs	r0, #55	; 0x37
 8002b30:	f002 f98d 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b34:	2037      	movs	r0, #55	; 0x37
 8002b36:	f002 f9a4 	bl	8004e82 <HAL_NVIC_EnableIRQ>
}
 8002b3a:	bf00      	nop
 8002b3c:	3738      	adds	r7, #56	; 0x38
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	58024400 	.word	0x58024400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	58020c00 	.word	0x58020c00
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	58020000 	.word	0x58020000
 8002b58:	40001000 	.word	0x40001000
 8002b5c:	40001400 	.word	0x40001400

08002b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d13d      	bne.n	8002bfe <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_TIM_MspPostInit+0xa8>)
 8002b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b88:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <HAL_TIM_MspPostInit+0xa8>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_TIM_MspPostInit+0xa8>)
 8002b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_TIM_MspPostInit+0xa8>)
 8002ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba6:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <HAL_TIM_MspPostInit+0xa8>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_TIM_MspPostInit+0xa8>)
 8002bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002bbe:	232c      	movs	r3, #44	; 0x2c
 8002bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480c      	ldr	r0, [pc, #48]	; (8002c0c <HAL_TIM_MspPostInit+0xac>)
 8002bda:	f004 ffa9 	bl	8007b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bde:	2308      	movs	r3, #8
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4805      	ldr	r0, [pc, #20]	; (8002c10 <HAL_TIM_MspPostInit+0xb0>)
 8002bfa:	f004 ff99 	bl	8007b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	58024400 	.word	0x58024400
 8002c0c:	58020000 	.word	0x58020000
 8002c10:	58020400 	.word	0x58020400

08002c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0c0      	sub	sp, #256	; 0x100
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c30:	22bc      	movs	r2, #188	; 0xbc
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f00c fbc3 	bl	800f3c0 <memset>
  if(huart->Instance==UART4)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7e      	ldr	r2, [pc, #504]	; (8002e38 <HAL_UART_MspInit+0x224>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d179      	bne.n	8002d38 <HAL_UART_MspInit+0x124>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002c44:	2302      	movs	r3, #2
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c52:	4618      	mov	r0, r3
 8002c54:	f007 f862 	bl	8009d1c <HAL_RCCEx_PeriphCLKConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c5e:	f7fe fcfb 	bl	8001658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c62:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c68:	4a74      	ldr	r2, [pc, #464]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c72:	4b72      	ldr	r3, [pc, #456]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c80:	4b6e      	ldr	r3, [pc, #440]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c86:	4a6d      	ldr	r2, [pc, #436]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c90:	4b6a      	ldr	r3, [pc, #424]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca6:	2312      	movs	r3, #18
 8002ca8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8002cb8:	2306      	movs	r3, #6
 8002cba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	485e      	ldr	r0, [pc, #376]	; (8002e40 <HAL_UART_MspInit+0x22c>)
 8002cc6:	f004 ff33 	bl	8007b30 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream0;
 8002cca:	4b5e      	ldr	r3, [pc, #376]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002ccc:	4a5e      	ldr	r2, [pc, #376]	; (8002e48 <HAL_UART_MspInit+0x234>)
 8002cce:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002cd0:	4b5c      	ldr	r3, [pc, #368]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002cd2:	223f      	movs	r2, #63	; 0x3f
 8002cd4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cd6:	4b5b      	ldr	r3, [pc, #364]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce2:	4b58      	ldr	r3, [pc, #352]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cea:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf0:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002cf6:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cfc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cfe:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d04:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002d0a:	484e      	ldr	r0, [pc, #312]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002d0c:	f002 f8d4 	bl	8004eb8 <HAL_DMA_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8002d16:	f7fe fc9f 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a49      	ldr	r2, [pc, #292]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002d1e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d20:	4a48      	ldr	r2, [pc, #288]	; (8002e44 <HAL_UART_MspInit+0x230>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2102      	movs	r1, #2
 8002d2a:	2034      	movs	r0, #52	; 0x34
 8002d2c:	f002 f88f 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d30:	2034      	movs	r0, #52	; 0x34
 8002d32:	f002 f8a6 	bl	8004e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d36:	e1de      	b.n	80030f6 <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART5)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <HAL_UART_MspInit+0x238>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	f040 808c 	bne.w	8002e5c <HAL_UART_MspInit+0x248>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002d44:	2302      	movs	r3, #2
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d52:	4618      	mov	r0, r3
 8002d54:	f006 ffe2 	bl	8009d1c <HAL_RCCEx_PeriphCLKConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8002d5e:	f7fe fc7b 	bl	8001658 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d62:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d68:	4a34      	ldr	r2, [pc, #208]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d72:	4b32      	ldr	r3, [pc, #200]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d80:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d86:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <HAL_UART_MspInit+0x228>)
 8002d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da6:	2312      	movs	r3, #18
 8002da8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002db8:	230e      	movs	r3, #14
 8002dba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4822      	ldr	r0, [pc, #136]	; (8002e50 <HAL_UART_MspInit+0x23c>)
 8002dc6:	f004 feb3 	bl	8007b30 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8002dca:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_UART_MspInit+0x244>)
 8002dce:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002dd0:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002dd2:	2241      	movs	r2, #65	; 0x41
 8002dd4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dfc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002e0a:	4812      	ldr	r0, [pc, #72]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002e0c:	f002 f854 	bl	8004eb8 <HAL_DMA_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_UART_MspInit+0x206>
      Error_Handler();
 8002e16:	f7fe fc1f 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002e1e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002e20:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <HAL_UART_MspInit+0x240>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 2, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2102      	movs	r1, #2
 8002e2a:	2035      	movs	r0, #53	; 0x35
 8002e2c:	f002 f80f 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002e30:	2035      	movs	r0, #53	; 0x35
 8002e32:	f002 f826 	bl	8004e82 <HAL_NVIC_EnableIRQ>
}
 8002e36:	e15e      	b.n	80030f6 <HAL_UART_MspInit+0x4e2>
 8002e38:	40004c00 	.word	0x40004c00
 8002e3c:	58024400 	.word	0x58024400
 8002e40:	58020000 	.word	0x58020000
 8002e44:	24000554 	.word	0x24000554
 8002e48:	40020010 	.word	0x40020010
 8002e4c:	40005000 	.word	0x40005000
 8002e50:	58020400 	.word	0x58020400
 8002e54:	240005cc 	.word	0x240005cc
 8002e58:	40020028 	.word	0x40020028
  else if(huart->Instance==UART7)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4aa7      	ldr	r2, [pc, #668]	; (8003100 <HAL_UART_MspInit+0x4ec>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d179      	bne.n	8002f5a <HAL_UART_MspInit+0x346>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002e66:	2302      	movs	r3, #2
 8002e68:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e74:	4618      	mov	r0, r3
 8002e76:	f006 ff51 	bl	8009d1c <HAL_RCCEx_PeriphCLKConfig>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8002e80:	f7fe fbea 	bl	8001658 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002e84:	4b9f      	ldr	r3, [pc, #636]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e8a:	4a9e      	ldr	r2, [pc, #632]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002e8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e94:	4b9b      	ldr	r3, [pc, #620]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ea2:	4b98      	ldr	r3, [pc, #608]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea8:	4a96      	ldr	r2, [pc, #600]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002eaa:	f043 0310 	orr.w	r3, r3, #16
 8002eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb2:	4b94      	ldr	r3, [pc, #592]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec8:	2312      	movs	r3, #18
 8002eca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002eda:	2307      	movs	r3, #7
 8002edc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ee0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4888      	ldr	r0, [pc, #544]	; (8003108 <HAL_UART_MspInit+0x4f4>)
 8002ee8:	f004 fe22 	bl	8007b30 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 8002eec:	4b87      	ldr	r3, [pc, #540]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002eee:	4a88      	ldr	r2, [pc, #544]	; (8003110 <HAL_UART_MspInit+0x4fc>)
 8002ef0:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002ef2:	4b86      	ldr	r3, [pc, #536]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002ef4:	224f      	movs	r2, #79	; 0x4f
 8002ef6:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ef8:	4b84      	ldr	r3, [pc, #528]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efe:	4b83      	ldr	r3, [pc, #524]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f04:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f0a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f0c:	4b7f      	ldr	r3, [pc, #508]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f12:	4b7e      	ldr	r3, [pc, #504]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002f18:	4b7c      	ldr	r3, [pc, #496]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f1e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f20:	4b7a      	ldr	r3, [pc, #488]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f26:	4b79      	ldr	r3, [pc, #484]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002f2c:	4877      	ldr	r0, [pc, #476]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f2e:	f001 ffc3 	bl	8004eb8 <HAL_DMA_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_UART_MspInit+0x328>
      Error_Handler();
 8002f38:	f7fe fb8e 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a73      	ldr	r2, [pc, #460]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f40:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f42:	4a72      	ldr	r2, [pc, #456]	; (800310c <HAL_UART_MspInit+0x4f8>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 2, 0);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	2052      	movs	r0, #82	; 0x52
 8002f4e:	f001 ff7e 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002f52:	2052      	movs	r0, #82	; 0x52
 8002f54:	f001 ff95 	bl	8004e82 <HAL_NVIC_EnableIRQ>
}
 8002f58:	e0cd      	b.n	80030f6 <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==UART8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6d      	ldr	r2, [pc, #436]	; (8003114 <HAL_UART_MspInit+0x500>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d178      	bne.n	8003056 <HAL_UART_MspInit+0x442>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002f64:	2302      	movs	r3, #2
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f72:	4618      	mov	r0, r3
 8002f74:	f006 fed2 	bl	8009d1c <HAL_RCCEx_PeriphCLKConfig>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_UART_MspInit+0x36e>
      Error_Handler();
 8002f7e:	f7fe fb6b 	bl	8001658 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002f82:	4b60      	ldr	r3, [pc, #384]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f88:	4a5e      	ldr	r2, [pc, #376]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f92:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fa0:	4b58      	ldr	r3, [pc, #352]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa6:	4a57      	ldr	r2, [pc, #348]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002fa8:	f043 0310 	orr.w	r3, r3, #16
 8002fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb0:	4b54      	ldr	r3, [pc, #336]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc4:	2312      	movs	r3, #18
 8002fc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fdc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4849      	ldr	r0, [pc, #292]	; (8003108 <HAL_UART_MspInit+0x4f4>)
 8002fe4:	f004 fda4 	bl	8007b30 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream3;
 8002fe8:	4b4b      	ldr	r3, [pc, #300]	; (8003118 <HAL_UART_MspInit+0x504>)
 8002fea:	4a4c      	ldr	r2, [pc, #304]	; (800311c <HAL_UART_MspInit+0x508>)
 8002fec:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <HAL_UART_MspInit+0x504>)
 8002ff0:	2251      	movs	r2, #81	; 0x51
 8002ff2:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff4:	4b48      	ldr	r3, [pc, #288]	; (8003118 <HAL_UART_MspInit+0x504>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffa:	4b47      	ldr	r3, [pc, #284]	; (8003118 <HAL_UART_MspInit+0x504>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003000:	4b45      	ldr	r3, [pc, #276]	; (8003118 <HAL_UART_MspInit+0x504>)
 8003002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003006:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003008:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_UART_MspInit+0x504>)
 800300a:	2200      	movs	r2, #0
 800300c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800300e:	4b42      	ldr	r3, [pc, #264]	; (8003118 <HAL_UART_MspInit+0x504>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8003014:	4b40      	ldr	r3, [pc, #256]	; (8003118 <HAL_UART_MspInit+0x504>)
 8003016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800301c:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_UART_MspInit+0x504>)
 800301e:	2200      	movs	r2, #0
 8003020:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003022:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <HAL_UART_MspInit+0x504>)
 8003024:	2200      	movs	r2, #0
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8003028:	483b      	ldr	r0, [pc, #236]	; (8003118 <HAL_UART_MspInit+0x504>)
 800302a:	f001 ff45 	bl	8004eb8 <HAL_DMA_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_UART_MspInit+0x424>
      Error_Handler();
 8003034:	f7fe fb10 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a37      	ldr	r2, [pc, #220]	; (8003118 <HAL_UART_MspInit+0x504>)
 800303c:	67da      	str	r2, [r3, #124]	; 0x7c
 800303e:	4a36      	ldr	r2, [pc, #216]	; (8003118 <HAL_UART_MspInit+0x504>)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2102      	movs	r1, #2
 8003048:	2053      	movs	r0, #83	; 0x53
 800304a:	f001 ff00 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800304e:	2053      	movs	r0, #83	; 0x53
 8003050:	f001 ff17 	bl	8004e82 <HAL_NVIC_EnableIRQ>
}
 8003054:	e04f      	b.n	80030f6 <HAL_UART_MspInit+0x4e2>
  else if(huart->Instance==USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a31      	ldr	r2, [pc, #196]	; (8003120 <HAL_UART_MspInit+0x50c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d14a      	bne.n	80030f6 <HAL_UART_MspInit+0x4e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003060:	2301      	movs	r3, #1
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003064:	2318      	movs	r3, #24
 8003066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800306a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800306e:	4618      	mov	r0, r3
 8003070:	f006 fe54 	bl	8009d1c <HAL_RCCEx_PeriphCLKConfig>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_UART_MspInit+0x46a>
      Error_Handler();
 800307a:	f7fe faed 	bl	8001658 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800307e:	4b21      	ldr	r3, [pc, #132]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8003080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003084:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8003086:	f043 0310 	orr.w	r3, r3, #16
 800308a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 8003090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 800309e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_UART_MspInit+0x4f0>)
 80030ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030c2:	2312      	movs	r3, #18
 80030c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80030d4:	2304      	movs	r3, #4
 80030d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030de:	4619      	mov	r1, r3
 80030e0:	4810      	ldr	r0, [pc, #64]	; (8003124 <HAL_UART_MspInit+0x510>)
 80030e2:	f004 fd25 	bl	8007b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	210f      	movs	r1, #15
 80030ea:	2025      	movs	r0, #37	; 0x25
 80030ec:	f001 feaf 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030f0:	2025      	movs	r0, #37	; 0x25
 80030f2:	f001 fec6 	bl	8004e82 <HAL_NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40007800 	.word	0x40007800
 8003104:	58024400 	.word	0x58024400
 8003108:	58021000 	.word	0x58021000
 800310c:	24000644 	.word	0x24000644
 8003110:	40020040 	.word	0x40020040
 8003114:	40007c00 	.word	0x40007c00
 8003118:	240006bc 	.word	0x240006bc
 800311c:	40020058 	.word	0x40020058
 8003120:	40011000 	.word	0x40011000
 8003124:	58020400 	.word	0x58020400

08003128 <blink>:
void schedule_400hz(void);
void schedule_20hz(void);
void schedule_10hz(void);
void fly(void);

void blink(void) {
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  static int blink = 0;
  if (blink == 40) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <blink+0x30>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b28      	cmp	r3, #40	; 0x28
 8003132:	d103      	bne.n	800313c <blink+0x14>
 8003134:	2102      	movs	r1, #2
 8003136:	4809      	ldr	r0, [pc, #36]	; (800315c <blink+0x34>)
 8003138:	f004 fedb 	bl	8007ef2 <HAL_GPIO_TogglePin>
  if (blink >= 40) blink = 0;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <blink+0x30>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b27      	cmp	r3, #39	; 0x27
 8003142:	dd02      	ble.n	800314a <blink+0x22>
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <blink+0x30>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
  blink += 1;
 800314a:	4b03      	ldr	r3, [pc, #12]	; (8003158 <blink+0x30>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	4a01      	ldr	r2, [pc, #4]	; (8003158 <blink+0x30>)
 8003152:	6013      	str	r3, [r2, #0]
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}
 8003158:	240017f4 	.word	0x240017f4
 800315c:	58020000 	.word	0x58020000

08003160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003164:	e7fe      	b.n	8003164 <NMI_Handler+0x4>

08003166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <HardFault_Handler+0x4>

0800316c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <MemManage_Handler+0x4>

08003172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <BusFault_Handler+0x4>

08003178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800317c:	e7fe      	b.n	800317c <UsageFault_Handler+0x4>

0800317e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ac:	f001 fd24 	bl	8004bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80031b8:	4802      	ldr	r0, [pc, #8]	; (80031c4 <DMA1_Stream0_IRQHandler+0x10>)
 80031ba:	f003 f9a7 	bl	800650c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	24000554 	.word	0x24000554

080031c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80031cc:	4802      	ldr	r0, [pc, #8]	; (80031d8 <DMA1_Stream1_IRQHandler+0x10>)
 80031ce:	f003 f99d 	bl	800650c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	240005cc 	.word	0x240005cc

080031dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <DMA1_Stream2_IRQHandler+0x10>)
 80031e2:	f003 f993 	bl	800650c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	24000644 	.word	0x24000644

080031f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80031f4:	4802      	ldr	r0, [pc, #8]	; (8003200 <DMA1_Stream3_IRQHandler+0x10>)
 80031f6:	f003 f989 	bl	800650c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	240006bc 	.word	0x240006bc

08003204 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <TIM4_IRQHandler+0x10>)
 800320a:	f008 fce1 	bl	800bbd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	24000154 	.word	0x24000154

08003218 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <USART1_IRQHandler+0x10>)
 800321e:	f00a f86b 	bl	800d2f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	240004c4 	.word	0x240004c4

0800322c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <TIM5_IRQHandler+0x10>)
 8003232:	f008 fccd 	bl	800bbd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	240001a0 	.word	0x240001a0

08003240 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <UART4_IRQHandler+0x10>)
 8003246:	f00a f857 	bl	800d2f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	24000284 	.word	0x24000284

08003254 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <UART5_IRQHandler+0x10>)
 800325a:	f00a f84d 	bl	800d2f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	24000314 	.word	0x24000314

08003268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  schedule_400hz();
 800326c:	f000 f9d8 	bl	8003620 <schedule_400hz>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <TIM6_DAC_IRQHandler+0x14>)
 8003272:	f008 fcad 	bl	800bbd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	240001ec 	.word	0x240001ec

08003280 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  schedule_20hz();
 8003284:	f000 f9e6 	bl	8003654 <schedule_20hz>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003288:	4802      	ldr	r0, [pc, #8]	; (8003294 <TIM7_IRQHandler+0x14>)
 800328a:	f008 fca1 	bl	800bbd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	24000238 	.word	0x24000238

08003298 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800329c:	4802      	ldr	r0, [pc, #8]	; (80032a8 <UART7_IRQHandler+0x10>)
 800329e:	f00a f82b 	bl	800d2f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	240003a4 	.word	0x240003a4

080032ac <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <UART8_IRQHandler+0x10>)
 80032b2:	f00a f821 	bl	800d2f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	24000434 	.word	0x24000434

080032c0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a78      	ldr	r2, [pc, #480]	; (80034b0 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	f040 813f 	bne.w	8003552 <HAL_TIM_IC_CaptureCallback+0x292>
    switch (htim->Channel) {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7f1b      	ldrb	r3, [r3, #28]
 80032d8:	3b01      	subs	r3, #1
 80032da:	2b07      	cmp	r3, #7
 80032dc:	f200 80e0 	bhi.w	80034a0 <HAL_TIM_IC_CaptureCallback+0x1e0>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <HAL_TIM_IC_CaptureCallback+0x28>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	08003309 	.word	0x08003309
 80032ec:	08003373 	.word	0x08003373
 80032f0:	080034a1 	.word	0x080034a1
 80032f4:	080033d9 	.word	0x080033d9
 80032f8:	080034a1 	.word	0x080034a1
 80032fc:	080034a1 	.word	0x080034a1
 8003300:	080034a1 	.word	0x080034a1
 8003304:	0800343d 	.word	0x0800343d
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8003308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800330c:	4869      	ldr	r0, [pc, #420]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800330e:	f004 fdbf 	bl	8007e90 <HAL_GPIO_ReadPin>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d107      	bne.n	8003328 <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003318:	2100      	movs	r1, #0
 800331a:	4867      	ldr	r0, [pc, #412]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800331c:	f009 f820 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	4b65      	ldr	r3, [pc, #404]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003326:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8003328:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800332c:	4861      	ldr	r0, [pc, #388]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800332e:	f004 fdaf 	bl	8007e90 <HAL_GPIO_ReadPin>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 80b5 	bne.w	80034a4 <HAL_TIM_IC_CaptureCallback+0x1e4>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800333a:	2100      	movs	r1, #0
 800333c:	485e      	ldr	r0, [pc, #376]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800333e:	f009 f80f 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003348:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 800334a:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	4b5b      	ldr	r3, [pc, #364]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	613b      	str	r3, [r7, #16]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2be4      	cmp	r3, #228	; 0xe4
 800335a:	f340 80a3 	ble.w	80034a4 <HAL_TIM_IC_CaptureCallback+0x1e4>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f240 2206 	movw	r2, #518	; 0x206
 8003364:	4293      	cmp	r3, r2
 8003366:	f300 809d 	bgt.w	80034a4 <HAL_TIM_IC_CaptureCallback+0x1e4>
            pwm_in[2] = value;
 800336a:	4a54      	ldr	r2, [pc, #336]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 8003370:	e098      	b.n	80034a4 <HAL_TIM_IC_CaptureCallback+0x1e4>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8003372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003376:	484f      	ldr	r0, [pc, #316]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8003378:	f004 fd8a 	bl	8007e90 <HAL_GPIO_ReadPin>
 800337c:	4603      	mov	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_TIM_IC_CaptureCallback+0xd2>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003382:	2104      	movs	r1, #4
 8003384:	484c      	ldr	r0, [pc, #304]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8003386:	f008 ffeb 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003390:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8003392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003396:	4847      	ldr	r0, [pc, #284]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8003398:	f004 fd7a 	bl	8007e90 <HAL_GPIO_ReadPin>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 8082 	bne.w	80034a8 <HAL_TIM_IC_CaptureCallback+0x1e8>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80033a4:	2104      	movs	r1, #4
 80033a6:	4844      	ldr	r0, [pc, #272]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80033a8:	f008 ffda 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b42      	ldr	r3, [pc, #264]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80033b2:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 80033b4:	4b41      	ldr	r3, [pc, #260]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	617b      	str	r3, [r7, #20]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2be4      	cmp	r3, #228	; 0xe4
 80033c4:	dd70      	ble.n	80034a8 <HAL_TIM_IC_CaptureCallback+0x1e8>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f240 2206 	movw	r2, #518	; 0x206
 80033cc:	4293      	cmp	r3, r2
 80033ce:	dc6b      	bgt.n	80034a8 <HAL_TIM_IC_CaptureCallback+0x1e8>
            pwm_in[5] = value;
 80033d0:	4a3a      	ldr	r2, [pc, #232]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 80033d6:	e067      	b.n	80034a8 <HAL_TIM_IC_CaptureCallback+0x1e8>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 80033d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033dc:	4835      	ldr	r0, [pc, #212]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80033de:	f004 fd57 	bl	8007e90 <HAL_GPIO_ReadPin>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d107      	bne.n	80033f8 <HAL_TIM_IC_CaptureCallback+0x138>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80033e8:	2108      	movs	r1, #8
 80033ea:	4833      	ldr	r0, [pc, #204]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80033ec:	f008 ffb8 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80033f6:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 80033f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033fc:	482d      	ldr	r0, [pc, #180]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80033fe:	f004 fd47 	bl	8007e90 <HAL_GPIO_ReadPin>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d151      	bne.n	80034ac <HAL_TIM_IC_CaptureCallback+0x1ec>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003408:	2108      	movs	r1, #8
 800340a:	482b      	ldr	r0, [pc, #172]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800340c:	f008 ffa8 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003416:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 8003418:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	61bb      	str	r3, [r7, #24]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2be4      	cmp	r3, #228	; 0xe4
 8003428:	dd40      	ble.n	80034ac <HAL_TIM_IC_CaptureCallback+0x1ec>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f240 2206 	movw	r2, #518	; 0x206
 8003430:	4293      	cmp	r3, r2
 8003432:	dc3b      	bgt.n	80034ac <HAL_TIM_IC_CaptureCallback+0x1ec>
            pwm_in[8] = value;
 8003434:	4a21      	ldr	r2, [pc, #132]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 800343a:	e037      	b.n	80034ac <HAL_TIM_IC_CaptureCallback+0x1ec>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 800343c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003440:	481c      	ldr	r0, [pc, #112]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8003442:	f004 fd25 	bl	8007e90 <HAL_GPIO_ReadPin>
 8003446:	4603      	mov	r3, r0
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_TIM_IC_CaptureCallback+0x19c>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 800344c:	210c      	movs	r1, #12
 800344e:	481a      	ldr	r0, [pc, #104]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8003450:	f008 ff86 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 800345c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003460:	4814      	ldr	r0, [pc, #80]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8003462:	f004 fd15 	bl	8007e90 <HAL_GPIO_ReadPin>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d129      	bne.n	80034c0 <HAL_TIM_IC_CaptureCallback+0x200>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 800346c:	210c      	movs	r1, #12
 800346e:	4812      	ldr	r0, [pc, #72]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8003470:	f008 ff76 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800347e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	61fb      	str	r3, [r7, #28]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2be4      	cmp	r3, #228	; 0xe4
 800348c:	dd18      	ble.n	80034c0 <HAL_TIM_IC_CaptureCallback+0x200>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f240 2206 	movw	r2, #518	; 0x206
 8003494:	4293      	cmp	r3, r2
 8003496:	dc13      	bgt.n	80034c0 <HAL_TIM_IC_CaptureCallback+0x200>
            pwm_in[11] = value;
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 800349e:	e00f      	b.n	80034c0 <HAL_TIM_IC_CaptureCallback+0x200>
      default:
        break;
 80034a0:	bf00      	nop
 80034a2:	e00e      	b.n	80034c2 <HAL_TIM_IC_CaptureCallback+0x202>
        break;
 80034a4:	bf00      	nop
 80034a6:	e00c      	b.n	80034c2 <HAL_TIM_IC_CaptureCallback+0x202>
        break;
 80034a8:	bf00      	nop
 80034aa:	e00a      	b.n	80034c2 <HAL_TIM_IC_CaptureCallback+0x202>
        break;
 80034ac:	bf00      	nop
 80034ae:	e008      	b.n	80034c2 <HAL_TIM_IC_CaptureCallback+0x202>
 80034b0:	40000800 	.word	0x40000800
 80034b4:	58020c00 	.word	0x58020c00
 80034b8:	24000154 	.word	0x24000154
 80034bc:	24000778 	.word	0x24000778
        break;
 80034c0:	bf00      	nop
    }

    g_throttle = average_filter_update(&g_af[0], pwm_in[2] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034d2:	eeb0 0a67 	vmov.f32	s0, s15
 80034d6:	4846      	ldr	r0, [pc, #280]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0x330>)
 80034d8:	f7fd facf 	bl	8000a7a <average_filter_update>
 80034dc:	eef0 7a40 	vmov.f32	s15, s0
 80034e0:	4b44      	ldr	r3, [pc, #272]	; (80035f4 <HAL_TIM_IC_CaptureCallback+0x334>)
 80034e2:	edc3 7a00 	vstr	s15, [r3]
    g_yaw = average_filter_update(&g_af[1], pwm_in[5] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f6:	eeb0 0a67 	vmov.f32	s0, s15
 80034fa:	483f      	ldr	r0, [pc, #252]	; (80035f8 <HAL_TIM_IC_CaptureCallback+0x338>)
 80034fc:	f7fd fabd 	bl	8000a7a <average_filter_update>
 8003500:	eef0 7a40 	vmov.f32	s15, s0
 8003504:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <HAL_TIM_IC_CaptureCallback+0x33c>)
 8003506:	edc3 7a00 	vstr	s15, [r3]
    g_pitch = average_filter_update(&g_af[2], pwm_in[11] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 800350a:	4b38      	ldr	r3, [pc, #224]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351a:	eeb0 0a67 	vmov.f32	s0, s15
 800351e:	4838      	ldr	r0, [pc, #224]	; (8003600 <HAL_TIM_IC_CaptureCallback+0x340>)
 8003520:	f7fd faab 	bl	8000a7a <average_filter_update>
 8003524:	eef0 7a40 	vmov.f32	s15, s0
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_TIM_IC_CaptureCallback+0x344>)
 800352a:	edc3 7a00 	vstr	s15, [r3]
    g_roll = average_filter_update(&g_af[3], pwm_in[8] - MIN_PWN_IN_CAP - RANGE_PWM_IN_CAP/2);
 800352e:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f2a3 1375 	subw	r3, r3, #373	; 0x175
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800353e:	eeb0 0a67 	vmov.f32	s0, s15
 8003542:	4831      	ldr	r0, [pc, #196]	; (8003608 <HAL_TIM_IC_CaptureCallback+0x348>)
 8003544:	f7fd fa99 	bl	8000a7a <average_filter_update>
 8003548:	eef0 7a40 	vmov.f32	s15, s0
 800354c:	4b2f      	ldr	r3, [pc, #188]	; (800360c <HAL_TIM_IC_CaptureCallback+0x34c>)
 800354e:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM5) {
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2e      	ldr	r2, [pc, #184]	; (8003610 <HAL_TIM_IC_CaptureCallback+0x350>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d142      	bne.n	80035e2 <HAL_TIM_IC_CaptureCallback+0x322>
    switch (htim->Channel) {
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7f1b      	ldrb	r3, [r3, #28]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d12f      	bne.n	80035c4 <HAL_TIM_IC_CaptureCallback+0x304>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8003564:	2101      	movs	r1, #1
 8003566:	482b      	ldr	r0, [pc, #172]	; (8003614 <HAL_TIM_IC_CaptureCallback+0x354>)
 8003568:	f004 fc92 	bl	8007e90 <HAL_GPIO_ReadPin>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <HAL_TIM_IC_CaptureCallback+0x2c2>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8003572:	2100      	movs	r1, #0
 8003574:	4828      	ldr	r0, [pc, #160]	; (8003618 <HAL_TIM_IC_CaptureCallback+0x358>)
 8003576:	f008 fef3 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 800357a:	4603      	mov	r3, r0
 800357c:	461a      	mov	r2, r3
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8003582:	2101      	movs	r1, #1
 8003584:	4823      	ldr	r0, [pc, #140]	; (8003614 <HAL_TIM_IC_CaptureCallback+0x354>)
 8003586:	f004 fc83 	bl	8007e90 <HAL_GPIO_ReadPin>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d11b      	bne.n	80035c8 <HAL_TIM_IC_CaptureCallback+0x308>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8003590:	2100      	movs	r1, #0
 8003592:	4821      	ldr	r0, [pc, #132]	; (8003618 <HAL_TIM_IC_CaptureCallback+0x358>)
 8003594:	f008 fee4 	bl	800c360 <HAL_TIM_ReadCapturedValue>
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 800359e:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 80035a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	60fb      	str	r3, [r7, #12]
          if (value >= MIN_PWN_IN_CAP-20 && value <= MAX_PWN_IN_CAP+20) {
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2be4      	cmp	r3, #228	; 0xe4
 80035b0:	dd0a      	ble.n	80035c8 <HAL_TIM_IC_CaptureCallback+0x308>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f240 2206 	movw	r2, #518	; 0x206
 80035b8:	4293      	cmp	r3, r2
 80035ba:	dc05      	bgt.n	80035c8 <HAL_TIM_IC_CaptureCallback+0x308>
            pwm_in[14] = value;
 80035bc:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6393      	str	r3, [r2, #56]	; 0x38
          }
        }
        break;
 80035c2:	e001      	b.n	80035c8 <HAL_TIM_IC_CaptureCallback+0x308>
      default:
        break;
 80035c4:	bf00      	nop
 80035c6:	e000      	b.n	80035ca <HAL_TIM_IC_CaptureCallback+0x30a>
        break;
 80035c8:	bf00      	nop
    }

    g_stick1 = pwm_in[14] > MIN_PWN_IN_CAP + 0.5*RANGE_PWM_IN_CAP ? 1 : 0;
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_TIM_IC_CaptureCallback+0x32c>)
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 80035d2:	db02      	blt.n	80035da <HAL_TIM_IC_CaptureCallback+0x31a>
 80035d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80035d8:	e001      	b.n	80035de <HAL_TIM_IC_CaptureCallback+0x31e>
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	4a0f      	ldr	r2, [pc, #60]	; (800361c <HAL_TIM_IC_CaptureCallback+0x35c>)
 80035e0:	6013      	str	r3, [r2, #0]
  }
}
 80035e2:	bf00      	nop
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	24000778 	.word	0x24000778
 80035f0:	240008b4 	.word	0x240008b4
 80035f4:	240007f0 	.word	0x240007f0
 80035f8:	24000a50 	.word	0x24000a50
 80035fc:	240007fc 	.word	0x240007fc
 8003600:	24000bec 	.word	0x24000bec
 8003604:	240007f4 	.word	0x240007f4
 8003608:	24000d88 	.word	0x24000d88
 800360c:	240007f8 	.word	0x240007f8
 8003610:	40000c00 	.word	0x40000c00
 8003614:	58020000 	.word	0x58020000
 8003618:	240001a0 	.word	0x240001a0
 800361c:	24000800 	.word	0x24000800

08003620 <schedule_400hz>:

void schedule_400hz(void) {
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 8003624:	4804      	ldr	r0, [pc, #16]	; (8003638 <schedule_400hz+0x18>)
 8003626:	f7fe fc0f 	bl	8001e48 <MPU6050_update>
  MS5611_update(&g_ms5611);
 800362a:	4804      	ldr	r0, [pc, #16]	; (800363c <schedule_400hz+0x1c>)
 800362c:	f7ff f8fa 	bl	8002824 <MS5611_update>
  fly();
 8003630:	f000 f996 	bl	8003960 <fly>
}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}
 8003638:	240014c0 	.word	0x240014c0
 800363c:	240015f0 	.word	0x240015f0

08003640 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <schedule_20hz>:

void schedule_20hz(void) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
  static char line[16];
  static int starts[4] = {-1, -1, -1, -1};

  for (int t = 0; t < 4; t += 1) {
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	e10d      	b.n	800387c <schedule_20hz+0x228>
    int start = starts[t];
 8003660:	4a92      	ldr	r2, [pc, #584]	; (80038ac <schedule_20hz+0x258>)
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003668:	623b      	str	r3, [r7, #32]
    int end = -1;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800366e:	61fb      	str	r3, [r7, #28]
    uint8_t *p;
    switch (t) {
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	2b03      	cmp	r3, #3
 8003674:	d816      	bhi.n	80036a4 <schedule_20hz+0x50>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <schedule_20hz+0x28>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	0800368d 	.word	0x0800368d
 8003680:	08003693 	.word	0x08003693
 8003684:	08003699 	.word	0x08003699
 8003688:	0800369f 	.word	0x0800369f
    case 0: p = g_uart_rx_buffer1; break;
 800368c:	4b88      	ldr	r3, [pc, #544]	; (80038b0 <schedule_20hz+0x25c>)
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	e008      	b.n	80036a4 <schedule_20hz+0x50>
    case 1: p = g_uart_rx_buffer2; break;
 8003692:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <schedule_20hz+0x260>)
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e005      	b.n	80036a4 <schedule_20hz+0x50>
    case 2: p = g_uart_rx_buffer3; break;
 8003698:	4b87      	ldr	r3, [pc, #540]	; (80038b8 <schedule_20hz+0x264>)
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	e002      	b.n	80036a4 <schedule_20hz+0x50>
    case 3: p = g_uart_rx_buffer4; break;
 800369e:	4b87      	ldr	r3, [pc, #540]	; (80038bc <schedule_20hz+0x268>)
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	bf00      	nop
    }

    if (start == -1) {
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036aa:	d111      	bne.n	80036d0 <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e00b      	b.n	80036ca <schedule_20hz+0x76>
        if (p[i] == '$') {
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b24      	cmp	r3, #36	; 0x24
 80036bc:	d102      	bne.n	80036c4 <schedule_20hz+0x70>
          start = i;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	623b      	str	r3, [r7, #32]
          break;
 80036c2:	e005      	b.n	80036d0 <schedule_20hz+0x7c>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	3301      	adds	r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2bff      	cmp	r3, #255	; 0xff
 80036ce:	ddf0      	ble.n	80036b2 <schedule_20hz+0x5e>
        }
      }
    }

    if (start > -1) {
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	db2b      	blt.n	800372e <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	e025      	b.n	8003728 <schedule_20hz+0xd4>
        if (p[(start+i)%UART_BUF_SIZE] == 0) {
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4413      	add	r3, r2
 80036e2:	425a      	negs	r2, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	bf58      	it	pl
 80036ea:	4253      	negpl	r3, r2
 80036ec:	461a      	mov	r2, r3
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	4413      	add	r3, r2
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d103      	bne.n	8003700 <schedule_20hz+0xac>
          start = -1;
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036fc:	623b      	str	r3, [r7, #32]
          break;
 80036fe:	e016      	b.n	800372e <schedule_20hz+0xda>
        }

        if (p[(start+i)%UART_BUF_SIZE] == '\n') {
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	425a      	negs	r2, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	bf58      	it	pl
 800370e:	4253      	negpl	r3, r2
 8003710:	461a      	mov	r2, r3
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b0a      	cmp	r3, #10
 800371a:	d102      	bne.n	8003722 <schedule_20hz+0xce>
          end = i;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	61fb      	str	r3, [r7, #28]
          break;
 8003720:	e005      	b.n	800372e <schedule_20hz+0xda>
      for (int i = 0; i < UART_BUF_SIZE; i += 1) {
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	3301      	adds	r3, #1
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2bff      	cmp	r3, #255	; 0xff
 800372c:	ddd6      	ble.n	80036dc <schedule_20hz+0x88>
        }
      }
    }

    if (start > -1 && end > -1) {
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f2c0 809f 	blt.w	8003874 <schedule_20hz+0x220>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f2c0 809b 	blt.w	8003874 <schedule_20hz+0x220>
      memset(line, 0, 16);
 800373e:	2210      	movs	r2, #16
 8003740:	2100      	movs	r1, #0
 8003742:	485f      	ldr	r0, [pc, #380]	; (80038c0 <schedule_20hz+0x26c>)
 8003744:	f00b fe3c 	bl	800f3c0 <memset>

      if (start < end) {
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	429a      	cmp	r2, r3
 800374e:	da14      	bge.n	800377a <schedule_20hz+0x126>
        memcpy(line, &p[start], end - start);
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	18d1      	adds	r1, r2, r3
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	461a      	mov	r2, r3
 800375e:	4858      	ldr	r0, [pc, #352]	; (80038c0 <schedule_20hz+0x26c>)
 8003760:	f00b fe20 	bl	800f3a4 <memcpy>
        memset(&p[start], 0, end - start);
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	18d0      	adds	r0, r2, r3
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	461a      	mov	r2, r3
 8003772:	2100      	movs	r1, #0
 8003774:	f00b fe24 	bl	800f3c0 <memset>
 8003778:	e027      	b.n	80037ca <schedule_20hz+0x176>
      }
      else if (start > end) {
 800377a:	6a3a      	ldr	r2, [r7, #32]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	429a      	cmp	r2, r3
 8003780:	dd23      	ble.n	80037ca <schedule_20hz+0x176>
        memcpy(line, &p[start], UART_BUF_SIZE - start);
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	18d1      	adds	r1, r2, r3
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800378e:	461a      	mov	r2, r3
 8003790:	484b      	ldr	r0, [pc, #300]	; (80038c0 <schedule_20hz+0x26c>)
 8003792:	f00b fe07 	bl	800f3a4 <memcpy>
        memset(&p[start], 0, UART_BUF_SIZE - start);
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	18d0      	adds	r0, r2, r3
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80037a2:	461a      	mov	r2, r3
 80037a4:	2100      	movs	r1, #0
 80037a6:	f00b fe0b 	bl	800f3c0 <memset>
        memcpy(&line[UART_BUF_SIZE - start], p, end);
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80037b0:	4a43      	ldr	r2, [pc, #268]	; (80038c0 <schedule_20hz+0x26c>)
 80037b2:	4413      	add	r3, r2
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	69b9      	ldr	r1, [r7, #24]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f00b fdf3 	bl	800f3a4 <memcpy>
        memset(p, 0, end);
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	461a      	mov	r2, r3
 80037c2:	2100      	movs	r1, #0
 80037c4:	69b8      	ldr	r0, [r7, #24]
 80037c6:	f00b fdfb 	bl	800f3c0 <memset>
      }

      starts[t] = -1;
 80037ca:	4a38      	ldr	r2, [pc, #224]	; (80038ac <schedule_20hz+0x258>)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      int idx = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
      for (int idx = 0; idx < 16; idx += 1) {
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e008      	b.n	80037f2 <schedule_20hz+0x19e>
        if (line[idx] == ',') {
 80037e0:	4a37      	ldr	r2, [pc, #220]	; (80038c0 <schedule_20hz+0x26c>)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b2c      	cmp	r3, #44	; 0x2c
 80037ea:	d006      	beq.n	80037fa <schedule_20hz+0x1a6>
      for (int idx = 0; idx < 16; idx += 1) {
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b0f      	cmp	r3, #15
 80037f6:	ddf3      	ble.n	80037e0 <schedule_20hz+0x18c>
 80037f8:	e000      	b.n	80037fc <schedule_20hz+0x1a8>
          break;
 80037fa:	bf00      	nop
        }
      }
      line[idx] = 0;
 80037fc:	4a30      	ldr	r2, [pc, #192]	; (80038c0 <schedule_20hz+0x26c>)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4413      	add	r3, r2
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
      int dy = atoi(&line[1]);
 8003806:	482f      	ldr	r0, [pc, #188]	; (80038c4 <schedule_20hz+0x270>)
 8003808:	f00b fd9e 	bl	800f348 <atoi>
 800380c:	6078      	str	r0, [r7, #4]
      int dx = atoi(&line[idx+1]);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3301      	adds	r3, #1
 8003812:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <schedule_20hz+0x26c>)
 8003814:	4413      	add	r3, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f00b fd96 	bl	800f348 <atoi>
 800381c:	6038      	str	r0, [r7, #0]
      switch (t) {
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	2b03      	cmp	r3, #3
 8003822:	d828      	bhi.n	8003876 <schedule_20hz+0x222>
 8003824:	a201      	add	r2, pc, #4	; (adr r2, 800382c <schedule_20hz+0x1d8>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	0800383d 	.word	0x0800383d
 8003830:	0800384b 	.word	0x0800384b
 8003834:	08003859 	.word	0x08003859
 8003838:	08003867 	.word	0x08003867
      case 0: drift.lf = dx;drift.v1 = dy; break;
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <schedule_20hz+0x274>)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <schedule_20hz+0x274>)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6113      	str	r3, [r2, #16]
 8003848:	e015      	b.n	8003876 <schedule_20hz+0x222>
      case 1: drift.rf = dx;drift.v2 = dy; break;
 800384a:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <schedule_20hz+0x274>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6053      	str	r3, [r2, #4]
 8003850:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <schedule_20hz+0x274>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6153      	str	r3, [r2, #20]
 8003856:	e00e      	b.n	8003876 <schedule_20hz+0x222>
      case 2: drift.rb = dx;drift.v3 = dy; break;
 8003858:	4a1b      	ldr	r2, [pc, #108]	; (80038c8 <schedule_20hz+0x274>)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	60d3      	str	r3, [r2, #12]
 800385e:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <schedule_20hz+0x274>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6193      	str	r3, [r2, #24]
 8003864:	e007      	b.n	8003876 <schedule_20hz+0x222>
      case 3: drift.lb = dx;drift.v4 = dy; break;
 8003866:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <schedule_20hz+0x274>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6093      	str	r3, [r2, #8]
 800386c:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <schedule_20hz+0x274>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	61d3      	str	r3, [r2, #28]
 8003872:	e000      	b.n	8003876 <schedule_20hz+0x222>
      }
    }
 8003874:	bf00      	nop
  for (int t = 0; t < 4; t += 1) {
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	3301      	adds	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	2b03      	cmp	r3, #3
 8003880:	f77f aeee 	ble.w	8003660 <schedule_20hz+0xc>
  }

  static char run_10hz = 1;
  if (run_10hz) schedule_10hz();
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <schedule_20hz+0x278>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <schedule_20hz+0x23c>
 800388c:	f000 f820 	bl	80038d0 <schedule_10hz>
  run_10hz = !run_10hz;
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <schedule_20hz+0x278>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <schedule_20hz+0x278>)
 80038a2:	701a      	strb	r2, [r3, #0]
}
 80038a4:	bf00      	nop
 80038a6:	3728      	adds	r7, #40	; 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	24000018 	.word	0x24000018
 80038b0:	240010c0 	.word	0x240010c0
 80038b4:	240011c0 	.word	0x240011c0
 80038b8:	240012c0 	.word	0x240012c0
 80038bc:	240013c0 	.word	0x240013c0
 80038c0:	240017f8 	.word	0x240017f8
 80038c4:	240017f9 	.word	0x240017f9
 80038c8:	2400081c 	.word	0x2400081c
 80038cc:	24000028 	.word	0x24000028

080038d0 <schedule_10hz>:

void schedule_10hz(void) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af04      	add	r7, sp, #16
      (int)g_sig1, (int)g_sig2, (int)g_sig3, (int)g_sig4);
  console(monitor);
#endif // ESC

#if MONITOR == 4
  memset(monitor, 0, 120);
 80038d6:	2278      	movs	r2, #120	; 0x78
 80038d8:	2100      	movs	r1, #0
 80038da:	4819      	ldr	r0, [pc, #100]	; (8003940 <schedule_10hz+0x70>)
 80038dc:	f00b fd70 	bl	800f3c0 <memset>
  sprintf(monitor, "$%d,%d,0,%d,%d,%d\n",
 80038e0:	4b18      	ldr	r3, [pc, #96]	; (8003944 <schedule_10hz+0x74>)
 80038e2:	edd3 7a00 	vldr	s15, [r3]
 80038e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80038ea:	4b17      	ldr	r3, [pc, #92]	; (8003948 <schedule_10hz+0x78>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <schedule_10hz+0x7c>)
 80038f6:	edd3 7a00 	vldr	s15, [r3]
 80038fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038fe:	ee17 2a90 	vmov	r2, s15
 8003902:	4b13      	ldr	r3, [pc, #76]	; (8003950 <schedule_10hz+0x80>)
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800390c:	ee17 1a90 	vmov	r1, s15
 8003910:	4b10      	ldr	r3, [pc, #64]	; (8003954 <schedule_10hz+0x84>)
 8003912:	edd3 7a00 	vldr	s15, [r3]
 8003916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800391a:	ee17 3a90 	vmov	r3, s15
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	9101      	str	r1, [sp, #4]
 8003922:	9200      	str	r2, [sp, #0]
 8003924:	ee16 3a90 	vmov	r3, s13
 8003928:	ee17 2a10 	vmov	r2, s14
 800392c:	490a      	ldr	r1, [pc, #40]	; (8003958 <schedule_10hz+0x88>)
 800392e:	4804      	ldr	r0, [pc, #16]	; (8003940 <schedule_10hz+0x70>)
 8003930:	f00b fd4e 	bl	800f3d0 <siprintf>
      (int)g_throttle, (int)g_yaw, (int)g_pitch, (int)g_roll, (int)g_stick1);
  console(monitor);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <schedule_10hz+0x70>)
 8003936:	f000 feb9 	bl	80046ac <console>
  sprintf(monitor, "$%d,%d,%d,%d,%d\n",
      drift.lf, drift.rf, drift.lb, drift.rb,
      drift.v1 + drift.v2 + drift.v3 + drift.v4);
  console(monitor);
#endif // Drift
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	2400083c 	.word	0x2400083c
 8003944:	240007f0 	.word	0x240007f0
 8003948:	240007fc 	.word	0x240007fc
 800394c:	240007f4 	.word	0x240007f4
 8003950:	240007f8 	.word	0x240007f8
 8003954:	24000800 	.word	0x24000800
 8003958:	080115e8 	.word	0x080115e8
 800395c:	00000000 	.word	0x00000000

08003960 <fly>:

void fly() {
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af00      	add	r7, sp, #0
  float angle_x = g_mpu6050.angle_x;
 8003966:	4bc6      	ldr	r3, [pc, #792]	; (8003c80 <fly+0x320>)
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	623b      	str	r3, [r7, #32]
  float angle_y = g_mpu6050.angle_y;
 800396c:	4bc4      	ldr	r3, [pc, #784]	; (8003c80 <fly+0x320>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	61fb      	str	r3, [r7, #28]
  float angle_z = g_mpu6050.angle_z;
 8003972:	4bc3      	ldr	r3, [pc, #780]	; (8003c80 <fly+0x320>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	61bb      	str	r3, [r7, #24]
  float gyro_x = g_mpu6050.gyro_x;
 8003978:	4bc1      	ldr	r3, [pc, #772]	; (8003c80 <fly+0x320>)
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	617b      	str	r3, [r7, #20]
  float gyro_y = g_mpu6050.gyro_y;
 800397e:	4bc0      	ldr	r3, [pc, #768]	; (8003c80 <fly+0x320>)
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	613b      	str	r3, [r7, #16]
  float gyro_z = g_mpu6050.gyro_z;
 8003984:	4bbe      	ldr	r3, [pc, #760]	; (8003c80 <fly+0x320>)
 8003986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003988:	60fb      	str	r3, [r7, #12]

  // Add remote control bias
  float angle_error_y = angle_y - 0.125*g_pitch; // Max 25 degree
 800398a:	edd7 7a07 	vldr	s15, [r7, #28]
 800398e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003992:	4bbc      	ldr	r3, [pc, #752]	; (8003c84 <fly+0x324>)
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800399c:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 80039a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80039a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039ac:	edc7 7a02 	vstr	s15, [r7, #8]
  float angle_error_x = angle_x - 0.125*g_roll; // Max 25 degree
 80039b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80039b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039b8:	4bb3      	ldr	r3, [pc, #716]	; (8003c88 <fly+0x328>)
 80039ba:	edd3 7a00 	vldr	s15, [r3]
 80039be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039c2:	eeb4 5b00 	vmov.f64	d5, #64	; 0x3e000000  0.125
 80039c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80039ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039d2:	edc7 7a01 	vstr	s15, [r7, #4]
  float angle_error_z = angle_z;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (g_yaw < -5 || g_yaw > 5) {
 80039da:	4bac      	ldr	r3, [pc, #688]	; (8003c8c <fly+0x32c>)
 80039dc:	edd3 7a00 	vldr	s15, [r3]
 80039e0:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80039e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ec:	d409      	bmi.n	8003a02 <fly+0xa2>
 80039ee:	4ba7      	ldr	r3, [pc, #668]	; (8003c8c <fly+0x32c>)
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80039f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a00:	dd10      	ble.n	8003a24 <fly+0xc4>
    angle_error_z = g_yaw > 0 ? -0.2*g_yaw : -0.2*g_yaw;
 8003a02:	4ba2      	ldr	r3, [pc, #648]	; (8003c8c <fly+0x32c>)
 8003a04:	edd3 7a00 	vldr	s15, [r3]
 8003a08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a0c:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8003c60 <fly+0x300>
 8003a10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    g_mpu6050.angle_z = 0;
 8003a1c:	4b98      	ldr	r3, [pc, #608]	; (8003c80 <fly+0x320>)
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
  // Keep alive for the fly
//  if (g_stick1 == 0) {
//    fly_mode = init;
//  }

  switch (fly_mode) {
 8003a24:	4b9a      	ldr	r3, [pc, #616]	; (8003c90 <fly+0x330>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	f200 861d 	bhi.w	8004668 <fly+0xd08>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <fly+0xd4>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a4d 	.word	0x08003a4d
 8003a38:	08003b25 	.word	0x08003b25
 8003a3c:	08004667 	.word	0x08004667
 8003a40:	08003b6f 	.word	0x08003b6f
 8003a44:	08004667 	.word	0x08004667
 8003a48:	0800449b 	.word	0x0800449b
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 8003a4c:	4b91      	ldr	r3, [pc, #580]	; (8003c94 <fly+0x334>)
 8003a4e:	4a92      	ldr	r2, [pc, #584]	; (8003c98 <fly+0x338>)
 8003a50:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 8003a52:	4b92      	ldr	r3, [pc, #584]	; (8003c9c <fly+0x33c>)
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 8003a5a:	4b91      	ldr	r3, [pc, #580]	; (8003ca0 <fly+0x340>)
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 8003a62:	4b90      	ldr	r3, [pc, #576]	; (8003ca4 <fly+0x344>)
 8003a64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a68:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 8003a6a:	4b8f      	ldr	r3, [pc, #572]	; (8003ca8 <fly+0x348>)
 8003a6c:	4a8a      	ldr	r2, [pc, #552]	; (8003c98 <fly+0x338>)
 8003a6e:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 8003a70:	4b8e      	ldr	r3, [pc, #568]	; (8003cac <fly+0x34c>)
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 8003a78:	4b8d      	ldr	r3, [pc, #564]	; (8003cb0 <fly+0x350>)
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 8003a80:	4b8c      	ldr	r3, [pc, #560]	; (8003cb4 <fly+0x354>)
 8003a82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a86:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 8003a88:	4b8b      	ldr	r3, [pc, #556]	; (8003cb8 <fly+0x358>)
 8003a8a:	4a83      	ldr	r2, [pc, #524]	; (8003c98 <fly+0x338>)
 8003a8c:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 8003a8e:	4b8b      	ldr	r3, [pc, #556]	; (8003cbc <fly+0x35c>)
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 8003a96:	4b8a      	ldr	r3, [pc, #552]	; (8003cc0 <fly+0x360>)
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 8003a9e:	4b89      	ldr	r3, [pc, #548]	; (8003cc4 <fly+0x364>)
 8003aa0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003aa4:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003aa6:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003aaa:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8003aae:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8003ab2:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8003ab6:	f000 fe0d 	bl	80046d4 <set_speed>

      // Move sticks to make it ready to take off
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8003aba:	4b83      	ldr	r3, [pc, #524]	; (8003cc8 <fly+0x368>)
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003ccc <fly+0x36c>
 8003ac4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003acc:	d901      	bls.n	8003ad2 <fly+0x172>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
        fly_mode = ready;
      }

      break;
 8003ace:	f000 bdcb 	b.w	8004668 <fly+0xd08>
      if (g_throttle <= MIN_THROTTLE && g_yaw <= MIN_YAW
 8003ad2:	4b6e      	ldr	r3, [pc, #440]	; (8003c8c <fly+0x32c>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003ccc <fly+0x36c>
 8003adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	d901      	bls.n	8003aea <fly+0x18a>
      break;
 8003ae6:	f000 bdbf 	b.w	8004668 <fly+0xd08>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8003aea:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <fly+0x324>)
 8003aec:	edd3 7a00 	vldr	s15, [r3]
 8003af0:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003ccc <fly+0x36c>
 8003af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afc:	d901      	bls.n	8003b02 <fly+0x1a2>
      break;
 8003afe:	f000 bdb3 	b.w	8004668 <fly+0xd08>
          && g_pitch <= MIN_PITCH && g_roll >= MAX_ROLL) {
 8003b02:	4b61      	ldr	r3, [pc, #388]	; (8003c88 <fly+0x328>)
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003ccc <fly+0x36c>
 8003b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b14:	da01      	bge.n	8003b1a <fly+0x1ba>
      break;
 8003b16:	f000 bda7 	b.w	8004668 <fly+0xd08>
        fly_mode = ready;
 8003b1a:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <fly+0x330>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]
      break;
 8003b20:	f000 bda2 	b.w	8004668 <fly+0xd08>
    case ready:
      // Reset accumulated integral
      g_I_pitch_accumulated = 0;
 8003b24:	4b6a      	ldr	r3, [pc, #424]	; (8003cd0 <fly+0x370>)
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003b2c:	4b69      	ldr	r3, [pc, #420]	; (8003cd4 <fly+0x374>)
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8003b34:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <fly+0x378>)
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003b3c:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8003b40:	f640 12f6 	movw	r2, #2550	; 0x9f6
 8003b44:	f640 11f6 	movw	r1, #2550	; 0x9f6
 8003b48:	f640 10f6 	movw	r0, #2550	; 0x9f6
 8003b4c:	f000 fdc2 	bl	80046d4 <set_speed>

      // Switch to fly mode
      if (g_throttle > 0) {
 8003b50:	4b5d      	ldr	r3, [pc, #372]	; (8003cc8 <fly+0x368>)
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	dc01      	bgt.n	8003b64 <fly+0x204>
        fly_mode = moving;
      }

      break;
 8003b60:	f000 bd82 	b.w	8004668 <fly+0xd08>
        fly_mode = moving;
 8003b64:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <fly+0x330>)
 8003b66:	2203      	movs	r2, #3
 8003b68:	701a      	strb	r2, [r3, #0]
      break;
 8003b6a:	f000 bd7d 	b.w	8004668 <fly+0xd08>
    case holding:

      break;
    case moving:
      g_P_pitch = LIMIT(angle_error_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8003b6e:	4b49      	ldr	r3, [pc, #292]	; (8003c94 <fly+0x334>)
 8003b70:	ed93 7a00 	vldr	s14, [r3]
 8003b74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003cdc <fly+0x37c>
 8003b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b88:	d502      	bpl.n	8003b90 <fly+0x230>
 8003b8a:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003cdc <fly+0x37c>
 8003b8e:	e017      	b.n	8003bc0 <fly+0x260>
 8003b90:	4b40      	ldr	r3, [pc, #256]	; (8003c94 <fly+0x334>)
 8003b92:	ed93 7a00 	vldr	s14, [r3]
 8003b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003ce0 <fly+0x380>
 8003ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003baa:	dd02      	ble.n	8003bb2 <fly+0x252>
 8003bac:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8003ce0 <fly+0x380>
 8003bb0:	e006      	b.n	8003bc0 <fly+0x260>
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <fly+0x334>)
 8003bb4:	ed93 7a00 	vldr	s14, [r3]
 8003bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc0:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <fly+0x384>)
 8003bc2:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_error_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 8003bc6:	4b42      	ldr	r3, [pc, #264]	; (8003cd0 <fly+0x370>)
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003bd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bd8:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003c68 <fly+0x308>
 8003bdc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003be0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003be4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003be8:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <fly+0x370>)
 8003bea:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated = LIMIT(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 8003bee:	4b38      	ldr	r3, [pc, #224]	; (8003cd0 <fly+0x370>)
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <fly+0x33c>)
 8003bfa:	edd3 7a00 	vldr	s15, [r3]
 8003bfe:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003c02:	ed9f 4b1b 	vldr	d4, [pc, #108]	; 8003c70 <fly+0x310>
 8003c06:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003c0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c12:	d507      	bpl.n	8003c24 <fly+0x2c4>
 8003c14:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <fly+0x33c>)
 8003c16:	ed93 7a00 	vldr	s14, [r3]
 8003c1a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003ce8 <fly+0x388>
 8003c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c22:	e068      	b.n	8003cf6 <fly+0x396>
 8003c24:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <fly+0x370>)
 8003c26:	edd3 7a00 	vldr	s15, [r3]
 8003c2a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <fly+0x33c>)
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003c38:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8003c78 <fly+0x318>
 8003c3c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003c40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c48:	dd52      	ble.n	8003cf0 <fly+0x390>
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <fly+0x33c>)
 8003c4c:	ed93 7a00 	vldr	s14, [r3]
 8003c50:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003cec <fly+0x38c>
 8003c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c58:	e04d      	b.n	8003cf6 <fly+0x396>
 8003c5a:	bf00      	nop
 8003c5c:	f3af 8000 	nop.w
 8003c60:	9999999a 	.word	0x9999999a
 8003c64:	bfc99999 	.word	0xbfc99999
	...
 8003c74:	c0709000 	.word	0xc0709000
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	40709000 	.word	0x40709000
 8003c80:	240014c0 	.word	0x240014c0
 8003c84:	240007f4 	.word	0x240007f4
 8003c88:	240007f8 	.word	0x240007f8
 8003c8c:	240007fc 	.word	0x240007fc
 8003c90:	240017f0 	.word	0x240017f0
 8003c94:	24000000 	.word	0x24000000
 8003c98:	40400000 	.word	0x40400000
 8003c9c:	24000804 	.word	0x24000804
 8003ca0:	24000808 	.word	0x24000808
 8003ca4:	24000004 	.word	0x24000004
 8003ca8:	24000008 	.word	0x24000008
 8003cac:	2400080c 	.word	0x2400080c
 8003cb0:	24000810 	.word	0x24000810
 8003cb4:	2400000c 	.word	0x2400000c
 8003cb8:	24000010 	.word	0x24000010
 8003cbc:	24000814 	.word	0x24000814
 8003cc0:	24000818 	.word	0x24000818
 8003cc4:	24000014 	.word	0x24000014
 8003cc8:	240007f0 	.word	0x240007f0
 8003ccc:	c2f80000 	.word	0xc2f80000
 8003cd0:	24000740 	.word	0x24000740
 8003cd4:	24000750 	.word	0x24000750
 8003cd8:	24000760 	.word	0x24000760
 8003cdc:	c446c000 	.word	0xc446c000
 8003ce0:	4446c000 	.word	0x4446c000
 8003ce4:	24000738 	.word	0x24000738
 8003ce8:	c3848000 	.word	0xc3848000
 8003cec:	43848000 	.word	0x43848000
 8003cf0:	4bcd      	ldr	r3, [pc, #820]	; (8004028 <fly+0x6c8>)
 8003cf2:	edd3 7a00 	vldr	s15, [r3]
 8003cf6:	4bcc      	ldr	r3, [pc, #816]	; (8004028 <fly+0x6c8>)
 8003cf8:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 8003cfc:	4bca      	ldr	r3, [pc, #808]	; (8004028 <fly+0x6c8>)
 8003cfe:	ed93 7a00 	vldr	s14, [r3]
 8003d02:	4bca      	ldr	r3, [pc, #808]	; (800402c <fly+0x6cc>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0c:	4bc8      	ldr	r3, [pc, #800]	; (8004030 <fly+0x6d0>)
 8003d0e:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = LIMIT(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 8003d12:	4bc8      	ldr	r3, [pc, #800]	; (8004034 <fly+0x6d4>)
 8003d14:	ed93 7a00 	vldr	s14, [r3]
 8003d18:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d20:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8004038 <fly+0x6d8>
 8003d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	d502      	bpl.n	8003d34 <fly+0x3d4>
 8003d2e:	eddf 7ac2 	vldr	s15, [pc, #776]	; 8004038 <fly+0x6d8>
 8003d32:	e017      	b.n	8003d64 <fly+0x404>
 8003d34:	4bbf      	ldr	r3, [pc, #764]	; (8004034 <fly+0x6d4>)
 8003d36:	ed93 7a00 	vldr	s14, [r3]
 8003d3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800403c <fly+0x6dc>
 8003d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4e:	dd02      	ble.n	8003d56 <fly+0x3f6>
 8003d50:	eddf 7aba 	vldr	s15, [pc, #744]	; 800403c <fly+0x6dc>
 8003d54:	e006      	b.n	8003d64 <fly+0x404>
 8003d56:	4bb7      	ldr	r3, [pc, #732]	; (8004034 <fly+0x6d4>)
 8003d58:	ed93 7a00 	vldr	s14, [r3]
 8003d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d64:	4bb6      	ldr	r3, [pc, #728]	; (8004040 <fly+0x6e0>)
 8003d66:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = LIMIT(angle_error_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 8003d6a:	4bb6      	ldr	r3, [pc, #728]	; (8004044 <fly+0x6e4>)
 8003d6c:	ed93 7a00 	vldr	s14, [r3]
 8003d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8004038 <fly+0x6d8>
 8003d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d84:	d502      	bpl.n	8003d8c <fly+0x42c>
 8003d86:	eddf 7aac 	vldr	s15, [pc, #688]	; 8004038 <fly+0x6d8>
 8003d8a:	e017      	b.n	8003dbc <fly+0x45c>
 8003d8c:	4bad      	ldr	r3, [pc, #692]	; (8004044 <fly+0x6e4>)
 8003d8e:	ed93 7a00 	vldr	s14, [r3]
 8003d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800403c <fly+0x6dc>
 8003d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da6:	dd02      	ble.n	8003dae <fly+0x44e>
 8003da8:	eddf 7aa4 	vldr	s15, [pc, #656]	; 800403c <fly+0x6dc>
 8003dac:	e006      	b.n	8003dbc <fly+0x45c>
 8003dae:	4ba5      	ldr	r3, [pc, #660]	; (8004044 <fly+0x6e4>)
 8003db0:	ed93 7a00 	vldr	s14, [r3]
 8003db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	4ba2      	ldr	r3, [pc, #648]	; (8004048 <fly+0x6e8>)
 8003dbe:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_error_x*I_ROLL_PERIOD;
 8003dc2:	4ba2      	ldr	r3, [pc, #648]	; (800404c <fly+0x6ec>)
 8003dc4:	edd3 7a00 	vldr	s15, [r3]
 8003dc8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dd4:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8004000 <fly+0x6a0>
 8003dd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003ddc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003de0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003de4:	4b99      	ldr	r3, [pc, #612]	; (800404c <fly+0x6ec>)
 8003de6:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated = LIMIT(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 8003dea:	4b98      	ldr	r3, [pc, #608]	; (800404c <fly+0x6ec>)
 8003dec:	edd3 7a00 	vldr	s15, [r3]
 8003df0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003df4:	4b96      	ldr	r3, [pc, #600]	; (8004050 <fly+0x6f0>)
 8003df6:	edd3 7a00 	vldr	s15, [r3]
 8003dfa:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003dfe:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8004008 <fly+0x6a8>
 8003e02:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003e06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0e:	d507      	bpl.n	8003e20 <fly+0x4c0>
 8003e10:	4b8f      	ldr	r3, [pc, #572]	; (8004050 <fly+0x6f0>)
 8003e12:	ed93 7a00 	vldr	s14, [r3]
 8003e16:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8004054 <fly+0x6f4>
 8003e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1e:	e01d      	b.n	8003e5c <fly+0x4fc>
 8003e20:	4b8a      	ldr	r3, [pc, #552]	; (800404c <fly+0x6ec>)
 8003e22:	edd3 7a00 	vldr	s15, [r3]
 8003e26:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e2a:	4b89      	ldr	r3, [pc, #548]	; (8004050 <fly+0x6f0>)
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003e34:	ed9f 4b76 	vldr	d4, [pc, #472]	; 8004010 <fly+0x6b0>
 8003e38:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003e3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e44:	dd07      	ble.n	8003e56 <fly+0x4f6>
 8003e46:	4b82      	ldr	r3, [pc, #520]	; (8004050 <fly+0x6f0>)
 8003e48:	ed93 7a00 	vldr	s14, [r3]
 8003e4c:	eddf 6a82 	vldr	s13, [pc, #520]	; 8004058 <fly+0x6f8>
 8003e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e54:	e002      	b.n	8003e5c <fly+0x4fc>
 8003e56:	4b7d      	ldr	r3, [pc, #500]	; (800404c <fly+0x6ec>)
 8003e58:	edd3 7a00 	vldr	s15, [r3]
 8003e5c:	4b7b      	ldr	r3, [pc, #492]	; (800404c <fly+0x6ec>)
 8003e5e:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 8003e62:	4b7a      	ldr	r3, [pc, #488]	; (800404c <fly+0x6ec>)
 8003e64:	ed93 7a00 	vldr	s14, [r3]
 8003e68:	4b79      	ldr	r3, [pc, #484]	; (8004050 <fly+0x6f0>)
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e72:	4b7a      	ldr	r3, [pc, #488]	; (800405c <fly+0x6fc>)
 8003e74:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = LIMIT(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 8003e78:	4b79      	ldr	r3, [pc, #484]	; (8004060 <fly+0x700>)
 8003e7a:	ed93 7a00 	vldr	s14, [r3]
 8003e7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e86:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004038 <fly+0x6d8>
 8003e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e92:	d502      	bpl.n	8003e9a <fly+0x53a>
 8003e94:	eddf 7a68 	vldr	s15, [pc, #416]	; 8004038 <fly+0x6d8>
 8003e98:	e017      	b.n	8003eca <fly+0x56a>
 8003e9a:	4b71      	ldr	r3, [pc, #452]	; (8004060 <fly+0x700>)
 8003e9c:	ed93 7a00 	vldr	s14, [r3]
 8003ea0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800403c <fly+0x6dc>
 8003eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	dd02      	ble.n	8003ebc <fly+0x55c>
 8003eb6:	eddf 7a61 	vldr	s15, [pc, #388]	; 800403c <fly+0x6dc>
 8003eba:	e006      	b.n	8003eca <fly+0x56a>
 8003ebc:	4b68      	ldr	r3, [pc, #416]	; (8004060 <fly+0x700>)
 8003ebe:	ed93 7a00 	vldr	s14, [r3]
 8003ec2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	4b66      	ldr	r3, [pc, #408]	; (8004064 <fly+0x704>)
 8003ecc:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = LIMIT(angle_error_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 8003ed0:	4b65      	ldr	r3, [pc, #404]	; (8004068 <fly+0x708>)
 8003ed2:	ed93 7a00 	vldr	s14, [r3]
 8003ed6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800406c <fly+0x70c>
 8003ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eea:	d502      	bpl.n	8003ef2 <fly+0x592>
 8003eec:	eddf 7a5f 	vldr	s15, [pc, #380]	; 800406c <fly+0x70c>
 8003ef0:	e017      	b.n	8003f22 <fly+0x5c2>
 8003ef2:	4b5d      	ldr	r3, [pc, #372]	; (8004068 <fly+0x708>)
 8003ef4:	ed93 7a00 	vldr	s14, [r3]
 8003ef8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f00:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8004070 <fly+0x710>
 8003f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0c:	dd02      	ble.n	8003f14 <fly+0x5b4>
 8003f0e:	eddf 7a58 	vldr	s15, [pc, #352]	; 8004070 <fly+0x710>
 8003f12:	e006      	b.n	8003f22 <fly+0x5c2>
 8003f14:	4b54      	ldr	r3, [pc, #336]	; (8004068 <fly+0x708>)
 8003f16:	ed93 7a00 	vldr	s14, [r3]
 8003f1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	4b54      	ldr	r3, [pc, #336]	; (8004074 <fly+0x714>)
 8003f24:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_error_z*I_YAW_PERIOD;
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <fly+0x718>)
 8003f2a:	edd3 7a00 	vldr	s15, [r3]
 8003f2e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003f32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f3a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8004000 <fly+0x6a0>
 8003f3e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003f42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f4a:	4b4b      	ldr	r3, [pc, #300]	; (8004078 <fly+0x718>)
 8003f4c:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated = LIMIT(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 8003f50:	4b49      	ldr	r3, [pc, #292]	; (8004078 <fly+0x718>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003f5a:	4b48      	ldr	r3, [pc, #288]	; (800407c <fly+0x71c>)
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003f64:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8004018 <fly+0x6b8>
 8003f68:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003f6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f74:	d507      	bpl.n	8003f86 <fly+0x626>
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <fly+0x71c>)
 8003f78:	ed93 7a00 	vldr	s14, [r3]
 8003f7c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8004080 <fly+0x720>
 8003f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f84:	e01d      	b.n	8003fc2 <fly+0x662>
 8003f86:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <fly+0x718>)
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003f90:	4b3a      	ldr	r3, [pc, #232]	; (800407c <fly+0x71c>)
 8003f92:	edd3 7a00 	vldr	s15, [r3]
 8003f96:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003f9a:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8004020 <fly+0x6c0>
 8003f9e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003fa2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003faa:	dd07      	ble.n	8003fbc <fly+0x65c>
 8003fac:	4b33      	ldr	r3, [pc, #204]	; (800407c <fly+0x71c>)
 8003fae:	ed93 7a00 	vldr	s14, [r3]
 8003fb2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8004084 <fly+0x724>
 8003fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fba:	e002      	b.n	8003fc2 <fly+0x662>
 8003fbc:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <fly+0x718>)
 8003fbe:	edd3 7a00 	vldr	s15, [r3]
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <fly+0x718>)
 8003fc4:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <fly+0x718>)
 8003fca:	ed93 7a00 	vldr	s14, [r3]
 8003fce:	4b2b      	ldr	r3, [pc, #172]	; (800407c <fly+0x71c>)
 8003fd0:	edd3 7a00 	vldr	s15, [r3]
 8003fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <fly+0x728>)
 8003fda:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = LIMIT(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <fly+0x72c>)
 8003fe0:	ed93 7a00 	vldr	s14, [r3]
 8003fe4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fec:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800406c <fly+0x70c>
 8003ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff8:	d54a      	bpl.n	8004090 <fly+0x730>
 8003ffa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800406c <fly+0x70c>
 8003ffe:	e05f      	b.n	80040c0 <fly+0x760>
	...
 800400c:	c0609000 	.word	0xc0609000
 8004010:	00000000 	.word	0x00000000
 8004014:	40609000 	.word	0x40609000
 8004018:	00000000 	.word	0x00000000
 800401c:	c0709000 	.word	0xc0709000
 8004020:	00000000 	.word	0x00000000
 8004024:	40709000 	.word	0x40709000
 8004028:	24000740 	.word	0x24000740
 800402c:	24000804 	.word	0x24000804
 8004030:	2400073c 	.word	0x2400073c
 8004034:	24000004 	.word	0x24000004
 8004038:	c446c000 	.word	0xc446c000
 800403c:	4446c000 	.word	0x4446c000
 8004040:	24000744 	.word	0x24000744
 8004044:	24000008 	.word	0x24000008
 8004048:	24000748 	.word	0x24000748
 800404c:	24000750 	.word	0x24000750
 8004050:	2400080c 	.word	0x2400080c
 8004054:	c3048000 	.word	0xc3048000
 8004058:	43048000 	.word	0x43048000
 800405c:	2400074c 	.word	0x2400074c
 8004060:	2400000c 	.word	0x2400000c
 8004064:	24000754 	.word	0x24000754
 8004068:	24000010 	.word	0x24000010
 800406c:	c4048000 	.word	0xc4048000
 8004070:	44048000 	.word	0x44048000
 8004074:	24000758 	.word	0x24000758
 8004078:	24000760 	.word	0x24000760
 800407c:	24000814 	.word	0x24000814
 8004080:	c3848000 	.word	0xc3848000
 8004084:	43848000 	.word	0x43848000
 8004088:	2400075c 	.word	0x2400075c
 800408c:	24000014 	.word	0x24000014
 8004090:	4bc1      	ldr	r3, [pc, #772]	; (8004398 <fly+0xa38>)
 8004092:	ed93 7a00 	vldr	s14, [r3]
 8004096:	edd7 7a03 	vldr	s15, [r7, #12]
 800409a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800439c <fly+0xa3c>
 80040a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040aa:	dd02      	ble.n	80040b2 <fly+0x752>
 80040ac:	eddf 7abb 	vldr	s15, [pc, #748]	; 800439c <fly+0xa3c>
 80040b0:	e006      	b.n	80040c0 <fly+0x760>
 80040b2:	4bb9      	ldr	r3, [pc, #740]	; (8004398 <fly+0xa38>)
 80040b4:	ed93 7a00 	vldr	s14, [r3]
 80040b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c0:	4bb7      	ldr	r3, [pc, #732]	; (80043a0 <fly+0xa40>)
 80040c2:	edc3 7a00 	vstr	s15, [r3]

      float background = MIN_SPEED + 8*(11.18f*sqrt(g_throttle > 0 ? g_throttle : 0));
 80040c6:	4bb7      	ldr	r3, [pc, #732]	; (80043a4 <fly+0xa44>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d4:	dd05      	ble.n	80040e2 <fly+0x782>
 80040d6:	4bb3      	ldr	r3, [pc, #716]	; (80043a4 <fly+0xa44>)
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040e0:	e001      	b.n	80040e6 <fly+0x786>
 80040e2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8004380 <fly+0xa20>
 80040e6:	eeb0 0b47 	vmov.f64	d0, d7
 80040ea:	f00c fad5 	bl	8010698 <sqrt>
 80040ee:	eeb0 7b40 	vmov.f64	d7, d0
 80040f2:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8004388 <fly+0xa28>
 80040f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040fa:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80040fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004102:	ed9f 6ba3 	vldr	d6, [pc, #652]	; 8004390 <fly+0xa30>
 8004106:	ee37 7b06 	vadd.f64	d7, d7, d6
 800410a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800410e:	edc7 7a00 	vstr	s15, [r7]

      g_sig1 = background + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8004112:	4ba5      	ldr	r3, [pc, #660]	; (80043a8 <fly+0xa48>)
 8004114:	ed93 7a00 	vldr	s14, [r3]
 8004118:	4ba4      	ldr	r3, [pc, #656]	; (80043ac <fly+0xa4c>)
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004122:	4ba3      	ldr	r3, [pc, #652]	; (80043b0 <fly+0xa50>)
 8004124:	edd3 7a00 	vldr	s15, [r3]
 8004128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800412c:	edd7 7a00 	vldr	s15, [r7]
 8004130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004134:	4b9f      	ldr	r3, [pc, #636]	; (80043b4 <fly+0xa54>)
 8004136:	edd3 6a00 	vldr	s13, [r3]
 800413a:	4b9f      	ldr	r3, [pc, #636]	; (80043b8 <fly+0xa58>)
 800413c:	edd3 7a00 	vldr	s15, [r3]
 8004140:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004144:	4b9d      	ldr	r3, [pc, #628]	; (80043bc <fly+0xa5c>)
 8004146:	edd3 7a00 	vldr	s15, [r3]
 800414a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004152:	4b9b      	ldr	r3, [pc, #620]	; (80043c0 <fly+0xa60>)
 8004154:	edd3 6a00 	vldr	s13, [r3]
 8004158:	4b9a      	ldr	r3, [pc, #616]	; (80043c4 <fly+0xa64>)
 800415a:	edd3 7a00 	vldr	s15, [r3]
 800415e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004162:	4b8f      	ldr	r3, [pc, #572]	; (80043a0 <fly+0xa40>)
 8004164:	edd3 7a00 	vldr	s15, [r3]
 8004168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004170:	4b95      	ldr	r3, [pc, #596]	; (80043c8 <fly+0xa68>)
 8004172:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = background + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8004176:	4b8c      	ldr	r3, [pc, #560]	; (80043a8 <fly+0xa48>)
 8004178:	ed93 7a00 	vldr	s14, [r3]
 800417c:	4b8b      	ldr	r3, [pc, #556]	; (80043ac <fly+0xa4c>)
 800417e:	edd3 7a00 	vldr	s15, [r3]
 8004182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004186:	4b8a      	ldr	r3, [pc, #552]	; (80043b0 <fly+0xa50>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004190:	edd7 7a00 	vldr	s15, [r7]
 8004194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004198:	4b86      	ldr	r3, [pc, #536]	; (80043b4 <fly+0xa54>)
 800419a:	edd3 6a00 	vldr	s13, [r3]
 800419e:	4b86      	ldr	r3, [pc, #536]	; (80043b8 <fly+0xa58>)
 80041a0:	edd3 7a00 	vldr	s15, [r3]
 80041a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80041a8:	4b84      	ldr	r3, [pc, #528]	; (80043bc <fly+0xa5c>)
 80041aa:	edd3 7a00 	vldr	s15, [r3]
 80041ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041b6:	4b82      	ldr	r3, [pc, #520]	; (80043c0 <fly+0xa60>)
 80041b8:	edd3 6a00 	vldr	s13, [r3]
 80041bc:	4b81      	ldr	r3, [pc, #516]	; (80043c4 <fly+0xa64>)
 80041be:	edd3 7a00 	vldr	s15, [r3]
 80041c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80041c6:	4b76      	ldr	r3, [pc, #472]	; (80043a0 <fly+0xa40>)
 80041c8:	edd3 7a00 	vldr	s15, [r3]
 80041cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d4:	4b7d      	ldr	r3, [pc, #500]	; (80043cc <fly+0xa6c>)
 80041d6:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = background - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 80041da:	4b73      	ldr	r3, [pc, #460]	; (80043a8 <fly+0xa48>)
 80041dc:	ed93 7a00 	vldr	s14, [r3]
 80041e0:	4b72      	ldr	r3, [pc, #456]	; (80043ac <fly+0xa4c>)
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041ea:	4b71      	ldr	r3, [pc, #452]	; (80043b0 <fly+0xa50>)
 80041ec:	edd3 7a00 	vldr	s15, [r3]
 80041f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f4:	ed97 7a00 	vldr	s14, [r7]
 80041f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041fc:	4b6d      	ldr	r3, [pc, #436]	; (80043b4 <fly+0xa54>)
 80041fe:	edd3 6a00 	vldr	s13, [r3]
 8004202:	4b6d      	ldr	r3, [pc, #436]	; (80043b8 <fly+0xa58>)
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800420c:	4b6b      	ldr	r3, [pc, #428]	; (80043bc <fly+0xa5c>)
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800421a:	4b69      	ldr	r3, [pc, #420]	; (80043c0 <fly+0xa60>)
 800421c:	edd3 6a00 	vldr	s13, [r3]
 8004220:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <fly+0xa64>)
 8004222:	edd3 7a00 	vldr	s15, [r3]
 8004226:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800422a:	4b5d      	ldr	r3, [pc, #372]	; (80043a0 <fly+0xa40>)
 800422c:	edd3 7a00 	vldr	s15, [r3]
 8004230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004238:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <fly+0xa70>)
 800423a:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = background - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 800423e:	4b5a      	ldr	r3, [pc, #360]	; (80043a8 <fly+0xa48>)
 8004240:	ed93 7a00 	vldr	s14, [r3]
 8004244:	4b59      	ldr	r3, [pc, #356]	; (80043ac <fly+0xa4c>)
 8004246:	edd3 7a00 	vldr	s15, [r3]
 800424a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800424e:	4b58      	ldr	r3, [pc, #352]	; (80043b0 <fly+0xa50>)
 8004250:	edd3 7a00 	vldr	s15, [r3]
 8004254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004258:	ed97 7a00 	vldr	s14, [r7]
 800425c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004260:	4b54      	ldr	r3, [pc, #336]	; (80043b4 <fly+0xa54>)
 8004262:	edd3 6a00 	vldr	s13, [r3]
 8004266:	4b54      	ldr	r3, [pc, #336]	; (80043b8 <fly+0xa58>)
 8004268:	edd3 7a00 	vldr	s15, [r3]
 800426c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004270:	4b52      	ldr	r3, [pc, #328]	; (80043bc <fly+0xa5c>)
 8004272:	edd3 7a00 	vldr	s15, [r3]
 8004276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800427e:	4b50      	ldr	r3, [pc, #320]	; (80043c0 <fly+0xa60>)
 8004280:	edd3 6a00 	vldr	s13, [r3]
 8004284:	4b4f      	ldr	r3, [pc, #316]	; (80043c4 <fly+0xa64>)
 8004286:	edd3 7a00 	vldr	s15, [r3]
 800428a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800428e:	4b44      	ldr	r3, [pc, #272]	; (80043a0 <fly+0xa40>)
 8004290:	edd3 7a00 	vldr	s15, [r3]
 8004294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800429c:	4b4d      	ldr	r3, [pc, #308]	; (80043d4 <fly+0xa74>)
 800429e:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = LIMIT(g_sig1, MIN_SPEED, MAX_SPEED);
 80042a2:	4b49      	ldr	r3, [pc, #292]	; (80043c8 <fly+0xa68>)
 80042a4:	edd3 7a00 	vldr	s15, [r3]
 80042a8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80043d8 <fly+0xa78>
 80042ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b4:	d501      	bpl.n	80042ba <fly+0x95a>
 80042b6:	4b49      	ldr	r3, [pc, #292]	; (80043dc <fly+0xa7c>)
 80042b8:	e00d      	b.n	80042d6 <fly+0x976>
 80042ba:	4b43      	ldr	r3, [pc, #268]	; (80043c8 <fly+0xa68>)
 80042bc:	edd3 7a00 	vldr	s15, [r3]
 80042c0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80043e0 <fly+0xa80>
 80042c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042cc:	dd01      	ble.n	80042d2 <fly+0x972>
 80042ce:	4b45      	ldr	r3, [pc, #276]	; (80043e4 <fly+0xa84>)
 80042d0:	e001      	b.n	80042d6 <fly+0x976>
 80042d2:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <fly+0xa68>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <fly+0xa68>)
 80042d8:	6013      	str	r3, [r2, #0]
      g_sig2 = LIMIT(g_sig2, MIN_SPEED, MAX_SPEED);
 80042da:	4b3c      	ldr	r3, [pc, #240]	; (80043cc <fly+0xa6c>)
 80042dc:	edd3 7a00 	vldr	s15, [r3]
 80042e0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80043d8 <fly+0xa78>
 80042e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	d501      	bpl.n	80042f2 <fly+0x992>
 80042ee:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <fly+0xa7c>)
 80042f0:	e00d      	b.n	800430e <fly+0x9ae>
 80042f2:	4b36      	ldr	r3, [pc, #216]	; (80043cc <fly+0xa6c>)
 80042f4:	edd3 7a00 	vldr	s15, [r3]
 80042f8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80043e0 <fly+0xa80>
 80042fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	dd01      	ble.n	800430a <fly+0x9aa>
 8004306:	4b37      	ldr	r3, [pc, #220]	; (80043e4 <fly+0xa84>)
 8004308:	e001      	b.n	800430e <fly+0x9ae>
 800430a:	4b30      	ldr	r3, [pc, #192]	; (80043cc <fly+0xa6c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <fly+0xa6c>)
 8004310:	6013      	str	r3, [r2, #0]
      g_sig3 = LIMIT(g_sig3, MIN_SPEED, MAX_SPEED);
 8004312:	4b2f      	ldr	r3, [pc, #188]	; (80043d0 <fly+0xa70>)
 8004314:	edd3 7a00 	vldr	s15, [r3]
 8004318:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80043d8 <fly+0xa78>
 800431c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d501      	bpl.n	800432a <fly+0x9ca>
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <fly+0xa7c>)
 8004328:	e00d      	b.n	8004346 <fly+0x9e6>
 800432a:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <fly+0xa70>)
 800432c:	edd3 7a00 	vldr	s15, [r3]
 8004330:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80043e0 <fly+0xa80>
 8004334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433c:	dd01      	ble.n	8004342 <fly+0x9e2>
 800433e:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <fly+0xa84>)
 8004340:	e001      	b.n	8004346 <fly+0x9e6>
 8004342:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <fly+0xa70>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <fly+0xa70>)
 8004348:	6013      	str	r3, [r2, #0]
      g_sig4 = LIMIT(g_sig4, MIN_SPEED, MAX_SPEED);
 800434a:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <fly+0xa74>)
 800434c:	edd3 7a00 	vldr	s15, [r3]
 8004350:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80043d8 <fly+0xa78>
 8004354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	d501      	bpl.n	8004362 <fly+0xa02>
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <fly+0xa7c>)
 8004360:	e044      	b.n	80043ec <fly+0xa8c>
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <fly+0xa74>)
 8004364:	edd3 7a00 	vldr	s15, [r3]
 8004368:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80043e0 <fly+0xa80>
 800436c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	dd38      	ble.n	80043e8 <fly+0xa88>
 8004376:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <fly+0xa84>)
 8004378:	e038      	b.n	80043ec <fly+0xa8c>
 800437a:	bf00      	nop
 800437c:	f3af 8000 	nop.w
	...
 800438c:	40265c29 	.word	0x40265c29
 8004390:	00000000 	.word	0x00000000
 8004394:	40a3ec00 	.word	0x40a3ec00
 8004398:	24000014 	.word	0x24000014
 800439c:	44048000 	.word	0x44048000
 80043a0:	24000764 	.word	0x24000764
 80043a4:	240007f0 	.word	0x240007f0
 80043a8:	24000738 	.word	0x24000738
 80043ac:	2400073c 	.word	0x2400073c
 80043b0:	24000744 	.word	0x24000744
 80043b4:	24000748 	.word	0x24000748
 80043b8:	2400074c 	.word	0x2400074c
 80043bc:	24000754 	.word	0x24000754
 80043c0:	24000758 	.word	0x24000758
 80043c4:	2400075c 	.word	0x2400075c
 80043c8:	24000768 	.word	0x24000768
 80043cc:	2400076c 	.word	0x2400076c
 80043d0:	24000770 	.word	0x24000770
 80043d4:	24000774 	.word	0x24000774
 80043d8:	451f6000 	.word	0x451f6000
 80043dc:	451f6000 	.word	0x451f6000
 80043e0:	45a28000 	.word	0x45a28000
 80043e4:	45a28000 	.word	0x45a28000
 80043e8:	4ba1      	ldr	r3, [pc, #644]	; (8004670 <fly+0xd10>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4aa0      	ldr	r2, [pc, #640]	; (8004670 <fly+0xd10>)
 80043ee:	6013      	str	r3, [r2, #0]

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 80043f0:	4ba0      	ldr	r3, [pc, #640]	; (8004674 <fly+0xd14>)
 80043f2:	edd3 7a00 	vldr	s15, [r3]
 80043f6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80043fa:	4b9f      	ldr	r3, [pc, #636]	; (8004678 <fly+0xd18>)
 80043fc:	edd3 7a00 	vldr	s15, [r3]
 8004400:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8004404:	4b9d      	ldr	r3, [pc, #628]	; (800467c <fly+0xd1c>)
 8004406:	edd3 7a00 	vldr	s15, [r3]
 800440a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800440e:	4b98      	ldr	r3, [pc, #608]	; (8004670 <fly+0xd10>)
 8004410:	edd3 7a00 	vldr	s15, [r3]
 8004414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004418:	ee17 3a90 	vmov	r3, s15
 800441c:	ee16 2a10 	vmov	r2, s12
 8004420:	ee16 1a90 	vmov	r1, s13
 8004424:	ee17 0a10 	vmov	r0, s14
 8004428:	f000 f954 	bl	80046d4 <set_speed>

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 800442c:	4b94      	ldr	r3, [pc, #592]	; (8004680 <fly+0xd20>)
 800442e:	edd3 7a00 	vldr	s15, [r3]
 8004432:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004684 <fly+0xd24>
 8004436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443e:	d802      	bhi.n	8004446 <fly+0xae6>
        fly_mode = init;
 8004440:	4b91      	ldr	r3, [pc, #580]	; (8004688 <fly+0xd28>)
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
      }

      // Stop if angle too large (crashed), can disable if test with the rig
      if (angle_error_x < -90 || angle_error_x > 90 || angle_error_y < -90 || angle_error_y > 90) {
 8004446:	edd7 7a01 	vldr	s15, [r7, #4]
 800444a:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800468c <fly+0xd2c>
 800444e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004456:	d41a      	bmi.n	800448e <fly+0xb2e>
 8004458:	edd7 7a01 	vldr	s15, [r7, #4]
 800445c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004690 <fly+0xd30>
 8004460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004468:	dc11      	bgt.n	800448e <fly+0xb2e>
 800446a:	edd7 7a02 	vldr	s15, [r7, #8]
 800446e:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800468c <fly+0xd2c>
 8004472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	d408      	bmi.n	800448e <fly+0xb2e>
 800447c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004480:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004690 <fly+0xd30>
 8004484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448c:	dd02      	ble.n	8004494 <fly+0xb34>
        fly_mode = init;
 800448e:	4b7e      	ldr	r3, [pc, #504]	; (8004688 <fly+0xd28>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
      }

      blink();
 8004494:	f7fe fe48 	bl	8003128 <blink>
      break;
 8004498:	e0e6      	b.n	8004668 <fly+0xd08>
    case landing:

      break;
    case testing:
      blink();
 800449a:	f7fe fe45 	bl	8003128 <blink>
      g_sig1 = MIN_SPEED + LIMIT(20*g_throttle, 0, MAX_SPEED);
 800449e:	4b78      	ldr	r3, [pc, #480]	; (8004680 <fly+0xd20>)
 80044a0:	edd3 7a00 	vldr	s15, [r3]
 80044a4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80044a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b4:	d502      	bpl.n	80044bc <fly+0xb5c>
 80044b6:	eddf 7a77 	vldr	s15, [pc, #476]	; 8004694 <fly+0xd34>
 80044ba:	e017      	b.n	80044ec <fly+0xb8c>
 80044bc:	4b70      	ldr	r3, [pc, #448]	; (8004680 <fly+0xd20>)
 80044be:	edd3 7a00 	vldr	s15, [r3]
 80044c2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80044c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ca:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004698 <fly+0xd38>
 80044ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	dd02      	ble.n	80044de <fly+0xb7e>
 80044d8:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8004698 <fly+0xd38>
 80044dc:	e006      	b.n	80044ec <fly+0xb8c>
 80044de:	4b68      	ldr	r3, [pc, #416]	; (8004680 <fly+0xd20>)
 80044e0:	edd3 7a00 	vldr	s15, [r3]
 80044e4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80044e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ec:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800469c <fly+0xd3c>
 80044f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044f4:	4b5f      	ldr	r3, [pc, #380]	; (8004674 <fly+0xd14>)
 80044f6:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + LIMIT(20*g_yaw, 0, MAX_SPEED);
 80044fa:	4b69      	ldr	r3, [pc, #420]	; (80046a0 <fly+0xd40>)
 80044fc:	edd3 7a00 	vldr	s15, [r3]
 8004500:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800450c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004510:	d502      	bpl.n	8004518 <fly+0xbb8>
 8004512:	eddf 7a60 	vldr	s15, [pc, #384]	; 8004694 <fly+0xd34>
 8004516:	e017      	b.n	8004548 <fly+0xbe8>
 8004518:	4b61      	ldr	r3, [pc, #388]	; (80046a0 <fly+0xd40>)
 800451a:	edd3 7a00 	vldr	s15, [r3]
 800451e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004526:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8004698 <fly+0xd38>
 800452a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004532:	dd02      	ble.n	800453a <fly+0xbda>
 8004534:	eddf 7a58 	vldr	s15, [pc, #352]	; 8004698 <fly+0xd38>
 8004538:	e006      	b.n	8004548 <fly+0xbe8>
 800453a:	4b59      	ldr	r3, [pc, #356]	; (80046a0 <fly+0xd40>)
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004548:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800469c <fly+0xd3c>
 800454c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004550:	4b49      	ldr	r3, [pc, #292]	; (8004678 <fly+0xd18>)
 8004552:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + LIMIT(20*g_pitch, 0, MAX_SPEED);
 8004556:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <fly+0xd44>)
 8004558:	edd3 7a00 	vldr	s15, [r3]
 800455c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456c:	d502      	bpl.n	8004574 <fly+0xc14>
 800456e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8004694 <fly+0xd34>
 8004572:	e017      	b.n	80045a4 <fly+0xc44>
 8004574:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <fly+0xd44>)
 8004576:	edd3 7a00 	vldr	s15, [r3]
 800457a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800457e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004582:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004698 <fly+0xd38>
 8004586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458e:	dd02      	ble.n	8004596 <fly+0xc36>
 8004590:	eddf 7a41 	vldr	s15, [pc, #260]	; 8004698 <fly+0xd38>
 8004594:	e006      	b.n	80045a4 <fly+0xc44>
 8004596:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <fly+0xd44>)
 8004598:	edd3 7a00 	vldr	s15, [r3]
 800459c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80045a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800469c <fly+0xd3c>
 80045a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045ac:	4b33      	ldr	r3, [pc, #204]	; (800467c <fly+0xd1c>)
 80045ae:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + LIMIT(20*g_roll, 0, MAX_SPEED);
 80045b2:	4b3d      	ldr	r3, [pc, #244]	; (80046a8 <fly+0xd48>)
 80045b4:	edd3 7a00 	vldr	s15, [r3]
 80045b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80045bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c8:	d502      	bpl.n	80045d0 <fly+0xc70>
 80045ca:	eddf 7a32 	vldr	s15, [pc, #200]	; 8004694 <fly+0xd34>
 80045ce:	e017      	b.n	8004600 <fly+0xca0>
 80045d0:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <fly+0xd48>)
 80045d2:	edd3 7a00 	vldr	s15, [r3]
 80045d6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80045da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045de:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004698 <fly+0xd38>
 80045e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ea:	dd02      	ble.n	80045f2 <fly+0xc92>
 80045ec:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8004698 <fly+0xd38>
 80045f0:	e006      	b.n	8004600 <fly+0xca0>
 80045f2:	4b2d      	ldr	r3, [pc, #180]	; (80046a8 <fly+0xd48>)
 80045f4:	edd3 7a00 	vldr	s15, [r3]
 80045f8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80045fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004600:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800469c <fly+0xd3c>
 8004604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <fly+0xd10>)
 800460a:	edc3 7a00 	vstr	s15, [r3]

      // Pull down the stick to stop
      if (g_throttle <= MIN_THROTTLE) {
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <fly+0xd20>)
 8004610:	edd3 7a00 	vldr	s15, [r3]
 8004614:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004684 <fly+0xd24>
 8004618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	d802      	bhi.n	8004628 <fly+0xcc8>
        fly_mode = init;
 8004622:	4b19      	ldr	r3, [pc, #100]	; (8004688 <fly+0xd28>)
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
      }

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <fly+0xd14>)
 800462a:	edd3 7a00 	vldr	s15, [r3]
 800462e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <fly+0xd18>)
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800463c:	4b0f      	ldr	r3, [pc, #60]	; (800467c <fly+0xd1c>)
 800463e:	edd3 7a00 	vldr	s15, [r3]
 8004642:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <fly+0xd10>)
 8004648:	edd3 7a00 	vldr	s15, [r3]
 800464c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004650:	ee17 3a90 	vmov	r3, s15
 8004654:	ee16 2a10 	vmov	r2, s12
 8004658:	ee16 1a90 	vmov	r1, s13
 800465c:	ee17 0a10 	vmov	r0, s14
 8004660:	f000 f838 	bl	80046d4 <set_speed>
      break;
 8004664:	e000      	b.n	8004668 <fly+0xd08>
      break;
 8004666:	bf00      	nop
  }
}
 8004668:	bf00      	nop
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	24000774 	.word	0x24000774
 8004674:	24000768 	.word	0x24000768
 8004678:	2400076c 	.word	0x2400076c
 800467c:	24000770 	.word	0x24000770
 8004680:	240007f0 	.word	0x240007f0
 8004684:	c2f80000 	.word	0xc2f80000
 8004688:	240017f0 	.word	0x240017f0
 800468c:	c2b40000 	.word	0xc2b40000
 8004690:	42b40000 	.word	0x42b40000
 8004694:	00000000 	.word	0x00000000
 8004698:	45a28000 	.word	0x45a28000
 800469c:	451f6000 	.word	0x451f6000
 80046a0:	240007fc 	.word	0x240007fc
 80046a4:	240007f4 	.word	0x240007f4
 80046a8:	240007f8 	.word	0x240007f8

080046ac <console>:

void console(const char *str) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fb fe13 	bl	80002e0 <strlen>
 80046ba:	4603      	mov	r3, r0
 80046bc:	b29b      	uxth	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4803      	ldr	r0, [pc, #12]	; (80046d0 <console+0x24>)
 80046c4:	f008 fd1a 	bl	800d0fc <HAL_UART_Transmit_IT>
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	240004c4 	.word	0x240004c4

080046d4 <set_speed>:

void set_speed(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4) {
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  TIM2->CCR1 = m1;
 80046e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = m2;
 80046ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6393      	str	r3, [r2, #56]	; 0x38
  TIM2->CCR3 = m3;
 80046f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = m4;
 80046fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <init_filters>:

void init_filters() {
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  average_filter_init(&g_af[0], 5); // Thrust
 8004714:	2105      	movs	r1, #5
 8004716:	480a      	ldr	r0, [pc, #40]	; (8004740 <init_filters+0x30>)
 8004718:	f7fc f991 	bl	8000a3e <average_filter_init>
  average_filter_init(&g_af[1], 5); // Yaw
 800471c:	2105      	movs	r1, #5
 800471e:	4809      	ldr	r0, [pc, #36]	; (8004744 <init_filters+0x34>)
 8004720:	f7fc f98d 	bl	8000a3e <average_filter_init>
  average_filter_init(&g_af[2], 5); // Pitch
 8004724:	2105      	movs	r1, #5
 8004726:	4808      	ldr	r0, [pc, #32]	; (8004748 <init_filters+0x38>)
 8004728:	f7fc f989 	bl	8000a3e <average_filter_init>
  average_filter_init(&g_af[3], 5); // Roll
 800472c:	2105      	movs	r1, #5
 800472e:	4807      	ldr	r0, [pc, #28]	; (800474c <init_filters+0x3c>)
 8004730:	f7fc f985 	bl	8000a3e <average_filter_init>
  average_filter_init(&g_af[4], 5); // Stick 1
 8004734:	2105      	movs	r1, #5
 8004736:	4806      	ldr	r0, [pc, #24]	; (8004750 <init_filters+0x40>)
 8004738:	f7fc f981 	bl	8000a3e <average_filter_init>
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}
 8004740:	240008b4 	.word	0x240008b4
 8004744:	24000a50 	.word	0x24000a50
 8004748:	24000bec 	.word	0x24000bec
 800474c:	24000d88 	.word	0x24000d88
 8004750:	24000f24 	.word	0x24000f24

08004754 <init_sensors>:

void init_sensors() {
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af02      	add	r7, sp, #8
  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 800475a:	2303      	movs	r3, #3
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2303      	movs	r3, #3
 8004760:	2200      	movs	r2, #0
 8004762:	4971      	ldr	r1, [pc, #452]	; (8004928 <init_sensors+0x1d4>)
 8004764:	4871      	ldr	r0, [pc, #452]	; (800492c <init_sensors+0x1d8>)
 8004766:	f7fd f935 	bl	80019d4 <MPU6050_init>
 800476a:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <init_sensors+0x2a>
    flash(error);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc f9cc 	bl	8000b14 <flash>
  while (1) {
 800477c:	e7ed      	b.n	800475a <init_sensors+0x6>
    if (error == 0) break;
 800477e:	bf00      	nop
  }

  int gx = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
  int gy = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	61bb      	str	r3, [r7, #24]
  int gz = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]

#ifdef CALIBRATE_ANGLE
  int ax = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
  int ay = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
#endif

  for (int i = 0; i < 1100; i += 1) {
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]
 8004798:	e058      	b.n	800484c <init_sensors+0xf8>
    MPU6050_update(&g_mpu6050);
 800479a:	4864      	ldr	r0, [pc, #400]	; (800492c <init_sensors+0x1d8>)
 800479c:	f7fd fb54 	bl	8001e48 <MPU6050_update>
    HAL_Delay(3);
 80047a0:	2003      	movs	r0, #3
 80047a2:	f000 fa49 	bl	8004c38 <HAL_Delay>
    if (i < 100) continue;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b63      	cmp	r3, #99	; 0x63
 80047aa:	dd4b      	ble.n	8004844 <init_sensors+0xf0>
    gx += g_mpu6050.gx;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047b6:	4b5d      	ldr	r3, [pc, #372]	; (800492c <init_sensors+0x1d8>)
 80047b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80047bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047c4:	ee17 3a90 	vmov	r3, s15
 80047c8:	61fb      	str	r3, [r7, #28]
    gy += g_mpu6050.gy;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047d4:	4b55      	ldr	r3, [pc, #340]	; (800492c <init_sensors+0x1d8>)
 80047d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80047da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047e2:	ee17 3a90 	vmov	r3, s15
 80047e6:	61bb      	str	r3, [r7, #24]
    gz += g_mpu6050.gz;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047f2:	4b4e      	ldr	r3, [pc, #312]	; (800492c <init_sensors+0x1d8>)
 80047f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80047f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004800:	ee17 3a90 	vmov	r3, s15
 8004804:	617b      	str	r3, [r7, #20]

#ifdef CALIBRATE_ANGLE
    ax += g_mpu6050.ax;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004810:	4b46      	ldr	r3, [pc, #280]	; (800492c <init_sensors+0x1d8>)
 8004812:	edd3 7a02 	vldr	s15, [r3, #8]
 8004816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800481a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800481e:	ee17 3a90 	vmov	r3, s15
 8004822:	613b      	str	r3, [r7, #16]
    ay += g_mpu6050.ay;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800482e:	4b3f      	ldr	r3, [pc, #252]	; (800492c <init_sensors+0x1d8>)
 8004830:	edd3 7a03 	vldr	s15, [r3, #12]
 8004834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800483c:	ee17 3a90 	vmov	r3, s15
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e000      	b.n	8004846 <init_sensors+0xf2>
    if (i < 100) continue;
 8004844:	bf00      	nop
  for (int i = 0; i < 1100; i += 1) {
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	3301      	adds	r3, #1
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f240 424b 	movw	r2, #1099	; 0x44b
 8004852:	4293      	cmp	r3, r2
 8004854:	dda1      	ble.n	800479a <init_sensors+0x46>
#endif

  }

  gx = gx/1000;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4a35      	ldr	r2, [pc, #212]	; (8004930 <init_sensors+0x1dc>)
 800485a:	fb82 1203 	smull	r1, r2, r2, r3
 800485e:	1192      	asrs	r2, r2, #6
 8004860:	17db      	asrs	r3, r3, #31
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	61fb      	str	r3, [r7, #28]
  gy = gy/1000;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	4a31      	ldr	r2, [pc, #196]	; (8004930 <init_sensors+0x1dc>)
 800486a:	fb82 1203 	smull	r1, r2, r2, r3
 800486e:	1192      	asrs	r2, r2, #6
 8004870:	17db      	asrs	r3, r3, #31
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	61bb      	str	r3, [r7, #24]
  gz = gz/1000;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4a2d      	ldr	r2, [pc, #180]	; (8004930 <init_sensors+0x1dc>)
 800487a:	fb82 1203 	smull	r1, r2, r2, r3
 800487e:	1192      	asrs	r2, r2, #6
 8004880:	17db      	asrs	r3, r3, #31
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]

#ifdef CALIBRATE_ANGLE
  ax = ax/1000;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4a29      	ldr	r2, [pc, #164]	; (8004930 <init_sensors+0x1dc>)
 800488a:	fb82 1203 	smull	r1, r2, r2, r3
 800488e:	1192      	asrs	r2, r2, #6
 8004890:	17db      	asrs	r3, r3, #31
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	613b      	str	r3, [r7, #16]
  ay = ay/1000;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4a25      	ldr	r2, [pc, #148]	; (8004930 <init_sensors+0x1dc>)
 800489a:	fb82 1203 	smull	r1, r2, r2, r3
 800489e:	1192      	asrs	r2, r2, #6
 80048a0:	17db      	asrs	r3, r3, #31
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	60fb      	str	r3, [r7, #12]
#endif

  MPU6050_set_offset(&g_mpu6050, -ax, -ay, 0, -gx, -gy, -gz);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	425b      	negs	r3, r3
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	425b      	negs	r3, r3
 80048b6:	ee07 3a10 	vmov	s14, r3
 80048ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	425b      	negs	r3, r3
 80048c2:	ee06 3a90 	vmov	s13, r3
 80048c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	425b      	negs	r3, r3
 80048ce:	ee06 3a10 	vmov	s12, r3
 80048d2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	425b      	negs	r3, r3
 80048da:	ee05 3a90 	vmov	s11, r3
 80048de:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80048e2:	eef0 2a65 	vmov.f32	s5, s11
 80048e6:	eeb0 2a46 	vmov.f32	s4, s12
 80048ea:	eef0 1a66 	vmov.f32	s3, s13
 80048ee:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8004934 <init_sensors+0x1e0>
 80048f2:	eef0 0a47 	vmov.f32	s1, s14
 80048f6:	eeb0 0a67 	vmov.f32	s0, s15
 80048fa:	480c      	ldr	r0, [pc, #48]	; (800492c <init_sensors+0x1d8>)
 80048fc:	f7fd fa7c 	bl	8001df8 <MPU6050_set_offset>

  // This takes quite long
  while (1) {
    int error = MS5611_init(
 8004900:	4909      	ldr	r1, [pc, #36]	; (8004928 <init_sensors+0x1d4>)
 8004902:	480d      	ldr	r0, [pc, #52]	; (8004938 <init_sensors+0x1e4>)
 8004904:	f7fd fd23 	bl	800234e <MS5611_init>
 8004908:	6038      	str	r0, [r7, #0]
        &g_ms5611,
        &hi2c1);
    if (error == 0) break;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <init_sensors+0x1c8>
    flash(error);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	4618      	mov	r0, r3
 8004916:	f7fc f8fd 	bl	8000b14 <flash>
  while (1) {
 800491a:	e7f1      	b.n	8004900 <init_sensors+0x1ac>
    if (error == 0) break;
 800491c:	bf00      	nop
  }
}
 800491e:	bf00      	nop
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	240000bc 	.word	0x240000bc
 800492c:	240014c0 	.word	0x240014c0
 8004930:	10624dd3 	.word	0x10624dd3
 8004934:	00000000 	.word	0x00000000
 8004938:	240015f0 	.word	0x240015f0

0800493c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <_sbrk+0x5c>)
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <_sbrk+0x60>)
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004950:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <_sbrk+0x64>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <_sbrk+0x64>)
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <_sbrk+0x68>)
 800495c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <_sbrk+0x64>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	429a      	cmp	r2, r3
 800496a:	d207      	bcs.n	800497c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800496c:	f00a fcf0 	bl	800f350 <__errno>
 8004970:	4603      	mov	r3, r0
 8004972:	220c      	movs	r2, #12
 8004974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800497a:	e009      	b.n	8004990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800497c:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <_sbrk+0x64>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <_sbrk+0x64>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4413      	add	r3, r2
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <_sbrk+0x64>)
 800498c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800498e:	68fb      	ldr	r3, [r7, #12]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	24080000 	.word	0x24080000
 800499c:	00000400 	.word	0x00000400
 80049a0:	24001808 	.word	0x24001808
 80049a4:	24001820 	.word	0x24001820

080049a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049ac:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <SystemInit+0xec>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	4a38      	ldr	r2, [pc, #224]	; (8004a94 <SystemInit+0xec>)
 80049b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80049bc:	4b36      	ldr	r3, [pc, #216]	; (8004a98 <SystemInit+0xf0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	2b06      	cmp	r3, #6
 80049c6:	d807      	bhi.n	80049d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80049c8:	4b33      	ldr	r3, [pc, #204]	; (8004a98 <SystemInit+0xf0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 030f 	bic.w	r3, r3, #15
 80049d0:	4a31      	ldr	r2, [pc, #196]	; (8004a98 <SystemInit+0xf0>)
 80049d2:	f043 0307 	orr.w	r3, r3, #7
 80049d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80049d8:	4b30      	ldr	r3, [pc, #192]	; (8004a9c <SystemInit+0xf4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <SystemInit+0xf4>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049e4:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <SystemInit+0xf4>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80049ea:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <SystemInit+0xf4>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	492b      	ldr	r1, [pc, #172]	; (8004a9c <SystemInit+0xf4>)
 80049f0:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <SystemInit+0xf8>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <SystemInit+0xf0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004a02:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <SystemInit+0xf0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 030f 	bic.w	r3, r3, #15
 8004a0a:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <SystemInit+0xf0>)
 8004a0c:	f043 0307 	orr.w	r3, r3, #7
 8004a10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004a12:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <SystemInit+0xf4>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004a18:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <SystemInit+0xf4>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004a1e:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <SystemInit+0xf4>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004a24:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <SystemInit+0xf4>)
 8004a26:	4a1f      	ldr	r2, [pc, #124]	; (8004aa4 <SystemInit+0xfc>)
 8004a28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004a2a:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <SystemInit+0xf4>)
 8004a2c:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <SystemInit+0x100>)
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <SystemInit+0xf4>)
 8004a32:	4a1e      	ldr	r2, [pc, #120]	; (8004aac <SystemInit+0x104>)
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004a36:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <SystemInit+0xf4>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004a3c:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <SystemInit+0xf4>)
 8004a3e:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <SystemInit+0x104>)
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004a42:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <SystemInit+0xf4>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <SystemInit+0xf4>)
 8004a4a:	4a18      	ldr	r2, [pc, #96]	; (8004aac <SystemInit+0x104>)
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <SystemInit+0xf4>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a54:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <SystemInit+0xf4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <SystemInit+0xf4>)
 8004a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004a60:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <SystemInit+0xf4>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <SystemInit+0x108>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <SystemInit+0x10c>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a72:	d202      	bcs.n	8004a7a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004a74:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <SystemInit+0x110>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <SystemInit+0x114>)
 8004a7c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004a80:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a82:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <SystemInit+0xec>)
 8004a84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a88:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004a8a:	bf00      	nop
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000ed00 	.word	0xe000ed00
 8004a98:	52002000 	.word	0x52002000
 8004a9c:	58024400 	.word	0x58024400
 8004aa0:	eaf6ed7f 	.word	0xeaf6ed7f
 8004aa4:	02020200 	.word	0x02020200
 8004aa8:	01ff0000 	.word	0x01ff0000
 8004aac:	01010280 	.word	0x01010280
 8004ab0:	5c001000 	.word	0x5c001000
 8004ab4:	ffff0000 	.word	0xffff0000
 8004ab8:	51008108 	.word	0x51008108
 8004abc:	52004000 	.word	0x52004000

08004ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004ac4:	f7ff ff70 	bl	80049a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ac8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004aca:	e003      	b.n	8004ad4 <LoopCopyDataInit>

08004acc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004ace:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ad0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ad2:	3104      	adds	r1, #4

08004ad4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ad4:	480a      	ldr	r0, [pc, #40]	; (8004b00 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004ad8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ada:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004adc:	d3f6      	bcc.n	8004acc <CopyDataInit>
  ldr  r2, =_sbss
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004ae0:	e002      	b.n	8004ae8 <LoopFillZerobss>

08004ae2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ae2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ae4:	f842 3b04 	str.w	r3, [r2], #4

08004ae8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8004aea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004aec:	d3f9      	bcc.n	8004ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004aee:	f00a fc35 	bl	800f35c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004af2:	f7fc f835 	bl	8000b60 <main>
  bx  lr    
 8004af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004af8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004afc:	08013480 	.word	0x08013480
  ldr  r0, =_sdata
 8004b00:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004b04:	240000a0 	.word	0x240000a0
  ldr  r2, =_sbss
 8004b08:	240000a0 	.word	0x240000a0
  ldr  r3, = _ebss
 8004b0c:	24001820 	.word	0x24001820

08004b10 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b10:	e7fe      	b.n	8004b10 <ADC3_IRQHandler>
	...

08004b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b1a:	2003      	movs	r0, #3
 8004b1c:	f000 f98c 	bl	8004e38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b20:	f004 ff26 	bl	8009970 <HAL_RCC_GetSysClockFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <HAL_Init+0x68>)
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	4913      	ldr	r1, [pc, #76]	; (8004b80 <HAL_Init+0x6c>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <HAL_Init+0x68>)
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <HAL_Init+0x6c>)
 8004b48:	5cd3      	ldrb	r3, [r2, r3]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
 8004b54:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <HAL_Init+0x70>)
 8004b56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b58:	4a0b      	ldr	r2, [pc, #44]	; (8004b88 <HAL_Init+0x74>)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f000 f814 	bl	8004b8c <HAL_InitTick>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e002      	b.n	8004b74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004b6e:	f7fd fe93 	bl	8002898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	080115fc 	.word	0x080115fc
 8004b84:	24000030 	.word	0x24000030
 8004b88:	2400002c 	.word	0x2400002c

08004b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004b94:	4b15      	ldr	r3, [pc, #84]	; (8004bec <HAL_InitTick+0x60>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e021      	b.n	8004be4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ba0:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_InitTick+0x64>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <HAL_InitTick+0x60>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f971 	bl	8004e9e <HAL_SYSTICK_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e00e      	b.n	8004be4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b0f      	cmp	r3, #15
 8004bca:	d80a      	bhi.n	8004be2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bcc:	2200      	movs	r2, #0
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bd4:	f000 f93b 	bl	8004e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bd8:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <HAL_InitTick+0x68>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	24000038 	.word	0x24000038
 8004bf0:	2400002c 	.word	0x2400002c
 8004bf4:	24000034 	.word	0x24000034

08004bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_IncTick+0x20>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_IncTick+0x24>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <HAL_IncTick+0x24>)
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	24000038 	.word	0x24000038
 8004c1c:	2400180c 	.word	0x2400180c

08004c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return uwTick;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <HAL_GetTick+0x14>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2400180c 	.word	0x2400180c

08004c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c40:	f7ff ffee 	bl	8004c20 <HAL_GetTick>
 8004c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c50:	d005      	beq.n	8004c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_Delay+0x44>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c5e:	bf00      	nop
 8004c60:	f7ff ffde 	bl	8004c20 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d8f7      	bhi.n	8004c60 <HAL_Delay+0x28>
  {
  }
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	24000038 	.word	0x24000038

08004c80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <HAL_GetREVID+0x14>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0c1b      	lsrs	r3, r3, #16
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	5c001000 	.word	0x5c001000

08004c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <__NVIC_SetPriorityGrouping+0x44>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cc6:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	60d3      	str	r3, [r2, #12]
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	e000ed00 	.word	0xe000ed00
 8004cdc:	05fa0000 	.word	0x05fa0000

08004ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	f003 0307 	and.w	r3, r3, #7
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000ed00 	.word	0xe000ed00

08004cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	db0b      	blt.n	8004d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	f003 021f 	and.w	r2, r3, #31
 8004d14:	4907      	ldr	r1, [pc, #28]	; (8004d34 <__NVIC_EnableIRQ+0x38>)
 8004d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	e000e100 	.word	0xe000e100

08004d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	6039      	str	r1, [r7, #0]
 8004d42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	db0a      	blt.n	8004d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	490c      	ldr	r1, [pc, #48]	; (8004d84 <__NVIC_SetPriority+0x4c>)
 8004d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d56:	0112      	lsls	r2, r2, #4
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d60:	e00a      	b.n	8004d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	4908      	ldr	r1, [pc, #32]	; (8004d88 <__NVIC_SetPriority+0x50>)
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	3b04      	subs	r3, #4
 8004d70:	0112      	lsls	r2, r2, #4
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	440b      	add	r3, r1
 8004d76:	761a      	strb	r2, [r3, #24]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	e000e100 	.word	0xe000e100
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	; 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f1c3 0307 	rsb	r3, r3, #7
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	bf28      	it	cs
 8004daa:	2304      	movcs	r3, #4
 8004dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d902      	bls.n	8004dbc <NVIC_EncodePriority+0x30>
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3b03      	subs	r3, #3
 8004dba:	e000      	b.n	8004dbe <NVIC_EncodePriority+0x32>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	401a      	ands	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	43d9      	mvns	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de4:	4313      	orrs	r3, r2
         );
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3724      	adds	r7, #36	; 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e04:	d301      	bcc.n	8004e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e06:	2301      	movs	r3, #1
 8004e08:	e00f      	b.n	8004e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e0a:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <SysTick_Config+0x40>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e12:	210f      	movs	r1, #15
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e18:	f7ff ff8e 	bl	8004d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <SysTick_Config+0x40>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <SysTick_Config+0x40>)
 8004e24:	2207      	movs	r2, #7
 8004e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	e000e010 	.word	0xe000e010

08004e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff29 	bl	8004c98 <__NVIC_SetPriorityGrouping>
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	4603      	mov	r3, r0
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e5c:	f7ff ff40 	bl	8004ce0 <__NVIC_GetPriorityGrouping>
 8004e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	6978      	ldr	r0, [r7, #20]
 8004e68:	f7ff ff90 	bl	8004d8c <NVIC_EncodePriority>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e72:	4611      	mov	r1, r2
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff ff5f 	bl	8004d38 <__NVIC_SetPriority>
}
 8004e7a:	bf00      	nop
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	4603      	mov	r3, r0
 8004e8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff ff33 	bl	8004cfc <__NVIC_EnableIRQ>
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff ffa4 	bl	8004df4 <SysTick_Config>
 8004eac:	4603      	mov	r3, r0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ec0:	f7ff feae 	bl	8004c20 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e316      	b.n	80054fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a66      	ldr	r2, [pc, #408]	; (8005070 <HAL_DMA_Init+0x1b8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d04a      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a65      	ldr	r2, [pc, #404]	; (8005074 <HAL_DMA_Init+0x1bc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d045      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a63      	ldr	r2, [pc, #396]	; (8005078 <HAL_DMA_Init+0x1c0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d040      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a62      	ldr	r2, [pc, #392]	; (800507c <HAL_DMA_Init+0x1c4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d03b      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a60      	ldr	r2, [pc, #384]	; (8005080 <HAL_DMA_Init+0x1c8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d036      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5f      	ldr	r2, [pc, #380]	; (8005084 <HAL_DMA_Init+0x1cc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d031      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a5d      	ldr	r2, [pc, #372]	; (8005088 <HAL_DMA_Init+0x1d0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02c      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a5c      	ldr	r2, [pc, #368]	; (800508c <HAL_DMA_Init+0x1d4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d027      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a5a      	ldr	r2, [pc, #360]	; (8005090 <HAL_DMA_Init+0x1d8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d022      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a59      	ldr	r2, [pc, #356]	; (8005094 <HAL_DMA_Init+0x1dc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d01d      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a57      	ldr	r2, [pc, #348]	; (8005098 <HAL_DMA_Init+0x1e0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d018      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a56      	ldr	r2, [pc, #344]	; (800509c <HAL_DMA_Init+0x1e4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d013      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a54      	ldr	r2, [pc, #336]	; (80050a0 <HAL_DMA_Init+0x1e8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00e      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a53      	ldr	r2, [pc, #332]	; (80050a4 <HAL_DMA_Init+0x1ec>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d009      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a51      	ldr	r2, [pc, #324]	; (80050a8 <HAL_DMA_Init+0x1f0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_DMA_Init+0xb8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a50      	ldr	r2, [pc, #320]	; (80050ac <HAL_DMA_Init+0x1f4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d101      	bne.n	8004f74 <HAL_DMA_Init+0xbc>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <HAL_DMA_Init+0xbe>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 813b 	beq.w	80051f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a37      	ldr	r2, [pc, #220]	; (8005070 <HAL_DMA_Init+0x1b8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d04a      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a36      	ldr	r2, [pc, #216]	; (8005074 <HAL_DMA_Init+0x1bc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d045      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a34      	ldr	r2, [pc, #208]	; (8005078 <HAL_DMA_Init+0x1c0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d040      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a33      	ldr	r2, [pc, #204]	; (800507c <HAL_DMA_Init+0x1c4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d03b      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a31      	ldr	r2, [pc, #196]	; (8005080 <HAL_DMA_Init+0x1c8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d036      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a30      	ldr	r2, [pc, #192]	; (8005084 <HAL_DMA_Init+0x1cc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d031      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2e      	ldr	r2, [pc, #184]	; (8005088 <HAL_DMA_Init+0x1d0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d02c      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2d      	ldr	r2, [pc, #180]	; (800508c <HAL_DMA_Init+0x1d4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d027      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	; (8005090 <HAL_DMA_Init+0x1d8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d022      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <HAL_DMA_Init+0x1dc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d01d      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a28      	ldr	r2, [pc, #160]	; (8005098 <HAL_DMA_Init+0x1e0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_DMA_Init+0x174>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a27      	ldr	r2, [pc, #156]	; (800509c <HAL_DMA_Init+0x1e4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_DMA_Init+0x174>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a25      	ldr	r2, [pc, #148]	; (80050a0 <HAL_DMA_Init+0x1e8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_DMA_Init+0x174>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <HAL_DMA_Init+0x1ec>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_DMA_Init+0x174>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <HAL_DMA_Init+0x1f0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_DMA_Init+0x174>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a21      	ldr	r2, [pc, #132]	; (80050ac <HAL_DMA_Init+0x1f4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <HAL_DMA_Init+0x186>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e007      	b.n	800504e <HAL_DMA_Init+0x196>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0201 	bic.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800504e:	e02f      	b.n	80050b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005050:	f7ff fde6 	bl	8004c20 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b05      	cmp	r3, #5
 800505c:	d928      	bls.n	80050b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2203      	movs	r2, #3
 8005068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e246      	b.n	80054fe <HAL_DMA_Init+0x646>
 8005070:	40020010 	.word	0x40020010
 8005074:	40020028 	.word	0x40020028
 8005078:	40020040 	.word	0x40020040
 800507c:	40020058 	.word	0x40020058
 8005080:	40020070 	.word	0x40020070
 8005084:	40020088 	.word	0x40020088
 8005088:	400200a0 	.word	0x400200a0
 800508c:	400200b8 	.word	0x400200b8
 8005090:	40020410 	.word	0x40020410
 8005094:	40020428 	.word	0x40020428
 8005098:	40020440 	.word	0x40020440
 800509c:	40020458 	.word	0x40020458
 80050a0:	40020470 	.word	0x40020470
 80050a4:	40020488 	.word	0x40020488
 80050a8:	400204a0 	.word	0x400204a0
 80050ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1c8      	bne.n	8005050 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4b83      	ldr	r3, [pc, #524]	; (80052d8 <HAL_DMA_Init+0x420>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80050d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b04      	cmp	r3, #4
 8005102:	d107      	bne.n	8005114 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	4313      	orrs	r3, r2
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005114:	4b71      	ldr	r3, [pc, #452]	; (80052dc <HAL_DMA_Init+0x424>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4b71      	ldr	r3, [pc, #452]	; (80052e0 <HAL_DMA_Init+0x428>)
 800511a:	4013      	ands	r3, r2
 800511c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005120:	d328      	bcc.n	8005174 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b28      	cmp	r3, #40	; 0x28
 8005128:	d903      	bls.n	8005132 <HAL_DMA_Init+0x27a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b2e      	cmp	r3, #46	; 0x2e
 8005130:	d917      	bls.n	8005162 <HAL_DMA_Init+0x2aa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b3e      	cmp	r3, #62	; 0x3e
 8005138:	d903      	bls.n	8005142 <HAL_DMA_Init+0x28a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b42      	cmp	r3, #66	; 0x42
 8005140:	d90f      	bls.n	8005162 <HAL_DMA_Init+0x2aa>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b46      	cmp	r3, #70	; 0x46
 8005148:	d903      	bls.n	8005152 <HAL_DMA_Init+0x29a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b48      	cmp	r3, #72	; 0x48
 8005150:	d907      	bls.n	8005162 <HAL_DMA_Init+0x2aa>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b4e      	cmp	r3, #78	; 0x4e
 8005158:	d905      	bls.n	8005166 <HAL_DMA_Init+0x2ae>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b52      	cmp	r3, #82	; 0x52
 8005160:	d801      	bhi.n	8005166 <HAL_DMA_Init+0x2ae>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <HAL_DMA_Init+0x2b0>
 8005166:	2300      	movs	r3, #0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005172:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2b04      	cmp	r3, #4
 800519c:	d117      	bne.n	80051ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00e      	beq.n	80051ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f002 fb33 	bl	800781c <DMA_CheckFifoParam>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2240      	movs	r2, #64	; 0x40
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e197      	b.n	80054fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f002 fa6e 	bl	80076b8 <DMA_CalcBaseAndBitshift>
 80051dc:	4603      	mov	r3, r0
 80051de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	223f      	movs	r2, #63	; 0x3f
 80051ea:	409a      	lsls	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	e0cd      	b.n	800538e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a3b      	ldr	r2, [pc, #236]	; (80052e4 <HAL_DMA_Init+0x42c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d022      	beq.n	8005242 <HAL_DMA_Init+0x38a>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a39      	ldr	r2, [pc, #228]	; (80052e8 <HAL_DMA_Init+0x430>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01d      	beq.n	8005242 <HAL_DMA_Init+0x38a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a38      	ldr	r2, [pc, #224]	; (80052ec <HAL_DMA_Init+0x434>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d018      	beq.n	8005242 <HAL_DMA_Init+0x38a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a36      	ldr	r2, [pc, #216]	; (80052f0 <HAL_DMA_Init+0x438>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_DMA_Init+0x38a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a35      	ldr	r2, [pc, #212]	; (80052f4 <HAL_DMA_Init+0x43c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_DMA_Init+0x38a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a33      	ldr	r2, [pc, #204]	; (80052f8 <HAL_DMA_Init+0x440>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_DMA_Init+0x38a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a32      	ldr	r2, [pc, #200]	; (80052fc <HAL_DMA_Init+0x444>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_DMA_Init+0x38a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a30      	ldr	r2, [pc, #192]	; (8005300 <HAL_DMA_Init+0x448>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_DMA_Init+0x38e>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_DMA_Init+0x390>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8097 	beq.w	800537c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a24      	ldr	r2, [pc, #144]	; (80052e4 <HAL_DMA_Init+0x42c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d021      	beq.n	800529c <HAL_DMA_Init+0x3e4>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <HAL_DMA_Init+0x430>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01c      	beq.n	800529c <HAL_DMA_Init+0x3e4>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a21      	ldr	r2, [pc, #132]	; (80052ec <HAL_DMA_Init+0x434>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d017      	beq.n	800529c <HAL_DMA_Init+0x3e4>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <HAL_DMA_Init+0x438>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d012      	beq.n	800529c <HAL_DMA_Init+0x3e4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_DMA_Init+0x43c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00d      	beq.n	800529c <HAL_DMA_Init+0x3e4>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <HAL_DMA_Init+0x440>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d008      	beq.n	800529c <HAL_DMA_Init+0x3e4>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <HAL_DMA_Init+0x444>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <HAL_DMA_Init+0x3e4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a19      	ldr	r2, [pc, #100]	; (8005300 <HAL_DMA_Init+0x448>)
 800529a:	4293      	cmp	r3, r2
 800529c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2202      	movs	r2, #2
 80052a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4b12      	ldr	r3, [pc, #72]	; (8005304 <HAL_DMA_Init+0x44c>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d020      	beq.n	8005308 <HAL_DMA_Init+0x450>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b80      	cmp	r3, #128	; 0x80
 80052cc:	d102      	bne.n	80052d4 <HAL_DMA_Init+0x41c>
 80052ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052d2:	e01a      	b.n	800530a <HAL_DMA_Init+0x452>
 80052d4:	2300      	movs	r3, #0
 80052d6:	e018      	b.n	800530a <HAL_DMA_Init+0x452>
 80052d8:	fe10803f 	.word	0xfe10803f
 80052dc:	5c001000 	.word	0x5c001000
 80052e0:	ffff0000 	.word	0xffff0000
 80052e4:	58025408 	.word	0x58025408
 80052e8:	5802541c 	.word	0x5802541c
 80052ec:	58025430 	.word	0x58025430
 80052f0:	58025444 	.word	0x58025444
 80052f4:	58025458 	.word	0x58025458
 80052f8:	5802546c 	.word	0x5802546c
 80052fc:	58025480 	.word	0x58025480
 8005300:	58025494 	.word	0x58025494
 8005304:	fffe000f 	.word	0xfffe000f
 8005308:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68d2      	ldr	r2, [r2, #12]
 800530e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005310:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005318:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005320:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005328:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005330:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005338:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	4b6e      	ldr	r3, [pc, #440]	; (8005508 <HAL_DMA_Init+0x650>)
 8005350:	4413      	add	r3, r2
 8005352:	4a6e      	ldr	r2, [pc, #440]	; (800550c <HAL_DMA_Init+0x654>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	009a      	lsls	r2, r3, #2
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f002 f9a9 	bl	80076b8 <DMA_CalcBaseAndBitshift>
 8005366:	4603      	mov	r3, r0
 8005368:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	2201      	movs	r2, #1
 8005374:	409a      	lsls	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	e008      	b.n	800538e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2240      	movs	r2, #64	; 0x40
 8005380:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2203      	movs	r2, #3
 8005386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e0b7      	b.n	80054fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a5f      	ldr	r2, [pc, #380]	; (8005510 <HAL_DMA_Init+0x658>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d072      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a5d      	ldr	r2, [pc, #372]	; (8005514 <HAL_DMA_Init+0x65c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d06d      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a5c      	ldr	r2, [pc, #368]	; (8005518 <HAL_DMA_Init+0x660>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d068      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a5a      	ldr	r2, [pc, #360]	; (800551c <HAL_DMA_Init+0x664>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d063      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a59      	ldr	r2, [pc, #356]	; (8005520 <HAL_DMA_Init+0x668>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d05e      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a57      	ldr	r2, [pc, #348]	; (8005524 <HAL_DMA_Init+0x66c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d059      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a56      	ldr	r2, [pc, #344]	; (8005528 <HAL_DMA_Init+0x670>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d054      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a54      	ldr	r2, [pc, #336]	; (800552c <HAL_DMA_Init+0x674>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d04f      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a53      	ldr	r2, [pc, #332]	; (8005530 <HAL_DMA_Init+0x678>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d04a      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a51      	ldr	r2, [pc, #324]	; (8005534 <HAL_DMA_Init+0x67c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d045      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a50      	ldr	r2, [pc, #320]	; (8005538 <HAL_DMA_Init+0x680>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d040      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a4e      	ldr	r2, [pc, #312]	; (800553c <HAL_DMA_Init+0x684>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d03b      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a4d      	ldr	r2, [pc, #308]	; (8005540 <HAL_DMA_Init+0x688>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d036      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a4b      	ldr	r2, [pc, #300]	; (8005544 <HAL_DMA_Init+0x68c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d031      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a4a      	ldr	r2, [pc, #296]	; (8005548 <HAL_DMA_Init+0x690>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d02c      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a48      	ldr	r2, [pc, #288]	; (800554c <HAL_DMA_Init+0x694>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d027      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a47      	ldr	r2, [pc, #284]	; (8005550 <HAL_DMA_Init+0x698>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d022      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a45      	ldr	r2, [pc, #276]	; (8005554 <HAL_DMA_Init+0x69c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01d      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a44      	ldr	r2, [pc, #272]	; (8005558 <HAL_DMA_Init+0x6a0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d018      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a42      	ldr	r2, [pc, #264]	; (800555c <HAL_DMA_Init+0x6a4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a41      	ldr	r2, [pc, #260]	; (8005560 <HAL_DMA_Init+0x6a8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a3f      	ldr	r2, [pc, #252]	; (8005564 <HAL_DMA_Init+0x6ac>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a3e      	ldr	r2, [pc, #248]	; (8005568 <HAL_DMA_Init+0x6b0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_DMA_Init+0x5c6>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a3c      	ldr	r2, [pc, #240]	; (800556c <HAL_DMA_Init+0x6b4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d101      	bne.n	8005482 <HAL_DMA_Init+0x5ca>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <HAL_DMA_Init+0x5cc>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d032      	beq.n	80054ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f002 fa43 	bl	8007914 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b80      	cmp	r3, #128	; 0x80
 8005494:	d102      	bne.n	800549c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d010      	beq.n	80054dc <HAL_DMA_Init+0x624>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d80c      	bhi.n	80054dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f002 fac0 	bl	8007a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	e008      	b.n	80054ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	a7fdabf8 	.word	0xa7fdabf8
 800550c:	cccccccd 	.word	0xcccccccd
 8005510:	40020010 	.word	0x40020010
 8005514:	40020028 	.word	0x40020028
 8005518:	40020040 	.word	0x40020040
 800551c:	40020058 	.word	0x40020058
 8005520:	40020070 	.word	0x40020070
 8005524:	40020088 	.word	0x40020088
 8005528:	400200a0 	.word	0x400200a0
 800552c:	400200b8 	.word	0x400200b8
 8005530:	40020410 	.word	0x40020410
 8005534:	40020428 	.word	0x40020428
 8005538:	40020440 	.word	0x40020440
 800553c:	40020458 	.word	0x40020458
 8005540:	40020470 	.word	0x40020470
 8005544:	40020488 	.word	0x40020488
 8005548:	400204a0 	.word	0x400204a0
 800554c:	400204b8 	.word	0x400204b8
 8005550:	58025408 	.word	0x58025408
 8005554:	5802541c 	.word	0x5802541c
 8005558:	58025430 	.word	0x58025430
 800555c:	58025444 	.word	0x58025444
 8005560:	58025458 	.word	0x58025458
 8005564:	5802546c 	.word	0x5802546c
 8005568:	58025480 	.word	0x58025480
 800556c:	58025494 	.word	0x58025494

08005570 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e226      	b.n	80059da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_DMA_Start_IT+0x2a>
 8005596:	2302      	movs	r3, #2
 8005598:	e21f      	b.n	80059da <HAL_DMA_Start_IT+0x46a>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	f040 820a 	bne.w	80059c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a68      	ldr	r2, [pc, #416]	; (8005764 <HAL_DMA_Start_IT+0x1f4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d04a      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a66      	ldr	r2, [pc, #408]	; (8005768 <HAL_DMA_Start_IT+0x1f8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d045      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a65      	ldr	r2, [pc, #404]	; (800576c <HAL_DMA_Start_IT+0x1fc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d040      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a63      	ldr	r2, [pc, #396]	; (8005770 <HAL_DMA_Start_IT+0x200>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d03b      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a62      	ldr	r2, [pc, #392]	; (8005774 <HAL_DMA_Start_IT+0x204>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d036      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a60      	ldr	r2, [pc, #384]	; (8005778 <HAL_DMA_Start_IT+0x208>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d031      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a5f      	ldr	r2, [pc, #380]	; (800577c <HAL_DMA_Start_IT+0x20c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d02c      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a5d      	ldr	r2, [pc, #372]	; (8005780 <HAL_DMA_Start_IT+0x210>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d027      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a5c      	ldr	r2, [pc, #368]	; (8005784 <HAL_DMA_Start_IT+0x214>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d022      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5a      	ldr	r2, [pc, #360]	; (8005788 <HAL_DMA_Start_IT+0x218>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d01d      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a59      	ldr	r2, [pc, #356]	; (800578c <HAL_DMA_Start_IT+0x21c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d018      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a57      	ldr	r2, [pc, #348]	; (8005790 <HAL_DMA_Start_IT+0x220>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a56      	ldr	r2, [pc, #344]	; (8005794 <HAL_DMA_Start_IT+0x224>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00e      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a54      	ldr	r2, [pc, #336]	; (8005798 <HAL_DMA_Start_IT+0x228>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d009      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a53      	ldr	r2, [pc, #332]	; (800579c <HAL_DMA_Start_IT+0x22c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d004      	beq.n	800565e <HAL_DMA_Start_IT+0xee>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a51      	ldr	r2, [pc, #324]	; (80057a0 <HAL_DMA_Start_IT+0x230>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <HAL_DMA_Start_IT+0x100>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e007      	b.n	8005680 <HAL_DMA_Start_IT+0x110>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f001 fe6a 	bl	8007360 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a34      	ldr	r2, [pc, #208]	; (8005764 <HAL_DMA_Start_IT+0x1f4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d04a      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a33      	ldr	r2, [pc, #204]	; (8005768 <HAL_DMA_Start_IT+0x1f8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d045      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a31      	ldr	r2, [pc, #196]	; (800576c <HAL_DMA_Start_IT+0x1fc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d040      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a30      	ldr	r2, [pc, #192]	; (8005770 <HAL_DMA_Start_IT+0x200>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d03b      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a2e      	ldr	r2, [pc, #184]	; (8005774 <HAL_DMA_Start_IT+0x204>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d036      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a2d      	ldr	r2, [pc, #180]	; (8005778 <HAL_DMA_Start_IT+0x208>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d031      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a2b      	ldr	r2, [pc, #172]	; (800577c <HAL_DMA_Start_IT+0x20c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d02c      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <HAL_DMA_Start_IT+0x210>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d027      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a28      	ldr	r2, [pc, #160]	; (8005784 <HAL_DMA_Start_IT+0x214>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d022      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <HAL_DMA_Start_IT+0x218>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d01d      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a25      	ldr	r2, [pc, #148]	; (800578c <HAL_DMA_Start_IT+0x21c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d018      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a24      	ldr	r2, [pc, #144]	; (8005790 <HAL_DMA_Start_IT+0x220>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d013      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a22      	ldr	r2, [pc, #136]	; (8005794 <HAL_DMA_Start_IT+0x224>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00e      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a21      	ldr	r2, [pc, #132]	; (8005798 <HAL_DMA_Start_IT+0x228>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d009      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1f      	ldr	r2, [pc, #124]	; (800579c <HAL_DMA_Start_IT+0x22c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <HAL_DMA_Start_IT+0x1bc>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <HAL_DMA_Start_IT+0x230>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d101      	bne.n	8005730 <HAL_DMA_Start_IT+0x1c0>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <HAL_DMA_Start_IT+0x1c2>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d036      	beq.n	80057a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f023 021e 	bic.w	r2, r3, #30
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0216 	orr.w	r2, r2, #22
 8005748:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d03e      	beq.n	80057d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0208 	orr.w	r2, r2, #8
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e035      	b.n	80057d0 <HAL_DMA_Start_IT+0x260>
 8005764:	40020010 	.word	0x40020010
 8005768:	40020028 	.word	0x40020028
 800576c:	40020040 	.word	0x40020040
 8005770:	40020058 	.word	0x40020058
 8005774:	40020070 	.word	0x40020070
 8005778:	40020088 	.word	0x40020088
 800577c:	400200a0 	.word	0x400200a0
 8005780:	400200b8 	.word	0x400200b8
 8005784:	40020410 	.word	0x40020410
 8005788:	40020428 	.word	0x40020428
 800578c:	40020440 	.word	0x40020440
 8005790:	40020458 	.word	0x40020458
 8005794:	40020470 	.word	0x40020470
 8005798:	40020488 	.word	0x40020488
 800579c:	400204a0 	.word	0x400204a0
 80057a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f023 020e 	bic.w	r2, r3, #14
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 020a 	orr.w	r2, r2, #10
 80057b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0204 	orr.w	r2, r2, #4
 80057ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a83      	ldr	r2, [pc, #524]	; (80059e4 <HAL_DMA_Start_IT+0x474>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d072      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a82      	ldr	r2, [pc, #520]	; (80059e8 <HAL_DMA_Start_IT+0x478>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d06d      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a80      	ldr	r2, [pc, #512]	; (80059ec <HAL_DMA_Start_IT+0x47c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d068      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a7f      	ldr	r2, [pc, #508]	; (80059f0 <HAL_DMA_Start_IT+0x480>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d063      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a7d      	ldr	r2, [pc, #500]	; (80059f4 <HAL_DMA_Start_IT+0x484>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d05e      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a7c      	ldr	r2, [pc, #496]	; (80059f8 <HAL_DMA_Start_IT+0x488>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d059      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a7a      	ldr	r2, [pc, #488]	; (80059fc <HAL_DMA_Start_IT+0x48c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d054      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a79      	ldr	r2, [pc, #484]	; (8005a00 <HAL_DMA_Start_IT+0x490>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d04f      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a77      	ldr	r2, [pc, #476]	; (8005a04 <HAL_DMA_Start_IT+0x494>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d04a      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a76      	ldr	r2, [pc, #472]	; (8005a08 <HAL_DMA_Start_IT+0x498>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d045      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a74      	ldr	r2, [pc, #464]	; (8005a0c <HAL_DMA_Start_IT+0x49c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d040      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a73      	ldr	r2, [pc, #460]	; (8005a10 <HAL_DMA_Start_IT+0x4a0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d03b      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a71      	ldr	r2, [pc, #452]	; (8005a14 <HAL_DMA_Start_IT+0x4a4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d036      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a70      	ldr	r2, [pc, #448]	; (8005a18 <HAL_DMA_Start_IT+0x4a8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d031      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a6e      	ldr	r2, [pc, #440]	; (8005a1c <HAL_DMA_Start_IT+0x4ac>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d02c      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a6d      	ldr	r2, [pc, #436]	; (8005a20 <HAL_DMA_Start_IT+0x4b0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d027      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a6b      	ldr	r2, [pc, #428]	; (8005a24 <HAL_DMA_Start_IT+0x4b4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d022      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a6a      	ldr	r2, [pc, #424]	; (8005a28 <HAL_DMA_Start_IT+0x4b8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d01d      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a68      	ldr	r2, [pc, #416]	; (8005a2c <HAL_DMA_Start_IT+0x4bc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d018      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a67      	ldr	r2, [pc, #412]	; (8005a30 <HAL_DMA_Start_IT+0x4c0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a65      	ldr	r2, [pc, #404]	; (8005a34 <HAL_DMA_Start_IT+0x4c4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00e      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a64      	ldr	r2, [pc, #400]	; (8005a38 <HAL_DMA_Start_IT+0x4c8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d009      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a62      	ldr	r2, [pc, #392]	; (8005a3c <HAL_DMA_Start_IT+0x4cc>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_DMA_Start_IT+0x350>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a61      	ldr	r2, [pc, #388]	; (8005a40 <HAL_DMA_Start_IT+0x4d0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d101      	bne.n	80058c4 <HAL_DMA_Start_IT+0x354>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_DMA_Start_IT+0x356>
 80058c4:	2300      	movs	r3, #0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01a      	beq.n	8005900 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a37      	ldr	r2, [pc, #220]	; (80059e4 <HAL_DMA_Start_IT+0x474>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d04a      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a36      	ldr	r2, [pc, #216]	; (80059e8 <HAL_DMA_Start_IT+0x478>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d045      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a34      	ldr	r2, [pc, #208]	; (80059ec <HAL_DMA_Start_IT+0x47c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d040      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a33      	ldr	r2, [pc, #204]	; (80059f0 <HAL_DMA_Start_IT+0x480>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d03b      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a31      	ldr	r2, [pc, #196]	; (80059f4 <HAL_DMA_Start_IT+0x484>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d036      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a30      	ldr	r2, [pc, #192]	; (80059f8 <HAL_DMA_Start_IT+0x488>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d031      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a2e      	ldr	r2, [pc, #184]	; (80059fc <HAL_DMA_Start_IT+0x48c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d02c      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2d      	ldr	r2, [pc, #180]	; (8005a00 <HAL_DMA_Start_IT+0x490>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d027      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2b      	ldr	r2, [pc, #172]	; (8005a04 <HAL_DMA_Start_IT+0x494>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d022      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2a      	ldr	r2, [pc, #168]	; (8005a08 <HAL_DMA_Start_IT+0x498>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d01d      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a28      	ldr	r2, [pc, #160]	; (8005a0c <HAL_DMA_Start_IT+0x49c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a27      	ldr	r2, [pc, #156]	; (8005a10 <HAL_DMA_Start_IT+0x4a0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a25      	ldr	r2, [pc, #148]	; (8005a14 <HAL_DMA_Start_IT+0x4a4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a24      	ldr	r2, [pc, #144]	; (8005a18 <HAL_DMA_Start_IT+0x4a8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a22      	ldr	r2, [pc, #136]	; (8005a1c <HAL_DMA_Start_IT+0x4ac>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_DMA_Start_IT+0x430>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a21      	ldr	r2, [pc, #132]	; (8005a20 <HAL_DMA_Start_IT+0x4b0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d108      	bne.n	80059b2 <HAL_DMA_Start_IT+0x442>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e012      	b.n	80059d8 <HAL_DMA_Start_IT+0x468>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e009      	b.n	80059d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40020010 	.word	0x40020010
 80059e8:	40020028 	.word	0x40020028
 80059ec:	40020040 	.word	0x40020040
 80059f0:	40020058 	.word	0x40020058
 80059f4:	40020070 	.word	0x40020070
 80059f8:	40020088 	.word	0x40020088
 80059fc:	400200a0 	.word	0x400200a0
 8005a00:	400200b8 	.word	0x400200b8
 8005a04:	40020410 	.word	0x40020410
 8005a08:	40020428 	.word	0x40020428
 8005a0c:	40020440 	.word	0x40020440
 8005a10:	40020458 	.word	0x40020458
 8005a14:	40020470 	.word	0x40020470
 8005a18:	40020488 	.word	0x40020488
 8005a1c:	400204a0 	.word	0x400204a0
 8005a20:	400204b8 	.word	0x400204b8
 8005a24:	58025408 	.word	0x58025408
 8005a28:	5802541c 	.word	0x5802541c
 8005a2c:	58025430 	.word	0x58025430
 8005a30:	58025444 	.word	0x58025444
 8005a34:	58025458 	.word	0x58025458
 8005a38:	5802546c 	.word	0x5802546c
 8005a3c:	58025480 	.word	0x58025480
 8005a40:	58025494 	.word	0x58025494

08005a44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005a4c:	f7ff f8e8 	bl	8004c20 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e2dc      	b.n	8006016 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d008      	beq.n	8005a7a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2280      	movs	r2, #128	; 0x80
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e2cd      	b.n	8006016 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a76      	ldr	r2, [pc, #472]	; (8005c58 <HAL_DMA_Abort+0x214>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d04a      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a74      	ldr	r2, [pc, #464]	; (8005c5c <HAL_DMA_Abort+0x218>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d045      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a73      	ldr	r2, [pc, #460]	; (8005c60 <HAL_DMA_Abort+0x21c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d040      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a71      	ldr	r2, [pc, #452]	; (8005c64 <HAL_DMA_Abort+0x220>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d03b      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a70      	ldr	r2, [pc, #448]	; (8005c68 <HAL_DMA_Abort+0x224>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d036      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a6e      	ldr	r2, [pc, #440]	; (8005c6c <HAL_DMA_Abort+0x228>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d031      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a6d      	ldr	r2, [pc, #436]	; (8005c70 <HAL_DMA_Abort+0x22c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d02c      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a6b      	ldr	r2, [pc, #428]	; (8005c74 <HAL_DMA_Abort+0x230>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d027      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a6a      	ldr	r2, [pc, #424]	; (8005c78 <HAL_DMA_Abort+0x234>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d022      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a68      	ldr	r2, [pc, #416]	; (8005c7c <HAL_DMA_Abort+0x238>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01d      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a67      	ldr	r2, [pc, #412]	; (8005c80 <HAL_DMA_Abort+0x23c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d018      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a65      	ldr	r2, [pc, #404]	; (8005c84 <HAL_DMA_Abort+0x240>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a64      	ldr	r2, [pc, #400]	; (8005c88 <HAL_DMA_Abort+0x244>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00e      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a62      	ldr	r2, [pc, #392]	; (8005c8c <HAL_DMA_Abort+0x248>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a61      	ldr	r2, [pc, #388]	; (8005c90 <HAL_DMA_Abort+0x24c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_DMA_Abort+0xd6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a5f      	ldr	r2, [pc, #380]	; (8005c94 <HAL_DMA_Abort+0x250>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d101      	bne.n	8005b1e <HAL_DMA_Abort+0xda>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <HAL_DMA_Abort+0xdc>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d013      	beq.n	8005b4c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 021e 	bic.w	r2, r2, #30
 8005b32:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b42:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e00a      	b.n	8005b62 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 020e 	bic.w	r2, r2, #14
 8005b5a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a3c      	ldr	r2, [pc, #240]	; (8005c58 <HAL_DMA_Abort+0x214>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d072      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a3a      	ldr	r2, [pc, #232]	; (8005c5c <HAL_DMA_Abort+0x218>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d06d      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a39      	ldr	r2, [pc, #228]	; (8005c60 <HAL_DMA_Abort+0x21c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d068      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a37      	ldr	r2, [pc, #220]	; (8005c64 <HAL_DMA_Abort+0x220>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d063      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a36      	ldr	r2, [pc, #216]	; (8005c68 <HAL_DMA_Abort+0x224>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d05e      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a34      	ldr	r2, [pc, #208]	; (8005c6c <HAL_DMA_Abort+0x228>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d059      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a33      	ldr	r2, [pc, #204]	; (8005c70 <HAL_DMA_Abort+0x22c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d054      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a31      	ldr	r2, [pc, #196]	; (8005c74 <HAL_DMA_Abort+0x230>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d04f      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a30      	ldr	r2, [pc, #192]	; (8005c78 <HAL_DMA_Abort+0x234>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d04a      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2e      	ldr	r2, [pc, #184]	; (8005c7c <HAL_DMA_Abort+0x238>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d045      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2d      	ldr	r2, [pc, #180]	; (8005c80 <HAL_DMA_Abort+0x23c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d040      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2b      	ldr	r2, [pc, #172]	; (8005c84 <HAL_DMA_Abort+0x240>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d03b      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a2a      	ldr	r2, [pc, #168]	; (8005c88 <HAL_DMA_Abort+0x244>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d036      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a28      	ldr	r2, [pc, #160]	; (8005c8c <HAL_DMA_Abort+0x248>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d031      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a27      	ldr	r2, [pc, #156]	; (8005c90 <HAL_DMA_Abort+0x24c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d02c      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a25      	ldr	r2, [pc, #148]	; (8005c94 <HAL_DMA_Abort+0x250>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d027      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a24      	ldr	r2, [pc, #144]	; (8005c98 <HAL_DMA_Abort+0x254>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d022      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <HAL_DMA_Abort+0x258>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d01d      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a21      	ldr	r2, [pc, #132]	; (8005ca0 <HAL_DMA_Abort+0x25c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d018      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1f      	ldr	r2, [pc, #124]	; (8005ca4 <HAL_DMA_Abort+0x260>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ca8 <HAL_DMA_Abort+0x264>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00e      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <HAL_DMA_Abort+0x268>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <HAL_DMA_Abort+0x26c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <HAL_DMA_Abort+0x20e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a19      	ldr	r2, [pc, #100]	; (8005cb4 <HAL_DMA_Abort+0x270>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d132      	bne.n	8005cb8 <HAL_DMA_Abort+0x274>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e031      	b.n	8005cba <HAL_DMA_Abort+0x276>
 8005c56:	bf00      	nop
 8005c58:	40020010 	.word	0x40020010
 8005c5c:	40020028 	.word	0x40020028
 8005c60:	40020040 	.word	0x40020040
 8005c64:	40020058 	.word	0x40020058
 8005c68:	40020070 	.word	0x40020070
 8005c6c:	40020088 	.word	0x40020088
 8005c70:	400200a0 	.word	0x400200a0
 8005c74:	400200b8 	.word	0x400200b8
 8005c78:	40020410 	.word	0x40020410
 8005c7c:	40020428 	.word	0x40020428
 8005c80:	40020440 	.word	0x40020440
 8005c84:	40020458 	.word	0x40020458
 8005c88:	40020470 	.word	0x40020470
 8005c8c:	40020488 	.word	0x40020488
 8005c90:	400204a0 	.word	0x400204a0
 8005c94:	400204b8 	.word	0x400204b8
 8005c98:	58025408 	.word	0x58025408
 8005c9c:	5802541c 	.word	0x5802541c
 8005ca0:	58025430 	.word	0x58025430
 8005ca4:	58025444 	.word	0x58025444
 8005ca8:	58025458 	.word	0x58025458
 8005cac:	5802546c 	.word	0x5802546c
 8005cb0:	58025480 	.word	0x58025480
 8005cb4:	58025494 	.word	0x58025494
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a6d      	ldr	r2, [pc, #436]	; (8005e88 <HAL_DMA_Abort+0x444>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d04a      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a6b      	ldr	r2, [pc, #428]	; (8005e8c <HAL_DMA_Abort+0x448>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d045      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6a      	ldr	r2, [pc, #424]	; (8005e90 <HAL_DMA_Abort+0x44c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d040      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a68      	ldr	r2, [pc, #416]	; (8005e94 <HAL_DMA_Abort+0x450>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d03b      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a67      	ldr	r2, [pc, #412]	; (8005e98 <HAL_DMA_Abort+0x454>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d036      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a65      	ldr	r2, [pc, #404]	; (8005e9c <HAL_DMA_Abort+0x458>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d031      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a64      	ldr	r2, [pc, #400]	; (8005ea0 <HAL_DMA_Abort+0x45c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d02c      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a62      	ldr	r2, [pc, #392]	; (8005ea4 <HAL_DMA_Abort+0x460>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d027      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a61      	ldr	r2, [pc, #388]	; (8005ea8 <HAL_DMA_Abort+0x464>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d022      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a5f      	ldr	r2, [pc, #380]	; (8005eac <HAL_DMA_Abort+0x468>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01d      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a5e      	ldr	r2, [pc, #376]	; (8005eb0 <HAL_DMA_Abort+0x46c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d018      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a5c      	ldr	r2, [pc, #368]	; (8005eb4 <HAL_DMA_Abort+0x470>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a5b      	ldr	r2, [pc, #364]	; (8005eb8 <HAL_DMA_Abort+0x474>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a59      	ldr	r2, [pc, #356]	; (8005ebc <HAL_DMA_Abort+0x478>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a58      	ldr	r2, [pc, #352]	; (8005ec0 <HAL_DMA_Abort+0x47c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_DMA_Abort+0x32a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a56      	ldr	r2, [pc, #344]	; (8005ec4 <HAL_DMA_Abort+0x480>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d108      	bne.n	8005d80 <HAL_DMA_Abort+0x33c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e007      	b.n	8005d90 <HAL_DMA_Abort+0x34c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d90:	e013      	b.n	8005dba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d92:	f7fe ff45 	bl	8004c20 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b05      	cmp	r3, #5
 8005d9e:	d90c      	bls.n	8005dba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2203      	movs	r2, #3
 8005daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e12d      	b.n	8006016 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e5      	bne.n	8005d92 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <HAL_DMA_Abort+0x444>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d04a      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2d      	ldr	r2, [pc, #180]	; (8005e8c <HAL_DMA_Abort+0x448>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d045      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a2c      	ldr	r2, [pc, #176]	; (8005e90 <HAL_DMA_Abort+0x44c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d040      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2a      	ldr	r2, [pc, #168]	; (8005e94 <HAL_DMA_Abort+0x450>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d03b      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a29      	ldr	r2, [pc, #164]	; (8005e98 <HAL_DMA_Abort+0x454>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d036      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a27      	ldr	r2, [pc, #156]	; (8005e9c <HAL_DMA_Abort+0x458>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d031      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a26      	ldr	r2, [pc, #152]	; (8005ea0 <HAL_DMA_Abort+0x45c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d02c      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a24      	ldr	r2, [pc, #144]	; (8005ea4 <HAL_DMA_Abort+0x460>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d027      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a23      	ldr	r2, [pc, #140]	; (8005ea8 <HAL_DMA_Abort+0x464>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d022      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a21      	ldr	r2, [pc, #132]	; (8005eac <HAL_DMA_Abort+0x468>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01d      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <HAL_DMA_Abort+0x46c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d018      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1e      	ldr	r2, [pc, #120]	; (8005eb4 <HAL_DMA_Abort+0x470>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1d      	ldr	r2, [pc, #116]	; (8005eb8 <HAL_DMA_Abort+0x474>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00e      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	; (8005ebc <HAL_DMA_Abort+0x478>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d009      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1a      	ldr	r2, [pc, #104]	; (8005ec0 <HAL_DMA_Abort+0x47c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d004      	beq.n	8005e66 <HAL_DMA_Abort+0x422>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a18      	ldr	r2, [pc, #96]	; (8005ec4 <HAL_DMA_Abort+0x480>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d101      	bne.n	8005e6a <HAL_DMA_Abort+0x426>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <HAL_DMA_Abort+0x428>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d02b      	beq.n	8005ec8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	223f      	movs	r2, #63	; 0x3f
 8005e80:	409a      	lsls	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	609a      	str	r2, [r3, #8]
 8005e86:	e02a      	b.n	8005ede <HAL_DMA_Abort+0x49a>
 8005e88:	40020010 	.word	0x40020010
 8005e8c:	40020028 	.word	0x40020028
 8005e90:	40020040 	.word	0x40020040
 8005e94:	40020058 	.word	0x40020058
 8005e98:	40020070 	.word	0x40020070
 8005e9c:	40020088 	.word	0x40020088
 8005ea0:	400200a0 	.word	0x400200a0
 8005ea4:	400200b8 	.word	0x400200b8
 8005ea8:	40020410 	.word	0x40020410
 8005eac:	40020428 	.word	0x40020428
 8005eb0:	40020440 	.word	0x40020440
 8005eb4:	40020458 	.word	0x40020458
 8005eb8:	40020470 	.word	0x40020470
 8005ebc:	40020488 	.word	0x40020488
 8005ec0:	400204a0 	.word	0x400204a0
 8005ec4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	409a      	lsls	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a4f      	ldr	r2, [pc, #316]	; (8006020 <HAL_DMA_Abort+0x5dc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d072      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a4d      	ldr	r2, [pc, #308]	; (8006024 <HAL_DMA_Abort+0x5e0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d06d      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a4c      	ldr	r2, [pc, #304]	; (8006028 <HAL_DMA_Abort+0x5e4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d068      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a4a      	ldr	r2, [pc, #296]	; (800602c <HAL_DMA_Abort+0x5e8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d063      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a49      	ldr	r2, [pc, #292]	; (8006030 <HAL_DMA_Abort+0x5ec>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d05e      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a47      	ldr	r2, [pc, #284]	; (8006034 <HAL_DMA_Abort+0x5f0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d059      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a46      	ldr	r2, [pc, #280]	; (8006038 <HAL_DMA_Abort+0x5f4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d054      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a44      	ldr	r2, [pc, #272]	; (800603c <HAL_DMA_Abort+0x5f8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04f      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a43      	ldr	r2, [pc, #268]	; (8006040 <HAL_DMA_Abort+0x5fc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d04a      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a41      	ldr	r2, [pc, #260]	; (8006044 <HAL_DMA_Abort+0x600>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d045      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a40      	ldr	r2, [pc, #256]	; (8006048 <HAL_DMA_Abort+0x604>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d040      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a3e      	ldr	r2, [pc, #248]	; (800604c <HAL_DMA_Abort+0x608>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d03b      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a3d      	ldr	r2, [pc, #244]	; (8006050 <HAL_DMA_Abort+0x60c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d036      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a3b      	ldr	r2, [pc, #236]	; (8006054 <HAL_DMA_Abort+0x610>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d031      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a3a      	ldr	r2, [pc, #232]	; (8006058 <HAL_DMA_Abort+0x614>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d02c      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a38      	ldr	r2, [pc, #224]	; (800605c <HAL_DMA_Abort+0x618>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d027      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a37      	ldr	r2, [pc, #220]	; (8006060 <HAL_DMA_Abort+0x61c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d022      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a35      	ldr	r2, [pc, #212]	; (8006064 <HAL_DMA_Abort+0x620>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01d      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a34      	ldr	r2, [pc, #208]	; (8006068 <HAL_DMA_Abort+0x624>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d018      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a32      	ldr	r2, [pc, #200]	; (800606c <HAL_DMA_Abort+0x628>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d013      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a31      	ldr	r2, [pc, #196]	; (8006070 <HAL_DMA_Abort+0x62c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00e      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a2f      	ldr	r2, [pc, #188]	; (8006074 <HAL_DMA_Abort+0x630>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d009      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a2e      	ldr	r2, [pc, #184]	; (8006078 <HAL_DMA_Abort+0x634>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_DMA_Abort+0x58a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2c      	ldr	r2, [pc, #176]	; (800607c <HAL_DMA_Abort+0x638>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d101      	bne.n	8005fd2 <HAL_DMA_Abort+0x58e>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <HAL_DMA_Abort+0x590>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d015      	beq.n	8006004 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fe0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ff8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006002:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40020010 	.word	0x40020010
 8006024:	40020028 	.word	0x40020028
 8006028:	40020040 	.word	0x40020040
 800602c:	40020058 	.word	0x40020058
 8006030:	40020070 	.word	0x40020070
 8006034:	40020088 	.word	0x40020088
 8006038:	400200a0 	.word	0x400200a0
 800603c:	400200b8 	.word	0x400200b8
 8006040:	40020410 	.word	0x40020410
 8006044:	40020428 	.word	0x40020428
 8006048:	40020440 	.word	0x40020440
 800604c:	40020458 	.word	0x40020458
 8006050:	40020470 	.word	0x40020470
 8006054:	40020488 	.word	0x40020488
 8006058:	400204a0 	.word	0x400204a0
 800605c:	400204b8 	.word	0x400204b8
 8006060:	58025408 	.word	0x58025408
 8006064:	5802541c 	.word	0x5802541c
 8006068:	58025430 	.word	0x58025430
 800606c:	58025444 	.word	0x58025444
 8006070:	58025458 	.word	0x58025458
 8006074:	5802546c 	.word	0x5802546c
 8006078:	58025480 	.word	0x58025480
 800607c:	58025494 	.word	0x58025494

08006080 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e237      	b.n	8006502 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d004      	beq.n	80060a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2280      	movs	r2, #128	; 0x80
 80060a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e22c      	b.n	8006502 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a5c      	ldr	r2, [pc, #368]	; (8006220 <HAL_DMA_Abort_IT+0x1a0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d04a      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a5b      	ldr	r2, [pc, #364]	; (8006224 <HAL_DMA_Abort_IT+0x1a4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d045      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a59      	ldr	r2, [pc, #356]	; (8006228 <HAL_DMA_Abort_IT+0x1a8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d040      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a58      	ldr	r2, [pc, #352]	; (800622c <HAL_DMA_Abort_IT+0x1ac>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d03b      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a56      	ldr	r2, [pc, #344]	; (8006230 <HAL_DMA_Abort_IT+0x1b0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d036      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a55      	ldr	r2, [pc, #340]	; (8006234 <HAL_DMA_Abort_IT+0x1b4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d031      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a53      	ldr	r2, [pc, #332]	; (8006238 <HAL_DMA_Abort_IT+0x1b8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d02c      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a52      	ldr	r2, [pc, #328]	; (800623c <HAL_DMA_Abort_IT+0x1bc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d027      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a50      	ldr	r2, [pc, #320]	; (8006240 <HAL_DMA_Abort_IT+0x1c0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a4f      	ldr	r2, [pc, #316]	; (8006244 <HAL_DMA_Abort_IT+0x1c4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d01d      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a4d      	ldr	r2, [pc, #308]	; (8006248 <HAL_DMA_Abort_IT+0x1c8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a4c      	ldr	r2, [pc, #304]	; (800624c <HAL_DMA_Abort_IT+0x1cc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a4a      	ldr	r2, [pc, #296]	; (8006250 <HAL_DMA_Abort_IT+0x1d0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a49      	ldr	r2, [pc, #292]	; (8006254 <HAL_DMA_Abort_IT+0x1d4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a47      	ldr	r2, [pc, #284]	; (8006258 <HAL_DMA_Abort_IT+0x1d8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_DMA_Abort_IT+0xc8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a46      	ldr	r2, [pc, #280]	; (800625c <HAL_DMA_Abort_IT+0x1dc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d101      	bne.n	800614c <HAL_DMA_Abort_IT+0xcc>
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <HAL_DMA_Abort_IT+0xce>
 800614c:	2300      	movs	r3, #0
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8086 	beq.w	8006260 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2204      	movs	r2, #4
 8006158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a2f      	ldr	r2, [pc, #188]	; (8006220 <HAL_DMA_Abort_IT+0x1a0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d04a      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a2e      	ldr	r2, [pc, #184]	; (8006224 <HAL_DMA_Abort_IT+0x1a4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d045      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2c      	ldr	r2, [pc, #176]	; (8006228 <HAL_DMA_Abort_IT+0x1a8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d040      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2b      	ldr	r2, [pc, #172]	; (800622c <HAL_DMA_Abort_IT+0x1ac>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d03b      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a29      	ldr	r2, [pc, #164]	; (8006230 <HAL_DMA_Abort_IT+0x1b0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d036      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a28      	ldr	r2, [pc, #160]	; (8006234 <HAL_DMA_Abort_IT+0x1b4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d031      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a26      	ldr	r2, [pc, #152]	; (8006238 <HAL_DMA_Abort_IT+0x1b8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d02c      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a25      	ldr	r2, [pc, #148]	; (800623c <HAL_DMA_Abort_IT+0x1bc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d027      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a23      	ldr	r2, [pc, #140]	; (8006240 <HAL_DMA_Abort_IT+0x1c0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d022      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a22      	ldr	r2, [pc, #136]	; (8006244 <HAL_DMA_Abort_IT+0x1c4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d01d      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a20      	ldr	r2, [pc, #128]	; (8006248 <HAL_DMA_Abort_IT+0x1c8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d018      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1f      	ldr	r2, [pc, #124]	; (800624c <HAL_DMA_Abort_IT+0x1cc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1d      	ldr	r2, [pc, #116]	; (8006250 <HAL_DMA_Abort_IT+0x1d0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00e      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <HAL_DMA_Abort_IT+0x1d4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d009      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <HAL_DMA_Abort_IT+0x1d8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <HAL_DMA_Abort_IT+0x17c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a19      	ldr	r2, [pc, #100]	; (800625c <HAL_DMA_Abort_IT+0x1dc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d108      	bne.n	800620e <HAL_DMA_Abort_IT+0x18e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	e178      	b.n	8006500 <HAL_DMA_Abort_IT+0x480>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e16f      	b.n	8006500 <HAL_DMA_Abort_IT+0x480>
 8006220:	40020010 	.word	0x40020010
 8006224:	40020028 	.word	0x40020028
 8006228:	40020040 	.word	0x40020040
 800622c:	40020058 	.word	0x40020058
 8006230:	40020070 	.word	0x40020070
 8006234:	40020088 	.word	0x40020088
 8006238:	400200a0 	.word	0x400200a0
 800623c:	400200b8 	.word	0x400200b8
 8006240:	40020410 	.word	0x40020410
 8006244:	40020428 	.word	0x40020428
 8006248:	40020440 	.word	0x40020440
 800624c:	40020458 	.word	0x40020458
 8006250:	40020470 	.word	0x40020470
 8006254:	40020488 	.word	0x40020488
 8006258:	400204a0 	.word	0x400204a0
 800625c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 020e 	bic.w	r2, r2, #14
 800626e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a6c      	ldr	r2, [pc, #432]	; (8006428 <HAL_DMA_Abort_IT+0x3a8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d04a      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a6b      	ldr	r2, [pc, #428]	; (800642c <HAL_DMA_Abort_IT+0x3ac>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d045      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a69      	ldr	r2, [pc, #420]	; (8006430 <HAL_DMA_Abort_IT+0x3b0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d040      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a68      	ldr	r2, [pc, #416]	; (8006434 <HAL_DMA_Abort_IT+0x3b4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d03b      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a66      	ldr	r2, [pc, #408]	; (8006438 <HAL_DMA_Abort_IT+0x3b8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d036      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a65      	ldr	r2, [pc, #404]	; (800643c <HAL_DMA_Abort_IT+0x3bc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d031      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a63      	ldr	r2, [pc, #396]	; (8006440 <HAL_DMA_Abort_IT+0x3c0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d02c      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a62      	ldr	r2, [pc, #392]	; (8006444 <HAL_DMA_Abort_IT+0x3c4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d027      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a60      	ldr	r2, [pc, #384]	; (8006448 <HAL_DMA_Abort_IT+0x3c8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d022      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a5f      	ldr	r2, [pc, #380]	; (800644c <HAL_DMA_Abort_IT+0x3cc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d01d      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a5d      	ldr	r2, [pc, #372]	; (8006450 <HAL_DMA_Abort_IT+0x3d0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d018      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a5c      	ldr	r2, [pc, #368]	; (8006454 <HAL_DMA_Abort_IT+0x3d4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d013      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a5a      	ldr	r2, [pc, #360]	; (8006458 <HAL_DMA_Abort_IT+0x3d8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00e      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a59      	ldr	r2, [pc, #356]	; (800645c <HAL_DMA_Abort_IT+0x3dc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d009      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a57      	ldr	r2, [pc, #348]	; (8006460 <HAL_DMA_Abort_IT+0x3e0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_DMA_Abort_IT+0x290>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a56      	ldr	r2, [pc, #344]	; (8006464 <HAL_DMA_Abort_IT+0x3e4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d108      	bne.n	8006322 <HAL_DMA_Abort_IT+0x2a2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e007      	b.n	8006332 <HAL_DMA_Abort_IT+0x2b2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a3c      	ldr	r2, [pc, #240]	; (8006428 <HAL_DMA_Abort_IT+0x3a8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d072      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a3a      	ldr	r2, [pc, #232]	; (800642c <HAL_DMA_Abort_IT+0x3ac>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d06d      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a39      	ldr	r2, [pc, #228]	; (8006430 <HAL_DMA_Abort_IT+0x3b0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d068      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a37      	ldr	r2, [pc, #220]	; (8006434 <HAL_DMA_Abort_IT+0x3b4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d063      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a36      	ldr	r2, [pc, #216]	; (8006438 <HAL_DMA_Abort_IT+0x3b8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d05e      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a34      	ldr	r2, [pc, #208]	; (800643c <HAL_DMA_Abort_IT+0x3bc>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d059      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a33      	ldr	r2, [pc, #204]	; (8006440 <HAL_DMA_Abort_IT+0x3c0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d054      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a31      	ldr	r2, [pc, #196]	; (8006444 <HAL_DMA_Abort_IT+0x3c4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d04f      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a30      	ldr	r2, [pc, #192]	; (8006448 <HAL_DMA_Abort_IT+0x3c8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d04a      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a2e      	ldr	r2, [pc, #184]	; (800644c <HAL_DMA_Abort_IT+0x3cc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d045      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a2d      	ldr	r2, [pc, #180]	; (8006450 <HAL_DMA_Abort_IT+0x3d0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d040      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2b      	ldr	r2, [pc, #172]	; (8006454 <HAL_DMA_Abort_IT+0x3d4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d03b      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <HAL_DMA_Abort_IT+0x3d8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d036      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a28      	ldr	r2, [pc, #160]	; (800645c <HAL_DMA_Abort_IT+0x3dc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d031      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a27      	ldr	r2, [pc, #156]	; (8006460 <HAL_DMA_Abort_IT+0x3e0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d02c      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a25      	ldr	r2, [pc, #148]	; (8006464 <HAL_DMA_Abort_IT+0x3e4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d027      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a24      	ldr	r2, [pc, #144]	; (8006468 <HAL_DMA_Abort_IT+0x3e8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d022      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <HAL_DMA_Abort_IT+0x3ec>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01d      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a21      	ldr	r2, [pc, #132]	; (8006470 <HAL_DMA_Abort_IT+0x3f0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d018      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <HAL_DMA_Abort_IT+0x3f4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <HAL_DMA_Abort_IT+0x3f8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00e      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1c      	ldr	r2, [pc, #112]	; (800647c <HAL_DMA_Abort_IT+0x3fc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d009      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <HAL_DMA_Abort_IT+0x400>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_DMA_Abort_IT+0x3a2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a19      	ldr	r2, [pc, #100]	; (8006484 <HAL_DMA_Abort_IT+0x404>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d132      	bne.n	8006488 <HAL_DMA_Abort_IT+0x408>
 8006422:	2301      	movs	r3, #1
 8006424:	e031      	b.n	800648a <HAL_DMA_Abort_IT+0x40a>
 8006426:	bf00      	nop
 8006428:	40020010 	.word	0x40020010
 800642c:	40020028 	.word	0x40020028
 8006430:	40020040 	.word	0x40020040
 8006434:	40020058 	.word	0x40020058
 8006438:	40020070 	.word	0x40020070
 800643c:	40020088 	.word	0x40020088
 8006440:	400200a0 	.word	0x400200a0
 8006444:	400200b8 	.word	0x400200b8
 8006448:	40020410 	.word	0x40020410
 800644c:	40020428 	.word	0x40020428
 8006450:	40020440 	.word	0x40020440
 8006454:	40020458 	.word	0x40020458
 8006458:	40020470 	.word	0x40020470
 800645c:	40020488 	.word	0x40020488
 8006460:	400204a0 	.word	0x400204a0
 8006464:	400204b8 	.word	0x400204b8
 8006468:	58025408 	.word	0x58025408
 800646c:	5802541c 	.word	0x5802541c
 8006470:	58025430 	.word	0x58025430
 8006474:	58025444 	.word	0x58025444
 8006478:	58025458 	.word	0x58025458
 800647c:	5802546c 	.word	0x5802546c
 8006480:	58025480 	.word	0x58025480
 8006484:	58025494 	.word	0x58025494
 8006488:	2300      	movs	r3, #0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d028      	beq.n	80064e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800649c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	2201      	movs	r2, #1
 80064ae:	409a      	lsls	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00c      	beq.n	80064e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop

0800650c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006518:	4b67      	ldr	r3, [pc, #412]	; (80066b8 <HAL_DMA_IRQHandler+0x1ac>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a67      	ldr	r2, [pc, #412]	; (80066bc <HAL_DMA_IRQHandler+0x1b0>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	0a9b      	lsrs	r3, r3, #10
 8006524:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006530:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a5f      	ldr	r2, [pc, #380]	; (80066c0 <HAL_DMA_IRQHandler+0x1b4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d04a      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a5d      	ldr	r2, [pc, #372]	; (80066c4 <HAL_DMA_IRQHandler+0x1b8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d045      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a5c      	ldr	r2, [pc, #368]	; (80066c8 <HAL_DMA_IRQHandler+0x1bc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d040      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a5a      	ldr	r2, [pc, #360]	; (80066cc <HAL_DMA_IRQHandler+0x1c0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d03b      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a59      	ldr	r2, [pc, #356]	; (80066d0 <HAL_DMA_IRQHandler+0x1c4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d036      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a57      	ldr	r2, [pc, #348]	; (80066d4 <HAL_DMA_IRQHandler+0x1c8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d031      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a56      	ldr	r2, [pc, #344]	; (80066d8 <HAL_DMA_IRQHandler+0x1cc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d02c      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a54      	ldr	r2, [pc, #336]	; (80066dc <HAL_DMA_IRQHandler+0x1d0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d027      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a53      	ldr	r2, [pc, #332]	; (80066e0 <HAL_DMA_IRQHandler+0x1d4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d022      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a51      	ldr	r2, [pc, #324]	; (80066e4 <HAL_DMA_IRQHandler+0x1d8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d01d      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a50      	ldr	r2, [pc, #320]	; (80066e8 <HAL_DMA_IRQHandler+0x1dc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d018      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a4e      	ldr	r2, [pc, #312]	; (80066ec <HAL_DMA_IRQHandler+0x1e0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d013      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a4d      	ldr	r2, [pc, #308]	; (80066f0 <HAL_DMA_IRQHandler+0x1e4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00e      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a4b      	ldr	r2, [pc, #300]	; (80066f4 <HAL_DMA_IRQHandler+0x1e8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d009      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a4a      	ldr	r2, [pc, #296]	; (80066f8 <HAL_DMA_IRQHandler+0x1ec>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d004      	beq.n	80065de <HAL_DMA_IRQHandler+0xd2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a48      	ldr	r2, [pc, #288]	; (80066fc <HAL_DMA_IRQHandler+0x1f0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d101      	bne.n	80065e2 <HAL_DMA_IRQHandler+0xd6>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <HAL_DMA_IRQHandler+0xd8>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 842b 	beq.w	8006e40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	2208      	movs	r2, #8
 80065f4:	409a      	lsls	r2, r3
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80a2 	beq.w	8006744 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a2e      	ldr	r2, [pc, #184]	; (80066c0 <HAL_DMA_IRQHandler+0x1b4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d04a      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a2d      	ldr	r2, [pc, #180]	; (80066c4 <HAL_DMA_IRQHandler+0x1b8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d045      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a2b      	ldr	r2, [pc, #172]	; (80066c8 <HAL_DMA_IRQHandler+0x1bc>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d040      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2a      	ldr	r2, [pc, #168]	; (80066cc <HAL_DMA_IRQHandler+0x1c0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d03b      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a28      	ldr	r2, [pc, #160]	; (80066d0 <HAL_DMA_IRQHandler+0x1c4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d036      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a27      	ldr	r2, [pc, #156]	; (80066d4 <HAL_DMA_IRQHandler+0x1c8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d031      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a25      	ldr	r2, [pc, #148]	; (80066d8 <HAL_DMA_IRQHandler+0x1cc>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d02c      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a24      	ldr	r2, [pc, #144]	; (80066dc <HAL_DMA_IRQHandler+0x1d0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d027      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a22      	ldr	r2, [pc, #136]	; (80066e0 <HAL_DMA_IRQHandler+0x1d4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d022      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <HAL_DMA_IRQHandler+0x1d8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d01d      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <HAL_DMA_IRQHandler+0x1dc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d018      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1e      	ldr	r2, [pc, #120]	; (80066ec <HAL_DMA_IRQHandler+0x1e0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <HAL_DMA_IRQHandler+0x1e4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00e      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <HAL_DMA_IRQHandler+0x1e8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d009      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <HAL_DMA_IRQHandler+0x1ec>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d004      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x194>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a18      	ldr	r2, [pc, #96]	; (80066fc <HAL_DMA_IRQHandler+0x1f0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d12f      	bne.n	8006700 <HAL_DMA_IRQHandler+0x1f4>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bf14      	ite	ne
 80066ae:	2301      	movne	r3, #1
 80066b0:	2300      	moveq	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	e02e      	b.n	8006714 <HAL_DMA_IRQHandler+0x208>
 80066b6:	bf00      	nop
 80066b8:	2400002c 	.word	0x2400002c
 80066bc:	1b4e81b5 	.word	0x1b4e81b5
 80066c0:	40020010 	.word	0x40020010
 80066c4:	40020028 	.word	0x40020028
 80066c8:	40020040 	.word	0x40020040
 80066cc:	40020058 	.word	0x40020058
 80066d0:	40020070 	.word	0x40020070
 80066d4:	40020088 	.word	0x40020088
 80066d8:	400200a0 	.word	0x400200a0
 80066dc:	400200b8 	.word	0x400200b8
 80066e0:	40020410 	.word	0x40020410
 80066e4:	40020428 	.word	0x40020428
 80066e8:	40020440 	.word	0x40020440
 80066ec:	40020458 	.word	0x40020458
 80066f0:	40020470 	.word	0x40020470
 80066f4:	40020488 	.word	0x40020488
 80066f8:	400204a0 	.word	0x400204a0
 80066fc:	400204b8 	.word	0x400204b8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	bf14      	ite	ne
 800670e:	2301      	movne	r3, #1
 8006710:	2300      	moveq	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d015      	beq.n	8006744 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0204 	bic.w	r2, r2, #4
 8006726:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	2208      	movs	r2, #8
 8006732:	409a      	lsls	r2, r3
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673c:	f043 0201 	orr.w	r2, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d06e      	beq.n	8006838 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a69      	ldr	r2, [pc, #420]	; (8006904 <HAL_DMA_IRQHandler+0x3f8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d04a      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a67      	ldr	r2, [pc, #412]	; (8006908 <HAL_DMA_IRQHandler+0x3fc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d045      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a66      	ldr	r2, [pc, #408]	; (800690c <HAL_DMA_IRQHandler+0x400>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d040      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a64      	ldr	r2, [pc, #400]	; (8006910 <HAL_DMA_IRQHandler+0x404>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d03b      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a63      	ldr	r2, [pc, #396]	; (8006914 <HAL_DMA_IRQHandler+0x408>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d036      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a61      	ldr	r2, [pc, #388]	; (8006918 <HAL_DMA_IRQHandler+0x40c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d031      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a60      	ldr	r2, [pc, #384]	; (800691c <HAL_DMA_IRQHandler+0x410>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d02c      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a5e      	ldr	r2, [pc, #376]	; (8006920 <HAL_DMA_IRQHandler+0x414>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d027      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a5d      	ldr	r2, [pc, #372]	; (8006924 <HAL_DMA_IRQHandler+0x418>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d022      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a5b      	ldr	r2, [pc, #364]	; (8006928 <HAL_DMA_IRQHandler+0x41c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01d      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a5a      	ldr	r2, [pc, #360]	; (800692c <HAL_DMA_IRQHandler+0x420>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d018      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a58      	ldr	r2, [pc, #352]	; (8006930 <HAL_DMA_IRQHandler+0x424>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d013      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a57      	ldr	r2, [pc, #348]	; (8006934 <HAL_DMA_IRQHandler+0x428>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00e      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a55      	ldr	r2, [pc, #340]	; (8006938 <HAL_DMA_IRQHandler+0x42c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d009      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a54      	ldr	r2, [pc, #336]	; (800693c <HAL_DMA_IRQHandler+0x430>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d004      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2ee>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a52      	ldr	r2, [pc, #328]	; (8006940 <HAL_DMA_IRQHandler+0x434>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d10a      	bne.n	8006810 <HAL_DMA_IRQHandler+0x304>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b00      	cmp	r3, #0
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	e003      	b.n	8006818 <HAL_DMA_IRQHandler+0x30c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00d      	beq.n	8006838 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	2201      	movs	r2, #1
 8006826:	409a      	lsls	r2, r3
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006830:	f043 0202 	orr.w	r2, r3, #2
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	2204      	movs	r2, #4
 8006842:	409a      	lsls	r2, r3
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	4013      	ands	r3, r2
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 808f 	beq.w	800696c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a2c      	ldr	r2, [pc, #176]	; (8006904 <HAL_DMA_IRQHandler+0x3f8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04a      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a2a      	ldr	r2, [pc, #168]	; (8006908 <HAL_DMA_IRQHandler+0x3fc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d045      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a29      	ldr	r2, [pc, #164]	; (800690c <HAL_DMA_IRQHandler+0x400>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d040      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a27      	ldr	r2, [pc, #156]	; (8006910 <HAL_DMA_IRQHandler+0x404>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d03b      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a26      	ldr	r2, [pc, #152]	; (8006914 <HAL_DMA_IRQHandler+0x408>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d036      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a24      	ldr	r2, [pc, #144]	; (8006918 <HAL_DMA_IRQHandler+0x40c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d031      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a23      	ldr	r2, [pc, #140]	; (800691c <HAL_DMA_IRQHandler+0x410>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d02c      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a21      	ldr	r2, [pc, #132]	; (8006920 <HAL_DMA_IRQHandler+0x414>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d027      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a20      	ldr	r2, [pc, #128]	; (8006924 <HAL_DMA_IRQHandler+0x418>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <HAL_DMA_IRQHandler+0x41c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01d      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1d      	ldr	r2, [pc, #116]	; (800692c <HAL_DMA_IRQHandler+0x420>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <HAL_DMA_IRQHandler+0x424>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <HAL_DMA_IRQHandler+0x428>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a18      	ldr	r2, [pc, #96]	; (8006938 <HAL_DMA_IRQHandler+0x42c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a17      	ldr	r2, [pc, #92]	; (800693c <HAL_DMA_IRQHandler+0x430>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_DMA_IRQHandler+0x3e2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_DMA_IRQHandler+0x434>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d12a      	bne.n	8006944 <HAL_DMA_IRQHandler+0x438>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf14      	ite	ne
 80068fc:	2301      	movne	r3, #1
 80068fe:	2300      	moveq	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	e023      	b.n	800694c <HAL_DMA_IRQHandler+0x440>
 8006904:	40020010 	.word	0x40020010
 8006908:	40020028 	.word	0x40020028
 800690c:	40020040 	.word	0x40020040
 8006910:	40020058 	.word	0x40020058
 8006914:	40020070 	.word	0x40020070
 8006918:	40020088 	.word	0x40020088
 800691c:	400200a0 	.word	0x400200a0
 8006920:	400200b8 	.word	0x400200b8
 8006924:	40020410 	.word	0x40020410
 8006928:	40020428 	.word	0x40020428
 800692c:	40020440 	.word	0x40020440
 8006930:	40020458 	.word	0x40020458
 8006934:	40020470 	.word	0x40020470
 8006938:	40020488 	.word	0x40020488
 800693c:	400204a0 	.word	0x400204a0
 8006940:	400204b8 	.word	0x400204b8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00d      	beq.n	800696c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2204      	movs	r2, #4
 800695a:	409a      	lsls	r2, r3
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006964:	f043 0204 	orr.w	r2, r3, #4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006970:	f003 031f 	and.w	r3, r3, #31
 8006974:	2210      	movs	r2, #16
 8006976:	409a      	lsls	r2, r3
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80a6 	beq.w	8006ace <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a85      	ldr	r2, [pc, #532]	; (8006b9c <HAL_DMA_IRQHandler+0x690>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d04a      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a83      	ldr	r2, [pc, #524]	; (8006ba0 <HAL_DMA_IRQHandler+0x694>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d045      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a82      	ldr	r2, [pc, #520]	; (8006ba4 <HAL_DMA_IRQHandler+0x698>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d040      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a80      	ldr	r2, [pc, #512]	; (8006ba8 <HAL_DMA_IRQHandler+0x69c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d03b      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a7f      	ldr	r2, [pc, #508]	; (8006bac <HAL_DMA_IRQHandler+0x6a0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d036      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a7d      	ldr	r2, [pc, #500]	; (8006bb0 <HAL_DMA_IRQHandler+0x6a4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d031      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a7c      	ldr	r2, [pc, #496]	; (8006bb4 <HAL_DMA_IRQHandler+0x6a8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d02c      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a7a      	ldr	r2, [pc, #488]	; (8006bb8 <HAL_DMA_IRQHandler+0x6ac>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d027      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a79      	ldr	r2, [pc, #484]	; (8006bbc <HAL_DMA_IRQHandler+0x6b0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d022      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a77      	ldr	r2, [pc, #476]	; (8006bc0 <HAL_DMA_IRQHandler+0x6b4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01d      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a76      	ldr	r2, [pc, #472]	; (8006bc4 <HAL_DMA_IRQHandler+0x6b8>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a74      	ldr	r2, [pc, #464]	; (8006bc8 <HAL_DMA_IRQHandler+0x6bc>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a73      	ldr	r2, [pc, #460]	; (8006bcc <HAL_DMA_IRQHandler+0x6c0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a71      	ldr	r2, [pc, #452]	; (8006bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a70      	ldr	r2, [pc, #448]	; (8006bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x516>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a6e      	ldr	r2, [pc, #440]	; (8006bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10a      	bne.n	8006a38 <HAL_DMA_IRQHandler+0x52c>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bf14      	ite	ne
 8006a30:	2301      	movne	r3, #1
 8006a32:	2300      	moveq	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	e009      	b.n	8006a4c <HAL_DMA_IRQHandler+0x540>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf14      	ite	ne
 8006a46:	2301      	movne	r3, #1
 8006a48:	2300      	moveq	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d03e      	beq.n	8006ace <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	2210      	movs	r2, #16
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d018      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d108      	bne.n	8006a8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d024      	beq.n	8006ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
 8006a8c:	e01f      	b.n	8006ace <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01b      	beq.n	8006ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
 8006a9e:	e016      	b.n	8006ace <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0208 	bic.w	r2, r2, #8
 8006abc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	4013      	ands	r3, r2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 8110 	beq.w	8006d04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a2c      	ldr	r2, [pc, #176]	; (8006b9c <HAL_DMA_IRQHandler+0x690>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d04a      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a2b      	ldr	r2, [pc, #172]	; (8006ba0 <HAL_DMA_IRQHandler+0x694>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d045      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a29      	ldr	r2, [pc, #164]	; (8006ba4 <HAL_DMA_IRQHandler+0x698>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d040      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a28      	ldr	r2, [pc, #160]	; (8006ba8 <HAL_DMA_IRQHandler+0x69c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d03b      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a26      	ldr	r2, [pc, #152]	; (8006bac <HAL_DMA_IRQHandler+0x6a0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d036      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a25      	ldr	r2, [pc, #148]	; (8006bb0 <HAL_DMA_IRQHandler+0x6a4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d031      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a23      	ldr	r2, [pc, #140]	; (8006bb4 <HAL_DMA_IRQHandler+0x6a8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d02c      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a22      	ldr	r2, [pc, #136]	; (8006bb8 <HAL_DMA_IRQHandler+0x6ac>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d027      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a20      	ldr	r2, [pc, #128]	; (8006bbc <HAL_DMA_IRQHandler+0x6b0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d022      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <HAL_DMA_IRQHandler+0x6b4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d01d      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <HAL_DMA_IRQHandler+0x6b8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d018      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1c      	ldr	r2, [pc, #112]	; (8006bc8 <HAL_DMA_IRQHandler+0x6bc>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <HAL_DMA_IRQHandler+0x6c0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a17      	ldr	r2, [pc, #92]	; (8006bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x678>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a16      	ldr	r2, [pc, #88]	; (8006bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d12b      	bne.n	8006bdc <HAL_DMA_IRQHandler+0x6d0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0310 	and.w	r3, r3, #16
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	2300      	moveq	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	e02a      	b.n	8006bf0 <HAL_DMA_IRQHandler+0x6e4>
 8006b9a:	bf00      	nop
 8006b9c:	40020010 	.word	0x40020010
 8006ba0:	40020028 	.word	0x40020028
 8006ba4:	40020040 	.word	0x40020040
 8006ba8:	40020058 	.word	0x40020058
 8006bac:	40020070 	.word	0x40020070
 8006bb0:	40020088 	.word	0x40020088
 8006bb4:	400200a0 	.word	0x400200a0
 8006bb8:	400200b8 	.word	0x400200b8
 8006bbc:	40020410 	.word	0x40020410
 8006bc0:	40020428 	.word	0x40020428
 8006bc4:	40020440 	.word	0x40020440
 8006bc8:	40020458 	.word	0x40020458
 8006bcc:	40020470 	.word	0x40020470
 8006bd0:	40020488 	.word	0x40020488
 8006bd4:	400204a0 	.word	0x400204a0
 8006bd8:	400204b8 	.word	0x400204b8
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf14      	ite	ne
 8006bea:	2301      	movne	r3, #1
 8006bec:	2300      	moveq	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8087 	beq.w	8006d04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	2220      	movs	r2, #32
 8006c00:	409a      	lsls	r2, r3
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d139      	bne.n	8006c86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0216 	bic.w	r2, r2, #22
 8006c20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695a      	ldr	r2, [r3, #20]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d103      	bne.n	8006c42 <HAL_DMA_IRQHandler+0x736>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d007      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0208 	bic.w	r2, r2, #8
 8006c50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c56:	f003 031f 	and.w	r3, r3, #31
 8006c5a:	223f      	movs	r2, #63	; 0x3f
 8006c5c:	409a      	lsls	r2, r3
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 834a 	beq.w	8007310 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
          }
          return;
 8006c84:	e344      	b.n	8007310 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d018      	beq.n	8006cc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d108      	bne.n	8006cb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d02c      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
 8006cb2:	e027      	b.n	8006d04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d023      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4798      	blx	r3
 8006cc4:	e01e      	b.n	8006d04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10f      	bne.n	8006cf4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0210 	bic.w	r2, r2, #16
 8006ce2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8306 	beq.w	800731a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 8088 	beq.w	8006e2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2204      	movs	r2, #4
 8006d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a7a      	ldr	r2, [pc, #488]	; (8006f14 <HAL_DMA_IRQHandler+0xa08>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d04a      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a79      	ldr	r2, [pc, #484]	; (8006f18 <HAL_DMA_IRQHandler+0xa0c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d045      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a77      	ldr	r2, [pc, #476]	; (8006f1c <HAL_DMA_IRQHandler+0xa10>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d040      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a76      	ldr	r2, [pc, #472]	; (8006f20 <HAL_DMA_IRQHandler+0xa14>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d03b      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a74      	ldr	r2, [pc, #464]	; (8006f24 <HAL_DMA_IRQHandler+0xa18>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d036      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a73      	ldr	r2, [pc, #460]	; (8006f28 <HAL_DMA_IRQHandler+0xa1c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d031      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a71      	ldr	r2, [pc, #452]	; (8006f2c <HAL_DMA_IRQHandler+0xa20>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d02c      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a70      	ldr	r2, [pc, #448]	; (8006f30 <HAL_DMA_IRQHandler+0xa24>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d027      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a6e      	ldr	r2, [pc, #440]	; (8006f34 <HAL_DMA_IRQHandler+0xa28>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d022      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a6d      	ldr	r2, [pc, #436]	; (8006f38 <HAL_DMA_IRQHandler+0xa2c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01d      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a6b      	ldr	r2, [pc, #428]	; (8006f3c <HAL_DMA_IRQHandler+0xa30>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d018      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a6a      	ldr	r2, [pc, #424]	; (8006f40 <HAL_DMA_IRQHandler+0xa34>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a68      	ldr	r2, [pc, #416]	; (8006f44 <HAL_DMA_IRQHandler+0xa38>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00e      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a67      	ldr	r2, [pc, #412]	; (8006f48 <HAL_DMA_IRQHandler+0xa3c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a65      	ldr	r2, [pc, #404]	; (8006f4c <HAL_DMA_IRQHandler+0xa40>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x8b8>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a64      	ldr	r2, [pc, #400]	; (8006f50 <HAL_DMA_IRQHandler+0xa44>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d108      	bne.n	8006dd6 <HAL_DMA_IRQHandler+0x8ca>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e007      	b.n	8006de6 <HAL_DMA_IRQHandler+0x8da>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0201 	bic.w	r2, r2, #1
 8006de4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3301      	adds	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d307      	bcc.n	8006e02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1f2      	bne.n	8006de6 <HAL_DMA_IRQHandler+0x8da>
 8006e00:	e000      	b.n	8006e04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006e02:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d004      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2203      	movs	r2, #3
 8006e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006e1a:	e003      	b.n	8006e24 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8272 	beq.w	800731a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
 8006e3e:	e26c      	b.n	800731a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a43      	ldr	r2, [pc, #268]	; (8006f54 <HAL_DMA_IRQHandler+0xa48>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d022      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x984>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a42      	ldr	r2, [pc, #264]	; (8006f58 <HAL_DMA_IRQHandler+0xa4c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d01d      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x984>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a40      	ldr	r2, [pc, #256]	; (8006f5c <HAL_DMA_IRQHandler+0xa50>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d018      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x984>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a3f      	ldr	r2, [pc, #252]	; (8006f60 <HAL_DMA_IRQHandler+0xa54>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d013      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x984>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a3d      	ldr	r2, [pc, #244]	; (8006f64 <HAL_DMA_IRQHandler+0xa58>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00e      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x984>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a3c      	ldr	r2, [pc, #240]	; (8006f68 <HAL_DMA_IRQHandler+0xa5c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d009      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x984>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a3a      	ldr	r2, [pc, #232]	; (8006f6c <HAL_DMA_IRQHandler+0xa60>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x984>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a39      	ldr	r2, [pc, #228]	; (8006f70 <HAL_DMA_IRQHandler+0xa64>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d101      	bne.n	8006e94 <HAL_DMA_IRQHandler+0x988>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e000      	b.n	8006e96 <HAL_DMA_IRQHandler+0x98a>
 8006e94:	2300      	movs	r3, #0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 823f 	beq.w	800731a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2204      	movs	r2, #4
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80cd 	beq.w	8007054 <HAL_DMA_IRQHandler+0xb48>
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80c7 	beq.w	8007054 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2204      	movs	r2, #4
 8006ed0:	409a      	lsls	r2, r3
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d049      	beq.n	8006f74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 8210 	beq.w	8007314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006efc:	e20a      	b.n	8007314 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 8206 	beq.w	8007314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f10:	e200      	b.n	8007314 <HAL_DMA_IRQHandler+0xe08>
 8006f12:	bf00      	nop
 8006f14:	40020010 	.word	0x40020010
 8006f18:	40020028 	.word	0x40020028
 8006f1c:	40020040 	.word	0x40020040
 8006f20:	40020058 	.word	0x40020058
 8006f24:	40020070 	.word	0x40020070
 8006f28:	40020088 	.word	0x40020088
 8006f2c:	400200a0 	.word	0x400200a0
 8006f30:	400200b8 	.word	0x400200b8
 8006f34:	40020410 	.word	0x40020410
 8006f38:	40020428 	.word	0x40020428
 8006f3c:	40020440 	.word	0x40020440
 8006f40:	40020458 	.word	0x40020458
 8006f44:	40020470 	.word	0x40020470
 8006f48:	40020488 	.word	0x40020488
 8006f4c:	400204a0 	.word	0x400204a0
 8006f50:	400204b8 	.word	0x400204b8
 8006f54:	58025408 	.word	0x58025408
 8006f58:	5802541c 	.word	0x5802541c
 8006f5c:	58025430 	.word	0x58025430
 8006f60:	58025444 	.word	0x58025444
 8006f64:	58025458 	.word	0x58025458
 8006f68:	5802546c 	.word	0x5802546c
 8006f6c:	58025480 	.word	0x58025480
 8006f70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d160      	bne.n	8007040 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a7f      	ldr	r2, [pc, #508]	; (8007180 <HAL_DMA_IRQHandler+0xc74>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d04a      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a7d      	ldr	r2, [pc, #500]	; (8007184 <HAL_DMA_IRQHandler+0xc78>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d045      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a7c      	ldr	r2, [pc, #496]	; (8007188 <HAL_DMA_IRQHandler+0xc7c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d040      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a7a      	ldr	r2, [pc, #488]	; (800718c <HAL_DMA_IRQHandler+0xc80>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d03b      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a79      	ldr	r2, [pc, #484]	; (8007190 <HAL_DMA_IRQHandler+0xc84>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d036      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a77      	ldr	r2, [pc, #476]	; (8007194 <HAL_DMA_IRQHandler+0xc88>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d031      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a76      	ldr	r2, [pc, #472]	; (8007198 <HAL_DMA_IRQHandler+0xc8c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d02c      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a74      	ldr	r2, [pc, #464]	; (800719c <HAL_DMA_IRQHandler+0xc90>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d027      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a73      	ldr	r2, [pc, #460]	; (80071a0 <HAL_DMA_IRQHandler+0xc94>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d022      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a71      	ldr	r2, [pc, #452]	; (80071a4 <HAL_DMA_IRQHandler+0xc98>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a70      	ldr	r2, [pc, #448]	; (80071a8 <HAL_DMA_IRQHandler+0xc9c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d018      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a6e      	ldr	r2, [pc, #440]	; (80071ac <HAL_DMA_IRQHandler+0xca0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a6d      	ldr	r2, [pc, #436]	; (80071b0 <HAL_DMA_IRQHandler+0xca4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a6b      	ldr	r2, [pc, #428]	; (80071b4 <HAL_DMA_IRQHandler+0xca8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a6a      	ldr	r2, [pc, #424]	; (80071b8 <HAL_DMA_IRQHandler+0xcac>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_DMA_IRQHandler+0xb12>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a68      	ldr	r2, [pc, #416]	; (80071bc <HAL_DMA_IRQHandler+0xcb0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d108      	bne.n	8007030 <HAL_DMA_IRQHandler+0xb24>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0208 	bic.w	r2, r2, #8
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e007      	b.n	8007040 <HAL_DMA_IRQHandler+0xb34>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0204 	bic.w	r2, r2, #4
 800703e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 8165 	beq.w	8007314 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007052:	e15f      	b.n	8007314 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	2202      	movs	r2, #2
 800705e:	409a      	lsls	r2, r3
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	4013      	ands	r3, r2
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 80c5 	beq.w	80071f4 <HAL_DMA_IRQHandler+0xce8>
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80bf 	beq.w	80071f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707a:	f003 031f 	and.w	r3, r3, #31
 800707e:	2202      	movs	r2, #2
 8007080:	409a      	lsls	r2, r3
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d018      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 813a 	beq.w	8007318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070ac:	e134      	b.n	8007318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 8130 	beq.w	8007318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070c0:	e12a      	b.n	8007318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f003 0320 	and.w	r3, r3, #32
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f040 8089 	bne.w	80071e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a2b      	ldr	r2, [pc, #172]	; (8007180 <HAL_DMA_IRQHandler+0xc74>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d04a      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a29      	ldr	r2, [pc, #164]	; (8007184 <HAL_DMA_IRQHandler+0xc78>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d045      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a28      	ldr	r2, [pc, #160]	; (8007188 <HAL_DMA_IRQHandler+0xc7c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d040      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a26      	ldr	r2, [pc, #152]	; (800718c <HAL_DMA_IRQHandler+0xc80>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d03b      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a25      	ldr	r2, [pc, #148]	; (8007190 <HAL_DMA_IRQHandler+0xc84>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d036      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a23      	ldr	r2, [pc, #140]	; (8007194 <HAL_DMA_IRQHandler+0xc88>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d031      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a22      	ldr	r2, [pc, #136]	; (8007198 <HAL_DMA_IRQHandler+0xc8c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d02c      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a20      	ldr	r2, [pc, #128]	; (800719c <HAL_DMA_IRQHandler+0xc90>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d027      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1f      	ldr	r2, [pc, #124]	; (80071a0 <HAL_DMA_IRQHandler+0xc94>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d022      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1d      	ldr	r2, [pc, #116]	; (80071a4 <HAL_DMA_IRQHandler+0xc98>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01d      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1c      	ldr	r2, [pc, #112]	; (80071a8 <HAL_DMA_IRQHandler+0xc9c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d018      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <HAL_DMA_IRQHandler+0xca0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <HAL_DMA_IRQHandler+0xca4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a17      	ldr	r2, [pc, #92]	; (80071b4 <HAL_DMA_IRQHandler+0xca8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <HAL_DMA_IRQHandler+0xcac>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_DMA_IRQHandler+0xc62>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a14      	ldr	r2, [pc, #80]	; (80071bc <HAL_DMA_IRQHandler+0xcb0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d128      	bne.n	80071c0 <HAL_DMA_IRQHandler+0xcb4>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0214 	bic.w	r2, r2, #20
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e027      	b.n	80071d0 <HAL_DMA_IRQHandler+0xcc4>
 8007180:	40020010 	.word	0x40020010
 8007184:	40020028 	.word	0x40020028
 8007188:	40020040 	.word	0x40020040
 800718c:	40020058 	.word	0x40020058
 8007190:	40020070 	.word	0x40020070
 8007194:	40020088 	.word	0x40020088
 8007198:	400200a0 	.word	0x400200a0
 800719c:	400200b8 	.word	0x400200b8
 80071a0:	40020410 	.word	0x40020410
 80071a4:	40020428 	.word	0x40020428
 80071a8:	40020440 	.word	0x40020440
 80071ac:	40020458 	.word	0x40020458
 80071b0:	40020470 	.word	0x40020470
 80071b4:	40020488 	.word	0x40020488
 80071b8:	400204a0 	.word	0x400204a0
 80071bc:	400204b8 	.word	0x400204b8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 020a 	bic.w	r2, r2, #10
 80071ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8097 	beq.w	8007318 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071f2:	e091      	b.n	8007318 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	2208      	movs	r2, #8
 80071fe:	409a      	lsls	r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4013      	ands	r3, r2
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8088 	beq.w	800731a <HAL_DMA_IRQHandler+0xe0e>
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 8082 	beq.w	800731a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a41      	ldr	r2, [pc, #260]	; (8007320 <HAL_DMA_IRQHandler+0xe14>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d04a      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a3f      	ldr	r2, [pc, #252]	; (8007324 <HAL_DMA_IRQHandler+0xe18>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d045      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a3e      	ldr	r2, [pc, #248]	; (8007328 <HAL_DMA_IRQHandler+0xe1c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d040      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a3c      	ldr	r2, [pc, #240]	; (800732c <HAL_DMA_IRQHandler+0xe20>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d03b      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a3b      	ldr	r2, [pc, #236]	; (8007330 <HAL_DMA_IRQHandler+0xe24>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d036      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a39      	ldr	r2, [pc, #228]	; (8007334 <HAL_DMA_IRQHandler+0xe28>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d031      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a38      	ldr	r2, [pc, #224]	; (8007338 <HAL_DMA_IRQHandler+0xe2c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d02c      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a36      	ldr	r2, [pc, #216]	; (800733c <HAL_DMA_IRQHandler+0xe30>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d027      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a35      	ldr	r2, [pc, #212]	; (8007340 <HAL_DMA_IRQHandler+0xe34>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a33      	ldr	r2, [pc, #204]	; (8007344 <HAL_DMA_IRQHandler+0xe38>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01d      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a32      	ldr	r2, [pc, #200]	; (8007348 <HAL_DMA_IRQHandler+0xe3c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a30      	ldr	r2, [pc, #192]	; (800734c <HAL_DMA_IRQHandler+0xe40>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a2f      	ldr	r2, [pc, #188]	; (8007350 <HAL_DMA_IRQHandler+0xe44>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a2d      	ldr	r2, [pc, #180]	; (8007354 <HAL_DMA_IRQHandler+0xe48>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2c      	ldr	r2, [pc, #176]	; (8007358 <HAL_DMA_IRQHandler+0xe4c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xdaa>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a2a      	ldr	r2, [pc, #168]	; (800735c <HAL_DMA_IRQHandler+0xe50>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d108      	bne.n	80072c8 <HAL_DMA_IRQHandler+0xdbc>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 021c 	bic.w	r2, r2, #28
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e007      	b.n	80072d8 <HAL_DMA_IRQHandler+0xdcc>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 020e 	bic.w	r2, r2, #14
 80072d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	2201      	movs	r2, #1
 80072e2:	409a      	lsls	r2, r3
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
 800730e:	e004      	b.n	800731a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007310:	bf00      	nop
 8007312:	e002      	b.n	800731a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007314:	bf00      	nop
 8007316:	e000      	b.n	800731a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007318:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800731a:	3728      	adds	r7, #40	; 0x28
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40020010 	.word	0x40020010
 8007324:	40020028 	.word	0x40020028
 8007328:	40020040 	.word	0x40020040
 800732c:	40020058 	.word	0x40020058
 8007330:	40020070 	.word	0x40020070
 8007334:	40020088 	.word	0x40020088
 8007338:	400200a0 	.word	0x400200a0
 800733c:	400200b8 	.word	0x400200b8
 8007340:	40020410 	.word	0x40020410
 8007344:	40020428 	.word	0x40020428
 8007348:	40020440 	.word	0x40020440
 800734c:	40020458 	.word	0x40020458
 8007350:	40020470 	.word	0x40020470
 8007354:	40020488 	.word	0x40020488
 8007358:	400204a0 	.word	0x400204a0
 800735c:	400204b8 	.word	0x400204b8

08007360 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007378:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a7f      	ldr	r2, [pc, #508]	; (800757c <DMA_SetConfig+0x21c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d072      	beq.n	800746a <DMA_SetConfig+0x10a>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a7d      	ldr	r2, [pc, #500]	; (8007580 <DMA_SetConfig+0x220>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d06d      	beq.n	800746a <DMA_SetConfig+0x10a>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a7c      	ldr	r2, [pc, #496]	; (8007584 <DMA_SetConfig+0x224>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d068      	beq.n	800746a <DMA_SetConfig+0x10a>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a7a      	ldr	r2, [pc, #488]	; (8007588 <DMA_SetConfig+0x228>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d063      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a79      	ldr	r2, [pc, #484]	; (800758c <DMA_SetConfig+0x22c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d05e      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a77      	ldr	r2, [pc, #476]	; (8007590 <DMA_SetConfig+0x230>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d059      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a76      	ldr	r2, [pc, #472]	; (8007594 <DMA_SetConfig+0x234>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d054      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a74      	ldr	r2, [pc, #464]	; (8007598 <DMA_SetConfig+0x238>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d04f      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a73      	ldr	r2, [pc, #460]	; (800759c <DMA_SetConfig+0x23c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d04a      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a71      	ldr	r2, [pc, #452]	; (80075a0 <DMA_SetConfig+0x240>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d045      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a70      	ldr	r2, [pc, #448]	; (80075a4 <DMA_SetConfig+0x244>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d040      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a6e      	ldr	r2, [pc, #440]	; (80075a8 <DMA_SetConfig+0x248>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d03b      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a6d      	ldr	r2, [pc, #436]	; (80075ac <DMA_SetConfig+0x24c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d036      	beq.n	800746a <DMA_SetConfig+0x10a>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a6b      	ldr	r2, [pc, #428]	; (80075b0 <DMA_SetConfig+0x250>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d031      	beq.n	800746a <DMA_SetConfig+0x10a>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a6a      	ldr	r2, [pc, #424]	; (80075b4 <DMA_SetConfig+0x254>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d02c      	beq.n	800746a <DMA_SetConfig+0x10a>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a68      	ldr	r2, [pc, #416]	; (80075b8 <DMA_SetConfig+0x258>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d027      	beq.n	800746a <DMA_SetConfig+0x10a>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a67      	ldr	r2, [pc, #412]	; (80075bc <DMA_SetConfig+0x25c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d022      	beq.n	800746a <DMA_SetConfig+0x10a>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a65      	ldr	r2, [pc, #404]	; (80075c0 <DMA_SetConfig+0x260>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d01d      	beq.n	800746a <DMA_SetConfig+0x10a>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a64      	ldr	r2, [pc, #400]	; (80075c4 <DMA_SetConfig+0x264>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d018      	beq.n	800746a <DMA_SetConfig+0x10a>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a62      	ldr	r2, [pc, #392]	; (80075c8 <DMA_SetConfig+0x268>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d013      	beq.n	800746a <DMA_SetConfig+0x10a>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a61      	ldr	r2, [pc, #388]	; (80075cc <DMA_SetConfig+0x26c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00e      	beq.n	800746a <DMA_SetConfig+0x10a>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a5f      	ldr	r2, [pc, #380]	; (80075d0 <DMA_SetConfig+0x270>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d009      	beq.n	800746a <DMA_SetConfig+0x10a>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a5e      	ldr	r2, [pc, #376]	; (80075d4 <DMA_SetConfig+0x274>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d004      	beq.n	800746a <DMA_SetConfig+0x10a>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a5c      	ldr	r2, [pc, #368]	; (80075d8 <DMA_SetConfig+0x278>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d101      	bne.n	800746e <DMA_SetConfig+0x10e>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <DMA_SetConfig+0x110>
 800746e:	2300      	movs	r3, #0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00d      	beq.n	8007490 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800747c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d004      	beq.n	8007490 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800748e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a39      	ldr	r2, [pc, #228]	; (800757c <DMA_SetConfig+0x21c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d04a      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a38      	ldr	r2, [pc, #224]	; (8007580 <DMA_SetConfig+0x220>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d045      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a36      	ldr	r2, [pc, #216]	; (8007584 <DMA_SetConfig+0x224>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d040      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a35      	ldr	r2, [pc, #212]	; (8007588 <DMA_SetConfig+0x228>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d03b      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a33      	ldr	r2, [pc, #204]	; (800758c <DMA_SetConfig+0x22c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d036      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a32      	ldr	r2, [pc, #200]	; (8007590 <DMA_SetConfig+0x230>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d031      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a30      	ldr	r2, [pc, #192]	; (8007594 <DMA_SetConfig+0x234>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d02c      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a2f      	ldr	r2, [pc, #188]	; (8007598 <DMA_SetConfig+0x238>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d027      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a2d      	ldr	r2, [pc, #180]	; (800759c <DMA_SetConfig+0x23c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d022      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a2c      	ldr	r2, [pc, #176]	; (80075a0 <DMA_SetConfig+0x240>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d01d      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a2a      	ldr	r2, [pc, #168]	; (80075a4 <DMA_SetConfig+0x244>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d018      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a29      	ldr	r2, [pc, #164]	; (80075a8 <DMA_SetConfig+0x248>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d013      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a27      	ldr	r2, [pc, #156]	; (80075ac <DMA_SetConfig+0x24c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00e      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a26      	ldr	r2, [pc, #152]	; (80075b0 <DMA_SetConfig+0x250>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d009      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a24      	ldr	r2, [pc, #144]	; (80075b4 <DMA_SetConfig+0x254>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d004      	beq.n	8007530 <DMA_SetConfig+0x1d0>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a23      	ldr	r2, [pc, #140]	; (80075b8 <DMA_SetConfig+0x258>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d101      	bne.n	8007534 <DMA_SetConfig+0x1d4>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <DMA_SetConfig+0x1d6>
 8007534:	2300      	movs	r3, #0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d059      	beq.n	80075ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	223f      	movs	r2, #63	; 0x3f
 8007544:	409a      	lsls	r2, r3
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007558:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	d138      	bne.n	80075dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800757a:	e086      	b.n	800768a <DMA_SetConfig+0x32a>
 800757c:	40020010 	.word	0x40020010
 8007580:	40020028 	.word	0x40020028
 8007584:	40020040 	.word	0x40020040
 8007588:	40020058 	.word	0x40020058
 800758c:	40020070 	.word	0x40020070
 8007590:	40020088 	.word	0x40020088
 8007594:	400200a0 	.word	0x400200a0
 8007598:	400200b8 	.word	0x400200b8
 800759c:	40020410 	.word	0x40020410
 80075a0:	40020428 	.word	0x40020428
 80075a4:	40020440 	.word	0x40020440
 80075a8:	40020458 	.word	0x40020458
 80075ac:	40020470 	.word	0x40020470
 80075b0:	40020488 	.word	0x40020488
 80075b4:	400204a0 	.word	0x400204a0
 80075b8:	400204b8 	.word	0x400204b8
 80075bc:	58025408 	.word	0x58025408
 80075c0:	5802541c 	.word	0x5802541c
 80075c4:	58025430 	.word	0x58025430
 80075c8:	58025444 	.word	0x58025444
 80075cc:	58025458 	.word	0x58025458
 80075d0:	5802546c 	.word	0x5802546c
 80075d4:	58025480 	.word	0x58025480
 80075d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	60da      	str	r2, [r3, #12]
}
 80075ec:	e04d      	b.n	800768a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a29      	ldr	r2, [pc, #164]	; (8007698 <DMA_SetConfig+0x338>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d022      	beq.n	800763e <DMA_SetConfig+0x2de>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a27      	ldr	r2, [pc, #156]	; (800769c <DMA_SetConfig+0x33c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d01d      	beq.n	800763e <DMA_SetConfig+0x2de>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a26      	ldr	r2, [pc, #152]	; (80076a0 <DMA_SetConfig+0x340>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d018      	beq.n	800763e <DMA_SetConfig+0x2de>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a24      	ldr	r2, [pc, #144]	; (80076a4 <DMA_SetConfig+0x344>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d013      	beq.n	800763e <DMA_SetConfig+0x2de>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a23      	ldr	r2, [pc, #140]	; (80076a8 <DMA_SetConfig+0x348>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00e      	beq.n	800763e <DMA_SetConfig+0x2de>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a21      	ldr	r2, [pc, #132]	; (80076ac <DMA_SetConfig+0x34c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d009      	beq.n	800763e <DMA_SetConfig+0x2de>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a20      	ldr	r2, [pc, #128]	; (80076b0 <DMA_SetConfig+0x350>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d004      	beq.n	800763e <DMA_SetConfig+0x2de>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1e      	ldr	r2, [pc, #120]	; (80076b4 <DMA_SetConfig+0x354>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d101      	bne.n	8007642 <DMA_SetConfig+0x2e2>
 800763e:	2301      	movs	r3, #1
 8007640:	e000      	b.n	8007644 <DMA_SetConfig+0x2e4>
 8007642:	2300      	movs	r3, #0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d020      	beq.n	800768a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	2201      	movs	r2, #1
 8007652:	409a      	lsls	r2, r3
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b40      	cmp	r3, #64	; 0x40
 8007666:	d108      	bne.n	800767a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	60da      	str	r2, [r3, #12]
}
 8007678:	e007      	b.n	800768a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	58025408 	.word	0x58025408
 800769c:	5802541c 	.word	0x5802541c
 80076a0:	58025430 	.word	0x58025430
 80076a4:	58025444 	.word	0x58025444
 80076a8:	58025458 	.word	0x58025458
 80076ac:	5802546c 	.word	0x5802546c
 80076b0:	58025480 	.word	0x58025480
 80076b4:	58025494 	.word	0x58025494

080076b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a42      	ldr	r2, [pc, #264]	; (80077d0 <DMA_CalcBaseAndBitshift+0x118>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d04a      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a41      	ldr	r2, [pc, #260]	; (80077d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d045      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a3f      	ldr	r2, [pc, #252]	; (80077d8 <DMA_CalcBaseAndBitshift+0x120>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d040      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a3e      	ldr	r2, [pc, #248]	; (80077dc <DMA_CalcBaseAndBitshift+0x124>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d03b      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a3c      	ldr	r2, [pc, #240]	; (80077e0 <DMA_CalcBaseAndBitshift+0x128>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d036      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a3b      	ldr	r2, [pc, #236]	; (80077e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d031      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a39      	ldr	r2, [pc, #228]	; (80077e8 <DMA_CalcBaseAndBitshift+0x130>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d02c      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a38      	ldr	r2, [pc, #224]	; (80077ec <DMA_CalcBaseAndBitshift+0x134>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d027      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a36      	ldr	r2, [pc, #216]	; (80077f0 <DMA_CalcBaseAndBitshift+0x138>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d022      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a35      	ldr	r2, [pc, #212]	; (80077f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d01d      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a33      	ldr	r2, [pc, #204]	; (80077f8 <DMA_CalcBaseAndBitshift+0x140>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d018      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a32      	ldr	r2, [pc, #200]	; (80077fc <DMA_CalcBaseAndBitshift+0x144>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a30      	ldr	r2, [pc, #192]	; (8007800 <DMA_CalcBaseAndBitshift+0x148>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00e      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a2f      	ldr	r2, [pc, #188]	; (8007804 <DMA_CalcBaseAndBitshift+0x14c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d009      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a2d      	ldr	r2, [pc, #180]	; (8007808 <DMA_CalcBaseAndBitshift+0x150>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xa8>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a2c      	ldr	r2, [pc, #176]	; (800780c <DMA_CalcBaseAndBitshift+0x154>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d101      	bne.n	8007764 <DMA_CalcBaseAndBitshift+0xac>
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <DMA_CalcBaseAndBitshift+0xae>
 8007764:	2300      	movs	r3, #0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d024      	beq.n	80077b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	3b10      	subs	r3, #16
 8007772:	4a27      	ldr	r2, [pc, #156]	; (8007810 <DMA_CalcBaseAndBitshift+0x158>)
 8007774:	fba2 2303 	umull	r2, r3, r2, r3
 8007778:	091b      	lsrs	r3, r3, #4
 800777a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	4a24      	ldr	r2, [pc, #144]	; (8007814 <DMA_CalcBaseAndBitshift+0x15c>)
 8007784:	5cd3      	ldrb	r3, [r2, r3]
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b03      	cmp	r3, #3
 8007790:	d908      	bls.n	80077a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	4b1f      	ldr	r3, [pc, #124]	; (8007818 <DMA_CalcBaseAndBitshift+0x160>)
 800779a:	4013      	ands	r3, r2
 800779c:	1d1a      	adds	r2, r3, #4
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	659a      	str	r2, [r3, #88]	; 0x58
 80077a2:	e00d      	b.n	80077c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	4b1b      	ldr	r3, [pc, #108]	; (8007818 <DMA_CalcBaseAndBitshift+0x160>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6593      	str	r3, [r2, #88]	; 0x58
 80077b2:	e005      	b.n	80077c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	40020010 	.word	0x40020010
 80077d4:	40020028 	.word	0x40020028
 80077d8:	40020040 	.word	0x40020040
 80077dc:	40020058 	.word	0x40020058
 80077e0:	40020070 	.word	0x40020070
 80077e4:	40020088 	.word	0x40020088
 80077e8:	400200a0 	.word	0x400200a0
 80077ec:	400200b8 	.word	0x400200b8
 80077f0:	40020410 	.word	0x40020410
 80077f4:	40020428 	.word	0x40020428
 80077f8:	40020440 	.word	0x40020440
 80077fc:	40020458 	.word	0x40020458
 8007800:	40020470 	.word	0x40020470
 8007804:	40020488 	.word	0x40020488
 8007808:	400204a0 	.word	0x400204a0
 800780c:	400204b8 	.word	0x400204b8
 8007810:	aaaaaaab 	.word	0xaaaaaaab
 8007814:	0801160c 	.word	0x0801160c
 8007818:	fffffc00 	.word	0xfffffc00

0800781c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d120      	bne.n	8007872 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007834:	2b03      	cmp	r3, #3
 8007836:	d858      	bhi.n	80078ea <DMA_CheckFifoParam+0xce>
 8007838:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <DMA_CheckFifoParam+0x24>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007851 	.word	0x08007851
 8007844:	08007863 	.word	0x08007863
 8007848:	08007851 	.word	0x08007851
 800784c:	080078eb 	.word	0x080078eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d048      	beq.n	80078ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007860:	e045      	b.n	80078ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800786a:	d142      	bne.n	80078f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007870:	e03f      	b.n	80078f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800787a:	d123      	bne.n	80078c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	2b03      	cmp	r3, #3
 8007882:	d838      	bhi.n	80078f6 <DMA_CheckFifoParam+0xda>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <DMA_CheckFifoParam+0x70>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078a3 	.word	0x080078a3
 8007894:	0800789d 	.word	0x0800789d
 8007898:	080078b5 	.word	0x080078b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
        break;
 80078a0:	e030      	b.n	8007904 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d025      	beq.n	80078fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078b2:	e022      	b.n	80078fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078bc:	d11f      	bne.n	80078fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078c2:	e01c      	b.n	80078fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d902      	bls.n	80078d2 <DMA_CheckFifoParam+0xb6>
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d003      	beq.n	80078d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80078d0:	e018      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	73fb      	strb	r3, [r7, #15]
        break;
 80078d6:	e015      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00e      	beq.n	8007902 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
    break;
 80078e8:	e00b      	b.n	8007902 <DMA_CheckFifoParam+0xe6>
        break;
 80078ea:	bf00      	nop
 80078ec:	e00a      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
        break;
 80078ee:	bf00      	nop
 80078f0:	e008      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
        break;
 80078f2:	bf00      	nop
 80078f4:	e006      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
        break;
 80078f6:	bf00      	nop
 80078f8:	e004      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
        break;
 80078fa:	bf00      	nop
 80078fc:	e002      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
        break;
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
    break;
 8007902:	bf00      	nop
    }
  }

  return status;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop

08007914 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a38      	ldr	r2, [pc, #224]	; (8007a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d022      	beq.n	8007972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a36      	ldr	r2, [pc, #216]	; (8007a0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d01d      	beq.n	8007972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a35      	ldr	r2, [pc, #212]	; (8007a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d018      	beq.n	8007972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a33      	ldr	r2, [pc, #204]	; (8007a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d013      	beq.n	8007972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a32      	ldr	r2, [pc, #200]	; (8007a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00e      	beq.n	8007972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a30      	ldr	r2, [pc, #192]	; (8007a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d009      	beq.n	8007972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a2f      	ldr	r2, [pc, #188]	; (8007a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d004      	beq.n	8007972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a2d      	ldr	r2, [pc, #180]	; (8007a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d101      	bne.n	8007976 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007976:	2300      	movs	r3, #0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01a      	beq.n	80079b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	3b08      	subs	r3, #8
 8007984:	4a28      	ldr	r2, [pc, #160]	; (8007a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007986:	fba2 2303 	umull	r2, r3, r2, r3
 800798a:	091b      	lsrs	r3, r3, #4
 800798c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4b26      	ldr	r3, [pc, #152]	; (8007a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	461a      	mov	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a24      	ldr	r2, [pc, #144]	; (8007a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80079a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f003 031f 	and.w	r3, r3, #31
 80079a8:	2201      	movs	r2, #1
 80079aa:	409a      	lsls	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80079b0:	e024      	b.n	80079fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	3b10      	subs	r3, #16
 80079ba:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80079bc:	fba2 2303 	umull	r2, r3, r2, r3
 80079c0:	091b      	lsrs	r3, r3, #4
 80079c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d806      	bhi.n	80079da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4a1b      	ldr	r2, [pc, #108]	; (8007a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d902      	bls.n	80079da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3308      	adds	r3, #8
 80079d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4b18      	ldr	r3, [pc, #96]	; (8007a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a16      	ldr	r2, [pc, #88]	; (8007a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80079ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2201      	movs	r2, #1
 80079f6:	409a      	lsls	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079fc:	bf00      	nop
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	58025408 	.word	0x58025408
 8007a0c:	5802541c 	.word	0x5802541c
 8007a10:	58025430 	.word	0x58025430
 8007a14:	58025444 	.word	0x58025444
 8007a18:	58025458 	.word	0x58025458
 8007a1c:	5802546c 	.word	0x5802546c
 8007a20:	58025480 	.word	0x58025480
 8007a24:	58025494 	.word	0x58025494
 8007a28:	cccccccd 	.word	0xcccccccd
 8007a2c:	16009600 	.word	0x16009600
 8007a30:	58025880 	.word	0x58025880
 8007a34:	aaaaaaab 	.word	0xaaaaaaab
 8007a38:	400204b8 	.word	0x400204b8
 8007a3c:	4002040f 	.word	0x4002040f
 8007a40:	10008200 	.word	0x10008200
 8007a44:	40020880 	.word	0x40020880

08007a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d04a      	beq.n	8007af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d847      	bhi.n	8007af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a25      	ldr	r2, [pc, #148]	; (8007b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d022      	beq.n	8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a24      	ldr	r2, [pc, #144]	; (8007b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d01d      	beq.n	8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a22      	ldr	r2, [pc, #136]	; (8007b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a21      	ldr	r2, [pc, #132]	; (8007b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d013      	beq.n	8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1f      	ldr	r2, [pc, #124]	; (8007b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00e      	beq.n	8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d004      	beq.n	8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d101      	bne.n	8007ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e000      	b.n	8007aba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a15      	ldr	r2, [pc, #84]	; (8007b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007ad0:	671a      	str	r2, [r3, #112]	; 0x70
 8007ad2:	e009      	b.n	8007ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	461a      	mov	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a11      	ldr	r2, [pc, #68]	; (8007b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007ae6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	2201      	movs	r2, #1
 8007aee:	409a      	lsls	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007af4:	bf00      	nop
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	58025408 	.word	0x58025408
 8007b04:	5802541c 	.word	0x5802541c
 8007b08:	58025430 	.word	0x58025430
 8007b0c:	58025444 	.word	0x58025444
 8007b10:	58025458 	.word	0x58025458
 8007b14:	5802546c 	.word	0x5802546c
 8007b18:	58025480 	.word	0x58025480
 8007b1c:	58025494 	.word	0x58025494
 8007b20:	1600963f 	.word	0x1600963f
 8007b24:	58025940 	.word	0x58025940
 8007b28:	1000823f 	.word	0x1000823f
 8007b2c:	40020940 	.word	0x40020940

08007b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b089      	sub	sp, #36	; 0x24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b3e:	4b89      	ldr	r3, [pc, #548]	; (8007d64 <HAL_GPIO_Init+0x234>)
 8007b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b42:	e194      	b.n	8007e6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	2101      	movs	r1, #1
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b50:	4013      	ands	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 8186 	beq.w	8007e68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d005      	beq.n	8007b74 <HAL_GPIO_Init+0x44>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f003 0303 	and.w	r3, r3, #3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d130      	bne.n	8007bd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	2203      	movs	r2, #3
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	43db      	mvns	r3, r3
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007baa:	2201      	movs	r2, #1
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	091b      	lsrs	r3, r3, #4
 8007bc0:	f003 0201 	and.w	r2, r3, #1
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d017      	beq.n	8007c12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	2203      	movs	r2, #3
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	fa02 f303 	lsl.w	r3, r2, r3
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d123      	bne.n	8007c66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	08da      	lsrs	r2, r3, #3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3208      	adds	r2, #8
 8007c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	220f      	movs	r2, #15
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	08da      	lsrs	r2, r3, #3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3208      	adds	r2, #8
 8007c60:	69b9      	ldr	r1, [r7, #24]
 8007c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	2203      	movs	r2, #3
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	43db      	mvns	r3, r3
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 0203 	and.w	r2, r3, #3
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 80e0 	beq.w	8007e68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ca8:	4b2f      	ldr	r3, [pc, #188]	; (8007d68 <HAL_GPIO_Init+0x238>)
 8007caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cae:	4a2e      	ldr	r2, [pc, #184]	; (8007d68 <HAL_GPIO_Init+0x238>)
 8007cb0:	f043 0302 	orr.w	r3, r3, #2
 8007cb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007cb8:	4b2b      	ldr	r3, [pc, #172]	; (8007d68 <HAL_GPIO_Init+0x238>)
 8007cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cc6:	4a29      	ldr	r2, [pc, #164]	; (8007d6c <HAL_GPIO_Init+0x23c>)
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	089b      	lsrs	r3, r3, #2
 8007ccc:	3302      	adds	r3, #2
 8007cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	220f      	movs	r2, #15
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a20      	ldr	r2, [pc, #128]	; (8007d70 <HAL_GPIO_Init+0x240>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d052      	beq.n	8007d98 <HAL_GPIO_Init+0x268>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a1f      	ldr	r2, [pc, #124]	; (8007d74 <HAL_GPIO_Init+0x244>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d031      	beq.n	8007d5e <HAL_GPIO_Init+0x22e>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a1e      	ldr	r2, [pc, #120]	; (8007d78 <HAL_GPIO_Init+0x248>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d02b      	beq.n	8007d5a <HAL_GPIO_Init+0x22a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a1d      	ldr	r2, [pc, #116]	; (8007d7c <HAL_GPIO_Init+0x24c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d025      	beq.n	8007d56 <HAL_GPIO_Init+0x226>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a1c      	ldr	r2, [pc, #112]	; (8007d80 <HAL_GPIO_Init+0x250>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d01f      	beq.n	8007d52 <HAL_GPIO_Init+0x222>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a1b      	ldr	r2, [pc, #108]	; (8007d84 <HAL_GPIO_Init+0x254>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d019      	beq.n	8007d4e <HAL_GPIO_Init+0x21e>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a1a      	ldr	r2, [pc, #104]	; (8007d88 <HAL_GPIO_Init+0x258>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d013      	beq.n	8007d4a <HAL_GPIO_Init+0x21a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <HAL_GPIO_Init+0x25c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00d      	beq.n	8007d46 <HAL_GPIO_Init+0x216>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <HAL_GPIO_Init+0x260>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d007      	beq.n	8007d42 <HAL_GPIO_Init+0x212>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a17      	ldr	r2, [pc, #92]	; (8007d94 <HAL_GPIO_Init+0x264>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d101      	bne.n	8007d3e <HAL_GPIO_Init+0x20e>
 8007d3a:	2309      	movs	r3, #9
 8007d3c:	e02d      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d3e:	230a      	movs	r3, #10
 8007d40:	e02b      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d42:	2308      	movs	r3, #8
 8007d44:	e029      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d46:	2307      	movs	r3, #7
 8007d48:	e027      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d4a:	2306      	movs	r3, #6
 8007d4c:	e025      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d4e:	2305      	movs	r3, #5
 8007d50:	e023      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d52:	2304      	movs	r3, #4
 8007d54:	e021      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d56:	2303      	movs	r3, #3
 8007d58:	e01f      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e01d      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e01b      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d62:	bf00      	nop
 8007d64:	58000080 	.word	0x58000080
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	58000400 	.word	0x58000400
 8007d70:	58020000 	.word	0x58020000
 8007d74:	58020400 	.word	0x58020400
 8007d78:	58020800 	.word	0x58020800
 8007d7c:	58020c00 	.word	0x58020c00
 8007d80:	58021000 	.word	0x58021000
 8007d84:	58021400 	.word	0x58021400
 8007d88:	58021800 	.word	0x58021800
 8007d8c:	58021c00 	.word	0x58021c00
 8007d90:	58022000 	.word	0x58022000
 8007d94:	58022400 	.word	0x58022400
 8007d98:	2300      	movs	r3, #0
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	f002 0203 	and.w	r2, r2, #3
 8007da0:	0092      	lsls	r2, r2, #2
 8007da2:	4093      	lsls	r3, r2
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007daa:	4938      	ldr	r1, [pc, #224]	; (8007e8c <HAL_GPIO_Init+0x35c>)
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	089b      	lsrs	r3, r3, #2
 8007db0:	3302      	adds	r3, #2
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	43db      	mvns	r3, r3
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	43db      	mvns	r3, r3
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	4013      	ands	r3, r2
 8007df6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4013      	ands	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	43db      	mvns	r3, r3
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f47f ae63 	bne.w	8007b44 <HAL_GPIO_Init+0x14>
  }
}
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
 8007e82:	3724      	adds	r7, #36	; 0x24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	58000400 	.word	0x58000400

08007e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	887b      	ldrh	r3, [r7, #2]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]
 8007eac:	e001      	b.n	8007eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	807b      	strh	r3, [r7, #2]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ed0:	787b      	ldrb	r3, [r7, #1]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ed6:	887a      	ldrh	r2, [r7, #2]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007edc:	e003      	b.n	8007ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ede:	887b      	ldrh	r3, [r7, #2]
 8007ee0:	041a      	lsls	r2, r3, #16
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	619a      	str	r2, [r3, #24]
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007f04:	887a      	ldrh	r2, [r7, #2]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	041a      	lsls	r2, r3, #16
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	43d9      	mvns	r1, r3
 8007f10:	887b      	ldrh	r3, [r7, #2]
 8007f12:	400b      	ands	r3, r1
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	619a      	str	r2, [r3, #24]
}
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e07f      	b.n	800803a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fa fcbc 	bl	80028cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2224      	movs	r2, #36	; 0x24
 8007f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0201 	bic.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d107      	bne.n	8007fa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f9e:	609a      	str	r2, [r3, #8]
 8007fa0:	e006      	b.n	8007fb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007fae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d104      	bne.n	8007fc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6859      	ldr	r1, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <HAL_I2C_Init+0x11c>)
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691a      	ldr	r2, [r3, #16]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	69d9      	ldr	r1, [r3, #28]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1a      	ldr	r2, [r3, #32]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0201 	orr.w	r2, r2, #1
 800801a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	02008000 	.word	0x02008000

08008048 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	607a      	str	r2, [r7, #4]
 8008052:	461a      	mov	r2, r3
 8008054:	460b      	mov	r3, r1
 8008056:	817b      	strh	r3, [r7, #10]
 8008058:	4613      	mov	r3, r2
 800805a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b20      	cmp	r3, #32
 8008066:	f040 80da 	bne.w	800821e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008070:	2b01      	cmp	r3, #1
 8008072:	d101      	bne.n	8008078 <HAL_I2C_Master_Transmit+0x30>
 8008074:	2302      	movs	r3, #2
 8008076:	e0d3      	b.n	8008220 <HAL_I2C_Master_Transmit+0x1d8>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008080:	f7fc fdce 	bl	8004c20 <HAL_GetTick>
 8008084:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	2319      	movs	r3, #25
 800808c:	2201      	movs	r2, #1
 800808e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 fb62 	bl	800875c <I2C_WaitOnFlagUntilTimeout>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e0be      	b.n	8008220 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2221      	movs	r2, #33	; 0x21
 80080a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2210      	movs	r2, #16
 80080ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	893a      	ldrh	r2, [r7, #8]
 80080c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2bff      	cmp	r3, #255	; 0xff
 80080d2:	d90e      	bls.n	80080f2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	22ff      	movs	r2, #255	; 0xff
 80080d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	8979      	ldrh	r1, [r7, #10]
 80080e2:	4b51      	ldr	r3, [pc, #324]	; (8008228 <HAL_I2C_Master_Transmit+0x1e0>)
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 fd58 	bl	8008ba0 <I2C_TransferConfig>
 80080f0:	e06c      	b.n	80081cc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008100:	b2da      	uxtb	r2, r3
 8008102:	8979      	ldrh	r1, [r7, #10]
 8008104:	4b48      	ldr	r3, [pc, #288]	; (8008228 <HAL_I2C_Master_Transmit+0x1e0>)
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 fd47 	bl	8008ba0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008112:	e05b      	b.n	80081cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	6a39      	ldr	r1, [r7, #32]
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fb5f 	bl	80087dc <I2C_WaitOnTXISFlagUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e07b      	b.n	8008220 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d034      	beq.n	80081cc <HAL_I2C_Master_Transmit+0x184>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d130      	bne.n	80081cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	2200      	movs	r2, #0
 8008172:	2180      	movs	r1, #128	; 0x80
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 faf1 	bl	800875c <I2C_WaitOnFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e04d      	b.n	8008220 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008188:	b29b      	uxth	r3, r3
 800818a:	2bff      	cmp	r3, #255	; 0xff
 800818c:	d90e      	bls.n	80081ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	22ff      	movs	r2, #255	; 0xff
 8008192:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008198:	b2da      	uxtb	r2, r3
 800819a:	8979      	ldrh	r1, [r7, #10]
 800819c:	2300      	movs	r3, #0
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fcfb 	bl	8008ba0 <I2C_TransferConfig>
 80081aa:	e00f      	b.n	80081cc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	8979      	ldrh	r1, [r7, #10]
 80081be:	2300      	movs	r3, #0
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 fcea 	bl	8008ba0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d19e      	bne.n	8008114 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	6a39      	ldr	r1, [r7, #32]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fb3e 	bl	800885c <I2C_WaitOnSTOPFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e01a      	b.n	8008220 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2220      	movs	r2, #32
 80081f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6859      	ldr	r1, [r3, #4]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	4b0b      	ldr	r3, [pc, #44]	; (800822c <HAL_I2C_Master_Transmit+0x1e4>)
 80081fe:	400b      	ands	r3, r1
 8008200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e000      	b.n	8008220 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800821e:	2302      	movs	r3, #2
  }
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	80002000 	.word	0x80002000
 800822c:	fe00e800 	.word	0xfe00e800

08008230 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af02      	add	r7, sp, #8
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	461a      	mov	r2, r3
 800823c:	460b      	mov	r3, r1
 800823e:	817b      	strh	r3, [r7, #10]
 8008240:	4613      	mov	r3, r2
 8008242:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b20      	cmp	r3, #32
 800824e:	f040 80db 	bne.w	8008408 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_I2C_Master_Receive+0x30>
 800825c:	2302      	movs	r3, #2
 800825e:	e0d4      	b.n	800840a <HAL_I2C_Master_Receive+0x1da>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008268:	f7fc fcda 	bl	8004c20 <HAL_GetTick>
 800826c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	2319      	movs	r3, #25
 8008274:	2201      	movs	r2, #1
 8008276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fa6e 	bl	800875c <I2C_WaitOnFlagUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e0bf      	b.n	800840a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2222      	movs	r2, #34	; 0x22
 800828e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2210      	movs	r2, #16
 8008296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	893a      	ldrh	r2, [r7, #8]
 80082aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	2bff      	cmp	r3, #255	; 0xff
 80082ba:	d90e      	bls.n	80082da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	22ff      	movs	r2, #255	; 0xff
 80082c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	8979      	ldrh	r1, [r7, #10]
 80082ca:	4b52      	ldr	r3, [pc, #328]	; (8008414 <HAL_I2C_Master_Receive+0x1e4>)
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fc64 	bl	8008ba0 <I2C_TransferConfig>
 80082d8:	e06d      	b.n	80083b6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082de:	b29a      	uxth	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	8979      	ldrh	r1, [r7, #10]
 80082ec:	4b49      	ldr	r3, [pc, #292]	; (8008414 <HAL_I2C_Master_Receive+0x1e4>)
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 fc53 	bl	8008ba0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80082fa:	e05c      	b.n	80083b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	6a39      	ldr	r1, [r7, #32]
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 fae7 	bl	80088d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e07c      	b.n	800840a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	b2d2      	uxtb	r2, r2
 800831c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008346:	b29b      	uxth	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d034      	beq.n	80083b6 <HAL_I2C_Master_Receive+0x186>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008350:	2b00      	cmp	r3, #0
 8008352:	d130      	bne.n	80083b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	2200      	movs	r2, #0
 800835c:	2180      	movs	r1, #128	; 0x80
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 f9fc 	bl	800875c <I2C_WaitOnFlagUntilTimeout>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e04d      	b.n	800840a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008372:	b29b      	uxth	r3, r3
 8008374:	2bff      	cmp	r3, #255	; 0xff
 8008376:	d90e      	bls.n	8008396 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	22ff      	movs	r2, #255	; 0xff
 800837c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008382:	b2da      	uxtb	r2, r3
 8008384:	8979      	ldrh	r1, [r7, #10]
 8008386:	2300      	movs	r3, #0
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fc06 	bl	8008ba0 <I2C_TransferConfig>
 8008394:	e00f      	b.n	80083b6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	8979      	ldrh	r1, [r7, #10]
 80083a8:	2300      	movs	r3, #0
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 fbf5 	bl	8008ba0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d19d      	bne.n	80082fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	6a39      	ldr	r1, [r7, #32]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fa49 	bl	800885c <I2C_WaitOnSTOPFlagUntilTimeout>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e01a      	b.n	800840a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2220      	movs	r2, #32
 80083da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6859      	ldr	r1, [r3, #4]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <HAL_I2C_Master_Receive+0x1e8>)
 80083e8:	400b      	ands	r3, r1
 80083ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	e000      	b.n	800840a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008408:	2302      	movs	r3, #2
  }
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	80002400 	.word	0x80002400
 8008418:	fe00e800 	.word	0xfe00e800

0800841c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	461a      	mov	r2, r3
 800842a:	4603      	mov	r3, r0
 800842c:	817b      	strh	r3, [r7, #10]
 800842e:	460b      	mov	r3, r1
 8008430:	813b      	strh	r3, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b20      	cmp	r3, #32
 8008440:	f040 80fd 	bne.w	800863e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_I2C_Mem_Read+0x34>
 800844a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	d105      	bne.n	800845c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008456:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e0f1      	b.n	8008640 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_I2C_Mem_Read+0x4e>
 8008466:	2302      	movs	r3, #2
 8008468:	e0ea      	b.n	8008640 <HAL_I2C_Mem_Read+0x224>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008472:	f7fc fbd5 	bl	8004c20 <HAL_GetTick>
 8008476:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	2319      	movs	r3, #25
 800847e:	2201      	movs	r2, #1
 8008480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f969 	bl	800875c <I2C_WaitOnFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e0d5      	b.n	8008640 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2222      	movs	r2, #34	; 0x22
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2240      	movs	r2, #64	; 0x40
 80084a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a3a      	ldr	r2, [r7, #32]
 80084ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084bc:	88f8      	ldrh	r0, [r7, #6]
 80084be:	893a      	ldrh	r2, [r7, #8]
 80084c0:	8979      	ldrh	r1, [r7, #10]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	4603      	mov	r3, r0
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f8cd 	bl	800866c <I2C_RequestMemoryRead>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0ad      	b.n	8008640 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	2bff      	cmp	r3, #255	; 0xff
 80084ec:	d90e      	bls.n	800850c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	22ff      	movs	r2, #255	; 0xff
 80084f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	8979      	ldrh	r1, [r7, #10]
 80084fc:	4b52      	ldr	r3, [pc, #328]	; (8008648 <HAL_I2C_Mem_Read+0x22c>)
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fb4b 	bl	8008ba0 <I2C_TransferConfig>
 800850a:	e00f      	b.n	800852c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851a:	b2da      	uxtb	r2, r3
 800851c:	8979      	ldrh	r1, [r7, #10]
 800851e:	4b4a      	ldr	r3, [pc, #296]	; (8008648 <HAL_I2C_Mem_Read+0x22c>)
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fb3a 	bl	8008ba0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	2200      	movs	r2, #0
 8008534:	2104      	movs	r1, #4
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 f910 	bl	800875c <I2C_WaitOnFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e07c      	b.n	8008640 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	b2d2      	uxtb	r2, r2
 8008552:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008562:	3b01      	subs	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800857c:	b29b      	uxth	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d034      	beq.n	80085ec <HAL_I2C_Mem_Read+0x1d0>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008586:	2b00      	cmp	r3, #0
 8008588:	d130      	bne.n	80085ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	2200      	movs	r2, #0
 8008592:	2180      	movs	r1, #128	; 0x80
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 f8e1 	bl	800875c <I2C_WaitOnFlagUntilTimeout>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e04d      	b.n	8008640 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2bff      	cmp	r3, #255	; 0xff
 80085ac:	d90e      	bls.n	80085cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	22ff      	movs	r2, #255	; 0xff
 80085b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	8979      	ldrh	r1, [r7, #10]
 80085bc:	2300      	movs	r3, #0
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 faeb 	bl	8008ba0 <I2C_TransferConfig>
 80085ca:	e00f      	b.n	80085ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	8979      	ldrh	r1, [r7, #10]
 80085de:	2300      	movs	r3, #0
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 fada 	bl	8008ba0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d19a      	bne.n	800852c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 f92e 	bl	800885c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e01a      	b.n	8008640 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2220      	movs	r2, #32
 8008610:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6859      	ldr	r1, [r3, #4]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	4b0b      	ldr	r3, [pc, #44]	; (800864c <HAL_I2C_Mem_Read+0x230>)
 800861e:	400b      	ands	r3, r1
 8008620:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2220      	movs	r2, #32
 8008626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	e000      	b.n	8008640 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800863e:	2302      	movs	r3, #2
  }
}
 8008640:	4618      	mov	r0, r3
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	80002400 	.word	0x80002400
 800864c:	fe00e800 	.word	0xfe00e800

08008650 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800865e:	b2db      	uxtb	r3, r3
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	4608      	mov	r0, r1
 8008676:	4611      	mov	r1, r2
 8008678:	461a      	mov	r2, r3
 800867a:	4603      	mov	r3, r0
 800867c:	817b      	strh	r3, [r7, #10]
 800867e:	460b      	mov	r3, r1
 8008680:	813b      	strh	r3, [r7, #8]
 8008682:	4613      	mov	r3, r2
 8008684:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008686:	88fb      	ldrh	r3, [r7, #6]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	8979      	ldrh	r1, [r7, #10]
 800868c:	4b20      	ldr	r3, [pc, #128]	; (8008710 <I2C_RequestMemoryRead+0xa4>)
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	2300      	movs	r3, #0
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 fa84 	bl	8008ba0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	69b9      	ldr	r1, [r7, #24]
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 f89d 	bl	80087dc <I2C_WaitOnTXISFlagUntilTimeout>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e02c      	b.n	8008706 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d105      	bne.n	80086be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80086b2:	893b      	ldrh	r3, [r7, #8]
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	629a      	str	r2, [r3, #40]	; 0x28
 80086bc:	e015      	b.n	80086ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80086be:	893b      	ldrh	r3, [r7, #8]
 80086c0:	0a1b      	lsrs	r3, r3, #8
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	69b9      	ldr	r1, [r7, #24]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f883 	bl	80087dc <I2C_WaitOnTXISFlagUntilTimeout>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e012      	b.n	8008706 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80086e0:	893b      	ldrh	r3, [r7, #8]
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2200      	movs	r2, #0
 80086f2:	2140      	movs	r1, #64	; 0x40
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f831 	bl	800875c <I2C_WaitOnFlagUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	80002000 	.word	0x80002000

08008714 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b02      	cmp	r3, #2
 8008728:	d103      	bne.n	8008732 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2200      	movs	r2, #0
 8008730:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b01      	cmp	r3, #1
 800873e:	d007      	beq.n	8008750 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	699a      	ldr	r2, [r3, #24]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0201 	orr.w	r2, r2, #1
 800874e:	619a      	str	r2, [r3, #24]
  }
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	4613      	mov	r3, r2
 800876a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800876c:	e022      	b.n	80087b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008774:	d01e      	beq.n	80087b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008776:	f7fc fa53 	bl	8004c20 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d302      	bcc.n	800878c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d113      	bne.n	80087b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008790:	f043 0220 	orr.w	r2, r3, #32
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2220      	movs	r2, #32
 800879c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e00f      	b.n	80087d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4013      	ands	r3, r2
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	bf0c      	ite	eq
 80087c4:	2301      	moveq	r3, #1
 80087c6:	2300      	movne	r3, #0
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	461a      	mov	r2, r3
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d0cd      	beq.n	800876e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80087e8:	e02c      	b.n	8008844 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 f8ea 	bl	80089c8 <I2C_IsErrorOccurred>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e02a      	b.n	8008854 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008804:	d01e      	beq.n	8008844 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008806:	f7fc fa0b 	bl	8004c20 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	429a      	cmp	r2, r3
 8008814:	d302      	bcc.n	800881c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d113      	bne.n	8008844 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008820:	f043 0220 	orr.w	r2, r3, #32
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e007      	b.n	8008854 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b02      	cmp	r3, #2
 8008850:	d1cb      	bne.n	80087ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008868:	e028      	b.n	80088bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 f8aa 	bl	80089c8 <I2C_IsErrorOccurred>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e026      	b.n	80088cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800887e:	f7fc f9cf 	bl	8004c20 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	429a      	cmp	r2, r3
 800888c:	d302      	bcc.n	8008894 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d113      	bne.n	80088bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008898:	f043 0220 	orr.w	r2, r3, #32
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e007      	b.n	80088cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	d1cf      	bne.n	800886a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088e0:	e064      	b.n	80089ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	68b9      	ldr	r1, [r7, #8]
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 f86e 	bl	80089c8 <I2C_IsErrorOccurred>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e062      	b.n	80089bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f003 0320 	and.w	r3, r3, #32
 8008900:	2b20      	cmp	r3, #32
 8008902:	d138      	bne.n	8008976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b04      	cmp	r3, #4
 8008910:	d105      	bne.n	800891e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	e04e      	b.n	80089bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	f003 0310 	and.w	r3, r3, #16
 8008928:	2b10      	cmp	r3, #16
 800892a:	d107      	bne.n	800893c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2210      	movs	r2, #16
 8008932:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2204      	movs	r2, #4
 8008938:	645a      	str	r2, [r3, #68]	; 0x44
 800893a:	e002      	b.n	8008942 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2220      	movs	r2, #32
 8008948:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6859      	ldr	r1, [r3, #4]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	4b1b      	ldr	r3, [pc, #108]	; (80089c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8008956:	400b      	ands	r3, r1
 8008958:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e022      	b.n	80089bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008976:	f7fc f953 	bl	8004c20 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	429a      	cmp	r2, r3
 8008984:	d302      	bcc.n	800898c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10f      	bne.n	80089ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008990:	f043 0220 	orr.w	r2, r3, #32
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e007      	b.n	80089bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	f003 0304 	and.w	r3, r3, #4
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d193      	bne.n	80088e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	fe00e800 	.word	0xfe00e800

080089c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08a      	sub	sp, #40	; 0x28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	f003 0310 	and.w	r3, r3, #16
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d075      	beq.n	8008ae0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2210      	movs	r2, #16
 80089fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089fc:	e056      	b.n	8008aac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a04:	d052      	beq.n	8008aac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a06:	f7fc f90b 	bl	8004c20 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d302      	bcc.n	8008a1c <I2C_IsErrorOccurred+0x54>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d147      	bne.n	8008aac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a3e:	d12e      	bne.n	8008a9e <I2C_IsErrorOccurred+0xd6>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a46:	d02a      	beq.n	8008a9e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008a48:	7cfb      	ldrb	r3, [r7, #19]
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	d027      	beq.n	8008a9e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a5c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008a5e:	f7fc f8df 	bl	8004c20 <HAL_GetTick>
 8008a62:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a64:	e01b      	b.n	8008a9e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a66:	f7fc f8db 	bl	8004c20 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	2b19      	cmp	r3, #25
 8008a72:	d914      	bls.n	8008a9e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a78:	f043 0220 	orr.w	r2, r3, #32
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	d1dc      	bne.n	8008a66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d003      	beq.n	8008ac2 <I2C_IsErrorOccurred+0xfa>
 8008aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d09d      	beq.n	80089fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d103      	bne.n	8008ad2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	f043 0304 	orr.w	r3, r3, #4
 8008ad8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	f043 0301 	orr.w	r3, r3, #1
 8008af8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	f043 0308 	orr.w	r3, r3, #8
 8008b1a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00b      	beq.n	8008b4e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	f043 0302 	orr.w	r3, r3, #2
 8008b3c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d01c      	beq.n	8008b90 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f7ff fddc 	bl	8008714 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6859      	ldr	r1, [r3, #4]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <I2C_IsErrorOccurred+0x1d4>)
 8008b68:	400b      	ands	r3, r1
 8008b6a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3728      	adds	r7, #40	; 0x28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	fe00e800 	.word	0xfe00e800

08008ba0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	607b      	str	r3, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	817b      	strh	r3, [r7, #10]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bb2:	897b      	ldrh	r3, [r7, #10]
 8008bb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008bb8:	7a7b      	ldrb	r3, [r7, #9]
 8008bba:	041b      	lsls	r3, r3, #16
 8008bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bc0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	0d5b      	lsrs	r3, r3, #21
 8008bda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008bde:	4b08      	ldr	r3, [pc, #32]	; (8008c00 <I2C_TransferConfig+0x60>)
 8008be0:	430b      	orrs	r3, r1
 8008be2:	43db      	mvns	r3, r3
 8008be4:	ea02 0103 	and.w	r1, r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008bf2:	bf00      	nop
 8008bf4:	371c      	adds	r7, #28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	03ff63ff 	.word	0x03ff63ff

08008c04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	d138      	bne.n	8008c8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e032      	b.n	8008c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2224      	movs	r2, #36	; 0x24
 8008c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 0201 	bic.w	r2, r2, #1
 8008c46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6819      	ldr	r1, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f042 0201 	orr.w	r2, r2, #1
 8008c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e000      	b.n	8008c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c8c:	2302      	movs	r3, #2
  }
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	d139      	bne.n	8008d24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e033      	b.n	8008d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2224      	movs	r2, #36	; 0x24
 8008cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 0201 	bic.w	r2, r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	021b      	lsls	r3, r3, #8
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f042 0201 	orr.w	r2, r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	e000      	b.n	8008d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d24:	2302      	movs	r3, #2
  }
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d3c:	4b19      	ldr	r3, [pc, #100]	; (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d00a      	beq.n	8008d5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d48:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d001      	beq.n	8008d5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e01f      	b.n	8008d9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e01d      	b.n	8008d9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d5e:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f023 0207 	bic.w	r2, r3, #7
 8008d66:	490f      	ldr	r1, [pc, #60]	; (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d6e:	f7fb ff57 	bl	8004c20 <HAL_GetTick>
 8008d72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d74:	e009      	b.n	8008d8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d76:	f7fb ff53 	bl	8004c20 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d84:	d901      	bls.n	8008d8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e007      	b.n	8008d9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d8a:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d96:	d1ee      	bne.n	8008d76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	58024800 	.word	0x58024800

08008da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08c      	sub	sp, #48	; 0x30
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	f000 bc1d 	b.w	80095f6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8087 	beq.w	8008ed8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dca:	4b99      	ldr	r3, [pc, #612]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dd4:	4b96      	ldr	r3, [pc, #600]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	2b10      	cmp	r3, #16
 8008dde:	d007      	beq.n	8008df0 <HAL_RCC_OscConfig+0x48>
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	2b18      	cmp	r3, #24
 8008de4:	d110      	bne.n	8008e08 <HAL_RCC_OscConfig+0x60>
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	f003 0303 	and.w	r3, r3, #3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d10b      	bne.n	8008e08 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008df0:	4b8f      	ldr	r3, [pc, #572]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d06c      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x12e>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d168      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e3f6      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e10:	d106      	bne.n	8008e20 <HAL_RCC_OscConfig+0x78>
 8008e12:	4b87      	ldr	r3, [pc, #540]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a86      	ldr	r2, [pc, #536]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	e02e      	b.n	8008e7e <HAL_RCC_OscConfig+0xd6>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10c      	bne.n	8008e42 <HAL_RCC_OscConfig+0x9a>
 8008e28:	4b81      	ldr	r3, [pc, #516]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a80      	ldr	r2, [pc, #512]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	4b7e      	ldr	r3, [pc, #504]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a7d      	ldr	r2, [pc, #500]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	e01d      	b.n	8008e7e <HAL_RCC_OscConfig+0xd6>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e4a:	d10c      	bne.n	8008e66 <HAL_RCC_OscConfig+0xbe>
 8008e4c:	4b78      	ldr	r3, [pc, #480]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a77      	ldr	r2, [pc, #476]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	4b75      	ldr	r3, [pc, #468]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a74      	ldr	r2, [pc, #464]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	e00b      	b.n	8008e7e <HAL_RCC_OscConfig+0xd6>
 8008e66:	4b72      	ldr	r3, [pc, #456]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a71      	ldr	r2, [pc, #452]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	4b6f      	ldr	r3, [pc, #444]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a6e      	ldr	r2, [pc, #440]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d013      	beq.n	8008eae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e86:	f7fb fecb 	bl	8004c20 <HAL_GetTick>
 8008e8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e8c:	e008      	b.n	8008ea0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e8e:	f7fb fec7 	bl	8004c20 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b64      	cmp	r3, #100	; 0x64
 8008e9a:	d901      	bls.n	8008ea0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e3aa      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ea0:	4b63      	ldr	r3, [pc, #396]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0f0      	beq.n	8008e8e <HAL_RCC_OscConfig+0xe6>
 8008eac:	e014      	b.n	8008ed8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eae:	f7fb feb7 	bl	8004c20 <HAL_GetTick>
 8008eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eb4:	e008      	b.n	8008ec8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008eb6:	f7fb feb3 	bl	8004c20 <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b64      	cmp	r3, #100	; 0x64
 8008ec2:	d901      	bls.n	8008ec8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e396      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ec8:	4b59      	ldr	r3, [pc, #356]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1f0      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x10e>
 8008ed4:	e000      	b.n	8008ed8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 80cb 	beq.w	800907c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ee6:	4b52      	ldr	r3, [pc, #328]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ef0:	4b4f      	ldr	r3, [pc, #316]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <HAL_RCC_OscConfig+0x164>
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	2b18      	cmp	r3, #24
 8008f00:	d156      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x208>
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	f003 0303 	and.w	r3, r3, #3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d151      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f0c:	4b48      	ldr	r3, [pc, #288]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d005      	beq.n	8008f24 <HAL_RCC_OscConfig+0x17c>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e368      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f24:	4b42      	ldr	r3, [pc, #264]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f023 0219 	bic.w	r2, r3, #25
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	493f      	ldr	r1, [pc, #252]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f36:	f7fb fe73 	bl	8004c20 <HAL_GetTick>
 8008f3a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f3c:	e008      	b.n	8008f50 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f3e:	f7fb fe6f 	bl	8004c20 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d901      	bls.n	8008f50 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e352      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f50:	4b37      	ldr	r3, [pc, #220]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0f0      	beq.n	8008f3e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f5c:	f7fb fe90 	bl	8004c80 <HAL_GetREVID>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d817      	bhi.n	8008f9a <HAL_RCC_OscConfig+0x1f2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	2b40      	cmp	r3, #64	; 0x40
 8008f70:	d108      	bne.n	8008f84 <HAL_RCC_OscConfig+0x1dc>
 8008f72:	4b2f      	ldr	r3, [pc, #188]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008f7a:	4a2d      	ldr	r2, [pc, #180]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f80:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f82:	e07b      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f84:	4b2a      	ldr	r3, [pc, #168]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	031b      	lsls	r3, r3, #12
 8008f92:	4927      	ldr	r1, [pc, #156]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f98:	e070      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f9a:	4b25      	ldr	r3, [pc, #148]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	061b      	lsls	r3, r3, #24
 8008fa8:	4921      	ldr	r1, [pc, #132]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fae:	e065      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d048      	beq.n	800904a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fb8:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f023 0219 	bic.w	r2, r3, #25
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	491a      	ldr	r1, [pc, #104]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fca:	f7fb fe29 	bl	8004c20 <HAL_GetTick>
 8008fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fd0:	e008      	b.n	8008fe4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fd2:	f7fb fe25 	bl	8004c20 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d901      	bls.n	8008fe4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e308      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fe4:	4b12      	ldr	r3, [pc, #72]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f0      	beq.n	8008fd2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ff0:	f7fb fe46 	bl	8004c80 <HAL_GetREVID>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d81a      	bhi.n	8009034 <HAL_RCC_OscConfig+0x28c>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b40      	cmp	r3, #64	; 0x40
 8009004:	d108      	bne.n	8009018 <HAL_RCC_OscConfig+0x270>
 8009006:	4b0a      	ldr	r3, [pc, #40]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800900e:	4a08      	ldr	r2, [pc, #32]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8009010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009014:	6053      	str	r3, [r2, #4]
 8009016:	e031      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
 8009018:	4b05      	ldr	r3, [pc, #20]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	031b      	lsls	r3, r3, #12
 8009026:	4902      	ldr	r1, [pc, #8]	; (8009030 <HAL_RCC_OscConfig+0x288>)
 8009028:	4313      	orrs	r3, r2
 800902a:	604b      	str	r3, [r1, #4]
 800902c:	e026      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
 800902e:	bf00      	nop
 8009030:	58024400 	.word	0x58024400
 8009034:	4b9a      	ldr	r3, [pc, #616]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	061b      	lsls	r3, r3, #24
 8009042:	4997      	ldr	r1, [pc, #604]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009044:	4313      	orrs	r3, r2
 8009046:	604b      	str	r3, [r1, #4]
 8009048:	e018      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800904a:	4b95      	ldr	r3, [pc, #596]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a94      	ldr	r2, [pc, #592]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009050:	f023 0301 	bic.w	r3, r3, #1
 8009054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009056:	f7fb fde3 	bl	8004c20 <HAL_GetTick>
 800905a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800905c:	e008      	b.n	8009070 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800905e:	f7fb fddf 	bl	8004c20 <HAL_GetTick>
 8009062:	4602      	mov	r2, r0
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	2b02      	cmp	r3, #2
 800906a:	d901      	bls.n	8009070 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e2c2      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009070:	4b8b      	ldr	r3, [pc, #556]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1f0      	bne.n	800905e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 80a9 	beq.w	80091dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800908a:	4b85      	ldr	r3, [pc, #532]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009092:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009094:	4b82      	ldr	r3, [pc, #520]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009098:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b08      	cmp	r3, #8
 800909e:	d007      	beq.n	80090b0 <HAL_RCC_OscConfig+0x308>
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b18      	cmp	r3, #24
 80090a4:	d13a      	bne.n	800911c <HAL_RCC_OscConfig+0x374>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f003 0303 	and.w	r3, r3, #3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d135      	bne.n	800911c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090b0:	4b7b      	ldr	r3, [pc, #492]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <HAL_RCC_OscConfig+0x320>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	2b80      	cmp	r3, #128	; 0x80
 80090c2:	d001      	beq.n	80090c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e296      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090c8:	f7fb fdda 	bl	8004c80 <HAL_GetREVID>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d817      	bhi.n	8009106 <HAL_RCC_OscConfig+0x35e>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	2b20      	cmp	r3, #32
 80090dc:	d108      	bne.n	80090f0 <HAL_RCC_OscConfig+0x348>
 80090de:	4b70      	ldr	r3, [pc, #448]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80090e6:	4a6e      	ldr	r2, [pc, #440]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80090e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090ec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090ee:	e075      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090f0:	4b6b      	ldr	r3, [pc, #428]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	069b      	lsls	r3, r3, #26
 80090fe:	4968      	ldr	r1, [pc, #416]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009100:	4313      	orrs	r3, r2
 8009102:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009104:	e06a      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009106:	4b66      	ldr	r3, [pc, #408]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	061b      	lsls	r3, r3, #24
 8009114:	4962      	ldr	r1, [pc, #392]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009116:	4313      	orrs	r3, r2
 8009118:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800911a:	e05f      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d042      	beq.n	80091aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009124:	4b5e      	ldr	r3, [pc, #376]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a5d      	ldr	r2, [pc, #372]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800912a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800912e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009130:	f7fb fd76 	bl	8004c20 <HAL_GetTick>
 8009134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009136:	e008      	b.n	800914a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009138:	f7fb fd72 	bl	8004c20 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d901      	bls.n	800914a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e255      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800914a:	4b55      	ldr	r3, [pc, #340]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0f0      	beq.n	8009138 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009156:	f7fb fd93 	bl	8004c80 <HAL_GetREVID>
 800915a:	4603      	mov	r3, r0
 800915c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009160:	4293      	cmp	r3, r2
 8009162:	d817      	bhi.n	8009194 <HAL_RCC_OscConfig+0x3ec>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	2b20      	cmp	r3, #32
 800916a:	d108      	bne.n	800917e <HAL_RCC_OscConfig+0x3d6>
 800916c:	4b4c      	ldr	r3, [pc, #304]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009174:	4a4a      	ldr	r2, [pc, #296]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009176:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800917a:	6053      	str	r3, [r2, #4]
 800917c:	e02e      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
 800917e:	4b48      	ldr	r3, [pc, #288]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	069b      	lsls	r3, r3, #26
 800918c:	4944      	ldr	r1, [pc, #272]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800918e:	4313      	orrs	r3, r2
 8009190:	604b      	str	r3, [r1, #4]
 8009192:	e023      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
 8009194:	4b42      	ldr	r3, [pc, #264]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	061b      	lsls	r3, r3, #24
 80091a2:	493f      	ldr	r1, [pc, #252]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60cb      	str	r3, [r1, #12]
 80091a8:	e018      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091aa:	4b3d      	ldr	r3, [pc, #244]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a3c      	ldr	r2, [pc, #240]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b6:	f7fb fd33 	bl	8004c20 <HAL_GetTick>
 80091ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091bc:	e008      	b.n	80091d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80091be:	f7fb fd2f 	bl	8004c20 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d901      	bls.n	80091d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e212      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091d0:	4b33      	ldr	r3, [pc, #204]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f0      	bne.n	80091be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d036      	beq.n	8009256 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d019      	beq.n	8009224 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091f0:	4b2b      	ldr	r3, [pc, #172]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091f4:	4a2a      	ldr	r2, [pc, #168]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091fc:	f7fb fd10 	bl	8004c20 <HAL_GetTick>
 8009200:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009202:	e008      	b.n	8009216 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009204:	f7fb fd0c 	bl	8004c20 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e1ef      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009216:	4b22      	ldr	r3, [pc, #136]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0f0      	beq.n	8009204 <HAL_RCC_OscConfig+0x45c>
 8009222:	e018      	b.n	8009256 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009224:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009228:	4a1d      	ldr	r2, [pc, #116]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009230:	f7fb fcf6 	bl	8004c20 <HAL_GetTick>
 8009234:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009236:	e008      	b.n	800924a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009238:	f7fb fcf2 	bl	8004c20 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b02      	cmp	r3, #2
 8009244:	d901      	bls.n	800924a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e1d5      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800924a:	4b15      	ldr	r3, [pc, #84]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800924c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1f0      	bne.n	8009238 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b00      	cmp	r3, #0
 8009260:	d039      	beq.n	80092d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d01c      	beq.n	80092a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800926a:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a0c      	ldr	r2, [pc, #48]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009276:	f7fb fcd3 	bl	8004c20 <HAL_GetTick>
 800927a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800927c:	e008      	b.n	8009290 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800927e:	f7fb fccf 	bl	8004c20 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e1b2      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009290:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f0      	beq.n	800927e <HAL_RCC_OscConfig+0x4d6>
 800929c:	e01b      	b.n	80092d6 <HAL_RCC_OscConfig+0x52e>
 800929e:	bf00      	nop
 80092a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092a4:	4b9b      	ldr	r3, [pc, #620]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a9a      	ldr	r2, [pc, #616]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80092aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092b0:	f7fb fcb6 	bl	8004c20 <HAL_GetTick>
 80092b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80092b8:	f7fb fcb2 	bl	8004c20 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e195      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092ca:	4b92      	ldr	r3, [pc, #584]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f0      	bne.n	80092b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0304 	and.w	r3, r3, #4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 8081 	beq.w	80093e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092e4:	4b8c      	ldr	r3, [pc, #560]	; (8009518 <HAL_RCC_OscConfig+0x770>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a8b      	ldr	r2, [pc, #556]	; (8009518 <HAL_RCC_OscConfig+0x770>)
 80092ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092f0:	f7fb fc96 	bl	8004c20 <HAL_GetTick>
 80092f4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80092f8:	f7fb fc92 	bl	8004c20 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b64      	cmp	r3, #100	; 0x64
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e175      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800930a:	4b83      	ldr	r3, [pc, #524]	; (8009518 <HAL_RCC_OscConfig+0x770>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0f0      	beq.n	80092f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d106      	bne.n	800932c <HAL_RCC_OscConfig+0x584>
 800931e:	4b7d      	ldr	r3, [pc, #500]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009322:	4a7c      	ldr	r2, [pc, #496]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009324:	f043 0301 	orr.w	r3, r3, #1
 8009328:	6713      	str	r3, [r2, #112]	; 0x70
 800932a:	e02d      	b.n	8009388 <HAL_RCC_OscConfig+0x5e0>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10c      	bne.n	800934e <HAL_RCC_OscConfig+0x5a6>
 8009334:	4b77      	ldr	r3, [pc, #476]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009338:	4a76      	ldr	r2, [pc, #472]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 800933a:	f023 0301 	bic.w	r3, r3, #1
 800933e:	6713      	str	r3, [r2, #112]	; 0x70
 8009340:	4b74      	ldr	r3, [pc, #464]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009344:	4a73      	ldr	r2, [pc, #460]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009346:	f023 0304 	bic.w	r3, r3, #4
 800934a:	6713      	str	r3, [r2, #112]	; 0x70
 800934c:	e01c      	b.n	8009388 <HAL_RCC_OscConfig+0x5e0>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	2b05      	cmp	r3, #5
 8009354:	d10c      	bne.n	8009370 <HAL_RCC_OscConfig+0x5c8>
 8009356:	4b6f      	ldr	r3, [pc, #444]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935a:	4a6e      	ldr	r2, [pc, #440]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 800935c:	f043 0304 	orr.w	r3, r3, #4
 8009360:	6713      	str	r3, [r2, #112]	; 0x70
 8009362:	4b6c      	ldr	r3, [pc, #432]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009366:	4a6b      	ldr	r2, [pc, #428]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009368:	f043 0301 	orr.w	r3, r3, #1
 800936c:	6713      	str	r3, [r2, #112]	; 0x70
 800936e:	e00b      	b.n	8009388 <HAL_RCC_OscConfig+0x5e0>
 8009370:	4b68      	ldr	r3, [pc, #416]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009374:	4a67      	ldr	r2, [pc, #412]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	6713      	str	r3, [r2, #112]	; 0x70
 800937c:	4b65      	ldr	r3, [pc, #404]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 800937e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009380:	4a64      	ldr	r2, [pc, #400]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009382:	f023 0304 	bic.w	r3, r3, #4
 8009386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d015      	beq.n	80093bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009390:	f7fb fc46 	bl	8004c20 <HAL_GetTick>
 8009394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009396:	e00a      	b.n	80093ae <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009398:	f7fb fc42 	bl	8004c20 <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d901      	bls.n	80093ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e123      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093ae:	4b59      	ldr	r3, [pc, #356]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80093b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0ee      	beq.n	8009398 <HAL_RCC_OscConfig+0x5f0>
 80093ba:	e014      	b.n	80093e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093bc:	f7fb fc30 	bl	8004c20 <HAL_GetTick>
 80093c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093c2:	e00a      	b.n	80093da <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093c4:	f7fb fc2c 	bl	8004c20 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d901      	bls.n	80093da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e10d      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093da:	4b4e      	ldr	r3, [pc, #312]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1ee      	bne.n	80093c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 8102 	beq.w	80095f4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80093f0:	4b48      	ldr	r3, [pc, #288]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093f8:	2b18      	cmp	r3, #24
 80093fa:	f000 80bd 	beq.w	8009578 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	2b02      	cmp	r3, #2
 8009404:	f040 809e 	bne.w	8009544 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009408:	4b42      	ldr	r3, [pc, #264]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a41      	ldr	r2, [pc, #260]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 800940e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009414:	f7fb fc04 	bl	8004c20 <HAL_GetTick>
 8009418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800941a:	e008      	b.n	800942e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800941c:	f7fb fc00 	bl	8004c20 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d901      	bls.n	800942e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e0e3      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800942e:	4b39      	ldr	r3, [pc, #228]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1f0      	bne.n	800941c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800943a:	4b36      	ldr	r3, [pc, #216]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 800943c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800943e:	4b37      	ldr	r3, [pc, #220]	; (800951c <HAL_RCC_OscConfig+0x774>)
 8009440:	4013      	ands	r3, r2
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800944a:	0112      	lsls	r2, r2, #4
 800944c:	430a      	orrs	r2, r1
 800944e:	4931      	ldr	r1, [pc, #196]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009450:	4313      	orrs	r3, r2
 8009452:	628b      	str	r3, [r1, #40]	; 0x28
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009458:	3b01      	subs	r3, #1
 800945a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009462:	3b01      	subs	r3, #1
 8009464:	025b      	lsls	r3, r3, #9
 8009466:	b29b      	uxth	r3, r3
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	3b01      	subs	r3, #1
 8009470:	041b      	lsls	r3, r3, #16
 8009472:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947c:	3b01      	subs	r3, #1
 800947e:	061b      	lsls	r3, r3, #24
 8009480:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009484:	4923      	ldr	r1, [pc, #140]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009486:	4313      	orrs	r3, r2
 8009488:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800948a:	4b22      	ldr	r3, [pc, #136]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	4a21      	ldr	r2, [pc, #132]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009490:	f023 0301 	bic.w	r3, r3, #1
 8009494:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009496:	4b1f      	ldr	r3, [pc, #124]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800949a:	4b21      	ldr	r3, [pc, #132]	; (8009520 <HAL_RCC_OscConfig+0x778>)
 800949c:	4013      	ands	r3, r2
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094a2:	00d2      	lsls	r2, r2, #3
 80094a4:	491b      	ldr	r1, [pc, #108]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094aa:	4b1a      	ldr	r3, [pc, #104]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	f023 020c 	bic.w	r2, r3, #12
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	4917      	ldr	r1, [pc, #92]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094bc:	4b15      	ldr	r3, [pc, #84]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	f023 0202 	bic.w	r2, r3, #2
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c8:	4912      	ldr	r1, [pc, #72]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094ce:	4b11      	ldr	r3, [pc, #68]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d2:	4a10      	ldr	r2, [pc, #64]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094da:	4b0e      	ldr	r3, [pc, #56]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	4a0d      	ldr	r2, [pc, #52]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ea:	4a0a      	ldr	r2, [pc, #40]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80094f2:	4b08      	ldr	r3, [pc, #32]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f6:	4a07      	ldr	r2, [pc, #28]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094f8:	f043 0301 	orr.w	r3, r3, #1
 80094fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a04      	ldr	r2, [pc, #16]	; (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950a:	f7fb fb89 	bl	8004c20 <HAL_GetTick>
 800950e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009510:	e011      	b.n	8009536 <HAL_RCC_OscConfig+0x78e>
 8009512:	bf00      	nop
 8009514:	58024400 	.word	0x58024400
 8009518:	58024800 	.word	0x58024800
 800951c:	fffffc0c 	.word	0xfffffc0c
 8009520:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009524:	f7fb fb7c 	bl	8004c20 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e05f      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009536:	4b32      	ldr	r3, [pc, #200]	; (8009600 <HAL_RCC_OscConfig+0x858>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0f0      	beq.n	8009524 <HAL_RCC_OscConfig+0x77c>
 8009542:	e057      	b.n	80095f4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009544:	4b2e      	ldr	r3, [pc, #184]	; (8009600 <HAL_RCC_OscConfig+0x858>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a2d      	ldr	r2, [pc, #180]	; (8009600 <HAL_RCC_OscConfig+0x858>)
 800954a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800954e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009550:	f7fb fb66 	bl	8004c20 <HAL_GetTick>
 8009554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009556:	e008      	b.n	800956a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009558:	f7fb fb62 	bl	8004c20 <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d901      	bls.n	800956a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e045      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800956a:	4b25      	ldr	r3, [pc, #148]	; (8009600 <HAL_RCC_OscConfig+0x858>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1f0      	bne.n	8009558 <HAL_RCC_OscConfig+0x7b0>
 8009576:	e03d      	b.n	80095f4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009578:	4b21      	ldr	r3, [pc, #132]	; (8009600 <HAL_RCC_OscConfig+0x858>)
 800957a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800957e:	4b20      	ldr	r3, [pc, #128]	; (8009600 <HAL_RCC_OscConfig+0x858>)
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	2b01      	cmp	r3, #1
 800958a:	d031      	beq.n	80095f0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f003 0203 	and.w	r2, r3, #3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009596:	429a      	cmp	r2, r3
 8009598:	d12a      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	091b      	lsrs	r3, r3, #4
 800959e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d122      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d11a      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	0a5b      	lsrs	r3, r3, #9
 80095be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d111      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	0c1b      	lsrs	r3, r3, #16
 80095d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095da:	429a      	cmp	r2, r3
 80095dc:	d108      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	0e1b      	lsrs	r3, r3, #24
 80095e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d001      	beq.n	80095f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e000      	b.n	80095f6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3730      	adds	r7, #48	; 0x30
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	58024400 	.word	0x58024400

08009604 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e19c      	b.n	8009952 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009618:	4b8a      	ldr	r3, [pc, #552]	; (8009844 <HAL_RCC_ClockConfig+0x240>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 030f 	and.w	r3, r3, #15
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d910      	bls.n	8009648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009626:	4b87      	ldr	r3, [pc, #540]	; (8009844 <HAL_RCC_ClockConfig+0x240>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f023 020f 	bic.w	r2, r3, #15
 800962e:	4985      	ldr	r1, [pc, #532]	; (8009844 <HAL_RCC_ClockConfig+0x240>)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	4313      	orrs	r3, r2
 8009634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009636:	4b83      	ldr	r3, [pc, #524]	; (8009844 <HAL_RCC_ClockConfig+0x240>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	429a      	cmp	r2, r3
 8009642:	d001      	beq.n	8009648 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e184      	b.n	8009952 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0304 	and.w	r3, r3, #4
 8009650:	2b00      	cmp	r3, #0
 8009652:	d010      	beq.n	8009676 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	4b7b      	ldr	r3, [pc, #492]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009660:	429a      	cmp	r2, r3
 8009662:	d908      	bls.n	8009676 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009664:	4b78      	ldr	r3, [pc, #480]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	4975      	ldr	r1, [pc, #468]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009672:	4313      	orrs	r3, r2
 8009674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b00      	cmp	r3, #0
 8009680:	d010      	beq.n	80096a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695a      	ldr	r2, [r3, #20]
 8009686:	4b70      	ldr	r3, [pc, #448]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800968e:	429a      	cmp	r2, r3
 8009690:	d908      	bls.n	80096a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009692:	4b6d      	ldr	r3, [pc, #436]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	496a      	ldr	r1, [pc, #424]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0310 	and.w	r3, r3, #16
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d010      	beq.n	80096d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	4b64      	ldr	r3, [pc, #400]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096bc:	429a      	cmp	r2, r3
 80096be:	d908      	bls.n	80096d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096c0:	4b61      	ldr	r3, [pc, #388]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	495e      	ldr	r1, [pc, #376]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0320 	and.w	r3, r3, #32
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d010      	beq.n	8009700 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69da      	ldr	r2, [r3, #28]
 80096e2:	4b59      	ldr	r3, [pc, #356]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d908      	bls.n	8009700 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80096ee:	4b56      	ldr	r3, [pc, #344]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	4953      	ldr	r1, [pc, #332]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0302 	and.w	r3, r3, #2
 8009708:	2b00      	cmp	r3, #0
 800970a:	d010      	beq.n	800972e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68da      	ldr	r2, [r3, #12]
 8009710:	4b4d      	ldr	r3, [pc, #308]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	f003 030f 	and.w	r3, r3, #15
 8009718:	429a      	cmp	r2, r3
 800971a:	d908      	bls.n	800972e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800971c:	4b4a      	ldr	r3, [pc, #296]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	f023 020f 	bic.w	r2, r3, #15
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	4947      	ldr	r1, [pc, #284]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 800972a:	4313      	orrs	r3, r2
 800972c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	d055      	beq.n	80097e6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800973a:	4b43      	ldr	r3, [pc, #268]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	4940      	ldr	r1, [pc, #256]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009748:	4313      	orrs	r3, r2
 800974a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d107      	bne.n	8009764 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009754:	4b3c      	ldr	r3, [pc, #240]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d121      	bne.n	80097a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e0f6      	b.n	8009952 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	2b03      	cmp	r3, #3
 800976a:	d107      	bne.n	800977c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800976c:	4b36      	ldr	r3, [pc, #216]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d115      	bne.n	80097a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e0ea      	b.n	8009952 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d107      	bne.n	8009794 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009784:	4b30      	ldr	r3, [pc, #192]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978c:	2b00      	cmp	r3, #0
 800978e:	d109      	bne.n	80097a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e0de      	b.n	8009952 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009794:	4b2c      	ldr	r3, [pc, #176]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e0d6      	b.n	8009952 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097a4:	4b28      	ldr	r3, [pc, #160]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	f023 0207 	bic.w	r2, r3, #7
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	4925      	ldr	r1, [pc, #148]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097b6:	f7fb fa33 	bl	8004c20 <HAL_GetTick>
 80097ba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097bc:	e00a      	b.n	80097d4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097be:	f7fb fa2f 	bl	8004c20 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d901      	bls.n	80097d4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e0be      	b.n	8009952 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d4:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d1eb      	bne.n	80097be <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d010      	beq.n	8009814 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	4b14      	ldr	r3, [pc, #80]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	f003 030f 	and.w	r3, r3, #15
 80097fe:	429a      	cmp	r2, r3
 8009800:	d208      	bcs.n	8009814 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009802:	4b11      	ldr	r3, [pc, #68]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	f023 020f 	bic.w	r2, r3, #15
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	490e      	ldr	r1, [pc, #56]	; (8009848 <HAL_RCC_ClockConfig+0x244>)
 8009810:	4313      	orrs	r3, r2
 8009812:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009814:	4b0b      	ldr	r3, [pc, #44]	; (8009844 <HAL_RCC_ClockConfig+0x240>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 030f 	and.w	r3, r3, #15
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d214      	bcs.n	800984c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009822:	4b08      	ldr	r3, [pc, #32]	; (8009844 <HAL_RCC_ClockConfig+0x240>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f023 020f 	bic.w	r2, r3, #15
 800982a:	4906      	ldr	r1, [pc, #24]	; (8009844 <HAL_RCC_ClockConfig+0x240>)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	4313      	orrs	r3, r2
 8009830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009832:	4b04      	ldr	r3, [pc, #16]	; (8009844 <HAL_RCC_ClockConfig+0x240>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 030f 	and.w	r3, r3, #15
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d005      	beq.n	800984c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e086      	b.n	8009952 <HAL_RCC_ClockConfig+0x34e>
 8009844:	52002000 	.word	0x52002000
 8009848:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b00      	cmp	r3, #0
 8009856:	d010      	beq.n	800987a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	4b3f      	ldr	r3, [pc, #252]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009864:	429a      	cmp	r2, r3
 8009866:	d208      	bcs.n	800987a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009868:	4b3c      	ldr	r3, [pc, #240]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	4939      	ldr	r1, [pc, #228]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 8009876:	4313      	orrs	r3, r2
 8009878:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0308 	and.w	r3, r3, #8
 8009882:	2b00      	cmp	r3, #0
 8009884:	d010      	beq.n	80098a8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	695a      	ldr	r2, [r3, #20]
 800988a:	4b34      	ldr	r3, [pc, #208]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009892:	429a      	cmp	r2, r3
 8009894:	d208      	bcs.n	80098a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009896:	4b31      	ldr	r3, [pc, #196]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	492e      	ldr	r1, [pc, #184]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0310 	and.w	r3, r3, #16
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d010      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	699a      	ldr	r2, [r3, #24]
 80098b8:	4b28      	ldr	r3, [pc, #160]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d208      	bcs.n	80098d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80098c4:	4b25      	ldr	r3, [pc, #148]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	4922      	ldr	r1, [pc, #136]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d010      	beq.n	8009904 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	69da      	ldr	r2, [r3, #28]
 80098e6:	4b1d      	ldr	r3, [pc, #116]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d208      	bcs.n	8009904 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80098f2:	4b1a      	ldr	r3, [pc, #104]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	4917      	ldr	r1, [pc, #92]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 8009900:	4313      	orrs	r3, r2
 8009902:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009904:	f000 f834 	bl	8009970 <HAL_RCC_GetSysClockFreq>
 8009908:	4602      	mov	r2, r0
 800990a:	4b14      	ldr	r3, [pc, #80]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	4912      	ldr	r1, [pc, #72]	; (8009960 <HAL_RCC_ClockConfig+0x35c>)
 8009916:	5ccb      	ldrb	r3, [r1, r3]
 8009918:	f003 031f 	and.w	r3, r3, #31
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
 8009920:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009922:	4b0e      	ldr	r3, [pc, #56]	; (800995c <HAL_RCC_ClockConfig+0x358>)
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f003 030f 	and.w	r3, r3, #15
 800992a:	4a0d      	ldr	r2, [pc, #52]	; (8009960 <HAL_RCC_ClockConfig+0x35c>)
 800992c:	5cd3      	ldrb	r3, [r2, r3]
 800992e:	f003 031f 	and.w	r3, r3, #31
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	fa22 f303 	lsr.w	r3, r2, r3
 8009938:	4a0a      	ldr	r2, [pc, #40]	; (8009964 <HAL_RCC_ClockConfig+0x360>)
 800993a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800993c:	4a0a      	ldr	r2, [pc, #40]	; (8009968 <HAL_RCC_ClockConfig+0x364>)
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009942:	4b0a      	ldr	r3, [pc, #40]	; (800996c <HAL_RCC_ClockConfig+0x368>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f7fb f920 	bl	8004b8c <HAL_InitTick>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	58024400 	.word	0x58024400
 8009960:	080115fc 	.word	0x080115fc
 8009964:	24000030 	.word	0x24000030
 8009968:	2400002c 	.word	0x2400002c
 800996c:	24000034 	.word	0x24000034

08009970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009970:	b480      	push	{r7}
 8009972:	b089      	sub	sp, #36	; 0x24
 8009974:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009976:	4bb3      	ldr	r3, [pc, #716]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800997e:	2b18      	cmp	r3, #24
 8009980:	f200 8155 	bhi.w	8009c2e <HAL_RCC_GetSysClockFreq+0x2be>
 8009984:	a201      	add	r2, pc, #4	; (adr r2, 800998c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998a:	bf00      	nop
 800998c:	080099f1 	.word	0x080099f1
 8009990:	08009c2f 	.word	0x08009c2f
 8009994:	08009c2f 	.word	0x08009c2f
 8009998:	08009c2f 	.word	0x08009c2f
 800999c:	08009c2f 	.word	0x08009c2f
 80099a0:	08009c2f 	.word	0x08009c2f
 80099a4:	08009c2f 	.word	0x08009c2f
 80099a8:	08009c2f 	.word	0x08009c2f
 80099ac:	08009a17 	.word	0x08009a17
 80099b0:	08009c2f 	.word	0x08009c2f
 80099b4:	08009c2f 	.word	0x08009c2f
 80099b8:	08009c2f 	.word	0x08009c2f
 80099bc:	08009c2f 	.word	0x08009c2f
 80099c0:	08009c2f 	.word	0x08009c2f
 80099c4:	08009c2f 	.word	0x08009c2f
 80099c8:	08009c2f 	.word	0x08009c2f
 80099cc:	08009a1d 	.word	0x08009a1d
 80099d0:	08009c2f 	.word	0x08009c2f
 80099d4:	08009c2f 	.word	0x08009c2f
 80099d8:	08009c2f 	.word	0x08009c2f
 80099dc:	08009c2f 	.word	0x08009c2f
 80099e0:	08009c2f 	.word	0x08009c2f
 80099e4:	08009c2f 	.word	0x08009c2f
 80099e8:	08009c2f 	.word	0x08009c2f
 80099ec:	08009a23 	.word	0x08009a23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099f0:	4b94      	ldr	r3, [pc, #592]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0320 	and.w	r3, r3, #32
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d009      	beq.n	8009a10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099fc:	4b91      	ldr	r3, [pc, #580]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	08db      	lsrs	r3, r3, #3
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	4a90      	ldr	r2, [pc, #576]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a08:	fa22 f303 	lsr.w	r3, r2, r3
 8009a0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009a0e:	e111      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a10:	4b8d      	ldr	r3, [pc, #564]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a12:	61bb      	str	r3, [r7, #24]
    break;
 8009a14:	e10e      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009a16:	4b8d      	ldr	r3, [pc, #564]	; (8009c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a18:	61bb      	str	r3, [r7, #24]
    break;
 8009a1a:	e10b      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009a1c:	4b8c      	ldr	r3, [pc, #560]	; (8009c50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a1e:	61bb      	str	r3, [r7, #24]
    break;
 8009a20:	e108      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a22:	4b88      	ldr	r3, [pc, #544]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a26:	f003 0303 	and.w	r3, r3, #3
 8009a2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009a2c:	4b85      	ldr	r3, [pc, #532]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	091b      	lsrs	r3, r3, #4
 8009a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a38:	4b82      	ldr	r3, [pc, #520]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a42:	4b80      	ldr	r3, [pc, #512]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a46:	08db      	lsrs	r3, r3, #3
 8009a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 80e1 	beq.w	8009c28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	f000 8083 	beq.w	8009b74 <HAL_RCC_GetSysClockFreq+0x204>
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	f200 80a1 	bhi.w	8009bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <HAL_RCC_GetSysClockFreq+0x114>
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d056      	beq.n	8009b30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009a82:	e099      	b.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a84:	4b6f      	ldr	r3, [pc, #444]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d02d      	beq.n	8009aec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a90:	4b6c      	ldr	r3, [pc, #432]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	08db      	lsrs	r3, r3, #3
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	4a6b      	ldr	r2, [pc, #428]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	ee07 3a90 	vmov	s15, r3
 8009aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aba:	4b62      	ldr	r3, [pc, #392]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ace:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009aea:	e087      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009c58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afe:	4b51      	ldr	r3, [pc, #324]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b2e:	e065      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b42:	4b40      	ldr	r3, [pc, #256]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b72:	e043      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009c60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	4b2f      	ldr	r3, [pc, #188]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb6:	e021      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bca:	4b1e      	ldr	r3, [pc, #120]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bde:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bfa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009bfc:	4b11      	ldr	r3, [pc, #68]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c00:	0a5b      	lsrs	r3, r3, #9
 8009c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c06:	3301      	adds	r3, #1
 8009c08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	ee07 3a90 	vmov	s15, r3
 8009c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c20:	ee17 3a90 	vmov	r3, s15
 8009c24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009c26:	e005      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61bb      	str	r3, [r7, #24]
    break;
 8009c2c:	e002      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009c2e:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c30:	61bb      	str	r3, [r7, #24]
    break;
 8009c32:	bf00      	nop
  }

  return sysclockfreq;
 8009c34:	69bb      	ldr	r3, [r7, #24]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3724      	adds	r7, #36	; 0x24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	58024400 	.word	0x58024400
 8009c48:	03d09000 	.word	0x03d09000
 8009c4c:	003d0900 	.word	0x003d0900
 8009c50:	02625a00 	.word	0x02625a00
 8009c54:	46000000 	.word	0x46000000
 8009c58:	4c742400 	.word	0x4c742400
 8009c5c:	4a742400 	.word	0x4a742400
 8009c60:	4c189680 	.word	0x4c189680

08009c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c6a:	f7ff fe81 	bl	8009970 <HAL_RCC_GetSysClockFreq>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	4b10      	ldr	r3, [pc, #64]	; (8009cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	0a1b      	lsrs	r3, r3, #8
 8009c76:	f003 030f 	and.w	r3, r3, #15
 8009c7a:	490f      	ldr	r1, [pc, #60]	; (8009cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c7c:	5ccb      	ldrb	r3, [r1, r3]
 8009c7e:	f003 031f 	and.w	r3, r3, #31
 8009c82:	fa22 f303 	lsr.w	r3, r2, r3
 8009c86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c88:	4b0a      	ldr	r3, [pc, #40]	; (8009cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	4a09      	ldr	r2, [pc, #36]	; (8009cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c92:	5cd3      	ldrb	r3, [r2, r3]
 8009c94:	f003 031f 	and.w	r3, r3, #31
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9e:	4a07      	ldr	r2, [pc, #28]	; (8009cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8009ca0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ca2:	4a07      	ldr	r2, [pc, #28]	; (8009cc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ca8:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8009caa:	681b      	ldr	r3, [r3, #0]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	58024400 	.word	0x58024400
 8009cb8:	080115fc 	.word	0x080115fc
 8009cbc:	24000030 	.word	0x24000030
 8009cc0:	2400002c 	.word	0x2400002c

08009cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009cc8:	f7ff ffcc 	bl	8009c64 <HAL_RCC_GetHCLKFreq>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	091b      	lsrs	r3, r3, #4
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	4904      	ldr	r1, [pc, #16]	; (8009cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8009cda:	5ccb      	ldrb	r3, [r1, r3]
 8009cdc:	f003 031f 	and.w	r3, r3, #31
 8009ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	58024400 	.word	0x58024400
 8009cec:	080115fc 	.word	0x080115fc

08009cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009cf4:	f7ff ffb6 	bl	8009c64 <HAL_RCC_GetHCLKFreq>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	f003 0307 	and.w	r3, r3, #7
 8009d04:	4904      	ldr	r1, [pc, #16]	; (8009d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d06:	5ccb      	ldrb	r3, [r1, r3]
 8009d08:	f003 031f 	and.w	r3, r3, #31
 8009d0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	58024400 	.word	0x58024400
 8009d18:	080115fc 	.word	0x080115fc

08009d1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d24:	2300      	movs	r3, #0
 8009d26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d28:	2300      	movs	r3, #0
 8009d2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d03f      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d40:	d02a      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009d42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d46:	d824      	bhi.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d4c:	d018      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d52:	d81e      	bhi.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d5c:	d007      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009d5e:	e018      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d60:	4ba3      	ldr	r3, [pc, #652]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d64:	4aa2      	ldr	r2, [pc, #648]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009d6c:	e015      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3304      	adds	r3, #4
 8009d72:	2102      	movs	r1, #2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f001 f9d5 	bl	800b124 <RCCEx_PLL2_Config>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009d7e:	e00c      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3324      	adds	r3, #36	; 0x24
 8009d84:	2102      	movs	r1, #2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f001 fa7e 	bl	800b288 <RCCEx_PLL3_Config>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009d90:	e003      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	75fb      	strb	r3, [r7, #23]
      break;
 8009d96:	e000      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d109      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009da0:	4b93      	ldr	r3, [pc, #588]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dac:	4990      	ldr	r1, [pc, #576]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	650b      	str	r3, [r1, #80]	; 0x50
 8009db2:	e001      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
 8009db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d03d      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d826      	bhi.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009dcc:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009de9 	.word	0x08009de9
 8009dd8:	08009df7 	.word	0x08009df7
 8009ddc:	08009e09 	.word	0x08009e09
 8009de0:	08009e21 	.word	0x08009e21
 8009de4:	08009e21 	.word	0x08009e21
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009de8:	4b81      	ldr	r3, [pc, #516]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dec:	4a80      	ldr	r2, [pc, #512]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009df4:	e015      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f001 f991 	bl	800b124 <RCCEx_PLL2_Config>
 8009e02:	4603      	mov	r3, r0
 8009e04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e06:	e00c      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3324      	adds	r3, #36	; 0x24
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f001 fa3a 	bl	800b288 <RCCEx_PLL3_Config>
 8009e14:	4603      	mov	r3, r0
 8009e16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e18:	e003      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e1e:	e000      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e28:	4b71      	ldr	r3, [pc, #452]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2c:	f023 0207 	bic.w	r2, r3, #7
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e34:	496e      	ldr	r1, [pc, #440]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	650b      	str	r3, [r1, #80]	; 0x50
 8009e3a:	e001      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d042      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e54:	d02b      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5a:	d825      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8009e5e:	d028      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009e60:	2bc0      	cmp	r3, #192	; 0xc0
 8009e62:	d821      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009e64:	2b80      	cmp	r3, #128	; 0x80
 8009e66:	d016      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009e68:	2b80      	cmp	r3, #128	; 0x80
 8009e6a:	d81d      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009e70:	2b40      	cmp	r3, #64	; 0x40
 8009e72:	d007      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009e74:	e018      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e76:	4b5e      	ldr	r3, [pc, #376]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	4a5d      	ldr	r2, [pc, #372]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009e82:	e017      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3304      	adds	r3, #4
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f001 f94a 	bl	800b124 <RCCEx_PLL2_Config>
 8009e90:	4603      	mov	r3, r0
 8009e92:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009e94:	e00e      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3324      	adds	r3, #36	; 0x24
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f9f3 	bl	800b288 <RCCEx_PLL3_Config>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ea6:	e005      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8009eac:	e002      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009eae:	bf00      	nop
 8009eb0:	e000      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d109      	bne.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009eba:	4b4d      	ldr	r3, [pc, #308]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ebe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ec6:	494a      	ldr	r1, [pc, #296]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	650b      	str	r3, [r1, #80]	; 0x50
 8009ecc:	e001      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d049      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ee8:	d030      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009eee:	d82a      	bhi.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009ef0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ef4:	d02c      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009ef6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009efa:	d824      	bhi.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f00:	d018      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f06:	d81e      	bhi.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009f0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f10:	d007      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009f12:	e018      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f14:	4b36      	ldr	r3, [pc, #216]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	4a35      	ldr	r2, [pc, #212]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f20:	e017      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3304      	adds	r3, #4
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 f8fb 	bl	800b124 <RCCEx_PLL2_Config>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009f32:	e00e      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3324      	adds	r3, #36	; 0x24
 8009f38:	2100      	movs	r1, #0
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f001 f9a4 	bl	800b288 <RCCEx_PLL3_Config>
 8009f40:	4603      	mov	r3, r0
 8009f42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f44:	e005      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	75fb      	strb	r3, [r7, #23]
      break;
 8009f4a:	e002      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009f4c:	bf00      	nop
 8009f4e:	e000      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f58:	4b25      	ldr	r3, [pc, #148]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f5c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f66:	4922      	ldr	r1, [pc, #136]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	658b      	str	r3, [r1, #88]	; 0x58
 8009f6c:	e001      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d04b      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f88:	d030      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009f8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f8e:	d82a      	bhi.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009f90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f94:	d02e      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009f96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f9a:	d824      	bhi.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fa0:	d018      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fa6:	d81e      	bhi.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d003      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fb0:	d007      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009fb2:	e018      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb8:	4a0d      	ldr	r2, [pc, #52]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009fc0:	e019      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f001 f8ab 	bl	800b124 <RCCEx_PLL2_Config>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009fd2:	e010      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3324      	adds	r3, #36	; 0x24
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 f954 	bl	800b288 <RCCEx_PLL3_Config>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009fe4:	e007      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fea:	e004      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009fec:	bf00      	nop
 8009fee:	e002      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009ff0:	58024400 	.word	0x58024400
      break;
 8009ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10a      	bne.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ffc:	4b99      	ldr	r3, [pc, #612]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a000:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a00a:	4996      	ldr	r1, [pc, #600]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	658b      	str	r3, [r1, #88]	; 0x58
 800a010:	e001      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a012:	7dfb      	ldrb	r3, [r7, #23]
 800a014:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d032      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a026:	2b30      	cmp	r3, #48	; 0x30
 800a028:	d01c      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800a02a:	2b30      	cmp	r3, #48	; 0x30
 800a02c:	d817      	bhi.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d00c      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x330>
 800a032:	2b20      	cmp	r3, #32
 800a034:	d813      	bhi.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a036:	2b00      	cmp	r3, #0
 800a038:	d016      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d10f      	bne.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a03e:	4b89      	ldr	r3, [pc, #548]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a042:	4a88      	ldr	r2, [pc, #544]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a048:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a04a:	e00e      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3304      	adds	r3, #4
 800a050:	2102      	movs	r1, #2
 800a052:	4618      	mov	r0, r3
 800a054:	f001 f866 	bl	800b124 <RCCEx_PLL2_Config>
 800a058:	4603      	mov	r3, r0
 800a05a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a05c:	e005      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	75fb      	strb	r3, [r7, #23]
      break;
 800a062:	e002      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a064:	bf00      	nop
 800a066:	e000      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a070:	4b7c      	ldr	r3, [pc, #496]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a074:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a07c:	4979      	ldr	r1, [pc, #484]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a082:	e001      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d047      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a09c:	d030      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a09e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a2:	d82a      	bhi.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a0a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0a8:	d02c      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a0aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0ae:	d824      	bhi.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a0b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0b4:	d018      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800a0b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ba:	d81e      	bhi.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a0c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c4:	d007      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800a0c6:	e018      	b.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0c8:	4b66      	ldr	r3, [pc, #408]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	4a65      	ldr	r2, [pc, #404]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a0ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a0d4:	e017      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	2100      	movs	r1, #0
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 f821 	bl	800b124 <RCCEx_PLL2_Config>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a0e6:	e00e      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3324      	adds	r3, #36	; 0x24
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 f8ca 	bl	800b288 <RCCEx_PLL3_Config>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a0f8:	e005      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	75fb      	strb	r3, [r7, #23]
      break;
 800a0fe:	e002      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a100:	bf00      	nop
 800a102:	e000      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a104:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d109      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a10c:	4b55      	ldr	r3, [pc, #340]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a110:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a118:	4952      	ldr	r1, [pc, #328]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	650b      	str	r3, [r1, #80]	; 0x50
 800a11e:	e001      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d049      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a138:	d02e      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a13a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a13e:	d828      	bhi.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a140:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a144:	d02a      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x480>
 800a146:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a14a:	d822      	bhi.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a14c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a150:	d026      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800a152:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a156:	d81c      	bhi.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a15c:	d010      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a15e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a162:	d816      	bhi.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01d      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800a168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a16c:	d111      	bne.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3304      	adds	r3, #4
 800a172:	2101      	movs	r1, #1
 800a174:	4618      	mov	r0, r3
 800a176:	f000 ffd5 	bl	800b124 <RCCEx_PLL2_Config>
 800a17a:	4603      	mov	r3, r0
 800a17c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a17e:	e012      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	3324      	adds	r3, #36	; 0x24
 800a184:	2101      	movs	r1, #1
 800a186:	4618      	mov	r0, r3
 800a188:	f001 f87e 	bl	800b288 <RCCEx_PLL3_Config>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a190:	e009      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	75fb      	strb	r3, [r7, #23]
      break;
 800a196:	e006      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a198:	bf00      	nop
 800a19a:	e004      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a19c:	bf00      	nop
 800a19e:	e002      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a1a0:	bf00      	nop
 800a1a2:	e000      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a1a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d109      	bne.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1ac:	4b2d      	ldr	r3, [pc, #180]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1b8:	492a      	ldr	r1, [pc, #168]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	650b      	str	r3, [r1, #80]	; 0x50
 800a1be:	e001      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d04d      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1da:	d02e      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a1dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1e0:	d828      	bhi.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e6:	d02a      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a1e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ec:	d822      	bhi.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a1ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1f2:	d026      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800a1f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1f8:	d81c      	bhi.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a1fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1fe:	d010      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a204:	d816      	bhi.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a206:	2b00      	cmp	r3, #0
 800a208:	d01d      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a20a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a20e:	d111      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3304      	adds	r3, #4
 800a214:	2101      	movs	r1, #1
 800a216:	4618      	mov	r0, r3
 800a218:	f000 ff84 	bl	800b124 <RCCEx_PLL2_Config>
 800a21c:	4603      	mov	r3, r0
 800a21e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a220:	e012      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3324      	adds	r3, #36	; 0x24
 800a226:	2101      	movs	r1, #1
 800a228:	4618      	mov	r0, r3
 800a22a:	f001 f82d 	bl	800b288 <RCCEx_PLL3_Config>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a232:	e009      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	75fb      	strb	r3, [r7, #23]
      break;
 800a238:	e006      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a23a:	bf00      	nop
 800a23c:	e004      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a23e:	bf00      	nop
 800a240:	e002      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a242:	bf00      	nop
 800a244:	e000      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a246:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a248:	7dfb      	ldrb	r3, [r7, #23]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10c      	bne.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a24e:	4b05      	ldr	r3, [pc, #20]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a252:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a25c:	4901      	ldr	r1, [pc, #4]	; (800a264 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	658b      	str	r3, [r1, #88]	; 0x58
 800a262:	e003      	b.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a268:	7dfb      	ldrb	r3, [r7, #23]
 800a26a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d02f      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a27c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a280:	d00e      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800a282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a286:	d814      	bhi.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d015      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800a28c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a290:	d10f      	bne.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a292:	4baf      	ldr	r3, [pc, #700]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	4aae      	ldr	r2, [pc, #696]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a29c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a29e:	e00c      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 ff3c 	bl	800b124 <RCCEx_PLL2_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a2b0:	e003      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b6:	e000      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800a2b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d109      	bne.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2c0:	4ba3      	ldr	r3, [pc, #652]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2cc:	49a0      	ldr	r1, [pc, #640]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	650b      	str	r3, [r1, #80]	; 0x50
 800a2d2:	e001      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d032      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d81b      	bhi.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a32b 	.word	0x0800a32b
 800a2f8:	0800a305 	.word	0x0800a305
 800a2fc:	0800a313 	.word	0x0800a313
 800a300:	0800a32b 	.word	0x0800a32b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a304:	4b92      	ldr	r3, [pc, #584]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a308:	4a91      	ldr	r2, [pc, #580]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a30a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a30e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a310:	e00c      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	3304      	adds	r3, #4
 800a316:	2102      	movs	r1, #2
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 ff03 	bl	800b124 <RCCEx_PLL2_Config>
 800a31e:	4603      	mov	r3, r0
 800a320:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a322:	e003      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	75fb      	strb	r3, [r7, #23]
      break;
 800a328:	e000      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a32a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d109      	bne.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a332:	4b87      	ldr	r3, [pc, #540]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a336:	f023 0203 	bic.w	r2, r3, #3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33e:	4984      	ldr	r1, [pc, #528]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a340:	4313      	orrs	r3, r2
 800a342:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a344:	e001      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a346:	7dfb      	ldrb	r3, [r7, #23]
 800a348:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 8086 	beq.w	800a464 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a358:	4b7e      	ldr	r3, [pc, #504]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a7d      	ldr	r2, [pc, #500]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a35e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a364:	f7fa fc5c 	bl	8004c20 <HAL_GetTick>
 800a368:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a36a:	e009      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a36c:	f7fa fc58 	bl	8004c20 <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	2b64      	cmp	r3, #100	; 0x64
 800a378:	d902      	bls.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	75fb      	strb	r3, [r7, #23]
        break;
 800a37e:	e005      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a380:	4b74      	ldr	r3, [pc, #464]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d0ef      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a38c:	7dfb      	ldrb	r3, [r7, #23]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d166      	bne.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a392:	4b6f      	ldr	r3, [pc, #444]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a394:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a39c:	4053      	eors	r3, r2
 800a39e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d013      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3a6:	4b6a      	ldr	r3, [pc, #424]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3b0:	4b67      	ldr	r3, [pc, #412]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b4:	4a66      	ldr	r2, [pc, #408]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3bc:	4b64      	ldr	r3, [pc, #400]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c0:	4a63      	ldr	r2, [pc, #396]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a3c8:	4a61      	ldr	r2, [pc, #388]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d8:	d115      	bne.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3da:	f7fa fc21 	bl	8004c20 <HAL_GetTick>
 800a3de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3e0:	e00b      	b.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3e2:	f7fa fc1d 	bl	8004c20 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d902      	bls.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	75fb      	strb	r3, [r7, #23]
            break;
 800a3f8:	e005      	b.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3fa:	4b55      	ldr	r3, [pc, #340]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d0ed      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d126      	bne.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a41a:	d10d      	bne.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a41c:	4b4c      	ldr	r3, [pc, #304]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a42a:	0919      	lsrs	r1, r3, #4
 800a42c:	4b4a      	ldr	r3, [pc, #296]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800a42e:	400b      	ands	r3, r1
 800a430:	4947      	ldr	r1, [pc, #284]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a432:	4313      	orrs	r3, r2
 800a434:	610b      	str	r3, [r1, #16]
 800a436:	e005      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a438:	4b45      	ldr	r3, [pc, #276]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	4a44      	ldr	r2, [pc, #272]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a43e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a442:	6113      	str	r3, [r2, #16]
 800a444:	4b42      	ldr	r3, [pc, #264]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a446:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a44e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a452:	493f      	ldr	r1, [pc, #252]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a454:	4313      	orrs	r3, r2
 800a456:	670b      	str	r3, [r1, #112]	; 0x70
 800a458:	e004      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	75bb      	strb	r3, [r7, #22]
 800a45e:	e001      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 8085 	beq.w	800a57c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a476:	2b28      	cmp	r3, #40	; 0x28
 800a478:	d866      	bhi.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a47a:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a55d 	.word	0x0800a55d
 800a484:	0800a549 	.word	0x0800a549
 800a488:	0800a549 	.word	0x0800a549
 800a48c:	0800a549 	.word	0x0800a549
 800a490:	0800a549 	.word	0x0800a549
 800a494:	0800a549 	.word	0x0800a549
 800a498:	0800a549 	.word	0x0800a549
 800a49c:	0800a549 	.word	0x0800a549
 800a4a0:	0800a525 	.word	0x0800a525
 800a4a4:	0800a549 	.word	0x0800a549
 800a4a8:	0800a549 	.word	0x0800a549
 800a4ac:	0800a549 	.word	0x0800a549
 800a4b0:	0800a549 	.word	0x0800a549
 800a4b4:	0800a549 	.word	0x0800a549
 800a4b8:	0800a549 	.word	0x0800a549
 800a4bc:	0800a549 	.word	0x0800a549
 800a4c0:	0800a537 	.word	0x0800a537
 800a4c4:	0800a549 	.word	0x0800a549
 800a4c8:	0800a549 	.word	0x0800a549
 800a4cc:	0800a549 	.word	0x0800a549
 800a4d0:	0800a549 	.word	0x0800a549
 800a4d4:	0800a549 	.word	0x0800a549
 800a4d8:	0800a549 	.word	0x0800a549
 800a4dc:	0800a549 	.word	0x0800a549
 800a4e0:	0800a55d 	.word	0x0800a55d
 800a4e4:	0800a549 	.word	0x0800a549
 800a4e8:	0800a549 	.word	0x0800a549
 800a4ec:	0800a549 	.word	0x0800a549
 800a4f0:	0800a549 	.word	0x0800a549
 800a4f4:	0800a549 	.word	0x0800a549
 800a4f8:	0800a549 	.word	0x0800a549
 800a4fc:	0800a549 	.word	0x0800a549
 800a500:	0800a55d 	.word	0x0800a55d
 800a504:	0800a549 	.word	0x0800a549
 800a508:	0800a549 	.word	0x0800a549
 800a50c:	0800a549 	.word	0x0800a549
 800a510:	0800a549 	.word	0x0800a549
 800a514:	0800a549 	.word	0x0800a549
 800a518:	0800a549 	.word	0x0800a549
 800a51c:	0800a549 	.word	0x0800a549
 800a520:	0800a55d 	.word	0x0800a55d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3304      	adds	r3, #4
 800a528:	2101      	movs	r1, #1
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fdfa 	bl	800b124 <RCCEx_PLL2_Config>
 800a530:	4603      	mov	r3, r0
 800a532:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a534:	e013      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	3324      	adds	r3, #36	; 0x24
 800a53a:	2101      	movs	r1, #1
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fea3 	bl	800b288 <RCCEx_PLL3_Config>
 800a542:	4603      	mov	r3, r0
 800a544:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a546:	e00a      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	75fb      	strb	r3, [r7, #23]
      break;
 800a54c:	e007      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800a54e:	bf00      	nop
 800a550:	58024400 	.word	0x58024400
 800a554:	58024800 	.word	0x58024800
 800a558:	00ffffcf 	.word	0x00ffffcf
      break;
 800a55c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d109      	bne.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a564:	4b96      	ldr	r3, [pc, #600]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a568:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a570:	4993      	ldr	r1, [pc, #588]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a572:	4313      	orrs	r3, r2
 800a574:	654b      	str	r3, [r1, #84]	; 0x54
 800a576:	e001      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a578:	7dfb      	ldrb	r3, [r7, #23]
 800a57a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0302 	and.w	r3, r3, #2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d038      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a58c:	2b05      	cmp	r3, #5
 800a58e:	d821      	bhi.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a590:	a201      	add	r2, pc, #4	; (adr r2, 800a598 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a5db 	.word	0x0800a5db
 800a59c:	0800a5b1 	.word	0x0800a5b1
 800a5a0:	0800a5c3 	.word	0x0800a5c3
 800a5a4:	0800a5db 	.word	0x0800a5db
 800a5a8:	0800a5db 	.word	0x0800a5db
 800a5ac:	0800a5db 	.word	0x0800a5db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fdb4 	bl	800b124 <RCCEx_PLL2_Config>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5c0:	e00c      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	3324      	adds	r3, #36	; 0x24
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fe5d 	bl	800b288 <RCCEx_PLL3_Config>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5d2:	e003      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d8:	e000      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800a5da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d109      	bne.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a5e2:	4b77      	ldr	r3, [pc, #476]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a5e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e6:	f023 0207 	bic.w	r2, r3, #7
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ee:	4974      	ldr	r1, [pc, #464]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	654b      	str	r3, [r1, #84]	; 0x54
 800a5f4:	e001      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 0304 	and.w	r3, r3, #4
 800a602:	2b00      	cmp	r3, #0
 800a604:	d03a      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a60c:	2b05      	cmp	r3, #5
 800a60e:	d821      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800a610:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a65b 	.word	0x0800a65b
 800a61c:	0800a631 	.word	0x0800a631
 800a620:	0800a643 	.word	0x0800a643
 800a624:	0800a65b 	.word	0x0800a65b
 800a628:	0800a65b 	.word	0x0800a65b
 800a62c:	0800a65b 	.word	0x0800a65b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3304      	adds	r3, #4
 800a634:	2101      	movs	r1, #1
 800a636:	4618      	mov	r0, r3
 800a638:	f000 fd74 	bl	800b124 <RCCEx_PLL2_Config>
 800a63c:	4603      	mov	r3, r0
 800a63e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a640:	e00c      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	3324      	adds	r3, #36	; 0x24
 800a646:	2101      	movs	r1, #1
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 fe1d 	bl	800b288 <RCCEx_PLL3_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a652:	e003      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	75fb      	strb	r3, [r7, #23]
      break;
 800a658:	e000      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800a65a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a65c:	7dfb      	ldrb	r3, [r7, #23]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10a      	bne.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a662:	4b57      	ldr	r3, [pc, #348]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a666:	f023 0207 	bic.w	r2, r3, #7
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a670:	4953      	ldr	r1, [pc, #332]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a672:	4313      	orrs	r3, r2
 800a674:	658b      	str	r3, [r1, #88]	; 0x58
 800a676:	e001      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a678:	7dfb      	ldrb	r3, [r7, #23]
 800a67a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0320 	and.w	r3, r3, #32
 800a684:	2b00      	cmp	r3, #0
 800a686:	d04b      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a68e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a692:	d02e      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a698:	d828      	bhi.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69e:	d02a      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6a4:	d822      	bhi.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a6a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6aa:	d026      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a6ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6b0:	d81c      	bhi.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a6b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6b6:	d010      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a6b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6bc:	d816      	bhi.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d01d      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a6c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6c6:	d111      	bne.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fd28 	bl	800b124 <RCCEx_PLL2_Config>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a6d8:	e012      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	3324      	adds	r3, #36	; 0x24
 800a6de:	2102      	movs	r1, #2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 fdd1 	bl	800b288 <RCCEx_PLL3_Config>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a6ea:	e009      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a6f0:	e006      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a6f2:	bf00      	nop
 800a6f4:	e004      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a6f6:	bf00      	nop
 800a6f8:	e002      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a6fa:	bf00      	nop
 800a6fc:	e000      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a6fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10a      	bne.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a706:	4b2e      	ldr	r3, [pc, #184]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a714:	492a      	ldr	r1, [pc, #168]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a716:	4313      	orrs	r3, r2
 800a718:	654b      	str	r3, [r1, #84]	; 0x54
 800a71a:	e001      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
 800a71e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d04d      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a732:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a736:	d02e      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a738:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a73c:	d828      	bhi.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a73e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a742:	d02a      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a748:	d822      	bhi.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a74a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a74e:	d026      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a754:	d81c      	bhi.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a75a:	d010      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a75c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a760:	d816      	bhi.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a762:	2b00      	cmp	r3, #0
 800a764:	d01d      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a76a:	d111      	bne.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3304      	adds	r3, #4
 800a770:	2100      	movs	r1, #0
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fcd6 	bl	800b124 <RCCEx_PLL2_Config>
 800a778:	4603      	mov	r3, r0
 800a77a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a77c:	e012      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	3324      	adds	r3, #36	; 0x24
 800a782:	2102      	movs	r1, #2
 800a784:	4618      	mov	r0, r3
 800a786:	f000 fd7f 	bl	800b288 <RCCEx_PLL3_Config>
 800a78a:	4603      	mov	r3, r0
 800a78c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a78e:	e009      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	75fb      	strb	r3, [r7, #23]
      break;
 800a794:	e006      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a796:	bf00      	nop
 800a798:	e004      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a79a:	bf00      	nop
 800a79c:	e002      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a79e:	bf00      	nop
 800a7a0:	e000      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a7a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10c      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7aa:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7b8:	4901      	ldr	r1, [pc, #4]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	658b      	str	r3, [r1, #88]	; 0x58
 800a7be:	e003      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a7c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c4:	7dfb      	ldrb	r3, [r7, #23]
 800a7c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d04b      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a7de:	d02e      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a7e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a7e4:	d828      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a7e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7ea:	d02a      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a7ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7f0:	d822      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a7f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a7f6:	d026      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a7f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a7fc:	d81c      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a7fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a802:	d010      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a808:	d816      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d01d      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a812:	d111      	bne.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3304      	adds	r3, #4
 800a818:	2100      	movs	r1, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 fc82 	bl	800b124 <RCCEx_PLL2_Config>
 800a820:	4603      	mov	r3, r0
 800a822:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a824:	e012      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3324      	adds	r3, #36	; 0x24
 800a82a:	2102      	movs	r1, #2
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 fd2b 	bl	800b288 <RCCEx_PLL3_Config>
 800a832:	4603      	mov	r3, r0
 800a834:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a836:	e009      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	75fb      	strb	r3, [r7, #23]
      break;
 800a83c:	e006      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a83e:	bf00      	nop
 800a840:	e004      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a842:	bf00      	nop
 800a844:	e002      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a846:	bf00      	nop
 800a848:	e000      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a84a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10a      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a852:	4b9d      	ldr	r3, [pc, #628]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a860:	4999      	ldr	r1, [pc, #612]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a862:	4313      	orrs	r3, r2
 800a864:	658b      	str	r3, [r1, #88]	; 0x58
 800a866:	e001      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a868:	7dfb      	ldrb	r3, [r7, #23]
 800a86a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0308 	and.w	r3, r3, #8
 800a874:	2b00      	cmp	r3, #0
 800a876:	d01a      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a87e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a882:	d10a      	bne.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3324      	adds	r3, #36	; 0x24
 800a888:	2102      	movs	r1, #2
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fcfc 	bl	800b288 <RCCEx_PLL3_Config>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a89a:	4b8b      	ldr	r3, [pc, #556]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8a8:	4987      	ldr	r1, [pc, #540]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0310 	and.w	r3, r3, #16
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d01a      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8c4:	d10a      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3324      	adds	r3, #36	; 0x24
 800a8ca:	2102      	movs	r1, #2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fcdb 	bl	800b288 <RCCEx_PLL3_Config>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a8dc:	4b7a      	ldr	r3, [pc, #488]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8ea:	4977      	ldr	r1, [pc, #476]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d034      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a906:	d01d      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a90c:	d817      	bhi.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d003      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a916:	d009      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a918:	e011      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	3304      	adds	r3, #4
 800a91e:	2100      	movs	r1, #0
 800a920:	4618      	mov	r0, r3
 800a922:	f000 fbff 	bl	800b124 <RCCEx_PLL2_Config>
 800a926:	4603      	mov	r3, r0
 800a928:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a92a:	e00c      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3324      	adds	r3, #36	; 0x24
 800a930:	2102      	movs	r1, #2
 800a932:	4618      	mov	r0, r3
 800a934:	f000 fca8 	bl	800b288 <RCCEx_PLL3_Config>
 800a938:	4603      	mov	r3, r0
 800a93a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a93c:	e003      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	75fb      	strb	r3, [r7, #23]
      break;
 800a942:	e000      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a944:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a94c:	4b5e      	ldr	r3, [pc, #376]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a95a:	495b      	ldr	r1, [pc, #364]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	658b      	str	r3, [r1, #88]	; 0x58
 800a960:	e001      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a962:	7dfb      	ldrb	r3, [r7, #23]
 800a964:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d033      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a978:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a97c:	d01c      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a97e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a982:	d816      	bhi.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a988:	d003      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a98a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a98e:	d007      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a990:	e00f      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a992:	4b4d      	ldr	r3, [pc, #308]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a996:	4a4c      	ldr	r2, [pc, #304]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a99c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a99e:	e00c      	b.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3324      	adds	r3, #36	; 0x24
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 fc6e 	bl	800b288 <RCCEx_PLL3_Config>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a9b0:	e003      	b.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a9b6:	e000      	b.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a9b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9c0:	4b41      	ldr	r3, [pc, #260]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9ce:	493e      	ldr	r1, [pc, #248]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	654b      	str	r3, [r1, #84]	; 0x54
 800a9d4:	e001      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d029      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a9ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f2:	d007      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a9f4:	e00f      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f6:	4b34      	ldr	r3, [pc, #208]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fa:	4a33      	ldr	r2, [pc, #204]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a9fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa02:	e00b      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3304      	adds	r3, #4
 800aa08:	2102      	movs	r1, #2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fb8a 	bl	800b124 <RCCEx_PLL2_Config>
 800aa10:	4603      	mov	r3, r0
 800aa12:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa14:	e002      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	75fb      	strb	r3, [r7, #23]
      break;
 800aa1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d109      	bne.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa22:	4b29      	ldr	r3, [pc, #164]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aa24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa2e:	4926      	ldr	r1, [pc, #152]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa34:	e001      	b.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00a      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3324      	adds	r3, #36	; 0x24
 800aa4a:	2102      	movs	r1, #2
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 fc1b 	bl	800b288 <RCCEx_PLL3_Config>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d033      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa70:	d017      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800aa72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa76:	d811      	bhi.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800aa78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa7c:	d013      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800aa7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa82:	d80b      	bhi.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d010      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800aa88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa8c:	d106      	bne.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa8e:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	4a0d      	ldr	r2, [pc, #52]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aa94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aa9a:	e007      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	75fb      	strb	r3, [r7, #23]
      break;
 800aaa0:	e004      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800aaa2:	bf00      	nop
 800aaa4:	e002      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800aaa6:	bf00      	nop
 800aaa8:	e000      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800aaaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaac:	7dfb      	ldrb	r3, [r7, #23]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10c      	bne.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aab2:	4b05      	ldr	r3, [pc, #20]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aabe:	4902      	ldr	r1, [pc, #8]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aac0:	4313      	orrs	r3, r2
 800aac2:	654b      	str	r3, [r1, #84]	; 0x54
 800aac4:	e004      	b.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800aac6:	bf00      	nop
 800aac8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aacc:	7dfb      	ldrb	r3, [r7, #23]
 800aace:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d008      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aadc:	4b31      	ldr	r3, [pc, #196]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800aade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae8:	492e      	ldr	r1, [pc, #184]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d009      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800aafa:	4b2a      	ldr	r3, [pc, #168]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ab08:	4926      	ldr	r1, [pc, #152]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d008      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab1a:	4b22      	ldr	r3, [pc, #136]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab26:	491f      	ldr	r1, [pc, #124]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00d      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab38:	4b1a      	ldr	r3, [pc, #104]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	4a19      	ldr	r2, [pc, #100]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab42:	6113      	str	r3, [r2, #16]
 800ab44:	4b17      	ldr	r3, [pc, #92]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab46:	691a      	ldr	r2, [r3, #16]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ab4e:	4915      	ldr	r1, [pc, #84]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab50:	4313      	orrs	r3, r2
 800ab52:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da08      	bge.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ab5c:	4b11      	ldr	r3, [pc, #68]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab68:	490e      	ldr	r1, [pc, #56]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d009      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ab7a:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab88:	4906      	ldr	r1, [pc, #24]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ab8e:	7dbb      	ldrb	r3, [r7, #22]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	e000      	b.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	58024400 	.word	0x58024400

0800aba8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800abac:	f7ff f85a 	bl	8009c64 <HAL_RCC_GetHCLKFreq>
 800abb0:	4602      	mov	r2, r0
 800abb2:	4b06      	ldr	r3, [pc, #24]	; (800abcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	091b      	lsrs	r3, r3, #4
 800abb8:	f003 0307 	and.w	r3, r3, #7
 800abbc:	4904      	ldr	r1, [pc, #16]	; (800abd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800abbe:	5ccb      	ldrb	r3, [r1, r3]
 800abc0:	f003 031f 	and.w	r3, r3, #31
 800abc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800abc8:	4618      	mov	r0, r3
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	58024400 	.word	0x58024400
 800abd0:	080115fc 	.word	0x080115fc

0800abd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b089      	sub	sp, #36	; 0x24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abdc:	4ba1      	ldr	r3, [pc, #644]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe0:	f003 0303 	and.w	r3, r3, #3
 800abe4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800abe6:	4b9f      	ldr	r3, [pc, #636]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abea:	0b1b      	lsrs	r3, r3, #12
 800abec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abf0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800abf2:	4b9c      	ldr	r3, [pc, #624]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf6:	091b      	lsrs	r3, r3, #4
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800abfe:	4b99      	ldr	r3, [pc, #612]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	08db      	lsrs	r3, r3, #3
 800ac04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	fb02 f303 	mul.w	r3, r2, r3
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 8111 	beq.w	800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	f000 8083 	beq.w	800ad30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	f200 80a1 	bhi.w	800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d003      	beq.n	800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d056      	beq.n	800acec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac3e:	e099      	b.n	800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac40:	4b88      	ldr	r3, [pc, #544]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0320 	and.w	r3, r3, #32
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d02d      	beq.n	800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac4c:	4b85      	ldr	r3, [pc, #532]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	08db      	lsrs	r3, r3, #3
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	4a84      	ldr	r2, [pc, #528]	; (800ae68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac58:	fa22 f303 	lsr.w	r3, r2, r3
 800ac5c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	ee07 3a90 	vmov	s15, r3
 800ac64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac76:	4b7b      	ldr	r3, [pc, #492]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aca6:	e087      	b.n	800adb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	ee07 3a90 	vmov	s15, r3
 800acae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800acb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acba:	4b6a      	ldr	r3, [pc, #424]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acca:	ed97 6a03 	vldr	s12, [r7, #12]
 800acce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acea:	e065      	b.n	800adb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfe:	4b59      	ldr	r3, [pc, #356]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad2e:	e043      	b.n	800adb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b48      	ldr	r3, [pc, #288]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad72:	e021      	b.n	800adb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad86:	4b37      	ldr	r3, [pc, #220]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800adb8:	4b2a      	ldr	r3, [pc, #168]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbc:	0a5b      	lsrs	r3, r3, #9
 800adbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800add2:	edd7 6a07 	vldr	s13, [r7, #28]
 800add6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adde:	ee17 2a90 	vmov	r2, s15
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ade6:	4b1f      	ldr	r3, [pc, #124]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adea:	0c1b      	lsrs	r3, r3, #16
 800adec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0c:	ee17 2a90 	vmov	r2, s15
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ae14:	4b13      	ldr	r3, [pc, #76]	; (800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae18:	0e1b      	lsrs	r3, r3, #24
 800ae1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae3a:	ee17 2a90 	vmov	r2, s15
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae42:	e008      	b.n	800ae56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	609a      	str	r2, [r3, #8]
}
 800ae56:	bf00      	nop
 800ae58:	3724      	adds	r7, #36	; 0x24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	58024400 	.word	0x58024400
 800ae68:	03d09000 	.word	0x03d09000
 800ae6c:	46000000 	.word	0x46000000
 800ae70:	4c742400 	.word	0x4c742400
 800ae74:	4a742400 	.word	0x4a742400
 800ae78:	4c189680 	.word	0x4c189680

0800ae7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b089      	sub	sp, #36	; 0x24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae84:	4ba1      	ldr	r3, [pc, #644]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae88:	f003 0303 	and.w	r3, r3, #3
 800ae8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae8e:	4b9f      	ldr	r3, [pc, #636]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae92:	0d1b      	lsrs	r3, r3, #20
 800ae94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae9a:	4b9c      	ldr	r3, [pc, #624]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9e:	0a1b      	lsrs	r3, r3, #8
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800aea6:	4b99      	ldr	r3, [pc, #612]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeaa:	08db      	lsrs	r3, r3, #3
 800aeac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
 800aeb6:	ee07 3a90 	vmov	s15, r3
 800aeba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aebe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 8111 	beq.w	800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	f000 8083 	beq.w	800afd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	f200 80a1 	bhi.w	800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d056      	beq.n	800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aee6:	e099      	b.n	800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aee8:	4b88      	ldr	r3, [pc, #544]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 0320 	and.w	r3, r3, #32
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d02d      	beq.n	800af50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aef4:	4b85      	ldr	r3, [pc, #532]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	08db      	lsrs	r3, r3, #3
 800aefa:	f003 0303 	and.w	r3, r3, #3
 800aefe:	4a84      	ldr	r2, [pc, #528]	; (800b110 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af00:	fa22 f303 	lsr.w	r3, r2, r3
 800af04:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	ee07 3a90 	vmov	s15, r3
 800af0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1e:	4b7b      	ldr	r3, [pc, #492]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af32:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af4e:	e087      	b.n	800b060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b118 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af62:	4b6a      	ldr	r3, [pc, #424]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af6a:	ee07 3a90 	vmov	s15, r3
 800af6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af72:	ed97 6a03 	vldr	s12, [r7, #12]
 800af76:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af92:	e065      	b.n	800b060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa6:	4b59      	ldr	r3, [pc, #356]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afd6:	e043      	b.n	800b060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800afe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afea:	4b48      	ldr	r3, [pc, #288]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affa:	ed97 6a03 	vldr	s12, [r7, #12]
 800affe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b01a:	e021      	b.n	800b060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b026:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b02e:	4b37      	ldr	r3, [pc, #220]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b042:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b05e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b060:	4b2a      	ldr	r3, [pc, #168]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b064:	0a5b      	lsrs	r3, r3, #9
 800b066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b07a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b07e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b086:	ee17 2a90 	vmov	r2, s15
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b08e:	4b1f      	ldr	r3, [pc, #124]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	0c1b      	lsrs	r3, r3, #16
 800b094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b098:	ee07 3a90 	vmov	s15, r3
 800b09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0b4:	ee17 2a90 	vmov	r2, s15
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b0bc:	4b13      	ldr	r3, [pc, #76]	; (800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c0:	0e1b      	lsrs	r3, r3, #24
 800b0c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0c6:	ee07 3a90 	vmov	s15, r3
 800b0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0e2:	ee17 2a90 	vmov	r2, s15
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0ea:	e008      	b.n	800b0fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	609a      	str	r2, [r3, #8]
}
 800b0fe:	bf00      	nop
 800b100:	3724      	adds	r7, #36	; 0x24
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	58024400 	.word	0x58024400
 800b110:	03d09000 	.word	0x03d09000
 800b114:	46000000 	.word	0x46000000
 800b118:	4c742400 	.word	0x4c742400
 800b11c:	4a742400 	.word	0x4a742400
 800b120:	4c189680 	.word	0x4c189680

0800b124 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b132:	4b53      	ldr	r3, [pc, #332]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b136:	f003 0303 	and.w	r3, r3, #3
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d101      	bne.n	800b142 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e099      	b.n	800b276 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b142:	4b4f      	ldr	r3, [pc, #316]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a4e      	ldr	r2, [pc, #312]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b148:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b14c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b14e:	f7f9 fd67 	bl	8004c20 <HAL_GetTick>
 800b152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b154:	e008      	b.n	800b168 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b156:	f7f9 fd63 	bl	8004c20 <HAL_GetTick>
 800b15a:	4602      	mov	r2, r0
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	2b02      	cmp	r3, #2
 800b162:	d901      	bls.n	800b168 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b164:	2303      	movs	r3, #3
 800b166:	e086      	b.n	800b276 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b168:	4b45      	ldr	r3, [pc, #276]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1f0      	bne.n	800b156 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b174:	4b42      	ldr	r3, [pc, #264]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b178:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	031b      	lsls	r3, r3, #12
 800b182:	493f      	ldr	r1, [pc, #252]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b184:	4313      	orrs	r3, r2
 800b186:	628b      	str	r3, [r1, #40]	; 0x28
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	3b01      	subs	r3, #1
 800b198:	025b      	lsls	r3, r3, #9
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	431a      	orrs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	041b      	lsls	r3, r3, #16
 800b1a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	061b      	lsls	r3, r3, #24
 800b1b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1b8:	4931      	ldr	r1, [pc, #196]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1be:	4b30      	ldr	r3, [pc, #192]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	695b      	ldr	r3, [r3, #20]
 800b1ca:	492d      	ldr	r1, [pc, #180]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b1d0:	4b2b      	ldr	r3, [pc, #172]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	f023 0220 	bic.w	r2, r3, #32
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	4928      	ldr	r1, [pc, #160]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b1e2:	4b27      	ldr	r3, [pc, #156]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e6:	4a26      	ldr	r2, [pc, #152]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b1e8:	f023 0310 	bic.w	r3, r3, #16
 800b1ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b1ee:	4b24      	ldr	r3, [pc, #144]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b1f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1f2:	4b24      	ldr	r3, [pc, #144]	; (800b284 <RCCEx_PLL2_Config+0x160>)
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	69d2      	ldr	r2, [r2, #28]
 800b1fa:	00d2      	lsls	r2, r2, #3
 800b1fc:	4920      	ldr	r1, [pc, #128]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b1fe:	4313      	orrs	r3, r2
 800b200:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b202:	4b1f      	ldr	r3, [pc, #124]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b208:	f043 0310 	orr.w	r3, r3, #16
 800b20c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b214:	4b1a      	ldr	r3, [pc, #104]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	4a19      	ldr	r2, [pc, #100]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b21a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b21e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b220:	e00f      	b.n	800b242 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d106      	bne.n	800b236 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b228:	4b15      	ldr	r3, [pc, #84]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22c:	4a14      	ldr	r2, [pc, #80]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b22e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b232:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b234:	e005      	b.n	800b242 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b236:	4b12      	ldr	r3, [pc, #72]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	4a11      	ldr	r2, [pc, #68]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b23c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b242:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a0e      	ldr	r2, [pc, #56]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b24c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b24e:	f7f9 fce7 	bl	8004c20 <HAL_GetTick>
 800b252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b254:	e008      	b.n	800b268 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b256:	f7f9 fce3 	bl	8004c20 <HAL_GetTick>
 800b25a:	4602      	mov	r2, r0
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	2b02      	cmp	r3, #2
 800b262:	d901      	bls.n	800b268 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e006      	b.n	800b276 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b268:	4b05      	ldr	r3, [pc, #20]	; (800b280 <RCCEx_PLL2_Config+0x15c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d0f0      	beq.n	800b256 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	58024400 	.word	0x58024400
 800b284:	ffff0007 	.word	0xffff0007

0800b288 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b296:	4b53      	ldr	r3, [pc, #332]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29a:	f003 0303 	and.w	r3, r3, #3
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d101      	bne.n	800b2a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e099      	b.n	800b3da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2a6:	4b4f      	ldr	r3, [pc, #316]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a4e      	ldr	r2, [pc, #312]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b2ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2b2:	f7f9 fcb5 	bl	8004c20 <HAL_GetTick>
 800b2b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2b8:	e008      	b.n	800b2cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b2ba:	f7f9 fcb1 	bl	8004c20 <HAL_GetTick>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d901      	bls.n	800b2cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e086      	b.n	800b3da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2cc:	4b45      	ldr	r3, [pc, #276]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1f0      	bne.n	800b2ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b2d8:	4b42      	ldr	r3, [pc, #264]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	051b      	lsls	r3, r3, #20
 800b2e6:	493f      	ldr	r1, [pc, #252]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	628b      	str	r3, [r1, #40]	; 0x28
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	025b      	lsls	r3, r3, #9
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	3b01      	subs	r3, #1
 800b308:	041b      	lsls	r3, r3, #16
 800b30a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b30e:	431a      	orrs	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	3b01      	subs	r3, #1
 800b316:	061b      	lsls	r3, r3, #24
 800b318:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b31c:	4931      	ldr	r1, [pc, #196]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b31e:	4313      	orrs	r3, r2
 800b320:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b322:	4b30      	ldr	r3, [pc, #192]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b326:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	492d      	ldr	r1, [pc, #180]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b330:	4313      	orrs	r3, r2
 800b332:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b334:	4b2b      	ldr	r3, [pc, #172]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	4928      	ldr	r1, [pc, #160]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b342:	4313      	orrs	r3, r2
 800b344:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b346:	4b27      	ldr	r3, [pc, #156]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34a:	4a26      	ldr	r2, [pc, #152]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b34c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b352:	4b24      	ldr	r3, [pc, #144]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b356:	4b24      	ldr	r3, [pc, #144]	; (800b3e8 <RCCEx_PLL3_Config+0x160>)
 800b358:	4013      	ands	r3, r2
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	69d2      	ldr	r2, [r2, #28]
 800b35e:	00d2      	lsls	r2, r2, #3
 800b360:	4920      	ldr	r1, [pc, #128]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b362:	4313      	orrs	r3, r2
 800b364:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b366:	4b1f      	ldr	r3, [pc, #124]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36a:	4a1e      	ldr	r2, [pc, #120]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b36c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d106      	bne.n	800b386 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b378:	4b1a      	ldr	r3, [pc, #104]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	4a19      	ldr	r2, [pc, #100]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b37e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b382:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b384:	e00f      	b.n	800b3a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d106      	bne.n	800b39a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b38c:	4b15      	ldr	r3, [pc, #84]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b390:	4a14      	ldr	r2, [pc, #80]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b392:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b396:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b398:	e005      	b.n	800b3a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b39a:	4b12      	ldr	r3, [pc, #72]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39e:	4a11      	ldr	r2, [pc, #68]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b3a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a0e      	ldr	r2, [pc, #56]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3b2:	f7f9 fc35 	bl	8004c20 <HAL_GetTick>
 800b3b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3b8:	e008      	b.n	800b3cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b3ba:	f7f9 fc31 	bl	8004c20 <HAL_GetTick>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d901      	bls.n	800b3cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e006      	b.n	800b3da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3cc:	4b05      	ldr	r3, [pc, #20]	; (800b3e4 <RCCEx_PLL3_Config+0x15c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d0f0      	beq.n	800b3ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	58024400 	.word	0x58024400
 800b3e8:	ffff0007 	.word	0xffff0007

0800b3ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e049      	b.n	800b492 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b00      	cmp	r3, #0
 800b408:	d106      	bne.n	800b418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7f7 fabe 	bl	8002994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3304      	adds	r3, #4
 800b428:	4619      	mov	r1, r3
 800b42a:	4610      	mov	r0, r2
 800b42c:	f001 f804 	bl	800c438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
	...

0800b49c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d001      	beq.n	800b4b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e054      	b.n	800b55e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f042 0201 	orr.w	r2, r2, #1
 800b4ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a26      	ldr	r2, [pc, #152]	; (800b56c <HAL_TIM_Base_Start_IT+0xd0>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d022      	beq.n	800b51c <HAL_TIM_Base_Start_IT+0x80>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4de:	d01d      	beq.n	800b51c <HAL_TIM_Base_Start_IT+0x80>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a22      	ldr	r2, [pc, #136]	; (800b570 <HAL_TIM_Base_Start_IT+0xd4>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d018      	beq.n	800b51c <HAL_TIM_Base_Start_IT+0x80>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a21      	ldr	r2, [pc, #132]	; (800b574 <HAL_TIM_Base_Start_IT+0xd8>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d013      	beq.n	800b51c <HAL_TIM_Base_Start_IT+0x80>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a1f      	ldr	r2, [pc, #124]	; (800b578 <HAL_TIM_Base_Start_IT+0xdc>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d00e      	beq.n	800b51c <HAL_TIM_Base_Start_IT+0x80>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a1e      	ldr	r2, [pc, #120]	; (800b57c <HAL_TIM_Base_Start_IT+0xe0>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d009      	beq.n	800b51c <HAL_TIM_Base_Start_IT+0x80>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a1c      	ldr	r2, [pc, #112]	; (800b580 <HAL_TIM_Base_Start_IT+0xe4>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d004      	beq.n	800b51c <HAL_TIM_Base_Start_IT+0x80>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a1b      	ldr	r2, [pc, #108]	; (800b584 <HAL_TIM_Base_Start_IT+0xe8>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d115      	bne.n	800b548 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	689a      	ldr	r2, [r3, #8]
 800b522:	4b19      	ldr	r3, [pc, #100]	; (800b588 <HAL_TIM_Base_Start_IT+0xec>)
 800b524:	4013      	ands	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2b06      	cmp	r3, #6
 800b52c:	d015      	beq.n	800b55a <HAL_TIM_Base_Start_IT+0xbe>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b534:	d011      	beq.n	800b55a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f042 0201 	orr.w	r2, r2, #1
 800b544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b546:	e008      	b.n	800b55a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f042 0201 	orr.w	r2, r2, #1
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	e000      	b.n	800b55c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b55a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	40010000 	.word	0x40010000
 800b570:	40000400 	.word	0x40000400
 800b574:	40000800 	.word	0x40000800
 800b578:	40000c00 	.word	0x40000c00
 800b57c:	40010400 	.word	0x40010400
 800b580:	40001800 	.word	0x40001800
 800b584:	40014000 	.word	0x40014000
 800b588:	00010007 	.word	0x00010007

0800b58c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e049      	b.n	800b632 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f841 	bl	800b63a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	f000 ff34 	bl	800c438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b63a:	b480      	push	{r7}
 800b63c:	b083      	sub	sp, #12
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b642:	bf00      	nop
 800b644:	370c      	adds	r7, #12
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
	...

0800b650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d109      	bne.n	800b674 <HAL_TIM_PWM_Start+0x24>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b01      	cmp	r3, #1
 800b66a:	bf14      	ite	ne
 800b66c:	2301      	movne	r3, #1
 800b66e:	2300      	moveq	r3, #0
 800b670:	b2db      	uxtb	r3, r3
 800b672:	e03c      	b.n	800b6ee <HAL_TIM_PWM_Start+0x9e>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b04      	cmp	r3, #4
 800b678:	d109      	bne.n	800b68e <HAL_TIM_PWM_Start+0x3e>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b01      	cmp	r3, #1
 800b684:	bf14      	ite	ne
 800b686:	2301      	movne	r3, #1
 800b688:	2300      	moveq	r3, #0
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	e02f      	b.n	800b6ee <HAL_TIM_PWM_Start+0x9e>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b08      	cmp	r3, #8
 800b692:	d109      	bne.n	800b6a8 <HAL_TIM_PWM_Start+0x58>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	bf14      	ite	ne
 800b6a0:	2301      	movne	r3, #1
 800b6a2:	2300      	moveq	r3, #0
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	e022      	b.n	800b6ee <HAL_TIM_PWM_Start+0x9e>
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2b0c      	cmp	r3, #12
 800b6ac:	d109      	bne.n	800b6c2 <HAL_TIM_PWM_Start+0x72>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	bf14      	ite	ne
 800b6ba:	2301      	movne	r3, #1
 800b6bc:	2300      	moveq	r3, #0
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	e015      	b.n	800b6ee <HAL_TIM_PWM_Start+0x9e>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b10      	cmp	r3, #16
 800b6c6:	d109      	bne.n	800b6dc <HAL_TIM_PWM_Start+0x8c>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	bf14      	ite	ne
 800b6d4:	2301      	movne	r3, #1
 800b6d6:	2300      	moveq	r3, #0
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	e008      	b.n	800b6ee <HAL_TIM_PWM_Start+0x9e>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	bf14      	ite	ne
 800b6e8:	2301      	movne	r3, #1
 800b6ea:	2300      	moveq	r3, #0
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e0a1      	b.n	800b83a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d104      	bne.n	800b706 <HAL_TIM_PWM_Start+0xb6>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2202      	movs	r2, #2
 800b700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b704:	e023      	b.n	800b74e <HAL_TIM_PWM_Start+0xfe>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b04      	cmp	r3, #4
 800b70a:	d104      	bne.n	800b716 <HAL_TIM_PWM_Start+0xc6>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b714:	e01b      	b.n	800b74e <HAL_TIM_PWM_Start+0xfe>
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b08      	cmp	r3, #8
 800b71a:	d104      	bne.n	800b726 <HAL_TIM_PWM_Start+0xd6>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2202      	movs	r2, #2
 800b720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b724:	e013      	b.n	800b74e <HAL_TIM_PWM_Start+0xfe>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	2b0c      	cmp	r3, #12
 800b72a:	d104      	bne.n	800b736 <HAL_TIM_PWM_Start+0xe6>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2202      	movs	r2, #2
 800b730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b734:	e00b      	b.n	800b74e <HAL_TIM_PWM_Start+0xfe>
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	2b10      	cmp	r3, #16
 800b73a:	d104      	bne.n	800b746 <HAL_TIM_PWM_Start+0xf6>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2202      	movs	r2, #2
 800b740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b744:	e003      	b.n	800b74e <HAL_TIM_PWM_Start+0xfe>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2202      	movs	r2, #2
 800b74a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2201      	movs	r2, #1
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	4618      	mov	r0, r3
 800b758:	f001 fba6 	bl	800cea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a38      	ldr	r2, [pc, #224]	; (800b844 <HAL_TIM_PWM_Start+0x1f4>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d013      	beq.n	800b78e <HAL_TIM_PWM_Start+0x13e>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a37      	ldr	r2, [pc, #220]	; (800b848 <HAL_TIM_PWM_Start+0x1f8>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d00e      	beq.n	800b78e <HAL_TIM_PWM_Start+0x13e>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a35      	ldr	r2, [pc, #212]	; (800b84c <HAL_TIM_PWM_Start+0x1fc>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d009      	beq.n	800b78e <HAL_TIM_PWM_Start+0x13e>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a34      	ldr	r2, [pc, #208]	; (800b850 <HAL_TIM_PWM_Start+0x200>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d004      	beq.n	800b78e <HAL_TIM_PWM_Start+0x13e>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a32      	ldr	r2, [pc, #200]	; (800b854 <HAL_TIM_PWM_Start+0x204>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d101      	bne.n	800b792 <HAL_TIM_PWM_Start+0x142>
 800b78e:	2301      	movs	r3, #1
 800b790:	e000      	b.n	800b794 <HAL_TIM_PWM_Start+0x144>
 800b792:	2300      	movs	r3, #0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d007      	beq.n	800b7a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b7a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a25      	ldr	r2, [pc, #148]	; (800b844 <HAL_TIM_PWM_Start+0x1f4>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d022      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0x1a8>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ba:	d01d      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0x1a8>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a25      	ldr	r2, [pc, #148]	; (800b858 <HAL_TIM_PWM_Start+0x208>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d018      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0x1a8>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a24      	ldr	r2, [pc, #144]	; (800b85c <HAL_TIM_PWM_Start+0x20c>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d013      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0x1a8>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a22      	ldr	r2, [pc, #136]	; (800b860 <HAL_TIM_PWM_Start+0x210>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d00e      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0x1a8>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a1a      	ldr	r2, [pc, #104]	; (800b848 <HAL_TIM_PWM_Start+0x1f8>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d009      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0x1a8>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a1e      	ldr	r2, [pc, #120]	; (800b864 <HAL_TIM_PWM_Start+0x214>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d004      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0x1a8>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a16      	ldr	r2, [pc, #88]	; (800b84c <HAL_TIM_PWM_Start+0x1fc>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d115      	bne.n	800b824 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689a      	ldr	r2, [r3, #8]
 800b7fe:	4b1a      	ldr	r3, [pc, #104]	; (800b868 <HAL_TIM_PWM_Start+0x218>)
 800b800:	4013      	ands	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b06      	cmp	r3, #6
 800b808:	d015      	beq.n	800b836 <HAL_TIM_PWM_Start+0x1e6>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b810:	d011      	beq.n	800b836 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f042 0201 	orr.w	r2, r2, #1
 800b820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b822:	e008      	b.n	800b836 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f042 0201 	orr.w	r2, r2, #1
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	e000      	b.n	800b838 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b836:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	40010000 	.word	0x40010000
 800b848:	40010400 	.word	0x40010400
 800b84c:	40014000 	.word	0x40014000
 800b850:	40014400 	.word	0x40014400
 800b854:	40014800 	.word	0x40014800
 800b858:	40000400 	.word	0x40000400
 800b85c:	40000800 	.word	0x40000800
 800b860:	40000c00 	.word	0x40000c00
 800b864:	40001800 	.word	0x40001800
 800b868:	00010007 	.word	0x00010007

0800b86c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d101      	bne.n	800b87e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e049      	b.n	800b912 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f841 	bl	800b91a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2202      	movs	r2, #2
 800b89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	f000 fdc4 	bl	800c438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b083      	sub	sp, #12
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b922:	bf00      	nop
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
	...

0800b930 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b93a:	2300      	movs	r3, #0
 800b93c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d104      	bne.n	800b94e <HAL_TIM_IC_Start_IT+0x1e>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	e023      	b.n	800b996 <HAL_TIM_IC_Start_IT+0x66>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b04      	cmp	r3, #4
 800b952:	d104      	bne.n	800b95e <HAL_TIM_IC_Start_IT+0x2e>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	e01b      	b.n	800b996 <HAL_TIM_IC_Start_IT+0x66>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b08      	cmp	r3, #8
 800b962:	d104      	bne.n	800b96e <HAL_TIM_IC_Start_IT+0x3e>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	e013      	b.n	800b996 <HAL_TIM_IC_Start_IT+0x66>
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2b0c      	cmp	r3, #12
 800b972:	d104      	bne.n	800b97e <HAL_TIM_IC_Start_IT+0x4e>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	e00b      	b.n	800b996 <HAL_TIM_IC_Start_IT+0x66>
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	2b10      	cmp	r3, #16
 800b982:	d104      	bne.n	800b98e <HAL_TIM_IC_Start_IT+0x5e>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	e003      	b.n	800b996 <HAL_TIM_IC_Start_IT+0x66>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b994:	b2db      	uxtb	r3, r3
 800b996:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d104      	bne.n	800b9a8 <HAL_TIM_IC_Start_IT+0x78>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	e013      	b.n	800b9d0 <HAL_TIM_IC_Start_IT+0xa0>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	d104      	bne.n	800b9b8 <HAL_TIM_IC_Start_IT+0x88>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	e00b      	b.n	800b9d0 <HAL_TIM_IC_Start_IT+0xa0>
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	2b08      	cmp	r3, #8
 800b9bc:	d104      	bne.n	800b9c8 <HAL_TIM_IC_Start_IT+0x98>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	e003      	b.n	800b9d0 <HAL_TIM_IC_Start_IT+0xa0>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d102      	bne.n	800b9de <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9d8:	7b7b      	ldrb	r3, [r7, #13]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d001      	beq.n	800b9e2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e0e2      	b.n	800bba8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d104      	bne.n	800b9f2 <HAL_TIM_IC_Start_IT+0xc2>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9f0:	e023      	b.n	800ba3a <HAL_TIM_IC_Start_IT+0x10a>
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2b04      	cmp	r3, #4
 800b9f6:	d104      	bne.n	800ba02 <HAL_TIM_IC_Start_IT+0xd2>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba00:	e01b      	b.n	800ba3a <HAL_TIM_IC_Start_IT+0x10a>
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b08      	cmp	r3, #8
 800ba06:	d104      	bne.n	800ba12 <HAL_TIM_IC_Start_IT+0xe2>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba10:	e013      	b.n	800ba3a <HAL_TIM_IC_Start_IT+0x10a>
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b0c      	cmp	r3, #12
 800ba16:	d104      	bne.n	800ba22 <HAL_TIM_IC_Start_IT+0xf2>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba20:	e00b      	b.n	800ba3a <HAL_TIM_IC_Start_IT+0x10a>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b10      	cmp	r3, #16
 800ba26:	d104      	bne.n	800ba32 <HAL_TIM_IC_Start_IT+0x102>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba30:	e003      	b.n	800ba3a <HAL_TIM_IC_Start_IT+0x10a>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2202      	movs	r2, #2
 800ba36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d104      	bne.n	800ba4a <HAL_TIM_IC_Start_IT+0x11a>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2202      	movs	r2, #2
 800ba44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba48:	e013      	b.n	800ba72 <HAL_TIM_IC_Start_IT+0x142>
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b04      	cmp	r3, #4
 800ba4e:	d104      	bne.n	800ba5a <HAL_TIM_IC_Start_IT+0x12a>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2202      	movs	r2, #2
 800ba54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba58:	e00b      	b.n	800ba72 <HAL_TIM_IC_Start_IT+0x142>
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	2b08      	cmp	r3, #8
 800ba5e:	d104      	bne.n	800ba6a <HAL_TIM_IC_Start_IT+0x13a>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2202      	movs	r2, #2
 800ba64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba68:	e003      	b.n	800ba72 <HAL_TIM_IC_Start_IT+0x142>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2202      	movs	r2, #2
 800ba6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b0c      	cmp	r3, #12
 800ba76:	d841      	bhi.n	800bafc <HAL_TIM_IC_Start_IT+0x1cc>
 800ba78:	a201      	add	r2, pc, #4	; (adr r2, 800ba80 <HAL_TIM_IC_Start_IT+0x150>)
 800ba7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7e:	bf00      	nop
 800ba80:	0800bab5 	.word	0x0800bab5
 800ba84:	0800bafd 	.word	0x0800bafd
 800ba88:	0800bafd 	.word	0x0800bafd
 800ba8c:	0800bafd 	.word	0x0800bafd
 800ba90:	0800bac7 	.word	0x0800bac7
 800ba94:	0800bafd 	.word	0x0800bafd
 800ba98:	0800bafd 	.word	0x0800bafd
 800ba9c:	0800bafd 	.word	0x0800bafd
 800baa0:	0800bad9 	.word	0x0800bad9
 800baa4:	0800bafd 	.word	0x0800bafd
 800baa8:	0800bafd 	.word	0x0800bafd
 800baac:	0800bafd 	.word	0x0800bafd
 800bab0:	0800baeb 	.word	0x0800baeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68da      	ldr	r2, [r3, #12]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f042 0202 	orr.w	r2, r2, #2
 800bac2:	60da      	str	r2, [r3, #12]
      break;
 800bac4:	e01d      	b.n	800bb02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68da      	ldr	r2, [r3, #12]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f042 0204 	orr.w	r2, r2, #4
 800bad4:	60da      	str	r2, [r3, #12]
      break;
 800bad6:	e014      	b.n	800bb02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68da      	ldr	r2, [r3, #12]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f042 0208 	orr.w	r2, r2, #8
 800bae6:	60da      	str	r2, [r3, #12]
      break;
 800bae8:	e00b      	b.n	800bb02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68da      	ldr	r2, [r3, #12]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f042 0210 	orr.w	r2, r2, #16
 800baf8:	60da      	str	r2, [r3, #12]
      break;
 800bafa:	e002      	b.n	800bb02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	73fb      	strb	r3, [r7, #15]
      break;
 800bb00:	bf00      	nop
  }

  if (status == HAL_OK)
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d14e      	bne.n	800bba6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	6839      	ldr	r1, [r7, #0]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f001 f9c9 	bl	800cea8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a25      	ldr	r2, [pc, #148]	; (800bbb0 <HAL_TIM_IC_Start_IT+0x280>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d022      	beq.n	800bb66 <HAL_TIM_IC_Start_IT+0x236>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb28:	d01d      	beq.n	800bb66 <HAL_TIM_IC_Start_IT+0x236>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a21      	ldr	r2, [pc, #132]	; (800bbb4 <HAL_TIM_IC_Start_IT+0x284>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d018      	beq.n	800bb66 <HAL_TIM_IC_Start_IT+0x236>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a1f      	ldr	r2, [pc, #124]	; (800bbb8 <HAL_TIM_IC_Start_IT+0x288>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d013      	beq.n	800bb66 <HAL_TIM_IC_Start_IT+0x236>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a1e      	ldr	r2, [pc, #120]	; (800bbbc <HAL_TIM_IC_Start_IT+0x28c>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d00e      	beq.n	800bb66 <HAL_TIM_IC_Start_IT+0x236>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a1c      	ldr	r2, [pc, #112]	; (800bbc0 <HAL_TIM_IC_Start_IT+0x290>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d009      	beq.n	800bb66 <HAL_TIM_IC_Start_IT+0x236>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a1b      	ldr	r2, [pc, #108]	; (800bbc4 <HAL_TIM_IC_Start_IT+0x294>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d004      	beq.n	800bb66 <HAL_TIM_IC_Start_IT+0x236>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a19      	ldr	r2, [pc, #100]	; (800bbc8 <HAL_TIM_IC_Start_IT+0x298>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d115      	bne.n	800bb92 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689a      	ldr	r2, [r3, #8]
 800bb6c:	4b17      	ldr	r3, [pc, #92]	; (800bbcc <HAL_TIM_IC_Start_IT+0x29c>)
 800bb6e:	4013      	ands	r3, r2
 800bb70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b06      	cmp	r3, #6
 800bb76:	d015      	beq.n	800bba4 <HAL_TIM_IC_Start_IT+0x274>
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb7e:	d011      	beq.n	800bba4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f042 0201 	orr.w	r2, r2, #1
 800bb8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb90:	e008      	b.n	800bba4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f042 0201 	orr.w	r2, r2, #1
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	e000      	b.n	800bba6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bba4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	40010000 	.word	0x40010000
 800bbb4:	40000400 	.word	0x40000400
 800bbb8:	40000800 	.word	0x40000800
 800bbbc:	40000c00 	.word	0x40000c00
 800bbc0:	40010400 	.word	0x40010400
 800bbc4:	40001800 	.word	0x40001800
 800bbc8:	40014000 	.word	0x40014000
 800bbcc:	00010007 	.word	0x00010007

0800bbd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	f003 0302 	and.w	r3, r3, #2
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d122      	bne.n	800bc2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	f003 0302 	and.w	r3, r3, #2
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d11b      	bne.n	800bc2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f06f 0202 	mvn.w	r2, #2
 800bbfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	f003 0303 	and.w	r3, r3, #3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7f7 fb54 	bl	80032c0 <HAL_TIM_IC_CaptureCallback>
 800bc18:	e005      	b.n	800bc26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 fbee 	bl	800c3fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fbf5 	bl	800c410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	2b04      	cmp	r3, #4
 800bc38:	d122      	bne.n	800bc80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	d11b      	bne.n	800bc80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f06f 0204 	mvn.w	r2, #4
 800bc50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2202      	movs	r2, #2
 800bc56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7f7 fb2a 	bl	80032c0 <HAL_TIM_IC_CaptureCallback>
 800bc6c:	e005      	b.n	800bc7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fbc4 	bl	800c3fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fbcb 	bl	800c410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	2b08      	cmp	r3, #8
 800bc8c:	d122      	bne.n	800bcd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	f003 0308 	and.w	r3, r3, #8
 800bc98:	2b08      	cmp	r3, #8
 800bc9a:	d11b      	bne.n	800bcd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f06f 0208 	mvn.w	r2, #8
 800bca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2204      	movs	r2, #4
 800bcaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	f003 0303 	and.w	r3, r3, #3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7f7 fb00 	bl	80032c0 <HAL_TIM_IC_CaptureCallback>
 800bcc0:	e005      	b.n	800bcce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fb9a 	bl	800c3fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fba1 	bl	800c410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	f003 0310 	and.w	r3, r3, #16
 800bcde:	2b10      	cmp	r3, #16
 800bce0:	d122      	bne.n	800bd28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f003 0310 	and.w	r3, r3, #16
 800bcec:	2b10      	cmp	r3, #16
 800bcee:	d11b      	bne.n	800bd28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f06f 0210 	mvn.w	r2, #16
 800bcf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2208      	movs	r2, #8
 800bcfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	69db      	ldr	r3, [r3, #28]
 800bd06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7f7 fad6 	bl	80032c0 <HAL_TIM_IC_CaptureCallback>
 800bd14:	e005      	b.n	800bd22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fb70 	bl	800c3fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fb77 	bl	800c410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d10e      	bne.n	800bd54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d107      	bne.n	800bd54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f06f 0201 	mvn.w	r2, #1
 800bd4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fb4a 	bl	800c3e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd5e:	2b80      	cmp	r3, #128	; 0x80
 800bd60:	d10e      	bne.n	800bd80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd6c:	2b80      	cmp	r3, #128	; 0x80
 800bd6e:	d107      	bne.n	800bd80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f001 f952 	bl	800d024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd8e:	d10e      	bne.n	800bdae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd9a:	2b80      	cmp	r3, #128	; 0x80
 800bd9c:	d107      	bne.n	800bdae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bda6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f001 f945 	bl	800d038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb8:	2b40      	cmp	r3, #64	; 0x40
 800bdba:	d10e      	bne.n	800bdda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc6:	2b40      	cmp	r3, #64	; 0x40
 800bdc8:	d107      	bne.n	800bdda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bdd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fb25 	bl	800c424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	f003 0320 	and.w	r3, r3, #32
 800bde4:	2b20      	cmp	r3, #32
 800bde6:	d10e      	bne.n	800be06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	f003 0320 	and.w	r3, r3, #32
 800bdf2:	2b20      	cmp	r3, #32
 800bdf4:	d107      	bne.n	800be06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f06f 0220 	mvn.w	r2, #32
 800bdfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f001 f905 	bl	800d010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b086      	sub	sp, #24
 800be12:	af00      	add	r7, sp, #0
 800be14:	60f8      	str	r0, [r7, #12]
 800be16:	60b9      	str	r1, [r7, #8]
 800be18:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be24:	2b01      	cmp	r3, #1
 800be26:	d101      	bne.n	800be2c <HAL_TIM_IC_ConfigChannel+0x1e>
 800be28:	2302      	movs	r3, #2
 800be2a:	e088      	b.n	800bf3e <HAL_TIM_IC_ConfigChannel+0x130>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d11b      	bne.n	800be72 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6818      	ldr	r0, [r3, #0]
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	6819      	ldr	r1, [r3, #0]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	f000 fe65 	bl	800cb18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	699a      	ldr	r2, [r3, #24]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f022 020c 	bic.w	r2, r2, #12
 800be5c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6999      	ldr	r1, [r3, #24]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	689a      	ldr	r2, [r3, #8]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	619a      	str	r2, [r3, #24]
 800be70:	e060      	b.n	800bf34 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b04      	cmp	r3, #4
 800be76:	d11c      	bne.n	800beb2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6818      	ldr	r0, [r3, #0]
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	6819      	ldr	r1, [r3, #0]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	f000 fee9 	bl	800cc5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	699a      	ldr	r2, [r3, #24]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800be9a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6999      	ldr	r1, [r3, #24]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	021a      	lsls	r2, r3, #8
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	430a      	orrs	r2, r1
 800beae:	619a      	str	r2, [r3, #24]
 800beb0:	e040      	b.n	800bf34 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b08      	cmp	r3, #8
 800beb6:	d11b      	bne.n	800bef0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6818      	ldr	r0, [r3, #0]
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	6819      	ldr	r1, [r3, #0]
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	f000 ff36 	bl	800cd38 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	69da      	ldr	r2, [r3, #28]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f022 020c 	bic.w	r2, r2, #12
 800beda:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	69d9      	ldr	r1, [r3, #28]
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	430a      	orrs	r2, r1
 800beec:	61da      	str	r2, [r3, #28]
 800beee:	e021      	b.n	800bf34 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b0c      	cmp	r3, #12
 800bef4:	d11c      	bne.n	800bf30 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6818      	ldr	r0, [r3, #0]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	6819      	ldr	r1, [r3, #0]
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	685a      	ldr	r2, [r3, #4]
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	f000 ff53 	bl	800cdb0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	69da      	ldr	r2, [r3, #28]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bf18:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	69d9      	ldr	r1, [r3, #28]
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	021a      	lsls	r2, r3, #8
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	61da      	str	r2, [r3, #28]
 800bf2e:	e001      	b.n	800bf34 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3718      	adds	r7, #24
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
	...

0800bf48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d101      	bne.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf62:	2302      	movs	r3, #2
 800bf64:	e0ff      	b.n	800c166 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b14      	cmp	r3, #20
 800bf72:	f200 80f0 	bhi.w	800c156 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bf76:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7c:	0800bfd1 	.word	0x0800bfd1
 800bf80:	0800c157 	.word	0x0800c157
 800bf84:	0800c157 	.word	0x0800c157
 800bf88:	0800c157 	.word	0x0800c157
 800bf8c:	0800c011 	.word	0x0800c011
 800bf90:	0800c157 	.word	0x0800c157
 800bf94:	0800c157 	.word	0x0800c157
 800bf98:	0800c157 	.word	0x0800c157
 800bf9c:	0800c053 	.word	0x0800c053
 800bfa0:	0800c157 	.word	0x0800c157
 800bfa4:	0800c157 	.word	0x0800c157
 800bfa8:	0800c157 	.word	0x0800c157
 800bfac:	0800c093 	.word	0x0800c093
 800bfb0:	0800c157 	.word	0x0800c157
 800bfb4:	0800c157 	.word	0x0800c157
 800bfb8:	0800c157 	.word	0x0800c157
 800bfbc:	0800c0d5 	.word	0x0800c0d5
 800bfc0:	0800c157 	.word	0x0800c157
 800bfc4:	0800c157 	.word	0x0800c157
 800bfc8:	0800c157 	.word	0x0800c157
 800bfcc:	0800c115 	.word	0x0800c115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68b9      	ldr	r1, [r7, #8]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 fac8 	bl	800c56c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	699a      	ldr	r2, [r3, #24]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f042 0208 	orr.w	r2, r2, #8
 800bfea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	699a      	ldr	r2, [r3, #24]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f022 0204 	bic.w	r2, r2, #4
 800bffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6999      	ldr	r1, [r3, #24]
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	691a      	ldr	r2, [r3, #16]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	619a      	str	r2, [r3, #24]
      break;
 800c00e:	e0a5      	b.n	800c15c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68b9      	ldr	r1, [r7, #8]
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fb38 	bl	800c68c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c02a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	699a      	ldr	r2, [r3, #24]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c03a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6999      	ldr	r1, [r3, #24]
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	021a      	lsls	r2, r3, #8
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	430a      	orrs	r2, r1
 800c04e:	619a      	str	r2, [r3, #24]
      break;
 800c050:	e084      	b.n	800c15c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68b9      	ldr	r1, [r7, #8]
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 fba1 	bl	800c7a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69da      	ldr	r2, [r3, #28]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f042 0208 	orr.w	r2, r2, #8
 800c06c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	69da      	ldr	r2, [r3, #28]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f022 0204 	bic.w	r2, r2, #4
 800c07c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	69d9      	ldr	r1, [r3, #28]
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	691a      	ldr	r2, [r3, #16]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	430a      	orrs	r2, r1
 800c08e:	61da      	str	r2, [r3, #28]
      break;
 800c090:	e064      	b.n	800c15c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68b9      	ldr	r1, [r7, #8]
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 fc09 	bl	800c8b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	69da      	ldr	r2, [r3, #28]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	69da      	ldr	r2, [r3, #28]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69d9      	ldr	r1, [r3, #28]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	021a      	lsls	r2, r3, #8
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	61da      	str	r2, [r3, #28]
      break;
 800c0d2:	e043      	b.n	800c15c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68b9      	ldr	r1, [r7, #8]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 fc52 	bl	800c984 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f042 0208 	orr.w	r2, r2, #8
 800c0ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f022 0204 	bic.w	r2, r2, #4
 800c0fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	691a      	ldr	r2, [r3, #16]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	430a      	orrs	r2, r1
 800c110:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c112:	e023      	b.n	800c15c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 fc96 	bl	800ca4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c13e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	021a      	lsls	r2, r3, #8
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	430a      	orrs	r2, r1
 800c152:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c154:	e002      	b.n	800c15c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	75fb      	strb	r3, [r7, #23]
      break;
 800c15a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c164:	7dfb      	ldrb	r3, [r7, #23]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop

0800c170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c184:	2b01      	cmp	r3, #1
 800c186:	d101      	bne.n	800c18c <HAL_TIM_ConfigClockSource+0x1c>
 800c188:	2302      	movs	r3, #2
 800c18a:	e0dc      	b.n	800c346 <HAL_TIM_ConfigClockSource+0x1d6>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2202      	movs	r2, #2
 800c198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	4b6a      	ldr	r3, [pc, #424]	; (800c350 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a64      	ldr	r2, [pc, #400]	; (800c354 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	f000 80a9 	beq.w	800c31a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1c8:	4a62      	ldr	r2, [pc, #392]	; (800c354 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	f200 80ae 	bhi.w	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1d0:	4a61      	ldr	r2, [pc, #388]	; (800c358 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	f000 80a1 	beq.w	800c31a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1d8:	4a5f      	ldr	r2, [pc, #380]	; (800c358 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	f200 80a6 	bhi.w	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1e0:	4a5e      	ldr	r2, [pc, #376]	; (800c35c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	f000 8099 	beq.w	800c31a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1e8:	4a5c      	ldr	r2, [pc, #368]	; (800c35c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	f200 809e 	bhi.w	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c1f4:	f000 8091 	beq.w	800c31a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c1fc:	f200 8096 	bhi.w	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c204:	f000 8089 	beq.w	800c31a <HAL_TIM_ConfigClockSource+0x1aa>
 800c208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c20c:	f200 808e 	bhi.w	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c214:	d03e      	beq.n	800c294 <HAL_TIM_ConfigClockSource+0x124>
 800c216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c21a:	f200 8087 	bhi.w	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c21e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c222:	f000 8086 	beq.w	800c332 <HAL_TIM_ConfigClockSource+0x1c2>
 800c226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c22a:	d87f      	bhi.n	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c22c:	2b70      	cmp	r3, #112	; 0x70
 800c22e:	d01a      	beq.n	800c266 <HAL_TIM_ConfigClockSource+0xf6>
 800c230:	2b70      	cmp	r3, #112	; 0x70
 800c232:	d87b      	bhi.n	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c234:	2b60      	cmp	r3, #96	; 0x60
 800c236:	d050      	beq.n	800c2da <HAL_TIM_ConfigClockSource+0x16a>
 800c238:	2b60      	cmp	r3, #96	; 0x60
 800c23a:	d877      	bhi.n	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c23c:	2b50      	cmp	r3, #80	; 0x50
 800c23e:	d03c      	beq.n	800c2ba <HAL_TIM_ConfigClockSource+0x14a>
 800c240:	2b50      	cmp	r3, #80	; 0x50
 800c242:	d873      	bhi.n	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c244:	2b40      	cmp	r3, #64	; 0x40
 800c246:	d058      	beq.n	800c2fa <HAL_TIM_ConfigClockSource+0x18a>
 800c248:	2b40      	cmp	r3, #64	; 0x40
 800c24a:	d86f      	bhi.n	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c24c:	2b30      	cmp	r3, #48	; 0x30
 800c24e:	d064      	beq.n	800c31a <HAL_TIM_ConfigClockSource+0x1aa>
 800c250:	2b30      	cmp	r3, #48	; 0x30
 800c252:	d86b      	bhi.n	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c254:	2b20      	cmp	r3, #32
 800c256:	d060      	beq.n	800c31a <HAL_TIM_ConfigClockSource+0x1aa>
 800c258:	2b20      	cmp	r3, #32
 800c25a:	d867      	bhi.n	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d05c      	beq.n	800c31a <HAL_TIM_ConfigClockSource+0x1aa>
 800c260:	2b10      	cmp	r3, #16
 800c262:	d05a      	beq.n	800c31a <HAL_TIM_ConfigClockSource+0x1aa>
 800c264:	e062      	b.n	800c32c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	6899      	ldr	r1, [r3, #8]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	685a      	ldr	r2, [r3, #4]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	f000 fdf7 	bl	800ce68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	609a      	str	r2, [r3, #8]
      break;
 800c292:	e04f      	b.n	800c334 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6818      	ldr	r0, [r3, #0]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	6899      	ldr	r1, [r3, #8]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	685a      	ldr	r2, [r3, #4]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	f000 fde0 	bl	800ce68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	689a      	ldr	r2, [r3, #8]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2b6:	609a      	str	r2, [r3, #8]
      break;
 800c2b8:	e03c      	b.n	800c334 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6818      	ldr	r0, [r3, #0]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	6859      	ldr	r1, [r3, #4]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	f000 fc9a 	bl	800cc00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2150      	movs	r1, #80	; 0x50
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 fdaa 	bl	800ce2c <TIM_ITRx_SetConfig>
      break;
 800c2d8:	e02c      	b.n	800c334 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	6859      	ldr	r1, [r3, #4]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f000 fcf6 	bl	800ccd8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2160      	movs	r1, #96	; 0x60
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 fd9a 	bl	800ce2c <TIM_ITRx_SetConfig>
      break;
 800c2f8:	e01c      	b.n	800c334 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6818      	ldr	r0, [r3, #0]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	6859      	ldr	r1, [r3, #4]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	461a      	mov	r2, r3
 800c308:	f000 fc7a 	bl	800cc00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2140      	movs	r1, #64	; 0x40
 800c312:	4618      	mov	r0, r3
 800c314:	f000 fd8a 	bl	800ce2c <TIM_ITRx_SetConfig>
      break;
 800c318:	e00c      	b.n	800c334 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4619      	mov	r1, r3
 800c324:	4610      	mov	r0, r2
 800c326:	f000 fd81 	bl	800ce2c <TIM_ITRx_SetConfig>
      break;
 800c32a:	e003      	b.n	800c334 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	73fb      	strb	r3, [r7, #15]
      break;
 800c330:	e000      	b.n	800c334 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c344:	7bfb      	ldrb	r3, [r7, #15]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	ffceff88 	.word	0xffceff88
 800c354:	00100040 	.word	0x00100040
 800c358:	00100030 	.word	0x00100030
 800c35c:	00100020 	.word	0x00100020

0800c360 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2b0c      	cmp	r3, #12
 800c372:	d831      	bhi.n	800c3d8 <HAL_TIM_ReadCapturedValue+0x78>
 800c374:	a201      	add	r2, pc, #4	; (adr r2, 800c37c <HAL_TIM_ReadCapturedValue+0x1c>)
 800c376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37a:	bf00      	nop
 800c37c:	0800c3b1 	.word	0x0800c3b1
 800c380:	0800c3d9 	.word	0x0800c3d9
 800c384:	0800c3d9 	.word	0x0800c3d9
 800c388:	0800c3d9 	.word	0x0800c3d9
 800c38c:	0800c3bb 	.word	0x0800c3bb
 800c390:	0800c3d9 	.word	0x0800c3d9
 800c394:	0800c3d9 	.word	0x0800c3d9
 800c398:	0800c3d9 	.word	0x0800c3d9
 800c39c:	0800c3c5 	.word	0x0800c3c5
 800c3a0:	0800c3d9 	.word	0x0800c3d9
 800c3a4:	0800c3d9 	.word	0x0800c3d9
 800c3a8:	0800c3d9 	.word	0x0800c3d9
 800c3ac:	0800c3cf 	.word	0x0800c3cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b6:	60fb      	str	r3, [r7, #12]

      break;
 800c3b8:	e00f      	b.n	800c3da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c0:	60fb      	str	r3, [r7, #12]

      break;
 800c3c2:	e00a      	b.n	800c3da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ca:	60fb      	str	r3, [r7, #12]

      break;
 800c3cc:	e005      	b.n	800c3da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d4:	60fb      	str	r3, [r7, #12]

      break;
 800c3d6:	e000      	b.n	800c3da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c3d8:	bf00      	nop
  }

  return tmpreg;
 800c3da:	68fb      	ldr	r3, [r7, #12]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3714      	adds	r7, #20
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c42c:	bf00      	nop
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a40      	ldr	r2, [pc, #256]	; (800c54c <TIM_Base_SetConfig+0x114>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d013      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c456:	d00f      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a3d      	ldr	r2, [pc, #244]	; (800c550 <TIM_Base_SetConfig+0x118>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d00b      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a3c      	ldr	r2, [pc, #240]	; (800c554 <TIM_Base_SetConfig+0x11c>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d007      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a3b      	ldr	r2, [pc, #236]	; (800c558 <TIM_Base_SetConfig+0x120>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d003      	beq.n	800c478 <TIM_Base_SetConfig+0x40>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a3a      	ldr	r2, [pc, #232]	; (800c55c <TIM_Base_SetConfig+0x124>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d108      	bne.n	800c48a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c47e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	4313      	orrs	r3, r2
 800c488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a2f      	ldr	r2, [pc, #188]	; (800c54c <TIM_Base_SetConfig+0x114>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d01f      	beq.n	800c4d2 <TIM_Base_SetConfig+0x9a>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c498:	d01b      	beq.n	800c4d2 <TIM_Base_SetConfig+0x9a>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a2c      	ldr	r2, [pc, #176]	; (800c550 <TIM_Base_SetConfig+0x118>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d017      	beq.n	800c4d2 <TIM_Base_SetConfig+0x9a>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a2b      	ldr	r2, [pc, #172]	; (800c554 <TIM_Base_SetConfig+0x11c>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d013      	beq.n	800c4d2 <TIM_Base_SetConfig+0x9a>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a2a      	ldr	r2, [pc, #168]	; (800c558 <TIM_Base_SetConfig+0x120>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d00f      	beq.n	800c4d2 <TIM_Base_SetConfig+0x9a>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a29      	ldr	r2, [pc, #164]	; (800c55c <TIM_Base_SetConfig+0x124>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d00b      	beq.n	800c4d2 <TIM_Base_SetConfig+0x9a>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a28      	ldr	r2, [pc, #160]	; (800c560 <TIM_Base_SetConfig+0x128>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d007      	beq.n	800c4d2 <TIM_Base_SetConfig+0x9a>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a27      	ldr	r2, [pc, #156]	; (800c564 <TIM_Base_SetConfig+0x12c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d003      	beq.n	800c4d2 <TIM_Base_SetConfig+0x9a>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a26      	ldr	r2, [pc, #152]	; (800c568 <TIM_Base_SetConfig+0x130>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d108      	bne.n	800c4e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	695b      	ldr	r3, [r3, #20]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	689a      	ldr	r2, [r3, #8]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a10      	ldr	r2, [pc, #64]	; (800c54c <TIM_Base_SetConfig+0x114>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d00f      	beq.n	800c530 <TIM_Base_SetConfig+0xf8>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a12      	ldr	r2, [pc, #72]	; (800c55c <TIM_Base_SetConfig+0x124>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d00b      	beq.n	800c530 <TIM_Base_SetConfig+0xf8>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a11      	ldr	r2, [pc, #68]	; (800c560 <TIM_Base_SetConfig+0x128>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d007      	beq.n	800c530 <TIM_Base_SetConfig+0xf8>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a10      	ldr	r2, [pc, #64]	; (800c564 <TIM_Base_SetConfig+0x12c>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d003      	beq.n	800c530 <TIM_Base_SetConfig+0xf8>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a0f      	ldr	r2, [pc, #60]	; (800c568 <TIM_Base_SetConfig+0x130>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d103      	bne.n	800c538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	691a      	ldr	r2, [r3, #16]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	615a      	str	r2, [r3, #20]
}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	40010000 	.word	0x40010000
 800c550:	40000400 	.word	0x40000400
 800c554:	40000800 	.word	0x40000800
 800c558:	40000c00 	.word	0x40000c00
 800c55c:	40010400 	.word	0x40010400
 800c560:	40014000 	.word	0x40014000
 800c564:	40014400 	.word	0x40014400
 800c568:	40014800 	.word	0x40014800

0800c56c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b087      	sub	sp, #28
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6a1b      	ldr	r3, [r3, #32]
 800c57a:	f023 0201 	bic.w	r2, r3, #1
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	699b      	ldr	r3, [r3, #24]
 800c592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	4b37      	ldr	r3, [pc, #220]	; (800c674 <TIM_OC1_SetConfig+0x108>)
 800c598:	4013      	ands	r3, r2
 800c59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f023 0303 	bic.w	r3, r3, #3
 800c5a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	f023 0302 	bic.w	r3, r3, #2
 800c5b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a2d      	ldr	r2, [pc, #180]	; (800c678 <TIM_OC1_SetConfig+0x10c>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d00f      	beq.n	800c5e8 <TIM_OC1_SetConfig+0x7c>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a2c      	ldr	r2, [pc, #176]	; (800c67c <TIM_OC1_SetConfig+0x110>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d00b      	beq.n	800c5e8 <TIM_OC1_SetConfig+0x7c>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a2b      	ldr	r2, [pc, #172]	; (800c680 <TIM_OC1_SetConfig+0x114>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d007      	beq.n	800c5e8 <TIM_OC1_SetConfig+0x7c>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a2a      	ldr	r2, [pc, #168]	; (800c684 <TIM_OC1_SetConfig+0x118>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d003      	beq.n	800c5e8 <TIM_OC1_SetConfig+0x7c>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a29      	ldr	r2, [pc, #164]	; (800c688 <TIM_OC1_SetConfig+0x11c>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d10c      	bne.n	800c602 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f023 0308 	bic.w	r3, r3, #8
 800c5ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	f023 0304 	bic.w	r3, r3, #4
 800c600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4a1c      	ldr	r2, [pc, #112]	; (800c678 <TIM_OC1_SetConfig+0x10c>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d00f      	beq.n	800c62a <TIM_OC1_SetConfig+0xbe>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a1b      	ldr	r2, [pc, #108]	; (800c67c <TIM_OC1_SetConfig+0x110>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d00b      	beq.n	800c62a <TIM_OC1_SetConfig+0xbe>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a1a      	ldr	r2, [pc, #104]	; (800c680 <TIM_OC1_SetConfig+0x114>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d007      	beq.n	800c62a <TIM_OC1_SetConfig+0xbe>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4a19      	ldr	r2, [pc, #100]	; (800c684 <TIM_OC1_SetConfig+0x118>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d003      	beq.n	800c62a <TIM_OC1_SetConfig+0xbe>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a18      	ldr	r2, [pc, #96]	; (800c688 <TIM_OC1_SetConfig+0x11c>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d111      	bne.n	800c64e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	4313      	orrs	r3, r2
 800c642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	621a      	str	r2, [r3, #32]
}
 800c668:	bf00      	nop
 800c66a:	371c      	adds	r7, #28
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr
 800c674:	fffeff8f 	.word	0xfffeff8f
 800c678:	40010000 	.word	0x40010000
 800c67c:	40010400 	.word	0x40010400
 800c680:	40014000 	.word	0x40014000
 800c684:	40014400 	.word	0x40014400
 800c688:	40014800 	.word	0x40014800

0800c68c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b087      	sub	sp, #28
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a1b      	ldr	r3, [r3, #32]
 800c69a:	f023 0210 	bic.w	r2, r3, #16
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a1b      	ldr	r3, [r3, #32]
 800c6a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	4b34      	ldr	r3, [pc, #208]	; (800c788 <TIM_OC2_SetConfig+0xfc>)
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	021b      	lsls	r3, r3, #8
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f023 0320 	bic.w	r3, r3, #32
 800c6d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	011b      	lsls	r3, r3, #4
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a29      	ldr	r2, [pc, #164]	; (800c78c <TIM_OC2_SetConfig+0x100>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d003      	beq.n	800c6f4 <TIM_OC2_SetConfig+0x68>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a28      	ldr	r2, [pc, #160]	; (800c790 <TIM_OC2_SetConfig+0x104>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d10d      	bne.n	800c710 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	011b      	lsls	r3, r3, #4
 800c702:	697a      	ldr	r2, [r7, #20]
 800c704:	4313      	orrs	r3, r2
 800c706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c70e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a1e      	ldr	r2, [pc, #120]	; (800c78c <TIM_OC2_SetConfig+0x100>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d00f      	beq.n	800c738 <TIM_OC2_SetConfig+0xac>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a1d      	ldr	r2, [pc, #116]	; (800c790 <TIM_OC2_SetConfig+0x104>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d00b      	beq.n	800c738 <TIM_OC2_SetConfig+0xac>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a1c      	ldr	r2, [pc, #112]	; (800c794 <TIM_OC2_SetConfig+0x108>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d007      	beq.n	800c738 <TIM_OC2_SetConfig+0xac>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a1b      	ldr	r2, [pc, #108]	; (800c798 <TIM_OC2_SetConfig+0x10c>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d003      	beq.n	800c738 <TIM_OC2_SetConfig+0xac>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a1a      	ldr	r2, [pc, #104]	; (800c79c <TIM_OC2_SetConfig+0x110>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d113      	bne.n	800c760 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c73e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	4313      	orrs	r3, r2
 800c752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	693a      	ldr	r2, [r7, #16]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	621a      	str	r2, [r3, #32]
}
 800c77a:	bf00      	nop
 800c77c:	371c      	adds	r7, #28
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	feff8fff 	.word	0xfeff8fff
 800c78c:	40010000 	.word	0x40010000
 800c790:	40010400 	.word	0x40010400
 800c794:	40014000 	.word	0x40014000
 800c798:	40014400 	.word	0x40014400
 800c79c:	40014800 	.word	0x40014800

0800c7a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	4b33      	ldr	r3, [pc, #204]	; (800c898 <TIM_OC3_SetConfig+0xf8>)
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f023 0303 	bic.w	r3, r3, #3
 800c7d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	021b      	lsls	r3, r3, #8
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a28      	ldr	r2, [pc, #160]	; (800c89c <TIM_OC3_SetConfig+0xfc>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d003      	beq.n	800c806 <TIM_OC3_SetConfig+0x66>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a27      	ldr	r2, [pc, #156]	; (800c8a0 <TIM_OC3_SetConfig+0x100>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d10d      	bne.n	800c822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c80c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	021b      	lsls	r3, r3, #8
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	4313      	orrs	r3, r2
 800c818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a1d      	ldr	r2, [pc, #116]	; (800c89c <TIM_OC3_SetConfig+0xfc>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d00f      	beq.n	800c84a <TIM_OC3_SetConfig+0xaa>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a1c      	ldr	r2, [pc, #112]	; (800c8a0 <TIM_OC3_SetConfig+0x100>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d00b      	beq.n	800c84a <TIM_OC3_SetConfig+0xaa>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a1b      	ldr	r2, [pc, #108]	; (800c8a4 <TIM_OC3_SetConfig+0x104>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d007      	beq.n	800c84a <TIM_OC3_SetConfig+0xaa>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a1a      	ldr	r2, [pc, #104]	; (800c8a8 <TIM_OC3_SetConfig+0x108>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d003      	beq.n	800c84a <TIM_OC3_SetConfig+0xaa>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4a19      	ldr	r2, [pc, #100]	; (800c8ac <TIM_OC3_SetConfig+0x10c>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d113      	bne.n	800c872 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	011b      	lsls	r3, r3, #4
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	4313      	orrs	r3, r2
 800c864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	011b      	lsls	r3, r3, #4
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	4313      	orrs	r3, r2
 800c870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	621a      	str	r2, [r3, #32]
}
 800c88c:	bf00      	nop
 800c88e:	371c      	adds	r7, #28
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	fffeff8f 	.word	0xfffeff8f
 800c89c:	40010000 	.word	0x40010000
 800c8a0:	40010400 	.word	0x40010400
 800c8a4:	40014000 	.word	0x40014000
 800c8a8:	40014400 	.word	0x40014400
 800c8ac:	40014800 	.word	0x40014800

0800c8b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b087      	sub	sp, #28
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a1b      	ldr	r3, [r3, #32]
 800c8be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	4b24      	ldr	r3, [pc, #144]	; (800c96c <TIM_OC4_SetConfig+0xbc>)
 800c8dc:	4013      	ands	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	021b      	lsls	r3, r3, #8
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	031b      	lsls	r3, r3, #12
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	4313      	orrs	r3, r2
 800c906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a19      	ldr	r2, [pc, #100]	; (800c970 <TIM_OC4_SetConfig+0xc0>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d00f      	beq.n	800c930 <TIM_OC4_SetConfig+0x80>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a18      	ldr	r2, [pc, #96]	; (800c974 <TIM_OC4_SetConfig+0xc4>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d00b      	beq.n	800c930 <TIM_OC4_SetConfig+0x80>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4a17      	ldr	r2, [pc, #92]	; (800c978 <TIM_OC4_SetConfig+0xc8>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d007      	beq.n	800c930 <TIM_OC4_SetConfig+0x80>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4a16      	ldr	r2, [pc, #88]	; (800c97c <TIM_OC4_SetConfig+0xcc>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d003      	beq.n	800c930 <TIM_OC4_SetConfig+0x80>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4a15      	ldr	r2, [pc, #84]	; (800c980 <TIM_OC4_SetConfig+0xd0>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d109      	bne.n	800c944 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	019b      	lsls	r3, r3, #6
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	4313      	orrs	r3, r2
 800c942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	693a      	ldr	r2, [r7, #16]
 800c95c:	621a      	str	r2, [r3, #32]
}
 800c95e:	bf00      	nop
 800c960:	371c      	adds	r7, #28
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	feff8fff 	.word	0xfeff8fff
 800c970:	40010000 	.word	0x40010000
 800c974:	40010400 	.word	0x40010400
 800c978:	40014000 	.word	0x40014000
 800c97c:	40014400 	.word	0x40014400
 800c980:	40014800 	.word	0x40014800

0800c984 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c984:	b480      	push	{r7}
 800c986:	b087      	sub	sp, #28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a1b      	ldr	r3, [r3, #32]
 800c99e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	4b21      	ldr	r3, [pc, #132]	; (800ca34 <TIM_OC5_SetConfig+0xb0>)
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c9c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	041b      	lsls	r3, r3, #16
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a18      	ldr	r2, [pc, #96]	; (800ca38 <TIM_OC5_SetConfig+0xb4>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d00f      	beq.n	800c9fa <TIM_OC5_SetConfig+0x76>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a17      	ldr	r2, [pc, #92]	; (800ca3c <TIM_OC5_SetConfig+0xb8>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d00b      	beq.n	800c9fa <TIM_OC5_SetConfig+0x76>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a16      	ldr	r2, [pc, #88]	; (800ca40 <TIM_OC5_SetConfig+0xbc>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d007      	beq.n	800c9fa <TIM_OC5_SetConfig+0x76>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a15      	ldr	r2, [pc, #84]	; (800ca44 <TIM_OC5_SetConfig+0xc0>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d003      	beq.n	800c9fa <TIM_OC5_SetConfig+0x76>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a14      	ldr	r2, [pc, #80]	; (800ca48 <TIM_OC5_SetConfig+0xc4>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d109      	bne.n	800ca0e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	695b      	ldr	r3, [r3, #20]
 800ca06:	021b      	lsls	r3, r3, #8
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	697a      	ldr	r2, [r7, #20]
 800ca12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	685a      	ldr	r2, [r3, #4]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	621a      	str	r2, [r3, #32]
}
 800ca28:	bf00      	nop
 800ca2a:	371c      	adds	r7, #28
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	fffeff8f 	.word	0xfffeff8f
 800ca38:	40010000 	.word	0x40010000
 800ca3c:	40010400 	.word	0x40010400
 800ca40:	40014000 	.word	0x40014000
 800ca44:	40014400 	.word	0x40014400
 800ca48:	40014800 	.word	0x40014800

0800ca4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	4b22      	ldr	r3, [pc, #136]	; (800cb00 <TIM_OC6_SetConfig+0xb4>)
 800ca78:	4013      	ands	r3, r2
 800ca7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	021b      	lsls	r3, r3, #8
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	4313      	orrs	r3, r2
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	051b      	lsls	r3, r3, #20
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a19      	ldr	r2, [pc, #100]	; (800cb04 <TIM_OC6_SetConfig+0xb8>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d00f      	beq.n	800cac4 <TIM_OC6_SetConfig+0x78>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a18      	ldr	r2, [pc, #96]	; (800cb08 <TIM_OC6_SetConfig+0xbc>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d00b      	beq.n	800cac4 <TIM_OC6_SetConfig+0x78>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a17      	ldr	r2, [pc, #92]	; (800cb0c <TIM_OC6_SetConfig+0xc0>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d007      	beq.n	800cac4 <TIM_OC6_SetConfig+0x78>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a16      	ldr	r2, [pc, #88]	; (800cb10 <TIM_OC6_SetConfig+0xc4>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d003      	beq.n	800cac4 <TIM_OC6_SetConfig+0x78>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a15      	ldr	r2, [pc, #84]	; (800cb14 <TIM_OC6_SetConfig+0xc8>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d109      	bne.n	800cad8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800caca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	029b      	lsls	r3, r3, #10
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	621a      	str	r2, [r3, #32]
}
 800caf2:	bf00      	nop
 800caf4:	371c      	adds	r7, #28
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	feff8fff 	.word	0xfeff8fff
 800cb04:	40010000 	.word	0x40010000
 800cb08:	40010400 	.word	0x40010400
 800cb0c:	40014000 	.word	0x40014000
 800cb10:	40014400 	.word	0x40014400
 800cb14:	40014800 	.word	0x40014800

0800cb18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6a1b      	ldr	r3, [r3, #32]
 800cb2a:	f023 0201 	bic.w	r2, r3, #1
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6a1b      	ldr	r3, [r3, #32]
 800cb3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	4a28      	ldr	r2, [pc, #160]	; (800cbe4 <TIM_TI1_SetConfig+0xcc>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d01b      	beq.n	800cb7e <TIM_TI1_SetConfig+0x66>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb4c:	d017      	beq.n	800cb7e <TIM_TI1_SetConfig+0x66>
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	4a25      	ldr	r2, [pc, #148]	; (800cbe8 <TIM_TI1_SetConfig+0xd0>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d013      	beq.n	800cb7e <TIM_TI1_SetConfig+0x66>
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	4a24      	ldr	r2, [pc, #144]	; (800cbec <TIM_TI1_SetConfig+0xd4>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d00f      	beq.n	800cb7e <TIM_TI1_SetConfig+0x66>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	4a23      	ldr	r2, [pc, #140]	; (800cbf0 <TIM_TI1_SetConfig+0xd8>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d00b      	beq.n	800cb7e <TIM_TI1_SetConfig+0x66>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	4a22      	ldr	r2, [pc, #136]	; (800cbf4 <TIM_TI1_SetConfig+0xdc>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d007      	beq.n	800cb7e <TIM_TI1_SetConfig+0x66>
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	4a21      	ldr	r2, [pc, #132]	; (800cbf8 <TIM_TI1_SetConfig+0xe0>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d003      	beq.n	800cb7e <TIM_TI1_SetConfig+0x66>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	4a20      	ldr	r2, [pc, #128]	; (800cbfc <TIM_TI1_SetConfig+0xe4>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d101      	bne.n	800cb82 <TIM_TI1_SetConfig+0x6a>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e000      	b.n	800cb84 <TIM_TI1_SetConfig+0x6c>
 800cb82:	2300      	movs	r3, #0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d008      	beq.n	800cb9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f023 0303 	bic.w	r3, r3, #3
 800cb8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cb90:	697a      	ldr	r2, [r7, #20]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4313      	orrs	r3, r2
 800cb96:	617b      	str	r3, [r7, #20]
 800cb98:	e003      	b.n	800cba2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	f043 0301 	orr.w	r3, r3, #1
 800cba0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	011b      	lsls	r3, r3, #4
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	f023 030a 	bic.w	r3, r3, #10
 800cbbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	f003 030a 	and.w	r3, r3, #10
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	697a      	ldr	r2, [r7, #20]
 800cbce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	621a      	str	r2, [r3, #32]
}
 800cbd6:	bf00      	nop
 800cbd8:	371c      	adds	r7, #28
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	40010000 	.word	0x40010000
 800cbe8:	40000400 	.word	0x40000400
 800cbec:	40000800 	.word	0x40000800
 800cbf0:	40000c00 	.word	0x40000c00
 800cbf4:	40010400 	.word	0x40010400
 800cbf8:	40001800 	.word	0x40001800
 800cbfc:	40014000 	.word	0x40014000

0800cc00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b087      	sub	sp, #28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6a1b      	ldr	r3, [r3, #32]
 800cc10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6a1b      	ldr	r3, [r3, #32]
 800cc16:	f023 0201 	bic.w	r2, r3, #1
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	011b      	lsls	r3, r3, #4
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f023 030a 	bic.w	r3, r3, #10
 800cc3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	621a      	str	r2, [r3, #32]
}
 800cc52:	bf00      	nop
 800cc54:	371c      	adds	r7, #28
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cc5e:	b480      	push	{r7}
 800cc60:	b087      	sub	sp, #28
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	60f8      	str	r0, [r7, #12]
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	607a      	str	r2, [r7, #4]
 800cc6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6a1b      	ldr	r3, [r3, #32]
 800cc70:	f023 0210 	bic.w	r2, r3, #16
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	021b      	lsls	r3, r3, #8
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	031b      	lsls	r3, r3, #12
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	4313      	orrs	r3, r2
 800cca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ccb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	011b      	lsls	r3, r3, #4
 800ccb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	621a      	str	r2, [r3, #32]
}
 800cccc:	bf00      	nop
 800ccce:	371c      	adds	r7, #28
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b087      	sub	sp, #28
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6a1b      	ldr	r3, [r3, #32]
 800cce8:	f023 0210 	bic.w	r2, r3, #16
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	699b      	ldr	r3, [r3, #24]
 800ccf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6a1b      	ldr	r3, [r3, #32]
 800ccfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	031b      	lsls	r3, r3, #12
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	011b      	lsls	r3, r3, #4
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	697a      	ldr	r2, [r7, #20]
 800cd24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	693a      	ldr	r2, [r7, #16]
 800cd2a:	621a      	str	r2, [r3, #32]
}
 800cd2c:	bf00      	nop
 800cd2e:	371c      	adds	r7, #28
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b087      	sub	sp, #28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
 800cd44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6a1b      	ldr	r3, [r3, #32]
 800cd5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f023 0303 	bic.w	r3, r3, #3
 800cd64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	011b      	lsls	r3, r3, #4
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	697a      	ldr	r2, [r7, #20]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800cd88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	021b      	lsls	r3, r3, #8
 800cd8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	697a      	ldr	r2, [r7, #20]
 800cd9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	693a      	ldr	r2, [r7, #16]
 800cda2:	621a      	str	r2, [r3, #32]
}
 800cda4:	bf00      	nop
 800cda6:	371c      	adds	r7, #28
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b087      	sub	sp, #28
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	69db      	ldr	r3, [r3, #28]
 800cdce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6a1b      	ldr	r3, [r3, #32]
 800cdd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	021b      	lsls	r3, r3, #8
 800cde2:	697a      	ldr	r2, [r7, #20]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cdee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	031b      	lsls	r3, r3, #12
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ce02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	031b      	lsls	r3, r3, #12
 800ce08:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	621a      	str	r2, [r3, #32]
}
 800ce1e:	bf00      	nop
 800ce20:	371c      	adds	r7, #28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
	...

0800ce2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	4b09      	ldr	r3, [pc, #36]	; (800ce64 <TIM_ITRx_SetConfig+0x38>)
 800ce40:	4013      	ands	r3, r2
 800ce42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce44:	683a      	ldr	r2, [r7, #0]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	f043 0307 	orr.w	r3, r3, #7
 800ce4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	609a      	str	r2, [r3, #8]
}
 800ce56:	bf00      	nop
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	ffcfff8f 	.word	0xffcfff8f

0800ce68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	021a      	lsls	r2, r3, #8
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	431a      	orrs	r2, r3
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	697a      	ldr	r2, [r7, #20]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	697a      	ldr	r2, [r7, #20]
 800ce9a:	609a      	str	r2, [r3, #8]
}
 800ce9c:	bf00      	nop
 800ce9e:	371c      	adds	r7, #28
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b087      	sub	sp, #28
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f003 031f 	and.w	r3, r3, #31
 800ceba:	2201      	movs	r2, #1
 800cebc:	fa02 f303 	lsl.w	r3, r2, r3
 800cec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6a1a      	ldr	r2, [r3, #32]
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	43db      	mvns	r3, r3
 800ceca:	401a      	ands	r2, r3
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6a1a      	ldr	r2, [r3, #32]
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	f003 031f 	and.w	r3, r3, #31
 800ceda:	6879      	ldr	r1, [r7, #4]
 800cedc:	fa01 f303 	lsl.w	r3, r1, r3
 800cee0:	431a      	orrs	r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	621a      	str	r2, [r3, #32]
}
 800cee6:	bf00      	nop
 800cee8:	371c      	adds	r7, #28
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
	...

0800cef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d101      	bne.n	800cf0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf08:	2302      	movs	r3, #2
 800cf0a:	e06d      	b.n	800cfe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2202      	movs	r2, #2
 800cf18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a30      	ldr	r2, [pc, #192]	; (800cff4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d004      	beq.n	800cf40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a2f      	ldr	r2, [pc, #188]	; (800cff8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d108      	bne.n	800cf52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	4313      	orrs	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a20      	ldr	r2, [pc, #128]	; (800cff4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d022      	beq.n	800cfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf7e:	d01d      	beq.n	800cfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a1d      	ldr	r2, [pc, #116]	; (800cffc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d018      	beq.n	800cfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a1c      	ldr	r2, [pc, #112]	; (800d000 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d013      	beq.n	800cfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a1a      	ldr	r2, [pc, #104]	; (800d004 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d00e      	beq.n	800cfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a15      	ldr	r2, [pc, #84]	; (800cff8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d009      	beq.n	800cfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a16      	ldr	r2, [pc, #88]	; (800d008 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d004      	beq.n	800cfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a15      	ldr	r2, [pc, #84]	; (800d00c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d10c      	bne.n	800cfd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68ba      	ldr	r2, [r7, #8]
 800cfd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3714      	adds	r7, #20
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	40010000 	.word	0x40010000
 800cff8:	40010400 	.word	0x40010400
 800cffc:	40000400 	.word	0x40000400
 800d000:	40000800 	.word	0x40000800
 800d004:	40000c00 	.word	0x40000c00
 800d008:	40001800 	.word	0x40001800
 800d00c:	40014000 	.word	0x40014000

0800d010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d101      	bne.n	800d05e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e04a      	b.n	800d0f4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d064:	2b00      	cmp	r3, #0
 800d066:	d106      	bne.n	800d076 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7f5 fdcf 	bl	8002c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2224      	movs	r2, #36	; 0x24
 800d07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f022 0201 	bic.w	r2, r2, #1
 800d08c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 fcfa 	bl	800da88 <UART_SetConfig>
 800d094:	4603      	mov	r3, r0
 800d096:	2b01      	cmp	r3, #1
 800d098:	d101      	bne.n	800d09e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e02a      	b.n	800d0f4 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d002      	beq.n	800d0ac <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f001 fa56 	bl	800e558 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	685a      	ldr	r2, [r3, #4]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	689a      	ldr	r2, [r3, #8]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800d0ca:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689a      	ldr	r2, [r3, #8]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f042 0208 	orr.w	r2, r2, #8
 800d0da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f042 0201 	orr.w	r2, r2, #1
 800d0ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f001 fad5 	bl	800e69c <UART_CheckIdleState>
 800d0f2:	4603      	mov	r3, r0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b091      	sub	sp, #68	; 0x44
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	4613      	mov	r3, r2
 800d108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d110:	2b20      	cmp	r3, #32
 800d112:	f040 808c 	bne.w	800d22e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <HAL_UART_Transmit_IT+0x26>
 800d11c:	88fb      	ldrh	r3, [r7, #6]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d101      	bne.n	800d126 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e084      	b.n	800d230 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d101      	bne.n	800d134 <HAL_UART_Transmit_IT+0x38>
 800d130:	2302      	movs	r3, #2
 800d132:	e07d      	b.n	800d230 <HAL_UART_Transmit_IT+0x134>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	88fa      	ldrh	r2, [r7, #6]
 800d146:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	88fa      	ldrh	r2, [r7, #6]
 800d14e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2221      	movs	r2, #33	; 0x21
 800d164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d16c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d170:	d12e      	bne.n	800d1d0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d17a:	d107      	bne.n	800d18c <HAL_UART_Transmit_IT+0x90>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	691b      	ldr	r3, [r3, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d103      	bne.n	800d18c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	4a2d      	ldr	r2, [pc, #180]	; (800d23c <HAL_UART_Transmit_IT+0x140>)
 800d188:	675a      	str	r2, [r3, #116]	; 0x74
 800d18a:	e002      	b.n	800d192 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	4a2c      	ldr	r2, [pc, #176]	; (800d240 <HAL_UART_Transmit_IT+0x144>)
 800d190:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	3308      	adds	r3, #8
 800d1a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a4:	e853 3f00 	ldrex	r3, [r3]
 800d1a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d1b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	3308      	adds	r3, #8
 800d1b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1ba:	637a      	str	r2, [r7, #52]	; 0x34
 800d1bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1c2:	e841 2300 	strex	r3, r2, [r1]
 800d1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1e5      	bne.n	800d19a <HAL_UART_Transmit_IT+0x9e>
 800d1ce:	e02c      	b.n	800d22a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1d8:	d107      	bne.n	800d1ea <HAL_UART_Transmit_IT+0xee>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d103      	bne.n	800d1ea <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	4a17      	ldr	r2, [pc, #92]	; (800d244 <HAL_UART_Transmit_IT+0x148>)
 800d1e6:	675a      	str	r2, [r3, #116]	; 0x74
 800d1e8:	e002      	b.n	800d1f0 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	4a16      	ldr	r2, [pc, #88]	; (800d248 <HAL_UART_Transmit_IT+0x14c>)
 800d1ee:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	e853 3f00 	ldrex	r3, [r3]
 800d204:	613b      	str	r3, [r7, #16]
   return(result);
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d20c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	461a      	mov	r2, r3
 800d214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d216:	623b      	str	r3, [r7, #32]
 800d218:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21a:	69f9      	ldr	r1, [r7, #28]
 800d21c:	6a3a      	ldr	r2, [r7, #32]
 800d21e:	e841 2300 	strex	r3, r2, [r1]
 800d222:	61bb      	str	r3, [r7, #24]
   return(result);
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1e6      	bne.n	800d1f8 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	e000      	b.n	800d230 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d22e:	2302      	movs	r3, #2
  }
}
 800d230:	4618      	mov	r0, r3
 800d232:	3744      	adds	r7, #68	; 0x44
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	0800efc5 	.word	0x0800efc5
 800d240:	0800eee5 	.word	0x0800eee5
 800d244:	0800ee23 	.word	0x0800ee23
 800d248:	0800ed6b 	.word	0x0800ed6b

0800d24c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08a      	sub	sp, #40	; 0x28
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	4613      	mov	r3, r2
 800d258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d260:	2b20      	cmp	r3, #32
 800d262:	d142      	bne.n	800d2ea <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <HAL_UART_Receive_DMA+0x24>
 800d26a:	88fb      	ldrh	r3, [r7, #6]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d270:	2301      	movs	r3, #1
 800d272:	e03b      	b.n	800d2ec <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d101      	bne.n	800d282 <HAL_UART_Receive_DMA+0x36>
 800d27e:	2302      	movs	r3, #2
 800d280:	e034      	b.n	800d2ec <HAL_UART_Receive_DMA+0xa0>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a17      	ldr	r2, [pc, #92]	; (800d2f4 <HAL_UART_Receive_DMA+0xa8>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d01f      	beq.n	800d2da <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d018      	beq.n	800d2da <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	e853 3f00 	ldrex	r3, [r3]
 800d2b4:	613b      	str	r3, [r7, #16]
   return(result);
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2bc:	627b      	str	r3, [r7, #36]	; 0x24
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c6:	623b      	str	r3, [r7, #32]
 800d2c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ca:	69f9      	ldr	r1, [r7, #28]
 800d2cc:	6a3a      	ldr	r2, [r7, #32]
 800d2ce:	e841 2300 	strex	r3, r2, [r1]
 800d2d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1e6      	bne.n	800d2a8 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d2da:	88fb      	ldrh	r3, [r7, #6]
 800d2dc:	461a      	mov	r2, r3
 800d2de:	68b9      	ldr	r1, [r7, #8]
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f001 faef 	bl	800e8c4 <UART_Start_Receive_DMA>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	e000      	b.n	800d2ec <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d2ea:	2302      	movs	r3, #2
  }
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3728      	adds	r7, #40	; 0x28
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	58000c00 	.word	0x58000c00

0800d2f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b0ba      	sub	sp, #232	; 0xe8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	69db      	ldr	r3, [r3, #28]
 800d306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	689b      	ldr	r3, [r3, #8]
 800d31a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d31e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d322:	f640 030f 	movw	r3, #2063	; 0x80f
 800d326:	4013      	ands	r3, r2
 800d328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d32c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d330:	2b00      	cmp	r3, #0
 800d332:	d11b      	bne.n	800d36c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d338:	f003 0320 	and.w	r3, r3, #32
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d015      	beq.n	800d36c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d344:	f003 0320 	and.w	r3, r3, #32
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d105      	bne.n	800d358 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d34c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d354:	2b00      	cmp	r3, #0
 800d356:	d009      	beq.n	800d36c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 835a 	beq.w	800da16 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	4798      	blx	r3
      }
      return;
 800d36a:	e354      	b.n	800da16 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d36c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 811f 	beq.w	800d5b4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d376:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d37a:	4b8b      	ldr	r3, [pc, #556]	; (800d5a8 <HAL_UART_IRQHandler+0x2b0>)
 800d37c:	4013      	ands	r3, r2
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d106      	bne.n	800d390 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d382:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d386:	4b89      	ldr	r3, [pc, #548]	; (800d5ac <HAL_UART_IRQHandler+0x2b4>)
 800d388:	4013      	ands	r3, r2
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f000 8112 	beq.w	800d5b4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d394:	f003 0301 	and.w	r3, r3, #1
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d011      	beq.n	800d3c0 <HAL_UART_IRQHandler+0xc8>
 800d39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00b      	beq.n	800d3c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3b6:	f043 0201 	orr.w	r2, r3, #1
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3c4:	f003 0302 	and.w	r3, r3, #2
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d011      	beq.n	800d3f0 <HAL_UART_IRQHandler+0xf8>
 800d3cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00b      	beq.n	800d3f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2202      	movs	r2, #2
 800d3de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3e6:	f043 0204 	orr.w	r2, r3, #4
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3f4:	f003 0304 	and.w	r3, r3, #4
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d011      	beq.n	800d420 <HAL_UART_IRQHandler+0x128>
 800d3fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00b      	beq.n	800d420 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2204      	movs	r2, #4
 800d40e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d416:	f043 0202 	orr.w	r2, r3, #2
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d424:	f003 0308 	and.w	r3, r3, #8
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d017      	beq.n	800d45c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d430:	f003 0320 	and.w	r3, r3, #32
 800d434:	2b00      	cmp	r3, #0
 800d436:	d105      	bne.n	800d444 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d438:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d43c:	4b5a      	ldr	r3, [pc, #360]	; (800d5a8 <HAL_UART_IRQHandler+0x2b0>)
 800d43e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00b      	beq.n	800d45c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2208      	movs	r2, #8
 800d44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d452:	f043 0208 	orr.w	r2, r3, #8
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d464:	2b00      	cmp	r3, #0
 800d466:	d012      	beq.n	800d48e <HAL_UART_IRQHandler+0x196>
 800d468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d46c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00c      	beq.n	800d48e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d47c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d484:	f043 0220 	orr.w	r2, r3, #32
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d494:	2b00      	cmp	r3, #0
 800d496:	f000 82c0 	beq.w	800da1a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d49e:	f003 0320 	and.w	r3, r3, #32
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d013      	beq.n	800d4ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4aa:	f003 0320 	and.w	r3, r3, #32
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d105      	bne.n	800d4be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d007      	beq.n	800d4ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d003      	beq.n	800d4ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e2:	2b40      	cmp	r3, #64	; 0x40
 800d4e4:	d005      	beq.n	800d4f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d4e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d4ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d04f      	beq.n	800d592 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f001 fad0 	bl	800ea98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d502:	2b40      	cmp	r3, #64	; 0x40
 800d504:	d141      	bne.n	800d58a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	3308      	adds	r3, #8
 800d50c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d514:	e853 3f00 	ldrex	r3, [r3]
 800d518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d51c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	3308      	adds	r3, #8
 800d52e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d532:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d53e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d542:	e841 2300 	strex	r3, r2, [r1]
 800d546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d54a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1d9      	bne.n	800d506 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d013      	beq.n	800d582 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d55e:	4a14      	ldr	r2, [pc, #80]	; (800d5b0 <HAL_UART_IRQHandler+0x2b8>)
 800d560:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d566:	4618      	mov	r0, r3
 800d568:	f7f8 fd8a 	bl	8006080 <HAL_DMA_Abort_IT>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d017      	beq.n	800d5a2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d57c:	4610      	mov	r0, r2
 800d57e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d580:	e00f      	b.n	800d5a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 fa6a 	bl	800da5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d588:	e00b      	b.n	800d5a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fa66 	bl	800da5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d590:	e007      	b.n	800d5a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 fa62 	bl	800da5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d5a0:	e23b      	b.n	800da1a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5a2:	bf00      	nop
    return;
 800d5a4:	e239      	b.n	800da1a <HAL_UART_IRQHandler+0x722>
 800d5a6:	bf00      	nop
 800d5a8:	10000001 	.word	0x10000001
 800d5ac:	04000120 	.word	0x04000120
 800d5b0:	0800ed3f 	.word	0x0800ed3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	f040 81ce 	bne.w	800d95a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5c2:	f003 0310 	and.w	r3, r3, #16
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f000 81c7 	beq.w	800d95a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5d0:	f003 0310 	and.w	r3, r3, #16
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f000 81c0 	beq.w	800d95a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2210      	movs	r2, #16
 800d5e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ec:	2b40      	cmp	r3, #64	; 0x40
 800d5ee:	f040 813b 	bne.w	800d868 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a8b      	ldr	r2, [pc, #556]	; (800d828 <HAL_UART_IRQHandler+0x530>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d059      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a89      	ldr	r2, [pc, #548]	; (800d82c <HAL_UART_IRQHandler+0x534>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d053      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a87      	ldr	r2, [pc, #540]	; (800d830 <HAL_UART_IRQHandler+0x538>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d04d      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a85      	ldr	r2, [pc, #532]	; (800d834 <HAL_UART_IRQHandler+0x53c>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d047      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a83      	ldr	r2, [pc, #524]	; (800d838 <HAL_UART_IRQHandler+0x540>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d041      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a81      	ldr	r2, [pc, #516]	; (800d83c <HAL_UART_IRQHandler+0x544>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d03b      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a7f      	ldr	r2, [pc, #508]	; (800d840 <HAL_UART_IRQHandler+0x548>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d035      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a7d      	ldr	r2, [pc, #500]	; (800d844 <HAL_UART_IRQHandler+0x54c>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d02f      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a7b      	ldr	r2, [pc, #492]	; (800d848 <HAL_UART_IRQHandler+0x550>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d029      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a79      	ldr	r2, [pc, #484]	; (800d84c <HAL_UART_IRQHandler+0x554>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d023      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a77      	ldr	r2, [pc, #476]	; (800d850 <HAL_UART_IRQHandler+0x558>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d01d      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a75      	ldr	r2, [pc, #468]	; (800d854 <HAL_UART_IRQHandler+0x55c>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d017      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a73      	ldr	r2, [pc, #460]	; (800d858 <HAL_UART_IRQHandler+0x560>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d011      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a71      	ldr	r2, [pc, #452]	; (800d85c <HAL_UART_IRQHandler+0x564>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d00b      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a6f      	ldr	r2, [pc, #444]	; (800d860 <HAL_UART_IRQHandler+0x568>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d005      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x3ba>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a6d      	ldr	r2, [pc, #436]	; (800d864 <HAL_UART_IRQHandler+0x56c>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d105      	bne.n	800d6be <HAL_UART_IRQHandler+0x3c6>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	e004      	b.n	800d6c8 <HAL_UART_IRQHandler+0x3d0>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f000 81a4 	beq.w	800da1e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	f080 819c 	bcs.w	800da1e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d6ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f4:	69db      	ldr	r3, [r3, #28]
 800d6f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6fa:	f000 8086 	beq.w	800d80a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d70a:	e853 3f00 	ldrex	r3, [r3]
 800d70e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d71a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d72c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d730:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d734:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d738:	e841 2300 	strex	r3, r2, [r1]
 800d73c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d744:	2b00      	cmp	r3, #0
 800d746:	d1da      	bne.n	800d6fe <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	3308      	adds	r3, #8
 800d74e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d752:	e853 3f00 	ldrex	r3, [r3]
 800d756:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d75a:	f023 0301 	bic.w	r3, r3, #1
 800d75e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	3308      	adds	r3, #8
 800d768:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d76c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d770:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d772:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d774:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d778:	e841 2300 	strex	r3, r2, [r1]
 800d77c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d77e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1e1      	bne.n	800d748 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	3308      	adds	r3, #8
 800d78a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d78e:	e853 3f00 	ldrex	r3, [r3]
 800d792:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d79a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d7a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d7aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d7ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7b0:	e841 2300 	strex	r3, r2, [r1]
 800d7b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d7b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1e3      	bne.n	800d784 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2220      	movs	r2, #32
 800d7c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7d2:	e853 3f00 	ldrex	r3, [r3]
 800d7d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7da:	f023 0310 	bic.w	r3, r3, #16
 800d7de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d7ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d7f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d7f4:	e841 2300 	strex	r3, r2, [r1]
 800d7f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d7fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d1e4      	bne.n	800d7ca <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d804:	4618      	mov	r0, r3
 800d806:	f7f8 f91d 	bl	8005a44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d816:	b29b      	uxth	r3, r3
 800d818:	1ad3      	subs	r3, r2, r3
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	4619      	mov	r1, r3
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f926 	bl	800da70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d824:	e0fb      	b.n	800da1e <HAL_UART_IRQHandler+0x726>
 800d826:	bf00      	nop
 800d828:	40020010 	.word	0x40020010
 800d82c:	40020028 	.word	0x40020028
 800d830:	40020040 	.word	0x40020040
 800d834:	40020058 	.word	0x40020058
 800d838:	40020070 	.word	0x40020070
 800d83c:	40020088 	.word	0x40020088
 800d840:	400200a0 	.word	0x400200a0
 800d844:	400200b8 	.word	0x400200b8
 800d848:	40020410 	.word	0x40020410
 800d84c:	40020428 	.word	0x40020428
 800d850:	40020440 	.word	0x40020440
 800d854:	40020458 	.word	0x40020458
 800d858:	40020470 	.word	0x40020470
 800d85c:	40020488 	.word	0x40020488
 800d860:	400204a0 	.word	0x400204a0
 800d864:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d874:	b29b      	uxth	r3, r3
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d882:	b29b      	uxth	r3, r3
 800d884:	2b00      	cmp	r3, #0
 800d886:	f000 80cc 	beq.w	800da22 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d88a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f000 80c7 	beq.w	800da22 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89c:	e853 3f00 	ldrex	r3, [r3]
 800d8a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8b6:	647b      	str	r3, [r7, #68]	; 0x44
 800d8b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8be:	e841 2300 	strex	r3, r2, [r1]
 800d8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1e4      	bne.n	800d894 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	e853 3f00 	ldrex	r3, [r3]
 800d8d8:	623b      	str	r3, [r7, #32]
   return(result);
 800d8da:	6a3a      	ldr	r2, [r7, #32]
 800d8dc:	4b54      	ldr	r3, [pc, #336]	; (800da30 <HAL_UART_IRQHandler+0x738>)
 800d8de:	4013      	ands	r3, r2
 800d8e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d8ee:	633a      	str	r2, [r7, #48]	; 0x30
 800d8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f6:	e841 2300 	strex	r3, r2, [r1]
 800d8fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1e3      	bne.n	800d8ca <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2220      	movs	r2, #32
 800d906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2200      	movs	r2, #0
 800d90e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	e853 3f00 	ldrex	r3, [r3]
 800d922:	60fb      	str	r3, [r7, #12]
   return(result);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f023 0310 	bic.w	r3, r3, #16
 800d92a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	461a      	mov	r2, r3
 800d934:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d938:	61fb      	str	r3, [r7, #28]
 800d93a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d93c:	69b9      	ldr	r1, [r7, #24]
 800d93e:	69fa      	ldr	r2, [r7, #28]
 800d940:	e841 2300 	strex	r3, r2, [r1]
 800d944:	617b      	str	r3, [r7, #20]
   return(result);
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1e4      	bne.n	800d916 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d94c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d950:	4619      	mov	r1, r3
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 f88c 	bl	800da70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d958:	e063      	b.n	800da22 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d95a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d95e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00e      	beq.n	800d984 <HAL_UART_IRQHandler+0x68c>
 800d966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d96a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d008      	beq.n	800d984 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d97a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f001 fbc1 	bl	800f104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d982:	e051      	b.n	800da28 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d014      	beq.n	800d9ba <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d105      	bne.n	800d9a8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d99c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d008      	beq.n	800d9ba <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d03a      	beq.n	800da26 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	4798      	blx	r3
    }
    return;
 800d9b8:	e035      	b.n	800da26 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d009      	beq.n	800d9da <HAL_UART_IRQHandler+0x6e2>
 800d9c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d003      	beq.n	800d9da <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f001 fb6b 	bl	800f0ae <UART_EndTransmit_IT>
    return;
 800d9d8:	e026      	b.n	800da28 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d009      	beq.n	800d9fa <HAL_UART_IRQHandler+0x702>
 800d9e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f001 fb9a 	bl	800f12c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9f8:	e016      	b.n	800da28 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800da02:	2b00      	cmp	r3, #0
 800da04:	d010      	beq.n	800da28 <HAL_UART_IRQHandler+0x730>
 800da06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	da0c      	bge.n	800da28 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f001 fb82 	bl	800f118 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da14:	e008      	b.n	800da28 <HAL_UART_IRQHandler+0x730>
      return;
 800da16:	bf00      	nop
 800da18:	e006      	b.n	800da28 <HAL_UART_IRQHandler+0x730>
    return;
 800da1a:	bf00      	nop
 800da1c:	e004      	b.n	800da28 <HAL_UART_IRQHandler+0x730>
      return;
 800da1e:	bf00      	nop
 800da20:	e002      	b.n	800da28 <HAL_UART_IRQHandler+0x730>
      return;
 800da22:	bf00      	nop
 800da24:	e000      	b.n	800da28 <HAL_UART_IRQHandler+0x730>
    return;
 800da26:	bf00      	nop
  }
}
 800da28:	37e8      	adds	r7, #232	; 0xe8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	effffffe 	.word	0xeffffffe

0800da34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800da3c:	bf00      	nop
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800da50:	bf00      	nop
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	460b      	mov	r3, r1
 800da7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da7c:	bf00      	nop
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da8c:	b092      	sub	sp, #72	; 0x48
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da92:	2300      	movs	r3, #0
 800da94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	689a      	ldr	r2, [r3, #8]
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	691b      	ldr	r3, [r3, #16]
 800daa0:	431a      	orrs	r2, r3
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	695b      	ldr	r3, [r3, #20]
 800daa6:	431a      	orrs	r2, r3
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	69db      	ldr	r3, [r3, #28]
 800daac:	4313      	orrs	r3, r2
 800daae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	4bbe      	ldr	r3, [pc, #760]	; (800ddb0 <UART_SetConfig+0x328>)
 800dab8:	4013      	ands	r3, r2
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	6812      	ldr	r2, [r2, #0]
 800dabe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dac0:	430b      	orrs	r3, r1
 800dac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	68da      	ldr	r2, [r3, #12]
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	430a      	orrs	r2, r1
 800dad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	699b      	ldr	r3, [r3, #24]
 800dade:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4ab3      	ldr	r2, [pc, #716]	; (800ddb4 <UART_SetConfig+0x32c>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d004      	beq.n	800daf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	6a1b      	ldr	r3, [r3, #32]
 800daee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daf0:	4313      	orrs	r3, r2
 800daf2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	689a      	ldr	r2, [r3, #8]
 800dafa:	4baf      	ldr	r3, [pc, #700]	; (800ddb8 <UART_SetConfig+0x330>)
 800dafc:	4013      	ands	r3, r2
 800dafe:	697a      	ldr	r2, [r7, #20]
 800db00:	6812      	ldr	r2, [r2, #0]
 800db02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db04:	430b      	orrs	r3, r1
 800db06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0e:	f023 010f 	bic.w	r1, r3, #15
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	430a      	orrs	r2, r1
 800db1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4aa6      	ldr	r2, [pc, #664]	; (800ddbc <UART_SetConfig+0x334>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d177      	bne.n	800dc18 <UART_SetConfig+0x190>
 800db28:	4ba5      	ldr	r3, [pc, #660]	; (800ddc0 <UART_SetConfig+0x338>)
 800db2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db30:	2b28      	cmp	r3, #40	; 0x28
 800db32:	d86d      	bhi.n	800dc10 <UART_SetConfig+0x188>
 800db34:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <UART_SetConfig+0xb4>)
 800db36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3a:	bf00      	nop
 800db3c:	0800dbe1 	.word	0x0800dbe1
 800db40:	0800dc11 	.word	0x0800dc11
 800db44:	0800dc11 	.word	0x0800dc11
 800db48:	0800dc11 	.word	0x0800dc11
 800db4c:	0800dc11 	.word	0x0800dc11
 800db50:	0800dc11 	.word	0x0800dc11
 800db54:	0800dc11 	.word	0x0800dc11
 800db58:	0800dc11 	.word	0x0800dc11
 800db5c:	0800dbe9 	.word	0x0800dbe9
 800db60:	0800dc11 	.word	0x0800dc11
 800db64:	0800dc11 	.word	0x0800dc11
 800db68:	0800dc11 	.word	0x0800dc11
 800db6c:	0800dc11 	.word	0x0800dc11
 800db70:	0800dc11 	.word	0x0800dc11
 800db74:	0800dc11 	.word	0x0800dc11
 800db78:	0800dc11 	.word	0x0800dc11
 800db7c:	0800dbf1 	.word	0x0800dbf1
 800db80:	0800dc11 	.word	0x0800dc11
 800db84:	0800dc11 	.word	0x0800dc11
 800db88:	0800dc11 	.word	0x0800dc11
 800db8c:	0800dc11 	.word	0x0800dc11
 800db90:	0800dc11 	.word	0x0800dc11
 800db94:	0800dc11 	.word	0x0800dc11
 800db98:	0800dc11 	.word	0x0800dc11
 800db9c:	0800dbf9 	.word	0x0800dbf9
 800dba0:	0800dc11 	.word	0x0800dc11
 800dba4:	0800dc11 	.word	0x0800dc11
 800dba8:	0800dc11 	.word	0x0800dc11
 800dbac:	0800dc11 	.word	0x0800dc11
 800dbb0:	0800dc11 	.word	0x0800dc11
 800dbb4:	0800dc11 	.word	0x0800dc11
 800dbb8:	0800dc11 	.word	0x0800dc11
 800dbbc:	0800dc01 	.word	0x0800dc01
 800dbc0:	0800dc11 	.word	0x0800dc11
 800dbc4:	0800dc11 	.word	0x0800dc11
 800dbc8:	0800dc11 	.word	0x0800dc11
 800dbcc:	0800dc11 	.word	0x0800dc11
 800dbd0:	0800dc11 	.word	0x0800dc11
 800dbd4:	0800dc11 	.word	0x0800dc11
 800dbd8:	0800dc11 	.word	0x0800dc11
 800dbdc:	0800dc09 	.word	0x0800dc09
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e222      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dbe8:	2304      	movs	r3, #4
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e21e      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dbf0:	2308      	movs	r3, #8
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e21a      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dbf8:	2310      	movs	r3, #16
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e216      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc00:	2320      	movs	r3, #32
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e212      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc08:	2340      	movs	r3, #64	; 0x40
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e20e      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc10:	2380      	movs	r3, #128	; 0x80
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e20a      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a69      	ldr	r2, [pc, #420]	; (800ddc4 <UART_SetConfig+0x33c>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d130      	bne.n	800dc84 <UART_SetConfig+0x1fc>
 800dc22:	4b67      	ldr	r3, [pc, #412]	; (800ddc0 <UART_SetConfig+0x338>)
 800dc24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc26:	f003 0307 	and.w	r3, r3, #7
 800dc2a:	2b05      	cmp	r3, #5
 800dc2c:	d826      	bhi.n	800dc7c <UART_SetConfig+0x1f4>
 800dc2e:	a201      	add	r2, pc, #4	; (adr r2, 800dc34 <UART_SetConfig+0x1ac>)
 800dc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc34:	0800dc4d 	.word	0x0800dc4d
 800dc38:	0800dc55 	.word	0x0800dc55
 800dc3c:	0800dc5d 	.word	0x0800dc5d
 800dc40:	0800dc65 	.word	0x0800dc65
 800dc44:	0800dc6d 	.word	0x0800dc6d
 800dc48:	0800dc75 	.word	0x0800dc75
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc52:	e1ec      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc54:	2304      	movs	r3, #4
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5a:	e1e8      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc5c:	2308      	movs	r3, #8
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e1e4      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc64:	2310      	movs	r3, #16
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6a:	e1e0      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc6c:	2320      	movs	r3, #32
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc72:	e1dc      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc74:	2340      	movs	r3, #64	; 0x40
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7a:	e1d8      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc7c:	2380      	movs	r3, #128	; 0x80
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc82:	e1d4      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a4f      	ldr	r2, [pc, #316]	; (800ddc8 <UART_SetConfig+0x340>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d130      	bne.n	800dcf0 <UART_SetConfig+0x268>
 800dc8e:	4b4c      	ldr	r3, [pc, #304]	; (800ddc0 <UART_SetConfig+0x338>)
 800dc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc92:	f003 0307 	and.w	r3, r3, #7
 800dc96:	2b05      	cmp	r3, #5
 800dc98:	d826      	bhi.n	800dce8 <UART_SetConfig+0x260>
 800dc9a:	a201      	add	r2, pc, #4	; (adr r2, 800dca0 <UART_SetConfig+0x218>)
 800dc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca0:	0800dcb9 	.word	0x0800dcb9
 800dca4:	0800dcc1 	.word	0x0800dcc1
 800dca8:	0800dcc9 	.word	0x0800dcc9
 800dcac:	0800dcd1 	.word	0x0800dcd1
 800dcb0:	0800dcd9 	.word	0x0800dcd9
 800dcb4:	0800dce1 	.word	0x0800dce1
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e1b6      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dcc0:	2304      	movs	r3, #4
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e1b2      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dcc8:	2308      	movs	r3, #8
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcce:	e1ae      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dcd0:	2310      	movs	r3, #16
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd6:	e1aa      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dcd8:	2320      	movs	r3, #32
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcde:	e1a6      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dce0:	2340      	movs	r3, #64	; 0x40
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce6:	e1a2      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dce8:	2380      	movs	r3, #128	; 0x80
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcee:	e19e      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a35      	ldr	r2, [pc, #212]	; (800ddcc <UART_SetConfig+0x344>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d130      	bne.n	800dd5c <UART_SetConfig+0x2d4>
 800dcfa:	4b31      	ldr	r3, [pc, #196]	; (800ddc0 <UART_SetConfig+0x338>)
 800dcfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcfe:	f003 0307 	and.w	r3, r3, #7
 800dd02:	2b05      	cmp	r3, #5
 800dd04:	d826      	bhi.n	800dd54 <UART_SetConfig+0x2cc>
 800dd06:	a201      	add	r2, pc, #4	; (adr r2, 800dd0c <UART_SetConfig+0x284>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800dd25 	.word	0x0800dd25
 800dd10:	0800dd2d 	.word	0x0800dd2d
 800dd14:	0800dd35 	.word	0x0800dd35
 800dd18:	0800dd3d 	.word	0x0800dd3d
 800dd1c:	0800dd45 	.word	0x0800dd45
 800dd20:	0800dd4d 	.word	0x0800dd4d
 800dd24:	2300      	movs	r3, #0
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e180      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dd2c:	2304      	movs	r3, #4
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd32:	e17c      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dd34:	2308      	movs	r3, #8
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3a:	e178      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dd3c:	2310      	movs	r3, #16
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd42:	e174      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dd44:	2320      	movs	r3, #32
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e170      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dd4c:	2340      	movs	r3, #64	; 0x40
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e16c      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dd54:	2380      	movs	r3, #128	; 0x80
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5a:	e168      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a1b      	ldr	r2, [pc, #108]	; (800ddd0 <UART_SetConfig+0x348>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d142      	bne.n	800ddec <UART_SetConfig+0x364>
 800dd66:	4b16      	ldr	r3, [pc, #88]	; (800ddc0 <UART_SetConfig+0x338>)
 800dd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd6a:	f003 0307 	and.w	r3, r3, #7
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	d838      	bhi.n	800dde4 <UART_SetConfig+0x35c>
 800dd72:	a201      	add	r2, pc, #4	; (adr r2, 800dd78 <UART_SetConfig+0x2f0>)
 800dd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd78:	0800dd91 	.word	0x0800dd91
 800dd7c:	0800dd99 	.word	0x0800dd99
 800dd80:	0800dda1 	.word	0x0800dda1
 800dd84:	0800dda9 	.word	0x0800dda9
 800dd88:	0800ddd5 	.word	0x0800ddd5
 800dd8c:	0800dddd 	.word	0x0800dddd
 800dd90:	2300      	movs	r3, #0
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd96:	e14a      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dd98:	2304      	movs	r3, #4
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9e:	e146      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dda0:	2308      	movs	r3, #8
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda6:	e142      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dda8:	2310      	movs	r3, #16
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddae:	e13e      	b.n	800e02e <UART_SetConfig+0x5a6>
 800ddb0:	cfff69f3 	.word	0xcfff69f3
 800ddb4:	58000c00 	.word	0x58000c00
 800ddb8:	11fff4ff 	.word	0x11fff4ff
 800ddbc:	40011000 	.word	0x40011000
 800ddc0:	58024400 	.word	0x58024400
 800ddc4:	40004400 	.word	0x40004400
 800ddc8:	40004800 	.word	0x40004800
 800ddcc:	40004c00 	.word	0x40004c00
 800ddd0:	40005000 	.word	0x40005000
 800ddd4:	2320      	movs	r3, #32
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddda:	e128      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dddc:	2340      	movs	r3, #64	; 0x40
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e124      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dde4:	2380      	movs	r3, #128	; 0x80
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e120      	b.n	800e02e <UART_SetConfig+0x5a6>
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4acb      	ldr	r2, [pc, #812]	; (800e120 <UART_SetConfig+0x698>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d176      	bne.n	800dee4 <UART_SetConfig+0x45c>
 800ddf6:	4bcb      	ldr	r3, [pc, #812]	; (800e124 <UART_SetConfig+0x69c>)
 800ddf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ddfe:	2b28      	cmp	r3, #40	; 0x28
 800de00:	d86c      	bhi.n	800dedc <UART_SetConfig+0x454>
 800de02:	a201      	add	r2, pc, #4	; (adr r2, 800de08 <UART_SetConfig+0x380>)
 800de04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de08:	0800dead 	.word	0x0800dead
 800de0c:	0800dedd 	.word	0x0800dedd
 800de10:	0800dedd 	.word	0x0800dedd
 800de14:	0800dedd 	.word	0x0800dedd
 800de18:	0800dedd 	.word	0x0800dedd
 800de1c:	0800dedd 	.word	0x0800dedd
 800de20:	0800dedd 	.word	0x0800dedd
 800de24:	0800dedd 	.word	0x0800dedd
 800de28:	0800deb5 	.word	0x0800deb5
 800de2c:	0800dedd 	.word	0x0800dedd
 800de30:	0800dedd 	.word	0x0800dedd
 800de34:	0800dedd 	.word	0x0800dedd
 800de38:	0800dedd 	.word	0x0800dedd
 800de3c:	0800dedd 	.word	0x0800dedd
 800de40:	0800dedd 	.word	0x0800dedd
 800de44:	0800dedd 	.word	0x0800dedd
 800de48:	0800debd 	.word	0x0800debd
 800de4c:	0800dedd 	.word	0x0800dedd
 800de50:	0800dedd 	.word	0x0800dedd
 800de54:	0800dedd 	.word	0x0800dedd
 800de58:	0800dedd 	.word	0x0800dedd
 800de5c:	0800dedd 	.word	0x0800dedd
 800de60:	0800dedd 	.word	0x0800dedd
 800de64:	0800dedd 	.word	0x0800dedd
 800de68:	0800dec5 	.word	0x0800dec5
 800de6c:	0800dedd 	.word	0x0800dedd
 800de70:	0800dedd 	.word	0x0800dedd
 800de74:	0800dedd 	.word	0x0800dedd
 800de78:	0800dedd 	.word	0x0800dedd
 800de7c:	0800dedd 	.word	0x0800dedd
 800de80:	0800dedd 	.word	0x0800dedd
 800de84:	0800dedd 	.word	0x0800dedd
 800de88:	0800decd 	.word	0x0800decd
 800de8c:	0800dedd 	.word	0x0800dedd
 800de90:	0800dedd 	.word	0x0800dedd
 800de94:	0800dedd 	.word	0x0800dedd
 800de98:	0800dedd 	.word	0x0800dedd
 800de9c:	0800dedd 	.word	0x0800dedd
 800dea0:	0800dedd 	.word	0x0800dedd
 800dea4:	0800dedd 	.word	0x0800dedd
 800dea8:	0800ded5 	.word	0x0800ded5
 800deac:	2301      	movs	r3, #1
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e0bc      	b.n	800e02e <UART_SetConfig+0x5a6>
 800deb4:	2304      	movs	r3, #4
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e0b8      	b.n	800e02e <UART_SetConfig+0x5a6>
 800debc:	2308      	movs	r3, #8
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e0b4      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dec4:	2310      	movs	r3, #16
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e0b0      	b.n	800e02e <UART_SetConfig+0x5a6>
 800decc:	2320      	movs	r3, #32
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded2:	e0ac      	b.n	800e02e <UART_SetConfig+0x5a6>
 800ded4:	2340      	movs	r3, #64	; 0x40
 800ded6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deda:	e0a8      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dedc:	2380      	movs	r3, #128	; 0x80
 800dede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee2:	e0a4      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a8f      	ldr	r2, [pc, #572]	; (800e128 <UART_SetConfig+0x6a0>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d130      	bne.n	800df50 <UART_SetConfig+0x4c8>
 800deee:	4b8d      	ldr	r3, [pc, #564]	; (800e124 <UART_SetConfig+0x69c>)
 800def0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800def2:	f003 0307 	and.w	r3, r3, #7
 800def6:	2b05      	cmp	r3, #5
 800def8:	d826      	bhi.n	800df48 <UART_SetConfig+0x4c0>
 800defa:	a201      	add	r2, pc, #4	; (adr r2, 800df00 <UART_SetConfig+0x478>)
 800defc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df00:	0800df19 	.word	0x0800df19
 800df04:	0800df21 	.word	0x0800df21
 800df08:	0800df29 	.word	0x0800df29
 800df0c:	0800df31 	.word	0x0800df31
 800df10:	0800df39 	.word	0x0800df39
 800df14:	0800df41 	.word	0x0800df41
 800df18:	2300      	movs	r3, #0
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1e:	e086      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df20:	2304      	movs	r3, #4
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e082      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df28:	2308      	movs	r3, #8
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e07e      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df30:	2310      	movs	r3, #16
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df36:	e07a      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df38:	2320      	movs	r3, #32
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3e:	e076      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df40:	2340      	movs	r3, #64	; 0x40
 800df42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df46:	e072      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df48:	2380      	movs	r3, #128	; 0x80
 800df4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df4e:	e06e      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a75      	ldr	r2, [pc, #468]	; (800e12c <UART_SetConfig+0x6a4>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d130      	bne.n	800dfbc <UART_SetConfig+0x534>
 800df5a:	4b72      	ldr	r3, [pc, #456]	; (800e124 <UART_SetConfig+0x69c>)
 800df5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df5e:	f003 0307 	and.w	r3, r3, #7
 800df62:	2b05      	cmp	r3, #5
 800df64:	d826      	bhi.n	800dfb4 <UART_SetConfig+0x52c>
 800df66:	a201      	add	r2, pc, #4	; (adr r2, 800df6c <UART_SetConfig+0x4e4>)
 800df68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6c:	0800df85 	.word	0x0800df85
 800df70:	0800df8d 	.word	0x0800df8d
 800df74:	0800df95 	.word	0x0800df95
 800df78:	0800df9d 	.word	0x0800df9d
 800df7c:	0800dfa5 	.word	0x0800dfa5
 800df80:	0800dfad 	.word	0x0800dfad
 800df84:	2300      	movs	r3, #0
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e050      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df8c:	2304      	movs	r3, #4
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e04c      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df94:	2308      	movs	r3, #8
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e048      	b.n	800e02e <UART_SetConfig+0x5a6>
 800df9c:	2310      	movs	r3, #16
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa2:	e044      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dfa4:	2320      	movs	r3, #32
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfaa:	e040      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dfac:	2340      	movs	r3, #64	; 0x40
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb2:	e03c      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dfb4:	2380      	movs	r3, #128	; 0x80
 800dfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfba:	e038      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a5b      	ldr	r2, [pc, #364]	; (800e130 <UART_SetConfig+0x6a8>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d130      	bne.n	800e028 <UART_SetConfig+0x5a0>
 800dfc6:	4b57      	ldr	r3, [pc, #348]	; (800e124 <UART_SetConfig+0x69c>)
 800dfc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfca:	f003 0307 	and.w	r3, r3, #7
 800dfce:	2b05      	cmp	r3, #5
 800dfd0:	d826      	bhi.n	800e020 <UART_SetConfig+0x598>
 800dfd2:	a201      	add	r2, pc, #4	; (adr r2, 800dfd8 <UART_SetConfig+0x550>)
 800dfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd8:	0800dff1 	.word	0x0800dff1
 800dfdc:	0800dff9 	.word	0x0800dff9
 800dfe0:	0800e001 	.word	0x0800e001
 800dfe4:	0800e009 	.word	0x0800e009
 800dfe8:	0800e011 	.word	0x0800e011
 800dfec:	0800e019 	.word	0x0800e019
 800dff0:	2302      	movs	r3, #2
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff6:	e01a      	b.n	800e02e <UART_SetConfig+0x5a6>
 800dff8:	2304      	movs	r3, #4
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffe:	e016      	b.n	800e02e <UART_SetConfig+0x5a6>
 800e000:	2308      	movs	r3, #8
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e006:	e012      	b.n	800e02e <UART_SetConfig+0x5a6>
 800e008:	2310      	movs	r3, #16
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00e:	e00e      	b.n	800e02e <UART_SetConfig+0x5a6>
 800e010:	2320      	movs	r3, #32
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e016:	e00a      	b.n	800e02e <UART_SetConfig+0x5a6>
 800e018:	2340      	movs	r3, #64	; 0x40
 800e01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01e:	e006      	b.n	800e02e <UART_SetConfig+0x5a6>
 800e020:	2380      	movs	r3, #128	; 0x80
 800e022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e026:	e002      	b.n	800e02e <UART_SetConfig+0x5a6>
 800e028:	2380      	movs	r3, #128	; 0x80
 800e02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a3f      	ldr	r2, [pc, #252]	; (800e130 <UART_SetConfig+0x6a8>)
 800e034:	4293      	cmp	r3, r2
 800e036:	f040 80f8 	bne.w	800e22a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e03a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e03e:	2b20      	cmp	r3, #32
 800e040:	dc46      	bgt.n	800e0d0 <UART_SetConfig+0x648>
 800e042:	2b02      	cmp	r3, #2
 800e044:	f2c0 8082 	blt.w	800e14c <UART_SetConfig+0x6c4>
 800e048:	3b02      	subs	r3, #2
 800e04a:	2b1e      	cmp	r3, #30
 800e04c:	d87e      	bhi.n	800e14c <UART_SetConfig+0x6c4>
 800e04e:	a201      	add	r2, pc, #4	; (adr r2, 800e054 <UART_SetConfig+0x5cc>)
 800e050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e054:	0800e0d7 	.word	0x0800e0d7
 800e058:	0800e14d 	.word	0x0800e14d
 800e05c:	0800e0df 	.word	0x0800e0df
 800e060:	0800e14d 	.word	0x0800e14d
 800e064:	0800e14d 	.word	0x0800e14d
 800e068:	0800e14d 	.word	0x0800e14d
 800e06c:	0800e0ef 	.word	0x0800e0ef
 800e070:	0800e14d 	.word	0x0800e14d
 800e074:	0800e14d 	.word	0x0800e14d
 800e078:	0800e14d 	.word	0x0800e14d
 800e07c:	0800e14d 	.word	0x0800e14d
 800e080:	0800e14d 	.word	0x0800e14d
 800e084:	0800e14d 	.word	0x0800e14d
 800e088:	0800e14d 	.word	0x0800e14d
 800e08c:	0800e0ff 	.word	0x0800e0ff
 800e090:	0800e14d 	.word	0x0800e14d
 800e094:	0800e14d 	.word	0x0800e14d
 800e098:	0800e14d 	.word	0x0800e14d
 800e09c:	0800e14d 	.word	0x0800e14d
 800e0a0:	0800e14d 	.word	0x0800e14d
 800e0a4:	0800e14d 	.word	0x0800e14d
 800e0a8:	0800e14d 	.word	0x0800e14d
 800e0ac:	0800e14d 	.word	0x0800e14d
 800e0b0:	0800e14d 	.word	0x0800e14d
 800e0b4:	0800e14d 	.word	0x0800e14d
 800e0b8:	0800e14d 	.word	0x0800e14d
 800e0bc:	0800e14d 	.word	0x0800e14d
 800e0c0:	0800e14d 	.word	0x0800e14d
 800e0c4:	0800e14d 	.word	0x0800e14d
 800e0c8:	0800e14d 	.word	0x0800e14d
 800e0cc:	0800e13f 	.word	0x0800e13f
 800e0d0:	2b40      	cmp	r3, #64	; 0x40
 800e0d2:	d037      	beq.n	800e144 <UART_SetConfig+0x6bc>
 800e0d4:	e03a      	b.n	800e14c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e0d6:	f7fc fd67 	bl	800aba8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e0da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0dc:	e03c      	b.n	800e158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fc fd76 	bl	800abd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ec:	e034      	b.n	800e158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0ee:	f107 0318 	add.w	r3, r7, #24
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fc fec2 	bl	800ae7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0fc:	e02c      	b.n	800e158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0fe:	4b09      	ldr	r3, [pc, #36]	; (800e124 <UART_SetConfig+0x69c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f003 0320 	and.w	r3, r3, #32
 800e106:	2b00      	cmp	r3, #0
 800e108:	d016      	beq.n	800e138 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e10a:	4b06      	ldr	r3, [pc, #24]	; (800e124 <UART_SetConfig+0x69c>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	08db      	lsrs	r3, r3, #3
 800e110:	f003 0303 	and.w	r3, r3, #3
 800e114:	4a07      	ldr	r2, [pc, #28]	; (800e134 <UART_SetConfig+0x6ac>)
 800e116:	fa22 f303 	lsr.w	r3, r2, r3
 800e11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e11c:	e01c      	b.n	800e158 <UART_SetConfig+0x6d0>
 800e11e:	bf00      	nop
 800e120:	40011400 	.word	0x40011400
 800e124:	58024400 	.word	0x58024400
 800e128:	40007800 	.word	0x40007800
 800e12c:	40007c00 	.word	0x40007c00
 800e130:	58000c00 	.word	0x58000c00
 800e134:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e138:	4b9d      	ldr	r3, [pc, #628]	; (800e3b0 <UART_SetConfig+0x928>)
 800e13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e13c:	e00c      	b.n	800e158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e13e:	4b9d      	ldr	r3, [pc, #628]	; (800e3b4 <UART_SetConfig+0x92c>)
 800e140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e142:	e009      	b.n	800e158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e14a:	e005      	b.n	800e158 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e14c:	2300      	movs	r3, #0
 800e14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e150:	2301      	movs	r3, #1
 800e152:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e156:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 81de 	beq.w	800e51c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e164:	4a94      	ldr	r2, [pc, #592]	; (800e3b8 <UART_SetConfig+0x930>)
 800e166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e16a:	461a      	mov	r2, r3
 800e16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e16e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e172:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	4613      	mov	r3, r2
 800e17a:	005b      	lsls	r3, r3, #1
 800e17c:	4413      	add	r3, r2
 800e17e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e180:	429a      	cmp	r2, r3
 800e182:	d305      	bcc.n	800e190 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e18a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d903      	bls.n	800e198 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e196:	e1c1      	b.n	800e51c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19a:	2200      	movs	r2, #0
 800e19c:	60bb      	str	r3, [r7, #8]
 800e19e:	60fa      	str	r2, [r7, #12]
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a4:	4a84      	ldr	r2, [pc, #528]	; (800e3b8 <UART_SetConfig+0x930>)
 800e1a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	607a      	str	r2, [r7, #4]
 800e1b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e1ba:	f7f2 faa5 	bl	8000708 <__aeabi_uldivmod>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	f04f 0200 	mov.w	r2, #0
 800e1ca:	f04f 0300 	mov.w	r3, #0
 800e1ce:	020b      	lsls	r3, r1, #8
 800e1d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e1d4:	0202      	lsls	r2, r0, #8
 800e1d6:	6979      	ldr	r1, [r7, #20]
 800e1d8:	6849      	ldr	r1, [r1, #4]
 800e1da:	0849      	lsrs	r1, r1, #1
 800e1dc:	2000      	movs	r0, #0
 800e1de:	460c      	mov	r4, r1
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	eb12 0804 	adds.w	r8, r2, r4
 800e1e6:	eb43 0905 	adc.w	r9, r3, r5
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	469a      	mov	sl, r3
 800e1f2:	4693      	mov	fp, r2
 800e1f4:	4652      	mov	r2, sl
 800e1f6:	465b      	mov	r3, fp
 800e1f8:	4640      	mov	r0, r8
 800e1fa:	4649      	mov	r1, r9
 800e1fc:	f7f2 fa84 	bl	8000708 <__aeabi_uldivmod>
 800e200:	4602      	mov	r2, r0
 800e202:	460b      	mov	r3, r1
 800e204:	4613      	mov	r3, r2
 800e206:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e20e:	d308      	bcc.n	800e222 <UART_SetConfig+0x79a>
 800e210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e216:	d204      	bcs.n	800e222 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e21e:	60da      	str	r2, [r3, #12]
 800e220:	e17c      	b.n	800e51c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e228:	e178      	b.n	800e51c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	69db      	ldr	r3, [r3, #28]
 800e22e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e232:	f040 80c5 	bne.w	800e3c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e236:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e23a:	2b20      	cmp	r3, #32
 800e23c:	dc48      	bgt.n	800e2d0 <UART_SetConfig+0x848>
 800e23e:	2b00      	cmp	r3, #0
 800e240:	db7b      	blt.n	800e33a <UART_SetConfig+0x8b2>
 800e242:	2b20      	cmp	r3, #32
 800e244:	d879      	bhi.n	800e33a <UART_SetConfig+0x8b2>
 800e246:	a201      	add	r2, pc, #4	; (adr r2, 800e24c <UART_SetConfig+0x7c4>)
 800e248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24c:	0800e2d7 	.word	0x0800e2d7
 800e250:	0800e2df 	.word	0x0800e2df
 800e254:	0800e33b 	.word	0x0800e33b
 800e258:	0800e33b 	.word	0x0800e33b
 800e25c:	0800e2e7 	.word	0x0800e2e7
 800e260:	0800e33b 	.word	0x0800e33b
 800e264:	0800e33b 	.word	0x0800e33b
 800e268:	0800e33b 	.word	0x0800e33b
 800e26c:	0800e2f7 	.word	0x0800e2f7
 800e270:	0800e33b 	.word	0x0800e33b
 800e274:	0800e33b 	.word	0x0800e33b
 800e278:	0800e33b 	.word	0x0800e33b
 800e27c:	0800e33b 	.word	0x0800e33b
 800e280:	0800e33b 	.word	0x0800e33b
 800e284:	0800e33b 	.word	0x0800e33b
 800e288:	0800e33b 	.word	0x0800e33b
 800e28c:	0800e307 	.word	0x0800e307
 800e290:	0800e33b 	.word	0x0800e33b
 800e294:	0800e33b 	.word	0x0800e33b
 800e298:	0800e33b 	.word	0x0800e33b
 800e29c:	0800e33b 	.word	0x0800e33b
 800e2a0:	0800e33b 	.word	0x0800e33b
 800e2a4:	0800e33b 	.word	0x0800e33b
 800e2a8:	0800e33b 	.word	0x0800e33b
 800e2ac:	0800e33b 	.word	0x0800e33b
 800e2b0:	0800e33b 	.word	0x0800e33b
 800e2b4:	0800e33b 	.word	0x0800e33b
 800e2b8:	0800e33b 	.word	0x0800e33b
 800e2bc:	0800e33b 	.word	0x0800e33b
 800e2c0:	0800e33b 	.word	0x0800e33b
 800e2c4:	0800e33b 	.word	0x0800e33b
 800e2c8:	0800e33b 	.word	0x0800e33b
 800e2cc:	0800e32d 	.word	0x0800e32d
 800e2d0:	2b40      	cmp	r3, #64	; 0x40
 800e2d2:	d02e      	beq.n	800e332 <UART_SetConfig+0x8aa>
 800e2d4:	e031      	b.n	800e33a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2d6:	f7fb fcf5 	bl	8009cc4 <HAL_RCC_GetPCLK1Freq>
 800e2da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e2dc:	e033      	b.n	800e346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2de:	f7fb fd07 	bl	8009cf0 <HAL_RCC_GetPCLK2Freq>
 800e2e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e2e4:	e02f      	b.n	800e346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fc fc72 	bl	800abd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2f4:	e027      	b.n	800e346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2f6:	f107 0318 	add.w	r3, r7, #24
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fc fdbe 	bl	800ae7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e304:	e01f      	b.n	800e346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e306:	4b2d      	ldr	r3, [pc, #180]	; (800e3bc <UART_SetConfig+0x934>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f003 0320 	and.w	r3, r3, #32
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d009      	beq.n	800e326 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e312:	4b2a      	ldr	r3, [pc, #168]	; (800e3bc <UART_SetConfig+0x934>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	08db      	lsrs	r3, r3, #3
 800e318:	f003 0303 	and.w	r3, r3, #3
 800e31c:	4a24      	ldr	r2, [pc, #144]	; (800e3b0 <UART_SetConfig+0x928>)
 800e31e:	fa22 f303 	lsr.w	r3, r2, r3
 800e322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e324:	e00f      	b.n	800e346 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e326:	4b22      	ldr	r3, [pc, #136]	; (800e3b0 <UART_SetConfig+0x928>)
 800e328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e32a:	e00c      	b.n	800e346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e32c:	4b21      	ldr	r3, [pc, #132]	; (800e3b4 <UART_SetConfig+0x92c>)
 800e32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e330:	e009      	b.n	800e346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e338:	e005      	b.n	800e346 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e33a:	2300      	movs	r3, #0
 800e33c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f000 80e7 	beq.w	800e51c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e352:	4a19      	ldr	r2, [pc, #100]	; (800e3b8 <UART_SetConfig+0x930>)
 800e354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e358:	461a      	mov	r2, r3
 800e35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e35c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e360:	005a      	lsls	r2, r3, #1
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	085b      	lsrs	r3, r3, #1
 800e368:	441a      	add	r2, r3
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e372:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e376:	2b0f      	cmp	r3, #15
 800e378:	d916      	bls.n	800e3a8 <UART_SetConfig+0x920>
 800e37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e380:	d212      	bcs.n	800e3a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e384:	b29b      	uxth	r3, r3
 800e386:	f023 030f 	bic.w	r3, r3, #15
 800e38a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38e:	085b      	lsrs	r3, r3, #1
 800e390:	b29b      	uxth	r3, r3
 800e392:	f003 0307 	and.w	r3, r3, #7
 800e396:	b29a      	uxth	r2, r3
 800e398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e39a:	4313      	orrs	r3, r2
 800e39c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e3a4:	60da      	str	r2, [r3, #12]
 800e3a6:	e0b9      	b.n	800e51c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e3ae:	e0b5      	b.n	800e51c <UART_SetConfig+0xa94>
 800e3b0:	03d09000 	.word	0x03d09000
 800e3b4:	003d0900 	.word	0x003d0900
 800e3b8:	08011614 	.word	0x08011614
 800e3bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e3c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e3c4:	2b20      	cmp	r3, #32
 800e3c6:	dc49      	bgt.n	800e45c <UART_SetConfig+0x9d4>
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	db7c      	blt.n	800e4c6 <UART_SetConfig+0xa3e>
 800e3cc:	2b20      	cmp	r3, #32
 800e3ce:	d87a      	bhi.n	800e4c6 <UART_SetConfig+0xa3e>
 800e3d0:	a201      	add	r2, pc, #4	; (adr r2, 800e3d8 <UART_SetConfig+0x950>)
 800e3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d6:	bf00      	nop
 800e3d8:	0800e463 	.word	0x0800e463
 800e3dc:	0800e46b 	.word	0x0800e46b
 800e3e0:	0800e4c7 	.word	0x0800e4c7
 800e3e4:	0800e4c7 	.word	0x0800e4c7
 800e3e8:	0800e473 	.word	0x0800e473
 800e3ec:	0800e4c7 	.word	0x0800e4c7
 800e3f0:	0800e4c7 	.word	0x0800e4c7
 800e3f4:	0800e4c7 	.word	0x0800e4c7
 800e3f8:	0800e483 	.word	0x0800e483
 800e3fc:	0800e4c7 	.word	0x0800e4c7
 800e400:	0800e4c7 	.word	0x0800e4c7
 800e404:	0800e4c7 	.word	0x0800e4c7
 800e408:	0800e4c7 	.word	0x0800e4c7
 800e40c:	0800e4c7 	.word	0x0800e4c7
 800e410:	0800e4c7 	.word	0x0800e4c7
 800e414:	0800e4c7 	.word	0x0800e4c7
 800e418:	0800e493 	.word	0x0800e493
 800e41c:	0800e4c7 	.word	0x0800e4c7
 800e420:	0800e4c7 	.word	0x0800e4c7
 800e424:	0800e4c7 	.word	0x0800e4c7
 800e428:	0800e4c7 	.word	0x0800e4c7
 800e42c:	0800e4c7 	.word	0x0800e4c7
 800e430:	0800e4c7 	.word	0x0800e4c7
 800e434:	0800e4c7 	.word	0x0800e4c7
 800e438:	0800e4c7 	.word	0x0800e4c7
 800e43c:	0800e4c7 	.word	0x0800e4c7
 800e440:	0800e4c7 	.word	0x0800e4c7
 800e444:	0800e4c7 	.word	0x0800e4c7
 800e448:	0800e4c7 	.word	0x0800e4c7
 800e44c:	0800e4c7 	.word	0x0800e4c7
 800e450:	0800e4c7 	.word	0x0800e4c7
 800e454:	0800e4c7 	.word	0x0800e4c7
 800e458:	0800e4b9 	.word	0x0800e4b9
 800e45c:	2b40      	cmp	r3, #64	; 0x40
 800e45e:	d02e      	beq.n	800e4be <UART_SetConfig+0xa36>
 800e460:	e031      	b.n	800e4c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e462:	f7fb fc2f 	bl	8009cc4 <HAL_RCC_GetPCLK1Freq>
 800e466:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e468:	e033      	b.n	800e4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e46a:	f7fb fc41 	bl	8009cf0 <HAL_RCC_GetPCLK2Freq>
 800e46e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e470:	e02f      	b.n	800e4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e476:	4618      	mov	r0, r3
 800e478:	f7fc fbac 	bl	800abd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e480:	e027      	b.n	800e4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e482:	f107 0318 	add.w	r3, r7, #24
 800e486:	4618      	mov	r0, r3
 800e488:	f7fc fcf8 	bl	800ae7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e48c:	69fb      	ldr	r3, [r7, #28]
 800e48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e490:	e01f      	b.n	800e4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e492:	4b2d      	ldr	r3, [pc, #180]	; (800e548 <UART_SetConfig+0xac0>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f003 0320 	and.w	r3, r3, #32
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d009      	beq.n	800e4b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e49e:	4b2a      	ldr	r3, [pc, #168]	; (800e548 <UART_SetConfig+0xac0>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	08db      	lsrs	r3, r3, #3
 800e4a4:	f003 0303 	and.w	r3, r3, #3
 800e4a8:	4a28      	ldr	r2, [pc, #160]	; (800e54c <UART_SetConfig+0xac4>)
 800e4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800e4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e4b0:	e00f      	b.n	800e4d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e4b2:	4b26      	ldr	r3, [pc, #152]	; (800e54c <UART_SetConfig+0xac4>)
 800e4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4b6:	e00c      	b.n	800e4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4b8:	4b25      	ldr	r3, [pc, #148]	; (800e550 <UART_SetConfig+0xac8>)
 800e4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4bc:	e009      	b.n	800e4d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4c4:	e005      	b.n	800e4d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e4d0:	bf00      	nop
    }

    if (pclk != 0U)
 800e4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d021      	beq.n	800e51c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4dc:	4a1d      	ldr	r2, [pc, #116]	; (800e554 <UART_SetConfig+0xacc>)
 800e4de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	085b      	lsrs	r3, r3, #1
 800e4f0:	441a      	add	r2, r3
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fe:	2b0f      	cmp	r3, #15
 800e500:	d909      	bls.n	800e516 <UART_SetConfig+0xa8e>
 800e502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e508:	d205      	bcs.n	800e516 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	60da      	str	r2, [r3, #12]
 800e514:	e002      	b.n	800e51c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	2201      	movs	r2, #1
 800e520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	2201      	movs	r2, #1
 800e528:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	2200      	movs	r2, #0
 800e530:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	2200      	movs	r2, #0
 800e536:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e538:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3748      	adds	r7, #72	; 0x48
 800e540:	46bd      	mov	sp, r7
 800e542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e546:	bf00      	nop
 800e548:	58024400 	.word	0x58024400
 800e54c:	03d09000 	.word	0x03d09000
 800e550:	003d0900 	.word	0x003d0900
 800e554:	08011614 	.word	0x08011614

0800e558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e564:	f003 0301 	and.w	r3, r3, #1
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00a      	beq.n	800e582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	430a      	orrs	r2, r1
 800e580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e586:	f003 0302 	and.w	r3, r3, #2
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00a      	beq.n	800e5a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	430a      	orrs	r2, r1
 800e5a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a8:	f003 0304 	and.w	r3, r3, #4
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00a      	beq.n	800e5c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	430a      	orrs	r2, r1
 800e5c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ca:	f003 0308 	and.w	r3, r3, #8
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00a      	beq.n	800e5e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	430a      	orrs	r2, r1
 800e5e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ec:	f003 0310 	and.w	r3, r3, #16
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00a      	beq.n	800e60a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	430a      	orrs	r2, r1
 800e608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e60e:	f003 0320 	and.w	r3, r3, #32
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00a      	beq.n	800e62c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	430a      	orrs	r2, r1
 800e62a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e634:	2b00      	cmp	r3, #0
 800e636:	d01a      	beq.n	800e66e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	430a      	orrs	r2, r1
 800e64c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e656:	d10a      	bne.n	800e66e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	430a      	orrs	r2, r1
 800e66c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00a      	beq.n	800e690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	430a      	orrs	r2, r1
 800e68e:	605a      	str	r2, [r3, #4]
  }
}
 800e690:	bf00      	nop
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af02      	add	r7, sp, #8
 800e6a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e6ac:	f7f6 fab8 	bl	8004c20 <HAL_GetTick>
 800e6b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f003 0308 	and.w	r3, r3, #8
 800e6bc:	2b08      	cmp	r3, #8
 800e6be:	d10e      	bne.n	800e6de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 f82f 	bl	800e732 <UART_WaitOnFlagUntilTimeout>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d001      	beq.n	800e6de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6da:	2303      	movs	r3, #3
 800e6dc:	e025      	b.n	800e72a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f003 0304 	and.w	r3, r3, #4
 800e6e8:	2b04      	cmp	r3, #4
 800e6ea:	d10e      	bne.n	800e70a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 f819 	bl	800e732 <UART_WaitOnFlagUntilTimeout>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e706:	2303      	movs	r3, #3
 800e708:	e00f      	b.n	800e72a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2220      	movs	r2, #32
 800e70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2220      	movs	r2, #32
 800e716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e728:	2300      	movs	r3, #0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b09c      	sub	sp, #112	; 0x70
 800e736:	af00      	add	r7, sp, #0
 800e738:	60f8      	str	r0, [r7, #12]
 800e73a:	60b9      	str	r1, [r7, #8]
 800e73c:	603b      	str	r3, [r7, #0]
 800e73e:	4613      	mov	r3, r2
 800e740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e742:	e0a9      	b.n	800e898 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e74a:	f000 80a5 	beq.w	800e898 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e74e:	f7f6 fa67 	bl	8004c20 <HAL_GetTick>
 800e752:	4602      	mov	r2, r0
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	1ad3      	subs	r3, r2, r3
 800e758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d302      	bcc.n	800e764 <UART_WaitOnFlagUntilTimeout+0x32>
 800e75e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e760:	2b00      	cmp	r3, #0
 800e762:	d140      	bne.n	800e7e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e76c:	e853 3f00 	ldrex	r3, [r3]
 800e770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e778:	667b      	str	r3, [r7, #100]	; 0x64
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	461a      	mov	r2, r3
 800e780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e782:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e784:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e78a:	e841 2300 	strex	r3, r2, [r1]
 800e78e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e792:	2b00      	cmp	r3, #0
 800e794:	d1e6      	bne.n	800e764 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	3308      	adds	r3, #8
 800e79c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a0:	e853 3f00 	ldrex	r3, [r3]
 800e7a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a8:	f023 0301 	bic.w	r3, r3, #1
 800e7ac:	663b      	str	r3, [r7, #96]	; 0x60
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3308      	adds	r3, #8
 800e7b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7b6:	64ba      	str	r2, [r7, #72]	; 0x48
 800e7b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7be:	e841 2300 	strex	r3, r2, [r1]
 800e7c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e7c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1e5      	bne.n	800e796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2220      	movs	r2, #32
 800e7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2220      	movs	r2, #32
 800e7d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	e069      	b.n	800e8ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f003 0304 	and.w	r3, r3, #4
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d051      	beq.n	800e898 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	69db      	ldr	r3, [r3, #28]
 800e7fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e802:	d149      	bne.n	800e898 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e80c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	e853 3f00 	ldrex	r3, [r3]
 800e81a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e822:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	461a      	mov	r2, r3
 800e82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e82c:	637b      	str	r3, [r7, #52]	; 0x34
 800e82e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e834:	e841 2300 	strex	r3, r2, [r1]
 800e838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d1e6      	bne.n	800e80e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3308      	adds	r3, #8
 800e846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	e853 3f00 	ldrex	r3, [r3]
 800e84e:	613b      	str	r3, [r7, #16]
   return(result);
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	f023 0301 	bic.w	r3, r3, #1
 800e856:	66bb      	str	r3, [r7, #104]	; 0x68
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	3308      	adds	r3, #8
 800e85e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e860:	623a      	str	r2, [r7, #32]
 800e862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e864:	69f9      	ldr	r1, [r7, #28]
 800e866:	6a3a      	ldr	r2, [r7, #32]
 800e868:	e841 2300 	strex	r3, r2, [r1]
 800e86c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d1e5      	bne.n	800e840 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2220      	movs	r2, #32
 800e878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2220      	movs	r2, #32
 800e880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2220      	movs	r2, #32
 800e888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e894:	2303      	movs	r3, #3
 800e896:	e010      	b.n	800e8ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	69da      	ldr	r2, [r3, #28]
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	4013      	ands	r3, r2
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	bf0c      	ite	eq
 800e8a8:	2301      	moveq	r3, #1
 800e8aa:	2300      	movne	r3, #0
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	f43f af46 	beq.w	800e744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3770      	adds	r7, #112	; 0x70
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
	...

0800e8c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b096      	sub	sp, #88	; 0x58
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	68ba      	ldr	r2, [r7, #8]
 800e8d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	88fa      	ldrh	r2, [r7, #6]
 800e8dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2222      	movs	r2, #34	; 0x22
 800e8ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d02c      	beq.n	800e952 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8fc:	4a42      	ldr	r2, [pc, #264]	; (800ea08 <UART_Start_Receive_DMA+0x144>)
 800e8fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e904:	4a41      	ldr	r2, [pc, #260]	; (800ea0c <UART_Start_Receive_DMA+0x148>)
 800e906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e90c:	4a40      	ldr	r2, [pc, #256]	; (800ea10 <UART_Start_Receive_DMA+0x14c>)
 800e90e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e914:	2200      	movs	r2, #0
 800e916:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	3324      	adds	r3, #36	; 0x24
 800e922:	4619      	mov	r1, r3
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e928:	461a      	mov	r2, r3
 800e92a:	88fb      	ldrh	r3, [r7, #6]
 800e92c:	f7f6 fe20 	bl	8005570 <HAL_DMA_Start_IT>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00d      	beq.n	800e952 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2210      	movs	r2, #16
 800e93a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2220      	movs	r2, #32
 800e94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	e055      	b.n	800e9fe <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	691b      	ldr	r3, [r3, #16]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d018      	beq.n	800e994 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96a:	e853 3f00 	ldrex	r3, [r3]
 800e96e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e976:	657b      	str	r3, [r7, #84]	; 0x54
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	461a      	mov	r2, r3
 800e97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e980:	64bb      	str	r3, [r7, #72]	; 0x48
 800e982:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e984:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e988:	e841 2300 	strex	r3, r2, [r1]
 800e98c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1e6      	bne.n	800e962 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3308      	adds	r3, #8
 800e99a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99e:	e853 3f00 	ldrex	r3, [r3]
 800e9a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	f043 0301 	orr.w	r3, r3, #1
 800e9aa:	653b      	str	r3, [r7, #80]	; 0x50
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	3308      	adds	r3, #8
 800e9b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9b4:	637a      	str	r2, [r7, #52]	; 0x34
 800e9b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9bc:	e841 2300 	strex	r3, r2, [r1]
 800e9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d1e5      	bne.n	800e994 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	3308      	adds	r3, #8
 800e9ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	e853 3f00 	ldrex	r3, [r3]
 800e9d6:	613b      	str	r3, [r7, #16]
   return(result);
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3308      	adds	r3, #8
 800e9e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9e8:	623a      	str	r2, [r7, #32]
 800e9ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ec:	69f9      	ldr	r1, [r7, #28]
 800e9ee:	6a3a      	ldr	r2, [r7, #32]
 800e9f0:	e841 2300 	strex	r3, r2, [r1]
 800e9f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1e5      	bne.n	800e9c8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e9fc:	2300      	movs	r3, #0
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3758      	adds	r7, #88	; 0x58
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	0800eb65 	.word	0x0800eb65
 800ea0c:	0800ec87 	.word	0x0800ec87
 800ea10:	0800ecbf 	.word	0x0800ecbf

0800ea14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b08f      	sub	sp, #60	; 0x3c
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea22:	6a3b      	ldr	r3, [r7, #32]
 800ea24:	e853 3f00 	ldrex	r3, [r3]
 800ea28:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ea30:	637b      	str	r3, [r7, #52]	; 0x34
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea3c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea42:	e841 2300 	strex	r3, r2, [r1]
 800ea46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e6      	bne.n	800ea1c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	3308      	adds	r3, #8
 800ea54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	e853 3f00 	ldrex	r3, [r3]
 800ea5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ea64:	633b      	str	r3, [r7, #48]	; 0x30
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	3308      	adds	r3, #8
 800ea6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea6e:	61ba      	str	r2, [r7, #24]
 800ea70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea72:	6979      	ldr	r1, [r7, #20]
 800ea74:	69ba      	ldr	r2, [r7, #24]
 800ea76:	e841 2300 	strex	r3, r2, [r1]
 800ea7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1e5      	bne.n	800ea4e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2220      	movs	r2, #32
 800ea86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ea8a:	bf00      	nop
 800ea8c:	373c      	adds	r7, #60	; 0x3c
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
	...

0800ea98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b095      	sub	sp, #84	; 0x54
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaa8:	e853 3f00 	ldrex	r3, [r3]
 800eaac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	461a      	mov	r2, r3
 800eabc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eabe:	643b      	str	r3, [r7, #64]	; 0x40
 800eac0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eac6:	e841 2300 	strex	r3, r2, [r1]
 800eaca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d1e6      	bne.n	800eaa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	3308      	adds	r3, #8
 800ead8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	e853 3f00 	ldrex	r3, [r3]
 800eae0:	61fb      	str	r3, [r7, #28]
   return(result);
 800eae2:	69fa      	ldr	r2, [r7, #28]
 800eae4:	4b1e      	ldr	r3, [pc, #120]	; (800eb60 <UART_EndRxTransfer+0xc8>)
 800eae6:	4013      	ands	r3, r2
 800eae8:	64bb      	str	r3, [r7, #72]	; 0x48
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	3308      	adds	r3, #8
 800eaf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eaf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eaf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eafa:	e841 2300 	strex	r3, r2, [r1]
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1e5      	bne.n	800ead2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d118      	bne.n	800eb40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	e853 3f00 	ldrex	r3, [r3]
 800eb1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	f023 0310 	bic.w	r3, r3, #16
 800eb22:	647b      	str	r3, [r7, #68]	; 0x44
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	461a      	mov	r2, r3
 800eb2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb2c:	61bb      	str	r3, [r7, #24]
 800eb2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb30:	6979      	ldr	r1, [r7, #20]
 800eb32:	69ba      	ldr	r2, [r7, #24]
 800eb34:	e841 2300 	strex	r3, r2, [r1]
 800eb38:	613b      	str	r3, [r7, #16]
   return(result);
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d1e6      	bne.n	800eb0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2220      	movs	r2, #32
 800eb44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	671a      	str	r2, [r3, #112]	; 0x70
}
 800eb54:	bf00      	nop
 800eb56:	3754      	adds	r7, #84	; 0x54
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr
 800eb60:	effffffe 	.word	0xeffffffe

0800eb64 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b09c      	sub	sp, #112	; 0x70
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb70:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	69db      	ldr	r3, [r3, #28]
 800eb76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb7a:	d071      	beq.n	800ec60 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800eb7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb8c:	e853 3f00 	ldrex	r3, [r3]
 800eb90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eb92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb98:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	461a      	mov	r2, r3
 800eba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eba2:	65bb      	str	r3, [r7, #88]	; 0x58
 800eba4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebaa:	e841 2300 	strex	r3, r2, [r1]
 800ebae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ebb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1e6      	bne.n	800eb84 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	3308      	adds	r3, #8
 800ebbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc0:	e853 3f00 	ldrex	r3, [r3]
 800ebc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ebc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc8:	f023 0301 	bic.w	r3, r3, #1
 800ebcc:	667b      	str	r3, [r7, #100]	; 0x64
 800ebce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	3308      	adds	r3, #8
 800ebd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ebd6:	647a      	str	r2, [r7, #68]	; 0x44
 800ebd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ebdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebde:	e841 2300 	strex	r3, r2, [r1]
 800ebe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ebe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1e5      	bne.n	800ebb6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ebea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	3308      	adds	r3, #8
 800ebf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	e853 3f00 	ldrex	r3, [r3]
 800ebf8:	623b      	str	r3, [r7, #32]
   return(result);
 800ebfa:	6a3b      	ldr	r3, [r7, #32]
 800ebfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec00:	663b      	str	r3, [r7, #96]	; 0x60
 800ec02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	3308      	adds	r3, #8
 800ec08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec0a:	633a      	str	r2, [r7, #48]	; 0x30
 800ec0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec12:	e841 2300 	strex	r3, r2, [r1]
 800ec16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1e5      	bne.n	800ebea <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ec1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec20:	2220      	movs	r2, #32
 800ec22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d118      	bne.n	800ec60 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	e853 3f00 	ldrex	r3, [r3]
 800ec3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f023 0310 	bic.w	r3, r3, #16
 800ec42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	461a      	mov	r2, r3
 800ec4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec4c:	61fb      	str	r3, [r7, #28]
 800ec4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec50:	69b9      	ldr	r1, [r7, #24]
 800ec52:	69fa      	ldr	r2, [r7, #28]
 800ec54:	e841 2300 	strex	r3, r2, [r1]
 800ec58:	617b      	str	r3, [r7, #20]
   return(result);
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1e6      	bne.n	800ec2e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d107      	bne.n	800ec78 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ec72:	f7fe fefd 	bl	800da70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec76:	e002      	b.n	800ec7e <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ec78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ec7a:	f7f4 fce1 	bl	8003640 <HAL_UART_RxCpltCallback>
}
 800ec7e:	bf00      	nop
 800ec80:	3770      	adds	r7, #112	; 0x70
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b084      	sub	sp, #16
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec92:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d109      	bne.n	800ecb0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eca2:	085b      	lsrs	r3, r3, #1
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	4619      	mov	r1, r3
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f7fe fee1 	bl	800da70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ecae:	e002      	b.n	800ecb6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7fe fec9 	bl	800da48 <HAL_UART_RxHalfCpltCallback>
}
 800ecb6:	bf00      	nop
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b086      	sub	sp, #24
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecd2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ece6:	2b80      	cmp	r3, #128	; 0x80
 800ece8:	d109      	bne.n	800ecfe <UART_DMAError+0x40>
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	2b21      	cmp	r3, #33	; 0x21
 800ecee:	d106      	bne.n	800ecfe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ecf8:	6978      	ldr	r0, [r7, #20]
 800ecfa:	f7ff fe8b 	bl	800ea14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed08:	2b40      	cmp	r3, #64	; 0x40
 800ed0a:	d109      	bne.n	800ed20 <UART_DMAError+0x62>
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2b22      	cmp	r3, #34	; 0x22
 800ed10:	d106      	bne.n	800ed20 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ed1a:	6978      	ldr	r0, [r7, #20]
 800ed1c:	f7ff febc 	bl	800ea98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed26:	f043 0210 	orr.w	r2, r3, #16
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed30:	6978      	ldr	r0, [r7, #20]
 800ed32:	f7fe fe93 	bl	800da5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed36:	bf00      	nop
 800ed38:	3718      	adds	r7, #24
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b084      	sub	sp, #16
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7fe fe7d 	bl	800da5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed62:	bf00      	nop
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ed6a:	b480      	push	{r7}
 800ed6c:	b08f      	sub	sp, #60	; 0x3c
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed78:	2b21      	cmp	r3, #33	; 0x21
 800ed7a:	d14c      	bne.n	800ee16 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d132      	bne.n	800edee <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	e853 3f00 	ldrex	r3, [r3]
 800ed94:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	461a      	mov	r2, r3
 800eda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eda6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eda8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edae:	e841 2300 	strex	r3, r2, [r1]
 800edb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800edb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1e6      	bne.n	800ed88 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	e853 3f00 	ldrex	r3, [r3]
 800edc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edce:	633b      	str	r3, [r7, #48]	; 0x30
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	461a      	mov	r2, r3
 800edd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd8:	61bb      	str	r3, [r7, #24]
 800edda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eddc:	6979      	ldr	r1, [r7, #20]
 800edde:	69ba      	ldr	r2, [r7, #24]
 800ede0:	e841 2300 	strex	r3, r2, [r1]
 800ede4:	613b      	str	r3, [r7, #16]
   return(result);
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d1e6      	bne.n	800edba <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800edec:	e013      	b.n	800ee16 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edf2:	781a      	ldrb	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edfe:	1c5a      	adds	r2, r3, #1
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ee16:	bf00      	nop
 800ee18:	373c      	adds	r7, #60	; 0x3c
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ee22:	b480      	push	{r7}
 800ee24:	b091      	sub	sp, #68	; 0x44
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee30:	2b21      	cmp	r3, #33	; 0x21
 800ee32:	d151      	bne.n	800eed8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d132      	bne.n	800eea6 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee48:	e853 3f00 	ldrex	r3, [r3]
 800ee4c:	623b      	str	r3, [r7, #32]
   return(result);
 800ee4e:	6a3b      	ldr	r3, [r7, #32]
 800ee50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee54:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5e:	633b      	str	r3, [r7, #48]	; 0x30
 800ee60:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee66:	e841 2300 	strex	r3, r2, [r1]
 800ee6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d1e6      	bne.n	800ee40 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	e853 3f00 	ldrex	r3, [r3]
 800ee7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee86:	637b      	str	r3, [r7, #52]	; 0x34
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee90:	61fb      	str	r3, [r7, #28]
 800ee92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee94:	69b9      	ldr	r1, [r7, #24]
 800ee96:	69fa      	ldr	r2, [r7, #28]
 800ee98:	e841 2300 	strex	r3, r2, [r1]
 800ee9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1e6      	bne.n	800ee72 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800eea4:	e018      	b.n	800eed8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800eeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeae:	881b      	ldrh	r3, [r3, #0]
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eeba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eec0:	1c9a      	adds	r2, r3, #2
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eecc:	b29b      	uxth	r3, r3
 800eece:	3b01      	subs	r3, #1
 800eed0:	b29a      	uxth	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800eed8:	bf00      	nop
 800eeda:	3744      	adds	r7, #68	; 0x44
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b091      	sub	sp, #68	; 0x44
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eef2:	2b21      	cmp	r3, #33	; 0x21
 800eef4:	d160      	bne.n	800efb8 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eefc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800eefe:	e057      	b.n	800efb0 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d133      	bne.n	800ef74 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	3308      	adds	r3, #8
 800ef12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef16:	e853 3f00 	ldrex	r3, [r3]
 800ef1a:	623b      	str	r3, [r7, #32]
   return(result);
 800ef1c:	6a3b      	ldr	r3, [r7, #32]
 800ef1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ef22:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	3308      	adds	r3, #8
 800ef2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef2c:	633a      	str	r2, [r7, #48]	; 0x30
 800ef2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef34:	e841 2300 	strex	r3, r2, [r1]
 800ef38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d1e5      	bne.n	800ef0c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	e853 3f00 	ldrex	r3, [r3]
 800ef4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef54:	637b      	str	r3, [r7, #52]	; 0x34
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef5e:	61fb      	str	r3, [r7, #28]
 800ef60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef62:	69b9      	ldr	r1, [r7, #24]
 800ef64:	69fa      	ldr	r2, [r7, #28]
 800ef66:	e841 2300 	strex	r3, r2, [r1]
 800ef6a:	617b      	str	r3, [r7, #20]
   return(result);
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d1e6      	bne.n	800ef40 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ef72:	e021      	b.n	800efb8 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	69db      	ldr	r3, [r3, #28]
 800ef7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d013      	beq.n	800efaa <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef86:	781a      	ldrb	r2, [r3, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef92:	1c5a      	adds	r2, r3, #1
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	3b01      	subs	r3, #1
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800efaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efac:	3b01      	subs	r3, #1
 800efae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800efb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d1a4      	bne.n	800ef00 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800efb6:	e7ff      	b.n	800efb8 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800efb8:	bf00      	nop
 800efba:	3744      	adds	r7, #68	; 0x44
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b091      	sub	sp, #68	; 0x44
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efd2:	2b21      	cmp	r3, #33	; 0x21
 800efd4:	d165      	bne.n	800f0a2 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800efde:	e05c      	b.n	800f09a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d133      	bne.n	800f054 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3308      	adds	r3, #8
 800eff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	e853 3f00 	ldrex	r3, [r3]
 800effa:	61fb      	str	r3, [r7, #28]
   return(result);
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f002:	637b      	str	r3, [r7, #52]	; 0x34
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	3308      	adds	r3, #8
 800f00a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f00c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f00e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f014:	e841 2300 	strex	r3, r2, [r1]
 800f018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1e5      	bne.n	800efec <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	e853 3f00 	ldrex	r3, [r3]
 800f02c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f034:	633b      	str	r3, [r7, #48]	; 0x30
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	461a      	mov	r2, r3
 800f03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03e:	61bb      	str	r3, [r7, #24]
 800f040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f042:	6979      	ldr	r1, [r7, #20]
 800f044:	69ba      	ldr	r2, [r7, #24]
 800f046:	e841 2300 	strex	r3, r2, [r1]
 800f04a:	613b      	str	r3, [r7, #16]
   return(result);
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1e6      	bne.n	800f020 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f052:	e026      	b.n	800f0a2 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	69db      	ldr	r3, [r3, #28]
 800f05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d018      	beq.n	800f094 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f066:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06a:	881b      	ldrh	r3, [r3, #0]
 800f06c:	461a      	mov	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f076:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f07c:	1c9a      	adds	r2, r3, #2
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f088:	b29b      	uxth	r3, r3
 800f08a:	3b01      	subs	r3, #1
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f094:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f096:	3b01      	subs	r3, #1
 800f098:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f09a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d19f      	bne.n	800efe0 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f0a0:	e7ff      	b.n	800f0a2 <UART_TxISR_16BIT_FIFOEN+0xde>
 800f0a2:	bf00      	nop
 800f0a4:	3744      	adds	r7, #68	; 0x44
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr

0800f0ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f0ae:	b580      	push	{r7, lr}
 800f0b0:	b088      	sub	sp, #32
 800f0b2:	af00      	add	r7, sp, #0
 800f0b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	e853 3f00 	ldrex	r3, [r3]
 800f0c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0ca:	61fb      	str	r3, [r7, #28]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	61bb      	str	r3, [r7, #24]
 800f0d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d8:	6979      	ldr	r1, [r7, #20]
 800f0da:	69ba      	ldr	r2, [r7, #24]
 800f0dc:	e841 2300 	strex	r3, r2, [r1]
 800f0e0:	613b      	str	r3, [r7, #16]
   return(result);
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1e6      	bne.n	800f0b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2220      	movs	r2, #32
 800f0ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7fe fc9c 	bl	800da34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0fc:	bf00      	nop
 800f0fe:	3720      	adds	r7, #32
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f10c:	bf00      	nop
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f118:	b480      	push	{r7}
 800f11a:	b083      	sub	sp, #12
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f134:	bf00      	nop
 800f136:	370c      	adds	r7, #12
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f140:	b480      	push	{r7}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d101      	bne.n	800f156 <HAL_UARTEx_DisableFifoMode+0x16>
 800f152:	2302      	movs	r3, #2
 800f154:	e027      	b.n	800f1a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2201      	movs	r2, #1
 800f15a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2224      	movs	r2, #36	; 0x24
 800f162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f022 0201 	bic.w	r2, r2, #1
 800f17c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f184:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2220      	movs	r2, #32
 800f198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b084      	sub	sp, #16
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
 800f1ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d101      	bne.n	800f1ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f1c6:	2302      	movs	r3, #2
 800f1c8:	e02d      	b.n	800f226 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2224      	movs	r2, #36	; 0x24
 800f1d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f022 0201 	bic.w	r2, r2, #1
 800f1f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	683a      	ldr	r2, [r7, #0]
 800f202:	430a      	orrs	r2, r1
 800f204:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 f850 	bl	800f2ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2220      	movs	r2, #32
 800f218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b084      	sub	sp, #16
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
 800f236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d101      	bne.n	800f246 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f242:	2302      	movs	r3, #2
 800f244:	e02d      	b.n	800f2a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2201      	movs	r2, #1
 800f24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2224      	movs	r2, #36	; 0x24
 800f252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f022 0201 	bic.w	r2, r2, #1
 800f26c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	683a      	ldr	r2, [r7, #0]
 800f27e:	430a      	orrs	r2, r1
 800f280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 f812 	bl	800f2ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2220      	movs	r2, #32
 800f294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
	...

0800f2ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d108      	bne.n	800f2ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f2cc:	e031      	b.n	800f332 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f2ce:	2310      	movs	r3, #16
 800f2d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f2d2:	2310      	movs	r3, #16
 800f2d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	0e5b      	lsrs	r3, r3, #25
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	f003 0307 	and.w	r3, r3, #7
 800f2e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	689b      	ldr	r3, [r3, #8]
 800f2ec:	0f5b      	lsrs	r3, r3, #29
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	f003 0307 	and.w	r3, r3, #7
 800f2f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2f6:	7bbb      	ldrb	r3, [r7, #14]
 800f2f8:	7b3a      	ldrb	r2, [r7, #12]
 800f2fa:	4911      	ldr	r1, [pc, #68]	; (800f340 <UARTEx_SetNbDataToProcess+0x94>)
 800f2fc:	5c8a      	ldrb	r2, [r1, r2]
 800f2fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f302:	7b3a      	ldrb	r2, [r7, #12]
 800f304:	490f      	ldr	r1, [pc, #60]	; (800f344 <UARTEx_SetNbDataToProcess+0x98>)
 800f306:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f308:	fb93 f3f2 	sdiv	r3, r3, r2
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f314:	7bfb      	ldrb	r3, [r7, #15]
 800f316:	7b7a      	ldrb	r2, [r7, #13]
 800f318:	4909      	ldr	r1, [pc, #36]	; (800f340 <UARTEx_SetNbDataToProcess+0x94>)
 800f31a:	5c8a      	ldrb	r2, [r1, r2]
 800f31c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f320:	7b7a      	ldrb	r2, [r7, #13]
 800f322:	4908      	ldr	r1, [pc, #32]	; (800f344 <UARTEx_SetNbDataToProcess+0x98>)
 800f324:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f326:	fb93 f3f2 	sdiv	r3, r3, r2
 800f32a:	b29a      	uxth	r2, r3
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f332:	bf00      	nop
 800f334:	3714      	adds	r7, #20
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	0801162c 	.word	0x0801162c
 800f344:	08011634 	.word	0x08011634

0800f348 <atoi>:
 800f348:	220a      	movs	r2, #10
 800f34a:	2100      	movs	r1, #0
 800f34c:	f000 b8e2 	b.w	800f514 <strtol>

0800f350 <__errno>:
 800f350:	4b01      	ldr	r3, [pc, #4]	; (800f358 <__errno+0x8>)
 800f352:	6818      	ldr	r0, [r3, #0]
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	2400003c 	.word	0x2400003c

0800f35c <__libc_init_array>:
 800f35c:	b570      	push	{r4, r5, r6, lr}
 800f35e:	4d0d      	ldr	r5, [pc, #52]	; (800f394 <__libc_init_array+0x38>)
 800f360:	4c0d      	ldr	r4, [pc, #52]	; (800f398 <__libc_init_array+0x3c>)
 800f362:	1b64      	subs	r4, r4, r5
 800f364:	10a4      	asrs	r4, r4, #2
 800f366:	2600      	movs	r6, #0
 800f368:	42a6      	cmp	r6, r4
 800f36a:	d109      	bne.n	800f380 <__libc_init_array+0x24>
 800f36c:	4d0b      	ldr	r5, [pc, #44]	; (800f39c <__libc_init_array+0x40>)
 800f36e:	4c0c      	ldr	r4, [pc, #48]	; (800f3a0 <__libc_init_array+0x44>)
 800f370:	f002 f92c 	bl	80115cc <_init>
 800f374:	1b64      	subs	r4, r4, r5
 800f376:	10a4      	asrs	r4, r4, #2
 800f378:	2600      	movs	r6, #0
 800f37a:	42a6      	cmp	r6, r4
 800f37c:	d105      	bne.n	800f38a <__libc_init_array+0x2e>
 800f37e:	bd70      	pop	{r4, r5, r6, pc}
 800f380:	f855 3b04 	ldr.w	r3, [r5], #4
 800f384:	4798      	blx	r3
 800f386:	3601      	adds	r6, #1
 800f388:	e7ee      	b.n	800f368 <__libc_init_array+0xc>
 800f38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f38e:	4798      	blx	r3
 800f390:	3601      	adds	r6, #1
 800f392:	e7f2      	b.n	800f37a <__libc_init_array+0x1e>
 800f394:	08013478 	.word	0x08013478
 800f398:	08013478 	.word	0x08013478
 800f39c:	08013478 	.word	0x08013478
 800f3a0:	0801347c 	.word	0x0801347c

0800f3a4 <memcpy>:
 800f3a4:	440a      	add	r2, r1
 800f3a6:	4291      	cmp	r1, r2
 800f3a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f3ac:	d100      	bne.n	800f3b0 <memcpy+0xc>
 800f3ae:	4770      	bx	lr
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3ba:	4291      	cmp	r1, r2
 800f3bc:	d1f9      	bne.n	800f3b2 <memcpy+0xe>
 800f3be:	bd10      	pop	{r4, pc}

0800f3c0 <memset>:
 800f3c0:	4402      	add	r2, r0
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d100      	bne.n	800f3ca <memset+0xa>
 800f3c8:	4770      	bx	lr
 800f3ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ce:	e7f9      	b.n	800f3c4 <memset+0x4>

0800f3d0 <siprintf>:
 800f3d0:	b40e      	push	{r1, r2, r3}
 800f3d2:	b500      	push	{lr}
 800f3d4:	b09c      	sub	sp, #112	; 0x70
 800f3d6:	ab1d      	add	r3, sp, #116	; 0x74
 800f3d8:	9002      	str	r0, [sp, #8]
 800f3da:	9006      	str	r0, [sp, #24]
 800f3dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3e0:	4809      	ldr	r0, [pc, #36]	; (800f408 <siprintf+0x38>)
 800f3e2:	9107      	str	r1, [sp, #28]
 800f3e4:	9104      	str	r1, [sp, #16]
 800f3e6:	4909      	ldr	r1, [pc, #36]	; (800f40c <siprintf+0x3c>)
 800f3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ec:	9105      	str	r1, [sp, #20]
 800f3ee:	6800      	ldr	r0, [r0, #0]
 800f3f0:	9301      	str	r3, [sp, #4]
 800f3f2:	a902      	add	r1, sp, #8
 800f3f4:	f000 f8f4 	bl	800f5e0 <_svfiprintf_r>
 800f3f8:	9b02      	ldr	r3, [sp, #8]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	701a      	strb	r2, [r3, #0]
 800f3fe:	b01c      	add	sp, #112	; 0x70
 800f400:	f85d eb04 	ldr.w	lr, [sp], #4
 800f404:	b003      	add	sp, #12
 800f406:	4770      	bx	lr
 800f408:	2400003c 	.word	0x2400003c
 800f40c:	ffff0208 	.word	0xffff0208

0800f410 <_strtol_l.constprop.0>:
 800f410:	2b01      	cmp	r3, #1
 800f412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f416:	d001      	beq.n	800f41c <_strtol_l.constprop.0+0xc>
 800f418:	2b24      	cmp	r3, #36	; 0x24
 800f41a:	d906      	bls.n	800f42a <_strtol_l.constprop.0+0x1a>
 800f41c:	f7ff ff98 	bl	800f350 <__errno>
 800f420:	2316      	movs	r3, #22
 800f422:	6003      	str	r3, [r0, #0]
 800f424:	2000      	movs	r0, #0
 800f426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f42a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f510 <_strtol_l.constprop.0+0x100>
 800f42e:	460d      	mov	r5, r1
 800f430:	462e      	mov	r6, r5
 800f432:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f436:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f43a:	f017 0708 	ands.w	r7, r7, #8
 800f43e:	d1f7      	bne.n	800f430 <_strtol_l.constprop.0+0x20>
 800f440:	2c2d      	cmp	r4, #45	; 0x2d
 800f442:	d132      	bne.n	800f4aa <_strtol_l.constprop.0+0x9a>
 800f444:	782c      	ldrb	r4, [r5, #0]
 800f446:	2701      	movs	r7, #1
 800f448:	1cb5      	adds	r5, r6, #2
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d05b      	beq.n	800f506 <_strtol_l.constprop.0+0xf6>
 800f44e:	2b10      	cmp	r3, #16
 800f450:	d109      	bne.n	800f466 <_strtol_l.constprop.0+0x56>
 800f452:	2c30      	cmp	r4, #48	; 0x30
 800f454:	d107      	bne.n	800f466 <_strtol_l.constprop.0+0x56>
 800f456:	782c      	ldrb	r4, [r5, #0]
 800f458:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f45c:	2c58      	cmp	r4, #88	; 0x58
 800f45e:	d14d      	bne.n	800f4fc <_strtol_l.constprop.0+0xec>
 800f460:	786c      	ldrb	r4, [r5, #1]
 800f462:	2310      	movs	r3, #16
 800f464:	3502      	adds	r5, #2
 800f466:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f46a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f46e:	f04f 0c00 	mov.w	ip, #0
 800f472:	fbb8 f9f3 	udiv	r9, r8, r3
 800f476:	4666      	mov	r6, ip
 800f478:	fb03 8a19 	mls	sl, r3, r9, r8
 800f47c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f480:	f1be 0f09 	cmp.w	lr, #9
 800f484:	d816      	bhi.n	800f4b4 <_strtol_l.constprop.0+0xa4>
 800f486:	4674      	mov	r4, lr
 800f488:	42a3      	cmp	r3, r4
 800f48a:	dd24      	ble.n	800f4d6 <_strtol_l.constprop.0+0xc6>
 800f48c:	f1bc 0f00 	cmp.w	ip, #0
 800f490:	db1e      	blt.n	800f4d0 <_strtol_l.constprop.0+0xc0>
 800f492:	45b1      	cmp	r9, r6
 800f494:	d31c      	bcc.n	800f4d0 <_strtol_l.constprop.0+0xc0>
 800f496:	d101      	bne.n	800f49c <_strtol_l.constprop.0+0x8c>
 800f498:	45a2      	cmp	sl, r4
 800f49a:	db19      	blt.n	800f4d0 <_strtol_l.constprop.0+0xc0>
 800f49c:	fb06 4603 	mla	r6, r6, r3, r4
 800f4a0:	f04f 0c01 	mov.w	ip, #1
 800f4a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4a8:	e7e8      	b.n	800f47c <_strtol_l.constprop.0+0x6c>
 800f4aa:	2c2b      	cmp	r4, #43	; 0x2b
 800f4ac:	bf04      	itt	eq
 800f4ae:	782c      	ldrbeq	r4, [r5, #0]
 800f4b0:	1cb5      	addeq	r5, r6, #2
 800f4b2:	e7ca      	b.n	800f44a <_strtol_l.constprop.0+0x3a>
 800f4b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f4b8:	f1be 0f19 	cmp.w	lr, #25
 800f4bc:	d801      	bhi.n	800f4c2 <_strtol_l.constprop.0+0xb2>
 800f4be:	3c37      	subs	r4, #55	; 0x37
 800f4c0:	e7e2      	b.n	800f488 <_strtol_l.constprop.0+0x78>
 800f4c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f4c6:	f1be 0f19 	cmp.w	lr, #25
 800f4ca:	d804      	bhi.n	800f4d6 <_strtol_l.constprop.0+0xc6>
 800f4cc:	3c57      	subs	r4, #87	; 0x57
 800f4ce:	e7db      	b.n	800f488 <_strtol_l.constprop.0+0x78>
 800f4d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f4d4:	e7e6      	b.n	800f4a4 <_strtol_l.constprop.0+0x94>
 800f4d6:	f1bc 0f00 	cmp.w	ip, #0
 800f4da:	da05      	bge.n	800f4e8 <_strtol_l.constprop.0+0xd8>
 800f4dc:	2322      	movs	r3, #34	; 0x22
 800f4de:	6003      	str	r3, [r0, #0]
 800f4e0:	4646      	mov	r6, r8
 800f4e2:	b942      	cbnz	r2, 800f4f6 <_strtol_l.constprop.0+0xe6>
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	e79e      	b.n	800f426 <_strtol_l.constprop.0+0x16>
 800f4e8:	b107      	cbz	r7, 800f4ec <_strtol_l.constprop.0+0xdc>
 800f4ea:	4276      	negs	r6, r6
 800f4ec:	2a00      	cmp	r2, #0
 800f4ee:	d0f9      	beq.n	800f4e4 <_strtol_l.constprop.0+0xd4>
 800f4f0:	f1bc 0f00 	cmp.w	ip, #0
 800f4f4:	d000      	beq.n	800f4f8 <_strtol_l.constprop.0+0xe8>
 800f4f6:	1e69      	subs	r1, r5, #1
 800f4f8:	6011      	str	r1, [r2, #0]
 800f4fa:	e7f3      	b.n	800f4e4 <_strtol_l.constprop.0+0xd4>
 800f4fc:	2430      	movs	r4, #48	; 0x30
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1b1      	bne.n	800f466 <_strtol_l.constprop.0+0x56>
 800f502:	2308      	movs	r3, #8
 800f504:	e7af      	b.n	800f466 <_strtol_l.constprop.0+0x56>
 800f506:	2c30      	cmp	r4, #48	; 0x30
 800f508:	d0a5      	beq.n	800f456 <_strtol_l.constprop.0+0x46>
 800f50a:	230a      	movs	r3, #10
 800f50c:	e7ab      	b.n	800f466 <_strtol_l.constprop.0+0x56>
 800f50e:	bf00      	nop
 800f510:	0801163d 	.word	0x0801163d

0800f514 <strtol>:
 800f514:	4613      	mov	r3, r2
 800f516:	460a      	mov	r2, r1
 800f518:	4601      	mov	r1, r0
 800f51a:	4802      	ldr	r0, [pc, #8]	; (800f524 <strtol+0x10>)
 800f51c:	6800      	ldr	r0, [r0, #0]
 800f51e:	f7ff bf77 	b.w	800f410 <_strtol_l.constprop.0>
 800f522:	bf00      	nop
 800f524:	2400003c 	.word	0x2400003c

0800f528 <__ssputs_r>:
 800f528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f52c:	688e      	ldr	r6, [r1, #8]
 800f52e:	429e      	cmp	r6, r3
 800f530:	4682      	mov	sl, r0
 800f532:	460c      	mov	r4, r1
 800f534:	4690      	mov	r8, r2
 800f536:	461f      	mov	r7, r3
 800f538:	d838      	bhi.n	800f5ac <__ssputs_r+0x84>
 800f53a:	898a      	ldrh	r2, [r1, #12]
 800f53c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f540:	d032      	beq.n	800f5a8 <__ssputs_r+0x80>
 800f542:	6825      	ldr	r5, [r4, #0]
 800f544:	6909      	ldr	r1, [r1, #16]
 800f546:	eba5 0901 	sub.w	r9, r5, r1
 800f54a:	6965      	ldr	r5, [r4, #20]
 800f54c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f554:	3301      	adds	r3, #1
 800f556:	444b      	add	r3, r9
 800f558:	106d      	asrs	r5, r5, #1
 800f55a:	429d      	cmp	r5, r3
 800f55c:	bf38      	it	cc
 800f55e:	461d      	movcc	r5, r3
 800f560:	0553      	lsls	r3, r2, #21
 800f562:	d531      	bpl.n	800f5c8 <__ssputs_r+0xa0>
 800f564:	4629      	mov	r1, r5
 800f566:	f000 fb55 	bl	800fc14 <_malloc_r>
 800f56a:	4606      	mov	r6, r0
 800f56c:	b950      	cbnz	r0, 800f584 <__ssputs_r+0x5c>
 800f56e:	230c      	movs	r3, #12
 800f570:	f8ca 3000 	str.w	r3, [sl]
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f57a:	81a3      	strh	r3, [r4, #12]
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f584:	6921      	ldr	r1, [r4, #16]
 800f586:	464a      	mov	r2, r9
 800f588:	f7ff ff0c 	bl	800f3a4 <memcpy>
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f596:	81a3      	strh	r3, [r4, #12]
 800f598:	6126      	str	r6, [r4, #16]
 800f59a:	6165      	str	r5, [r4, #20]
 800f59c:	444e      	add	r6, r9
 800f59e:	eba5 0509 	sub.w	r5, r5, r9
 800f5a2:	6026      	str	r6, [r4, #0]
 800f5a4:	60a5      	str	r5, [r4, #8]
 800f5a6:	463e      	mov	r6, r7
 800f5a8:	42be      	cmp	r6, r7
 800f5aa:	d900      	bls.n	800f5ae <__ssputs_r+0x86>
 800f5ac:	463e      	mov	r6, r7
 800f5ae:	6820      	ldr	r0, [r4, #0]
 800f5b0:	4632      	mov	r2, r6
 800f5b2:	4641      	mov	r1, r8
 800f5b4:	f000 faa8 	bl	800fb08 <memmove>
 800f5b8:	68a3      	ldr	r3, [r4, #8]
 800f5ba:	1b9b      	subs	r3, r3, r6
 800f5bc:	60a3      	str	r3, [r4, #8]
 800f5be:	6823      	ldr	r3, [r4, #0]
 800f5c0:	4433      	add	r3, r6
 800f5c2:	6023      	str	r3, [r4, #0]
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e7db      	b.n	800f580 <__ssputs_r+0x58>
 800f5c8:	462a      	mov	r2, r5
 800f5ca:	f000 fb97 	bl	800fcfc <_realloc_r>
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d1e1      	bne.n	800f598 <__ssputs_r+0x70>
 800f5d4:	6921      	ldr	r1, [r4, #16]
 800f5d6:	4650      	mov	r0, sl
 800f5d8:	f000 fab0 	bl	800fb3c <_free_r>
 800f5dc:	e7c7      	b.n	800f56e <__ssputs_r+0x46>
	...

0800f5e0 <_svfiprintf_r>:
 800f5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e4:	4698      	mov	r8, r3
 800f5e6:	898b      	ldrh	r3, [r1, #12]
 800f5e8:	061b      	lsls	r3, r3, #24
 800f5ea:	b09d      	sub	sp, #116	; 0x74
 800f5ec:	4607      	mov	r7, r0
 800f5ee:	460d      	mov	r5, r1
 800f5f0:	4614      	mov	r4, r2
 800f5f2:	d50e      	bpl.n	800f612 <_svfiprintf_r+0x32>
 800f5f4:	690b      	ldr	r3, [r1, #16]
 800f5f6:	b963      	cbnz	r3, 800f612 <_svfiprintf_r+0x32>
 800f5f8:	2140      	movs	r1, #64	; 0x40
 800f5fa:	f000 fb0b 	bl	800fc14 <_malloc_r>
 800f5fe:	6028      	str	r0, [r5, #0]
 800f600:	6128      	str	r0, [r5, #16]
 800f602:	b920      	cbnz	r0, 800f60e <_svfiprintf_r+0x2e>
 800f604:	230c      	movs	r3, #12
 800f606:	603b      	str	r3, [r7, #0]
 800f608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f60c:	e0d1      	b.n	800f7b2 <_svfiprintf_r+0x1d2>
 800f60e:	2340      	movs	r3, #64	; 0x40
 800f610:	616b      	str	r3, [r5, #20]
 800f612:	2300      	movs	r3, #0
 800f614:	9309      	str	r3, [sp, #36]	; 0x24
 800f616:	2320      	movs	r3, #32
 800f618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f61c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f620:	2330      	movs	r3, #48	; 0x30
 800f622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f7cc <_svfiprintf_r+0x1ec>
 800f626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f62a:	f04f 0901 	mov.w	r9, #1
 800f62e:	4623      	mov	r3, r4
 800f630:	469a      	mov	sl, r3
 800f632:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f636:	b10a      	cbz	r2, 800f63c <_svfiprintf_r+0x5c>
 800f638:	2a25      	cmp	r2, #37	; 0x25
 800f63a:	d1f9      	bne.n	800f630 <_svfiprintf_r+0x50>
 800f63c:	ebba 0b04 	subs.w	fp, sl, r4
 800f640:	d00b      	beq.n	800f65a <_svfiprintf_r+0x7a>
 800f642:	465b      	mov	r3, fp
 800f644:	4622      	mov	r2, r4
 800f646:	4629      	mov	r1, r5
 800f648:	4638      	mov	r0, r7
 800f64a:	f7ff ff6d 	bl	800f528 <__ssputs_r>
 800f64e:	3001      	adds	r0, #1
 800f650:	f000 80aa 	beq.w	800f7a8 <_svfiprintf_r+0x1c8>
 800f654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f656:	445a      	add	r2, fp
 800f658:	9209      	str	r2, [sp, #36]	; 0x24
 800f65a:	f89a 3000 	ldrb.w	r3, [sl]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	f000 80a2 	beq.w	800f7a8 <_svfiprintf_r+0x1c8>
 800f664:	2300      	movs	r3, #0
 800f666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f66a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f66e:	f10a 0a01 	add.w	sl, sl, #1
 800f672:	9304      	str	r3, [sp, #16]
 800f674:	9307      	str	r3, [sp, #28]
 800f676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f67a:	931a      	str	r3, [sp, #104]	; 0x68
 800f67c:	4654      	mov	r4, sl
 800f67e:	2205      	movs	r2, #5
 800f680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f684:	4851      	ldr	r0, [pc, #324]	; (800f7cc <_svfiprintf_r+0x1ec>)
 800f686:	f7f0 fe33 	bl	80002f0 <memchr>
 800f68a:	9a04      	ldr	r2, [sp, #16]
 800f68c:	b9d8      	cbnz	r0, 800f6c6 <_svfiprintf_r+0xe6>
 800f68e:	06d0      	lsls	r0, r2, #27
 800f690:	bf44      	itt	mi
 800f692:	2320      	movmi	r3, #32
 800f694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f698:	0711      	lsls	r1, r2, #28
 800f69a:	bf44      	itt	mi
 800f69c:	232b      	movmi	r3, #43	; 0x2b
 800f69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800f6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f6a8:	d015      	beq.n	800f6d6 <_svfiprintf_r+0xf6>
 800f6aa:	9a07      	ldr	r2, [sp, #28]
 800f6ac:	4654      	mov	r4, sl
 800f6ae:	2000      	movs	r0, #0
 800f6b0:	f04f 0c0a 	mov.w	ip, #10
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6ba:	3b30      	subs	r3, #48	; 0x30
 800f6bc:	2b09      	cmp	r3, #9
 800f6be:	d94e      	bls.n	800f75e <_svfiprintf_r+0x17e>
 800f6c0:	b1b0      	cbz	r0, 800f6f0 <_svfiprintf_r+0x110>
 800f6c2:	9207      	str	r2, [sp, #28]
 800f6c4:	e014      	b.n	800f6f0 <_svfiprintf_r+0x110>
 800f6c6:	eba0 0308 	sub.w	r3, r0, r8
 800f6ca:	fa09 f303 	lsl.w	r3, r9, r3
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	9304      	str	r3, [sp, #16]
 800f6d2:	46a2      	mov	sl, r4
 800f6d4:	e7d2      	b.n	800f67c <_svfiprintf_r+0x9c>
 800f6d6:	9b03      	ldr	r3, [sp, #12]
 800f6d8:	1d19      	adds	r1, r3, #4
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	9103      	str	r1, [sp, #12]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	bfbb      	ittet	lt
 800f6e2:	425b      	neglt	r3, r3
 800f6e4:	f042 0202 	orrlt.w	r2, r2, #2
 800f6e8:	9307      	strge	r3, [sp, #28]
 800f6ea:	9307      	strlt	r3, [sp, #28]
 800f6ec:	bfb8      	it	lt
 800f6ee:	9204      	strlt	r2, [sp, #16]
 800f6f0:	7823      	ldrb	r3, [r4, #0]
 800f6f2:	2b2e      	cmp	r3, #46	; 0x2e
 800f6f4:	d10c      	bne.n	800f710 <_svfiprintf_r+0x130>
 800f6f6:	7863      	ldrb	r3, [r4, #1]
 800f6f8:	2b2a      	cmp	r3, #42	; 0x2a
 800f6fa:	d135      	bne.n	800f768 <_svfiprintf_r+0x188>
 800f6fc:	9b03      	ldr	r3, [sp, #12]
 800f6fe:	1d1a      	adds	r2, r3, #4
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	9203      	str	r2, [sp, #12]
 800f704:	2b00      	cmp	r3, #0
 800f706:	bfb8      	it	lt
 800f708:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f70c:	3402      	adds	r4, #2
 800f70e:	9305      	str	r3, [sp, #20]
 800f710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f7dc <_svfiprintf_r+0x1fc>
 800f714:	7821      	ldrb	r1, [r4, #0]
 800f716:	2203      	movs	r2, #3
 800f718:	4650      	mov	r0, sl
 800f71a:	f7f0 fde9 	bl	80002f0 <memchr>
 800f71e:	b140      	cbz	r0, 800f732 <_svfiprintf_r+0x152>
 800f720:	2340      	movs	r3, #64	; 0x40
 800f722:	eba0 000a 	sub.w	r0, r0, sl
 800f726:	fa03 f000 	lsl.w	r0, r3, r0
 800f72a:	9b04      	ldr	r3, [sp, #16]
 800f72c:	4303      	orrs	r3, r0
 800f72e:	3401      	adds	r4, #1
 800f730:	9304      	str	r3, [sp, #16]
 800f732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f736:	4826      	ldr	r0, [pc, #152]	; (800f7d0 <_svfiprintf_r+0x1f0>)
 800f738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f73c:	2206      	movs	r2, #6
 800f73e:	f7f0 fdd7 	bl	80002f0 <memchr>
 800f742:	2800      	cmp	r0, #0
 800f744:	d038      	beq.n	800f7b8 <_svfiprintf_r+0x1d8>
 800f746:	4b23      	ldr	r3, [pc, #140]	; (800f7d4 <_svfiprintf_r+0x1f4>)
 800f748:	bb1b      	cbnz	r3, 800f792 <_svfiprintf_r+0x1b2>
 800f74a:	9b03      	ldr	r3, [sp, #12]
 800f74c:	3307      	adds	r3, #7
 800f74e:	f023 0307 	bic.w	r3, r3, #7
 800f752:	3308      	adds	r3, #8
 800f754:	9303      	str	r3, [sp, #12]
 800f756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f758:	4433      	add	r3, r6
 800f75a:	9309      	str	r3, [sp, #36]	; 0x24
 800f75c:	e767      	b.n	800f62e <_svfiprintf_r+0x4e>
 800f75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f762:	460c      	mov	r4, r1
 800f764:	2001      	movs	r0, #1
 800f766:	e7a5      	b.n	800f6b4 <_svfiprintf_r+0xd4>
 800f768:	2300      	movs	r3, #0
 800f76a:	3401      	adds	r4, #1
 800f76c:	9305      	str	r3, [sp, #20]
 800f76e:	4619      	mov	r1, r3
 800f770:	f04f 0c0a 	mov.w	ip, #10
 800f774:	4620      	mov	r0, r4
 800f776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f77a:	3a30      	subs	r2, #48	; 0x30
 800f77c:	2a09      	cmp	r2, #9
 800f77e:	d903      	bls.n	800f788 <_svfiprintf_r+0x1a8>
 800f780:	2b00      	cmp	r3, #0
 800f782:	d0c5      	beq.n	800f710 <_svfiprintf_r+0x130>
 800f784:	9105      	str	r1, [sp, #20]
 800f786:	e7c3      	b.n	800f710 <_svfiprintf_r+0x130>
 800f788:	fb0c 2101 	mla	r1, ip, r1, r2
 800f78c:	4604      	mov	r4, r0
 800f78e:	2301      	movs	r3, #1
 800f790:	e7f0      	b.n	800f774 <_svfiprintf_r+0x194>
 800f792:	ab03      	add	r3, sp, #12
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	462a      	mov	r2, r5
 800f798:	4b0f      	ldr	r3, [pc, #60]	; (800f7d8 <_svfiprintf_r+0x1f8>)
 800f79a:	a904      	add	r1, sp, #16
 800f79c:	4638      	mov	r0, r7
 800f79e:	f3af 8000 	nop.w
 800f7a2:	1c42      	adds	r2, r0, #1
 800f7a4:	4606      	mov	r6, r0
 800f7a6:	d1d6      	bne.n	800f756 <_svfiprintf_r+0x176>
 800f7a8:	89ab      	ldrh	r3, [r5, #12]
 800f7aa:	065b      	lsls	r3, r3, #25
 800f7ac:	f53f af2c 	bmi.w	800f608 <_svfiprintf_r+0x28>
 800f7b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7b2:	b01d      	add	sp, #116	; 0x74
 800f7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b8:	ab03      	add	r3, sp, #12
 800f7ba:	9300      	str	r3, [sp, #0]
 800f7bc:	462a      	mov	r2, r5
 800f7be:	4b06      	ldr	r3, [pc, #24]	; (800f7d8 <_svfiprintf_r+0x1f8>)
 800f7c0:	a904      	add	r1, sp, #16
 800f7c2:	4638      	mov	r0, r7
 800f7c4:	f000 f87a 	bl	800f8bc <_printf_i>
 800f7c8:	e7eb      	b.n	800f7a2 <_svfiprintf_r+0x1c2>
 800f7ca:	bf00      	nop
 800f7cc:	0801173d 	.word	0x0801173d
 800f7d0:	08011747 	.word	0x08011747
 800f7d4:	00000000 	.word	0x00000000
 800f7d8:	0800f529 	.word	0x0800f529
 800f7dc:	08011743 	.word	0x08011743

0800f7e0 <_printf_common>:
 800f7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7e4:	4616      	mov	r6, r2
 800f7e6:	4699      	mov	r9, r3
 800f7e8:	688a      	ldr	r2, [r1, #8]
 800f7ea:	690b      	ldr	r3, [r1, #16]
 800f7ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	bfb8      	it	lt
 800f7f4:	4613      	movlt	r3, r2
 800f7f6:	6033      	str	r3, [r6, #0]
 800f7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7fc:	4607      	mov	r7, r0
 800f7fe:	460c      	mov	r4, r1
 800f800:	b10a      	cbz	r2, 800f806 <_printf_common+0x26>
 800f802:	3301      	adds	r3, #1
 800f804:	6033      	str	r3, [r6, #0]
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	0699      	lsls	r1, r3, #26
 800f80a:	bf42      	ittt	mi
 800f80c:	6833      	ldrmi	r3, [r6, #0]
 800f80e:	3302      	addmi	r3, #2
 800f810:	6033      	strmi	r3, [r6, #0]
 800f812:	6825      	ldr	r5, [r4, #0]
 800f814:	f015 0506 	ands.w	r5, r5, #6
 800f818:	d106      	bne.n	800f828 <_printf_common+0x48>
 800f81a:	f104 0a19 	add.w	sl, r4, #25
 800f81e:	68e3      	ldr	r3, [r4, #12]
 800f820:	6832      	ldr	r2, [r6, #0]
 800f822:	1a9b      	subs	r3, r3, r2
 800f824:	42ab      	cmp	r3, r5
 800f826:	dc26      	bgt.n	800f876 <_printf_common+0x96>
 800f828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f82c:	1e13      	subs	r3, r2, #0
 800f82e:	6822      	ldr	r2, [r4, #0]
 800f830:	bf18      	it	ne
 800f832:	2301      	movne	r3, #1
 800f834:	0692      	lsls	r2, r2, #26
 800f836:	d42b      	bmi.n	800f890 <_printf_common+0xb0>
 800f838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f83c:	4649      	mov	r1, r9
 800f83e:	4638      	mov	r0, r7
 800f840:	47c0      	blx	r8
 800f842:	3001      	adds	r0, #1
 800f844:	d01e      	beq.n	800f884 <_printf_common+0xa4>
 800f846:	6823      	ldr	r3, [r4, #0]
 800f848:	68e5      	ldr	r5, [r4, #12]
 800f84a:	6832      	ldr	r2, [r6, #0]
 800f84c:	f003 0306 	and.w	r3, r3, #6
 800f850:	2b04      	cmp	r3, #4
 800f852:	bf08      	it	eq
 800f854:	1aad      	subeq	r5, r5, r2
 800f856:	68a3      	ldr	r3, [r4, #8]
 800f858:	6922      	ldr	r2, [r4, #16]
 800f85a:	bf0c      	ite	eq
 800f85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f860:	2500      	movne	r5, #0
 800f862:	4293      	cmp	r3, r2
 800f864:	bfc4      	itt	gt
 800f866:	1a9b      	subgt	r3, r3, r2
 800f868:	18ed      	addgt	r5, r5, r3
 800f86a:	2600      	movs	r6, #0
 800f86c:	341a      	adds	r4, #26
 800f86e:	42b5      	cmp	r5, r6
 800f870:	d11a      	bne.n	800f8a8 <_printf_common+0xc8>
 800f872:	2000      	movs	r0, #0
 800f874:	e008      	b.n	800f888 <_printf_common+0xa8>
 800f876:	2301      	movs	r3, #1
 800f878:	4652      	mov	r2, sl
 800f87a:	4649      	mov	r1, r9
 800f87c:	4638      	mov	r0, r7
 800f87e:	47c0      	blx	r8
 800f880:	3001      	adds	r0, #1
 800f882:	d103      	bne.n	800f88c <_printf_common+0xac>
 800f884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f88c:	3501      	adds	r5, #1
 800f88e:	e7c6      	b.n	800f81e <_printf_common+0x3e>
 800f890:	18e1      	adds	r1, r4, r3
 800f892:	1c5a      	adds	r2, r3, #1
 800f894:	2030      	movs	r0, #48	; 0x30
 800f896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f89a:	4422      	add	r2, r4
 800f89c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8a4:	3302      	adds	r3, #2
 800f8a6:	e7c7      	b.n	800f838 <_printf_common+0x58>
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	4622      	mov	r2, r4
 800f8ac:	4649      	mov	r1, r9
 800f8ae:	4638      	mov	r0, r7
 800f8b0:	47c0      	blx	r8
 800f8b2:	3001      	adds	r0, #1
 800f8b4:	d0e6      	beq.n	800f884 <_printf_common+0xa4>
 800f8b6:	3601      	adds	r6, #1
 800f8b8:	e7d9      	b.n	800f86e <_printf_common+0x8e>
	...

0800f8bc <_printf_i>:
 800f8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	7e0f      	ldrb	r7, [r1, #24]
 800f8c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f8c4:	2f78      	cmp	r7, #120	; 0x78
 800f8c6:	4691      	mov	r9, r2
 800f8c8:	4680      	mov	r8, r0
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	469a      	mov	sl, r3
 800f8ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f8d2:	d807      	bhi.n	800f8e4 <_printf_i+0x28>
 800f8d4:	2f62      	cmp	r7, #98	; 0x62
 800f8d6:	d80a      	bhi.n	800f8ee <_printf_i+0x32>
 800f8d8:	2f00      	cmp	r7, #0
 800f8da:	f000 80d8 	beq.w	800fa8e <_printf_i+0x1d2>
 800f8de:	2f58      	cmp	r7, #88	; 0x58
 800f8e0:	f000 80a3 	beq.w	800fa2a <_printf_i+0x16e>
 800f8e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f8ec:	e03a      	b.n	800f964 <_printf_i+0xa8>
 800f8ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f8f2:	2b15      	cmp	r3, #21
 800f8f4:	d8f6      	bhi.n	800f8e4 <_printf_i+0x28>
 800f8f6:	a101      	add	r1, pc, #4	; (adr r1, 800f8fc <_printf_i+0x40>)
 800f8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8fc:	0800f955 	.word	0x0800f955
 800f900:	0800f969 	.word	0x0800f969
 800f904:	0800f8e5 	.word	0x0800f8e5
 800f908:	0800f8e5 	.word	0x0800f8e5
 800f90c:	0800f8e5 	.word	0x0800f8e5
 800f910:	0800f8e5 	.word	0x0800f8e5
 800f914:	0800f969 	.word	0x0800f969
 800f918:	0800f8e5 	.word	0x0800f8e5
 800f91c:	0800f8e5 	.word	0x0800f8e5
 800f920:	0800f8e5 	.word	0x0800f8e5
 800f924:	0800f8e5 	.word	0x0800f8e5
 800f928:	0800fa75 	.word	0x0800fa75
 800f92c:	0800f999 	.word	0x0800f999
 800f930:	0800fa57 	.word	0x0800fa57
 800f934:	0800f8e5 	.word	0x0800f8e5
 800f938:	0800f8e5 	.word	0x0800f8e5
 800f93c:	0800fa97 	.word	0x0800fa97
 800f940:	0800f8e5 	.word	0x0800f8e5
 800f944:	0800f999 	.word	0x0800f999
 800f948:	0800f8e5 	.word	0x0800f8e5
 800f94c:	0800f8e5 	.word	0x0800f8e5
 800f950:	0800fa5f 	.word	0x0800fa5f
 800f954:	682b      	ldr	r3, [r5, #0]
 800f956:	1d1a      	adds	r2, r3, #4
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	602a      	str	r2, [r5, #0]
 800f95c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f964:	2301      	movs	r3, #1
 800f966:	e0a3      	b.n	800fab0 <_printf_i+0x1f4>
 800f968:	6820      	ldr	r0, [r4, #0]
 800f96a:	6829      	ldr	r1, [r5, #0]
 800f96c:	0606      	lsls	r6, r0, #24
 800f96e:	f101 0304 	add.w	r3, r1, #4
 800f972:	d50a      	bpl.n	800f98a <_printf_i+0xce>
 800f974:	680e      	ldr	r6, [r1, #0]
 800f976:	602b      	str	r3, [r5, #0]
 800f978:	2e00      	cmp	r6, #0
 800f97a:	da03      	bge.n	800f984 <_printf_i+0xc8>
 800f97c:	232d      	movs	r3, #45	; 0x2d
 800f97e:	4276      	negs	r6, r6
 800f980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f984:	485e      	ldr	r0, [pc, #376]	; (800fb00 <_printf_i+0x244>)
 800f986:	230a      	movs	r3, #10
 800f988:	e019      	b.n	800f9be <_printf_i+0x102>
 800f98a:	680e      	ldr	r6, [r1, #0]
 800f98c:	602b      	str	r3, [r5, #0]
 800f98e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f992:	bf18      	it	ne
 800f994:	b236      	sxthne	r6, r6
 800f996:	e7ef      	b.n	800f978 <_printf_i+0xbc>
 800f998:	682b      	ldr	r3, [r5, #0]
 800f99a:	6820      	ldr	r0, [r4, #0]
 800f99c:	1d19      	adds	r1, r3, #4
 800f99e:	6029      	str	r1, [r5, #0]
 800f9a0:	0601      	lsls	r1, r0, #24
 800f9a2:	d501      	bpl.n	800f9a8 <_printf_i+0xec>
 800f9a4:	681e      	ldr	r6, [r3, #0]
 800f9a6:	e002      	b.n	800f9ae <_printf_i+0xf2>
 800f9a8:	0646      	lsls	r6, r0, #25
 800f9aa:	d5fb      	bpl.n	800f9a4 <_printf_i+0xe8>
 800f9ac:	881e      	ldrh	r6, [r3, #0]
 800f9ae:	4854      	ldr	r0, [pc, #336]	; (800fb00 <_printf_i+0x244>)
 800f9b0:	2f6f      	cmp	r7, #111	; 0x6f
 800f9b2:	bf0c      	ite	eq
 800f9b4:	2308      	moveq	r3, #8
 800f9b6:	230a      	movne	r3, #10
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9be:	6865      	ldr	r5, [r4, #4]
 800f9c0:	60a5      	str	r5, [r4, #8]
 800f9c2:	2d00      	cmp	r5, #0
 800f9c4:	bfa2      	ittt	ge
 800f9c6:	6821      	ldrge	r1, [r4, #0]
 800f9c8:	f021 0104 	bicge.w	r1, r1, #4
 800f9cc:	6021      	strge	r1, [r4, #0]
 800f9ce:	b90e      	cbnz	r6, 800f9d4 <_printf_i+0x118>
 800f9d0:	2d00      	cmp	r5, #0
 800f9d2:	d04d      	beq.n	800fa70 <_printf_i+0x1b4>
 800f9d4:	4615      	mov	r5, r2
 800f9d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f9da:	fb03 6711 	mls	r7, r3, r1, r6
 800f9de:	5dc7      	ldrb	r7, [r0, r7]
 800f9e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f9e4:	4637      	mov	r7, r6
 800f9e6:	42bb      	cmp	r3, r7
 800f9e8:	460e      	mov	r6, r1
 800f9ea:	d9f4      	bls.n	800f9d6 <_printf_i+0x11a>
 800f9ec:	2b08      	cmp	r3, #8
 800f9ee:	d10b      	bne.n	800fa08 <_printf_i+0x14c>
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	07de      	lsls	r6, r3, #31
 800f9f4:	d508      	bpl.n	800fa08 <_printf_i+0x14c>
 800f9f6:	6923      	ldr	r3, [r4, #16]
 800f9f8:	6861      	ldr	r1, [r4, #4]
 800f9fa:	4299      	cmp	r1, r3
 800f9fc:	bfde      	ittt	le
 800f9fe:	2330      	movle	r3, #48	; 0x30
 800fa00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa04:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fa08:	1b52      	subs	r2, r2, r5
 800fa0a:	6122      	str	r2, [r4, #16]
 800fa0c:	f8cd a000 	str.w	sl, [sp]
 800fa10:	464b      	mov	r3, r9
 800fa12:	aa03      	add	r2, sp, #12
 800fa14:	4621      	mov	r1, r4
 800fa16:	4640      	mov	r0, r8
 800fa18:	f7ff fee2 	bl	800f7e0 <_printf_common>
 800fa1c:	3001      	adds	r0, #1
 800fa1e:	d14c      	bne.n	800faba <_printf_i+0x1fe>
 800fa20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa24:	b004      	add	sp, #16
 800fa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa2a:	4835      	ldr	r0, [pc, #212]	; (800fb00 <_printf_i+0x244>)
 800fa2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fa30:	6829      	ldr	r1, [r5, #0]
 800fa32:	6823      	ldr	r3, [r4, #0]
 800fa34:	f851 6b04 	ldr.w	r6, [r1], #4
 800fa38:	6029      	str	r1, [r5, #0]
 800fa3a:	061d      	lsls	r5, r3, #24
 800fa3c:	d514      	bpl.n	800fa68 <_printf_i+0x1ac>
 800fa3e:	07df      	lsls	r7, r3, #31
 800fa40:	bf44      	itt	mi
 800fa42:	f043 0320 	orrmi.w	r3, r3, #32
 800fa46:	6023      	strmi	r3, [r4, #0]
 800fa48:	b91e      	cbnz	r6, 800fa52 <_printf_i+0x196>
 800fa4a:	6823      	ldr	r3, [r4, #0]
 800fa4c:	f023 0320 	bic.w	r3, r3, #32
 800fa50:	6023      	str	r3, [r4, #0]
 800fa52:	2310      	movs	r3, #16
 800fa54:	e7b0      	b.n	800f9b8 <_printf_i+0xfc>
 800fa56:	6823      	ldr	r3, [r4, #0]
 800fa58:	f043 0320 	orr.w	r3, r3, #32
 800fa5c:	6023      	str	r3, [r4, #0]
 800fa5e:	2378      	movs	r3, #120	; 0x78
 800fa60:	4828      	ldr	r0, [pc, #160]	; (800fb04 <_printf_i+0x248>)
 800fa62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fa66:	e7e3      	b.n	800fa30 <_printf_i+0x174>
 800fa68:	0659      	lsls	r1, r3, #25
 800fa6a:	bf48      	it	mi
 800fa6c:	b2b6      	uxthmi	r6, r6
 800fa6e:	e7e6      	b.n	800fa3e <_printf_i+0x182>
 800fa70:	4615      	mov	r5, r2
 800fa72:	e7bb      	b.n	800f9ec <_printf_i+0x130>
 800fa74:	682b      	ldr	r3, [r5, #0]
 800fa76:	6826      	ldr	r6, [r4, #0]
 800fa78:	6961      	ldr	r1, [r4, #20]
 800fa7a:	1d18      	adds	r0, r3, #4
 800fa7c:	6028      	str	r0, [r5, #0]
 800fa7e:	0635      	lsls	r5, r6, #24
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	d501      	bpl.n	800fa88 <_printf_i+0x1cc>
 800fa84:	6019      	str	r1, [r3, #0]
 800fa86:	e002      	b.n	800fa8e <_printf_i+0x1d2>
 800fa88:	0670      	lsls	r0, r6, #25
 800fa8a:	d5fb      	bpl.n	800fa84 <_printf_i+0x1c8>
 800fa8c:	8019      	strh	r1, [r3, #0]
 800fa8e:	2300      	movs	r3, #0
 800fa90:	6123      	str	r3, [r4, #16]
 800fa92:	4615      	mov	r5, r2
 800fa94:	e7ba      	b.n	800fa0c <_printf_i+0x150>
 800fa96:	682b      	ldr	r3, [r5, #0]
 800fa98:	1d1a      	adds	r2, r3, #4
 800fa9a:	602a      	str	r2, [r5, #0]
 800fa9c:	681d      	ldr	r5, [r3, #0]
 800fa9e:	6862      	ldr	r2, [r4, #4]
 800faa0:	2100      	movs	r1, #0
 800faa2:	4628      	mov	r0, r5
 800faa4:	f7f0 fc24 	bl	80002f0 <memchr>
 800faa8:	b108      	cbz	r0, 800faae <_printf_i+0x1f2>
 800faaa:	1b40      	subs	r0, r0, r5
 800faac:	6060      	str	r0, [r4, #4]
 800faae:	6863      	ldr	r3, [r4, #4]
 800fab0:	6123      	str	r3, [r4, #16]
 800fab2:	2300      	movs	r3, #0
 800fab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fab8:	e7a8      	b.n	800fa0c <_printf_i+0x150>
 800faba:	6923      	ldr	r3, [r4, #16]
 800fabc:	462a      	mov	r2, r5
 800fabe:	4649      	mov	r1, r9
 800fac0:	4640      	mov	r0, r8
 800fac2:	47d0      	blx	sl
 800fac4:	3001      	adds	r0, #1
 800fac6:	d0ab      	beq.n	800fa20 <_printf_i+0x164>
 800fac8:	6823      	ldr	r3, [r4, #0]
 800faca:	079b      	lsls	r3, r3, #30
 800facc:	d413      	bmi.n	800faf6 <_printf_i+0x23a>
 800face:	68e0      	ldr	r0, [r4, #12]
 800fad0:	9b03      	ldr	r3, [sp, #12]
 800fad2:	4298      	cmp	r0, r3
 800fad4:	bfb8      	it	lt
 800fad6:	4618      	movlt	r0, r3
 800fad8:	e7a4      	b.n	800fa24 <_printf_i+0x168>
 800fada:	2301      	movs	r3, #1
 800fadc:	4632      	mov	r2, r6
 800fade:	4649      	mov	r1, r9
 800fae0:	4640      	mov	r0, r8
 800fae2:	47d0      	blx	sl
 800fae4:	3001      	adds	r0, #1
 800fae6:	d09b      	beq.n	800fa20 <_printf_i+0x164>
 800fae8:	3501      	adds	r5, #1
 800faea:	68e3      	ldr	r3, [r4, #12]
 800faec:	9903      	ldr	r1, [sp, #12]
 800faee:	1a5b      	subs	r3, r3, r1
 800faf0:	42ab      	cmp	r3, r5
 800faf2:	dcf2      	bgt.n	800fada <_printf_i+0x21e>
 800faf4:	e7eb      	b.n	800face <_printf_i+0x212>
 800faf6:	2500      	movs	r5, #0
 800faf8:	f104 0619 	add.w	r6, r4, #25
 800fafc:	e7f5      	b.n	800faea <_printf_i+0x22e>
 800fafe:	bf00      	nop
 800fb00:	0801174e 	.word	0x0801174e
 800fb04:	0801175f 	.word	0x0801175f

0800fb08 <memmove>:
 800fb08:	4288      	cmp	r0, r1
 800fb0a:	b510      	push	{r4, lr}
 800fb0c:	eb01 0402 	add.w	r4, r1, r2
 800fb10:	d902      	bls.n	800fb18 <memmove+0x10>
 800fb12:	4284      	cmp	r4, r0
 800fb14:	4623      	mov	r3, r4
 800fb16:	d807      	bhi.n	800fb28 <memmove+0x20>
 800fb18:	1e43      	subs	r3, r0, #1
 800fb1a:	42a1      	cmp	r1, r4
 800fb1c:	d008      	beq.n	800fb30 <memmove+0x28>
 800fb1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb26:	e7f8      	b.n	800fb1a <memmove+0x12>
 800fb28:	4402      	add	r2, r0
 800fb2a:	4601      	mov	r1, r0
 800fb2c:	428a      	cmp	r2, r1
 800fb2e:	d100      	bne.n	800fb32 <memmove+0x2a>
 800fb30:	bd10      	pop	{r4, pc}
 800fb32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb3a:	e7f7      	b.n	800fb2c <memmove+0x24>

0800fb3c <_free_r>:
 800fb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb3e:	2900      	cmp	r1, #0
 800fb40:	d044      	beq.n	800fbcc <_free_r+0x90>
 800fb42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb46:	9001      	str	r0, [sp, #4]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f1a1 0404 	sub.w	r4, r1, #4
 800fb4e:	bfb8      	it	lt
 800fb50:	18e4      	addlt	r4, r4, r3
 800fb52:	f000 f913 	bl	800fd7c <__malloc_lock>
 800fb56:	4a1e      	ldr	r2, [pc, #120]	; (800fbd0 <_free_r+0x94>)
 800fb58:	9801      	ldr	r0, [sp, #4]
 800fb5a:	6813      	ldr	r3, [r2, #0]
 800fb5c:	b933      	cbnz	r3, 800fb6c <_free_r+0x30>
 800fb5e:	6063      	str	r3, [r4, #4]
 800fb60:	6014      	str	r4, [r2, #0]
 800fb62:	b003      	add	sp, #12
 800fb64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb68:	f000 b90e 	b.w	800fd88 <__malloc_unlock>
 800fb6c:	42a3      	cmp	r3, r4
 800fb6e:	d908      	bls.n	800fb82 <_free_r+0x46>
 800fb70:	6825      	ldr	r5, [r4, #0]
 800fb72:	1961      	adds	r1, r4, r5
 800fb74:	428b      	cmp	r3, r1
 800fb76:	bf01      	itttt	eq
 800fb78:	6819      	ldreq	r1, [r3, #0]
 800fb7a:	685b      	ldreq	r3, [r3, #4]
 800fb7c:	1949      	addeq	r1, r1, r5
 800fb7e:	6021      	streq	r1, [r4, #0]
 800fb80:	e7ed      	b.n	800fb5e <_free_r+0x22>
 800fb82:	461a      	mov	r2, r3
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	b10b      	cbz	r3, 800fb8c <_free_r+0x50>
 800fb88:	42a3      	cmp	r3, r4
 800fb8a:	d9fa      	bls.n	800fb82 <_free_r+0x46>
 800fb8c:	6811      	ldr	r1, [r2, #0]
 800fb8e:	1855      	adds	r5, r2, r1
 800fb90:	42a5      	cmp	r5, r4
 800fb92:	d10b      	bne.n	800fbac <_free_r+0x70>
 800fb94:	6824      	ldr	r4, [r4, #0]
 800fb96:	4421      	add	r1, r4
 800fb98:	1854      	adds	r4, r2, r1
 800fb9a:	42a3      	cmp	r3, r4
 800fb9c:	6011      	str	r1, [r2, #0]
 800fb9e:	d1e0      	bne.n	800fb62 <_free_r+0x26>
 800fba0:	681c      	ldr	r4, [r3, #0]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	6053      	str	r3, [r2, #4]
 800fba6:	4421      	add	r1, r4
 800fba8:	6011      	str	r1, [r2, #0]
 800fbaa:	e7da      	b.n	800fb62 <_free_r+0x26>
 800fbac:	d902      	bls.n	800fbb4 <_free_r+0x78>
 800fbae:	230c      	movs	r3, #12
 800fbb0:	6003      	str	r3, [r0, #0]
 800fbb2:	e7d6      	b.n	800fb62 <_free_r+0x26>
 800fbb4:	6825      	ldr	r5, [r4, #0]
 800fbb6:	1961      	adds	r1, r4, r5
 800fbb8:	428b      	cmp	r3, r1
 800fbba:	bf04      	itt	eq
 800fbbc:	6819      	ldreq	r1, [r3, #0]
 800fbbe:	685b      	ldreq	r3, [r3, #4]
 800fbc0:	6063      	str	r3, [r4, #4]
 800fbc2:	bf04      	itt	eq
 800fbc4:	1949      	addeq	r1, r1, r5
 800fbc6:	6021      	streq	r1, [r4, #0]
 800fbc8:	6054      	str	r4, [r2, #4]
 800fbca:	e7ca      	b.n	800fb62 <_free_r+0x26>
 800fbcc:	b003      	add	sp, #12
 800fbce:	bd30      	pop	{r4, r5, pc}
 800fbd0:	24001810 	.word	0x24001810

0800fbd4 <sbrk_aligned>:
 800fbd4:	b570      	push	{r4, r5, r6, lr}
 800fbd6:	4e0e      	ldr	r6, [pc, #56]	; (800fc10 <sbrk_aligned+0x3c>)
 800fbd8:	460c      	mov	r4, r1
 800fbda:	6831      	ldr	r1, [r6, #0]
 800fbdc:	4605      	mov	r5, r0
 800fbde:	b911      	cbnz	r1, 800fbe6 <sbrk_aligned+0x12>
 800fbe0:	f000 f8bc 	bl	800fd5c <_sbrk_r>
 800fbe4:	6030      	str	r0, [r6, #0]
 800fbe6:	4621      	mov	r1, r4
 800fbe8:	4628      	mov	r0, r5
 800fbea:	f000 f8b7 	bl	800fd5c <_sbrk_r>
 800fbee:	1c43      	adds	r3, r0, #1
 800fbf0:	d00a      	beq.n	800fc08 <sbrk_aligned+0x34>
 800fbf2:	1cc4      	adds	r4, r0, #3
 800fbf4:	f024 0403 	bic.w	r4, r4, #3
 800fbf8:	42a0      	cmp	r0, r4
 800fbfa:	d007      	beq.n	800fc0c <sbrk_aligned+0x38>
 800fbfc:	1a21      	subs	r1, r4, r0
 800fbfe:	4628      	mov	r0, r5
 800fc00:	f000 f8ac 	bl	800fd5c <_sbrk_r>
 800fc04:	3001      	adds	r0, #1
 800fc06:	d101      	bne.n	800fc0c <sbrk_aligned+0x38>
 800fc08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	bd70      	pop	{r4, r5, r6, pc}
 800fc10:	24001814 	.word	0x24001814

0800fc14 <_malloc_r>:
 800fc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc18:	1ccd      	adds	r5, r1, #3
 800fc1a:	f025 0503 	bic.w	r5, r5, #3
 800fc1e:	3508      	adds	r5, #8
 800fc20:	2d0c      	cmp	r5, #12
 800fc22:	bf38      	it	cc
 800fc24:	250c      	movcc	r5, #12
 800fc26:	2d00      	cmp	r5, #0
 800fc28:	4607      	mov	r7, r0
 800fc2a:	db01      	blt.n	800fc30 <_malloc_r+0x1c>
 800fc2c:	42a9      	cmp	r1, r5
 800fc2e:	d905      	bls.n	800fc3c <_malloc_r+0x28>
 800fc30:	230c      	movs	r3, #12
 800fc32:	603b      	str	r3, [r7, #0]
 800fc34:	2600      	movs	r6, #0
 800fc36:	4630      	mov	r0, r6
 800fc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc3c:	4e2e      	ldr	r6, [pc, #184]	; (800fcf8 <_malloc_r+0xe4>)
 800fc3e:	f000 f89d 	bl	800fd7c <__malloc_lock>
 800fc42:	6833      	ldr	r3, [r6, #0]
 800fc44:	461c      	mov	r4, r3
 800fc46:	bb34      	cbnz	r4, 800fc96 <_malloc_r+0x82>
 800fc48:	4629      	mov	r1, r5
 800fc4a:	4638      	mov	r0, r7
 800fc4c:	f7ff ffc2 	bl	800fbd4 <sbrk_aligned>
 800fc50:	1c43      	adds	r3, r0, #1
 800fc52:	4604      	mov	r4, r0
 800fc54:	d14d      	bne.n	800fcf2 <_malloc_r+0xde>
 800fc56:	6834      	ldr	r4, [r6, #0]
 800fc58:	4626      	mov	r6, r4
 800fc5a:	2e00      	cmp	r6, #0
 800fc5c:	d140      	bne.n	800fce0 <_malloc_r+0xcc>
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	4631      	mov	r1, r6
 800fc62:	4638      	mov	r0, r7
 800fc64:	eb04 0803 	add.w	r8, r4, r3
 800fc68:	f000 f878 	bl	800fd5c <_sbrk_r>
 800fc6c:	4580      	cmp	r8, r0
 800fc6e:	d13a      	bne.n	800fce6 <_malloc_r+0xd2>
 800fc70:	6821      	ldr	r1, [r4, #0]
 800fc72:	3503      	adds	r5, #3
 800fc74:	1a6d      	subs	r5, r5, r1
 800fc76:	f025 0503 	bic.w	r5, r5, #3
 800fc7a:	3508      	adds	r5, #8
 800fc7c:	2d0c      	cmp	r5, #12
 800fc7e:	bf38      	it	cc
 800fc80:	250c      	movcc	r5, #12
 800fc82:	4629      	mov	r1, r5
 800fc84:	4638      	mov	r0, r7
 800fc86:	f7ff ffa5 	bl	800fbd4 <sbrk_aligned>
 800fc8a:	3001      	adds	r0, #1
 800fc8c:	d02b      	beq.n	800fce6 <_malloc_r+0xd2>
 800fc8e:	6823      	ldr	r3, [r4, #0]
 800fc90:	442b      	add	r3, r5
 800fc92:	6023      	str	r3, [r4, #0]
 800fc94:	e00e      	b.n	800fcb4 <_malloc_r+0xa0>
 800fc96:	6822      	ldr	r2, [r4, #0]
 800fc98:	1b52      	subs	r2, r2, r5
 800fc9a:	d41e      	bmi.n	800fcda <_malloc_r+0xc6>
 800fc9c:	2a0b      	cmp	r2, #11
 800fc9e:	d916      	bls.n	800fcce <_malloc_r+0xba>
 800fca0:	1961      	adds	r1, r4, r5
 800fca2:	42a3      	cmp	r3, r4
 800fca4:	6025      	str	r5, [r4, #0]
 800fca6:	bf18      	it	ne
 800fca8:	6059      	strne	r1, [r3, #4]
 800fcaa:	6863      	ldr	r3, [r4, #4]
 800fcac:	bf08      	it	eq
 800fcae:	6031      	streq	r1, [r6, #0]
 800fcb0:	5162      	str	r2, [r4, r5]
 800fcb2:	604b      	str	r3, [r1, #4]
 800fcb4:	4638      	mov	r0, r7
 800fcb6:	f104 060b 	add.w	r6, r4, #11
 800fcba:	f000 f865 	bl	800fd88 <__malloc_unlock>
 800fcbe:	f026 0607 	bic.w	r6, r6, #7
 800fcc2:	1d23      	adds	r3, r4, #4
 800fcc4:	1af2      	subs	r2, r6, r3
 800fcc6:	d0b6      	beq.n	800fc36 <_malloc_r+0x22>
 800fcc8:	1b9b      	subs	r3, r3, r6
 800fcca:	50a3      	str	r3, [r4, r2]
 800fccc:	e7b3      	b.n	800fc36 <_malloc_r+0x22>
 800fcce:	6862      	ldr	r2, [r4, #4]
 800fcd0:	42a3      	cmp	r3, r4
 800fcd2:	bf0c      	ite	eq
 800fcd4:	6032      	streq	r2, [r6, #0]
 800fcd6:	605a      	strne	r2, [r3, #4]
 800fcd8:	e7ec      	b.n	800fcb4 <_malloc_r+0xa0>
 800fcda:	4623      	mov	r3, r4
 800fcdc:	6864      	ldr	r4, [r4, #4]
 800fcde:	e7b2      	b.n	800fc46 <_malloc_r+0x32>
 800fce0:	4634      	mov	r4, r6
 800fce2:	6876      	ldr	r6, [r6, #4]
 800fce4:	e7b9      	b.n	800fc5a <_malloc_r+0x46>
 800fce6:	230c      	movs	r3, #12
 800fce8:	603b      	str	r3, [r7, #0]
 800fcea:	4638      	mov	r0, r7
 800fcec:	f000 f84c 	bl	800fd88 <__malloc_unlock>
 800fcf0:	e7a1      	b.n	800fc36 <_malloc_r+0x22>
 800fcf2:	6025      	str	r5, [r4, #0]
 800fcf4:	e7de      	b.n	800fcb4 <_malloc_r+0xa0>
 800fcf6:	bf00      	nop
 800fcf8:	24001810 	.word	0x24001810

0800fcfc <_realloc_r>:
 800fcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd00:	4680      	mov	r8, r0
 800fd02:	4614      	mov	r4, r2
 800fd04:	460e      	mov	r6, r1
 800fd06:	b921      	cbnz	r1, 800fd12 <_realloc_r+0x16>
 800fd08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0c:	4611      	mov	r1, r2
 800fd0e:	f7ff bf81 	b.w	800fc14 <_malloc_r>
 800fd12:	b92a      	cbnz	r2, 800fd20 <_realloc_r+0x24>
 800fd14:	f7ff ff12 	bl	800fb3c <_free_r>
 800fd18:	4625      	mov	r5, r4
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd20:	f000 f838 	bl	800fd94 <_malloc_usable_size_r>
 800fd24:	4284      	cmp	r4, r0
 800fd26:	4607      	mov	r7, r0
 800fd28:	d802      	bhi.n	800fd30 <_realloc_r+0x34>
 800fd2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fd2e:	d812      	bhi.n	800fd56 <_realloc_r+0x5a>
 800fd30:	4621      	mov	r1, r4
 800fd32:	4640      	mov	r0, r8
 800fd34:	f7ff ff6e 	bl	800fc14 <_malloc_r>
 800fd38:	4605      	mov	r5, r0
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	d0ed      	beq.n	800fd1a <_realloc_r+0x1e>
 800fd3e:	42bc      	cmp	r4, r7
 800fd40:	4622      	mov	r2, r4
 800fd42:	4631      	mov	r1, r6
 800fd44:	bf28      	it	cs
 800fd46:	463a      	movcs	r2, r7
 800fd48:	f7ff fb2c 	bl	800f3a4 <memcpy>
 800fd4c:	4631      	mov	r1, r6
 800fd4e:	4640      	mov	r0, r8
 800fd50:	f7ff fef4 	bl	800fb3c <_free_r>
 800fd54:	e7e1      	b.n	800fd1a <_realloc_r+0x1e>
 800fd56:	4635      	mov	r5, r6
 800fd58:	e7df      	b.n	800fd1a <_realloc_r+0x1e>
	...

0800fd5c <_sbrk_r>:
 800fd5c:	b538      	push	{r3, r4, r5, lr}
 800fd5e:	4d06      	ldr	r5, [pc, #24]	; (800fd78 <_sbrk_r+0x1c>)
 800fd60:	2300      	movs	r3, #0
 800fd62:	4604      	mov	r4, r0
 800fd64:	4608      	mov	r0, r1
 800fd66:	602b      	str	r3, [r5, #0]
 800fd68:	f7f4 fde8 	bl	800493c <_sbrk>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	d102      	bne.n	800fd76 <_sbrk_r+0x1a>
 800fd70:	682b      	ldr	r3, [r5, #0]
 800fd72:	b103      	cbz	r3, 800fd76 <_sbrk_r+0x1a>
 800fd74:	6023      	str	r3, [r4, #0]
 800fd76:	bd38      	pop	{r3, r4, r5, pc}
 800fd78:	24001818 	.word	0x24001818

0800fd7c <__malloc_lock>:
 800fd7c:	4801      	ldr	r0, [pc, #4]	; (800fd84 <__malloc_lock+0x8>)
 800fd7e:	f000 b811 	b.w	800fda4 <__retarget_lock_acquire_recursive>
 800fd82:	bf00      	nop
 800fd84:	2400181c 	.word	0x2400181c

0800fd88 <__malloc_unlock>:
 800fd88:	4801      	ldr	r0, [pc, #4]	; (800fd90 <__malloc_unlock+0x8>)
 800fd8a:	f000 b80c 	b.w	800fda6 <__retarget_lock_release_recursive>
 800fd8e:	bf00      	nop
 800fd90:	2400181c 	.word	0x2400181c

0800fd94 <_malloc_usable_size_r>:
 800fd94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd98:	1f18      	subs	r0, r3, #4
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	bfbc      	itt	lt
 800fd9e:	580b      	ldrlt	r3, [r1, r0]
 800fda0:	18c0      	addlt	r0, r0, r3
 800fda2:	4770      	bx	lr

0800fda4 <__retarget_lock_acquire_recursive>:
 800fda4:	4770      	bx	lr

0800fda6 <__retarget_lock_release_recursive>:
 800fda6:	4770      	bx	lr

0800fda8 <checkint>:
 800fda8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fdac:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	b570      	push	{r4, r5, r6, lr}
 800fdb4:	dd2a      	ble.n	800fe0c <checkint+0x64>
 800fdb6:	f240 4333 	movw	r3, #1075	; 0x433
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	dc24      	bgt.n	800fe08 <checkint+0x60>
 800fdbe:	1a9b      	subs	r3, r3, r2
 800fdc0:	f1a3 0620 	sub.w	r6, r3, #32
 800fdc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdc8:	fa02 f403 	lsl.w	r4, r2, r3
 800fdcc:	fa02 f606 	lsl.w	r6, r2, r6
 800fdd0:	f1c3 0520 	rsb	r5, r3, #32
 800fdd4:	fa22 f505 	lsr.w	r5, r2, r5
 800fdd8:	4334      	orrs	r4, r6
 800fdda:	432c      	orrs	r4, r5
 800fddc:	409a      	lsls	r2, r3
 800fdde:	ea20 0202 	bic.w	r2, r0, r2
 800fde2:	ea21 0404 	bic.w	r4, r1, r4
 800fde6:	4322      	orrs	r2, r4
 800fde8:	f1a3 0420 	sub.w	r4, r3, #32
 800fdec:	f1c3 0220 	rsb	r2, r3, #32
 800fdf0:	d10c      	bne.n	800fe0c <checkint+0x64>
 800fdf2:	40d8      	lsrs	r0, r3
 800fdf4:	fa01 f302 	lsl.w	r3, r1, r2
 800fdf8:	4318      	orrs	r0, r3
 800fdfa:	40e1      	lsrs	r1, r4
 800fdfc:	4308      	orrs	r0, r1
 800fdfe:	f000 0001 	and.w	r0, r0, #1
 800fe02:	f1d0 0002 	rsbs	r0, r0, #2
 800fe06:	bd70      	pop	{r4, r5, r6, pc}
 800fe08:	2002      	movs	r0, #2
 800fe0a:	e7fc      	b.n	800fe06 <checkint+0x5e>
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	e7fa      	b.n	800fe06 <checkint+0x5e>

0800fe10 <pow>:
 800fe10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe14:	ee10 4a90 	vmov	r4, s1
 800fe18:	ed2d 8b0a 	vpush	{d8-d12}
 800fe1c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800fe20:	ee11 7a90 	vmov	r7, s3
 800fe24:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800fe28:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	ee10 6a10 	vmov	r6, s0
 800fe32:	ee11 0a10 	vmov	r0, s2
 800fe36:	b086      	sub	sp, #24
 800fe38:	46d4      	mov	ip, sl
 800fe3a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800fe3e:	d806      	bhi.n	800fe4e <pow+0x3e>
 800fe40:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800fe44:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800fe48:	2b7f      	cmp	r3, #127	; 0x7f
 800fe4a:	f240 8156 	bls.w	80100fa <pow+0x2ea>
 800fe4e:	1802      	adds	r2, r0, r0
 800fe50:	eb47 0107 	adc.w	r1, r7, r7
 800fe54:	f06f 0e01 	mvn.w	lr, #1
 800fe58:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 800fe5c:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 800fe60:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800fe64:	45ce      	cmp	lr, r9
 800fe66:	eb73 0808 	sbcs.w	r8, r3, r8
 800fe6a:	d23f      	bcs.n	800feec <pow+0xdc>
 800fe6c:	ea52 0301 	orrs.w	r3, r2, r1
 800fe70:	f04f 0300 	mov.w	r3, #0
 800fe74:	d10c      	bne.n	800fe90 <pow+0x80>
 800fe76:	19b6      	adds	r6, r6, r6
 800fe78:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800fe7c:	4164      	adcs	r4, r4
 800fe7e:	42b3      	cmp	r3, r6
 800fe80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fe84:	41a3      	sbcs	r3, r4
 800fe86:	f0c0 808c 	bcc.w	800ffa2 <pow+0x192>
 800fe8a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fe8e:	e028      	b.n	800fee2 <pow+0xd2>
 800fe90:	4da3      	ldr	r5, [pc, #652]	; (8010120 <pow+0x310>)
 800fe92:	42ac      	cmp	r4, r5
 800fe94:	bf08      	it	eq
 800fe96:	429e      	cmpeq	r6, r3
 800fe98:	d107      	bne.n	800feaa <pow+0x9a>
 800fe9a:	1800      	adds	r0, r0, r0
 800fe9c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800fea0:	417f      	adcs	r7, r7
 800fea2:	4283      	cmp	r3, r0
 800fea4:	4b9f      	ldr	r3, [pc, #636]	; (8010124 <pow+0x314>)
 800fea6:	41bb      	sbcs	r3, r7
 800fea8:	e7ed      	b.n	800fe86 <pow+0x76>
 800feaa:	19b6      	adds	r6, r6, r6
 800feac:	489e      	ldr	r0, [pc, #632]	; (8010128 <pow+0x318>)
 800feae:	4164      	adcs	r4, r4
 800feb0:	42b3      	cmp	r3, r6
 800feb2:	eb70 0504 	sbcs.w	r5, r0, r4
 800feb6:	d374      	bcc.n	800ffa2 <pow+0x192>
 800feb8:	4281      	cmp	r1, r0
 800feba:	bf08      	it	eq
 800febc:	429a      	cmpeq	r2, r3
 800febe:	d170      	bne.n	800ffa2 <pow+0x192>
 800fec0:	4a9a      	ldr	r2, [pc, #616]	; (801012c <pow+0x31c>)
 800fec2:	4294      	cmp	r4, r2
 800fec4:	bf08      	it	eq
 800fec6:	429e      	cmpeq	r6, r3
 800fec8:	d0df      	beq.n	800fe8a <pow+0x7a>
 800feca:	4294      	cmp	r4, r2
 800fecc:	ea6f 0707 	mvn.w	r7, r7
 800fed0:	bf34      	ite	cc
 800fed2:	2400      	movcc	r4, #0
 800fed4:	2401      	movcs	r4, #1
 800fed6:	0fff      	lsrs	r7, r7, #31
 800fed8:	42bc      	cmp	r4, r7
 800feda:	f040 81d9 	bne.w	8010290 <pow+0x480>
 800fede:	ee21 0b01 	vmul.f64	d0, d1, d1
 800fee2:	b006      	add	sp, #24
 800fee4:	ecbd 8b0a 	vpop	{d8-d12}
 800fee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feec:	eb16 0806 	adds.w	r8, r6, r6
 800fef0:	eb44 0904 	adc.w	r9, r4, r4
 800fef4:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 800fef8:	f169 0200 	sbc.w	r2, r9, #0
 800fefc:	458e      	cmp	lr, r1
 800fefe:	4193      	sbcs	r3, r2
 800ff00:	d223      	bcs.n	800ff4a <pow+0x13a>
 800ff02:	ee20 0b00 	vmul.f64	d0, d0, d0
 800ff06:	2c00      	cmp	r4, #0
 800ff08:	da12      	bge.n	800ff30 <pow+0x120>
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	f7ff ff4c 	bl	800fda8 <checkint>
 800ff10:	2801      	cmp	r0, #1
 800ff12:	d10d      	bne.n	800ff30 <pow+0x120>
 800ff14:	eeb1 0b40 	vneg.f64	d0, d0
 800ff18:	ea58 0309 	orrs.w	r3, r8, r9
 800ff1c:	d10a      	bne.n	800ff34 <pow+0x124>
 800ff1e:	2f00      	cmp	r7, #0
 800ff20:	dadf      	bge.n	800fee2 <pow+0xd2>
 800ff22:	b006      	add	sp, #24
 800ff24:	ecbd 8b0a 	vpop	{d8-d12}
 800ff28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff2c:	f001 b9b4 	b.w	8011298 <__math_divzero>
 800ff30:	2000      	movs	r0, #0
 800ff32:	e7f1      	b.n	800ff18 <pow+0x108>
 800ff34:	2f00      	cmp	r7, #0
 800ff36:	dad4      	bge.n	800fee2 <pow+0xd2>
 800ff38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ff3c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ff40:	ed8d 7b00 	vstr	d7, [sp]
 800ff44:	ed9d 0b00 	vldr	d0, [sp]
 800ff48:	e7cb      	b.n	800fee2 <pow+0xd2>
 800ff4a:	2c00      	cmp	r4, #0
 800ff4c:	da2c      	bge.n	800ffa8 <pow+0x198>
 800ff4e:	4639      	mov	r1, r7
 800ff50:	f7ff ff2a 	bl	800fda8 <checkint>
 800ff54:	b930      	cbnz	r0, 800ff64 <pow+0x154>
 800ff56:	b006      	add	sp, #24
 800ff58:	ecbd 8b0a 	vpop	{d8-d12}
 800ff5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff60:	f001 b9b2 	b.w	80112c8 <__math_invalid>
 800ff64:	2801      	cmp	r0, #1
 800ff66:	bf14      	ite	ne
 800ff68:	2000      	movne	r0, #0
 800ff6a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800ff6e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ff72:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800ff76:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800ff7a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800ff7e:	2b7f      	cmp	r3, #127	; 0x7f
 800ff80:	d92d      	bls.n	800ffde <pow+0x1ce>
 800ff82:	4b67      	ldr	r3, [pc, #412]	; (8010120 <pow+0x310>)
 800ff84:	2000      	movs	r0, #0
 800ff86:	429c      	cmp	r4, r3
 800ff88:	bf08      	it	eq
 800ff8a:	4286      	cmpeq	r6, r0
 800ff8c:	f43f af7d 	beq.w	800fe8a <pow+0x7a>
 800ff90:	f240 31bd 	movw	r1, #957	; 0x3bd
 800ff94:	428a      	cmp	r2, r1
 800ff96:	d80c      	bhi.n	800ffb2 <pow+0x1a2>
 800ff98:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ff9c:	42b0      	cmp	r0, r6
 800ff9e:	41a3      	sbcs	r3, r4
 800ffa0:	d204      	bcs.n	800ffac <pow+0x19c>
 800ffa2:	ee31 0b00 	vadd.f64	d0, d1, d0
 800ffa6:	e79c      	b.n	800fee2 <pow+0xd2>
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	e7e4      	b.n	800ff76 <pow+0x166>
 800ffac:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ffb0:	e797      	b.n	800fee2 <pow+0xd2>
 800ffb2:	2e01      	cmp	r6, #1
 800ffb4:	eb74 0303 	sbcs.w	r3, r4, r3
 800ffb8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ffbc:	bf34      	ite	cc
 800ffbe:	2301      	movcc	r3, #1
 800ffc0:	2300      	movcs	r3, #0
 800ffc2:	4295      	cmp	r5, r2
 800ffc4:	bf8c      	ite	hi
 800ffc6:	2500      	movhi	r5, #0
 800ffc8:	2501      	movls	r5, #1
 800ffca:	42ab      	cmp	r3, r5
 800ffcc:	f000 809d 	beq.w	801010a <pow+0x2fa>
 800ffd0:	b006      	add	sp, #24
 800ffd2:	ecbd 8b0a 	vpop	{d8-d12}
 800ffd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffda:	f001 b955 	b.w	8011288 <__math_oflow>
 800ffde:	f1bc 0f00 	cmp.w	ip, #0
 800ffe2:	d10b      	bne.n	800fffc <pow+0x1ec>
 800ffe4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010118 <pow+0x308>
 800ffe8:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ffec:	ec53 2b17 	vmov	r2, r3, d7
 800fff0:	ee17 6a10 	vmov	r6, s14
 800fff4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800fff8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800fffc:	4b4c      	ldr	r3, [pc, #304]	; (8010130 <pow+0x320>)
 800fffe:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010002:	4423      	add	r3, r4
 8010004:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010008:	1519      	asrs	r1, r3, #20
 801000a:	0d1b      	lsrs	r3, r3, #20
 801000c:	051b      	lsls	r3, r3, #20
 801000e:	eba4 0903 	sub.w	r9, r4, r3
 8010012:	4b48      	ldr	r3, [pc, #288]	; (8010134 <pow+0x324>)
 8010014:	ee04 1a10 	vmov	s8, r1
 8010018:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801001c:	f1b6 0800 	subs.w	r8, r6, #0
 8010020:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010024:	ec49 8b15 	vmov	d5, r8, r9
 8010028:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801002c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010030:	ed93 7b00 	vldr	d7, [r3]
 8010034:	ed93 5b02 	vldr	d5, [r3, #8]
 8010038:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801003c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010040:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010044:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010048:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801004c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010050:	ed93 5b04 	vldr	d5, [r3, #16]
 8010054:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010058:	ee37 7b02 	vadd.f64	d7, d7, d2
 801005c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010060:	ed93 4b08 	vldr	d4, [r3, #32]
 8010064:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010068:	eeb0 9b40 	vmov.f64	d9, d0
 801006c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010070:	ed93 5b06 	vldr	d5, [r3, #24]
 8010074:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010078:	ee26 bb00 	vmul.f64	d11, d6, d0
 801007c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010080:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010084:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010088:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801008c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010090:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010094:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010098:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801009c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80100a0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80100a4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80100a8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80100ac:	eea0 5b04 	vfma.f64	d5, d0, d4
 80100b0:	eeab ab05 	vfma.f64	d10, d11, d5
 80100b4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80100b8:	ee21 7b06 	vmul.f64	d7, d1, d6
 80100bc:	ee17 3a90 	vmov	r3, s15
 80100c0:	eeb0 5b47 	vmov.f64	d5, d7
 80100c4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80100c8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80100cc:	18b2      	adds	r2, r6, r2
 80100ce:	2a3e      	cmp	r2, #62	; 0x3e
 80100d0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80100d4:	ee38 8b46 	vsub.f64	d8, d8, d6
 80100d8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80100dc:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80100e0:	d92b      	bls.n	801013a <pow+0x32a>
 80100e2:	2a00      	cmp	r2, #0
 80100e4:	da0b      	bge.n	80100fe <pow+0x2ee>
 80100e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80100ea:	ee37 0b00 	vadd.f64	d0, d7, d0
 80100ee:	2800      	cmp	r0, #0
 80100f0:	f43f aef7 	beq.w	800fee2 <pow+0xd2>
 80100f4:	eeb1 0b40 	vneg.f64	d0, d0
 80100f8:	e6f3      	b.n	800fee2 <pow+0xd2>
 80100fa:	2000      	movs	r0, #0
 80100fc:	e77e      	b.n	800fffc <pow+0x1ec>
 80100fe:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010102:	d919      	bls.n	8010138 <pow+0x328>
 8010104:	2b00      	cmp	r3, #0
 8010106:	f6bf af63 	bge.w	800ffd0 <pow+0x1c0>
 801010a:	b006      	add	sp, #24
 801010c:	ecbd 8b0a 	vpop	{d8-d12}
 8010110:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010114:	f001 b8b0 	b.w	8011278 <__math_uflow>
 8010118:	00000000 	.word	0x00000000
 801011c:	43300000 	.word	0x43300000
 8010120:	3ff00000 	.word	0x3ff00000
 8010124:	fff00000 	.word	0xfff00000
 8010128:	ffe00000 	.word	0xffe00000
 801012c:	7fe00000 	.word	0x7fe00000
 8010130:	c0196aab 	.word	0xc0196aab
 8010134:	08011770 	.word	0x08011770
 8010138:	2600      	movs	r6, #0
 801013a:	495d      	ldr	r1, [pc, #372]	; (80102b0 <pow+0x4a0>)
 801013c:	ed91 4b02 	vldr	d4, [r1, #8]
 8010140:	ed91 3b00 	vldr	d3, [r1]
 8010144:	eeb0 6b44 	vmov.f64	d6, d4
 8010148:	eea7 6b03 	vfma.f64	d6, d7, d3
 801014c:	ee16 5a10 	vmov	r5, s12
 8010150:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010154:	ed91 4b04 	vldr	d4, [r1, #16]
 8010158:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801015c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010160:	eeb0 0b47 	vmov.f64	d0, d7
 8010164:	ed91 7b06 	vldr	d7, [r1, #24]
 8010168:	18dc      	adds	r4, r3, r3
 801016a:	f104 030f 	add.w	r3, r4, #15
 801016e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010172:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010176:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801017a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801017e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010182:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010186:	ed91 5b08 	vldr	d5, [r1, #32]
 801018a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801018e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010192:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010196:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801019a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801019e:	ee26 6b06 	vmul.f64	d6, d6, d6
 80101a2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80101a6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80101aa:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80101ae:	eea0 5b04 	vfma.f64	d5, d0, d4
 80101b2:	1940      	adds	r0, r0, r5
 80101b4:	2700      	movs	r7, #0
 80101b6:	eb17 020c 	adds.w	r2, r7, ip
 80101ba:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80101be:	eea6 7b05 	vfma.f64	d7, d6, d5
 80101c2:	2e00      	cmp	r6, #0
 80101c4:	d15f      	bne.n	8010286 <pow+0x476>
 80101c6:	42bd      	cmp	r5, r7
 80101c8:	db13      	blt.n	80101f2 <pow+0x3e2>
 80101ca:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80101ce:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80101d2:	4610      	mov	r0, r2
 80101d4:	ec41 0b10 	vmov	d0, r0, r1
 80101d8:	eea7 0b00 	vfma.f64	d0, d7, d0
 80101dc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010298 <pow+0x488>
 80101e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80101e4:	b006      	add	sp, #24
 80101e6:	ecbd 8b0a 	vpop	{d8-d12}
 80101ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101ee:	f001 b883 	b.w	80112f8 <__math_check_oflow>
 80101f2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80101f6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80101fa:	4610      	mov	r0, r2
 80101fc:	ec41 0b15 	vmov	d5, r0, r1
 8010200:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010204:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010208:	ee35 7b06 	vadd.f64	d7, d5, d6
 801020c:	eeb0 3bc7 	vabs.f64	d3, d7
 8010210:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010218:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80102a0 <pow+0x490>
 801021c:	d52a      	bpl.n	8010274 <pow+0x464>
 801021e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010222:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801022a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801022e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010232:	bf48      	it	mi
 8010234:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010238:	ee37 3b04 	vadd.f64	d3, d7, d4
 801023c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010240:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010244:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010248:	ee37 7b03 	vadd.f64	d7, d7, d3
 801024c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010250:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010258:	d104      	bne.n	8010264 <pow+0x454>
 801025a:	4632      	mov	r2, r6
 801025c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010260:	ec43 2b17 	vmov	d7, r2, r3
 8010264:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010268:	ed9d 6b02 	vldr	d6, [sp, #8]
 801026c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010270:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010274:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010278:	b006      	add	sp, #24
 801027a:	ecbd 8b0a 	vpop	{d8-d12}
 801027e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010282:	f001 b830 	b.w	80112e6 <__math_check_uflow>
 8010286:	ec43 2b10 	vmov	d0, r2, r3
 801028a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801028e:	e628      	b.n	800fee2 <pow+0xd2>
 8010290:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80102a8 <pow+0x498>
 8010294:	e625      	b.n	800fee2 <pow+0xd2>
 8010296:	bf00      	nop
 8010298:	00000000 	.word	0x00000000
 801029c:	7f000000 	.word	0x7f000000
 80102a0:	00000000 	.word	0x00000000
 80102a4:	00100000 	.word	0x00100000
	...
 80102b0:	08012a68 	.word	0x08012a68
 80102b4:	00000000 	.word	0x00000000

080102b8 <sin>:
 80102b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102ba:	eeb0 7b40 	vmov.f64	d7, d0
 80102be:	ee17 3a90 	vmov	r3, s15
 80102c2:	4a21      	ldr	r2, [pc, #132]	; (8010348 <sin+0x90>)
 80102c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102c8:	4293      	cmp	r3, r2
 80102ca:	dc07      	bgt.n	80102dc <sin+0x24>
 80102cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010340 <sin+0x88>
 80102d0:	2000      	movs	r0, #0
 80102d2:	b005      	add	sp, #20
 80102d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80102d8:	f000 bf5a 	b.w	8011190 <__kernel_sin>
 80102dc:	4a1b      	ldr	r2, [pc, #108]	; (801034c <sin+0x94>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	dd04      	ble.n	80102ec <sin+0x34>
 80102e2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80102e6:	b005      	add	sp, #20
 80102e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80102ec:	4668      	mov	r0, sp
 80102ee:	f000 fb03 	bl	80108f8 <__ieee754_rem_pio2>
 80102f2:	f000 0003 	and.w	r0, r0, #3
 80102f6:	2801      	cmp	r0, #1
 80102f8:	d00a      	beq.n	8010310 <sin+0x58>
 80102fa:	2802      	cmp	r0, #2
 80102fc:	d00f      	beq.n	801031e <sin+0x66>
 80102fe:	b9c0      	cbnz	r0, 8010332 <sin+0x7a>
 8010300:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010304:	ed9d 0b00 	vldr	d0, [sp]
 8010308:	2001      	movs	r0, #1
 801030a:	f000 ff41 	bl	8011190 <__kernel_sin>
 801030e:	e7ea      	b.n	80102e6 <sin+0x2e>
 8010310:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010314:	ed9d 0b00 	vldr	d0, [sp]
 8010318:	f000 fc36 	bl	8010b88 <__kernel_cos>
 801031c:	e7e3      	b.n	80102e6 <sin+0x2e>
 801031e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010322:	ed9d 0b00 	vldr	d0, [sp]
 8010326:	2001      	movs	r0, #1
 8010328:	f000 ff32 	bl	8011190 <__kernel_sin>
 801032c:	eeb1 0b40 	vneg.f64	d0, d0
 8010330:	e7d9      	b.n	80102e6 <sin+0x2e>
 8010332:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010336:	ed9d 0b00 	vldr	d0, [sp]
 801033a:	f000 fc25 	bl	8010b88 <__kernel_cos>
 801033e:	e7f5      	b.n	801032c <sin+0x74>
	...
 8010348:	3fe921fb 	.word	0x3fe921fb
 801034c:	7fefffff 	.word	0x7fefffff

08010350 <checkint>:
 8010350:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010354:	2b7e      	cmp	r3, #126	; 0x7e
 8010356:	dd10      	ble.n	801037a <checkint+0x2a>
 8010358:	2b96      	cmp	r3, #150	; 0x96
 801035a:	dc0c      	bgt.n	8010376 <checkint+0x26>
 801035c:	2201      	movs	r2, #1
 801035e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010362:	fa02 f303 	lsl.w	r3, r2, r3
 8010366:	1e5a      	subs	r2, r3, #1
 8010368:	4202      	tst	r2, r0
 801036a:	d106      	bne.n	801037a <checkint+0x2a>
 801036c:	4203      	tst	r3, r0
 801036e:	bf0c      	ite	eq
 8010370:	2002      	moveq	r0, #2
 8010372:	2001      	movne	r0, #1
 8010374:	4770      	bx	lr
 8010376:	2002      	movs	r0, #2
 8010378:	4770      	bx	lr
 801037a:	2000      	movs	r0, #0
 801037c:	4770      	bx	lr
	...

08010380 <powf>:
 8010380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010382:	ee10 1a10 	vmov	r1, s0
 8010386:	ee10 4a90 	vmov	r4, s1
 801038a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801038e:	0062      	lsls	r2, r4, #1
 8010390:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8010394:	eef0 7a40 	vmov.f32	s15, s0
 8010398:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801039c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80103a0:	d252      	bcs.n	8010448 <powf+0xc8>
 80103a2:	4298      	cmp	r0, r3
 80103a4:	d252      	bcs.n	801044c <powf+0xcc>
 80103a6:	2000      	movs	r0, #0
 80103a8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80103ac:	4ca0      	ldr	r4, [pc, #640]	; (8010630 <powf+0x2b0>)
 80103ae:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80103b2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80103b6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80103ba:	0dd2      	lsrs	r2, r2, #23
 80103bc:	05d2      	lsls	r2, r2, #23
 80103be:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80103c2:	1a8b      	subs	r3, r1, r2
 80103c4:	ed95 6b00 	vldr	d6, [r5]
 80103c8:	ee07 3a90 	vmov	s15, r3
 80103cc:	15d2      	asrs	r2, r2, #23
 80103ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80103d2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80103d6:	ed95 6b02 	vldr	d6, [r5, #8]
 80103da:	ee25 2b05 	vmul.f64	d2, d5, d5
 80103de:	ee22 1b02 	vmul.f64	d1, d2, d2
 80103e2:	ee07 2a90 	vmov	s15, r2
 80103e6:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80103ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80103ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80103f2:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80103f6:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80103fa:	eea5 3b06 	vfma.f64	d3, d5, d6
 80103fe:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8010402:	eea5 6b04 	vfma.f64	d6, d5, d4
 8010406:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801040a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801040e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8010412:	eea2 7b06 	vfma.f64	d7, d2, d6
 8010416:	eea3 7b01 	vfma.f64	d7, d3, d1
 801041a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801041e:	ee10 3a90 	vmov	r3, s1
 8010422:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8010426:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801042a:	429a      	cmp	r2, r3
 801042c:	f0c0 80b1 	bcc.w	8010592 <powf+0x212>
 8010430:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8010610 <powf+0x290>
 8010434:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043c:	dd79      	ble.n	8010532 <powf+0x1b2>
 801043e:	b003      	add	sp, #12
 8010440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010444:	f000 bf8e 	b.w	8011364 <__math_oflowf>
 8010448:	4298      	cmp	r0, r3
 801044a:	d32d      	bcc.n	80104a8 <powf+0x128>
 801044c:	b952      	cbnz	r2, 8010464 <powf+0xe4>
 801044e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8010458:	f240 80c9 	bls.w	80105ee <powf+0x26e>
 801045c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8010460:	b003      	add	sp, #12
 8010462:	bd30      	pop	{r4, r5, pc}
 8010464:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8010468:	d105      	bne.n	8010476 <powf+0xf6>
 801046a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801046e:	0064      	lsls	r4, r4, #1
 8010470:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8010474:	e7f0      	b.n	8010458 <powf+0xd8>
 8010476:	004b      	lsls	r3, r1, #1
 8010478:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801047c:	d8ee      	bhi.n	801045c <powf+0xdc>
 801047e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8010482:	d1eb      	bne.n	801045c <powf+0xdc>
 8010484:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8010488:	f000 80b1 	beq.w	80105ee <powf+0x26e>
 801048c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8010490:	ea6f 0404 	mvn.w	r4, r4
 8010494:	bf34      	ite	cc
 8010496:	2300      	movcc	r3, #0
 8010498:	2301      	movcs	r3, #1
 801049a:	0fe4      	lsrs	r4, r4, #31
 801049c:	42a3      	cmp	r3, r4
 801049e:	f040 80a9 	bne.w	80105f4 <powf+0x274>
 80104a2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80104a6:	e7db      	b.n	8010460 <powf+0xe0>
 80104a8:	004d      	lsls	r5, r1, #1
 80104aa:	1e6a      	subs	r2, r5, #1
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d31c      	bcc.n	80104ea <powf+0x16a>
 80104b0:	2900      	cmp	r1, #0
 80104b2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80104b6:	da0f      	bge.n	80104d8 <powf+0x158>
 80104b8:	ee10 0a90 	vmov	r0, s1
 80104bc:	f7ff ff48 	bl	8010350 <checkint>
 80104c0:	2801      	cmp	r0, #1
 80104c2:	d109      	bne.n	80104d8 <powf+0x158>
 80104c4:	eeb1 0a40 	vneg.f32	s0, s0
 80104c8:	b945      	cbnz	r5, 80104dc <powf+0x15c>
 80104ca:	2c00      	cmp	r4, #0
 80104cc:	dac8      	bge.n	8010460 <powf+0xe0>
 80104ce:	b003      	add	sp, #12
 80104d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104d4:	f000 bf4c 	b.w	8011370 <__math_divzerof>
 80104d8:	2000      	movs	r0, #0
 80104da:	e7f5      	b.n	80104c8 <powf+0x148>
 80104dc:	2c00      	cmp	r4, #0
 80104de:	dabf      	bge.n	8010460 <powf+0xe0>
 80104e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80104e4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80104e8:	e7ba      	b.n	8010460 <powf+0xe0>
 80104ea:	2900      	cmp	r1, #0
 80104ec:	da1f      	bge.n	801052e <powf+0x1ae>
 80104ee:	ee10 0a90 	vmov	r0, s1
 80104f2:	f7ff ff2d 	bl	8010350 <checkint>
 80104f6:	b920      	cbnz	r0, 8010502 <powf+0x182>
 80104f8:	b003      	add	sp, #12
 80104fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104fe:	f000 bf47 	b.w	8011390 <__math_invalidf>
 8010502:	2801      	cmp	r0, #1
 8010504:	bf14      	ite	ne
 8010506:	2000      	movne	r0, #0
 8010508:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010510:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8010514:	f4bf af48 	bcs.w	80103a8 <powf+0x28>
 8010518:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8010634 <powf+0x2b4>
 801051c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010520:	ee10 3a10 	vmov	r3, s0
 8010524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010528:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801052c:	e73c      	b.n	80103a8 <powf+0x28>
 801052e:	2000      	movs	r0, #0
 8010530:	e7ee      	b.n	8010510 <powf+0x190>
 8010532:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8010618 <powf+0x298>
 8010536:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801053a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053e:	dd10      	ble.n	8010562 <powf+0x1e2>
 8010540:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8010544:	2800      	cmp	r0, #0
 8010546:	d158      	bne.n	80105fa <powf+0x27a>
 8010548:	9300      	str	r3, [sp, #0]
 801054a:	eddd 7a00 	vldr	s15, [sp]
 801054e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010556:	eef4 7a47 	vcmp.f32	s15, s14
 801055a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055e:	f47f af6e 	bne.w	801043e <powf+0xbe>
 8010562:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8010620 <powf+0x2a0>
 8010566:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	d804      	bhi.n	801057a <powf+0x1fa>
 8010570:	b003      	add	sp, #12
 8010572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010576:	f000 bee9 	b.w	801134c <__math_uflowf>
 801057a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8010628 <powf+0x2a8>
 801057e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010586:	d504      	bpl.n	8010592 <powf+0x212>
 8010588:	b003      	add	sp, #12
 801058a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801058e:	f000 bee3 	b.w	8011358 <__math_may_uflowf>
 8010592:	4b29      	ldr	r3, [pc, #164]	; (8010638 <powf+0x2b8>)
 8010594:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8010598:	ee30 6b07 	vadd.f64	d6, d0, d7
 801059c:	ee16 2a10 	vmov	r2, s12
 80105a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80105a4:	f002 011f 	and.w	r1, r2, #31
 80105a8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80105ac:	ee30 7b47 	vsub.f64	d7, d0, d7
 80105b0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80105b4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80105b8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80105bc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80105c0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80105c4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80105c8:	686d      	ldr	r5, [r5, #4]
 80105ca:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80105ce:	1882      	adds	r2, r0, r2
 80105d0:	2300      	movs	r3, #0
 80105d2:	1918      	adds	r0, r3, r4
 80105d4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80105d8:	eea7 0b05 	vfma.f64	d0, d7, d5
 80105dc:	ec41 0b17 	vmov	d7, r0, r1
 80105e0:	eea6 0b04 	vfma.f64	d0, d6, d4
 80105e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80105e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80105ec:	e738      	b.n	8010460 <powf+0xe0>
 80105ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80105f2:	e735      	b.n	8010460 <powf+0xe0>
 80105f4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801063c <powf+0x2bc>
 80105f8:	e732      	b.n	8010460 <powf+0xe0>
 80105fa:	9301      	str	r3, [sp, #4]
 80105fc:	eddd 7a01 	vldr	s15, [sp, #4]
 8010600:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010608:	e7a5      	b.n	8010556 <powf+0x1d6>
 801060a:	bf00      	nop
 801060c:	f3af 8000 	nop.w
 8010610:	ffd1d571 	.word	0xffd1d571
 8010614:	405fffff 	.word	0x405fffff
 8010618:	ffa3aae2 	.word	0xffa3aae2
 801061c:	405fffff 	.word	0x405fffff
 8010620:	00000000 	.word	0x00000000
 8010624:	c062c000 	.word	0xc062c000
 8010628:	00000000 	.word	0x00000000
 801062c:	c062a000 	.word	0xc062a000
 8010630:	080127b8 	.word	0x080127b8
 8010634:	4b000000 	.word	0x4b000000
 8010638:	08013328 	.word	0x08013328
 801063c:	00000000 	.word	0x00000000

08010640 <asin>:
 8010640:	b508      	push	{r3, lr}
 8010642:	ed2d 8b04 	vpush	{d8-d9}
 8010646:	eeb0 8b40 	vmov.f64	d8, d0
 801064a:	f000 f845 	bl	80106d8 <__ieee754_asin>
 801064e:	eeb4 8b48 	vcmp.f64	d8, d8
 8010652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010656:	eeb0 9b40 	vmov.f64	d9, d0
 801065a:	d615      	bvs.n	8010688 <asin+0x48>
 801065c:	eeb0 0b48 	vmov.f64	d0, d8
 8010660:	f000 fea5 	bl	80113ae <fabs>
 8010664:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010668:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801066c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010670:	dd0a      	ble.n	8010688 <asin+0x48>
 8010672:	f7fe fe6d 	bl	800f350 <__errno>
 8010676:	ecbd 8b04 	vpop	{d8-d9}
 801067a:	2321      	movs	r3, #33	; 0x21
 801067c:	6003      	str	r3, [r0, #0]
 801067e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010682:	4804      	ldr	r0, [pc, #16]	; (8010694 <asin+0x54>)
 8010684:	f000 bf10 	b.w	80114a8 <nan>
 8010688:	eeb0 0b49 	vmov.f64	d0, d9
 801068c:	ecbd 8b04 	vpop	{d8-d9}
 8010690:	bd08      	pop	{r3, pc}
 8010692:	bf00      	nop
 8010694:	08011742 	.word	0x08011742

08010698 <sqrt>:
 8010698:	b508      	push	{r3, lr}
 801069a:	ed2d 8b04 	vpush	{d8-d9}
 801069e:	eeb0 8b40 	vmov.f64	d8, d0
 80106a2:	f000 fa6d 	bl	8010b80 <__ieee754_sqrt>
 80106a6:	eeb4 8b48 	vcmp.f64	d8, d8
 80106aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ae:	d60c      	bvs.n	80106ca <sqrt+0x32>
 80106b0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80106d0 <sqrt+0x38>
 80106b4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80106b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106bc:	d505      	bpl.n	80106ca <sqrt+0x32>
 80106be:	f7fe fe47 	bl	800f350 <__errno>
 80106c2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80106c6:	2321      	movs	r3, #33	; 0x21
 80106c8:	6003      	str	r3, [r0, #0]
 80106ca:	ecbd 8b04 	vpop	{d8-d9}
 80106ce:	bd08      	pop	{r3, pc}
	...

080106d8 <__ieee754_asin>:
 80106d8:	b538      	push	{r3, r4, r5, lr}
 80106da:	ee10 5a90 	vmov	r5, s1
 80106de:	4b82      	ldr	r3, [pc, #520]	; (80108e8 <__ieee754_asin+0x210>)
 80106e0:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80106e4:	429c      	cmp	r4, r3
 80106e6:	ed2d 8b06 	vpush	{d8-d10}
 80106ea:	dd19      	ble.n	8010720 <__ieee754_asin+0x48>
 80106ec:	ee10 3a10 	vmov	r3, s0
 80106f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80106f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80106f8:	4323      	orrs	r3, r4
 80106fa:	d10c      	bne.n	8010716 <__ieee754_asin+0x3e>
 80106fc:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8010870 <__ieee754_asin+0x198>
 8010700:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8010878 <__ieee754_asin+0x1a0>
 8010704:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010708:	eea0 7b06 	vfma.f64	d7, d0, d6
 801070c:	eeb0 0b47 	vmov.f64	d0, d7
 8010710:	ecbd 8b06 	vpop	{d8-d10}
 8010714:	bd38      	pop	{r3, r4, r5, pc}
 8010716:	ee30 7b40 	vsub.f64	d7, d0, d0
 801071a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801071e:	e7f7      	b.n	8010710 <__ieee754_asin+0x38>
 8010720:	4b72      	ldr	r3, [pc, #456]	; (80108ec <__ieee754_asin+0x214>)
 8010722:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8010726:	429c      	cmp	r4, r3
 8010728:	dc0b      	bgt.n	8010742 <__ieee754_asin+0x6a>
 801072a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 801072e:	da52      	bge.n	80107d6 <__ieee754_asin+0xfe>
 8010730:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8010880 <__ieee754_asin+0x1a8>
 8010734:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010738:	eeb4 7bc9 	vcmpe.f64	d7, d9
 801073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010740:	dce6      	bgt.n	8010710 <__ieee754_asin+0x38>
 8010742:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010746:	f000 fe32 	bl	80113ae <fabs>
 801074a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010888 <__ieee754_asin+0x1b0>
 801074e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010752:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010756:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010890 <__ieee754_asin+0x1b8>
 801075a:	eeb0 0b48 	vmov.f64	d0, d8
 801075e:	eea8 6b07 	vfma.f64	d6, d8, d7
 8010762:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010898 <__ieee754_asin+0x1c0>
 8010766:	eea6 7b08 	vfma.f64	d7, d6, d8
 801076a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80108a0 <__ieee754_asin+0x1c8>
 801076e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 80108a8 <__ieee754_asin+0x1d0>
 8010772:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010776:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 80108b0 <__ieee754_asin+0x1d8>
 801077a:	eea6 7b08 	vfma.f64	d7, d6, d8
 801077e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80108b8 <__ieee754_asin+0x1e0>
 8010782:	eea7 ab08 	vfma.f64	d10, d7, d8
 8010786:	ee2a ab08 	vmul.f64	d10, d10, d8
 801078a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80108c0 <__ieee754_asin+0x1e8>
 801078e:	eea8 7b06 	vfma.f64	d7, d8, d6
 8010792:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80108c8 <__ieee754_asin+0x1f0>
 8010796:	eea7 6b08 	vfma.f64	d6, d7, d8
 801079a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80108d0 <__ieee754_asin+0x1f8>
 801079e:	eea6 7b08 	vfma.f64	d7, d6, d8
 80107a2:	eea7 9b08 	vfma.f64	d9, d7, d8
 80107a6:	f000 f9eb 	bl	8010b80 <__ieee754_sqrt>
 80107aa:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 80107ae:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80107b2:	4b4f      	ldr	r3, [pc, #316]	; (80108f0 <__ieee754_asin+0x218>)
 80107b4:	429c      	cmp	r4, r3
 80107b6:	dd3d      	ble.n	8010834 <__ieee754_asin+0x15c>
 80107b8:	eea0 0b05 	vfma.f64	d0, d0, d5
 80107bc:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80108d8 <__ieee754_asin+0x200>
 80107c0:	eea0 7b04 	vfma.f64	d7, d0, d4
 80107c4:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8010878 <__ieee754_asin+0x1a0>
 80107c8:	ee30 0b47 	vsub.f64	d0, d0, d7
 80107cc:	2d00      	cmp	r5, #0
 80107ce:	bfd8      	it	le
 80107d0:	eeb1 0b40 	vnegle.f64	d0, d0
 80107d4:	e79c      	b.n	8010710 <__ieee754_asin+0x38>
 80107d6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010888 <__ieee754_asin+0x1b0>
 80107da:	ee20 7b00 	vmul.f64	d7, d0, d0
 80107de:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010890 <__ieee754_asin+0x1b8>
 80107e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80107e6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010898 <__ieee754_asin+0x1c0>
 80107ea:	eea6 5b07 	vfma.f64	d5, d6, d7
 80107ee:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80108a0 <__ieee754_asin+0x1c8>
 80107f2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80107f6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80108b0 <__ieee754_asin+0x1d8>
 80107fa:	eea6 5b07 	vfma.f64	d5, d6, d7
 80107fe:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80108a8 <__ieee754_asin+0x1d0>
 8010802:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 80108b8 <__ieee754_asin+0x1e0>
 8010806:	eea5 6b07 	vfma.f64	d6, d5, d7
 801080a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801080e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80108c0 <__ieee754_asin+0x1e8>
 8010812:	eea7 5b04 	vfma.f64	d5, d7, d4
 8010816:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80108c8 <__ieee754_asin+0x1f0>
 801081a:	eea5 4b07 	vfma.f64	d4, d5, d7
 801081e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80108d0 <__ieee754_asin+0x1f8>
 8010822:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010826:	eea5 9b07 	vfma.f64	d9, d5, d7
 801082a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801082e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8010832:	e76d      	b.n	8010710 <__ieee754_asin+0x38>
 8010834:	ec53 2b10 	vmov	r2, r3, d0
 8010838:	2200      	movs	r2, #0
 801083a:	ec43 2b16 	vmov	d6, r2, r3
 801083e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010842:	eea6 8b46 	vfms.f64	d8, d6, d6
 8010846:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801084a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8010870 <__ieee754_asin+0x198>
 801084e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010852:	eea3 7b44 	vfms.f64	d7, d3, d4
 8010856:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801085a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80108e0 <__ieee754_asin+0x208>
 801085e:	eeb0 0b45 	vmov.f64	d0, d5
 8010862:	eea6 0b44 	vfms.f64	d0, d6, d4
 8010866:	ee37 0b40 	vsub.f64	d0, d7, d0
 801086a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801086e:	e7ad      	b.n	80107cc <__ieee754_asin+0xf4>
 8010870:	33145c07 	.word	0x33145c07
 8010874:	3c91a626 	.word	0x3c91a626
 8010878:	54442d18 	.word	0x54442d18
 801087c:	3ff921fb 	.word	0x3ff921fb
 8010880:	8800759c 	.word	0x8800759c
 8010884:	7e37e43c 	.word	0x7e37e43c
 8010888:	0dfdf709 	.word	0x0dfdf709
 801088c:	3f023de1 	.word	0x3f023de1
 8010890:	7501b288 	.word	0x7501b288
 8010894:	3f49efe0 	.word	0x3f49efe0
 8010898:	b5688f3b 	.word	0xb5688f3b
 801089c:	bfa48228 	.word	0xbfa48228
 80108a0:	0e884455 	.word	0x0e884455
 80108a4:	3fc9c155 	.word	0x3fc9c155
 80108a8:	55555555 	.word	0x55555555
 80108ac:	3fc55555 	.word	0x3fc55555
 80108b0:	03eb6f7d 	.word	0x03eb6f7d
 80108b4:	bfd4d612 	.word	0xbfd4d612
 80108b8:	b12e9282 	.word	0xb12e9282
 80108bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80108c0:	1b8d0159 	.word	0x1b8d0159
 80108c4:	bfe6066c 	.word	0xbfe6066c
 80108c8:	9c598ac8 	.word	0x9c598ac8
 80108cc:	40002ae5 	.word	0x40002ae5
 80108d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80108d4:	c0033a27 	.word	0xc0033a27
 80108d8:	33145c07 	.word	0x33145c07
 80108dc:	bc91a626 	.word	0xbc91a626
 80108e0:	54442d18 	.word	0x54442d18
 80108e4:	3fe921fb 	.word	0x3fe921fb
 80108e8:	3fefffff 	.word	0x3fefffff
 80108ec:	3fdfffff 	.word	0x3fdfffff
 80108f0:	3fef3332 	.word	0x3fef3332
 80108f4:	00000000 	.word	0x00000000

080108f8 <__ieee754_rem_pio2>:
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	eeb0 7b40 	vmov.f64	d7, d0
 80108fe:	ee17 5a90 	vmov	r5, s15
 8010902:	4b99      	ldr	r3, [pc, #612]	; (8010b68 <__ieee754_rem_pio2+0x270>)
 8010904:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010908:	429e      	cmp	r6, r3
 801090a:	b088      	sub	sp, #32
 801090c:	4604      	mov	r4, r0
 801090e:	dc07      	bgt.n	8010920 <__ieee754_rem_pio2+0x28>
 8010910:	2200      	movs	r2, #0
 8010912:	2300      	movs	r3, #0
 8010914:	ed84 0b00 	vstr	d0, [r4]
 8010918:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801091c:	2000      	movs	r0, #0
 801091e:	e01b      	b.n	8010958 <__ieee754_rem_pio2+0x60>
 8010920:	4b92      	ldr	r3, [pc, #584]	; (8010b6c <__ieee754_rem_pio2+0x274>)
 8010922:	429e      	cmp	r6, r3
 8010924:	dc3b      	bgt.n	801099e <__ieee754_rem_pio2+0xa6>
 8010926:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801092a:	2d00      	cmp	r5, #0
 801092c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8010b28 <__ieee754_rem_pio2+0x230>
 8010930:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010934:	dd19      	ble.n	801096a <__ieee754_rem_pio2+0x72>
 8010936:	ee30 7b46 	vsub.f64	d7, d0, d6
 801093a:	429e      	cmp	r6, r3
 801093c:	d00e      	beq.n	801095c <__ieee754_rem_pio2+0x64>
 801093e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010b30 <__ieee754_rem_pio2+0x238>
 8010942:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010946:	ee37 7b45 	vsub.f64	d7, d7, d5
 801094a:	ed84 5b00 	vstr	d5, [r4]
 801094e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010952:	ed84 7b02 	vstr	d7, [r4, #8]
 8010956:	2001      	movs	r0, #1
 8010958:	b008      	add	sp, #32
 801095a:	bd70      	pop	{r4, r5, r6, pc}
 801095c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010b38 <__ieee754_rem_pio2+0x240>
 8010960:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010964:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010b40 <__ieee754_rem_pio2+0x248>
 8010968:	e7eb      	b.n	8010942 <__ieee754_rem_pio2+0x4a>
 801096a:	429e      	cmp	r6, r3
 801096c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010970:	d00e      	beq.n	8010990 <__ieee754_rem_pio2+0x98>
 8010972:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8010b30 <__ieee754_rem_pio2+0x238>
 8010976:	ee37 5b06 	vadd.f64	d5, d7, d6
 801097a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801097e:	ed84 5b00 	vstr	d5, [r4]
 8010982:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801098a:	ed84 7b02 	vstr	d7, [r4, #8]
 801098e:	e7e3      	b.n	8010958 <__ieee754_rem_pio2+0x60>
 8010990:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010b38 <__ieee754_rem_pio2+0x240>
 8010994:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010998:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010b40 <__ieee754_rem_pio2+0x248>
 801099c:	e7eb      	b.n	8010976 <__ieee754_rem_pio2+0x7e>
 801099e:	4b74      	ldr	r3, [pc, #464]	; (8010b70 <__ieee754_rem_pio2+0x278>)
 80109a0:	429e      	cmp	r6, r3
 80109a2:	dc70      	bgt.n	8010a86 <__ieee754_rem_pio2+0x18e>
 80109a4:	f000 fd03 	bl	80113ae <fabs>
 80109a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80109ac:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010b48 <__ieee754_rem_pio2+0x250>
 80109b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80109b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80109b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80109bc:	ee17 0a90 	vmov	r0, s15
 80109c0:	eeb1 4b45 	vneg.f64	d4, d5
 80109c4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010b28 <__ieee754_rem_pio2+0x230>
 80109c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80109cc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010b30 <__ieee754_rem_pio2+0x238>
 80109d0:	281f      	cmp	r0, #31
 80109d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80109d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80109da:	dc08      	bgt.n	80109ee <__ieee754_rem_pio2+0xf6>
 80109dc:	4b65      	ldr	r3, [pc, #404]	; (8010b74 <__ieee754_rem_pio2+0x27c>)
 80109de:	1e42      	subs	r2, r0, #1
 80109e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109e4:	42b3      	cmp	r3, r6
 80109e6:	d002      	beq.n	80109ee <__ieee754_rem_pio2+0xf6>
 80109e8:	ed84 6b00 	vstr	d6, [r4]
 80109ec:	e026      	b.n	8010a3c <__ieee754_rem_pio2+0x144>
 80109ee:	ee16 3a90 	vmov	r3, s13
 80109f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80109f6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80109fa:	2b10      	cmp	r3, #16
 80109fc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010a00:	ddf2      	ble.n	80109e8 <__ieee754_rem_pio2+0xf0>
 8010a02:	eeb0 6b40 	vmov.f64	d6, d0
 8010a06:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010b38 <__ieee754_rem_pio2+0x240>
 8010a0a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8010b40 <__ieee754_rem_pio2+0x248>
 8010a0e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8010a12:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010a16:	eea4 0b07 	vfma.f64	d0, d4, d7
 8010a1a:	eeb0 7b40 	vmov.f64	d7, d0
 8010a1e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010a22:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010a26:	ee13 3a90 	vmov	r3, s7
 8010a2a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010a2e:	1ad3      	subs	r3, r2, r3
 8010a30:	2b31      	cmp	r3, #49	; 0x31
 8010a32:	dc17      	bgt.n	8010a64 <__ieee754_rem_pio2+0x16c>
 8010a34:	eeb0 0b46 	vmov.f64	d0, d6
 8010a38:	ed84 3b00 	vstr	d3, [r4]
 8010a3c:	ed94 6b00 	vldr	d6, [r4]
 8010a40:	2d00      	cmp	r5, #0
 8010a42:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010a46:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010a4a:	ed84 0b02 	vstr	d0, [r4, #8]
 8010a4e:	da83      	bge.n	8010958 <__ieee754_rem_pio2+0x60>
 8010a50:	eeb1 6b46 	vneg.f64	d6, d6
 8010a54:	eeb1 0b40 	vneg.f64	d0, d0
 8010a58:	ed84 6b00 	vstr	d6, [r4]
 8010a5c:	ed84 0b02 	vstr	d0, [r4, #8]
 8010a60:	4240      	negs	r0, r0
 8010a62:	e779      	b.n	8010958 <__ieee754_rem_pio2+0x60>
 8010a64:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8010b50 <__ieee754_rem_pio2+0x258>
 8010a68:	eeb0 0b46 	vmov.f64	d0, d6
 8010a6c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010a70:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010a74:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8010b58 <__ieee754_rem_pio2+0x260>
 8010a78:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010a7c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010a80:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010a84:	e7b0      	b.n	80109e8 <__ieee754_rem_pio2+0xf0>
 8010a86:	4b3c      	ldr	r3, [pc, #240]	; (8010b78 <__ieee754_rem_pio2+0x280>)
 8010a88:	429e      	cmp	r6, r3
 8010a8a:	dd06      	ble.n	8010a9a <__ieee754_rem_pio2+0x1a2>
 8010a8c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010a90:	ed80 7b02 	vstr	d7, [r0, #8]
 8010a94:	ed80 7b00 	vstr	d7, [r0]
 8010a98:	e740      	b.n	801091c <__ieee754_rem_pio2+0x24>
 8010a9a:	1532      	asrs	r2, r6, #20
 8010a9c:	ee10 0a10 	vmov	r0, s0
 8010aa0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010aa4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010aa8:	ec41 0b17 	vmov	d7, r0, r1
 8010aac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010ab0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8010b60 <__ieee754_rem_pio2+0x268>
 8010ab4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010ab8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010abc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010ac0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010ac4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010ac8:	a902      	add	r1, sp, #8
 8010aca:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010ace:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ad2:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010ad6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010ada:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ade:	2603      	movs	r6, #3
 8010ae0:	4608      	mov	r0, r1
 8010ae2:	ed91 7b04 	vldr	d7, [r1, #16]
 8010ae6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aee:	4633      	mov	r3, r6
 8010af0:	f1a1 0108 	sub.w	r1, r1, #8
 8010af4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8010af8:	d0f3      	beq.n	8010ae2 <__ieee754_rem_pio2+0x1ea>
 8010afa:	4920      	ldr	r1, [pc, #128]	; (8010b7c <__ieee754_rem_pio2+0x284>)
 8010afc:	9101      	str	r1, [sp, #4]
 8010afe:	2102      	movs	r1, #2
 8010b00:	9100      	str	r1, [sp, #0]
 8010b02:	4621      	mov	r1, r4
 8010b04:	f000 f8ac 	bl	8010c60 <__kernel_rem_pio2>
 8010b08:	2d00      	cmp	r5, #0
 8010b0a:	f6bf af25 	bge.w	8010958 <__ieee754_rem_pio2+0x60>
 8010b0e:	ed94 7b00 	vldr	d7, [r4]
 8010b12:	eeb1 7b47 	vneg.f64	d7, d7
 8010b16:	ed84 7b00 	vstr	d7, [r4]
 8010b1a:	ed94 7b02 	vldr	d7, [r4, #8]
 8010b1e:	eeb1 7b47 	vneg.f64	d7, d7
 8010b22:	ed84 7b02 	vstr	d7, [r4, #8]
 8010b26:	e79b      	b.n	8010a60 <__ieee754_rem_pio2+0x168>
 8010b28:	54400000 	.word	0x54400000
 8010b2c:	3ff921fb 	.word	0x3ff921fb
 8010b30:	1a626331 	.word	0x1a626331
 8010b34:	3dd0b461 	.word	0x3dd0b461
 8010b38:	1a600000 	.word	0x1a600000
 8010b3c:	3dd0b461 	.word	0x3dd0b461
 8010b40:	2e037073 	.word	0x2e037073
 8010b44:	3ba3198a 	.word	0x3ba3198a
 8010b48:	6dc9c883 	.word	0x6dc9c883
 8010b4c:	3fe45f30 	.word	0x3fe45f30
 8010b50:	2e000000 	.word	0x2e000000
 8010b54:	3ba3198a 	.word	0x3ba3198a
 8010b58:	252049c1 	.word	0x252049c1
 8010b5c:	397b839a 	.word	0x397b839a
 8010b60:	00000000 	.word	0x00000000
 8010b64:	41700000 	.word	0x41700000
 8010b68:	3fe921fb 	.word	0x3fe921fb
 8010b6c:	4002d97b 	.word	0x4002d97b
 8010b70:	413921fb 	.word	0x413921fb
 8010b74:	080128e0 	.word	0x080128e0
 8010b78:	7fefffff 	.word	0x7fefffff
 8010b7c:	08012960 	.word	0x08012960

08010b80 <__ieee754_sqrt>:
 8010b80:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010b84:	4770      	bx	lr
	...

08010b88 <__kernel_cos>:
 8010b88:	ee10 1a90 	vmov	r1, s1
 8010b8c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010b90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010b94:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010b98:	da05      	bge.n	8010ba6 <__kernel_cos+0x1e>
 8010b9a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010b9e:	ee17 3a90 	vmov	r3, s15
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d03d      	beq.n	8010c22 <__kernel_cos+0x9a>
 8010ba6:	ee20 3b00 	vmul.f64	d3, d0, d0
 8010baa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010c28 <__kernel_cos+0xa0>
 8010bae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010c30 <__kernel_cos+0xa8>
 8010bb2:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010bb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010c38 <__kernel_cos+0xb0>
 8010bba:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010bbe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010c40 <__kernel_cos+0xb8>
 8010bc2:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010bc6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010c48 <__kernel_cos+0xc0>
 8010bca:	4b23      	ldr	r3, [pc, #140]	; (8010c58 <__kernel_cos+0xd0>)
 8010bcc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010bd0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010c50 <__kernel_cos+0xc8>
 8010bd4:	4299      	cmp	r1, r3
 8010bd6:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010bda:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010bde:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010be2:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010be6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010bea:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010bee:	dc04      	bgt.n	8010bfa <__kernel_cos+0x72>
 8010bf0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010bf4:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010bf8:	4770      	bx	lr
 8010bfa:	4b18      	ldr	r3, [pc, #96]	; (8010c5c <__kernel_cos+0xd4>)
 8010bfc:	4299      	cmp	r1, r3
 8010bfe:	dc0d      	bgt.n	8010c1c <__kernel_cos+0x94>
 8010c00:	2200      	movs	r2, #0
 8010c02:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010c06:	ec43 2b15 	vmov	d5, r2, r3
 8010c0a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8010c0e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010c12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010c16:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010c1a:	4770      	bx	lr
 8010c1c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010c20:	e7f3      	b.n	8010c0a <__kernel_cos+0x82>
 8010c22:	eeb0 0b44 	vmov.f64	d0, d4
 8010c26:	4770      	bx	lr
 8010c28:	be8838d4 	.word	0xbe8838d4
 8010c2c:	bda8fae9 	.word	0xbda8fae9
 8010c30:	bdb4b1c4 	.word	0xbdb4b1c4
 8010c34:	3e21ee9e 	.word	0x3e21ee9e
 8010c38:	809c52ad 	.word	0x809c52ad
 8010c3c:	be927e4f 	.word	0xbe927e4f
 8010c40:	19cb1590 	.word	0x19cb1590
 8010c44:	3efa01a0 	.word	0x3efa01a0
 8010c48:	16c15177 	.word	0x16c15177
 8010c4c:	bf56c16c 	.word	0xbf56c16c
 8010c50:	5555554c 	.word	0x5555554c
 8010c54:	3fa55555 	.word	0x3fa55555
 8010c58:	3fd33332 	.word	0x3fd33332
 8010c5c:	3fe90000 	.word	0x3fe90000

08010c60 <__kernel_rem_pio2>:
 8010c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c64:	ed2d 8b06 	vpush	{d8-d10}
 8010c68:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8010c6c:	460f      	mov	r7, r1
 8010c6e:	9002      	str	r0, [sp, #8]
 8010c70:	49c5      	ldr	r1, [pc, #788]	; (8010f88 <__kernel_rem_pio2+0x328>)
 8010c72:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8010c74:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8010c78:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8010c7c:	9301      	str	r3, [sp, #4]
 8010c7e:	f112 0f14 	cmn.w	r2, #20
 8010c82:	bfa8      	it	ge
 8010c84:	2018      	movge	r0, #24
 8010c86:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010c8a:	bfb8      	it	lt
 8010c8c:	2000      	movlt	r0, #0
 8010c8e:	f06f 0417 	mvn.w	r4, #23
 8010c92:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8010f70 <__kernel_rem_pio2+0x310>
 8010c96:	bfa4      	itt	ge
 8010c98:	f1a2 0a03 	subge.w	sl, r2, #3
 8010c9c:	fb9a f0f0 	sdivge	r0, sl, r0
 8010ca0:	fb00 4404 	mla	r4, r0, r4, r4
 8010ca4:	1a46      	subs	r6, r0, r1
 8010ca6:	4414      	add	r4, r2
 8010ca8:	eb09 0c01 	add.w	ip, r9, r1
 8010cac:	ad1a      	add	r5, sp, #104	; 0x68
 8010cae:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	4562      	cmp	r2, ip
 8010cb6:	dd10      	ble.n	8010cda <__kernel_rem_pio2+0x7a>
 8010cb8:	9a01      	ldr	r2, [sp, #4]
 8010cba:	ab1a      	add	r3, sp, #104	; 0x68
 8010cbc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010cc0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8010cc4:	f04f 0c00 	mov.w	ip, #0
 8010cc8:	45cc      	cmp	ip, r9
 8010cca:	dc26      	bgt.n	8010d1a <__kernel_rem_pio2+0xba>
 8010ccc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8010f70 <__kernel_rem_pio2+0x310>
 8010cd0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010cd4:	4616      	mov	r6, r2
 8010cd6:	2500      	movs	r5, #0
 8010cd8:	e015      	b.n	8010d06 <__kernel_rem_pio2+0xa6>
 8010cda:	42d6      	cmn	r6, r2
 8010cdc:	d409      	bmi.n	8010cf2 <__kernel_rem_pio2+0x92>
 8010cde:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8010ce2:	ee07 3a90 	vmov	s15, r3
 8010ce6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010cea:	eca5 7b02 	vstmia	r5!, {d7}
 8010cee:	3201      	adds	r2, #1
 8010cf0:	e7e0      	b.n	8010cb4 <__kernel_rem_pio2+0x54>
 8010cf2:	eeb0 7b46 	vmov.f64	d7, d6
 8010cf6:	e7f8      	b.n	8010cea <__kernel_rem_pio2+0x8a>
 8010cf8:	ecb8 5b02 	vldmia	r8!, {d5}
 8010cfc:	ed96 6b00 	vldr	d6, [r6]
 8010d00:	3501      	adds	r5, #1
 8010d02:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010d06:	428d      	cmp	r5, r1
 8010d08:	f1a6 0608 	sub.w	r6, r6, #8
 8010d0c:	ddf4      	ble.n	8010cf8 <__kernel_rem_pio2+0x98>
 8010d0e:	ecaa 7b02 	vstmia	sl!, {d7}
 8010d12:	f10c 0c01 	add.w	ip, ip, #1
 8010d16:	3208      	adds	r2, #8
 8010d18:	e7d6      	b.n	8010cc8 <__kernel_rem_pio2+0x68>
 8010d1a:	ab06      	add	r3, sp, #24
 8010d1c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8010f78 <__kernel_rem_pio2+0x318>
 8010d20:	ed9f ab97 	vldr	d10, [pc, #604]	; 8010f80 <__kernel_rem_pio2+0x320>
 8010d24:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8010d28:	9303      	str	r3, [sp, #12]
 8010d2a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8010d2e:	464d      	mov	r5, r9
 8010d30:	00eb      	lsls	r3, r5, #3
 8010d32:	9304      	str	r3, [sp, #16]
 8010d34:	ab92      	add	r3, sp, #584	; 0x248
 8010d36:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8010d3a:	f10d 0b18 	add.w	fp, sp, #24
 8010d3e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8010d40:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8010d44:	465e      	mov	r6, fp
 8010d46:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	f1a2 0208 	sub.w	r2, r2, #8
 8010d52:	dc4c      	bgt.n	8010dee <__kernel_rem_pio2+0x18e>
 8010d54:	4620      	mov	r0, r4
 8010d56:	9105      	str	r1, [sp, #20]
 8010d58:	f000 fbae 	bl	80114b8 <scalbn>
 8010d5c:	eeb0 8b40 	vmov.f64	d8, d0
 8010d60:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010d64:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010d68:	f000 fb2a 	bl	80113c0 <floor>
 8010d6c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010d70:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010d74:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010d78:	2c00      	cmp	r4, #0
 8010d7a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010d7e:	ee17 8a90 	vmov	r8, s15
 8010d82:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010d86:	9905      	ldr	r1, [sp, #20]
 8010d88:	dd43      	ble.n	8010e12 <__kernel_rem_pio2+0x1b2>
 8010d8a:	1e68      	subs	r0, r5, #1
 8010d8c:	ab06      	add	r3, sp, #24
 8010d8e:	f1c4 0c18 	rsb	ip, r4, #24
 8010d92:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8010d96:	fa46 f20c 	asr.w	r2, r6, ip
 8010d9a:	4490      	add	r8, r2
 8010d9c:	fa02 f20c 	lsl.w	r2, r2, ip
 8010da0:	1ab6      	subs	r6, r6, r2
 8010da2:	f1c4 0217 	rsb	r2, r4, #23
 8010da6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8010daa:	4116      	asrs	r6, r2
 8010dac:	2e00      	cmp	r6, #0
 8010dae:	dd3f      	ble.n	8010e30 <__kernel_rem_pio2+0x1d0>
 8010db0:	f04f 0c00 	mov.w	ip, #0
 8010db4:	f108 0801 	add.w	r8, r8, #1
 8010db8:	4660      	mov	r0, ip
 8010dba:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010dbe:	4565      	cmp	r5, ip
 8010dc0:	dc6e      	bgt.n	8010ea0 <__kernel_rem_pio2+0x240>
 8010dc2:	2c00      	cmp	r4, #0
 8010dc4:	dd04      	ble.n	8010dd0 <__kernel_rem_pio2+0x170>
 8010dc6:	2c01      	cmp	r4, #1
 8010dc8:	d07f      	beq.n	8010eca <__kernel_rem_pio2+0x26a>
 8010dca:	2c02      	cmp	r4, #2
 8010dcc:	f000 8087 	beq.w	8010ede <__kernel_rem_pio2+0x27e>
 8010dd0:	2e02      	cmp	r6, #2
 8010dd2:	d12d      	bne.n	8010e30 <__kernel_rem_pio2+0x1d0>
 8010dd4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010dd8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010ddc:	b340      	cbz	r0, 8010e30 <__kernel_rem_pio2+0x1d0>
 8010dde:	4620      	mov	r0, r4
 8010de0:	9105      	str	r1, [sp, #20]
 8010de2:	f000 fb69 	bl	80114b8 <scalbn>
 8010de6:	9905      	ldr	r1, [sp, #20]
 8010de8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010dec:	e020      	b.n	8010e30 <__kernel_rem_pio2+0x1d0>
 8010dee:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010df2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010df6:	3801      	subs	r0, #1
 8010df8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010dfc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010e00:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010e04:	eca6 0a01 	vstmia	r6!, {s0}
 8010e08:	ed92 0b00 	vldr	d0, [r2]
 8010e0c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010e10:	e79c      	b.n	8010d4c <__kernel_rem_pio2+0xec>
 8010e12:	d105      	bne.n	8010e20 <__kernel_rem_pio2+0x1c0>
 8010e14:	1e6a      	subs	r2, r5, #1
 8010e16:	ab06      	add	r3, sp, #24
 8010e18:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8010e1c:	15f6      	asrs	r6, r6, #23
 8010e1e:	e7c5      	b.n	8010dac <__kernel_rem_pio2+0x14c>
 8010e20:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010e24:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e2c:	da36      	bge.n	8010e9c <__kernel_rem_pio2+0x23c>
 8010e2e:	2600      	movs	r6, #0
 8010e30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e38:	f040 80aa 	bne.w	8010f90 <__kernel_rem_pio2+0x330>
 8010e3c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8010e40:	4658      	mov	r0, fp
 8010e42:	2200      	movs	r2, #0
 8010e44:	4548      	cmp	r0, r9
 8010e46:	da52      	bge.n	8010eee <__kernel_rem_pio2+0x28e>
 8010e48:	2a00      	cmp	r2, #0
 8010e4a:	f000 8081 	beq.w	8010f50 <__kernel_rem_pio2+0x2f0>
 8010e4e:	ab06      	add	r3, sp, #24
 8010e50:	3c18      	subs	r4, #24
 8010e52:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f000 8087 	beq.w	8010f6a <__kernel_rem_pio2+0x30a>
 8010e5c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010e60:	4620      	mov	r0, r4
 8010e62:	f000 fb29 	bl	80114b8 <scalbn>
 8010e66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010e6a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8010f78 <__kernel_rem_pio2+0x318>
 8010e6e:	a96a      	add	r1, sp, #424	; 0x1a8
 8010e70:	f103 0208 	add.w	r2, r3, #8
 8010e74:	1888      	adds	r0, r1, r2
 8010e76:	4659      	mov	r1, fp
 8010e78:	2900      	cmp	r1, #0
 8010e7a:	f280 80b7 	bge.w	8010fec <__kernel_rem_pio2+0x38c>
 8010e7e:	4659      	mov	r1, fp
 8010e80:	2900      	cmp	r1, #0
 8010e82:	f2c0 80d5 	blt.w	8011030 <__kernel_rem_pio2+0x3d0>
 8010e86:	a86a      	add	r0, sp, #424	; 0x1a8
 8010e88:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8010e8c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8010f70 <__kernel_rem_pio2+0x310>
 8010e90:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8010f8c <__kernel_rem_pio2+0x32c>
 8010e94:	2400      	movs	r4, #0
 8010e96:	ebab 0001 	sub.w	r0, fp, r1
 8010e9a:	e0be      	b.n	801101a <__kernel_rem_pio2+0x3ba>
 8010e9c:	2602      	movs	r6, #2
 8010e9e:	e787      	b.n	8010db0 <__kernel_rem_pio2+0x150>
 8010ea0:	f8db 2000 	ldr.w	r2, [fp]
 8010ea4:	b958      	cbnz	r0, 8010ebe <__kernel_rem_pio2+0x25e>
 8010ea6:	b122      	cbz	r2, 8010eb2 <__kernel_rem_pio2+0x252>
 8010ea8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010eac:	f8cb 2000 	str.w	r2, [fp]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	f10c 0c01 	add.w	ip, ip, #1
 8010eb6:	f10b 0b04 	add.w	fp, fp, #4
 8010eba:	4610      	mov	r0, r2
 8010ebc:	e77f      	b.n	8010dbe <__kernel_rem_pio2+0x15e>
 8010ebe:	ebae 0202 	sub.w	r2, lr, r2
 8010ec2:	f8cb 2000 	str.w	r2, [fp]
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	e7f3      	b.n	8010eb2 <__kernel_rem_pio2+0x252>
 8010eca:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8010ece:	ab06      	add	r3, sp, #24
 8010ed0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8010ed4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8010ed8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8010edc:	e778      	b.n	8010dd0 <__kernel_rem_pio2+0x170>
 8010ede:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8010ee2:	ab06      	add	r3, sp, #24
 8010ee4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8010ee8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8010eec:	e7f4      	b.n	8010ed8 <__kernel_rem_pio2+0x278>
 8010eee:	ab06      	add	r3, sp, #24
 8010ef0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010ef4:	3801      	subs	r0, #1
 8010ef6:	431a      	orrs	r2, r3
 8010ef8:	e7a4      	b.n	8010e44 <__kernel_rem_pio2+0x1e4>
 8010efa:	f10c 0c01 	add.w	ip, ip, #1
 8010efe:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8010f02:	2800      	cmp	r0, #0
 8010f04:	d0f9      	beq.n	8010efa <__kernel_rem_pio2+0x29a>
 8010f06:	9b04      	ldr	r3, [sp, #16]
 8010f08:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010f0c:	eb0d 0203 	add.w	r2, sp, r3
 8010f10:	9b01      	ldr	r3, [sp, #4]
 8010f12:	18e8      	adds	r0, r5, r3
 8010f14:	ab1a      	add	r3, sp, #104	; 0x68
 8010f16:	1c6e      	adds	r6, r5, #1
 8010f18:	3a98      	subs	r2, #152	; 0x98
 8010f1a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010f1e:	4465      	add	r5, ip
 8010f20:	42b5      	cmp	r5, r6
 8010f22:	f6ff af05 	blt.w	8010d30 <__kernel_rem_pio2+0xd0>
 8010f26:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8010f2a:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010f2e:	ee07 3a90 	vmov	s15, r3
 8010f32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010f36:	f04f 0c00 	mov.w	ip, #0
 8010f3a:	eca0 7b02 	vstmia	r0!, {d7}
 8010f3e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8010f70 <__kernel_rem_pio2+0x310>
 8010f42:	4680      	mov	r8, r0
 8010f44:	458c      	cmp	ip, r1
 8010f46:	dd07      	ble.n	8010f58 <__kernel_rem_pio2+0x2f8>
 8010f48:	eca2 7b02 	vstmia	r2!, {d7}
 8010f4c:	3601      	adds	r6, #1
 8010f4e:	e7e7      	b.n	8010f20 <__kernel_rem_pio2+0x2c0>
 8010f50:	9a03      	ldr	r2, [sp, #12]
 8010f52:	f04f 0c01 	mov.w	ip, #1
 8010f56:	e7d2      	b.n	8010efe <__kernel_rem_pio2+0x29e>
 8010f58:	ecbe 5b02 	vldmia	lr!, {d5}
 8010f5c:	ed38 6b02 	vldmdb	r8!, {d6}
 8010f60:	f10c 0c01 	add.w	ip, ip, #1
 8010f64:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010f68:	e7ec      	b.n	8010f44 <__kernel_rem_pio2+0x2e4>
 8010f6a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010f6e:	e76e      	b.n	8010e4e <__kernel_rem_pio2+0x1ee>
	...
 8010f7c:	3e700000 	.word	0x3e700000
 8010f80:	00000000 	.word	0x00000000
 8010f84:	41700000 	.word	0x41700000
 8010f88:	08013318 	.word	0x08013318
 8010f8c:	080132d8 	.word	0x080132d8
 8010f90:	4260      	negs	r0, r4
 8010f92:	eeb0 0b48 	vmov.f64	d0, d8
 8010f96:	f000 fa8f 	bl	80114b8 <scalbn>
 8010f9a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011178 <__kernel_rem_pio2+0x518>
 8010f9e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa6:	db18      	blt.n	8010fda <__kernel_rem_pio2+0x37a>
 8010fa8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011180 <__kernel_rem_pio2+0x520>
 8010fac:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010fb0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010fb4:	aa06      	add	r2, sp, #24
 8010fb6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010fba:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010fbe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010fc2:	f105 0b01 	add.w	fp, r5, #1
 8010fc6:	ee10 3a10 	vmov	r3, s0
 8010fca:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010fce:	ee17 3a10 	vmov	r3, s14
 8010fd2:	3418      	adds	r4, #24
 8010fd4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8010fd8:	e740      	b.n	8010e5c <__kernel_rem_pio2+0x1fc>
 8010fda:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010fde:	aa06      	add	r2, sp, #24
 8010fe0:	ee10 3a10 	vmov	r3, s0
 8010fe4:	46ab      	mov	fp, r5
 8010fe6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010fea:	e737      	b.n	8010e5c <__kernel_rem_pio2+0x1fc>
 8010fec:	ac06      	add	r4, sp, #24
 8010fee:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8010ff2:	9401      	str	r4, [sp, #4]
 8010ff4:	ee07 4a90 	vmov	s15, r4
 8010ff8:	3901      	subs	r1, #1
 8010ffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010ffe:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011002:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011006:	ed20 7b02 	vstmdb	r0!, {d7}
 801100a:	e735      	b.n	8010e78 <__kernel_rem_pio2+0x218>
 801100c:	ecbc 5b02 	vldmia	ip!, {d5}
 8011010:	ecb5 6b02 	vldmia	r5!, {d6}
 8011014:	3401      	adds	r4, #1
 8011016:	eea5 7b06 	vfma.f64	d7, d5, d6
 801101a:	454c      	cmp	r4, r9
 801101c:	dc01      	bgt.n	8011022 <__kernel_rem_pio2+0x3c2>
 801101e:	4284      	cmp	r4, r0
 8011020:	ddf4      	ble.n	801100c <__kernel_rem_pio2+0x3ac>
 8011022:	ac42      	add	r4, sp, #264	; 0x108
 8011024:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8011028:	ed80 7b00 	vstr	d7, [r0]
 801102c:	3901      	subs	r1, #1
 801102e:	e727      	b.n	8010e80 <__kernel_rem_pio2+0x220>
 8011030:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8011032:	2902      	cmp	r1, #2
 8011034:	dc0a      	bgt.n	801104c <__kernel_rem_pio2+0x3ec>
 8011036:	2900      	cmp	r1, #0
 8011038:	dc2c      	bgt.n	8011094 <__kernel_rem_pio2+0x434>
 801103a:	d045      	beq.n	80110c8 <__kernel_rem_pio2+0x468>
 801103c:	f008 0007 	and.w	r0, r8, #7
 8011040:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8011044:	ecbd 8b06 	vpop	{d8-d10}
 8011048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801104e:	2a03      	cmp	r2, #3
 8011050:	d1f4      	bne.n	801103c <__kernel_rem_pio2+0x3dc>
 8011052:	aa42      	add	r2, sp, #264	; 0x108
 8011054:	4413      	add	r3, r2
 8011056:	461a      	mov	r2, r3
 8011058:	4619      	mov	r1, r3
 801105a:	4658      	mov	r0, fp
 801105c:	2800      	cmp	r0, #0
 801105e:	f1a1 0108 	sub.w	r1, r1, #8
 8011062:	dc54      	bgt.n	801110e <__kernel_rem_pio2+0x4ae>
 8011064:	4659      	mov	r1, fp
 8011066:	2901      	cmp	r1, #1
 8011068:	f1a2 0208 	sub.w	r2, r2, #8
 801106c:	dc5f      	bgt.n	801112e <__kernel_rem_pio2+0x4ce>
 801106e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011188 <__kernel_rem_pio2+0x528>
 8011072:	3308      	adds	r3, #8
 8011074:	f1bb 0f01 	cmp.w	fp, #1
 8011078:	dc69      	bgt.n	801114e <__kernel_rem_pio2+0x4ee>
 801107a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801107e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011082:	2e00      	cmp	r6, #0
 8011084:	d16a      	bne.n	801115c <__kernel_rem_pio2+0x4fc>
 8011086:	ed87 5b00 	vstr	d5, [r7]
 801108a:	ed87 6b02 	vstr	d6, [r7, #8]
 801108e:	ed87 7b04 	vstr	d7, [r7, #16]
 8011092:	e7d3      	b.n	801103c <__kernel_rem_pio2+0x3dc>
 8011094:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011188 <__kernel_rem_pio2+0x528>
 8011098:	ab42      	add	r3, sp, #264	; 0x108
 801109a:	441a      	add	r2, r3
 801109c:	465b      	mov	r3, fp
 801109e:	2b00      	cmp	r3, #0
 80110a0:	da26      	bge.n	80110f0 <__kernel_rem_pio2+0x490>
 80110a2:	b35e      	cbz	r6, 80110fc <__kernel_rem_pio2+0x49c>
 80110a4:	eeb1 7b46 	vneg.f64	d7, d6
 80110a8:	ed87 7b00 	vstr	d7, [r7]
 80110ac:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80110b0:	aa44      	add	r2, sp, #272	; 0x110
 80110b2:	2301      	movs	r3, #1
 80110b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110b8:	459b      	cmp	fp, r3
 80110ba:	da22      	bge.n	8011102 <__kernel_rem_pio2+0x4a2>
 80110bc:	b10e      	cbz	r6, 80110c2 <__kernel_rem_pio2+0x462>
 80110be:	eeb1 7b47 	vneg.f64	d7, d7
 80110c2:	ed87 7b02 	vstr	d7, [r7, #8]
 80110c6:	e7b9      	b.n	801103c <__kernel_rem_pio2+0x3dc>
 80110c8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011188 <__kernel_rem_pio2+0x528>
 80110cc:	ab42      	add	r3, sp, #264	; 0x108
 80110ce:	441a      	add	r2, r3
 80110d0:	f1bb 0f00 	cmp.w	fp, #0
 80110d4:	da05      	bge.n	80110e2 <__kernel_rem_pio2+0x482>
 80110d6:	b10e      	cbz	r6, 80110dc <__kernel_rem_pio2+0x47c>
 80110d8:	eeb1 7b47 	vneg.f64	d7, d7
 80110dc:	ed87 7b00 	vstr	d7, [r7]
 80110e0:	e7ac      	b.n	801103c <__kernel_rem_pio2+0x3dc>
 80110e2:	ed32 6b02 	vldmdb	r2!, {d6}
 80110e6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80110ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80110ee:	e7ef      	b.n	80110d0 <__kernel_rem_pio2+0x470>
 80110f0:	ed32 7b02 	vldmdb	r2!, {d7}
 80110f4:	3b01      	subs	r3, #1
 80110f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80110fa:	e7d0      	b.n	801109e <__kernel_rem_pio2+0x43e>
 80110fc:	eeb0 7b46 	vmov.f64	d7, d6
 8011100:	e7d2      	b.n	80110a8 <__kernel_rem_pio2+0x448>
 8011102:	ecb2 6b02 	vldmia	r2!, {d6}
 8011106:	3301      	adds	r3, #1
 8011108:	ee37 7b06 	vadd.f64	d7, d7, d6
 801110c:	e7d4      	b.n	80110b8 <__kernel_rem_pio2+0x458>
 801110e:	ed91 7b00 	vldr	d7, [r1]
 8011112:	ed91 5b02 	vldr	d5, [r1, #8]
 8011116:	3801      	subs	r0, #1
 8011118:	ee37 6b05 	vadd.f64	d6, d7, d5
 801111c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011120:	ed81 6b00 	vstr	d6, [r1]
 8011124:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011128:	ed81 7b02 	vstr	d7, [r1, #8]
 801112c:	e796      	b.n	801105c <__kernel_rem_pio2+0x3fc>
 801112e:	ed92 7b00 	vldr	d7, [r2]
 8011132:	ed92 5b02 	vldr	d5, [r2, #8]
 8011136:	3901      	subs	r1, #1
 8011138:	ee37 6b05 	vadd.f64	d6, d7, d5
 801113c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011140:	ed82 6b00 	vstr	d6, [r2]
 8011144:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011148:	ed82 7b02 	vstr	d7, [r2, #8]
 801114c:	e78b      	b.n	8011066 <__kernel_rem_pio2+0x406>
 801114e:	ed33 6b02 	vldmdb	r3!, {d6}
 8011152:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011156:	ee37 7b06 	vadd.f64	d7, d7, d6
 801115a:	e78b      	b.n	8011074 <__kernel_rem_pio2+0x414>
 801115c:	eeb1 5b45 	vneg.f64	d5, d5
 8011160:	eeb1 6b46 	vneg.f64	d6, d6
 8011164:	ed87 5b00 	vstr	d5, [r7]
 8011168:	eeb1 7b47 	vneg.f64	d7, d7
 801116c:	ed87 6b02 	vstr	d6, [r7, #8]
 8011170:	e78d      	b.n	801108e <__kernel_rem_pio2+0x42e>
 8011172:	bf00      	nop
 8011174:	f3af 8000 	nop.w
 8011178:	00000000 	.word	0x00000000
 801117c:	41700000 	.word	0x41700000
 8011180:	00000000 	.word	0x00000000
 8011184:	3e700000 	.word	0x3e700000
	...

08011190 <__kernel_sin>:
 8011190:	ee10 3a90 	vmov	r3, s1
 8011194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011198:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801119c:	da04      	bge.n	80111a8 <__kernel_sin+0x18>
 801119e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80111a2:	ee17 3a90 	vmov	r3, s15
 80111a6:	b35b      	cbz	r3, 8011200 <__kernel_sin+0x70>
 80111a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80111ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 80111b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011208 <__kernel_sin+0x78>
 80111b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011210 <__kernel_sin+0x80>
 80111b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80111bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011218 <__kernel_sin+0x88>
 80111c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80111c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011220 <__kernel_sin+0x90>
 80111c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80111cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011228 <__kernel_sin+0x98>
 80111d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80111d4:	b930      	cbnz	r0, 80111e4 <__kernel_sin+0x54>
 80111d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011230 <__kernel_sin+0xa0>
 80111da:	eea6 4b07 	vfma.f64	d4, d6, d7
 80111de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80111e2:	4770      	bx	lr
 80111e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80111e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80111ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 80111f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80111f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011238 <__kernel_sin+0xa8>
 80111f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80111fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop
 8011204:	f3af 8000 	nop.w
 8011208:	5acfd57c 	.word	0x5acfd57c
 801120c:	3de5d93a 	.word	0x3de5d93a
 8011210:	8a2b9ceb 	.word	0x8a2b9ceb
 8011214:	be5ae5e6 	.word	0xbe5ae5e6
 8011218:	57b1fe7d 	.word	0x57b1fe7d
 801121c:	3ec71de3 	.word	0x3ec71de3
 8011220:	19c161d5 	.word	0x19c161d5
 8011224:	bf2a01a0 	.word	0xbf2a01a0
 8011228:	1110f8a6 	.word	0x1110f8a6
 801122c:	3f811111 	.word	0x3f811111
 8011230:	55555549 	.word	0x55555549
 8011234:	bfc55555 	.word	0xbfc55555
 8011238:	55555549 	.word	0x55555549
 801123c:	3fc55555 	.word	0x3fc55555

08011240 <with_errno>:
 8011240:	b513      	push	{r0, r1, r4, lr}
 8011242:	4604      	mov	r4, r0
 8011244:	ed8d 0b00 	vstr	d0, [sp]
 8011248:	f7fe f882 	bl	800f350 <__errno>
 801124c:	ed9d 0b00 	vldr	d0, [sp]
 8011250:	6004      	str	r4, [r0, #0]
 8011252:	b002      	add	sp, #8
 8011254:	bd10      	pop	{r4, pc}

08011256 <xflow>:
 8011256:	b082      	sub	sp, #8
 8011258:	b158      	cbz	r0, 8011272 <xflow+0x1c>
 801125a:	eeb1 7b40 	vneg.f64	d7, d0
 801125e:	ed8d 7b00 	vstr	d7, [sp]
 8011262:	ed9d 7b00 	vldr	d7, [sp]
 8011266:	2022      	movs	r0, #34	; 0x22
 8011268:	ee20 0b07 	vmul.f64	d0, d0, d7
 801126c:	b002      	add	sp, #8
 801126e:	f7ff bfe7 	b.w	8011240 <with_errno>
 8011272:	eeb0 7b40 	vmov.f64	d7, d0
 8011276:	e7f2      	b.n	801125e <xflow+0x8>

08011278 <__math_uflow>:
 8011278:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011280 <__math_uflow+0x8>
 801127c:	f7ff bfeb 	b.w	8011256 <xflow>
 8011280:	00000000 	.word	0x00000000
 8011284:	10000000 	.word	0x10000000

08011288 <__math_oflow>:
 8011288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011290 <__math_oflow+0x8>
 801128c:	f7ff bfe3 	b.w	8011256 <xflow>
 8011290:	00000000 	.word	0x00000000
 8011294:	70000000 	.word	0x70000000

08011298 <__math_divzero>:
 8011298:	b082      	sub	sp, #8
 801129a:	2800      	cmp	r0, #0
 801129c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80112a0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80112a4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80112a8:	ed8d 7b00 	vstr	d7, [sp]
 80112ac:	ed9d 0b00 	vldr	d0, [sp]
 80112b0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80112c0 <__math_divzero+0x28>
 80112b4:	2022      	movs	r0, #34	; 0x22
 80112b6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80112ba:	b002      	add	sp, #8
 80112bc:	f7ff bfc0 	b.w	8011240 <with_errno>
	...

080112c8 <__math_invalid>:
 80112c8:	eeb0 7b40 	vmov.f64	d7, d0
 80112cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80112d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80112d8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80112dc:	d602      	bvs.n	80112e4 <__math_invalid+0x1c>
 80112de:	2021      	movs	r0, #33	; 0x21
 80112e0:	f7ff bfae 	b.w	8011240 <with_errno>
 80112e4:	4770      	bx	lr

080112e6 <__math_check_uflow>:
 80112e6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80112ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ee:	d102      	bne.n	80112f6 <__math_check_uflow+0x10>
 80112f0:	2022      	movs	r0, #34	; 0x22
 80112f2:	f7ff bfa5 	b.w	8011240 <with_errno>
 80112f6:	4770      	bx	lr

080112f8 <__math_check_oflow>:
 80112f8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011318 <__math_check_oflow+0x20>
 80112fc:	eeb0 7bc0 	vabs.f64	d7, d0
 8011300:	eeb4 7b46 	vcmp.f64	d7, d6
 8011304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011308:	dd02      	ble.n	8011310 <__math_check_oflow+0x18>
 801130a:	2022      	movs	r0, #34	; 0x22
 801130c:	f7ff bf98 	b.w	8011240 <with_errno>
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop
 8011314:	f3af 8000 	nop.w
 8011318:	ffffffff 	.word	0xffffffff
 801131c:	7fefffff 	.word	0x7fefffff

08011320 <with_errnof>:
 8011320:	b513      	push	{r0, r1, r4, lr}
 8011322:	4604      	mov	r4, r0
 8011324:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011328:	f7fe f812 	bl	800f350 <__errno>
 801132c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011330:	6004      	str	r4, [r0, #0]
 8011332:	b002      	add	sp, #8
 8011334:	bd10      	pop	{r4, pc}

08011336 <xflowf>:
 8011336:	b130      	cbz	r0, 8011346 <xflowf+0x10>
 8011338:	eef1 7a40 	vneg.f32	s15, s0
 801133c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011340:	2022      	movs	r0, #34	; 0x22
 8011342:	f7ff bfed 	b.w	8011320 <with_errnof>
 8011346:	eef0 7a40 	vmov.f32	s15, s0
 801134a:	e7f7      	b.n	801133c <xflowf+0x6>

0801134c <__math_uflowf>:
 801134c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011354 <__math_uflowf+0x8>
 8011350:	f7ff bff1 	b.w	8011336 <xflowf>
 8011354:	10000000 	.word	0x10000000

08011358 <__math_may_uflowf>:
 8011358:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011360 <__math_may_uflowf+0x8>
 801135c:	f7ff bfeb 	b.w	8011336 <xflowf>
 8011360:	1a200000 	.word	0x1a200000

08011364 <__math_oflowf>:
 8011364:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801136c <__math_oflowf+0x8>
 8011368:	f7ff bfe5 	b.w	8011336 <xflowf>
 801136c:	70000000 	.word	0x70000000

08011370 <__math_divzerof>:
 8011370:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011374:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011378:	2800      	cmp	r0, #0
 801137a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801137e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801138c <__math_divzerof+0x1c>
 8011382:	2022      	movs	r0, #34	; 0x22
 8011384:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011388:	f7ff bfca 	b.w	8011320 <with_errnof>
 801138c:	00000000 	.word	0x00000000

08011390 <__math_invalidf>:
 8011390:	eef0 7a40 	vmov.f32	s15, s0
 8011394:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011398:	eef4 7a67 	vcmp.f32	s15, s15
 801139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80113a4:	d602      	bvs.n	80113ac <__math_invalidf+0x1c>
 80113a6:	2021      	movs	r0, #33	; 0x21
 80113a8:	f7ff bfba 	b.w	8011320 <with_errnof>
 80113ac:	4770      	bx	lr

080113ae <fabs>:
 80113ae:	ec51 0b10 	vmov	r0, r1, d0
 80113b2:	ee10 2a10 	vmov	r2, s0
 80113b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113ba:	ec43 2b10 	vmov	d0, r2, r3
 80113be:	4770      	bx	lr

080113c0 <floor>:
 80113c0:	ee10 1a90 	vmov	r1, s1
 80113c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80113c8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80113cc:	2b13      	cmp	r3, #19
 80113ce:	b530      	push	{r4, r5, lr}
 80113d0:	ee10 0a10 	vmov	r0, s0
 80113d4:	ee10 5a10 	vmov	r5, s0
 80113d8:	dc31      	bgt.n	801143e <floor+0x7e>
 80113da:	2b00      	cmp	r3, #0
 80113dc:	da15      	bge.n	801140a <floor+0x4a>
 80113de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011498 <floor+0xd8>
 80113e2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80113e6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80113ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ee:	dd07      	ble.n	8011400 <floor+0x40>
 80113f0:	2900      	cmp	r1, #0
 80113f2:	da4e      	bge.n	8011492 <floor+0xd2>
 80113f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113f8:	4318      	orrs	r0, r3
 80113fa:	d001      	beq.n	8011400 <floor+0x40>
 80113fc:	4928      	ldr	r1, [pc, #160]	; (80114a0 <floor+0xe0>)
 80113fe:	2000      	movs	r0, #0
 8011400:	460b      	mov	r3, r1
 8011402:	4602      	mov	r2, r0
 8011404:	ec43 2b10 	vmov	d0, r2, r3
 8011408:	e020      	b.n	801144c <floor+0x8c>
 801140a:	4a26      	ldr	r2, [pc, #152]	; (80114a4 <floor+0xe4>)
 801140c:	411a      	asrs	r2, r3
 801140e:	ea01 0402 	and.w	r4, r1, r2
 8011412:	4304      	orrs	r4, r0
 8011414:	d01a      	beq.n	801144c <floor+0x8c>
 8011416:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011498 <floor+0xd8>
 801141a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801141e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011426:	ddeb      	ble.n	8011400 <floor+0x40>
 8011428:	2900      	cmp	r1, #0
 801142a:	bfbe      	ittt	lt
 801142c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011430:	fa40 f303 	asrlt.w	r3, r0, r3
 8011434:	18c9      	addlt	r1, r1, r3
 8011436:	ea21 0102 	bic.w	r1, r1, r2
 801143a:	2000      	movs	r0, #0
 801143c:	e7e0      	b.n	8011400 <floor+0x40>
 801143e:	2b33      	cmp	r3, #51	; 0x33
 8011440:	dd05      	ble.n	801144e <floor+0x8e>
 8011442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011446:	d101      	bne.n	801144c <floor+0x8c>
 8011448:	ee30 0b00 	vadd.f64	d0, d0, d0
 801144c:	bd30      	pop	{r4, r5, pc}
 801144e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011456:	40e2      	lsrs	r2, r4
 8011458:	4202      	tst	r2, r0
 801145a:	d0f7      	beq.n	801144c <floor+0x8c>
 801145c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011498 <floor+0xd8>
 8011460:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011464:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146c:	ddc8      	ble.n	8011400 <floor+0x40>
 801146e:	2900      	cmp	r1, #0
 8011470:	da02      	bge.n	8011478 <floor+0xb8>
 8011472:	2b14      	cmp	r3, #20
 8011474:	d103      	bne.n	801147e <floor+0xbe>
 8011476:	3101      	adds	r1, #1
 8011478:	ea20 0002 	bic.w	r0, r0, r2
 801147c:	e7c0      	b.n	8011400 <floor+0x40>
 801147e:	2401      	movs	r4, #1
 8011480:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011484:	fa04 f303 	lsl.w	r3, r4, r3
 8011488:	4418      	add	r0, r3
 801148a:	42a8      	cmp	r0, r5
 801148c:	bf38      	it	cc
 801148e:	1909      	addcc	r1, r1, r4
 8011490:	e7f2      	b.n	8011478 <floor+0xb8>
 8011492:	2000      	movs	r0, #0
 8011494:	4601      	mov	r1, r0
 8011496:	e7b3      	b.n	8011400 <floor+0x40>
 8011498:	8800759c 	.word	0x8800759c
 801149c:	7e37e43c 	.word	0x7e37e43c
 80114a0:	bff00000 	.word	0xbff00000
 80114a4:	000fffff 	.word	0x000fffff

080114a8 <nan>:
 80114a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80114b0 <nan+0x8>
 80114ac:	4770      	bx	lr
 80114ae:	bf00      	nop
 80114b0:	00000000 	.word	0x00000000
 80114b4:	7ff80000 	.word	0x7ff80000

080114b8 <scalbn>:
 80114b8:	ee10 1a90 	vmov	r1, s1
 80114bc:	b510      	push	{r4, lr}
 80114be:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80114c2:	b98c      	cbnz	r4, 80114e8 <scalbn+0x30>
 80114c4:	ee10 3a10 	vmov	r3, s0
 80114c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80114cc:	430b      	orrs	r3, r1
 80114ce:	d011      	beq.n	80114f4 <scalbn+0x3c>
 80114d0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8011598 <scalbn+0xe0>
 80114d4:	4b3c      	ldr	r3, [pc, #240]	; (80115c8 <scalbn+0x110>)
 80114d6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80114da:	4298      	cmp	r0, r3
 80114dc:	da0b      	bge.n	80114f6 <scalbn+0x3e>
 80114de:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80115a0 <scalbn+0xe8>
 80114e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80114e6:	e005      	b.n	80114f4 <scalbn+0x3c>
 80114e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80114ec:	429c      	cmp	r4, r3
 80114ee:	d107      	bne.n	8011500 <scalbn+0x48>
 80114f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80114f4:	bd10      	pop	{r4, pc}
 80114f6:	ee10 1a90 	vmov	r1, s1
 80114fa:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80114fe:	3c36      	subs	r4, #54	; 0x36
 8011500:	4404      	add	r4, r0
 8011502:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8011506:	429c      	cmp	r4, r3
 8011508:	dd0d      	ble.n	8011526 <scalbn+0x6e>
 801150a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80115a8 <scalbn+0xf0>
 801150e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80115b0 <scalbn+0xf8>
 8011512:	eeb0 6b47 	vmov.f64	d6, d7
 8011516:	ee10 3a90 	vmov	r3, s1
 801151a:	2b00      	cmp	r3, #0
 801151c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011520:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011524:	e7e6      	b.n	80114f4 <scalbn+0x3c>
 8011526:	2c00      	cmp	r4, #0
 8011528:	dd0a      	ble.n	8011540 <scalbn+0x88>
 801152a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801152e:	ec53 2b10 	vmov	r2, r3, d0
 8011532:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011536:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801153a:	ec43 2b10 	vmov	d0, r2, r3
 801153e:	e7d9      	b.n	80114f4 <scalbn+0x3c>
 8011540:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8011544:	da19      	bge.n	801157a <scalbn+0xc2>
 8011546:	f24c 3350 	movw	r3, #50000	; 0xc350
 801154a:	4298      	cmp	r0, r3
 801154c:	ee10 3a90 	vmov	r3, s1
 8011550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011554:	dd09      	ble.n	801156a <scalbn+0xb2>
 8011556:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80115a8 <scalbn+0xf0>
 801155a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80115b0 <scalbn+0xf8>
 801155e:	eeb0 7b40 	vmov.f64	d7, d0
 8011562:	2b00      	cmp	r3, #0
 8011564:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8011568:	e7bb      	b.n	80114e2 <scalbn+0x2a>
 801156a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80115a0 <scalbn+0xe8>
 801156e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80115b8 <scalbn+0x100>
 8011572:	eeb0 7b40 	vmov.f64	d7, d0
 8011576:	2b00      	cmp	r3, #0
 8011578:	e7f4      	b.n	8011564 <scalbn+0xac>
 801157a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801157e:	ec53 2b10 	vmov	r2, r3, d0
 8011582:	3436      	adds	r4, #54	; 0x36
 8011584:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011588:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801158c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80115c0 <scalbn+0x108>
 8011590:	ec43 2b10 	vmov	d0, r2, r3
 8011594:	e7a5      	b.n	80114e2 <scalbn+0x2a>
 8011596:	bf00      	nop
 8011598:	00000000 	.word	0x00000000
 801159c:	43500000 	.word	0x43500000
 80115a0:	c2f8f359 	.word	0xc2f8f359
 80115a4:	01a56e1f 	.word	0x01a56e1f
 80115a8:	8800759c 	.word	0x8800759c
 80115ac:	7e37e43c 	.word	0x7e37e43c
 80115b0:	8800759c 	.word	0x8800759c
 80115b4:	fe37e43c 	.word	0xfe37e43c
 80115b8:	c2f8f359 	.word	0xc2f8f359
 80115bc:	81a56e1f 	.word	0x81a56e1f
 80115c0:	00000000 	.word	0x00000000
 80115c4:	3c900000 	.word	0x3c900000
 80115c8:	ffff3cb0 	.word	0xffff3cb0

080115cc <_init>:
 80115cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ce:	bf00      	nop
 80115d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115d2:	bc08      	pop	{r3}
 80115d4:	469e      	mov	lr, r3
 80115d6:	4770      	bx	lr

080115d8 <_fini>:
 80115d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115da:	bf00      	nop
 80115dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115de:	bc08      	pop	{r3}
 80115e0:	469e      	mov	lr, r3
 80115e2:	4770      	bx	lr
